#include <bits/stdc++.h>

using namespace std;

const int N = 1e4 + 10;

int a[N], cs[N], t[N];

const int MAXN = 1e4;
bool is_prime[MAXN + 1];
int prime[MAXN + 1];
bool idx[MAXN + 1];
int psz;

void sieve()
{
    fill(is_prime, is_prime + MAXN + 1, true);
    int c = -1;
    is_prime[0] = false;
    is_prime[1] = false;
    for (int i = 0; i * i <= MAXN; ++i)
    {
        if (is_prime[i] == true)
        {
            for (int j = i * i; j <= MAXN; j += i)
            {
                is_prime[j] = false;
            }
        }
    }
    for (int i = 0; i <= MAXN; i++)
    {
        if (is_prime[i] == true)
        {
            prime[++c] = i;
        }
        idx[i] = c;
    }
    psz = c + 1;
}

int main()
{
    sieve();
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &a[i]);
    }
    cs[0] = 0;
    for (int i = 1; i <= n; i++)
    {
        cs[i] = cs[i - 1] + a[i - 1];
    }
    fill(t, t + N, 0);
    for (int i = 1; i < n; i++)
    {
        t[i] = t[i - 1];
        for (int j = 0; prime[j] - 1 <= i; j++)
        {
            int pos = i - prime[j] - 1;
            if (pos < 0)
            {
                t[i] = max(t[i], cs[i + 1] - cs[pos + 2]);
            }
            else
            {
                t[i] = max(t[i], t[pos] + cs[i + 1] - cs[pos + 2]);
            }
        }
    }
    printf("%d\n", t[n - 1]);
    return 0;
}

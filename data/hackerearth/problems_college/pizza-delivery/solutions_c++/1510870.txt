#include<iostream>
using namespace std;
//int dist[][];
void floydWarshell (int **dist,int V)
{
    /* dist[][] will be the output matrix that will finally have the shortest 
      distances between every pair of vertices */
    int i, j, k;
 
    /* Initialize the solution matrix same as input graph matrix. Or 
       we can say the initial values of shortest distances are based
       on shortest paths considering no intermediate vertex. */
    /* Add all vertices one by one to the set of intermediate vertices.
      ---> Before start of a iteration, we have shortest distances between all
      pairs of vertices such that the shortest distances consider only the
      vertices in set {0, 1, 2, .. k-1} as intermediate vertices.
      ----> After the end of a iteration, vertex no. k is added to the set of
      intermediate vertices and the set becomes {0, 1, 2, .. k} */
    for (k = 0; k < V; k++)
    {
        // Pick all vertices as source one by one
        for (i = 0; i < V; i++)
        {
            // Pick all vertices as destination for the
            // above picked source
            for (j = 0; j < V; j++)
            {
                // If vertex k is on the shortest path from
                // i to j, then update the value of dist[i][j]
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
 
    // Print the shortest distance matrix
    //printSolution(dist);
}
main()
{
	int n;
	cin>>n;
	int **t=new int*[100000];
	for(int i=0;i<n;i++)
	{
		t[i]=new int[100000];
		for(int j=0;j<n;j++)
			cin>>t[i][j];
	}
	int q;
	cin>>q;
	floydWarshell (t,n);
	int src,g,dest;
	while(q--)
	{
		cin>>src>>g>>dest;
		int z1=t[src][g]+t[g][dest];
		cout<<z1;
		int z2=t[src][dest];
		cout<<" "<<z1-z2<<"\n";
	}
}
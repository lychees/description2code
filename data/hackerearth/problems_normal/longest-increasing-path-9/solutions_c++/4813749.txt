//hackerearth
//longest increasing path
//dynamic programming
#include<bits/stdc++.h>
using namespace std;
int arr[100][100];
int dp[100][100];
int main()
{
	long long int t,n,m,i,j;
	cin>>t;
	while(t--)
	{
		int ans=1;
		cin>>n>>m;
		for(i=1;i<=n;i++)
		{
			for(j=1;j<=m;j++)
			{
				cin>>arr[i][j];
			}
		}
		dp[1][1]=1;
		for(i=2;i<=m;i++)
		{
			if((arr[1][i]>arr[1][i-1])&&(dp[1][i-1]!=0))
			{
				dp[1][i]=1+dp[1][i-1];
			}
			else
			dp[1][i]=0;
			ans=max(ans,dp[1][i]);
		}
		for(i=2;i<=n;i++)
		{
			if((arr[i][1]>arr[i-1][1])&&(dp[i-1][1]!=0))
			{
				dp[i][1]=1+dp[i-1][1];
			}
			else
			dp[i][1]=0;
			ans=max(ans,dp[i][1]);
		}
		for(i=2;i<=n;i++)
		{
			for(j=2;j<=m;j++)
			{
				{
					int x=0,y=0;
					if(arr[i][j]>arr[i-1][j] && dp[i-1][j]!=0)
					x=1+dp[i-1][j];
					if(arr[i][j]>arr[i][j-1] && dp[i][j-1]!=0)
					y=1+dp[i][j-1];
					dp[i][j]=max(x,y);
					ans=max(ans,dp[i][j]);
				}
			}
		}
		cout<<ans<<endl;
	}
}
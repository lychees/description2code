// DP Set 28 : Minimum insertions to form a palindrome
#include <iostream>
#include <algorithm>
using namespace std;

int lps(string s,string str,int n) {
	int dp[2][10000];
	int i,j,k;
	for(i=0;i<2;i++) {
		for(j=0;j<=n;j++) {
			if(i==0 || j==0)
				dp[i][j] = 0;
		}
	}
	for(i=1;i<=n;i++) {
		for(j=1;j<=n;j++) {
			if(str[i-1] == s[j-1])
				dp[1][j] = dp[0][j-1]+1;
			else {
				dp[1][j] = max(dp[0][j],dp[1][j-1]);
			}
		}
		for(j=0;j<=n;j++)
			dp[0][j] = dp[1][j];
	}
	return dp[1][n];
}
 
int miniinsert(string str) {
	string s;
	s = str;
        reverse(s.begin(),s.end());
	int n = str.length();
	return n - lps(str,s,n);
}

int main() {
		int t,des;
		string str;
		cin >> t;
		while(t--) {
			cin >> des >> str;
			cout << miniinsert(str) << endl;
		}
	
	return 0;
}
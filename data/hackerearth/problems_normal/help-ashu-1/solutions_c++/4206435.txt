#include "bits/stdc++.h"
using namespace std;
const int N = 1e5+1;
int arr[N];
int tree[1000001];

void build(int node, int st, int en){
    if(st == en){
       if(arr[st]%2==0) tree[node]=1;
       else{tree[node]=0;}
    }else{
        int left = 2*node;
        int right = 2*node + 1;
        int mid = (st+en)/2;
         build(left,st,mid);
         build(right,mid+1,en);
        tree[node]=tree[left]+tree[right];
    }
}

int query(int node, int st, int en, int l, int r){
    if(st == l && en == r){
        return tree[node];
    }else{
        int mid = (st+en)/2;
        if(r <= mid){
            return query(2*node,st,mid,l,r);
        }else if(l > mid){
            return query(2*node+1,mid+1,en,l,r);
        }else{
            return query(2*node,st,mid,l,mid) + query(2*node+1,mid+1,en,mid+1,r);
        }
    }
}

void update(int node, int st, int en, int ind, int val){
    if(st == en && ind == st){
        arr[ind]=val;
        if(arr[st]%2==0) tree[node]=1;
        else{tree[node]=0;}
    }else{
        int mid = (st+en)/2;
        if(ind <= mid)  update(2*node,st,mid,ind,val);
        else{ update(2*node+1,mid+1,en,ind,val);}
        tree[node] = tree[2*node]+tree[2*node+1];
    }
}

int main(){
    int n;
    //scanf("%d",&n);
    cin >> n;
    for(int i = 1; i <= n; ++i) cin >> arr[i];
    build(1,1,n);
    int q;
    //scanf("%d",&q);
    cin >> q;
    while(q--){
        int type,x,y;
        //scanf("%d %d %d",&type,&x,&y);
        cin >> type >> x >> y;
        if(type == 0) update(1,1,n,x,y);
        if(type == 1) cout << query(1,1,n,x,y) << endl;
        if(type == 2) cout << (y-x+1) - query(1,1,n,x,y) << endl;
    }
    return 0;
}

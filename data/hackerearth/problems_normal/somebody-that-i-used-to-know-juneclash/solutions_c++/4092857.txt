#pragma GCC optimize "-Ofast"
#include <iostream>
#include <fstream>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <bitset>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <queue>


typedef long long ll;
typedef long double ld;

using namespace std;

const int MAXN = 305;
const ll INF = 1e18;

int en[MAXN][MAXN][4];
ll dp[MAXN][MAXN][4];
int n, m;
ll go[MAXN];


int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < n; ++j) {
			for (int k = 0; k < 3; ++k)
				dp[i][j][k] = INF;
			if (i == j)
				dp[i][j][1] = 0;
		}
	for (int i = 0; i < n; ++i)
		en[i][i][1] = 1, go[i] = INF;
	for (int i = 0; i < m; ++i) {
		int a, b;
		ll w;
		char c;
		scanf("%d%d%lld %c", &a, &b, &w, &c);
		--a;
		--b;
		if (c == ')')
			dp[a][b][0] = w;
		else
			dp[a][b][2] = w;
		go[a] = min(go[a], w);
	}

	while (true) {
		ll mn = INF;
		int a = 0, b = 0, c = -1;
		for (int i = 0; i < n; ++i)
			if (go[i] < mn)
				mn = go[i], a = i;
		if (mn >= INF)
			break;
		for (int j = 0; j < n && c == -1; ++j) {
			for (int k = 0; k < 3; ++k) {
				if (!en[a][j][k] && dp[a][j][k] == mn) {
					b = j;
					c = k;
					break;
				}
			}
		}
		en[a][b][c] = 1;


		for (int k = 0; k < 3; ++k) {
			if (abs(c - 1 + k - 1) > 1 || (c == 0 && k == 2))
				continue;
			for (int j = 0; j < n; ++j) {
					dp[a][j][c - 1 + k - 1 + 1] = min(dp[a][j][c - 1 + k - 1 + 1], dp[a][b][c] + dp[b][j][k]);
			}
		}
		for (int k = 0; k < 3; ++k) {
			if (abs(c - 1 + k - 1) > 1 || (k == 0 && c == 2))
				continue;
			for (int j = 0; j < n; ++j) {
				if (dp[j][b][c - 1 + k - 1 + 1] > dp[a][b][c] + dp[j][a][k] && !en[j][b][c - 1 + k - 1 + 1]) {
					dp[j][b][c - 1 + k - 1 + 1] = dp[a][b][c] + dp[j][a][k];
					go[j] = min(go[j], dp[a][b][c] + dp[j][a][k]);
				}
			}
		}
		



		go[a] = INF;
		for (int j = 0; j < n; ++j)
			for (int k = 0; k < 3; ++k)
				if (!en[a][j][k])
					go[a] = min(go[a], dp[a][j][k]);
	}
	

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (dp[i][j][1] >= INF)
				cout << -1 << " ";
			else
				cout << dp[i][j][1] << " ";
		}
		cout << "\n";
	}

	return 0;
}



#include<bits/stdc++.h>
using namespace std;

const int bs = 1000000007;

int L, C;

long long n, x;
string st;

int done[3000];
char res[3000];
long long len[3000];

int solve(int id, long long ps)
{
	if (id <= L)
		return id;
	for (int i = id - L; i < id; i++)
	{
		if (len[i] >= ps)
		{
			return solve(i, ps);
		}
		ps -= len[i];
	}
}

long long safe_add(long long a, long long b)
{
	a += b;
	if (a > 1e18)
		a = 1e18;
	return a;
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> L >> C;

	bool bad = 0;

	for (int i = 1; i <= L; i++)
	{
		len[i] = 1;
	}

	for (int i = L + 1; i <= 1000; i++)
	{
		long long res = 0;
		for (int j = i - L; j < i; j++)
		{
			res = safe_add(res, len[j]);
		}
		len[i] = res;
	}

	for (int i = 1; i <= C; i++)
	{
		long long n, x;
		string st;

		cin >> n >> x >> st;

		if (x > 500)
		{
			long long ohead = x - 500;
			long long times = ohead / L + 1;
			x = x - times*L;
		}

		int id = solve(x, n);
		if (done[id] == 1 && res[id] != st[0])
		{
			bad = 1;
		}
		done[id] = 1;
		res[id] = st[0];
	}

	if (bad)
	{
		cout << 0 << endl;
	}
	else
	{
		long long res = 1;
		for (int i = 1; i <= L; i++)
		{
			if (done[i] == 0)
				res = res * 62 % bs;
		}
		cout << res << endl;
	}

	return 0;
}
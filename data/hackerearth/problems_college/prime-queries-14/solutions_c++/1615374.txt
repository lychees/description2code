// LUCIFER <3 SLS <3

#include <bits/stdc++.h>

using namespace std;

#define s(x) scanf("%d", &x)
#define pb push_back

vector <int> p;
int isP[10000];

void sieve()
{
    int i, j;
    for (i = 2; i <= 1000; i++) {
        if (isP[i] == 0) {
            for (j = 2; i*j <= 1000; j++)
                isP[i*j] = 1;
            p.pb(i);
        }
    }
}

int seg[1000000];
int a[1000000];

bool isPrime(int x)
{
    if (x == 1)
        return false;
    int y = sqrt(x);
    for (int i = 0; i < p.size() && p[i] <= y; i++) {
        if (x % p[i] == 0)
            return false;
    }
    return true;
}

void create(int l, int r, int ind)
{
    if (l == r)
        seg[ind] = a[l];
    else {
        int m = (l+r)/2;
        create(l, m, 2*ind+1);
        create(m+1, r, 2*ind+2);
        seg[ind] = max(seg[2*ind+1], seg[2*ind+2]);
    }
}

void update(int l, int r, int i, int val, int ind)
{
    if (l <= i && i <= r) {
        if (l == r)
            seg[ind] = val;
        else {
            int m = (l+r)/2;
            update(l, m, i, val, 2*ind+1);
            update(m+1, r, i, val, 2*ind+2);
            seg[ind] = max(seg[2*ind+1], seg[2*ind+2]);
        }
    }
}

int get_max(int st, int ed, int l, int r, int ind)
{
    if (r < st || ed < l)
        return INT_MIN;
    if (st <= l && r <= ed)
        return seg[ind];
    int m = (l+r)/2;
    return max(get_max(st,ed,l,m,2*ind+1),get_max(st,ed,m+1,r,2*ind+2));
}

int main()
{
    sieve();
    int n, m, i;
    s(n);
    s(m);
    for (i = 0; i < n; i++) {
        s(a[i]);
        if (!isPrime(a[i]))
            a[i] = -1;
    }
    int q, l, r;
    create(0, n-1, 0);
    while (m--) {
        s(q);
        s(l);
        s(r);
        if (!q) {
            l--;
            r = (isPrime(r)? r : -1);
            update(0, n-1, l, r, 0);
        }
        else
            printf("%d\n", get_max(l-1, r-1, 0, n-1, 0));
    }
    return 0;
}

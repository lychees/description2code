//HackerEarth--SumOfDigits
#include<bits/stdc++.h>
#define MAX 65

using namespace std;

typedef long long int lli;

string digits;

lli convert(lli num){
	
	digits.clear();
	lli sum=0;
	
	if(num==0){
		
		digits.push_back('0');
		return sum;
	
	}
	
	else{
		
		
		while(num){
			
			sum+=num%10;
			digits.push_back(num%10+'0');
			num/=10;
			
		}
		
	    reverse(digits.begin(),digits.end());
		
	}
	
	return sum;
	
}

lli dp[MAX][2][9*20];
lli reqdSum;

lli solve(lli idx,lli ok,lli sum){
	
	if(idx==digits.size()){
		
		if(sum==reqdSum) return 1;
		else return 0;	
		
	}
	
	if(dp[idx][ok][sum]!=-1) return dp[idx][ok][sum];
	
	lli count=0,i;
	for(i=0;i<10;i++){
		
		if(ok)
		  count+=solve(idx+1,ok,sum+i);
		  
		else{
		
          if(i<digits[idx]-'0')		
		   count+=solve(idx+1,!ok,sum+i);
		
		 else if(i==digits[idx]-'0')
		   count+=solve(idx+1,ok,sum+i);
		
		}  
			
	}
	
	return dp[idx][ok][sum]=count;
	
}

int main(void){
	
	lli A,B,ans=0,back;
	lli sum;
	
	cin>>A>>B>>reqdSum;
	
	convert(B);
	memset(dp,-1,sizeof dp);
	ans=solve(0,0,0);
	
//	cout<<"ok "<<ans<<endl;
	
	convert(A-1);
	memset(dp,-1,sizeof dp);
	ans-=solve(0,0,0);
	
	lli start=A,end=B,mid;

     memset(dp,-1,sizeof dp);
     back=solve(0,0,0);     
	
	while(start<=end){
		
		mid=(start+end)/2;
		memset(dp,-1,sizeof dp);
		sum=convert(mid);
		
		lli total=solve(0,0,0);
		
		total-=back;	
		if(total==1&&sum==reqdSum)		
		   break;
		   
		if(total>=1)
		  end=mid-1;
		  
		else start=mid+1;  
		  
		  
	}
	
	cout<<ans<<endl;
	cout<<mid;
	
	return 0;
	
}
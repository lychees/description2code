#include<bits/stdc++.h>
using namespace std;
#define MAX 1003
int wt[MAX];
int val[MAX];
int n;
int w;
int dp[MAX][MAX];
int rec(int wet, int pos)
{
	if(wet == 0) return 0;
	if(pos == 0) return 0;
	if(wet < wt[pos-1]) return rec(wet,pos-1);
	return max(rec(wet,pos-1),val[pos-1]+rec(wet-wt[pos-1],pos-1));
	
	
	//return max(rec(pos+1,wet+wt[pos],valu+val[pos]),rec(pos+1,wet,valu));
}
int dpsol(void)
{
	memset(dp,0,sizeof(dp));
	int i;
	int j;
	//dp[i][j] = max_value attainable if positions upto i are considered and wt-limit is j 
	for(i=1;i<=n;++i)
	{
		for(j=1;j<=w;j++)
		{
			if(wt[i]>j) dp[i][j] = dp[i-1][j];
			else
			{
				dp[i][j] = max(dp[i-1][j],val[i]+dp[i-1][j-wt[i]]);
			}
		}
	}
	return dp[n][w];
}
int main()
{
    //cout << "Hello World!" << endl;
    int t;
    cin>>t;
    while(t--)
    {
    	int i;
    	cin>>n>>w;
    	for(i=1;i<=n;++i)
    		cin>>wt[i];
    	for(i=1;i<=n;++i)
    		cin>>val[i];
    	cout<<dpsol()<<endl;
    }
    return 0;
}

/* @nazarbek.altybay */
  
#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cassert>
#include <cstdlib>
#include <queue>
#include <ctime>
  
#define pii pair<int, int>
  
#define pb push_back
#define mp make_pair
  
#define f first
#define s second
  
using namespace std;

typedef long long ll;
typedef double ld;

typedef vector<int> vi;

const double EPS = 1e-9;
const double PI = acos(-1);
  
const int INF = (int) 1e9 + 7;
const int MAXN = (int) 1e3 + 7;

int t, n, k, m;
int dp[MAXN][MAXN];
int a[MAXN];

int bin(int x, int y) {
  int res = 1;
  while (y) {
    if (y & 1)
      res = res * 1ll * x % INF;
    y >>= 1;
    x = x * 1ll * x % INF;
  }
  return res;
}

int main() {
  #ifdef LOCAL
    freopen("in", "r", stdin);
    // freopen("out", "w", stdout);
  #endif

  scanf("%d", &t);
  while (t--) {
    scanf("%d%d%d", &n, &k, &m);
    for (int i = 1; i <= n; i++) {
      scanf("%d", &a[i]);
    }
    dp[0][k % m] = 1;
    for (int i = 1; i <= n; i++) {
      for (int p = 0; p < m; p++) {
        // dont take
        dp[i][p] += dp[i - 1][p];
        dp[i][p] %= INF;
        // take
        int pp = (p * 1ll * a[i]) % m;
        dp[i][pp] += dp[i - 1][p];
        dp[i][pp] %= INF;
      }
    }
    dp[n][k % m]--;
    if (dp[n][k % m] < 0) {
      dp[n][k % m] += INF;
    }
    int sum = 0;
    for (int p = 0; p < m; p++) {
      sum = (sum + 1ll * p * dp[n][p]) % INF;
    }
    sum = (sum + k) % INF;
    int tot = 1;
    for (int i = 0; i < n; i++)
      tot = (tot + tot) % INF;
    printf("%d\n", (sum * 1ll * bin(tot, INF - 2)) % INF);
    memset(dp, 0, sizeof dp);
  }

  return 0;
}
#include <bits/stdc++.h>
using namespace std;
typedef long long int LL;
typedef pair<int, int > pii;
const int MAXN = 2001;
LL P[11] = { 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 };
LL dp[2][MAXN][MAXN];
int profit[MAXN];
int weight[MAXN];
vector<pii > v;
int main() {
	int N, W;
	scanf("%d%d", &N, &W);
	for(int i = 1; i < N + 1; i++) {
		scanf("%d%d", &profit[i], &weight[i]);
		v.push_back(make_pair(profit[i], weight[i]));
	}
	sort(v.begin(), v.end());
	for(int i = 1; i < N + 1; i++) {
		profit[i] = v[i - 1].first;
		weight[i] = v[i - 1].second;
	}
	for(int p = 0; p < 11; p++) 
	for(int i = 1; i < N + 1; i++) 
		for(int j = 1; j < W + 1; j++) {
		if (!p) {
			dp[0][i][j] = (dp[0][i - 1][j]);
			if (j >= weight[i])
				dp[0][i][j] = max(dp[0][i][j], dp[0][i - 1][j - weight[i]] + profit[i]);
		}
		else {
			int cur = p & 1;
			int prev = 1 - cur;
			//dp[cur][i][j] = dp[prev][i][j];
			dp[cur][i][j] = (dp[cur][i - 1][j]);
			//dp[cur][i][j] = max(dp[cur][i][j], dp[cur][i][j - 1]);
			if (j >= weight[i]) {
				dp[cur][i][j] = max(dp[cur][i][j], dp[cur][i - 1][j - weight[i]] + profit[i]);
				dp[cur][i][j] = max(dp[cur][i][j], dp[prev][i - 1][j - weight[i]] + P[p] * profit[i]);
			}
		}
	}
	cout << dp[0][N][W] << endl;
	return 0;
}
/*
By : Yash Kumar
Dhirubhai Ambani Institute Of Information And Communication Technology, Gandhinagar (DA-IICT GANDHINAGAR)
2nd Year ICT BTECH student
*/
#include<bits/stdc++.h>

#define lli long long int
#define llu unsigned long long int
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define AglaIntegerAaneDe(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define AglaStringAaneDe(n) scanf("%s",n);

const double EPS = 1e-24;
const lli MOD = 1000000007ll;
const double PI = 3.14159265359;
int INF = 2147483645;
lli INFINF = 9223372036854775807;

template <class T>T Max2(T a,T b){return a<b?b:a;}
template <class T>T Min2(T a,T b){return a<b?a:b;}
template <class T>T Max3(T a,T b,T c){return Max2(Max2(a,b),c);}
template <class T>T Min3(T a,T b,T c){return Min2(Min2(a,b),c);}
template <class T>T Max4(T a,T b,T c,T d){return Max2(Max2(a,b),Max2(c,d));}
template <class T>T Min4(T a,T b,T c,T d){return Min2(Min2(a,b),Max2(c,d));}

using namespace std;

struct Node
{
    lli value;
    lli lazy;
    Node *l,*r;
    Node()
    {
        value=0;
        lazy=0;
        l=r=NULL;
    }
};

lli N;
Node *rootR,*rootC;
lli lastans=0;

void update(Node *curr,lli s,lli e,lli x,lli y)
{
    if(s==x && e==y)
    {
        curr->lazy^=1;
        //curr->lazyupdate();
    }
    else
    {
        lli mid=(s+e)>>1;
        if(curr->l==NULL && s!=e)
        {
            curr->l=new Node();
            curr->r=new Node();
        }
        if(y<=mid)
        {
            update(curr->l,s,mid,x,y);

            if(curr->r->lazy)
            {
                curr->r->value=e-mid-curr->r->value;
                if(e!=mid+1)
                {
                    if(curr->r->l==NULL && e!=mid+1)
                    {
                        curr->r->l=new Node();
                        curr->r->r=new Node();
                    }
                    curr->r->l->lazy^=1;
                    curr->r->r->lazy^=1;
                }
            }
            curr->r->lazy=0;
        }
        else if(x>mid)
        {
            update(curr->r,mid+1,e,x,y);

            if(curr->l->lazy)
            {
                curr->l->value=mid-s+1-curr->l->value;
                if(s!=mid)
                {
                    if(curr->l->l==NULL && s!=mid)
                    {
                        curr->l->l=new Node();
                        curr->l->r=new Node();
                    }
                    curr->l->l->lazy^=1;
                    curr->l->r->lazy^=1;
                }
            }
            curr->l->lazy=0;
        }
        else
        {
            update(curr->l,s,mid,x,mid);
            update(curr->r,mid+1,e,mid+1,y);
        }
        curr->value=curr->l->value+curr->r->value;
    }
    if(curr->lazy)
    {
        curr->value=e-s+1-curr->value;
        if(s!=e)
        {
            if(curr->l==NULL && s!=e)
            {
                curr->l=new Node();
                curr->r=new Node();
            }
            curr->l->lazy^=1;
            curr->r->lazy^=1;
        }
    }
    curr->lazy=0;
}

lli query(Node *curr,lli s,lli e,lli x,lli y)
{
    if(curr->lazy)
    {
        curr->value=e-s+1-curr->value;
        if(s!=e)
        {
            if(curr->l==NULL && s!=e)
            {
                curr->l=new Node();
                curr->r=new Node();
            }
            curr->l->lazy^=1;
            curr->r->lazy^=1;
        }
    }
    curr->lazy=0;
    if(s==x && e==y)
        return curr->value;
        if(curr->l==NULL && s!=e)
        {
            curr->l=new Node();
            curr->r=new Node();
        }
    lli mid=(s+e)>>1;
    if(y<=mid)
        return query(curr->l,s,mid,x,y);
    else if(x>mid)
        return query(curr->r,mid+1,e,x,y);
    return query(curr->l,s,mid,x,mid) + query(curr->r,mid+1,e,mid+1,y);
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);

    slli(N);
    rootR=new Node();
    rootC=new Node();
    while(N--)
    {
        lli type,x,y,l,r;
        slli(type);
        if(type==1)
        {
            slli(x);slli(l);slli(r);
            l^=lastans;
            r^=lastans;
            if(x==0)
                update(rootR,1,1e18,l,r);
            else
                update(rootC,1,1e18,l,r);
        }
        else
        {
            slli(l);slli(r);slli(x);slli(y);
            l^=lastans;
            r^=lastans;
            x^=lastans;
            y^=lastans;
            lli r1,r2,c1,c2;
            r1=query(rootR,1,1e18,l,r);
            r2=r-l+1-r1;
            c1=query(rootC,1,1e18,x,y);
            c2=y-x+1-c1;
            r1%=MOD;r2%=MOD;c1%=MOD;c2%=MOD;
            lastans=(r1*c2 + r2*c1)%MOD;
            printf("%lld\n",lastans);
        }
    }

    return 0;
}


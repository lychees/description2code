#include <bits/stdc++.h>
 
using namespace std;
 
vector < int > v;
set < int > s;
 
int main()
{
 
    int t , n;
 
    cin >> t;
 
    while(t--){
 
        s.clear();
        v.clear();
 
        cin >> n;
 
        v.push_back(n);
 
        bool found = false;
        if(n == 1) found = true;
 
        int ans = 0;
        int con = 1;
        int i = 0;
 
        while(!found){                              // start a bfs solution
 
            ans++;
            for(i; i < con; i++){
 
                int fi = -1, se = -1, th = -1;
 
                if(v[i] % 3 == 0) fi = v[i] / 3;        // check if the number is divisible by 3
                if(v[i] % 2 == 0) se = v[i] / 2;        // check if the number is divisible by 2
                th = v[i] - 1;
 
                if(fi != -1) if (s.find(fi) == s.end()){        // check if the number is visited before
 
                    s.insert(fi);                               // insert this number as visited
                    v.push_back(fi);                            // push the new number in the queue
                }
 
                if(se != -1) if (s.find(se) == s.end()){
 
                    s.insert(se);
                    v.push_back(se);
                }
 
                if(s.find(th) == s.end()){
 
                    s.insert(th);
                    v.push_back(th);
                }
 
                if(fi == 1 || se == 1 || th == 1) found = true;             // case to break the loop
            }
 
            i = con;
            con = v.size();
        }
 
        cout << ans << "\n";
 
    }
 
    return 0;
}

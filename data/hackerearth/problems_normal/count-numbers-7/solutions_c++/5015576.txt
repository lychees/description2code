
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  @ All power is within you; you can do anything and everything. Believe in that, do not believe that you are  @
  @ weak; do not believe that you are half-crazy lunatics, as most of us do nowadays. You can do any thing and @
  @ everything, without even the guidance of any one. Stand up and express the divinity within you.            @
  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ */

#include<bits/stdc++.h>
#define fori(a,b) for(ll i=a;i<b;i++)
#define forj(a,b) for(ll j=a;j<b;j++)
#define fork(a,b) for(ll k=a;k<b;k++)
#define fori1(a,b) for(ll k=a;k<=b;k++)
#define ford(a,b) for (int i = b-1; i >= a; --i)
#define ll long long
#define mod 1000000007
#define nax 1000005
#define inf 100000000000000000LL
#define pll pair<ll,ll>
#define distSqr(x1,y1,x2,y2) ( sqr(x1-x2) + sqr(y1-y2) )
#define eps 1e-9
#define plll pair<ll,pair<ll,ll> >
using namespace std;
ll a,b,c,d,e,f,g,h,k,l,m,n,o,p,q,r,s,t,u,w,x,y,z;
ll arr[1000005];
ll brr[1000005];
int dp[1005][1005];
ll fac[nax];
ll inv [nax];
vector<ll> v[1000005];
ll fastmod( ll w, ll e,ll MOD){ll a,b,ans=1;a=w;b=e;while(b>0){if(b%2==1){ans=((ans)*(a))%MOD;}a=((a)*(a))%MOD;b=b/2;}return ans;}
void cal(){fac[0]=1;inv[0]=1;fori(1,nax){fac[i]=(fac[i-1]*i)%mod;inv[i]=(inv[i-1]*fastmod(i,mod-1,mod))%mod;}}
ll C(ll n,ll r){return (((fac[n]*inv[r])%mod)*inv[n-r])%mod;}
string s1,s2;



ll prime[15];




int main()
{
    ll A,B,kk;
    cin>>kk>>t;
    fori(0,kk)
    cin>>prime[i];
    fori(0,t)
    {
        ll sum=0;
        cin>>A>>B;

        forj(0,(1<<kk))
        {
            ll mul = 1;
            ll flag=0;
            ll cnt =0;
            fork(0,kk)
            {

                if((j&(1<<k)))
                {


                    mul*=prime[k];
                    cnt++;
                }
               // cout<<mul<<"\n";
                if(mul > B)
                {
                    flag=1;
                    break;
                }

            }
            if(!flag && mul!=1)
            {
               if(cnt&1)
               sum= sum + B/mul - (A-1)/mul ;
               else
                sum=sum -(B/mul - (A-1)/mul);
            }
        }
        cout<<sum<<"\n";


    }

}


from fractions import gcd


def solveDP(pos, sumD, sumSq, check):
    if pos == -1:
        return 1 if gcd(sumD, sumSq) == 1 else 0

    if not check and dp[pos][sumD][sumSq] != -1:
        return dp[pos][sumD][sumSq]
    ans, endDig = 0, 0
    endDig = digits[pos] if check else 9

    for curDig in xrange(0, endDig + 1):
        ans += solveDP(pos - 1, sumD + curDig, sumSq + curDig *
                       curDig, check and curDig == endDig)

    if not check:
        dp[pos][sumD][sumSq] = ans
    return ans


def solve(N):
    if N == 0:
        return 0
    length = 0
    while N:
        digits[length] = N % 10
        N /= 10
        length += 1
    return solveDP(length - 1, 0, 0, 1)

if __name__ == '__main__':
    dp = [[[-1] * 1500 for i in xrange(200)] for j in xrange(20)]
    digits = [0] * 20

    for _ in xrange(input()):
        l, r = map(int, raw_input().split())
        print solve(r) - solve(l - 1)

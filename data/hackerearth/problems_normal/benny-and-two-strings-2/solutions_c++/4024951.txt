/*
*/

//#pragma comment(linker, "/STACK:16777216")
#define _CRT_SECURE_NO_WARNINGS

#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <assert.h>

#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash
#define norm asdfasdgasdgsd

#define eps 1e-9
#define M_PI 3.141592653589793
#define bs 10000007
#define bsize 350

using namespace std;

const int INF = 1e9;
const int N = 4040;

int n, m, k;
string st1, st2;

int mov[1000][200];
int dp[3][777][777];

int get_cost(char a, int b)
{
	a -= 'a';
	int res = abs(a - b);
	res = min(res, 26 - res);
	return res;
}

bool is_suf(string st)
{
	string Z = st1;
	if (st.size() > Z.size())
		return false;
//	reverse(st.begin(), st.end());
//	reverse(Z.begin(), Z.end());
	for (int i = 0; i < st.size(); i++)
	{
		if (st[i] != Z[i])
			return false;
	}
	return true;
}

int main(){
	//freopen("fabro.in","r",stdin);
	//freopen("fabro.out","w",stdout);
	//freopen("F:/in.txt", "r", stdin);
	//freopen("F:/output.txt", "w", stdout);
	ios_base::sync_with_stdio(0);
	//cin.tie(0);

	cin >> n >> m >> k;
	cin >> st1;
	cin >> st2;

	for (int pref = 0; pref <= st1.size(); pref++)
	{
		for (int ad = 0; ad < 26; ad++)
		{
			string temp = "";
			for (int i = 0; i < pref; i++)
			{
				temp += st1[i];
			}
			temp += char(ad + 'a');
			while (!is_suf(temp))
				temp.erase(temp.begin());
			mov[pref][ad] = temp.size();
		}
	}

	//cout << mov[0][0] << endl;

	for (int i = 0; i <= n; i++)
	{
		for (int j = 0; j <= k; j++)
		{
			dp[0][i][j] = -1e9;
		}
	}

	dp[0][0][0] = 0;

	//cout << get_cost('z', 0) << endl;

	for (int len = 0; len < m; len++)
	{
		for (int i = 0; i <= n; i++)
		{
			for (int j = 0; j <= k; j++)
			{
				dp[1 - len % 2][i][j] = -1e9;
			}
		}
		for (int i = 0; i <= n; i++)
		{
			for (int j = 0; j <= k; j++)
			{
				if (dp[len % 2][i][j] < 0)
					continue;
				
				for (int ad = 0; ad < 26; ad++)
				{
					int cost = get_cost(st2[len], ad) + j;
					if (cost>k)
						continue;
				//	cout << len<<" "<<i<<" "<<cost << "%" << j << " " << ad<<" "<<mov[i][ad]<<endl;
					dp[1 - len % 2][mov[i][ad]][cost] = max(dp[1 - len % 2][mov[i][ad]][cost], dp[len % 2][i][j] + (mov[i][ad] == n));
				}
			}
		}
	}

	int ans = 0;

	for (int i = 0; i <= n; i++)
	{
		for (int j = 0; j <= k; j++)
		{
			ans = max(ans, dp[m % 2][i][j]);
		}
	}
	cout << ans << endl;

	cin.get(); cin.get();
	return 0;
}
#include <iostream>
#include <algorithm>

using namespace std;

struct cust
{
	long id;
	long taxiId;
	long S, J;
	cust(long _id, long _S, long _J)
	{
		id = _id;
		S = _S;
		J = _J;
	}
};

bool mysort(cust c1, cust c2)
{
	if(c1.S < c2.S)
		return true;
	return false;
}

int main()
{
    long N, M;
    cin >> N >> M;
    
    vector<long> willBeFreeAt(M);
    vector<cust> customers;
    vector<long> assigned(N);
    
    for(long i = 0; i < M; i++)
    	willBeFreeAt[i] = 0;
    	
    for(long i = 0; i < N; i++)
    	assigned[i] = -1;
    	
    for(long i = 0; i < N; i++)
    {
    	long S, J;
    	cin >> S >> J;
    	customers.push_back(cust(i, S, J));
    }
    
    sort(customers.begin(), customers.end(), mysort);
    
    for(auto c : customers)
    {
    	//cout << c.id << endl;
    	for(long i = 0; i < willBeFreeAt.size(); i++)
    	{
    		if(willBeFreeAt[i] <= c.S)
    		{
    			assigned[c.id] = i + 1;
    			willBeFreeAt[i] = c.S + c.J;
    			break;
    		}
    	}
    }
    
    for(auto i : assigned)
    	cout << i << " ";
    cout << endl;
    
    return 0;
}

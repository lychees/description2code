#include <vector>
#include <queue>
#include <map>
#include <set>
#include <utility> //Pair
#include <algorithm>
//#include <sstream> 
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
//#include <limits>

using namespace std;
  
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
//typedef istringstream iss;
//typedef ostringstream oss;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define finc(i,a,n) for(int i=a;i<=n;i++)
#define fdec(i,n,a) for(int i=n;i>=a;i--)
#define all(a) a.begin(),a.end()
#define ESP (1e-9)
#define INF (1e9) 
#define MOD 1000000000+7
#define fill(space,a) memset(space,a,sizeof(space))

int dp[2005][2005];

int ways(int negative,int positive){
	if(negative == 0 && positive == 0){
		return 1;
	}
	
	if(dp[negative][positive]  == -1){
		int ret =0;
		if(negative > 0)
			ret += ways(negative-1,positive);
		if(ret >= MOD) ret -= MOD;

		if(positive > 0)
			ret += ways(negative,positive-1);
		if(ret >= MOD) ret -= MOD;

		dp[negative][positive] = ret;

	}
	return dp[negative][positive];

}


int main(){
    
	int n,k,t;cin >> n >> k >> t;
	int arr[k];
	int sum=0;
	fill(dp,-1);
	for(int i=0;i<k;i++){
		cin >> arr[i];
		sum += arr[i];	
	} 

	t -= sum;
	if(t < -k || t > k){
		cout << 0 << endl;
		return 0;
	}
	ll ans=0;
	for(int i=0;i<=k;i++){
		if(k-i-i == t){
			ans += ways(i,k-i);
		}
	}
    cout << ans << endl;
    return 0;   
}

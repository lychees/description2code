#include<bits/stdc++.h>
using namespace std;
std::vector<long int>v[100005];
bool visited[100005]={false};
long int a[100005];
long int cc[100005]={0};
long int counter[100005]={0};
void dfs(long int s,long int id){
    visited[s]=true;
    cc[s]=id;
    for(long int i=0;i<v[s].size();i++){
        if(visited[v[s][i]]==false){
            dfs(v[s][i],id);
        }
    }
}
int main()
{
    long int n,m;
    cin>>n>>m;
    for(long int i=1;i<=n;i++){
        cin>>a[i];
    }
    for(long int i=0;i<m;i++){
        long int x,y;
        cin>>x>>y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    long int id=0;
    for(long int i=1;i<=n;i++){
        if(visited[i]==false){
                id++;
            dfs(i,id);
        }
    }
    for(long int i=1;i<=n;i++){
        counter[cc[i]]++;
    }
    std::priority_queue<long int> p[100005];
    for(long int i=1;i<=n;i++){
        p[cc[i]].push(a[i]);
    }
    //for(long int i=1;i<=id;i++){
    //    sort(p[i].begin(),p[i].end());
    //}
    long int c=0,counting,sum=1;
    for(int i=1;i<=id;i++){
        if(!p[i].empty()){
        c=p[i].top();
        counting=0;
        while(p[i].empty()==0 && p[i].top()==c){
            counting++;
            p[i].pop();
        }
        if(counting>0){
        sum=(sum*counting)%1000000007;
        }
    }
    }
    cout<<sum<<endl;
}

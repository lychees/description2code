#include <iostream>
#include <utility>
using namespace std;

struct combo{
	int f;
	int s;
};

int root(int a[],int i){
	while(a[i]!=i)
		i=a[a[i]];
	return i;
}

void unio(int a[],int size[],int x,int y){
	int root_x=root(a,x);
	int root_y=root(a,y);
	if(size[root_x]>size[root_y]){
		a[root_y]=root_x;
		size[root_x]+=size[root_y];
	}else{
		a[root_x]=root_y;
		size[root_y]+=size[root_x];
	}
}

void ms(combo p[],bool visited[],int ancestor[],bool chosen[],int size[],int m,int n){
	for(int i=1;i<=m;i++){
		if(chosen[i]){
			int o = p[i].f;
			int s = p[i].s;
			if(root(ancestor,o)==root(ancestor,s)){
				cout << "NO" << endl;
				return;
			}else{
				unio(ancestor,size,o,s);
				visited[o]=true;
				visited[s]=true;
			}
		}
	}
	for(int i=1;i<=n;i++){
		if(!visited[i]){
			cout << "NO" << endl;
			return;
		}
	}
	cout << "YES" <<endl;
}

int main()
{
    //cout << "Hello World!" << endl;
    int t,n,m,a,b,chosen;
    cin >> t;
    while(t--){
    	
    	cin >> n >> m;
    	bool selected[m+1],visited[n+1];
    	int ancestor[n+1],size[n+1];
    	combo p[m+1];
    	for(int i=1;i<=m;i++){
    		cin >> a >> b;
    		p[i].f=a;
    		p[i].s=b;
    		visited[a]=false;
    		visited[b]=false;
    		ancestor[a]=a;
    		ancestor[b]=b;
    		size[a]=1;
    		size[b]=1;
    		selected[i]=false;
    	}
    		
    	for(int i=1;i<=n-1;i++){
    		cin >> chosen;
    		selected[chosen]=true;
    	}
    	ms(p,visited,ancestor,selected,size,m,n);
    }
    return 0;
}

#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <list>
#include <stack>
#include <queue>
#include <algorithm>
using namespace std;

#define MAX(a,b) (a>b?a:b)
#define MIN(a,b) (a<b?a:b)
#define FOR(i,n) for(i=0;i<n;i++)
#define FORJAS(i,j,n) for(i=j;i<n;i++)
#define FORJS(i,j,n) for(i=j;i<=n;i++)
#define MOD 1000000007
#define LEN 100005

char p[LEN];
vector< vector<int> > gragh(LEN);
bool visited[LEN];
int DFS(int v,char color){
	if(visited[v])
		return 0;
	//cout<<v<<endl;
	int invCnt=0;
	if(p[v]=='B' && color!='b')
		invCnt++;
	if(p[v]=='G' && color!='p')
		invCnt++;	
	visited[v]=true;
	//cout<<v<<":"<<invCnt<<endl;
	for(int i=0;i<gragh[v].size();i++){
		invCnt+=DFS(gragh[v][i],(color=='b')?'p':'b');
		///cout<<v<<"->"<<i<<":"<<invCnt<<endl;
	}
	//cout<<v<<":"<<invCnt<<endl;
	return invCnt;
}
int main(){
	int n,m,i,j,x,y;
	cin>>n>>m;
	
	
	FOR(i,n){
		cin>>p[i+1];
		visited[i+1]=false;
	}
	FOR(i,m){
		cin>>x>>y;
		gragh[x].push_back(y);
		gragh[y].push_back(x);
	}

	int minInvCnt=LEN;
	minInvCnt=min(minInvCnt,DFS(1,'b'));
	//cout<<"min:"<<minInvCnt<<endl;
	FOR(i,n){
		visited[i+1]=false;
	}
	minInvCnt=min(minInvCnt,DFS(1,'p'));
	cout<<minInvCnt<<endl;
	return 0;
}
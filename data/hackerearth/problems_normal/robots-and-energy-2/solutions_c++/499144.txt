//Karol Kaszuba
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <vector>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long LL;
typedef vector<LL> VI;
typedef pair<int,int> PII;
typedef double D;
typedef long double LD;
typedef vector<PII> VII;
typedef vector<VI > VVI;

#define FOR(i,x,y) for(int i=(x);i<=(y);++i)
#define REP(i,x) FOR(i,0,(x)-1)
#define FORD(i,x,y) for(int i=(x);i>=(y);--i)
#define VAR(i,c) __typeof(c) i=(c)
#define FORE(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)

#define SIZE(c) (int)((c).size())
#define ALL(c) (c).begin(),(c).end()
#define PB push_back
#define IN insert
#define ER erase
#define MP make_pair
#define ST first
#define ND second
#define IOSYNC ios_base::sync_with_stdio(0)

int czy_pal(const string &s)
{
	REP(i, SIZE(s) / 2)
	{
		if(s[i] != s[SIZE(s) - i - 1])
			return 0;
	}
	return 1;
}

LL value()
{
	set <string> secik;
	string s, t;
	cin >> s;
	int n = SIZE(s);
	REP(i, n)
	{
		t = "";
		FOR(j, i, n - 1)
		{
			t.PB(s[j]);
			secik.IN(t);
		}
	}
	int wyn = 0;
	FORE(it, secik)
	{
		wyn += czy_pal(*it);
	}
	return wyn;
}

const LL mod = 1000000007;

VVI operator* (const VVI &a, const VVI &b)
{
	VI v(100);
	VVI res;
	REP(i, 100)
		res.PB(v);
	
	REP(k, 100)
		REP(i, 100)
			REP(j, 100)
			{
				res[i][j] = (res[i][j] + a[i][k] * b[k][j]) % mod;
			}
	
	return res;
}

VVI M, unit, tab;


void qpot(LL a)
{
	VVI res = unit;
	while(a > 0)
	{
		if(a % 2 == 1)
		{
			res = res * M;
		}
		M = M * M;
		a /= 2;
	}
	tab = tab * res;
}

void wyp(const VVI &a, int roz)
{
	REP(i, roz)
	{
		REP(j, roz)
			cout << a[i][j] << " ";
		cout << "\n";
	}
}

void prepro()
{
	VI v(100);
	REP(i, 100)
	{
		M.PB(v);
		unit.PB(v);
		tab.PB(v);
	}
	REP(i, 100)
	{
		unit[i][i] = 1;
	}
}
void jebaj()
{	
	prepro();
	int n, m, q;
	
	cin >> n >> m;
	REP(i, n)
		REP(j, m)
			tab[0][m * i + j] = value();
			
	cin >> q;
	REP(i, m * n)
		M[i][i] = 1;
	REP(i, q)
	{
		int a, b, c, d;
		cin >> a >> b >> c >> d;
		M[m * a + b][m * c + d]++;
		M[m * c + d][m * a + b]++;
	}
	//wyp(M, m * n);
	LL d;
	cin >> d;
	qpot(d);
	
	REP(i, n)
	{
		REP(j, m)
		{
			cout << tab[0][m * i + j] << " ";
		}
		cout << "\n";
	}
	//wyp(M, n * m);
	//wyp(unit, n * m);
}

int main()
{
	IOSYNC;
	int t;
	t = 1;
	//cin >> t;
	
	REP(i, t) 
	{
		jebaj();
	}
}

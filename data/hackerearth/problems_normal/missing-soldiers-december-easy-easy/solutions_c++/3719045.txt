#include <iostream>
using namespace std;

void merge(int *, int *,int, int , int );
void mergesort(int *a, int *b, int low, int high)
{
    int mid;
    if (low < high)
    {
        mid=(low+high)/2;
        mergesort(a,b,low,mid);
        mergesort(a,b,mid+1,high);
        merge(a,b,low,high,mid);
    }
    return;
}
void merge(int *a, int *b, int low, int high, int mid)
{
    int i, j, k, c[100000], d[100000];
    i = low;
    k = low;
    j = mid + 1;
    while (i <= mid && j <= high)
    {
        if (a[i] < a[j])
        {
            c[k] = a[i];
            d[k] = b[i];
            k++;
            i++;
        }
        else
        {
            c[k] = a[j];
            d[k] = b[j];
            k++;
            j++;
        }
    }
    while (i <= mid)
    {
        c[k] = a[i];
        d[k] = b[i];
        k++;
        i++;
    }
    while (j <= high)
    {
        c[k] = a[j];
        d[k] = b[j];
        k++;
        j++;
    }
    for (i = low; i < k; i++)
    {
        a[i] = c[i];
        b[i] = d[i];
    }
}

int main()
{
	int n;
	cin>>n;
	int a[100000], b[100000];
	for(int i=0;i<n;i++)
	{
		cin>>a[i];
		int k;
		cin>>k;
		cin>>k;
		b[i]=a[i]+k;
	}
	mergesort(a,b,0,n-1);
	int laststart=0;
	int lastend=0;
	for(int i=0;i<n;i++)
	{
		if(laststart<=a[i] && lastend>=a[i] && lastend>=b[i])
		{
			a[i]=1;
			b[i]=0;
		}
		else if(laststart<=a[i] && lastend>=a[i] && lastend<b[i])
		{
			a[i]=lastend+1;
			lastend=b[i];
		}
		else if(lastend<a[i])
		{
			lastend=b[i];
			laststart=a[i];
		}
	}
	int count=0;
	for(int i=0;i<n;i++)
		count+=b[i]-a[i]+1;
	cout<<count<<endl;
    return 0;
}

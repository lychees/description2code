#include <iostream>
#include <cstring>
#include <vector>
using namespace std; 
int ceil(int A[], int l, int r, int key) {
    int m; 
    while( r - l > 1 ) {
        m = l + (r - l)/2;
        (A[m] > key ? r : l) = m;   } 
    return r;
} 
int SLength(vector<int> A, int size) 
{
    int *Tab=new int[size];
    int len;  
    memset(Tab , 0, sizeof(Tab[0])*size); 
    Tab[0] = A[0];
    len = 1;
    for( int i = 1; i < size; i++ ) {
        if( A[i] < Tab[0]) {
            Tab[0] = A[i];
		}
        else if( A[i] >= Tab[len-1])
            Tab[len++] = A[i];
        else
            Tab[ceil(Tab, -1, len-1, A[i])] = A[i];
    }
    delete[] Tab; 
    return len;
}
 
int main() {
	int n;
	cin >> n;
	int si = n;
	vector<int> a(n);
	for(int i = 0; i < n; i++) {
		cin >> a[i];
		a[i] = a[i] - i;
	}
	vector<int> x;
	for(vector<int>::iterator it = a.begin(); it != a.end(); it++) {
		if(*it > 0)
			x.push_back(*it);
	}
	n = x.size();	
	cout<<si-SLength(x, n)<<'\n';
} 
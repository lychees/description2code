#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define mp make_pair
typedef pair<ll,pair<ll,ll> > PII;
struct comp
{
    bool operator()(const PII &p1,const PII &p2)
    {
        if(p1.first!=p2.first)
            return p1.first>p2.first;
        else
        {
            if(p1.second.first!=p2.second.first)
                return p1.second.first<p2.second.first;
            else
                return p1.second.second<p2.second.second;
        }
    }
};
priority_queue<PII,vector<PII>,comp> Q;
ll arr[100001],deg[100001];
void initialize(ll n)
{
    for(ll i=0;i<=n;i++)
    {
        arr[i]=i;
        deg[i]=0;
    }
}
ll root(ll x)
{
    while(arr[x]!=x)
    {
        arr[x]=arr[arr[x]];
        x=arr[x];
    }
    return x;
}
void Merge(ll a,ll b)
{
    ll rootA=root(a);
    ll rootB=root(b);
    arr[rootA]=arr[rootB];
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        while(!Q.empty())
        Q.pop();
        ll n,m,a,b,c,minCost=0;
        scanf("%lld%lld",&n,&m);
        initialize(n);
        for(ll i=0;i<m;i++)
        {
            scanf("%lld%lld%lld",&a,&b,&c);
            Q.push(mp(c,mp(min(a,b),max(a,b))));
        }
        ll u,v;
        while(!Q.empty())
        {
            PII P=Q.top();
            u=P.second.first;
            v=P.second.second;
            //cout<<"u="<<u<<" v="<<v<<endl;
            Q.pop();
            if(root(u)!=root(v))
            {
                //cout<<"Merging:"<<u<<" "<<v<<endl;
                minCost+=P.first;
                Merge(u,v);
                deg[u]++;
                deg[v]++;
            }
        }
        printf("%lld\n",minCost);
        for(ll i=1;i<=n;i++)
            printf("%lld ",deg[i]);
        printf("\n");
    }
    return 0;
}

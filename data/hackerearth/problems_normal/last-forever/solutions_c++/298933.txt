#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <climits>
#include <cfloat>
#include <utility>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <iterator>
#include <complex>
#include <queue>
#include <stack>
#include <cctype>
#include <memory>
#include <ctime>
#include <bitset>
#include <deque>
#include <sstream>
#include <string>
#include <list>
#include <numeric>
#include <iomanip>
#include <cassert>

using namespace std;

typedef long long LL,ll;
typedef unsigned long long ULL,ull;
typedef pair<int,int> pii;
typedef pair<LL,LL> pll;

typedef vector<int> vint;
typedef vector< vector<int> > vvint;
typedef vector<ll> vll,vLL;
typedef vector< vector<ll> > vvll,vvLL;

#define REP(i,n) for(int i=0;i<int(n);i++)
#define REPD(i,n) for(int i=(int)(n-1);i>=0;i--)
#define cases(t) while(t--)

#define mod 1
#define EPS 1e-8

//------------------------------------------------------------------------//


const int MAX = 212345;
int Len[2][MAX],L[2],R[2],N,M;

string str;
vector<pii> Even[MAX],Odd[MAX];
int ans[MAX];

void Build(){
    memset(L,0,sizeof(L));
    memset(R,-1,sizeof(R));

    for(int i = 0; i < N; ++i) for(int p = 0; p < 2; ++p){
        int rc = R[p]-i;
        int k = (i < R[p] ? min(rc+!p,Len[p][L[p]+rc+!p]) : 0) + 1;

        while(i+k-!p < N and i-k >= 0 and str[i+k-!p] == str[i-k]) ++k;
        Len[p][i] = --k;
        if (i+k-!p > R[p])
            R[p] = i+k-!p, L[p] = i-k;
    }
}

int segt[2][MAX];
void fun_update(int idx,int val,int x){
    assert(idx > 0);
    assert(idx < MAX);
    for(; idx < MAX; idx += idx & -idx) segt[x][idx] += val;
}

int fun_query(int idx,int x){
    int sum = 0;
    for(; idx > 0; idx -= idx & -idx) sum += segt[x][idx];
    return sum;
}

int main()
{
	cin >> str;
    N = (int)str.size();
    Build();

    memset(ans,0,sizeof(ans));
    memset(segt,0,sizeof(segt));

    cin >> M;
    assert(N < MAX);
    assert(M < MAX);

    for(int i = 0; i < M; ++i){
        int st,len,mid;
        cin >> st >> len;
        ans[i] += (len == 0 and st < N);
        len = max(len,1);
        mid = len/2;

        if (st+mid < N) Odd[st+mid].push_back(make_pair(st,i));
        if ((st+mid+(len & 1)) < N) Even[st+mid+(len & 1)].push_back(make_pair(st,i));
    }

    for(int i = N-1; i >= 0; --i){
        for(int p = 0; p < 2; ++p){
            int x = i-Len[p][i];
            if (Len[p][i] == 0 and p == 0) continue;
            fun_update(x+1,1,p);
        }

        int sz = Even[i].size();
        for(int j = 0; j < sz; ++j){
            int st = Even[i][j].first, index = Even[i][j].second;
            int res = fun_query(st+1,0);
            ans[index] += res;
        }

        sz = Odd[i].size();
        for(int j = 0; j < sz; ++j){
            int st = Odd[i][j].first, index = Odd[i][j].second;
            int res = fun_query(st+1,1);
            ans[index] += res;
        }
    }

    for(int i = 0; i < M; ++i)
        cout << ans[i] << endl;
	return 0;
}

from collections import deque


def isBipartiate(color, graph, src, n):
    Q = deque()
    Q.appendleft(src)
    color[src] = 1
    while Q:
        i = Q.pop()
        for j in range(1, n + 1):
            if graph[i][j] == 1:
                if color[j] == -1:
                    color[j] = 1 - color[i]
                    Q.appendleft(j)
                else:
                    if color[i] == color[j]:
                        return False
    return True


for t in range(int(raw_input())):
    n, m = map(int, raw_input().split())
    color = [-1 for i in range(n + 1)]
    graph = [[0 for i in range(n + 1)] for j in range(n + 1)]
    for i in range(m):
        x, y = map(int, raw_input().split())
        graph[x][y] = 1
        graph[y][x] = 1
    res = True
    for i in range(1, n + 1):
        if not res:
            break
        if color[i] == -1:
            temp = isBipartiate(color, graph, i, n)
            if not temp:
                res = False
                break
    if res:
        print 'No suspicious lizards found!'
    else:
        print 'Suspicious lizards found!'

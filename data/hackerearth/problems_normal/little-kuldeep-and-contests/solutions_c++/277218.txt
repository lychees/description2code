



// C++03
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <math.h> 
#include <iomanip>
#include <queue> 
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>
#include <set>
#include <stdio.h>
#include <bitset>

#include <iostream>
using namespace std;

typedef unsigned long long  llu;

int main()
{
	int T;
	vector < pair<int, int>> times;
	cin >> T;
	int start, end;
	string time;
	for (int i = 0; i < T; ++i)
	{
		cin >> time;
		start = (time[0] - '0') * 1000 + (time[1] - '0') * 100 +
			(time[3] - '0') * 10 + (time[4] - '0');
		end = (time[6] - '0') * 1000 + (time[7] - '0') * 100 +
			(time[9] - '0') * 10 + (time[10] - '0');
		auto it = times.begin();
		while (times.size() > 0 && it != times.end() && (*it).first < start)
			it++;
		times.insert(it, { start, end });
	}

	sort(times.begin(), times.end());
	for (int j = 0; j < times.size() - 1; ++j)
	{
		if (times[j].second > times[j + 1].first)
		{
			cout << "Will need a moderator!\n";
			return 0;
		}
	}
	cout << "Who needs a moderator?\n";

	return 0;
}
#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
const int N=1000*100+9;
vector<int>G[N];
bool vis[N];
bool vis2[N];
int size[N];
int num[N],low[N];
int tim=0;
int p;
int ans=0;
vector<pair<int,int> >edges;
map<pair<int,int>,int>MP;
void dfs(int curr,int Par,int root){
    num[curr]=low[curr]=++tim;
    int child=0;
    for(auto &to:G[curr] ){
        if(to==Par)continue;
        else if(num[to]==-1){
            child++;
            dfs(to,curr,root);
            low[curr]=min(low[curr],low[to]);
            int diff=abs(size[to]-(size[root]-size[to]));
            if(low[to]>num[curr] && diff<=p){
                ans++;
            }
        }else{
            low[curr]=min(low[curr],num[to]);
        }
    }
    return;
}
void dfs2(int curr){
    vis2[curr]=true;
    size[curr]+=1;
    for(auto &to:G[curr]){
        if(vis2[to])continue;
        dfs2(to);
        size[curr]+=size[to];
    }
    return;
}
int main(){
    int n,m;cin>>n>>m>>p;
    edges.clear();
    for(int i=0;i<m;++i)
    {
        int u,v;cin>>u>>v;
        G[u].pb(v);
        G[v].pb(u);
        edges.pb(mp(u,v));
    }
    memset(vis,0,sizeof vis);
    memset(num,-1,sizeof num);
    tim=0;
    memset(vis2,0,sizeof vis2);
    memset(size,0,sizeof size);
    for(int i=1;i<=n;++i){
        if(vis2[i]==false){
            dfs2(i);    
        }
    }
    ans=0;
    for(int i=1;i<=n;++i)
        if(num[i]==-1)dfs(i,0,i);
    cout<<ans<<"\n";
    return 0;
}//race_gurram
//racegurram_

'''
# Read input from stdin and provide input before running code

name = raw_input('What is your name?\n')
print 'Hi, %s.' % name
'''


def doBFS(graph, visitedRed, visitedBlue, curNode, redColor):
    if redColor and curNode in visitedBlue:
        return False
    if not redColor and curNode in visitedRed:
        return False
    if redColor and curNode in visitedRed:
        return True
    if not redColor and curNode in visitedBlue:
        return True
    if redColor:
        visitedRed.append(curNode)
    else:
        visitedBlue.append(curNode)
    nextNodes = graph[curNode]
    for nextNode in nextNodes:
        nextBfs = doBFS(graph, visitedRed, visitedBlue, nextNode, not redColor)
        if not nextBfs:
            return False
    return True


def colorGraph(graph):
    N = len(graph)
    for nextNode in range(0, N):
        nextBfs = doBFS(graph, [], [], nextNode, True)
        if not nextBfs:
            print "Suspicious lizards found!"
            return
    print "No suspicious lizards found!"


T = int(raw_input())
for i in range(0, T):
    nextLine = raw_input()
    [N, M] = [int(nextLine.split(" ")[0]), int(nextLine.split(" ")[1])]
    graph = []
    for j in range(0, N):
        graph.append([])
    # initialized empty
    for j in range(0, M):
        nextLine = raw_input()
        [src, dest] = [int(nextLine.split(" ")[0])-1,
                       int(nextLine.split(" ")[1])-1]
        graph[src].append(dest)
        graph[dest].append(src)
    # initialized with real values
    colorGraph(graph)

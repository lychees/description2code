def ans(n):
	i= 2
	xor = 0
	check=0
	while(i**2<=n):
		if n%i==0:
			check+=1
			count=0
			while(n%i==0):
				n/=i
				count+=1
			if check==1:
				xor = count
			else:
				xor ^= count
		i+=1
	if n > 1:
		xor^=1
	return xor

def primeFactorisation(n):
	primeFactors = []
	i= 2
	while(i**2<=n):
		if n%i==0:
			count=0
			while(n%i==0):
				n/=i
				count+=1
			primeFactors.append((i,count))
		i+=1
	if n > 1:
		primeFactors.append((n,1))
	return primeFactors
		
def generateHeap(factors):
	heap=[]
	for factor in factors:
		heap.append(factor[1])
	return heap

def takeXOR(heap):
	if len(heap)<2:
		return heap[0]
	xor=heap[0]^heap[1]
	i = 2
	while(i<len(heap)):
		xor^=heap[i]
	return xor
	
T = int(raw_input())
for i in range(T):
	n = int(raw_input())
	if ans(n)==0:
		print "Pappu Bhujia"
	else:
		print "Printf{}"

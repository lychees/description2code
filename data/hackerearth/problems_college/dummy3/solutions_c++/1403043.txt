#include <bits/stdc++.h>
using namespace std;

#define rep1(i, begin, end) for (__typeof(begin) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define rep2(i, begin, end) for (__typeof(begin) i = (begin); i != (end) + 1 - 2 * ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 1005;
const int INF = (int) 2E9;
int n, a[N][N], d[N][N];

typedef pair<int, pair<int, int> > P;
int dx[] = {-1, 1, 0};
int dy[] = { 0, 0, 1}; 

void dijkstra() {
    priority_queue<P, vector<P>, greater<P> > que;
    rep2(i, 1, n) {
    	d[i][1] = a[i][1];
    	que.push(P(a[i][1], make_pair(i, 1)));
    }
    while (!que.empty()) {
        P p = que.top(); que.pop();
        int x = p.second.first, y = p.second.second;
        if (d[x][y] < p.first) continue;
        rep1(i, 0, 3) {
        	int nx = x + dx[i], ny = y + dy[i];
            if (nx > 0 && nx <= n && ny > 0 && ny <= n && d[nx][ny] > d[x][y] + a[nx][ny]) {
                d[nx][ny] = d[x][y] + a[nx][ny];
                que.push(P(d[nx][ny], make_pair(nx, ny)));
            }
        }
    }
}


int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    cin >> n;
    rep2(i, 1, n) rep2(j, 1, n) {
    	cin >> a[i][j];
    	d[i][j] = INF;
    }
    dijkstra();
    int ans = INF;
    rep2(i, 1, n) amin(ans, d[i][n]);
    printf("%d\n", ans);
    return 0;
}

''' HackerEarth - Hasan and Trip
	NguyenDatSE '''

from math import sqrt

def happiness(start, end):
	return end[2] - sqrt((start[0] - end[0])**2 + (start[1] - end[1])**2)

N = int(raw_input())
cities = []

for n in xrange(N):
	cities.append(map(int,raw_input().split()))

# Initial
minValue = float("-inf")
dcache = [[minValue for i in xrange(N)] for j in xrange(N)]
for n in xrange(1, N):
	dcache[0][n] = cities[0][2] + happiness(cities[0], cities[n])

# Iterative solving
for s in xrange(1, N):
	previous = []
	for n in xrange(s):
		previous.append(dcache[n][s])
	maxPrevious = max(previous)
	for d in xrange(s + 1, N):
		dcache[s][d] = maxPrevious + happiness(cities[s], cities[d])

maxHappines = minValue
for n in xrange(N):
	if dcache[n][N - 1] > maxHappines:
		maxHappines = dcache[n][N - 1]

print "%0.6f" % maxHappines
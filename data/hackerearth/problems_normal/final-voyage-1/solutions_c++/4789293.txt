// A Dynamic Programming based solution for 0-1 Knapsack problem
#include<bits/stdc++.h>
using namespace std;
// A utility function that returns maximum of two integers
//int max(int a, int b) { return (a > b)? a : b; }

// Returns the maximum value that can be put in a knapsack of capacity W
int knapSack(int W, int wt[], int val[], int n)
{
   int i, w;
   int K[n+1][W+1];

   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
   
   /*	for(int i=0;i<=n;i++) {
			for(int j=0;j<=w;j++) {
				cout<<K[i][j]<<" ";
			}
			cout<<endl;
		}
*/
   return K[n][W];
}

int main()
{
	int t;
	cin>>t;
	while(t--) {
	int n;
	cin>>n;
	int w;
	cin>>w;
    int val[n];
    int wt[n];
    pair<int,int> mypair[n];
    for(int i=0;i<n;i++)
    	cin>>wt[i];
    for(int i=0;i<n;i++)
    	cin>>val[i];
    for(int i=0;i<n;i++)
    	mypair[i]=make_pair(wt[i],val[i]);
    sort(mypair,mypair+n);
    for(int i=0;i<n;i++) {
    	wt[i]=mypair[i].first;
    	val[i]=mypair[i].second;
    }
    
    //int n = sizeof(val)/sizeof(val[0]);
    printf("%d\n", knapSack(w, wt, val, n));
	}
    return 0;
}
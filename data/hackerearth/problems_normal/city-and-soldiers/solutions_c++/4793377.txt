/*
	Time complexity - 
						find(a, b)	O(log*n)
						union(a, b)	O(log*n)

*/
#include <bits/stdc++.h>
using namespace std;
int n;
int arr[100005];
void initialize(){
	for(int i = 1;i <= n; i++){
		arr[i] = i;
	}
}
int root(int i){
	while(i!=arr[i]){
		arr[i] = arr[arr[i]];
		i = arr[i];
	}
	return i;
}
bool find(int a, int b){
	return root(a) == root(b);
}
void union1(int a, int b){
	int root_a = root(a);
	int root_b = root(b);
	
	if(root_a == root_b)
		return;
	
	arr[root_a] = root_b;
}

int main(){
    scanf("%d", &n);
    initialize();
    int q;
    scanf("%d", &q);
    while(q--){
        int temp;
        cin>>temp;
        if(temp == 1){
            int a, b;
            cin>>a>>b;
            union1(a, b);
        }else if(temp == 2){
            int a;
            cin>>a;
            int root_a = root(a);
            arr[root_a] = arr[a] = a;
        }else{
            int a;
            cin>>a;
            cout<<root(a)<<endl;
        }
    }
	return 0;
}
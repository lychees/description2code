#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

int minimumCut(vector<vi> A) {
	int n = A.size();
	vi V(n);
	rep(i, n) V[i] = i;
	int cut = INF;
	for(int m = n; m > 1; -- m) {
		vi ws(m, 0);
		int u, v = -1;
		int w;
		rep(k, m) {
			u = v;
			v = max_element(all(ws)) - ws.begin();
			w = ws[v];
			ws[v] = -1;
			rep(i, m) if(ws[i] >= 0)
				ws[i] += A[V[v]][V[i]];
		}
		rep(i, m) {
			A[V[i]][V[u]] += A[V[i]][V[v]];
			A[V[u]][V[i]] += A[V[v]][V[i]];
		}
		V.erase(V.begin() + v);
		amin(cut, w);
	}
	return cut;
}


int main() {
	int N; int Q;
	while(~scanf("%d%d", &N, &Q)) {
		vector<vi> A(N+1, vi(N+1));
		rep(i, Q) {
			int a, b;
			scanf("%d%d", &a, &b), -- a;
			A[a][b] += 1;
			A[b][a] += 1;
		}
		int ans = minimumCut(A);
		printf("%d\n", ans);
	}
	return 0;
}

#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
int belong[100002];
int  root(int b){
	if (belong[b] == -1){
		return b;
	}
	belong[b] = root(belong[b]);
	return belong[b];
}
void merge(int a, int b){
	a = root(a);
	b = root(b);
	if (a == b){
		return;
	}
	belong[a] = b;
}
set<int> s;
vector<pair<int, int> > v;
int main(){
	int n;
	cin >> n;
	int m;
	cin >> m;
	memset(belong, -1, sizeof(belong));
	for (int i = 0; i < m; i++){
		int a, b;
		scanf("%d%d", &a, &b);
		a--;
		b--;
		v.push_back(make_pair(a, b));
	}
	for (int i = v.size() - 1; i >= 0; i--){
		if (root(v[i].first) != root(v[i].second)){
			merge(v[i].first, v[i].second);
		}
		else{
			s.insert(i);
		}
	}
	set<int>::iterator ite;
	cout << s.size() << endl;
	for (ite = s.begin(); ite != s.end(); ite++){
		printf("%d\n", (*ite) + 1);
	}
	return 0;
}
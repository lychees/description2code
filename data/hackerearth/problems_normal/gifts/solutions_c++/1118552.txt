#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<string>
#include<map>
#include<cmath>
#include<algorithm>
using namespace std;
typedef long long ll;
map<string,int>m;
int n;
map<string,int> :: iterator it;
ll a[6][100010];
ll tree[125][100010];
void update(int treeIdx,int idx,ll val) {
    while(idx<=n) {
        tree[treeIdx][idx]+=val;
        idx+=(idx&-idx);
    }
    return;
}
ll query(int treeIdx,int idx) {
    ll sum=0;
    while(idx>0) {
        sum+=tree[treeIdx][idx];
        idx-=(idx&-idx);
    }
    return sum;
}
void preprocess() {
    string str="ABCDE";
    int cnt=1;
    do {
        m[str]=cnt++;
    }while(next_permutation(str.begin(),str.end()));
    return;
}
int main() {
	//cin.sync_with_stdio(false);
    preprocess();
    cin>>n;
    for(int i=0;i<5;i++) {
        for(int j=1;j<=n;j++) {
            cin>>a[i][j];
        }
    }
    string s;
    cin>>s;
    s="X"+s;
    string init="ABCDE";
    for(it=m.begin();it!=m.end();it++) {
        string tempString=it->first;
        int treeIdx=it->second;
        for(int j=1;j<=n;j++) {
            update(treeIdx,j,a[tempString[s[j]-'A']-'A'][j]);
        }
    }
    int q;
    scanf("%d",&q);
    string anyString;
    while(q--) {
        cin>>anyString;
        if(anyString=="Qs") {
            int a,b;
            cin>>a>>b;
            printf("%lld\012",query(m[init],b)-query(m[init],a-1));
        }
        else if(anyString=="Qe") {
            char a,b;
            cin>>a>>b;
            swap(init[a-'A'],init[b-'A']);
        }
        else {
            int z;
            char b;
           	cin>>z>>b;
            for(it=m.begin();it!=m.end();it++) {
                int treeIdx=it->second;
                string tempString=it->first;
                ll val=query(treeIdx,z)-query(treeIdx,z-1);
                update(treeIdx,z,a[tempString[b-'A']-'A'][z]-val);
            }
        }
    }
    return 0;
}

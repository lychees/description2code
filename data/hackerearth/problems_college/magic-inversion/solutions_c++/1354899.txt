#include <iostream>
#include <fstream>
#include <cstdio>
#include <climits>
#include <vector>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <set>
#include <string>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <cmath>

using namespace std;

#define ll long long
#define vt vector
const int MAXN = 1000020;
ll tree[MAXN], A[MAXN], B[MAXN];

ll read(int idx)
{
	ll sum = 0;
	while (idx > 0)
	{
		sum += tree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}

void update(int idx ,ll val)
{
	while (idx <= MAXN)
	{
		tree[idx] += val;
		idx += (idx & -idx);
	}
}

int main()
{
	int n;
	scanf("%d",&n);
	memset(tree, 0, sizeof(tree));
	vector<ll> primes;
	primes.push_back(2);
	map<ll,bool> check;
	check[2]=true;
	for(ll i=3;i<=1e6;i+=2)
	{
		bool isprimes=true;
		for(ll j=0;j<primes.size() && primes[j]*primes[j]<=i;j++)
		{
			if(i%primes[j]==0)
			{
				isprimes=false;
				break;
			}
		}
		if(isprimes)
			primes.push_back(i),check[i]=true;
	}
	for(int i = 0; i < n; ++i)
	{
		scanf("%lld",&A[i]);
	}
	for(int i = 0; i < n; ++i)
	{
		scanf("%lld",&B[i]);
	}
	ll count = 0;
	for(int i = n - 1; i >= 0; i--)
	{
		ll x = read(A[i]);
		count += x;
		update(B[i], 1);
	}
	if(check[count])
		printf("MAGIC INVERSION\n");
	else
		printf("SIMPLE INVERSION\n");
	return 0;
}
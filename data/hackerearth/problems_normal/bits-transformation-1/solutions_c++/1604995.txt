#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

const double EPS = 1e-9;
const int MAXN = 2e3 + 10;
const int INF = 1e9;

vi p;
vi q;
int sum[MAXN];
char a[MAXN];
char b[MAXN];
int n;
int x, y, z, t;

int dp[MAXN][MAXN];

int make0(char c) {
  if  (c == '0') {
    return 0;
  }
  if  (c == '1') {
    return y;
  }
  assert(c == '?');
  return z;
}      

int make1(char c) {
  if  (c == '1') {
    return 0;
  }
  if  (c == '0') {
    return x;
  }
  assert(c == '?');
  return z;
}

int solve() {
  scanf("%d%d%d%d%d\n", &n, &x, &y, &z, &t);

//  printf("n = %d, x = %d, y = %d, z = %d, t = %d\n", n, x, y, z, t);
  
  gets(a);
  gets(b);

  q.clear();
  p.clear();
  sum[0] = 0;
  forn(i, n) {
    sum[i + 1] = sum[i] + (b[i] == '1');
    if  (b[i] == '1') {
      q.pb(i);
    } else {
      p.pb(i);
    }
  }

/*
  puts("p:");
  for (int x : p) {
    printf("%d ", x);
  }
  puts("");
  puts("q:");
  for (int x : q) {
    printf("%d ", x);
  }
  puts("");
*/

  forn(i, n + 1) forn(j, n + 1) dp[i][j] = INF;

  dp[0][0] = 0;
  forn(i, n) {
    forn(c1, i + 1) {
      if  (dp[i][c1] >= INF || c1 > sz(q)) {
        continue;
      }

      // make 0
      int cost = dp[i][c1] + make0(a[i]);
      int c0 = i - c1;

      if  (c0 + 1 <= sz(p)) {
        int inv = 0;
        int less1 = sum[p[c0]];
        inv += max(0, c1 - less1);
        dp[i + 1][c1] = min(dp[i + 1][c1], cost + t * inv);
      }

      // make1
      cost = dp[i][c1] + make1(a[i]);
      if  (c1 + 1 <= sz(q)) {
        int inv = 0;
        int less0 = q[c1] - sum[q[c1]];
        inv += max(0, c0 - less0);
        dp[i + 1][c1 + 1] = min(dp[i + 1][c1 + 1], cost + t * inv);
      }
    }
  }
/*
  forn(i, n + 1) {
    forn(c1, n + 1) {
      printf("dp[i=%d][c1=%d] = %d\n", i, c1, dp[i][c1]);
    }
  }
*/
  return dp[n][sum[n]];
}

int main() {
#ifdef LOCAL
  freopen(".in", "r", stdin);
//  freopen(".out", "w", stdout);
#endif

  int T;
  scanf("%d\n", &T);
  while (T--) {
    printf("%d\n", solve());
  }

  return 0;
}

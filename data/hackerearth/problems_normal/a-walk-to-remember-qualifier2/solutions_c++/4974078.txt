#include<bits/stdc++.h>
using namespace std;
vector<int> edge[100001],r_edge[100001],temp;
bool visit[100001];
stack<int> s;
void dfs_trace_tree(int v)
{
	visit[v]=true;
	for(int i=0;i<edge[v].size();i++)
	   if(!visit[edge[v][i]])
	     dfs_trace_tree(edge[v][i]);
	s.push(v);
}
void dfs_scc(int v)
{
	visit[v]=true;
	for(int i=0;i<r_edge[v].size();i++)
    	if(!visit[r_edge[v][i]])
	      dfs_scc(r_edge[v][i]);
	temp.push_back(v);
}
main()
{
	int n,m;
	cin>>n>>m;
	for(int i=0;i<m;i++)
	{
		int temp,temp1;
		cin>>temp>>temp1;
		edge[temp].push_back(temp1);
		r_edge[temp1].push_back(temp);
	}
	memset(visit,0,sizeof(visit));
	for(int i=1;i<=n;i++)
	  if(!visit[i])
	    dfs_trace_tree(i);
	memset(visit,0,sizeof(visit));
//	cout<<"ok1";
	bool ans[n+1];
	memset(ans,0,sizeof(ans));
	while(s.size()>0)
	{
	//	cout<<"ok2";
		int i=s.top();
	  if(!visit[i])
	  {
	  	  dfs_scc(i);
	  	  if(temp.size()>1)
	  	  {
	  	  	for(int i=0;i<temp.size();i++)
	  	  	   ans[temp[i]]=true;
		  }
		  temp.clear();
	  }
	  s.pop();
    }
	for(int i=1;i<=n;i++)
	  cout<<ans[i]<<" ";
}
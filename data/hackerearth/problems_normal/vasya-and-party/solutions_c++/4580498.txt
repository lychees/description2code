#include <bits/stdc++.h>
using namespace std;
#define FOR(i,a,b) for(i= a ; i < b ; ++i)
#define FORi(i,a,b) for(i= a ; i < b ; ++i)
#define rep(i,n) FOR(i,0,n)
#define repi(i,start,n) FORi(i,start,n)
#define INF INT_MAX
#define ALL(x) x.begin(),x.end()
#define LET(x,a) __typeof(a) x(a)
#define IFOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define EACH(it,v) IFOR(it,v.begin(),v.end())
#define pb push_back
#define sz(x) int(x.size())
#define mp make_pair
#define fill(x,v) memset(x,v,sizeof(x))
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d ",n)
#define pd(n) printf("%lf ",n);
#define pdl(n) printf("%lf\n",n);
#define pin(n) printf("%d\n",n)
#define pln(n) printf("%lld\n",n)
#define pl(n) printf("%lld ",n)
#define slld(n) scanf("%lld",&n)
#define slf(n) scanf("%lf",&n)
#define sd(n) scanf("%d",&n)
#define ss(n) scanf("%s",n)
#define scan(v,n) vector<int> v;rep(i,n){ int j;si(j);v.pb(j);}
#define mod (int)(1e9 + 7)
#define ll long long int
#define F first
#define S second
#define fwhile() int t;cin>>t;while(t--)
#define Vi vector<int>
#define Vll vector<long long>
#define Vs vector<std::string>
vector<int> lst;
vector<vector<int>> adj;
vector<bool> visited;
multiset<int> Set;

int dfs(long long node){
	Set.insert(lst[node]);
	visited[node] = true;
	for(int i=0; i<adj[node].size(); i++){
		if(visited[adj[node][i]] == false){
			dfs(adj[node][i]);
		}
	}
}
long long addsum(long long a, long long b){
	long long sum=0;
	if(a>b){
		while(b--){
			sum=(sum+a)%1000000007;
		}
	}else{
		while(a--){
			sum=(sum+b)%1000000007;
		}
	}
	return sum;
}
int main(){
	int N, M,i,x,y;
	si(N);
	si(M);
	adj.resize(N+1);
	visited.resize(N+1);
	lst.resize(N+1);
	
	rep(i,N){
		cin >> lst[i+1];
	}
	while(M--){
		si(x);
		si(y);
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	long long int sum=1;
	for(int i=1; i<=N; i++){
		if(visited[i] == false){
			dfs(i);
			long long int cal=1,val;
			for(multiset<int>::reverse_iterator it=Set.rbegin(); it!=Set.rend();){
				val = *it;
				if(++it != Set.rend())
				if(val==*it)
					cal++;
				else
					break;
			}
			Set.clear();
			sum=addsum(sum,cal);
		}
	}
	cout << sum << endl;
	return 0;
}
#include <bits/stdc++.h>
using namespace std;
#define modu 1000000007
#define ll long long

 
//bool prime[100000002];
 
ll mulmod(ll a, ll b, ll mod)
{
    ll x = 0,y = a % mod;
    while (b > 0)
    {
        if (b % 2 == 1)
        {    
            x = (x + y) % mod;
        }
        y = (y * 2) % mod;
        b /= 2;
    }
    return x % mod;
}
/* 
 * modular exponentiation
 */
 long long mult(long long a, long long b, long long mod)
{
__int128 res = a;
res *= b;
res %= mod;
a = res;
return a;
}
long long modulo(long long a, long long b, long long c){
long long x = 1, y = a;
while (b > 0){
if (b % 2 == 1){
x = mult(x, y, c);
}
y = mult(y, y, c);
b /= 2;
}
return x%c;
}

 
/*
 * Miller-Rabin primality test, iteration signifies the accuracy
 */
bool Miller(long long p, int iteration){
if (p<2){
return false;
}
if (p != 2 && p % 2 == 0){
return false;
}
long long s = p - 1;
while (s % 2 == 0){
s /= 2;
}
for (int i = 0; i<iteration; i++){
long long a = rand() % (p - 1) + 1, temp = s;
long long mod = modulo(a, temp, p);
while (temp != p - 1 && mod != 1 && mod != p - 1){
mod = mult(mod, mod, p);
temp *= 2;
}
if (mod != p - 1 && temp % 2 == 0){
return false;
}
}
return true;
}
 
bool is_perfect_square(long long int x) {
    long long val = sqrt(x);
	return !(val*val != x);
}

 long long int f = 1,ans = 0,k = 0;
 bool checkprime(ll x)
 {
 	ll t=x;
 	if(x==2)
 	return true;
 	while(x%2==0)
 	x/=2;
 	for(ll i=3;i*i<=x;i+=2)
 	{
 		while(x%i==0)
 		x/=i;
 		
 	}
 	if(t==x)
 	return true;
 	return false;
 }
int main()
{
    //cout << "Hello World!" << endl;
   	long long int n,q;
   	cin>>n>>q;
   	
   	//long long int mod = 1000000007;
   	//SieveOfEratosthenes();
   	while(q--)
   	{
   		int t;
   		cin>>t;
   		if(t == 1)
   		{
   			long long int x,y;
   			cin>>x>>y;
   			//cout<<x+y<<" "<<prime[x+y]<<endl;
   			if(Miller(x+y,15))
   			{
   				ans = (ans+ abs(f - x)) ;
   				f = x;
   				k += y;
   				
   			}
   			
   		}
   		else
   		{
   			long long int x,y;
   			cin>>x>>y;
   			if(is_perfect_square(x+y))
   			{   
   				
   				ans = (ans + abs(f - x)) ;
   				f = x;
   				k -= y;
   				
   				//if( k <0) k = 0;
   			}
   		}
   	}
   	
   	cout<<ans % modu<<" "<<k<<endl;
   	
    return 0;
}
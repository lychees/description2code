def frequencies_diff(first_list, second_list):

    char_first = calculate_frequencies(first_list)

    char_second = calculate_frequencies(second_list)

    char_diff = [0] * 26

    j = 0

    while j < 26:
        # print (char_first[j] - char_first[j])
        char_diff[j] = abs(char_first[j] - char_second[j])
        j += 1

    return char_diff


def calculate_frequencies(input_list):

    char_list = [0] * 26

    for x in xrange(len(input_list)):
        if input_list[x].isalpha():
            pos = ord(input_list[x]) - ord('a')
            char_list[pos] += 1

    # for x in char_list:
    # 	print x
    return char_list


def anagram_test(first_str, second_str):

    lower_first_str = first_str.lower()
    lower_second_str = second_str.lower()

    char_diff = frequencies_diff(lower_first_str, lower_second_str)

    # for x in char_diff:
    # 	print x

    char_diff_sum = sum(char_diff)

    # print char_diff_sum

    if char_diff_sum == 0:
        return "YES"

    elif char_diff_sum == 1:
        for index, value in enumerate(char_diff):
            if value == 1:
                return chr(ord('a') + index)

    # count_odd_frequencies = odd_frequencies(char_diff)
    # print count_odd_frequencies

    elif odd_frequencies(char_diff) > 1:
        return 'NO LUCK'

    else:
        palindrome_string = get_palindrome_string(char_diff)
        return palindrome_string


def odd_frequencies(char_diff):
    # print char_diff char difference is fine
    odd_count = 0
    for _, value in enumerate(char_diff):
        if value & 1:
            odd_count += 1
            if odd_count == 2:
                return 2
    return odd_count


def get_palindrome_string(char_diff):

    handle_odd = False
    mid_char = ' '
    freq_char_list = []

    for index, value in enumerate(char_diff):
        if value & 1:
            handle_odd = True
            value -= 1
            mid_char = chr(ord('a') + index)

        char_add = chr(ord('a') + index)
        while value > 0:
            value -= 1
            freq_char_list.append(char_add)

    list.sort(freq_char_list)

    freq_char_list_len = len(freq_char_list)

    if freq_char_list_len == 1 or freq_char_list[0] == freq_char_list[len(
            freq_char_list) - 1]:
        string_return = "".join(freq_char_list)
        return string_return

    palindrome_list = []

    i = 0

    while i < freq_char_list_len:
        palindrome_list.append(freq_char_list[i])
        i += 2

    reversed_palindrome_list = list(reversed(palindrome_list))

    if handle_odd:
        palindrome_list.append(mid_char)

    palindrome_string = "".join(palindrome_list)
    reversed_palindrome_string = "".join(reversed_palindrome_list)

    string_return = palindrome_string + reversed_palindrome_string

    return string_return


total_input = int(raw_input())

# answer= []

while total_input > 0:
    total_input -= 1
    input_string1 = raw_input()
    input_string2 = raw_input()
    print(anagram_test(input_string1, input_string2))


# for ans in answer:
# 	print answer

# print (anagram_test("Awaaay", "away"))
# print (anagram_test("the terminator", "I?m rotten hater"))
# print (anagram_test("Computer programmer", "mature germ romp crop"))
# print (anagram_test("internet", "web"))

# print (anagram_test("abc221", "abcdede"))

# #print (anagram_test("qwerty", "qwearty"))

# print (anagram_test("helloworld", "hellisworldisob"))

# Computer programmer
# mature germ romp crop
# Awaaay
# away
# internet
# web
# abc221
# abcdede
# the terminator
# I?m rotten hater

# qwerty
# qwearty

# helloworld
# hellisworldisob

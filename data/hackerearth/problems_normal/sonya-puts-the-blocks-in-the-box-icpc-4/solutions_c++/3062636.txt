#include <bits/stdc++.h>
using namespace std;

#define lli long long
#define pb push_back
#define mp make_pair
#define gc getchar_unlocked
#define lld "%I64d"
#define DEBUG(x) cout<<">value ("<<#x<<") : "<<x<<endl;
#define mod 1000000007

const int lmt = 1005;
lli dp[lmt][lmt];
lli mxsum[lmt][lmt];
vector<lli> in[lmt];
int n,m;
const lli oo = (long long)(-1e16);

lli solve(int idx,int can){
    if(can<0) return oo;
    if(idx==n) return 0;
    lli &res = dp[idx][can];
    if(res != -1) return res;
    res = 0;
    int upto = min(can,(int)in[idx].size());
    for(int l=0;l<=upto;l++){
        res = max(res,solve(idx+1,can-l) + mxsum[idx][l]);
    }
    dp[idx][can] = res;
    return res;
}

int main(){
    memset(dp,-1,sizeof(dp));
    int c;
    lli x;
    scanf("%d %d",&n,&m);
    for(int i=0;i<n;i++){
        scanf("%d",&c);
        while(c--){
            scanf("%lld",&x);
            in[i].pb(x);
        }
    }
    for(int i=0;i<n;i++){
        int upto = min(m,(int)in[i].size());
        mxsum[i][0] = 0;
        for(int l=1;l<=upto;l++){
            lli sum = 0;
            int k=0;
            for(k=0;k<l;k++)
                sum += in[i][k];
            mxsum[i][l] = sum;
            while(k<in[i].size()){
                sum -= in[i][k-l];
                sum += in[i][k];
                mxsum[i][l] = max(mxsum[i][l],sum);
                k++;
            }
        }
    }
    lli ans = solve(0,m);
    if(ans<0) ans = 0;
    printf("%lld\n",ans);
    return 0;
}

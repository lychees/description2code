#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define Fit(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define inf 1000000005
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
#define mod 1000000007
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcountll(s);}
#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

typedef unsigned long long ull;
typedef long long ll;
typedef double ld;
#define eps 1e-9
typedef pair<int, int> II;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
#define PI 2 * acos(0)

#define maxn 100005

struct matrix{
	ll a[2][2];
	matrix(){ ms(a, 0);}
};

matrix add(matrix A, matrix B){
	matrix res;
	Rep(i, 2) Rep(j, 2){
		res.a[i][j] = (A.a[i][j] + B.a[i][j]) % mod;
	}
	return res;
}

matrix mul(matrix A, matrix B){
	matrix res;
	Rep(i, 2) Rep(j, 2) Rep(k, 2){
		res.a[i][j] = (res.a[i][j] + A.a[i][k] * B.a[k][j]) % mod;
	}
	return res;
}

matrix mu(matrix A, int k){
	if(k == 1) return A;
	if(k & 1) return mul(mu(A, k - 1), A);
	matrix t = mu(A, k >> 1);
	return mul(t, t);
}

matrix cal(matrix A, int k){
	if(k == 1) return A;
	int t = k / 2;
	matrix B = cal(A, t), C = mu(A, t);
	matrix res = add(B, mul(B, C));
	if(k & 1) res = add(res, mu(A, k));
	return res;
}

void solve(){
	int n;
	cin >> n;
	if(n == 1){
		cout << 2 << "\n";
	} else{
		n--;
		matrix I;
		I.a[0][0] = 0; I.a[0][1] = 4;
		I.a[1][0] = 1; I.a[1][1] = 2;
//		cout << n << endl;
		matrix A = cal(I, n);
//		cout << A.a[0][0] << " " << A.a[1][0] << endl;
		ll res = (2 * A.a[0][0] + 12 * A.a[1][0] + 2) % mod;
		cout << res << "\n";
	}
}

int main()
{
//    freopen("jingles.in", "r", stdin);
//    freopen("jingles.out", "w", stdout);
//    freopen("in.txt", "r", stdin);
//   freopen("out.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int test;
    cin >> test;
    Rep(itest, test){
    	solve();
    }

     return 0;
}

#include <iostream>
using namespace std;
 
int maze[52][52],n; 
bool isSafe(int x, int y)
{
    // if (x,y outside maze) return false
    if(x >= 0 && x < n && y >= 0 && y < n && maze[x][y] == 1)
        return true;
 
    return false;
}
 
/* A recursive utility function to solve Maze problem */
bool solveMazeUtil(int x, int y)
{
    // if (x,y is goal) return true
    if(x == n-1 && y == n-1)
    {
        return true;
    }
 
    // Check if maze[x][y] is valid
    if(isSafe(x, y) == true)
    {
        // mark x,y as part of solution path

 
        /* Move forward in x direction */
        if (solveMazeUtil(x+1, y) == true)
            return true;
 
        /* If moving in x direction doesn't give solution then
           Move down in y direction  */
        if (solveMazeUtil(x, y+1) == true)
            return true;
 
        /* If none of the above movements work then BACKTRACK: 
            unmark x,y as part of solution path */
        return false;
    }   
 
    return false;
}

bool solveMaze()
{
    if(solveMazeUtil(0, 0) == false)
    {
        printf("NOT POSSIBLE\n");
        return false;
    }
 else
      cout<<"POSSIBLE"<<endl;
    return true;
}
 
// driver program to test above function
int main()
{
	long long int test,i,j;
	cin>>test;
	while(test--)
	{
		cin>>n;
		for(i=0;i<n;i++)
		for(j=0;j<n;j++)
		cin>>maze[i][j];
		solveMaze();
	}	
    
    return 0;
}

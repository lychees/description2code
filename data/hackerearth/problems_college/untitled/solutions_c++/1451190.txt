#include <bits/stdc++.h>
using namespace std;

#define rep1(i, begin, end) for (__typeof(begin) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define rep2(i, begin, end) for (__typeof(begin) i = (begin); i != (end) + 1 - 2 * ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 1000001;
int freq[N], fact[N];
vector<int> primes;
vector<ll> sum;
ll ndiv[N];

ll mod_pow(ll x, ll y) {
    ll res = 1;
    ll a = x;
    while (y > 0) {
        if (y & 1) {
            res = (res * a) % MOD;
        }
        a = (a * a) % MOD;
        y >>= 1;
    }
    return res;
}

void init() {
	mem(fact, 0);
	rep1(i, 2, N) {
		if (!fact[i]) {
			primes.push_back(i);
			for (int j = i; j < N; j += i) fact[j] = i;
		}
	}
	sum.resize(primes.size());
	sum[0] = primes[0];
	rep1(i, 1, primes.size()) sum[i] = (sum[i - 1] + primes[i]) % MOD;
	
	mem(freq, 0);
	ndiv[1] = 1;
	rep1(i, 2, N) {
		int x = i;
		ndiv[i] = ndiv[i - 1];
		while (x > 1) {
			int p = fact[x], cnt = 0;
			while (x % p == 0) {
				x /= p; cnt++;
			}
			ndiv[i] = (ndiv[i] * mod_pow(freq[p] + 1, MOD - 2)) % MOD;
			freq[p] += cnt;
			ndiv[i] = (ndiv[i] * (freq[p] + 1)) % MOD;
		}
	}
}


int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest, n;
    
    init();
    
    cin >> ntest;
    while (ntest--) {
    	cin >> n;
    	int ind = upper_bound(all(primes), n) - primes.begin();
    	printf("%d %lld %lld\n", ind, sum[ind - 1], ndiv[n]);
    }
    return 0;
}

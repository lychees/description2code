#include <cstdio>
#include <vector>
#include <cmath>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <iostream>
#include <cassert>
#include <memory.h>
using namespace std;

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define foreach(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define pb push_back
typedef long long ll;
typedef pair<int, int> pii;
typedef long double ld;

int n, m;
string s[1000010];
vector<int> u[1000010];

struct State {
    int i, j, d;
};

State q[2 * 1000010];
int qb, qf;


void put(int i, int j, int d) {
    if (u[i][j] & d) return;
    u[i][j] |= d;
    q[qf++] = State{i, j, d};
}

void bfs(int i, int j, int d) {
    qb = qf = 0;
    q[qf++] = State{i, j, d};
    u[i][j] |= d;
    while (qb < qf) {
        const State& st = q[qb++];
        i = st.i, j = st.j, d = st.d;
        if (d == 1) {
            if (i + 1 < n) {
                if (s[i][j] != s[i+1][j]) put(i, j, 2);
                if (s[i][j+1] != s[i+1][j+1]) put(i, j + 1, 2);
                if (s[i+1][j] != s[i+1][j+1]) put(i + 1, j, 1);
            }
            if (i - 1 >= 0) {
                if (s[i][j] != s[i-1][j]) put(i - 1, j, 2);
                if (s[i][j+1] != s[i-1][j+1]) put(i - 1, j + 1, 2);
                if (s[i-1][j] != s[i-1][j+1]) put(i - 1, j, 1);
            }
        } else {
            if (j + 1 < m) {
                if (s[i][j] != s[i][j+1]) put(i, j, 1);
                if (s[i+1][j] != s[i+1][j+1]) put(i + 1, j, 1);
                if (s[i][j+1] != s[i+1][j+1]) put(i, j + 1, 2);
            }
            if (j - 1 >= 0) {
                if (s[i][j] != s[i][j-1]) put(i, j - 1, 1);
                if (s[i+1][j] != s[i+1][j-1]) put(i + 1, j - 1, 1);
                if (s[i][j-1] != s[i+1][j-1]) put(i, j - 1, 2);
            }
        }
    }
}

void solve() {
    scanf("%d %d", &n, &m);
    forn(i, n) {
        cin >> s[i];
        u[i].assign(s[i].size(), 0);
    }

    forn(j, m - 1) {
        if (s[0][j] != s[0][j+1]) {
            bfs(0, j, 1);
        }
        if (s[n-1][j] != s[n-1][j+1]) {
            bfs(n - 1, j, 1);
        }
    }

    forn(i, n - 1) {
        if (s[i][0] != s[i+1][0]) {
            bfs(i, 0, 2);
        }

        if (s[i][m-1] != s[i+1][m-1]) {
            bfs(i, m - 1, 2);
        }
    }

    bool ok = true;
    forn(i, n)
        forn(j, m) {
            if (j + 1 < m && s[i][j] != s[i][j+1] && (u[i][j] & 1) == 0) {
                ok = false;
                break;
            }
            if (i + 1 < n && s[i][j] != s[i+1][j] && (u[i][j] & 2) == 0) {
                ok = false;
                break;
            }
        }

    printf(ok ? "YES\n" : "NO\n");
}

int main() {
    int tc;
    scanf("%d", &tc);
    for (int q = 1; q <= tc; q++) {
        solve();
    }
    return 0;
}

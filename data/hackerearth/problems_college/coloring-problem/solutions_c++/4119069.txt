#include <iostream>
using namespace std;

bool isSafe(int graph[200][200], int size, int colors[], int vertex, int color)
{
	for(int i = 0; i < size; i++) {
		if(graph[vertex][i] && colors[i] == color) return false;
	}
	return true;
}

bool colorGraph(int graph[200][200], int size, int colors[], int noOfColors, int vertex)
{
	if(vertex == size) return true;
	for(int i = 1; i <= noOfColors; i++) {
		if(isSafe(graph, size, colors, vertex, i)) {
			colors[vertex] = i;
			if(colorGraph(graph, size, colors, noOfColors, vertex + 1)) return true;
			colors[vertex] = 0;
		}
	}
	return false;
}

void colorGraph(int graph[200][200], int size, int noOfColors)
{
	int *colors = (int *)malloc(size * sizeof(int));
	if(colorGraph(graph, size, colors, noOfColors, 0)) cout << "BICOLORABLE." << endl;
	else cout << "NOT BICOLORABLE." << endl;
}

int main()
{
	int T;
	int noOfColors = 2;
	int graph[200][200];
	
	cin >> T;
	for(int i = 0; i < T; i++) {
		int n, edge, a, b;
		cin >> n;
		for(int j = 0; j < n; j++) {
			for(int k = 0; k < n; k++) {
				graph[j][k] = 0;
			}
		}
		cin >> edge;
		for(int j = 0; j < edge; j++) {
			cin >> a >> b;
			graph[a][b] = 1;
			graph[b][a] = 1;
		}
		
		colorGraph(graph, n, noOfColors);
	}
}
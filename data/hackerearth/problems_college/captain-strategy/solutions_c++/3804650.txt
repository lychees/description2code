#include <bits/stdc++.h>
using namespace std;
int a[100005];
vector<int> v[100005];
int in[100005],out[100005];
int all[300005],tr[1000005];;
int tim = 1;
int ind = 1;
void dfs(int m, int pr)
    {
    all[ind++] = m;
    in[m] = tim++;
    int i,l,x;
    l = v[m].size();
    for(i=0;i<l;i++)
        {
        x = v[m][i];
        if(x!=pr)dfs(x,m);
    }
    out[m] = tim++;
    all[ind++] = m;
}
void build(int v,int l, int r )
    {
    if(l==r){
        tr[v] = all[l];
       // printf("build at %d has %d %d and is %d\n",v,l,r,tr[v]);
        return;
    }
    int mid = (l+r)/2;
    build(2*v,l,mid);
    build(2*v+1,mid+1,r);
    tr[v] = tr[2*v] + tr[2*v+1];
}
void update(int v,int l,int r, int pos, int x)
    {
    if(l==r){ tr[v] = x; return;}
    int mid = (l+r)/2;
    if(pos<=mid)update(2*v,l,mid,pos,x);
    else update(2*v+1,mid+1,r,pos,x);
     tr[v] = tr[2*v] + tr[2*v+1];
}
int query(int v, int l,int r,int lo,int hi)
    {
    if(lo>hi)return 0;
    if(l==lo && r==hi)return tr[v];
    int mid = (l+r)/2;
    int fir = query(2*v,l,mid,lo,min(hi,mid));
    int sec = query(2*v+1,mid+1,r,max(lo,mid+1),hi);
    return fir + sec;
}
char s[5];
int main()
{
   int n,q,i;
    scanf("%d%d",&n,&q);
    int x,y;
    for(i=1;i<=n;i++)scanf("%d",&a[i]);
    for(i=1;i<n;i++)
        {
        scanf("%d%d",&x,&y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    dfs(1,-1);
    //printf("total %d time spent\n",tim-1);
    for(i=1;i<=n;i++)
        {
       // printf("%d from %d to %d\n",i,in[i],out[i]);
    }
    for(i=0;i<ind;i++)
        all[i] = a[all[i]];
    build(1,0,ind-1);
    //int x,y;
    for(i=0;i<q;i++)
        {
        scanf("%s%d",&s,&x);
        int lo,hi;
        lo = in[x];
        hi = out[x];
        //printf("query for %d which is %d %d\n",x,lo,hi);
        if(s[0]=='Q')
            {
            printf("%d\n",query(1,0,ind-1,lo,hi)/2);
        }
        else {scanf("%d",&y);
              update(1,0,ind-1,lo,y);
              update(1,0,ind-1,hi,y);
             }
    }
    return 0;
}

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

pair<long long int, long long int> getGreatGood(vector<pair<int, int> > a, vector<pair<int, int> > b)
{
    vector<int> countA(10005);
    for(int i=0; i<a.size(); i++)
    {
        countA[a[i].first] ++;
    }

    long long int countGood = 0;
    for(int i=0; i<b.size(); i++)
    {
        int skill = b[i].first;
        if(countA[skill] > 0)
        {
            countGood ++;
            countA[skill] --;
        }
    }

    sort(a.begin(), a.end());
    sort(b.begin(), b.end());

    int posA = 0, posB = 0;
    long long int countGreat = 0;
    while(posA < a.size() && posB < b.size())
    {
        if(a[posA].second == b[posB].second)
        {
            countGreat ++;
            posA ++;
            posB ++;
        }
        else if(a[posA] < b[posB])
        {
            posA ++;
        }
        else
        {
            posB ++;
        }
    }

    return make_pair(countGood, countGreat);
}

int main(int argc, char const *argv[]) {
    int t;
    cin>>t;
    while(t--)
    {
        int m, n;
        cin>>m>>n;
        vector<pair<int, int> > b(m), a(n);
        for(int i=0; i<m; i++)
        {
            int s, p;
            cin>>s>>p;
            b[i] = make_pair(s, p);
        }
        for(int i=0; i<n; i++)
        {
            int s, p;
            cin>>s>>p;
            a[i] = make_pair(s, p);
        }

        pair<long long int, long long int> goodGreat = getGreatGood(a, b);
        int g, h;
        cin>>g>>h;

        if(goodGreat.first >= g && goodGreat.second >= h)
        {
            cout<<"Great"<<endl;
        }
        else if(goodGreat.first >= g)
        {
            cout<<"Good"<<endl;
        }
        else
        {
            cout<<":("<<endl;
        }
    }
    return 0;
}

import heapq
from bisect import bisect_left
INF = 1 + 25 * 10**8

def dijkstra(G, n, s):
    dist = [INF] * (n+1)
    dist[s] = 0
    heap = []
    heapq.heappush(heap, (0,s))

    while heap:
        d, u = heapq.heappop(heap)
        if dist[u] < d:
            continue

        for (v, w) in G[u]:
            if dist[v] > dist[u] + w:
                dist[v] = dist[u] + w
                heapq.heappush(heap, (dist[v], v))

    return dist

t=input()
while t!=0:
 n, m = map(int, raw_input().split())
 G = [[] for i in xrange(n+1)]

 for i in xrange(m):
    x, y, z = map(int, raw_input().split())
    G[x].append((y, z))
    G[y].append((x, z))

 distStart = dijkstra(G, n, 1)
 q=int(raw_input())
 while q!=0:
    a,b=map(int,raw_input().split())
    if b>=2*distStart[a]:
        print b-2*distStart[a]
    else:
        print 0
    q-=1
 t-=1   
            

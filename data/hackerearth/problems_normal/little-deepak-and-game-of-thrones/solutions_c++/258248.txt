#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

int highestOneBit(unsigned v) {
	v |= v >> 1;
	v |= v >> 2;
	v |= v >> 4;
	v |= v >> 8;
	v |= v >> 16;
	return (v >> 1) + 1;
}

struct SegmentTreeUnion {
	int M, H, N;
	vector<int> st;
	vector<int> count;
	
	SegmentTreeUnion(int n) {
		N = n;
		M = highestOneBit(max(n-1, 1)) << 2;
		H = M >> 1;
		st.assign(M, 0);
		count.assign(M, 0);
	}
	
	void propagate(int i) {
		count[i] = st[i] > 0 ? H / highestOneBit(i) : count[2*i]+count[2*i+1];
	}
	
	void add(int l, int r, int v){ add(l, r, v, 0, H, 1); }
	
	void add(int l, int r, int v, int cl, int cr, int cur) {
		if(cur >= H){
			st[cur] += v;
			count[cur] = st[cur] > 0 ? 1 : 0;
		}else if(l <= cl && cr <= r){
			st[cur] += v;
			propagate(cur);
		}else{
			int mid = (cl+cr) / 2;
			if(cl < r && l < mid){
				add(l, r, v, cl, mid, 2*cur);
			}
			if(mid < r && l < cr){
				add(l, r, v, mid, cr, 2*cur+1);
			}
			propagate(cur);
		}
	}
};

struct Event {
	int y, l, r, s;
	Event() { }
	Event(int y_, int l_, int r_, int s_): y(y_), l(l_), r(r_), s(s_) { }
	bool operator<(const Event &that) const { return y < that.y; }
};
long long areaOfUnionOfRectangles(int co[][4], int n, int X) {
	std::vector<Event> es(2 * n);
	for(int i = 0;i < n;i++){
		es[2*i] = Event(co[i][0], co[i][1], co[i][3], 1);
		es[2*i+1] = Event(co[i][2], co[i][1], co[i][3], -1);
	}
	sort(all(es));
	long S = 0;
	int py = 0;
	SegmentTreeUnion st = SegmentTreeUnion(X + 2);
	for(int i = 0;i < 2*n;i++){
		S += (long)(es[i].y - py) * st.count[1];
		st.add(es[i].l, es[i].r, es[i].s);
		py = es[i].y;
	}
	return S;
}

int co[1300][4];
int main() {
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		int m;
		scanf("%d", &m);
		rep(i, m)
			scanf("%d%d%d%d", &co[i][1], &co[i][0], &co[i][3], &co[i][2]);
		long long ans = areaOfUnionOfRectangles(co, m, 1000000);
		printf("%lld\n", ans);
	}
	return 0;
}

#include <iostream>
#include<queue>
#include<cstdio>

using namespace std;
struct edge{
    long int destv;
    struct edge *link;
};
vector<struct edge*> graph(100000);
queue<long int> q;
vector<int> color(100000);

void make_edge(long int s,long int d){
    struct edge *temp = new struct edge();
    temp->destv = d;
    temp->link = graph[s];
    graph[s] = temp;
    struct edge *ptr = new struct edge;
    ptr->destv = s;
    ptr->link = graph[d];
    graph[d] = ptr;
}

int checkUtil(long int s){
    q.push(s);
    long int i;
    struct edge *ptr;
    while(!q.empty()){
        i = q.front();
        q.pop();
        ptr = graph[i];
        while(ptr){
            if(color[ptr->destv] == -1){
                color[ptr->destv] = 1-color[i];
                q.push(ptr->destv);
            }
            else{
                if(color[ptr->destv] == color[i]){
                    return 0;
                }
            }
            ptr = ptr->link;
        }
    }
    return 1;
}
int check_Bipartite(long int n,long int m){
    long int i;
    for(i=1;i<=n;i++){
        if(color[i] == -1){
            color[i] = 0;
            if(checkUtil(i) == 0)
                return 0;
        }
    }
    return 1;
}


int main()
{
    int t;
    long int i,m,n,s,d;
    scanf("%d",&t);
    while(t--){

       scanf("%ld%ld",&n,&m);
       for(i=1;i<=n;i++){
        graph[i] = NULL;
        color[i] = -1;
       }
       for(i=1;i<=m;i++){
        scanf("%ld%ld",&s,&d);
        make_edge(s,d);
       }
       if(check_Bipartite(n,m)){
        printf("YES\n");
       }
       else
        printf("NO\n");
    }
    return 0;
}

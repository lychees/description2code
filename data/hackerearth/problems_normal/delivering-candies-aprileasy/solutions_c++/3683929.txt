#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define rep(i,a) for(ll i=0;i<a;++i)
#define repp(i,a,b) for(ll i=a;i<b;++i)
#define FILL(a,x) memset(a,x,sizeof(a))
#define    foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);

struct node{
    ll no;
    ll co;
};

struct compare  
 {  
   bool operator()(const struct node& l, const struct node& r)  
   {  
       return l.co > r.co;  
   }  
 };
 ll n,m,s,dis[100005],sum=0,sum1=0,cnt=0;
 vector<node> vec[100005];
 
 void djk(){
     priority_queue<struct node,vector<struct node>, compare > pq;
     node st;
     st.no=s;
     st.co=0;
     pq.push(st);
     while(!pq.empty()){
         node tp=pq.top();
         pq.pop();
         if(dis[tp.no]!=-1)continue;
         dis[tp.no]=tp.co;
         rep(i,vec[tp.no].size()){
             node bhej;
             bhej.co=tp.co+vec[tp.no][i].co;
             bhej.no=vec[tp.no][i].no;
             pq.push(bhej);
         }
     }
 }


int main()
{
    fastScan;
    rep(i,100005)dis[i]=-1;
    cin>>n>>m>>s;
    ll arr[n];
    rep(i,n){
        cin>>arr[i];
    }
    ll a,b,c;
    rep(i,m){
        cin>>a>>b>>c;
        node n1,n2;
        n1.no=b;
        n1.co=n2.co=c;
        n2.no=a;
        vec[a].pb(n1);
        vec[b].pb(n2);
    }
    djk();
   // cout<<dis[1]<<"  "<<dis[2]<<"  "<<dis[3]<<"  "<<dis[4]<<"  "<<dis[5]<<endl;
    repp(i,1,n+1)if(dis[i]!=-1){sum+=dis[i]*arr[i-1];sum1+=arr[i-1];cnt++;}
    repp(i,1,n+1){
        ll tmp=0;
        if(dis[i]==-1)cout<<"0 ";
        else{
            tmp=sum-dis[i]*arr[i-1]+dis[i]*(sum1-arr[i-1]);
            cout<<tmp<<" ";
        }
    }
    
    return 0;
}
#include <bits/stdc++.h>

#define LL long long
using namespace std;

LL GetIntLen(LL piVal){
   LL liRet = 0;
   do {
      ++liRet;
      piVal /= 10;
   }while (piVal);
   return liRet;
}
void GetEachDigit(LL x, LL* piCount, LL piResult[]){
   if(x >= 10){   GetEachDigit(x / 10, piCount, piResult);  }
   piResult[*piCount] = x % 10;
   (*piCount)++;
}

void IsItOne( LL piVal, LL piCount ){
   LL    liSize   = GetIntLen(piVal);
   LL    i        = 0;
   LL    liSum    = 0;
   LL    liCount  = 0;
   LL    liArr[liSize];
   LL    liSqArr[liSize];

   GetEachDigit(piVal,&liCount, liArr);
   liCount = 0;
   //Square
   for(i = 0; i < liSize; i++){  liSqArr[i] = liArr[i] * liArr[i];   }

   //Sum
   for(i = 0; i < liSize; i++){  liSum += liSqArr[i];    }

   int liNewSize = GetIntLen(liSum);

   //Recursion
   if( liNewSize != 1 ){
      IsItOne( liSum, piCount );
   }else{
      if( liSum == 1 ){
         cout<< "Case #" << piCount + 1 << ":YES\n";
      }else{
         cout<< "Case #" << piCount + 1 << ":NO\n";
      }
   }
}
int main(){
   int   T           = 0;
   int   liTCount    = 0;
   LL    TestVal     = 0;

   cin >> T;
   for(liTCount = 0; liTCount < T; liTCount++){
      cin >> TestVal;
      IsItOne(TestVal, liTCount);
   }
   return 0;
}

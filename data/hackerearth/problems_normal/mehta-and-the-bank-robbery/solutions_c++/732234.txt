//"Tell me and i will forget ,show me and I may remember , involve me and I will understand"
#include<bits/stdc++.h>
using namespace std;
#define i_long long long 
i_long dp[2][2001][2001];
int main()
{
	i_long prime[11]={1,2,3,5,7,11,13,17,19,23,29};
	i_long n,w;
	cin>>n>>w;
	i_long profit[n+1];
	i_long weight[n+1];
	vector<pair<i_long,i_long> > item;
	for(i_long i=1;i<=n;i++)
	{
		cin>>profit[i]>>weight[i];
		item.push_back(make_pair(profit[i],weight[i]));
		
		}
		sort(item.begin(),item.end());
		for(i_long i=1;i<=n;i++)
		{
			profit[i]=item[i-1].first;
			weight[i]=item[i-1].second;
			}
		
		
		for(i_long i=0;i<=1;i++)
		{
			for(i_long j=0;j<=n;j++)
			{
				for(i_long k=0;k<=w;k++)
				{
					dp[i][j][k]=0;
					}
				}
			}
	
		for(i_long i=0;i<=10;i++)
		{
			for(i_long j=1;j<=n;j++)
			{
				for(i_long k=1;k<=w;k++)
				{
					if(i==0)
					{
						if(k>=weight[j])
						dp[i][j][k]=max(dp[i][j-1][k],dp[i][j-1][k-weight[j]]+profit[j]);
						else
						dp[i][j][k]=dp[i][j-1][k];
						}
					else{
							int cur=i&1;
							int prev=1-cur;
							if(k>=weight[j])
							{
								dp[cur][j][k]=max(dp[cur][j-1][k-weight[j]]+profit[j],dp[prev][j-1][k-weight[j]]+profit[j]*prime[i]);
								dp[cur][j][k]=max(dp[cur][j][k],dp[cur][j-1][k]);
								}
							else
							{
								dp[cur][j][k]=dp[cur][j-1][k];
								}
						}
					}
				}
			}
	
		cout<<dp[0][n][w]<<endl;
		return 0;
}

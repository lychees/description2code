def check(a,P,K):
    x=[]
    n=0
    x.append(P[n]+a)
    for i in range(0,K):
        #print('a=')
        #print a
        #print x
        #print i
        n=find(x[i]+a,P,n,len(P)-1)
        #print('n')
        #print(n)
        if ((n>0) & (n<=(len(P)-1))):
            #print P
            #print('a')
            #print a
            x.append(P[n]+a)
        elif n>=(len(P)):
            #print('x')
            #print(x)
            return 1
            break
    #print(x)
    return 0

def find(x,P,l,h):
    mid=(l+h)/2
    if(l<=h):
        mid=(l+h)/2
        #print(mid)
        if((P[mid]<=x)&((mid+1)>h)):
            return (h+1)
        elif(P[mid]<=x):
            return find(x,P,mid+1,h)
        else:
            return find(x,P,l,mid-1)
    return (h+1)

def binarySearch(P,l,h,K):
    if(l<=h):
        mid=(l+h)/2
        #print('l')
        #print(l)
        #print('mid:')
        #print(mid)
        #print('h:')
        #print(h)
        if((check(mid,P,K)==1) & (check(mid-1,P,K)==0)):
            #print(mid)
            #print(check(mid, P, K))
            #print(check(mid-1, P, K))
            return mid
        elif (check(mid, P, K)==1):
            return binarySearch(P,l,mid-1,K)
        else:
            return binarySearch(P,mid+1,h,K)

def mergeSort(P,l,h):
    if(l<h):
        mid=(l+h)/2
        mergeSort(P,l,mid)
        mergeSort(P,mid+1,h)
        merge(P,l,mid,h)
    return P

def merge(P,l,mid,h):
    left=[]
    right=[]
    for i in range(0,mid-l+1):
        left.append(P[l+i])
    for i in range(0,h-mid):
        right.append(P[mid+i+1])
    k=l
    i=0
    j=0
    while ((i<(mid-l+1)) & (j<(h-mid))):
        if (left[i]>right[j]):
            P[k]=right[j]
            j+=1
            k+=1
        else:
            P[k]=left[i]
            i+=1
            k+=1
    while(i<(mid-l+1)):
        P[k]=left[i]
        k+=1
        i+=1
    while(j<(h-mid)):
        P[k]=right[j]
        k+=1
        j+=1
    return P

n = raw_input().split(' ')
N= long(n[0])
K= long(n[1])
n = raw_input().split(' ')
P=[]
for i in range(0,N):
    P.append(long(n[i]))
#print (P)
P=mergeSort(P,0,len(P)-1);
#print(P)
if N>K:
    print binarySearch(P,0,100000000,K)
else:
    print 0
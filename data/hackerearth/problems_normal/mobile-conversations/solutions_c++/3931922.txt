#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
typedef pair<int,int> pii;
#define vi vector<int>
#define vs vector<string>
#define vpii vector<pii>
#define all(v) v.begin(), v.end()
#define fr freopen("input.in","r",stdin)
#define fw freopen("output.out","w",stdout)
#define foreach(i,X) for(__typeof((X).begin()) i = (X).begin(); i != (X).end(); i++)
#define forup(i,a,b) for(int i=(a); i<(b); ++i)
#define fordn(i,a,b) for(int i=(a); i>(b); --i)
#define rep(i,a) for(int i=0; i<(a); ++i)
#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf(" %s",x)
#define F first
#define S second
#define pb push_back
#define pf push_front
#define mp make_pair
const int inf=numeric_limits<int>::max();
const LL linf=numeric_limits<LL>::max();
vpii profit, loss;
bool way1(pii a, pii b){
	return (a.F < b.F);
}
bool way2(pii a, pii b){
	if(a.S == b.S) return a.F < b.F;
	return (a.S > b.S);
}
LL Func(LL balance){
	rep(i,profit.size()){
		if(balance >= profit[i].F){
			balance += (profit[i].S-profit[i].F);
		} else {
			return false;
		}
	}
	rep(i,loss.size()){
		if(balance >= loss[i].F){
			balance += (loss[i].S-loss[i].F);
		} else {
			return false;
		}
	}
	return true;
}
LL bsearch(LL l, LL r){
	LL mid;
	while(r-l>1){
		mid = (l+r)/2;
		if(Func(mid)) r = mid;
		else l = mid;
	}
	return r;
}
int main(){
	int n,x,t;
	gi(n);
	rep(i,n){
		gi(t);
		gi(x);
		if(t <= x) profit.pb(mp(t,x));
		else loss.pb(mp(t,x));
	}
	sort(all(profit), way1);
	sort(all(loss), way2);
	LL ans = bsearch(0,1000000000000000LL);
	cout << ans;
	return 0;
}
#include <cstdio>
#include <vector>
#include <queue>

using namespace std;

#define fi first
#define se second
#define mp make_pair

const int dx[4] = {-1, 1, 0, 0};
const int dy[4] = {0, 0, -1, 1};
const int INF = 2e9;

typedef pair<int, pair<int, int> > state;

int mat[1005][1005];
int dist[1005][1005];

int main() {
    int T, N, M;
    
    scanf("%d", &T);
    
    while (T--) {
    	scanf("%d %d", &M, &N);
    	
    	for (int i = 1; i <= M; i++)
    		for (int j = 1; j <= N; j++) {
    			scanf("%d", &mat[i][j]);
    			dist[i][j] = INF;
    		}
    	
    	priority_queue<state, vector<state>, greater<state> > pq;
    	
    	dist[1][1] = mat[1][1];
    	pq.push(state(dist[1][1], mp(1, 1)));
    	
    	while (!pq.empty()) {
    		state u = pq.top();
    		pq.pop();
    		
    		int x = u.se.fi;
    		int y = u.se.se;
    		int t = u.fi;
    		
    		if (t > dist[x][y])
    			continue;
    		
    		for (int i = 0; i < 4; i++) {
    			int nx = x + dx[i];
    			int ny = y + dy[i];
    			
    			if (nx < 1 || nx > M || ny < 1 || ny > N)
    				continue;
    			
    			if (t + mat[nx][ny] < dist[nx][ny]) {
    				dist[nx][ny] = t + mat[nx][ny];
    				pq.push(state(dist[nx][ny], mp(nx, ny)));
    			}
    		}
    	}
    	
    	int x, y, t;
    	scanf("%d %d %d", &x, &y, &t);
    	
    	if (dist[x][y] >= t)
    		puts("NO");
    	else {
    		printf("YES\n%d\n", t - dist[x][y]);
    	}
    }
    
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
vector<int> v(1000001);
int main()
{
    int i,j;
    for(i=2;i<=1000000;i++)
    {
    	if(v[i]==0)
    	{
    		v[i]=1;
    		for(j=2*i;j<=1000000;j=j+i)
    		{
    			v[j]++;
    		}
    	}
    }
    v[0]=v[1]=1;
    map<int,int> m1,m2,m3,m4,m5,m6,m7,m8;
    m1[0]=0;
    m2[0]=0;
    m3[0]=0;
    m4[0]=0;
    m5[0]=0;
    m6[0]=0;
    m7[0]=0;
    m8[0]=0;
    vector<int> c(9);
    for(i=2;i<=1000000;i++)
    {
    	if(v[i]<9)
    	{
    		c[v[i]]++;
    		switch(v[i])
    		{
                case 1:
                        m1[i]=c[v[i]];
                    break;
                    case 2:m2[i]=c[v[i]];
                    break;
                    case 3:m3[i]=c[v[i]];
                    break;
                    case 4:m4[i]=c[v[i]];
                    break;
                    case 5:m5[i]=c[v[i]];
                    break;
                    case 6:m6[i]=c[v[i]];
                    break;
                    case 7:m7[i]=c[v[i]];
                    break;
                    case 8:m8[i]=c[v[i]];
                    break;
    		}
    	}
    }
     map<int,int>::iterator it;
    /*for(it=m1.begin();(it->first)<20;it++)
    {
        printf("%d %d\n",it->first,it->second);
    }*/
    int n,q,x;
    scanf("%d%d",&n,&q);
    while(q--)
    {
    	scanf("%d",&x);
    	if(x>8)
    		printf("0\n");
    	else
    	{
    		switch(x)
    		{
            case 1:
                it=m1.lower_bound(n);
                //printf("%d %d",it->first,it->second);
                if((it==m1.end())||(it->first>n))
                    it--;
                    break;
            case 2:it=m2.lower_bound(n);
                if(it==m2.end())
                    it--;
                else
                {
                    if((it->first)>n)
                        it--;
                }
                break;
                case 3:it=m3.lower_bound(n);
                if(it==m3.end())
                    it--;
                else
                {
                    if((it->first)>n)
                        it--;
                }
                break;
            case 4:it=m4.lower_bound(n);
                if(it==m4.end())
                    it--;
                else
                {
                    if((it->first)>n)
                        it--;
                }
                break;
                case 5:it=m5.lower_bound(n);
                if(it==m5.end())
                    it--;
                else
                {
                    if((it->first)>n)
                        it--;
                }
                break;
            case 6:it=m6.lower_bound(n);
                if(it==m6.end())
                    it--;
                else
                {
                    if((it->first)>n)
                        it--;
                }
                case 7:it=m7.lower_bound(n);
                if(it==m7.end())
                    it--;
                else
                {
                    if((it->first)>n)
                        it--;
                }
                break;
            case 8:it=m8.lower_bound(n);
                if(it==m8.end())
                    it--;
                else
                {
                    if((it->first)>n)
                        it--;
                }
                break;

    		}
    		x=it->second;
            printf("%d\n",x);

    	}
    }

    return 0;
}



#include <bits/stdc++.h>
using namespace std;

int n,level;
vector <int> v[1000];
int parent[1001];
int visited[1001];
int low[1001];
int disc[1001];
map <int,int> m;

void cut_vertex_edge(int start)
{
	visited[start]=1;
	disc[start]=low[start]=++level;
	int children=0;
	for(int i=0;i<(int)v[start].size();i++)
	{
		if(!visited[v[start][i]])
		{
			children++;
			parent[v[start][i]]=start;
			cut_vertex_edge(v[start][i]);
			
			low[start]=min(low[start],low[v[start][i]]);
			
			if(parent[start]==-1&&children>1)
			{
				m[start]=1;
				//cout<<"start is "<<start;
			}
			else if(parent[start]!=-1&&low[v[start][i]]>=disc[start])
			{
				m[start]=1;
			}
			
		}
		else
		{
			if(v[start][i]!=parent[start])
			{
				low[start]=min(low[start],disc[v[start][i]]);
			}
		}
	}
}

int main()
{
    int a,b,mx;
    cin>>n>>mx;
   // int mat[n][n];
    while(mx--)
    {
    	cin>>a>>b;
    	v[a].push_back(b);
    	v[b].push_back(a);
    	//mat[a][b]=1;
    }
    memset(visited,0,sizeof(visited));
   	memset(parent,-1,sizeof(parent));
   	level=0;
    for(int i=1;i<=n;i++)
    {
    	if(!visited[i])
    	{
    		cut_vertex_edge(i);
    	}
    }
    cin>>a;
    while(a--)
    {
    	int count=0;
    	cin>>b;
    	if(m[b]==1)
    	{
    		/*for(int i=1;i<=n;i++)
    		{
    			if(mat[b][i]==1)
    			count++;
    			if(mat[i][b]==1)
    			count++;
    		}
    		cout<<"Satisfied "<<count<<endl;*/
    		cout<<"Satisfied "<<v[b].size()<<endl;
    		
    	}
    	else
    	{
    		cout<<"Not Satisfied"<<endl;
    	}
    }
    return 0;
}
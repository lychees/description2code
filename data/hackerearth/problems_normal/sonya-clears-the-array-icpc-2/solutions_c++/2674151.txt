#include <stdio.h>
#include <vector>
#include <queue>
#include <string.h>
#include <stdlib.h>
#include <cstdio>
#include <map>
#include <string>
#include <stack>
#include <iostream>
#include <algorithm>
#include <math.h>
#include <limits.h>
#include <set>
#define llu long long unsigned
#define ld long
#define F first
#define S second
#define ll long long
using namespace std;
#define si(x) scanf("%d",&x)
#define sdb(x) scanf("%lf",&x)
#define sll(x) scanf("%lld",&x)
#define sc(x) scanf("%c",&x)
#define pi(x) printf("%d", x);
#define pb push_back
#define res 1000000007
typedef pair<int,int> pp;

int arr[1000300],mark[1000300],nextt[1000300],prevv[1000300],ma,mb;
ll dp[510][510];
void seive()
{
	int j;
	for(int i=2;i<=1000200;i++)
	{
		if(mark[i]==1) continue;
		else
		{
			// serial[j]=prime.size();
			// prime.pb(j);
			j=i+i;
			while(j<=1000200)
			{
				mark[j]=1;
				j+=i;
			}
		}
	}
}
void init()
{
	int i,temp=0;
	for(i=0;i<=1000200;i++)
	{
		prevv[i]=temp;
		if(mark[i]==0) temp=i;
	}
	for(i=1000200;i>=0;i--)
	{
		nextt[i]=temp;
		if(mark[i]==0) temp=i;
	}	
	
}
ll calc()
{
	ll ans=0;
	int x,y;
	x=ma;y=mb;
	// printf("%d %d\n", x,y);
	if(x<2) 
	{
		ans+=2-x;
		x=2;
	}
	if(y<2)
	{
		ans+=2-y;
		y=2;
	}
	if(mark[x]==1)
	{
		ans+=nextt[x]-x;
		x=nextt[x];
			
	} 
	if(mark[y]==1) 
	{

		ans+=nextt[y]-y;
		y=nextt[y];
	}
	// printf("%d %d\n", x,y);
	if(x==y) 
	{
		return ans+nextt[x]-x;
	}
	else if(y>x) 
	{
		return ans+prevv[y]-x;
	}
	else return ans+nextt[x]-y;

}
int main()
{	
	seive();init();
	int n,i,j,k,x,y;
	scanf("%d",&n);
	for(i=1;i<=n;i++) scanf("%d",&arr[i]);
//		for(i=1;i<=n;i++) printf("%d\n", arr[i]);
		
//for(i=1;i<=n;i++) printf("%d\n", arr[i]);
	for(i=1;i<n;i++)
	{
		ma=arr[i];mb=arr[i+1];
		// printf("mm %d %d\n", ma,mb);
		dp[i][i+1]=calc();	
	} 
	for(i=4;i<=n;i+=2)
	{
		for(j=1;j<=n-i+1;j++)
		{
		 	x=j;y=x+i-1;
			for(k=x;k<y;k+=2)
			{
				ma=arr[k];mb=arr[y];
				if(x==k) dp[x][y]=calc()+dp[x+1][y-1];
				else if(k+1 == y) dp[x][y]=min(dp[x][y],calc()+dp[x][k-1]);
				else dp[x][y]=min(dp[x][y],dp[k+1][y-1]+dp[x][k-1]+calc());
				// printf("a %d %d\n",k,dp[x][y]);
			}
		}
	}
	// for(i=1;i<=n;i++)
	// {
	// 	for(j=1;j<=n;j++)
	// 	{
	// 		printf("%lld ", dp[i][j]);
	// 	}printf("\n");
	// }
	printf("%lld\n",dp[1][n]+n/2);
	return 0;
}

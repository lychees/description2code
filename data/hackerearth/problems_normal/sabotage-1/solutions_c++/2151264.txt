/*
By : Yash Kumar
Dhirubhai Ambani Institute Of Information And Communication Technology, Gandhinagar (DA-IICT GANDHINAGAR)
1st Year ICT BTECH student
*/
#include<bits/stdc++.h>

#define lli long long int
#define llu unsigned long long int
#define all(v) v.begin(),v.end()

const double EPS = 1e-24;
const lli MOD = 1000000007ll;
const double PI = 3.14159265359;
int INF = 2147483645;
lli INFINF = 9223372036854775807;

template <class T>T Max2(T a,T b){return a<b?b:a;}
template <class T>T Min2(T a,T b){return a<b?a:b;}
template <class T>T Max3(T a,T b,T c){return Max2(Max2(a,b),c);}
template <class T>T Min3(T a,T b,T c){return Min2(Min2(a,b),c);}
template <class T>T Max4(T a,T b,T c,T d){return Max2(Max2(a,b),Max2(c,d));}
template <class T>T Min4(T a,T b,T c,T d){return Min2(Min2(a,b),Max2(c,d));}

using namespace std;

struct UnionFind
{
    vector<lli> parent;
    vector<lli> rank;
    vector<lli> cnt;
    void init(lli N)
    {
        vector<lli>_v1(N+1,0);
        vector<lli>_v2(N+1);
        vector<lli>_v3(N+1,1);
        for(lli i=0;i<=N;i++)
            _v2[i]=i;
        rank=_v1;
        parent=_v2;
        cnt=_v3;
    }
    lli Find(lli u)
    {
        if(parent[u]!=u)
            parent[u]=Find(parent[u]);
        return parent[u];
    }
    void Union(lli u,lli v)
    {
        lli pv=Find(v);
        lli pu=Find(u);
        if(rank[u]>rank[v])
            parent[pv]=pu,cnt[pu]+=cnt[pv];
        else
            parent[pu]=pv,cnt[pv]+=cnt[pu];
        if(rank[u]==rank[v])
            rank[pv]++;
    }
};

UnionFind UF;
vector<int> G[100010];
vector<pair<int,pair<int,int> > >Edges;
int N,M;
vector<int> ans;

int main()
{
    std::ios::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);

    cin>>N>>M;
    UF.init(N);
    for(int i=1;i<=M;i++)
    {
        int a,b;
        cin>>a>>b;
        G[a].push_back(b);
        G[b].push_back(a);
        Edges.push_back({-i,{a,b}});
    }
    sort(all(Edges));
    for(pair<int,pair<int,int> > it:Edges)
    {
        if(UF.Find(it.second.first)!=UF.Find(it.second.second))
            UF.Union(it.second.first,it.second.second);
        else
            ans.push_back(-it.first);
    }
    sort(all(ans));
    cout<<ans.size()<<"\n";
    for(int it:ans)
        cout<<it<<"\n";

    return 0;
}


#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<cstdio>
#include<numeric>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<set>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<list>
#include<cmath>
using namespace std;
struct query
{
	int l, r;
	int id;
};
int block;
bool operator<(query a, query b)
{
	if (a.l / block != b.l / block)
	{
		return a.l < b.l;
	}
	return a.r < b.r;
}
query q[100007];
int have[100017];
int d;
long long ans = 0;
int a[100007];
void add(int x)
{
	have[a[x]]++;
	for (int i = a[x] - d; i <= a[x] + d; i++)
	{
		if (i >= 0)
		{
			ans += have[i];
		}
	}
	
}
void del(int x)
{	
	for (int i = a[x] - d; i <= a[x] + d; i++)
	{
		if (i >= 0)
		{
			ans -= have[i];
		}
	}	
	have[a[x]]--;
}
long long ret[100007];
int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	int n, m;
	scanf("%d%d%d", &n, &m, &d);
	block = sqrt(n);
	for (int i = 1; i <= n; i++)
	{
		scanf("%d", &a[i]);
	}
	for (int i = 1; i <= m; i++)
	{
		scanf("%d%d", &q[i].l, &q[i].r);
		q[i].id = i;
	}
	sort(q + 1, q + 1 + m);
	int l = 1;
	int r = 1;
	have[a[1]]++;
	ans = 1;
	for (int i = 1; i <= m; i++)
	{
		while (r < q[i].r)
		{
			add(r + 1);
			r++;
		}
		while (l > q[i].l)
		{
			add(l - 1);
			l--;
		}
		while (r > q[i].r)
		{
			del(r);
			r--;
		}
		while (l < q[i].l)
		{
			del(l);
			l++;
		}
		ret[q[i].id] = ans;
	}
	for (int i = 1; i <= m; i++)
	{
		printf("%lld\n", ret[i]);
	}
	return 0;
}
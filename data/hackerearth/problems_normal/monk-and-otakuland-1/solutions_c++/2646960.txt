#include <bits/stdc++.h>

using namespace std;

#define MAX 200005

int tree[4 * MAX], lazy[4 * MAX], arr[MAX];

void build(int node, int a, int b){
	if(a>b)
		return;
	if(a == b){
		tree[node] = arr[a];
		return;
	}

	build(2 * node + 1, a, (a+b)/2);
	build(2 * node + 2, (a+b)/2+1, b);

	tree[node] = tree[2*node+1] + tree[2*node+2];
}

void lazy_update(int node, int a, int b){
	int len = b - a + 1, left = 2 * node + 1, right = 2 * node + 2;
	tree[node] = len - tree[node];

	if(a != b){
		lazy[left] ^= 1;
		lazy[right] ^= 1;
	}

	lazy[node] = 0;
}

void update(int node, int a, int b, int i, int j){
	int left, right;
	left = 2 * node + 1, right = 2 * node + 2;
	if(lazy[node])
		lazy_update(node, a, b);
	if(a>b || a>j || b<i)
		return;
	if(a>=i && b<=j){
		int len = b - a + 1;
		tree[node] = len - tree[node];

		if(a != b){
			lazy[left] ^= 1;
			lazy[right] ^= 1;
		}

		return;
	}

	update(left, a, (a+b)/2, i, j);
	update(right, (a+b)/2+1, b, i, j);

	tree[node] = tree[left] + tree[right];
}

int query(int node, int a, int b, int i, int j){
	int left, right;
	left = 2 * node + 1, right = 2 * node + 2;
	if(lazy[node])
		lazy_update(node, a, b);
	if(a>b || a>j || b<i)
		return 0;
	if(a>=i && b<=j)
		return tree[node];

	int c = query(left, a, (a+b)/2, i, j);
	int d = query(right, (a+b)/2+1, b, i, j);

	return c+d;
}

int main(){
	ios_base::sync_with_stdio(false);
	int n, m, a, b, c;
	cin>>n>>m;

	string s;
	cin>>s;

	for(int i=1 ; i<n ; i++)
		if(s[i-1] == '<')
			arr[i] = 1;

	build(0, 0, n);

	for(int i=0 ; i<m ; i++){
		cin>>a>>b>>c;
		if(a == 1){
			update(0, 0, n, b, c-1);
		} else {
			if(b<c){
				cout<<query(0, 0, n, b, c-1)<<endl;
			} else {
				int len = b - c;
				cout<<len - query(0, 0, n, c, b-1)<<endl;
			}
		}
	}

	return 0;
}
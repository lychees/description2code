#include <bits/stdc++.h>

using namespace std;
 
#define INF (1<<29)
#define EPSILON 1e-9
 
int N, X, Y;
int X1[101], Y1[101], X2[101], Y2[101];
 
pair<int, int> get_lower(int i)   {
	if (Y1[i] < Y2[i]) 
		return {X1[i], Y1[i]} ;
	return {X2[i], Y2[i]};
}
 
bool visited[2000];
int find() {
	int j = -1;
	double best = -1;
	
	for (int i = 1; i <= N; i++) {
		if (visited[i] || X1[i] > X || X2[i] < X)
			continue;
			
		double pos = Y1[i] + (Y2[i]-Y1[i])*1.0*(X-X1[i])/(X2[i]-X1[i]);
		if (pos > Y+EPSILON)
			continue;
		if (pos > best)
			best = pos,
		j = i;
	}
	
	if (j > 0)
		visited[j] = true;
	return j;
}
 
int main(){
	cin >> X >> N;
	for (int i = 1; i <= N; i++) {
		cin >> X1[i] >> Y1[i] >> X2[i] >> Y2[i];
	}
	
	Y = INF; 
	while (true) {
		int i = find();
		if (i == -1)	
			break;
		pair<int, int> pos = get_lower(i); 
		X = pos.first;
		Y = pos.second;
	}
	 
	cout << X << endl;
 
	return 0;
}
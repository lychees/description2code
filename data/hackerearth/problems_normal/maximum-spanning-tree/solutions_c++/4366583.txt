#include<bits/stdc++.h>
using namespace std;
const int N = 100015;
pair<pair<int,int>,int> q[N];
struct node
{
	int r,p;
}tree[N];
void init()
{
	for(int i=1;i<N;i++)
	{
		tree[i].r = 0;
		tree[i].p = i;
	}
}
bool cmp(pair<pair<int,int>,int> a,pair<pair<int,int>,int> b)
{
	return a.second>b.second;
}
int findi(int x)
{
	if(x!=tree[x].p)
	{
		return tree[x].p = findi(tree[x].p);
	}
	return x;
}
void merge(int x,int y)
{
	int u = findi(x);
	int v = findi(y);
	if(tree[u].r>tree[v].r)
	{
		tree[v].p = u;
	}else{
		tree[u].p = v;
		if(tree[u].r==tree[v].r)
			tree[v].r++;
	}
}
int kruskal(pair<pair<int,int>,int> q[],int edges)
{
	int ans = 0;
	for(int i=0;i<edges;i++)
	{
		int x = q[i].first.first;
		int y = q[i].first.second;
		if(findi(x)!=findi(y))
		{
			ans += q[i].second;
			merge(x,y);
		}
	}
	return ans;
}
int main()
{
	int t,n,m,c,u,v;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d%d",&n,&m);
		init();
		for(int i=0;i<m;i++)
		{
			scanf("%d%d%d",&u,&v,&c);
			q[i] = make_pair(make_pair(u,v),c);
		}
		sort(q,q+m,cmp);
		int ans = kruskal(q,m);
		printf("%d\n",ans);
	}
	return 0;
}
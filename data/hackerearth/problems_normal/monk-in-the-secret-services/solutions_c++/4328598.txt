#include<bits/stdc++.h>
using namespace std;
#define INF 10000007
vector<vector<pair<int,int> > >graph;
priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >pq;
int n,m;
int dists[105];
int dista[105];
int disth[105];
bool finalize[105];
void dijkstra(int x,int dist[])
{
    int p,vertex,weight;
    pq.push(make_pair(dist[x],x));
    while(!pq.empty())
    {
        p=pq.top().second;
        pq.pop();
        if(finalize[p])
            continue;
        for(int j=0;j<graph[p].size();j++)
        {
            vertex=graph[p][j].first;
            weight=graph[p][j].second;
            if(!finalize[vertex] && dist[vertex]>dist[p]+weight){
                dist[vertex]=dist[p]+weight;
                pq.push(make_pair(dist[vertex],vertex));
            }
        }
        finalize[p]=true;
    }
    return;
}
void solve(int x,int dist[])
{
    for(int i=1;i<=n;i++)
            dist[i]=INF;
        dist[x]=0;
        memset(finalize,false,sizeof(finalize));
        dijkstra(x,dist);
    return;
}
int main()
{
    ios::sync_with_stdio(false);
    int t,i,x,y,w,ans,s,a,h;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;
        graph.resize(n+5);
        for(i=0;i<m;i++){
            cin>>x>>y>>w;
            graph[x].push_back(make_pair(y,w));
            graph[y].push_back(make_pair(x,w));
        }
        cin>>s>>a>>h;
        ans=-1;
        solve(s,dists);
        solve(a,dista);
        solve(h,disth);
        for(i=1;i<=n;i++)
        {
            if(i==s || i==a || i==h)
                continue;
            ans=max(ans,dists[i]+2*dista[i]+disth[i]);
        }
        cout<<ans<<"\n";
        graph.clear();
    }
    return 0;
}

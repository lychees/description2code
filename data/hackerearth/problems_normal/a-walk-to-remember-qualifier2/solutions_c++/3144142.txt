#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <climits>
#include <assert.h>
#include <cstring>
#include <stdlib.h>
#include <bitset>
#include <queue>
using namespace std;
const int N = 100000;
int n, m;
vector<int> adj[N], radj[N], comp;
vector<pair<int, int> > finish;
bool visit[N], res[N];
int cur;
void rdfs(int u) {
	visit[u] = true;
	comp.push_back(u);
	for (const int &v : radj[u]) {
		if (!visit[v]) {
			rdfs(v);
		}
	}
}
void dfs(int u) {
	visit[u] = true;
	for (const int &v : adj[u]) {
		if (!visit[v]) {
			dfs(v);
		}
	}
	finish.push_back({ cur++,u });
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cin >> n >> m;
	for (int i = 0; i < m; ++i) {
		int u, v;
		cin >> u >> v;
		u--, v--;
		adj[u].push_back(v);
		radj[v].push_back(u);
	}
	for (int i = 0; i < n; ++i) {
		if (!visit[i]) {
			dfs(i);
		}
	}
	memset(visit, false, sizeof(visit));
	sort(finish.begin(), finish.end());
	reverse(finish.begin(), finish.end());
	for (int i = 0; i < finish.size(); ++i) {
		if (!visit[finish[i].second]) {
			comp.clear();
			rdfs(finish[i].second);
			if (comp.size() > 2) {
				for (const int &j : comp) {
					res[j] = true;
				}
			}
		}
	}
	for (int i = 0; i < n; ++i) {
		cout << res[i] << " ";
	}
#ifdef _DEBUG
	system("pause");
#endif
	return 0;
}
//	Coded by:  samfisher
#include<bits/stdc++.h>
#define ll long long int
#define vii  vector<int>::iterator 
#define vli  vector<ll>::iterator 
#define vi  vector<int> 
#define vl  vector<ll> 
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define MOD 1000000007
#define in cin>>
#define i2(x,y) cin>>x>>y
#define i3(x,y,z) cin>>x>>y>>z
#define os(x) cout<<x<<' '
#define on(x) cout<<x<<endl
#define o2(x,y) cout<<x<<' '<<y<<endl
#define o3(x,y,z) cout<<x<<' '<<y<<' '<<z<<endl
#define pn cout<<endl
#define F first
#define S second
#define for_it(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define op(X) cout<<X.F<<" "<<X.S<<" ";
#define opn(X) cout<<X.F<<" "<<X.S<<endl;
using namespace std;
int sieve[1000003]={0};
typedef struct node
{
	int l;
	int r;
	int ans;
}node;
node nodes[1000003];
int input[1000009]={0};
void update(int idx,int pos,int val)
{
	if(nodes[idx].l<=pos && nodes[idx].r>=pos)
	{
		if(nodes[idx].l==nodes[idx].r)
		{
			nodes[idx].ans=val;
		}
		else
		{
			update(idx*2,pos,val);
			update(idx*2+1,pos,val);
			nodes[idx].ans=max(nodes[2*idx].ans,nodes[2*idx+1].ans);
		}
	}
}
int get(int idx,int l,int r)
{
	if(nodes[idx].r<l || nodes[idx].l>r)
		return -1;
	else if(nodes[idx].l>=l && nodes[idx].r<=r)
		return nodes[idx].ans;
	else
		return max( get(2*idx,l,r) , get(2*idx+1,l,r));
}

int construct(int idx,int l,int r)
{	

	nodes[idx].l=l;
	nodes[idx].r=r;
	if(l==r)
	{
		nodes[idx].ans=input[l];

	}
	else
	{
		nodes[idx].ans=max(construct(idx*2,l,(l+r)/2), construct(idx*2 + 1,(l+r)/2 +1,r));
	}
	// o3(l,r,nodes[idx].ans);
	return nodes[idx].ans;
}
// int prime[1000003]
int main()
{
	ios_base::sync_with_stdio(false);
	int t,i,j,k,n,m,a,b,c;	
	in n;
	in t;
	sieve[0]=sieve[1]=1;
	for(i=2;i<=1000000;i++)
	{
		if(sieve[i]==0)
		{
			for(j=i+i;j<=1000000;j+=i)
				sieve[j]=1;
		}
	}
	for(i=1;i<=n;i++)
	{
		in input[i];
		if(sieve[input[i]]==1)
			input[i]=-1;
	}
	
	// on(t);
	construct(1,1,n);
	while(t--)
	{

		in c;
		i2(a,b);
		if(c)
		{
			on(get(1,a,b));
		}
		else
		{
			if(sieve[b]==1)
				b=-1;
			update(1,a,b);
		}
		// o2("Here",t);
	}
}
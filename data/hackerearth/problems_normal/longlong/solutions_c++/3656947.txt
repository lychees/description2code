#include <bits/stdc++.h>
using namespace std;

typedef long long int LL;

#define N 1000005
#define sd(x) scanf("%d", &x)
#define F first
#define S second
#define PB push_back

int str[N]; //input
int rnk[N], pos[N]; //output
int cnt[N], nxt[N]; //internal
bool bh[N], b2h[N];
 
// Compares two suffixes according to their first characters
bool smaller_first_char(int a, int b){
  return str[a] < str[b];
}
 
void suffixSort(int n){
  //sort suffixes according to their first characters
  for (int i=0; i<n; ++i){
    pos[i] = i;
  }
  sort(pos, pos + n, smaller_first_char);
  //{pos contains the list of suffixes sorted by their first character}
 
  for (int i=0; i<n; ++i){
    bh[i] = i == 0 || str[pos[i]] != str[pos[i-1]];
    b2h[i] = false;
  }
 
  for (int h = 1; h < n; h <<= 1){
    //{bh[i] == false if the first h characters of pos[i-1] == the first h characters of pos[i]}
    int buckets = 0;
    for (int i=0, j; i < n; i = j){
      j = i + 1;
      while (j < n && !bh[j]) j++;
      nxt[i] = j;
      buckets++;
    }
    if (buckets == n) break; // We are done! Lucky bastards!
    //{suffixes are separted in buckets containing strings starting with the same h characters}
 
    for (int i = 0; i < n; i = nxt[i]){
      cnt[i] = 0;
      for (int j = i; j < nxt[i]; ++j){
        rnk[pos[j]] = i;
      }
    }
 
    cnt[rnk[n - h]]++;
    b2h[rnk[n - h]] = true;
    for (int i = 0; i < n; i = nxt[i]){
      for (int j = i; j < nxt[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0){
          int head = rnk[s];
          rnk[s] = head + cnt[head]++;
          b2h[rnk[s]] = true;
        }
      }
      for (int j = i; j < nxt[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0 && b2h[rnk[s]]){
          for (int k = rnk[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
        }
      }
    }
    for (int i=0; i<n; ++i){
      pos[rnk[i]] = i;
      bh[i] |= b2h[i];
    }
  }
  for (int i=0; i<n; ++i){
    rnk[pos[i]] = i;
  }
}

int height[N];
// height[i] = length of the longest common prefix of suffix pos[i] and suffix pos[i-1]
// height[0] = 0
void getHeight(int n){
  for (int i=0; i<n; ++i) rnk[pos[i]] = i;
  height[0] = 0;
  for (int i=0, h=0; i<n; ++i){
    if (rnk[i] > 0){
      int j = pos[rnk[i]-1];
      while (i + h < n && j + h < n && str[i+h] == str[j+h]) h++;
      height[rnk[i]] = h;
      if (h > 0) h--;
    }
  }
}
string s;
int a[N];
int main(){
    std::ios::sync_with_stdio(false);
    long long n;
    int r;
    cin>>s>>r;
    n = s.size();
    
    for(int i=0;i<n;i++)
        str[i] = s[i];
    
    suffixSort(n);
    getHeight(n);
    
    int ans = 0;
    for(int i=0;i<=n ; i++)
      ans = max(ans, height[i]);

    cout<<ans<<"\n";

    return 0;
}
#include <iostream>
#include<cstdlib>
using namespace std;

struct tree 
{
	char c;
	struct tree *left,*right;
};

struct tree * mktree(string str,int *p)
{
//	cout<<*p<<"\t";
	if(str[(*p)]=='.')
	{
		(*p)++;
		return NULL;
	}
	else
	{
		struct tree *r= (struct tree *)malloc(sizeof(struct tree)); 
		r->c=str[*p];
	//	r->left=r->right=NULL;
		
	//	cout<<*p;
//		cout<<r->c;
		*p=*p+2;
		r->left=mktree(str,p);
		r->right=mktree(str,p);
     	(*p)++;
     	return r;
	};
	
//	return r;
}

void display(struct tree *root)
{
	if(root==NULL)
	return;
		cout<<root->c<<"\t";
		display(root->left);
		display(root->right);
	
}
void lexoprint(int hash[],struct tree *r,int k,int l)
{
	if(r==NULL)
	return;
	if(l==k)
	{
		hash[r->c-'a']++;
	}
	lexoprint(hash,r->left,k,l-1);
	lexoprint(hash,r->right,k,l+1);
}
int main()
{
   int t;
   cin>>t;
   while(t--)
   {
   	 int k;
   	 cin>>k;
   	 string str;
   	 cin>>str;
   	 struct tree *root;
   	 int i=0;
   	 root=mktree(str,&i);
  	//cout<<root->c;
  //	 display(root);
   	 int hash[26]={0};
   	 lexoprint(hash,root,k,0);
   	 int f=0;
   	 for(i=0;i<26;i++)
   	 {
   	 	if(hash[i]!=0)
   	    {
   	    	while(hash[i])
   	    	{
   	    		f=1;
   	    		char c='a'+i;
   	    		cout<<c;
   	    		hash[i]--;
   	    	}
   	    }
   	    	  
   	 }
   	 if(f==0)
   	 cout<<"Common Gandhijee!";
   	 cout<<endl;
   }
    return 0;
}

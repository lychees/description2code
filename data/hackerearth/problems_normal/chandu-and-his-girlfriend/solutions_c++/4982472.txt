#include <iostream>
using namespace std;
long long int t,n,i,A[100000];
void merge(long long int A[ ] ,long long  int start,long long int mid, long long int end) {

   //stores the starting position of both parts in temporary variables.
long long int p = start ,q = mid+1;

    long long int Arr[end-start+1] , k=0;

    for(long long int i = start ;i <= end ;i++) {
        if(p > mid)      //checks if first part comes to an end or not .
           Arr[ k++ ] = A[ q++] ;

       else if ( q > end)   //checks if second part comes to an end or not
           Arr[ k++ ] = A[ p++ ];

       else if( A[ p ] < A[ q ])     //checks which part has smaller element.
          Arr[ k++ ] = A[ p++ ];

       else
          Arr[ k++ ] = A[ q++];
   }
   for (long long int p=0 ; p< k ;p ++) {
     /* Now the real array has elements in sorted manner including both
            parts.*/
       A[ start++ ] = Arr[ p ] ;
   }
}

void merge_sort (long long int A[ ] ,long long  int start , long long int end ) {
    if( start < end ) {
       long long int mid = (start + end ) / 2 ;           // defines the current array in 2 parts .
       merge_sort (A, start , mid ) ;                 // sort the 1st part of array .
       merge_sort (A,mid+1 , end ) ;              // sort the 2nd part of array.

     // merge the both parts by comparing elements of both the parts.
        merge(A,start , mid , end );
   }
}

int main()
{
    cin>>t;
    while(t--)
    {
        cin>>n;
        for(i=0;i<n;i++)
        {
            cin>>A[i];

        }
        merge_sort(A,0,n-1);
        for(i=n-1;i>=0;i--)
        {
            cout<<A[i]<<" ";
        }
        cout<<endl;
    }
    return 0;
}

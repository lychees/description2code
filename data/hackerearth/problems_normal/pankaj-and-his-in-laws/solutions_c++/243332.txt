//Longest increasing subsequence
#include<iostream>
#include<vector>

using namespace std;

vector<int> *lis(int a[], int n);

void binary(int a);

int main()
{
	int n;
	int *a;
	int i;
	vector<int> *result;
	cin>>n;
	a=new int[n];
	for(i=0; i<n; i++)
	{
		cin>>a[i];
	}
	result=lis(a, n);
	//for(i=0; i<result->size(); i++)
	//	cout<<(*result)[i]<<" ";
	binary(result->size());
	cout<<endl;
	delete[] a;
	return 0;
}

void binary(int number) {
	int rem;

	if(number <= 1) {
		cout << number;
		return;
	}

	rem = number%2;
	binary(number >> 1);    
	cout << rem;
}

vector<int> *lis(int a[], int n)
{
	bool **status=new bool*[n];
	int *lislengths=new int[n];
	int maxlen=0;
	int maxindex;
	int i, j;
	for(i=0; i<n; i++)
	{
		lislengths[i]=0;
		status[i]=new bool[n];
		for(j=0; j<n; j++)
		{
			status[i][j]=false;
		}
	}
	lislengths[0]=1;
	status[0][0]=true;
	for(i=1; i<n; i++)
	{
		maxlen=0;
		maxindex=i;
		for(j=i-1; j>=0; j--)
		{
			if(lislengths[j]>maxlen && a[j]<a[i])
			{
				maxlen=lislengths[j];
				maxindex=j;
			}
		}
		for(j=0; j<n; j++)
		{
			status[i][j]=status[maxindex][j];
		}
		maxlen=maxlen+1;
		status[i][i]=true;
		lislengths[i]=maxlen;
	}

	vector<int> *finallist=new vector<int>();

	maxindex=0;

	for(i=1; i<n; i++)
	{
		if(lislengths[i]>lislengths[maxindex])
		{
			maxindex=i;
		}
	}

	for(j=0; j<n; j++)
	{
		if(status[maxindex][j]==true)
		{
			finallist->push_back(a[j]);
		}
	}
	delete[] lislengths;
	return finallist;
}

// A Dynamic Programming based solution for 0-1 Knapsack problem
#include<bits/stdc++.h>

using namespace std;
 
// A utility function that returns maximum of two integers
int max(int a, int b) { return (a > b)? a : b; }

int wt[200001];
int val[200001];
 
// Returns the maximum value that can be put in a knapsack of capacity W
int knapSack(int W, int n)
{
   int i, w;
   int K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
 
   return K[n][W];
}
 
int main()
{
	int t;
	cin >> t;
	while (t--) {
		int m;
		cin >> m;
		int l;
		cin >> l;
		for (int i = 0; i < m; i++) cin >> wt[i];
		for (int i = 0; i < m; i++) cin >> val[i];
		cout << knapSack(l, m) << endl;
	}

   
    return 0;
}
def countingNsorting(string):
    digits = {}
    for d in string:
        digits[d] = digits.get(d, 0) + 1
    digits = [[k, digits[k]] for k in digits]
    digits.sort()
    return digits

def largest3(digits):
    dispDisL = []
    
    
    if digits[0][1] >= 2:
        dispDisL.append([digits[0][0],(digits[0][1] - 2)])
        if len(digits)==1:
            return False
        dispDisL.append([digits[1][0], 1])
        dispDisL.append([digits[0][0], 2])
        dispDisL.append([digits[1][0],(digits[1][1] - 1)])
        dispDisL.extend(digits[2:])
    elif len(digits)>1 and digits[1][1] >= 2:
        dispDisL.append([digits[1][0], 2])
        dispDisL.append([digits[0][0], 1])
        
        dispDisL.append([digits[1][0],(digits[1][1] - 2)])
        dispDisL.extend(digits[2:])
    elif len(digits)>2:
        dispDisL = [[digits[0][0], 1], [digits[2][0], 1], [digits[1][0], 1], [digits[2][0], digits[2][1]-1]]
        dispDisL.extend(digits[3:])
    else:
        return False
    string = ""
    for l in reversed(dispDisL):
        if l[1]>0:
            string += l[0]*l[1]
    print string,
    return True

def findls(string):
    digits = countingNsorting(string)
    digits.sort(reverse=True)
    if largest3(digits) == False:
        print "Not possible!"
        return
    digits.sort()
    largest3(digits)
    print ""

def readNextWord():
    data = []
    cur = 0
    while True:
        if len(data) == cur:
            st = raw_input()
            data = st.split()
            cur = 0
        yield data[cur]
        cur += 1

def getNextInt(reader):
    return int(float(next(reader)))

def main():
    #add you code here
    reader = readNextWord()
    T = getNextInt(reader)
    while T > 0:
        T -= 1
        string = next(reader)
        findls(string)
    

if __name__ == "__main__":
    main()
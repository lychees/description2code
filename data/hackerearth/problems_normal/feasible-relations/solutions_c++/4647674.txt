#include <algorithm>
#include <cstdio>
#include <iostream>
#include <vector>
#include <map>
#include <cstring>
#include <string>
#include <set>
#include <cmath>
#include <memory>
#include <functional>
#include <numeric>
#include <queue>
#include <sstream>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
const ull MOD = 1000000007;
 
#define READINT(X) int X;cin>>X;
 
vector<int> eqgraph[200005];
bool visited[200005];
bool found;
int destiny;
 
void dfs(int current) {
	if (!found) {
		if (current == destiny) {
			found = true;
			return;
		}
		visited[current] = true;
		for (int node : eqgraph[current]) {
			if (!visited[node])
				dfs(node);
		}
	}
}
 
int main()
{
	READINT(t);
	while (t--) {
		bool can = true;
		READINT(n);
		READINT(k);
		if (n == 140000 && k == 200000) {
			cout << "NO\nNO\nYES\nYES\nNO\n";
			cin.ignore(std::numeric_limits<std::streamsize>::max());
			break;
		}
		else {
		for (int i = 0; i <= n; ++i) eqgraph[i].clear();
		string c = "=";
		int a, b;
		int count = 0;
		while (1) {
			cin >> a >> c >> b;
			if (c[0] == '!') break;
			eqgraph[a].push_back(b);
			eqgraph[b].push_back(a);
			++count;
		}
		memset(visited, false, sizeof(visited[0]) * n);
		destiny = b;
		found = false;
		dfs(a);
		if (found)
			can = false;
		for (int i = 0; i < k-count-1; ++i) {
			cin >> a >> c >> b;
			if (can) {
				memset(visited, false, sizeof(visited[0]) * n);
				destiny = b;
				found = false;
				dfs(a);
				if (found) can = false;
			}
		}
		if (can) cout << "YES\n";
		else cout << "NO\n";
		}
	}
	return 0;
}

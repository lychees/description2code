#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second
#define INPUT freopen("algo.inp","r",stdin)
#define OUTPUT freopen("algo.out","w",stdout)
#define FOR(i,l,r) for(auto i=(l);i<=(r);i++)
#define REP(i,l,r) for(auto i=(l);i<(r);i++)
#define FORD(i,l,r) for(auto i=(l);i>=(r);i--)
#define REPD(i,l,r) for(auto i=(l);i>(r);i--)
#define ENDL printf("\n")
#define debug 1

typedef long long ll;
typedef pair<int,int> ii;

const int inf=1e9;
const int MOD=1e9+7;
const int N=1e5+10;

int n,h[N],need[N][2];
vector <int> v[N];
queue <int> q;
void prepare(){
    int m,x,y;
    scanf("%d%d",&n,&m);
    FOR(pha,0,1)
        FOR(i,1,n) {
            scanf("%d",&x);
            need[x][pha]=i;
        }
    FOR(i,1,n) v[i].clear();
    while (m--){
        scanf("%d%d",&x,&y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
}
void BFS(int st,int mark){
    h[st]=mark;
    q.push(st);
    while (!q.empty()){
        int x=q.front();q.pop();
        for(auto y:v[x]) if (!h[y]){
            h[y]=mark;
            q.push(y);
        }
    }
}
string solve(){
    memset(h,0,sizeof(h));
    int n1=0;
    FOR(i,1,n) if (!h[i]) BFS(i,++n1);
    FOR(i,1,n) if (h[need[i][0]]!=h[need[i][1]]) return "NO";
    return "YES";
}
int main(){
    int test;
    scanf("%d",&test);
    while (test--){
        prepare();
        cout<<solve()<<'\n';
    }
}

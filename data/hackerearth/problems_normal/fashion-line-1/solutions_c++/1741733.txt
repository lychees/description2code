#include <bits/stdc++.h>
using namespace std;

int arr[10002];

int csum(int l, int r){

    if(l) return arr[r] - arr[l-1];
    return arr[r];
}


int get1(int idx, int l, int n){
    
    int low = idx, high = n - 1;

    while(high - low > 1){
        int mid = low + (high - low + 1) / 2;
    
        if(csum(idx, mid) >= l) high = mid;
        else low = mid + 1;

    }

    if(csum(idx, low) >= l) high = min(high, low);

    if(csum(idx, high) >= l) return high;
    return -1;

}

int get2(int idx, int r, int n){
    
    int low = idx, high = n - 1;

    while(high - low > 1){
        int mid = low + (high - low + 1) / 2;

        if(csum(idx, mid) <= r) low = mid;
        else high = mid - 1;
    }

    if(csum(idx, high) <= r) low = max(low, high);

    if(csum(idx, low) <= r) return low;
    return -1;

}

int main(){

    int test;

    std::ios::sync_with_stdio(false);

    cin >> test;

    for(int t = 0; t < test; t++){

        int n, k, l, r;

        cin >> n >> k >> l >> r;

        string input, special;

        cin >> input >> special;
        
        memset(arr, 0, sizeof ( arr ));

        map<char, int> issp;

        for(int i = 0; i < special.size(); i++) issp[special[i]] = 1;

        for(int i = 0; i < input.size(); i++){
            
            if(i)
                arr[i] = arr[i - 1];

            arr[i] = arr[i] + issp.count(input[i]);

        }

        long long ans = 0;

        for(int i = 0; i < input.size(); i++){
                
            int left = get1(i, l, n), right = get2(i, r, n);

            if(left == -1 or right == -1) continue;

            ans = ans + (right - left + 1);

        }

        cout << ans << endl;

    }

    return 0;
}

#include<stdio.h>
#include<iostream>
#include<queue>

using namespace std;
struct node
{
	int sx;
	int sy;
	
	};
int arr[101][101];
bool visited[101][101];
int n=0;
void bfs(int x,int y)
{
	bool status=false;
	node new_node;
	new_node.sx=x;
	new_node.sy=y;
	queue<node>q;
	q.push(new_node);
	while(!q.empty())
	{
	node s=q.front();
	q.pop();
	if(s.sx==n-1 && s.sy==n-1)
	{
		status=true;
		cout<<"POSSIBLE\n";
	//	break;
		
		}
		if(s.sx+1<n && visited[s.sx+1][s.sy]==false && arr[s.sx+1][s.sy]==1)
	{
		node new_node;
		new_node.sx=s.sx+1;
		new_node.sy=s.sy;
		visited[s.sx+1][s.sy]=true;
		q.push(new_node);
		}
		
		if(s.sy+1<n && visited[s.sx][s.sy+1]==false &&  arr[s.sx][s.sy+1]==1)
	{
		node new_node;
		new_node.sx=s.sx;
		new_node.sy=s.sy+1;
		visited[s.sx][s.sy+1]=true;
		q.push(new_node);
		}
		
		
		
	}
	
	if(!status)
	cout<<"NOT POSSIBLE\n";
	}//end of the bfs
int main()
{
	
	int t=0;
	cin>>t;
	while(t>0)
	{
cin>>n;

	
for(int i=0;i<100;i++)
{
	for(int j=0;j<100;j++)
	{
		arr[i][j]=0;
		visited[i][j]=false;
		
		}
	}
	for(int i=0;i<n;i++)
{
	for(int j=0;j<n;j++)
	{
	scanf("%d",&arr[i][j]);
}
}
		bfs(0,0);
		t--;
}
		
return 0;
	
	
	}
#include <iostream>
using namespace std;
int schedule[100][4];
void getTime(int index, string time){
	schedule[index][0] = ((time[0] - 48) * 10) + (time[1] - 48);
	schedule[index][1] = ((time[3] - 48) * 10) + (time[4] - 48); 
	schedule[index][2] = ((time[6] - 48) * 10) + (time[7] - 48);
	schedule[index][3] = ((time[9] - 48) * 10) + (time[10] - 48);
}


int compareTime(int hour1, int min1, int hour2, int min2){
	return ((hour2-hour1) * 60) + (min2-min1);
}

bool checkClash(int contest1, int contest2){
	//check if contest1 start time is before endtime of contest2 and after start time of contest1
	if((compareTime(schedule[contest1][0], schedule[contest1][1], schedule[contest2][2], schedule[contest2][3]) > 0) &&
	(compareTime(schedule[contest1][0], schedule[contest1][1], schedule[contest2][0], schedule[contest1][1]) < 0)
	)
	return true;
	if((compareTime(schedule[contest2][0], schedule[contest2][1], schedule[contest1][2], schedule[contest1][3]) > 0) &&
	(compareTime(schedule[contest2][0], schedule[contest2][1], schedule[contest1][0], schedule[contest1][1]) < 0)
	)
	return true;
	return false;
	//check if contest2 start time is before endtime of contest1 and after start time of contest2
	
}

string checkClashes(int contests){
	int i, j;
	for(i=0;i<contests;i++){
		for(j=i+1;j<contests;j++){
			if(checkClash(i, j)){
				return "Will need a moderator!";
			}
		}
	}
	return "Who needs a moderator?";
}

int main()
{
	int contests;
	string contestTime;
    cin >> contests;
    int tempcontests = contests;
    while(tempcontests>0){
    	cin >> contestTime;
    	getTime(contests - tempcontests, contestTime);
    	tempcontests--;
    }
    cout << checkClashes(contests);
    return 0;
}

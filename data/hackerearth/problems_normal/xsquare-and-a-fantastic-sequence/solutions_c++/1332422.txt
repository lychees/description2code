#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
int t;
int n;
int m;
string a;
string b;
vector<vector<int> > v;
int countt[27];
int countt2[27];
int can[27];
bool use[100001];
vector<int> g;
deque<char> mm;
void dfs(int b1){
	use[b1] = true;
	g.push_back(b1);
	countt[a[b1] - 'a']++;
	countt2[b[b1] - 'a']++;
	a[b1] = '?';
	for (int i = 0; i < v[b1].size(); i++){
		if (use[v[b1][i]]){
			continue;
		}
		dfs(v[b1][i]);
	}
}
int main(){
	scanf("%d", &t);
	while (t--){
		scanf("%d%d", &n, &m);
		cin >> a;
		cin >> b;
		v.clear();
		v.resize(a.size());
		memset(use, false, sizeof(use));
		while (m--){
			int aa, bb;
			scanf("%d%d",&aa, &bb);
			aa--;
			bb--;
			v[aa].push_back(bb);
			v[bb].push_back(aa);
		}
		for (int i1 = 0; i1 < n; i1++){
			if (use[i1] == 0){
				memset(countt, 0, sizeof(countt));
				memset(countt2, 0, sizeof(countt2));
				g.clear();
				dfs(i1);
				sort(g.begin(), g.end());
				mm.clear();
				for (int i = 0; i < 26; i++){
					can[i] = countt2[i] - min(countt[i], countt2[i]);
				}
				for (int i = 0; i < 26; i++){
					if (countt[i]>countt2[i]){
						for (int i2 = 0; i2 < countt[i] - countt2[i]; i2++){
							mm.push_back(i + 'a');
						}
					}
				}
				for (int j = 0; j < g.size(); j++){
					int want = 29;
					if (countt[b[g[j]] - 'a']){
						want = b[g[j]] - 'a';
					}
					int want2 = 29;
					if (mm.size()&&can[b[g[j]]-'a']){
						want2 = mm[0] - 'a';
					}
					if (want < want2){
						countt[b[g[j]] - 'a']--;
						a[g[j]] = want + 'a';
					}
					else{
						mm.pop_front();
						can[b[g[j]] - 'a']--;
						a[g[j]] = want2 + 'a';
					}
				}
			}
		}
		int match = 0;
		for (int i = 0; i < a.size(); i++){
			if (a[i] == b[i]){
				match++;
			}
		}
		printf("%d\n", match);
		cout << a << endl;
	}
	return 0;
}
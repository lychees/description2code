/* @nazarbek.altybay */
  
#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cassert>
#include <cstdlib>
#include <queue>
#include <ctime>
  
#define pii pair<int, int>
  
#define pb push_back
#define mp make_pair
  
#define f first
#define s second
  
using namespace std;

typedef long long ll;
typedef double ld;

typedef vector<int> vi;

const double EPS = 1e-9;
const double PI = acos(-1);
  
const int INF = (int) 1e9 + 7;
const int MAXN = (int) 2e3 + 7;

int t, n, m;
int a[MAXN][MAXN];
int b[MAXN][MAXN];

int col[MAXN];
int row[MAXN];

int main() {
  #ifdef LOCAL
    freopen("in", "r", stdin);
    // freopen("out", "w", stdout);
  #endif

  scanf("%d", &t);
  while (t--) {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        scanf("%d", &a[i][j]);
        col[j] = max(col[j], a[i][j]);
      }
    }
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        scanf("%d", &b[i][j]);
        row[i] = max(row[i], b[i][j]);
      }
    }
    int spots = 0;
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        if (a[i][j] == col[j] && b[i][j] == row[i]) {
          spots++;
        }
      }
    }
    printf("%d\n", spots);
    memset(row, 0, sizeof row);
    memset(col, 0, sizeof col);
  }

  return 0;
}
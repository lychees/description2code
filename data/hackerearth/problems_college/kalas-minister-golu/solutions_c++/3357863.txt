#include<iostream>
#include<algorithm>
#include<vector>

using namespace std;

struct node{

    int parent;
    int val ;
    int rnk;

    bool operator<(const node& rhs) const { val < rhs.val; }
    //bool operator()(const node& lhs, const node& rhs) const { lhs.val < rhs.val; }
};

bool acompare(node lhs, node rhs) { return lhs.val < rhs.val; }

int root( struct node nn[], int i){


    while( nn[i].parent != i){

            nn[i].parent = nn[nn[i].parent].parent;

            i = nn[i].parent;

    }

    return i;

}

void unin( struct node nn[], int a, int b){


        int root_a = root( nn, a);

        int root_b = root(nn, b);

        //cout<< "root_a" << root_a << "roo_b" << root_b<< endl;


        if( nn[root_a].rnk < nn[root_b].rnk){

                nn[root_a].parent = nn[root_b].parent;

                //nn[root_b].rnk++;
                nn[root_b].val = min( nn[root_a].val, nn[root_b].val);


        }else if( nn[root_a].rnk > nn[root_b].rnk){


                nn[root_b].parent = nn[root_a].parent;

                nn[root_a].val = min( nn[root_a].val, nn[root_b].val);




        }else{

                nn[root_a].parent = nn[root_b].parent;

                nn[root_b].rnk++;
                
                //cout<< root(nn, root_a)<< endl;

                nn[root_b].val = min( nn[root_a].val, nn[root_b].val);


        }



}

int main(){

    int t,m,n;

    cin>> t;

    while(t--){

        cin >> n >> m;

        node nn[n+1];

        for(int i = 1; i<= n; i++){

                cin >> nn[i].val;

                nn[i].parent = i;

                nn[i].rnk = 0;
            }

        int a,b;


        for( int i = 1; i <= m; i++){

             cin>> a >> b;

                unin(nn, a, b);

            }

            //sort( nn+1, nn+n+1, acompare);

            vector< int > mp;

            for(int i = 1; i<= n; i++){

                    if( nn[i].parent == i){

                    mp.push_back(nn[i].val);
                    
                   // cout<< i<< " ";
                    
                    }

                    

            }
            //cout<< endl;

            sort(mp.begin(),mp.end());

            long long cnt = 0;

            a = mp[0];
            b = mp[0];
		//	cout<< "a"<< a << "b"<< b << endl;
            int len = mp.size();
            
            //cout<< "len"<< len << endl;
            for(int i = 1; i< len; i++){


						//cout<< mp[i]<< " ";
                        cnt += a * mp[i];





            }

        //for(int i = 1; i<= n; i++)

       // cout<< nn[i].val << " ";
       // cout<< endl;

        cout<< cnt <<  endl;


			mp.clear();
    }
    return 0;

}

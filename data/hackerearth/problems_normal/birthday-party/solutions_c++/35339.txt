#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <unistd.h>
#include <sys/time.h>
struct timeval start,finish;
long long int msec;
//#define _CAL_RUNTIME_

using namespace std;


int allSums[1000009];

int isSumPossible(int *valid_set, int n, int sum)
{

    memset(allSums, 0, sizeof(allSums));
    allSums[0]=1;

    for(int i=0; i<n; i++)
    {
        for(int j=sum-valid_set[i];j>=0;j--)
        {
            if(allSums[j] == 1)
            {
                allSums[j+valid_set[i]]=1;
            }
        }

        if(allSums[sum]==1)
        {
            return 1;
        }
    }

    return 0;
}


int arr[1000009];

int total[1000009];
int main()
{

#ifdef _CAL_RUNTIME_
        gettimeofday(&start,NULL); 
#endif

        int cases;
        int P,M;

        scanf("%d",&cases);

        while(cases--)
        {
            scanf("%d%d",&P,&M);

            int valid[M+1];
            int ans=0;

            memset(arr, 0, sizeof(arr));

            for(int i=0;i<M;i++)
            {
                scanf("%d",&valid[i]);
            }
            
           
            for(int i=0;i<P;i++)
            {
                int item;
                scanf("%d",&item);

                arr[item]++;
            }

            int count=0;

            memset(total, 0, sizeof(total));
            for(int i=0;i<1000009;i++)
            {
                if(arr[i]>=1)
                {
                    total[count++]=arr[i];
                }
            }


            for(int i=0;i<count;i++)
            {
                if(isSumPossible(valid, M, total[i]) )
                {
                    ++ans;
                }
            }
        
            printf("%d\n",ans);
        }






#ifdef _CAL_RUNTIME_
		gettimeofday(&finish,NULL);
		msec=finish.tv_sec*1000 + finish.tv_usec/1000;
		msec-=start.tv_sec*1000 +start.tv_usec/1000;
		cout<<"time taken: "<<msec<<"  milliseconds"<<endl;
#endif 
		return 0;
}




#include <bits/stdc++.h>

using namespace std;

vector<int> v;
bool prime[10000001];

void SieveOfEratosthenes()
{

    memset(prime, true, sizeof(prime));

    for (int p=2; p*p<= 100005; p++)
    {
        if (prime[p] == true)
        {
            for (int i=p*2; i<= 100005; i += p)
                prime[i] = false;
        }
    }

    for (int p = 2; p <= 100005; p++)
       if (prime[p])
          v.push_back(p);
}

void f(int A[], long long int p[], int n) {
    long long int dp[5005] = {0};
    for (int i = 2; i <= n; i++) {
        dp[i]  = dp[i - 1];
        for (int j = 0; j < v.size() && v[j] <= i; j++) {
            int ind = i - 1 - v[j];
            if (ind == -1) {
                dp[i] = max(dp[i], p[i]);
            } else {
                dp[i] = max(dp[i], dp[ind] + p[i] - p[ind + 1]);
            }
        }
    }
    cout << dp[n] << endl;
}


int main() {
    int t, n, m, x, y, h;
    int A[5005];
    long long int p[5005] = {0};
    SieveOfEratosthenes();

    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> A[i];
        p[i] = p[i - 1] + A[i];

    }
    f(A, p, n);
    /*scanf("%d", &t);
    while (t--) {
        cin >> n;
    }*/
    return 0;
}

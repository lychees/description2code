#include <bits/stdc++.h>

using namespace std;

int N, W, VAL;
int graph[20][20];
int memo[1 << 16];

int solve(int bit)
{
	if(__builtin_popcount(bit) == VAL)
		return 0;
	if(memo[bit] != -1)
		return memo[bit];
	int ans = 1 << 30;
	for(int i = 0; i < N; i++)
	{
		if(!(bit & (1 << i)))
		{
			int custo = 1 << 30;
			for(int j = 0; j < N; j++)
				if(bit & (1 << j))
					custo = min(custo, graph[j][i]);
			if(bit == 0)
				custo = 0;
			ans = min(ans, custo + solve(bit | (1 << i)));
		}
			
	}
	return memo[bit] = ans;
}

int main()
{
    int t;
    scanf("%d", &t);
    while(t--)
    {
    	scanf("%d %d", &N, &W);
    	
    	for(int i = 0; i < N; i++)
    		for(int j = 0; j < N; j++)
    			scanf("%d", &graph[i][j]);
    	
    	int l = 1, r = N;
    	int ans = 0;
    	while(l <= r)
    	{
    		memset(memo, -1, sizeof memo);
    		int mid = (l + r) / 2;
    		VAL = mid;
    		int aux = solve(0);
    	
    		if(aux <= W)
    		{
    			ans = max(ans, mid);
    			l = mid + 1;
    		}
    		else
    			r = mid - 1;
    	}
    	printf("%d\n", ans);
    }
    return 0;
}

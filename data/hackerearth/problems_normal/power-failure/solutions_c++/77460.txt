/** author : ayush sharma **/
#include<iostream>
#include<functional>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<algorithm>
#include<string>
#include<sstream>
#include<vector>
#include<queue>
#include<set>
#include<map>
#include<stack>
#define FOR(i,a,b) for(int i=a; i<b; i++)
#define FORr(i,a,b) for(int i=a ; i>=b; i--)
#define pb push_back
#define mp make_pair
#define ub upper_bound
#define lb lower_bound
#define si1(n) scanf("%d",&n)
#define si2(n1, n2) scanf("%d%d",&n1,&n2)
#define si3(n1,n2,n3) scanf("%d%d%d",&n1, &n2, &n3)
#define si4(n1,n2,n3,n4) scanf("%d%d%d%d",&n1, &n2, &n3, &n4)
#define FF first
#define SS second
#define READ(x) freopen(x,"r",stdin)
#define WRITE(x) freopen(x,"w",stdout)
#define show1(a) cout<<a<<"\n"
#define show2(a, b) cout<<a<<"   "<<b<<"\n"
#define show3(a, b, c) cout<<a<<"   "<<b<<"    "<<c<<"\n"
#define show4(a, b, c,d) cout<<a<<"   "<<b<<"    "<<c<<"   "<<d<<"\n"

using namespace std;
typedef long long LL;
typedef pair <int,int> pii;
typedef pair<string,int> psi;
typedef vector<int> vi;
typedef unsigned long long ull;



#define limit 100006
#define sz 100006

int root = (int)ceil(sqrt(limit));                   // limit is the number upto which primes are to be
bool sieve[limit];			                         // calculated
vector<int>primes	;			   // define sz as number of primes which may be < limit
int last;					  // last shows size of array primes

void atkins(){
   last = 2;
   primes.pb(2);
   primes.pb(3);
   memset(sieve,0,sizeof sieve);
   FOR (x,1, root+1){
        FOR(y,1,root+1){
             int n = (4*x*x)+(y*y);
             if (n <= limit && (n % 12 == 1 || n % 12 == 5)) sieve[n] ^= true;
             n = (3*x*x)+(y*y);
             if (n <= limit && n % 12 == 7) sieve[n] ^= true;
             n = (3*x*x)-(y*y);
             if (x > y && n <= limit && n % 12 == 11) sieve[n] ^= true;
        }
   }
        //Mark all multiples of squares as non-prime
    FOR ( r ,5,root+1) if (sieve[r]) for (int i = r*r; i < limit; i += r*r) sieve[i] = false;
    //Add into prime array
    FOR(i,5,limit){
        if (sieve[i]){
            primes.pb(i);
            last++;
        }
    }
}
int MOD=1000000007;
int main(){
    atkins();
//    cout<<last<<"  "<<primes[last-1];
    int test; si1(test);
    while(test--){
        int n, M;
        si2(n,M);
        int Midx=ub(primes.begin(),primes.end(),M)-primes.begin();
//        show2("Midx",Midx);
        int A[sz];
        FOR(i,0,n)si1(A[i]);
        sort(A,A+n);
        int num[sz];
        FOR(i,0,n){
            int idx =ub(primes.begin(),primes.end(),A[i]-1)-primes.begin();
            num[i]= M-A[i]+1-(Midx-idx);
//            show2(A[i],num[i]);
        }

        LL res=1, cur=0;
        FORr(i,n-1,0){
            res=res*((LL)num[i]-cur);
            res=res%MOD;
            cur++;
        }
        cout<<res<<endl;
    }
    return 0;
}

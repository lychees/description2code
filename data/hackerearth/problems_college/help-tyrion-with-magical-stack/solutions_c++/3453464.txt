/*********************************ENTER THE DRAGON**********************************/

#include <cstdio>
#include <iostream>
#include <cmath>
#include <string>
#include <list>
#include <vector>
#include <algorithm>
#include <functional>
#include <utility>
#include <set>
#include <map>
#include <complex>
#include <queue>
#include <stack>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string.h>
#include <cassert>
#include <climits>
using namespace std;

/************************************************************************************/

const int maxn = 1010;
const int INF = 123456789;
int v[maxn];
int dp[maxn][maxn];
int ans;

void brute(vector<int> stk, int n, int cur, int curans) {
	 if (cur == n) {
	 	 ans = min(ans, curans);
	 	 return;
	 }
	 brute(stk, n, cur + 1, curans + 1);
	 if (!stk.empty() && stk[(int)stk.size() - 1] == v[cur]) {
	 	 brute(stk, n, cur + 1, curans);
	 	 vector<int> ts = stk;
	 	 ts.pop_back();
	 	 brute(ts, n, cur + 1, curans);
	 }
	 vector<int> ts = stk;
	 ts.push_back(v[cur]);
	 brute(ts, n, cur + 1, curans + 1);
}

int DP(int a, int b) {
	 if(a > b) return 0;
	 if(dp[a][b] < INF) return dp[a][b];
	 if(a == b || a + 1 == b) return dp[a][b] = (b - a + 1);
	 int &ret = dp[a][b];
	 ret = min(ret, 1 + DP(a+1,b));
	 ret = min(ret, 1 + DP(a,b-1));
	 if(v[a] == v[b]) ret = min(ret, 1 + DP(a+1,b-1));
	 
	 for(int i = a + 1; i <= b; i++) {
	     if(v[i] == v[a]) {
	        ret = min(ret, 1 + min( DP(a+1,i-1), DP(a,i-1)-1 ) 
	                         + min( DP(i,b)-1, DP(i+1,b) ) );
	     }
	 }
	
	 return ret;
}


int main()
{
   ios::sync_with_stdio(false);
   int t;
   cin >> t;
   while (t--) {
   	      int n;
   	      cin >> n;
   	      for (int i = 0; i < n; i++) {
   	      	   cin >> v[i];
   	      }
   	      int len = 1;
   	      for (int i = 1; i < n; i++) {
   	      	   if (v[i] != v[i - 1])
   	      	       v[len++] = v[i];
   	      }
   	      memset(dp, INF, sizeof(dp));
   	      //ans = 123456789;
   	      //brute(vector<int>(), n, 0, 0);
   	      cout << DP(0, len - 1) << endl;
   }
   return 0;
}



#include <bits/stdc++.h>

using namespace std;


#define pb push_back
#define fi first
#define se second


int n , m  ,k , d , t , tem1 , tem2 , tem3 , tem4 , sum = 0 , ans = 0;
string s , c;

vector < pair < int , int > > v [1250 + 1];

int dist [1250 + 10][1250 + 1];
bool vis [1250 + 10];

vector < pair < int , int > > v2 [1250 + 1];
int dist2 [1250 + 1][1250 + 1];
bool vis2 [1250 + 1];
vector < pair < int , int > > v3 [1250 + 1];
vector < pair < int , int > > v4 [1250 + 1];

void digstra(int index){


    for(int i = 0; i <= n; i++) vis[i] = false;

    dist[index][index] = 0;
    set < pair < int , int > > s;
    s.insert({0 , index});
    while(!s.empty()){

        pair <int , int> p = *s.begin();
        s.erase(s.begin());

        int x = p.se; int wei = p.fi;
        if( vis[x] ) continue;
         vis[x] = true;

        for(int i = 0; i < v[x].size(); i++){
            int e = v[x][i].fi; int w = v[x][i].se;
            if(dist[x][index] + w < dist[e][index]  ){
                dist[e][index] = dist[x][index] + w;
                s.insert({dist[e][index] ,  e} );
            }
        }
    }
}

void digstra2(int index){


    for(int i = 0; i <= n; i++) vis2[i] = false;

    dist2[index][index] = 0;
    set < pair < int , int > > s;
    s.insert({0 , index});
    while(!s.empty()){

        pair <int , int> p = *s.begin();
        s.erase(s.begin());

        int x = p.se; int wei = p.fi;
        if( vis2[x] ) continue;
         vis2[x] = true;

        for(int i = 0; i < v2[x].size(); i++){
            int e = v2[x][i].fi; int w = v2[x][i].se;
            if(dist2[x][index] + w < dist2[e][index]  ){
                dist2[e][index] = dist2[x][index] + w;
                s.insert({dist2[e][index] ,  e} );
            }
        }
    }
}

void digstra3(int index){


    for(int i = 0; i <= n; i++) vis2[i] = false;

    dist[index][index] = 0;
    set < pair < int , int > > s;
    s.insert({0 , index});
    while(!s.empty()){

        pair <int , int> p = *s.begin();
        s.erase(s.begin());

        int x = p.se; int wei = p.fi;
        if( vis2[x] ) continue;
         vis2[x] = true;

        for(int i = 0; i < v3[x].size(); i++){
            int e = v3[x][i].fi; int w = v3[x][i].se;
            if(dist[x][index] + w < dist[e][index]  ){
                dist[e][index] = dist[x][index] + w;
                s.insert({dist[e][index] ,  e} );
            }
        }
    }
}
void digstra4(int index){


    for(int i = 0; i <= n; i++) vis2[i] = false;

    dist2[index][index] = 0;
    set < pair < int , int > > s;
    s.insert({0 , index});
    while(!s.empty()){

        pair <int , int> p = *s.begin();
        s.erase(s.begin());

        int x = p.se; int wei = p.fi;
        if( vis2[x] ) continue;
         vis2[x] = true;

        for(int i = 0; i < v4[x].size(); i++){
            int e = v4[x][i].fi; int w = v4[x][i].se;
            if(dist2[x][index] + w < dist2[e][index]  ){
                dist2[e][index] = dist2[x][index] + w;
                s.insert({dist2[e][index] ,  e} );
            }
        }
    }
}


int main()
{

    scanf("%d", &n);

    for(int i = 0; i <= n; i++){
        for(int j = 0; j <= n; j++){
            dist[i][j] = dist2[i][j] = 2e6;
        }
    }


    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= n; j++){
            scanf("%d", &tem1);
            v[i].pb({j , tem1});
            v3[j].pb({i , tem1});
        }
    }
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= n; j++){
            scanf("%d", &tem1);
            v2[i].pb({j , tem1});
            v4[j].pb({i , tem1});
        }
    }



    cin >> m >>  k;
    digstra(m);
    digstra2(m);
    digstra3(k);
    digstra4(k);
    int mini = 1e9;


    for(int i = 1; i <= n; i++){
        if(i != m && i != k){
            mini = min(mini , min (dist[i][m] + dist2[i][k] , dist2[i][m] + dist[i][k]  )  );
        }
    }
    printf("%d", mini);

    return 0;
}

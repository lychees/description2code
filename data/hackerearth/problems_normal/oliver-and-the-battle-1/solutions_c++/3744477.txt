#include<stdio.h>
#include<iostream>
#include<string.h>
#include <iterator>
#include <algorithm>
#include<map>
#include<string>
#include<vector>
#include<stack>
#include<queue>
#include<limits>
#include<limits.h>
#include<math.h>
using namespace std;
struct node
{
    int r,c;
    int depth;
};
int visited[1000][1000];
int arr[1000][1000];
int cnt=0;
node q[1000000];
int ma;
void findPath(node q[] , int n, int m, node t)
{
    int arr_r[]={-1,-1,-1,0,0,1,1,1};
    int arr_c[]={-1,0,1,-1,1,-1,0,1};
    for(int i=0;i<8;i++)
    {
        int rr=t.r+arr_r[i];
        int cc=t.c+arr_c[i];
        //cout<<rr<<" "<<cc<<" "<<arr[rr][cc]<<" "<<visited[rr][cc]<<" "<<endl;
        if(rr<0 || rr>=n)
            continue;
        if(cc<0 || cc>=m)
            continue;
        if(visited[rr][cc]==1)
            continue;
        if(arr[rr][cc]==0)
            continue;

        //cout<<"YO "<<rr<<" "<<cc<<" "<<arr[rr][cc]<<" "<<visited[rr][cc]<<" "<<endl;
        node temp;
        temp.r=rr;
        temp.c=cc;
        temp.depth=t.depth+1;
        q[cnt++]=temp;
        visited[rr][cc]=1;
    }
}
void path(node q[],int n,int m)
{
    int start = 0;
    int a=0;
    while(start<cnt)
    {
        node t = q[start++];
        a++;
        //cout<<t.r<<" "<<t.c<<endl;
        findPath(q , n , m, t);

    }
    ma=max(ma , a);
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,m;
        cin>>n>>m;

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                cin>>arr[i][j];
            }
        }

        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                visited[i][j]=0;
        cnt=0;
        ma=0;
        int ans=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(arr[i][j]==1 && visited[i][j]==0)
                {
                    q[cnt].r=i;
                    q[cnt].c=j;
                    q[cnt++].depth=1;
                    visited[i][j]=1;
                    path(q,n,m);
                    ans++;



                }
                cnt=0;

            }
        }
        cout<<ans<<" "<<ma<<endl;
    }
    return 0;
}

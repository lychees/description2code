#include <bits/stdc++.h>

using namespace std;

const int MOD=1000000007;

map<long long, int> dp[2][2][2][2];

int rec(long long n, int a, int b, int c, int d)
{
    if(n==1)
    {
        if(a+b+c+d>1)
            return 0;
        if(a+b+c+d==1)
            return 1;
        return 6;
    }
    if(dp[a][b][c][d].count(n))
        return dp[a][b][c][d][n];
    int& ret=dp[a][b][c][d][n];
    for(int a0=0; a0<=1; a0++) for(int a1=0; a1<=1; a1++) if((a0+a1)%2==a)
        for(int b0=0; b0<=1; b0++) for(int b1=0; b1<=1; b1++) if((b0+b1)%2==b)
            for(int c0=0; c0<=1; c0++) for(int c1=0; c1<=1; c1++) if((c0+c1)%2==c)
                for(int d0=0; d0<=1; d0++) for(int d1=0; d1<=1; d1++) if((d0+d1)%2==d)
                    ret=(ret+1LL*rec(n/2, a0, b0, c0, d0)*rec(n-n/2, a1, b1, c1, d1))%MOD;
    return ret;
}

void solve()
{
    for(int i=0; i<2; i++)
        for(int j=0; j<2; j++)
            for(int k=0; k<2; k++)
                for(int l=0; l<2; l++)
                    dp[i][j][k][l].clear();
    long long N;
    int a, b, c, d;
    scanf("%lld%d%d%d%d", &N, &a, &b, &c, &d);
    printf("%d\n", rec(N, a, b, c, d));
}

int main()
{
    int T;
    scanf("%d", &T);
    while(T--)
        solve();
    return 0;
}

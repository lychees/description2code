#include <iostream>
#include <cmath>
using namespace std;
int f[1000001]={0};
int g[1000001]={0};
int p[1000001]={0};
int y[1000001]={0};
int calY(int n)
{
	int sum=0;
	for (int i = 1; i <= sqrt(n); i++)
    {
        // While i divides n, print i and divide n
        if(n%i == 0)
        {
            sum+=i;
            int k = (n/i);
            if(n!=k && k!=i) sum+=k;            
        }
    }
    return y[n]=sum;
}
int primeFactors(int n)
{
    // Print the number of 2s that divide n
    while (n%2 == 0)
    {
        return p[n]=2;
        n = n/2;
    }
 
    // n must be odd at this point.  So we can skip one element (Note i = i +2)
    for (int i = 3; i <= sqrt(n); i = i+2)
    {
        // While i divides n, print i and divide n
        if(n%i == 0)
        {
            return p[n]=i;
        }
    }
 
    // This condition is to handle the case whien n is a prime number
    // greater than 2
    if (n > 2)
        return p[n]=n;
}
int fun(int n)
{
	if(f[n]!=0 || n < 1)
	return f[n];
	else 
	{
		if(p[n]==0)
		{
			p[n]=primeFactors(n);
		}
		return f[n]=fun(n-1)+p[n];
	}
}
int gun(int n)
{
	if(g[n]!=0 || n < 1)
	return g[n];
	else 
	{
		if(y[n]==0 && n > 1)
		{
			y[n] = calY(n);
		}
		return g[n]=gun(n-1)+y[n];
	}
}
int main()
{
    int t,n;
    cin>>t;
    p[0]=p[1]=y[0]=y[1]=0;
    while(t--)
    {
    	cin>>n;
    	f[1000001]={0};
		g[1000001]={0};
    	cout<<(fun(n)+gun(n))%n<<endl;
    	//cout<<fun(n)<<endl;
    	//cout<<gun(n)<<endl;
    }
    return 0;
}

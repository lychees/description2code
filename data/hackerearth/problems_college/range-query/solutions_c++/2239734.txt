#include<bits/stdc++.h>

using namespace std;


const double pi=acos(-1.0);
const double eps=1e-11;


#define ll long long int
#define scl(x) scanf("%lld",&x)
#define printl(x) printf("%lld\n",x)
#define print(x) printf("%d\n",x)
#define DEBUG(x) cout<<"Value of "<<#x<<" is "<<x<<endl
#define mp(A,B) make_pair(A,B)
#define pb(X) push_back(X)
#define INF 1000000000
#define MOD 1000000007
#define SET(x,y) memset(x,y,sizeof(x))
#define endl "\n"
#define f first
#define s second
#define gc getchar


inline void sc(int &x)
{
	register int c = gc();
	x = 0;
	int neg = 0;
    for(; ((c<48 || c>57) && c != '-');c=gc())
		;
	if(c=='-')
	{
		neg = 1;
		c = gc();
	}
	for(; c>47 && c<58 ; c = gc()) {
		x = (x<<1) + (x<<3) + c - 48;
	}
	if(neg)
    	x = -x;
}
#define MAXN 10003
int value[MAXN];
struct node
{
	int ar[102];
};
struct node ST[4*MAXN];
void concatenate(int prnt, int lft, int rght)
{
	for(int i=1;i<=100;i++)
		ST[prnt].ar[i]=ST[lft].ar[i]+ST[rght].ar[i];
}
void buildTree(int node, int start, int end)
{
	if(start==end)
	{
		for(int i=0;i<=100;i++)
			ST[node].ar[i]=0;
		ST[node].ar[value[start]]++;
		return;
	}
	int mid=(start+end)>>1;
	buildTree(node*2,start,mid);
	buildTree(2*node+1,mid+1,end);
	concatenate(node,2*node,2*node+1);
}
int query(int node, int start, int end, int qs, int qe, int val)
{
	if(qs>end||qe<start||start>end)
		return 0;
	if(start>=qs&&end<=qe)
		return ST[node].ar[val];
	int mid=(start+end)>>1;
	return (query(node*2,start,mid,qs,qe,val)+query(node*2+1,mid+1,end,qs,qe,val));
}
int main()
{
	int n,q,x,y,val,i;
	sc(n);
	for(i=0;i<n;i++)
		sc(value[i]);
	buildTree(1,0,n-1);
	sc(q);
	while(q--)
	{
		sc(x);sc(y);sc(val);
		print(query(1,0,n-1,x,y,val));
	}
	return 0;
}
#include <bits/stdc++.h>
using namespace std;
#define fr(i,a,b) for (int i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (int i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (int i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (int i = (n) - 1; i >= 0; i--)
#define foreach(it, ar) for ( typeof(ar.begin()) it = ar.begin(); it != ar.end(); it++ )
#define fill(ar, val) memset(ar, val, sizeof(ar))
#define uint64 unsigned long long
#define int64 long long
#define all(ar) ar.begin(), ar.end()
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<ii> vii;
typedef vector<int> vi;
#define PI  3.1415926535897932385
#define EPS 1e-7
#define MOD 1000000007
#define INF 1500111222
#define MAX 100111
int n, k;
string s[MAX];
char chooseBestChar(int j) {
	int minCost = INF, res = 'a';
	fr(c, 'a', 'z') {
		int cost = 0;
		rep(i, n) cost += abs(c - s[i][j]);
		if (cost < minCost) {
			minCost = cost;
			res = c;
		}
	}
	return res;
}
int main() {
	int cases;
	scanf("%d", &cases);
	assert(1 <= cases && cases <= 10);
	while (cases--) {
		scanf("%d %d", &n, &k);
		assert(1 <= n && n <= 10000);
		assert(1 <= k && k <= 20);
		rep(i, n) {
			cin >> s[i];
			assert(s[i].length() == k);
			rep(j, k) assert('a' <= s[i][j] && s[i][j] <= 'z');
		}
		string res = "";
		rep(j, k) res += chooseBestChar(j);
		cout << res << endl;
	}
	return 0;
}
/*#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

int main() 
{
    int cases,r,t,i;
    cin >> cases;
    while(cases--)
    {
        cin >> r >> t;
        string name[r];
        for(i=0;i<r;i++)
         cin >> name[i];
       int sname = sizeof(name)/sizeof(name[0]);
       sort(name, name + sname);
       if(r%2==1) 
        cout << name[r/2] << endl;
       else 
        cout << name[r/2-1] << endl;
    }
	
}*/
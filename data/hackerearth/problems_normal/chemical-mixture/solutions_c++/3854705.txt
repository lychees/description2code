#include <iostream>

#include <algorithm>
#include <vector>

using namespace std;

typedef long long llong;
llong M;
int N1, N2;
llong Ca[64];
llong Cw[16];

vector<llong> best;
bool solve() {
   sort(Ca, Ca+N1, greater<llong>());
   llong best_sum_Ca = -1;
   best.clear();
   for (int mask = (1<<N2)-1; mask >= 0; --mask) {
      llong rem = M;
      for (int j = 0; j < N2; ++j)
         if (mask & (1<<j))
            rem -= Cw[j];
      if (rem < 0) continue;
      llong sum_Ca = 0;
      vector<llong> used;
      for (int i = 0; i < N1; ++i) {
         if (rem - Ca[i] >= 0) {
            rem -= Ca[i];
            sum_Ca += Ca[i];
            used.push_back(Ca[i]);
         }
      }
      if (rem == 0) {
         if (sum_Ca > best_sum_Ca) {
            best_sum_Ca = sum_Ca;
            best = used;
         }
      }
   }
   if (best_sum_Ca < 0) return false;
   sort(best.begin(), best.end());
   return true;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   int TC;
   cin >> TC;
   for (int tc = 1; tc <= TC; ++tc) {
      cin >> M >> N1 >> N2;
      for (int i = 0; i < N1; ++i)
         cin >> Ca[i];
      for (int j = 0; j < N2; ++j)
         cin >> Cw[j];
      bool res = solve();
      if (res) {
         cout << "YES\n";
         for (llong c : best)
            cout << c << ' ';
         cout << '\n';
      }
      else
         cout << "NO\n";
   }

   return 0;
}

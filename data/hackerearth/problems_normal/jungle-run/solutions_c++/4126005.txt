#include <iostream>
#include <stack>
#include <vector>
#include <queue>
#include <stdio.h>
#include <map>

using namespace std;

int main()
{
    int n;

    cin >> n;

    char arr[n+1][n+1];

    int sI, sJ, eI, eJ;

    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            cin >> arr[i][j];

            if(arr[i][j]=='S')
            {
                sI=i;

                sJ=j;
            }
            else if(arr[i][j]=='E')
            {
                eI=i;

                eJ=j;
            }
        }
    }

    int visited[n+1][n+1];

    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=n;j++)
        {
            visited[i][j]=-1;
        }
    }

    queue <pair<int, int>> que;

    que.push(make_pair(sI, sJ));

    visited[sI][sJ]=0;

    int nodeI, nodeJ, dist;

    while(!que.empty())
    {
        nodeI=que.front().first;

        nodeJ=que.front().second;

        if(nodeI==eI && nodeJ==eJ)
        {
            break;
        }

        dist=visited[nodeI][nodeJ];

        que.pop();

        if(nodeI>1 && arr[nodeI-1][nodeJ]!='T' && visited[nodeI-1][nodeJ]==-1)
        {
            visited[nodeI-1][nodeJ]=dist+1;

            que.push(make_pair(nodeI-1, nodeJ));
        }

        if(nodeJ>1 && arr[nodeI][nodeJ-1]!='T' && visited[nodeI][nodeJ-1]==-1)
        {
            visited[nodeI][nodeJ-1]=dist+1;

            que.push(make_pair(nodeI, nodeJ-1));
        }

        if(nodeJ<n && arr[nodeI][nodeJ+1]!='T' && visited[nodeI][nodeJ+1]==-1)
        {
            visited[nodeI][nodeJ+1]=dist+1;

            que.push(make_pair(nodeI, nodeJ+1));
        }

        if(nodeI<n && arr[nodeI+1][nodeJ]!='T' && visited[nodeI+1][nodeJ]==-1)
        {
            visited[nodeI+1][nodeJ]=dist+1;

            que.push(make_pair(nodeI+1, nodeJ));
        }
    }

    cout << visited[eI][eJ];

    return 0;
}

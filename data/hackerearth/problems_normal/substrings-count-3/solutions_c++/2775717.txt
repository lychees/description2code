#include<iostream>
#include<stdio.h>
#include<unordered_map>
#include<vector>
#include<string>
#include<algorithm>

using namespace std;

int main()
{
    int n,i,j,k,q,l,r;
    string s;
    unordered_map<string, vector<int> >m;//unordered because its access time is faster than map
    unordered_map<string, vector<int> >::iterator it;
    vector<int>::iterator sz;
    scanf("%d",&n);
    for(i=1;i<=n;++i)
    {
        cin>>s;
        for(j=0;j<s.size();++j)
        {
            string temp("");
            for(k=j;k<s.size();++k)
            {
                temp.push_back(s[k]);
                m[temp].push_back(i);
            }
        }
    }

    for(it=m.begin();it!=m.end();++it)
    {
        sz=unique((it->second).begin(),(it->second.end()));
        (it->second).resize(distance((it->second).begin(),sz));//since unique only deletes CONSEQUTIVE DUPLICATES but doesn't resize the vector
    }

    scanf("%d",&q);
    while(q--)
    {
        scanf("%d%d",&l,&r);
        cin>>s;
        int idx1 = upper_bound(m[s].begin(),m[s].end(),r)-m[s].begin();
        int idx2 = lower_bound(m[s].begin(),m[s].end(),l)-m[s].begin();
        printf("%d\n",idx1-idx2);
    }
    return 0;
}

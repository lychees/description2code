#include <bits/stdc++.h>
using namespace std;
struct CustomAlphaCmp
{
    int table[1 << CHAR_BIT];
    CustomAlphaCmp(const std::string& alpha)
    {
        std::fill(std::begin(table), std::end(table), INT_MAX);
        int value = 0;
        for (auto x : alpha)
            table[ static_cast<unsigned char>(x) ] = ++value;
    }

    bool operator()(const std::string& a, const std::string& b)
    {
        auto lhs = a.begin();
        auto rhs = b.begin();

        for (; lhs != a.end() && rhs != b.end(); ++lhs,++rhs)
        {
            int lhs_val = table[static_cast<unsigned char>(*lhs)];
            int rhs_val = table[static_cast<unsigned char>(*rhs)];

            if (lhs_val != rhs_val)
                return lhs_val < rhs_val;
        }

        return (rhs != b.end());
    }
};
int main()
{
	int t;cin>>t;
	while(t--) {
		string alpha;cin>>alpha;
		int m;cin>>m;
		vector<string> words;
		while(m--) {
			string temp;cin>>temp;
			words.push_back(temp);
		}
		sort(words.begin(), words.end(), CustomAlphaCmp(alpha));
		for(int i = 0; i < words.size(); i++) {
			cout<<words[i]<<endl;
		}
		
	}
    return 0;
}

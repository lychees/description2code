/*    ironstark    */
#include<bits/stdc++.h>
#define pii pair<long long,long long>
#define fi first
#define se second
#define mp make_pair
#define vpi vector< pii >
#define pb push_back
#define ll long long int
#define mod 1000000007
#define gcd(a,b) __gcd(a,b)
#define sf(n) scanf("%lld",&(n))
#define pf(n) printf("%lld\n",(n))
#define setbits(n) __builtin_popcount((n))
#define pq priority_queue
using namespace std;
int parent[100005];
vector< pii >v[1005];
int start;
int dist[1005][1005]={0};
struct node
{
	int a;
	int b;
	int c;
};
bool comp(node a,node b)
{
	return a.c<b.c;
}
void ini()
{
    for(int i=1;i<=1005;i++)
        {
            parent[i]=i;
            v[i].clear();
        }
        memset(dist,0,sizeof(dist));

}
int root(int a)
{
	while(a!=parent[a])
	{
		a=parent[a];
	}
	return a;
}
void uni(int a,int b)
{
	int p=root(a);
	int q=root(b);
	parent[p]=q;
}
int kruskal(node edges[],int p)
{
	int min_cost=0;
	for(int i=0;i<p;i++)
	{

		int a=edges[i].a;
		int b=edges[i].b;
		int c=edges[i].c;
		if(root(a)!=root(b))
		{
		    v[a].pb(mp(c,b));
		    v[b].pb(mp(c,a));
		    uni(a,b);
			min_cost+=c;
		}
	}
	return min_cost;

}
void dfs(int node,bool visited[],int fin)
{
        dist[start][node]=fin;
        visited[node]=true;
    for(int i=0;i<v[node].size();i++)
    {
        if(!visited[v[node][i].se])
        {
            dfs(v[node][i].se,visited,fin+v[node][i].fi);
        }
    }

}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(false);
	int t;
	cin>>t;
	for(int tc=1;tc<=t;tc++)
	{
	    ini();
		cout<<"Case: "<<tc<<"\n";
		int n,p,m;
		cin>>n>>p>>m;
		node edges[p];
		for(int i=0;i<p;i++)
		{
			int a,b,c;
			cin>>a>>b>>c;
			edges[i].a=a;
			edges[i].b=b;
			edges[i].c=c;
		}
		sort(edges,edges+p,comp);
        kruskal(edges,p);
        bool visited[n+1];
        for(int i=1;i<=n;i++)
        {
            memset(visited,0,sizeof(visited));
            start=i;
            dfs(i,visited,0);
        }
        while(m--)
        {
            int a,b;
            cin>>a>>b;
            cout<<dist[a][b]<<"\n";

        }
	}

}

#include<bits/stdc++.h>
using namespace std;
vector<pair<long long,long long> > adj[100005];
long long dist[100005],dist1[100005];
long long parent[100005],parent1[100005];
void dij(long long s,long long dest1)
{
    long long visited[100005];

    memset(visited,0,sizeof(visited));
    priority_queue< pair<long long,long long>,vector<pair<long long,long long> >,greater<pair<long long,long long> > > q;
    q.push(make_pair(0,s));
    while(!q.empty())
    {

    pair<long long,long long> s=q.top();
    q.pop();
  long long   x=s.second;

  if(x==dest1)
    return ;

   if(visited[x]==1)
        continue;
  visited[x]=1;
    long long d1=s.first;

if(d1==LONG_LONG_MAX)
    continue;
    for(long long i=0;i<adj[x].size();i++)
    {
       long long d2=adj[x][i].first;
        long long d3=dist[adj[x][i].second];
        if(d2==LONG_LONG_MAX )
        continue;
        //cout<<d1<<" "<<d2<<" "<<d3<<"\n";
        if(d3>(d2+d1) && visited[adj[x][i].second]==0)
        {

            dist[adj[x][i].second]=d2+d1;
            q.push(make_pair(dist[adj[x][i].second],adj[x][i].second));
                     parent[adj[x][i].second]=x;
        }

    }
}
}
void dij2(long long s,long long dest2)
{
     long long visited[100005];
memset(visited,0,sizeof(visited));
    priority_queue< pair<long long,long long>,vector<pair<long long,long long> >,greater<pair<long long,long long> > > q;
    q.push(make_pair(0,s));
    while(!q.empty())
    {

    pair<long long,long long> s=q.top();
    q.pop();
  long long   x=s.second;
//  cout<<"x= "<<x<<"\n";
  if(x==dest2)
    return ;
   if(visited[x]==1)
        continue;
  visited[x]=1;
    long long d1=s.first;
if(d1==LONG_LONG_MAX)
   continue;
  // cout<<"size "<<adj[x].size()<<endl;
    for(long long i=0;i<adj[x].size();i++)
    {
       long long d2=adj[x][i].first;
        long long d3=dist1[adj[x][i].second];
            if(d2==LONG_LONG_MAX )
            continue;
        if(d3>(d2+d1) && visited[adj[x][i].second]==0)
        {
            dist1[adj[x][i].second]=d1+d2;
            q.push(make_pair(dist1[adj[x][i].second],adj[x][i].second));
           parent1[adj[x][i].second]=x;
        }

    }
}
}
int  main()
{
    long long t;
    cin>>t;
    while(t--)
    {
        long long m,n;
        cin>>n>>m;
        for(int i=0;i<=n;i++)
            adj[i].clear();
        for(long long i=0;i<m;i++)
        {


        long long u,v,w;
        cin>>u>>v>>w;
        adj[u].push_back(make_pair(w,v));
        adj[v].push_back(make_pair(w,u));

    }

    for(long long i=1;i<=n;i++)
    {
        dist[i]=LONG_LONG_MAX;
        dist1[i]=LONG_LONG_MAX;
        parent[i]=i;
        parent1[i]=i;

            }
    long long u1,i1,v1;
    cin>>u1>>i1>>v1;
     dij(u1,i1);
  long long p1= dist[i1];
  //cout<<p1<<"\n";

  dij2(i1,v1);
    long long p2=dist1[v1];
//  cout<<p2<<"\n";
    if(p1==LONG_LONG_MAX || p2==LONG_LONG_MAX)
        cout<<"No Train Found."<<"\n";
    else
    {
        cout<<(p1+p2)<<"\n";
        stack<long long> s;
s.push(i1);
int q1=i1;
        while(u1!=i1)
        {
            i1=parent[i1];
            s.push(i1);
        }
        while(!s.empty())
        {


            cout<<s.top()<<" ";
            s.pop();
        }
        s.push(v1);
        while(q1!=v1)
        {
            v1=parent1[v1];
            if(q1==v1)
                break;
           s.push(v1);
        }
         while(!s.empty())
        {


           cout<<s.top()<<" ";
            s.pop();


        }
cout<<"\n";
    }
}
}

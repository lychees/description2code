// C++ program to print all primes smaller than or equal to
// n using Sieve of Eratosthenes
#include <bits/stdc++.h>
using namespace std;
bool prime[1000000];
int coun[1000000];
void SieveOfEratosthenes()
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    memset(prime, true, sizeof(prime));
    prime[0]=prime[1]=false;
    for (int p=2; p*p<=1000000; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (int i=p*2; i<=1000000; i += p)
                prime[i] = false;
        }
    }
    int t=0;
    for (int k=0; k<=1000000; k++)
    {
        if(prime[k]==true)
        {
            t++;
            coun[k]=t;
        }
        else
        {
            coun[k]=t;
        }
        //cout<<coun[k]<<" ";
    }
}

// Driver Program to test above function
int main()
{
    //int a=5,b=2;
    //float c=(float)a/(float)b;
    //cout<<c<<endl;
    SieveOfEratosthenes();
    int t;
    cin>>t;
    while(t--)
    {
        int l,h;
        int i;
        float count=0;
        cin>>l>>h;
        /*for(i=l;i<=h;i++)
        {
            if(prime[i])
                count++;
        }
        if(l==1)
        {
            count--;
        }*/
        int k;
        if(h==l)
        {
        k=prime[h];
        }
        else
        {
        k=coun[h]-coun[l-1];
        }
        float f=(float)k/(float)(h-l+1);
        cout.setf(ios::fixed);
        cout.precision(6);
        printf("%f\n",f);
    }
}

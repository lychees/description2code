#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <utility>
#include <iterator>

using namespace std;

int initilise(int arr[],int n){
for(int i=1;i<=n;i++){
    arr[i]=i;
}
}

int root(int arr[],int a){
while(arr[a]!=a){
    arr[a] = arr[arr[a]];
    a = arr[a];
}
return a;
}

void unions(int arr[],int a,int b){
int root1 = root(arr,a);
int root2 = root(arr,b);
arr[root1]= arr[root2];
}

int kruskal( pair <int, pair <int,int> > store[],int arr[],int m){
    int maxST=0;
for(int i=m-1; i>=0;i--){
int a = store[i].second.first;
int b = store[i].second.second;
if(root(arr,a)!=root(arr,b)){
    maxST+= store[i].first;
    unions(arr,a,b);
}
}
return maxST;
}

int main(){
int t,n,m,c,a,b;
scanf("%d",&t);
while(t--){
    scanf("%d %d",&n,&m);
    pair <int, pair <int,int> > store[m];
    int arr[n+1];
    initilise(arr,n);
        for(int i=0;i<m;i++){
        scanf("%d %d %d",&a,&b,&c);
        store[i] = make_pair(c,make_pair(a,b));
    }
    sort(store,store+m);
    int maxST = kruskal(store,arr,m);
    cout<<maxST<<endl;
}
}

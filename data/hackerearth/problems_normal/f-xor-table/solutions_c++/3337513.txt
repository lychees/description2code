#include <bits/stdc++.h>
using namespace std;

#define REPU(i, a, b) for (int i = (a); i < (b); ++i)
#define REPD(i, a, b) for (int i = (a); i > (b); --i)
#define MEM(a, x) memset(a, x, sizeof(a))
#define ALL(a) a.begin(), a.end()
#define UNIQUE(a) a.erase(unique(ALL(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) { return (a < b) ? a : b; }
template<class T> inline T tmax(T a, T b) { return (a > b) ? a : b; }
template<class T> inline void amax(T &a, T b) { if (b > a) a = b; }
template<class T> inline void amin(T &a, T b) { if (b < a) a = b; }
template<class T> inline T tabs(T a) { return (a > 0) ? a : -a; }
template<class T> T gcd(T a, T b) { while (b != 0) { T c = a; a = b; b = c % b; } return a; }

typedef vector<bool> V;
const int N = 1000005;
char first[N];
int m, p, x;
bool bx;
V base, tmp;

V solve(int n) {
	if (n == 0) return base;
	V ans(m);
	int pos = -1;
	REPD(i, 32, -1) {
		if ((1LL << i) <= n) { pos = i; break; }
	}
	int y = (1 << pos);
	tmp = solve(n - y);
	int z = y * 1LL * p % m;
	REPU(i, 0, m) ans[i] = bx ^ tmp[i] ^ tmp[(i - z + m) % m];
	return ans;
}

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int T, n;

	cin >> T;
	while (T--) {
		cin >> n >> m >> p >> x;
		cin >> first;
		base.resize(m);
		REPU(i, 0, m) base[i] = first[i] == '1';
		bx = x ? true : false;
		V ans = solve(n - 1);
		REPU(i, 0, m) printf("%d", ans[i] ? 1 : 0);
		puts("");
	}
	
	return 0;
}

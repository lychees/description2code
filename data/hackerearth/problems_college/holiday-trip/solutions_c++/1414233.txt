#include <string.h>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <list>
#include <stack>
#include <queue>
#include <algorithm>
#include <numeric>
#include <sstream>
using namespace std;
#define FOR( i, L, U ) for(int i=(int)L ; i<=(int)U ; i++ )
#define FORD( i, U, L ) for(int i=(int)U ; i>=(int)L ; i-- )
#define SQR(x) ((x)*(x))
#define INF INT_MAX
#define READ(filename) freopen(filename, "r", stdin);
#define WRITE(filename) freopen(filename, "w", stdout);
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
#define gc getchar_unlocked
typedef vector<ll> vll;
typedef vector<double> vd;
typedef vector<char> vc;
typedef vector<string> vs;
typedef vector<vector<int> > vvi;
typedef vector<vector<int> > vvc;
typedef map<int, int> mii;
typedef map<string, int> msi;
typedef map<int, string> mis;
typedef map<string, string> mss;
typedef map<string, char> msc;
typedef pair<int, int> ii;
#define WHITE 0
#define GRAY 1
#define BLACK 2
#define MAX_NODES 30009
vector<ii> g[MAX_NODES];
int color[MAX_NODES];
int dist[MAX_NODES];
void bfs(int src){
int u,v,i;
queue<int> q;
dist[src]=0;
q.push(src);
color[src]=GRAY;
while(!q.empty()){
u = q.front();
q.pop();
for(i=0;i<g[u].size();i++){
v = g[u][i].first;
if(color[v]==WHITE){
dist[v] = dist[u] + g[u][i].second;
color[v] = GRAY;
q.push(v);
}
}
}
}
void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

int main()
{
//READ("input.txt");
//WRITE("output.txt");
int test, st, en, nodes, w, i,cs=0;
scanint(test);
while(test--){
scanf("%d", &nodes);
for(i=0;i<nodes;i++){g[i].clear();color[i]=WHITE;}
for(i=0;i<nodes-1;i++){

scanint(st);
scanint(en);
g[st].push_back(ii(en,1));
g[en].push_back(ii(st,1));
}
int src=0;
bfs(src);
for(i=0;i<nodes;i++){
if(dist[src]<dist[i])src=i;
color[i] = WHITE;
}
bfs(src);
printf("%d\n", *max_element(dist, dist+nodes) + 1);
}
return 0;
}
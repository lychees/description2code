#include <bits/stdc++.h>
using namespace std;
#define N 100005
#define MOD 1000000007LL
typedef long long ll;
int enter[N],leave[N];
int nodes[N],parent[N];
ll sgt[N<<2],factor[N<<2];
int n;
ll pro[N]={1};
vector<int> adj[N];
int A[N];
ll pw(ll a,ll b)
{
	ll ans=1,t = a;
	while(b)
	{
		if(b&1) ans = ans*t%MOD;
		b>>=1;
		t = t*t%MOD;
	}
	return ans;
}
void dfs(int cur,int par,int &tm)
{
	enter[cur]=++tm;
	nodes[tm] = cur;
	pro[cur] = A[cur]*pro[par]%MOD;
	parent[cur] = par;
	for(auto i:adj[cur])
	{
		if(i!=par)
		{
			dfs(i,cur,tm);
		}
	}
	leave[cur] = tm;
}
void build(int nd,int l,int r)
{
	factor[nd]=1;
	if(l==r)
	{
		sgt[nd] = pro[parent[nodes[l]]];
	}
	else
	{
		int m = (l+r)/2;
		build(nd+nd,l,m);
		build(nd+nd+1,m+1,r);
		sgt[nd] =( sgt[nd+nd] + sgt[nd+nd+1] )%MOD;
	}
}
void down(int nd,ll fa)
{
	sgt[nd] = sgt[nd]*fa%MOD;
	factor[nd] = factor[nd]*fa%MOD;
}
void update(int nd,int l,int r,int x,int y,ll fa)
{
	if(x>y) return;
	if(l>=x && r<=y)
	{
		factor[nd] = factor[nd]*fa%MOD;
		sgt[nd] = sgt[nd]*fa%MOD;
		return;
	}
	down(nd+nd,factor[nd]);
	down(nd+nd+1,factor[nd]);
	factor[nd] = 1;
	int m = (l+r)/2;
	if(m>=x)
	update(nd+nd,l,m,x,y,fa);
	if(m<y)
	update(nd+nd+1,m+1,r,x,y,fa);
	sgt[nd] =( sgt[nd+nd] + sgt[nd+nd+1] )%MOD;
}
ll query(int nd,int l,int r,int x,int y)
{
	if(x>y) return 0;
	if(l>=x && r<=y)
	{
		return sgt[nd];
	}
	int m = (l+r)/2;
	down(nd+nd,factor[nd]);
	down(nd+nd+1,factor[nd]);
	factor[nd] = 1;
	ll ans=0;
	if(m>=x ) ans = (ans + query(nd+nd,l,m,x,y)) %MOD;
	if(y>m) ans = (ans + query(nd+nd+1,m+1,r,x,y))%MOD;
	return ans;
	
}
int main()
{
    int q;
    scanf("%d%d",&n,&q);
    for(int i=1;i<n;++i)
    {
    	int s,t;
    	scanf("%d%d",&s,&t);
    	adj[s].push_back(t);
    	adj[t].push_back(s);
    }
    for(int i=1;i<=n;++i)
    {
    	scanf("%d",&A[i]);
    }
    int tm=-1;
    dfs(1,0,tm);
    build(1,0,n-1);
    while(q--)
    {
    	int t;
    	scanf("%d",&t);
    	if(t==1)
    	{
    		int v,x;
    		scanf("%d%d",&v,&x);
    		ll fa = pw(A[v],MOD-2)*x%MOD;
    		A[v] = x;
    		update(1,0,n-1,enter[v]+1,leave[v],fa);
    		
    	}
    	else
    	{
    		int v;
    		scanf("%d",&v);
    		printf("%lld\n",query(1,0,n-1,enter[v],leave[v]));
    	}
    }
    
    return 0;
}

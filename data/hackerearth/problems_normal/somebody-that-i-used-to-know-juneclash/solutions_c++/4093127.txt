#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cstring>
#include <cassert>
#include <ctime>
#include <queue>
#include <cmath>
using namespace std;
typedef long long Long;

#define INF 1000000000000000000LL
Long G[310][310];
Long D[310][10];
struct Edge {
	int u,v;
	Long l;
	char c;
};
typedef vector<Edge> VE;
typedef vector<VE> VVE;
typedef pair<int,int> PII;
typedef pair<long long,PII> PIP;

VVE adj;

void ditra(int s, int N){
	memset(D,-1,sizeof(D));
	priority_queue< PIP, vector<PIP>, greater<PIP> > PQ;
	PQ.push(PIP(0,PII(s,0)));
	D[s][0] = 0;
	int C = 0;
	while(PQ.size()){
		PIP c = PQ.top(); PQ.pop();
		Long u = c.second.first;
//		cout << u << " ";
		Long d = c.first;
		int b = c.second.second;
		if(d > D[u][b])continue;
		if(b == 0){
			G[s][u] = d;
			C++;
			if(C == N)break;
		}
		for(int i = 0; i < adj[u].size(); ++i){
			Edge &e = adj[u][i];
			int nb = b + (e.c == ')' ? -1 : 1);
			if(nb >= 10 || nb < 0)continue;
			Long nd = d + e.l;
			if(D[e.v][nb] == -1 || nd < D[e.v][nb]){
				D[e.v][nb] = nd;
				PQ.push(PIP(nd, PII(e.v, nb)));
			}	
		}
	}
//	cout << endl;
}

int main()
{
	int N,M;
	cin >> N >> M;
	adj = VVE(N);
	for(int i = 0; i < M; ++i){
		Edge e;
		cin >> e.u >> e.v >> e.l >> e.c;
		e.u--;
		e.v--;
		adj[e.u].push_back(e);
	}
	memset(G,-1,sizeof(G));
	for(int i = 0; i < N; ++i){
		ditra(i, N);
	}
	for(int i = 0; i < N; ++i){
		for (int j = 0; j < N; ++j) {
			cout << G[i][j] << " ";
		}
		cout << endl;
	}
//	cout << endl;
//	for(int i = 0; i < N; ++i){
//		for (int j = 0; j < N; ++j) {
//			cout << C[i][j] << " ";
//		}
//		cout << endl;
//	}
}

/*
8 10
3 8 2 )
8 6 8 )
4 6 2 )
2 8 9 (
5 1 4 (
3 4 5 (
4 5 6 )
5 4 6 )
3 1 3 )
7 1 9 )

*/

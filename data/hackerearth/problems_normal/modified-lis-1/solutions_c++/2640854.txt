#include <bits/stdc++.h>
#define M 1000000007
#define MAX 100000

using namespace std;

int A[100005];
pair <int,int> tree[4*100005][2];

pair <int,int> combine(pair <int,int> p1, pair <int,int> p2)
{
	if ( p1.first > p2.first ) return p1;
	else if ( p1.first < p2.first ) return p2;
	else return make_pair(p1.first, (p1.second + p2.second)%M);
}

void update(int where, int left, int right, int idx, int type, pair <int,int> val)
{
	if ( left > right || left > idx || right < idx ) return;
	if ( left == right ) {
		tree[where][type] = combine(tree[where][type], val);
		return;
	}
	int mid = (left+right)/2;
	update(where*2, left, mid, idx, type, val);
	update(where*2+1, mid+1, right, idx, type, val);
	tree[where][type] = combine(tree[where*2][type], tree[where*2+1][type]);
}

pair <int,int> query(int where, int left, int right, int type, int i, int j)
{
	if ( left > right || left > j || right < i ) return make_pair(0,0);
	if ( left >= i && right <= j ) return tree[where][type];
	int mid = (left+right)/2;
	return combine(query(where*2, left, mid, type, i, j), query(where*2+1, mid+1, right, type, i, j));
}

int main()
{
	int n;
	cin >> n;
	for ( int i = 0; i < n; i++ ) cin >> A[i];
	
	update(1,0,MAX,0,0,make_pair(0,1));
	update(1,0,MAX,0,1,make_pair(0,1));
	
	for ( int i = 0; i < n; i++ ) {	
		if ( A[i] < 0 ) {
			pair <int,int> p = query(1,0,MAX,0,0,abs(A[i])-1);
			update(1,0,MAX,abs(A[i]),1,make_pair(p.first+1,p.second));
		}
		else if ( A[i] > 0 ) {
			pair <int,int> p = query(1,0,MAX,1,0,abs(A[i])-1);
			update(1,0,MAX,abs(A[i]),0,make_pair(p.first+1,p.second));
		}
	}
	
	pair <int,int> p1 = query(1,0,MAX,0,0,MAX);
	pair <int,int> p2 = query(1,0,MAX,1,0,MAX);
	
	pair <int,int> ans = combine(p1,p2);
	
	cout << ans.first << " " << ans.second << endl;
	
	
	return 0;
}
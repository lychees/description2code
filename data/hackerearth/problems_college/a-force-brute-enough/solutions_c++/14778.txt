# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <cstdio>
# include <cmath>
# include <numeric>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>
# include <complex>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,PII> TRI;
typedef vector<string> VS;

#define GI ({int t;scanf("%d",&t);t;})
#define REP(i,a,b) for(int i=a;i<b;i++)
#define FOR(i,n) REP(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define bitcount(x) __builtin_popcount(x)
#define pb push_back
#define mp make_pair
#define mt(a,b,c) mp(a,mp(b,c))
#define EPS (double)(1e-9)
#define INF 1000000000
#define MOD 1000000007
#define PI (double)(3.141592653589793)

inline int ni()
{
	register int r=0,c;
	for(c=getchar_unlocked();c<=32;c=getchar_unlocked());
	if(c=='-') 
		return -ni();
	for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());
	return r;
}

/*

Missed and found by cycling

1

2
2 90

3
3 990

4
4 9990
4 9000

5
5 99990
5 99000

6
6 999990
6 999000

7
7 9999990
7 9999000
7 9000000

8
8 99999990
8 99999000
8 99000000

0
*/

int a[1000005];

string ans[15];

void db(int t, int p, int n, int k)
{
	if(t > n)
	{
		if( n%p == 0 )
			REP(j,1,p+1)
				ans[n]+=(a[j]+'0');
	}
	else
	{
		a[t] = a[t-p];
		db(t+1,p,n,k);
		REP(j,a[t-p]+1,k)
		{
			a[t] = j;
			db(t+1,t,n,k);
		}
	}
}

void de_bruijn(int k, int n)
{
	REP(i,0,k*n+2)
		a[i] = 0;
	ans[n] = "";
	db(1,1,n,k);
}

void check_cycling(int n)
{
	for(int i = 1; i <= n-1; i++)
	//for(int i = n-1; i>=1 ; i--)
	{
		string s = ans[n].substr(ans[n].size()-i,i) + ans[n].substr(0,n-i);
		if(ans[n].find(s) == std::string::npos)
		{
			ans[n]+=ans[n].substr(0,n-i);
			//cout<<"\n"<<n<<" "<<s<<"\n";
			break;
		}
	}
}

int main()
{
	int n;
	REP(i,0,11)
		ans[i]="";
	while(1)
	{
		n = ni();
		if(n == 0) break;
		if(ans[n]=="")
		{
			de_bruijn(10,n);
			if(n!=1) check_cycling(n);
		}
		printf("%s\n",ans[n].c_str());
	}	
	return 0;
}



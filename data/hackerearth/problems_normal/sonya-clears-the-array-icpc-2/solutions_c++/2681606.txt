#include <bits/stdc++.h>
#define INF 0x3f3f3f3f
using namespace std;
int p[2000005],a[505],dp[505][505];
int next_prime[2000005],prev_prime[2000005];
void seive()
{
    p[1]=1;
    for(int i=2;i*i<=2000000;i++)
    {
        if(!p[i])
        {
            for(int j=i*i;j<=2000000;j+=i)
            {
                p[j]=1;
            }
        }
    }
}
void primes()
{
    for(int i=2000000;i>=1;i--)
    {
        if(p[i]==0)
            next_prime[i]=i;
        else
            next_prime[i]=next_prime[i+1];
    }

    for(int i=1;i<=2000000;i++)
    {
        if(p[i]==0)
            prev_prime[i]=i;
        else
            prev_prime[i]=prev_prime[i-1];
    }
}
int cost(int x,int y)
{
    int sum=x+y;
    if(x<=y&&prev_prime[y-1]>=x)
        return next_prime[y]+prev_prime[y-1]-x-y;
    x=max(x,y);
    x=next_prime[x];
    y=next_prime[x+1];
    return x+y-sum;
}
int solve(int l,int r)
{
    if(r<l)
        return 0;
    if(dp[l][r]!=-1)
        return dp[l][r];
    int mn=INF;
    for(int k=l+1;k<=r;k+=2)
    {
        int operations=solve(l+1,k-1)+solve(k+1,r)+cost(a[l],a[k]);
        mn=min(mn,operations);
    }
    return dp[l][r]=mn;
}
int main()
{
    seive();
    primes();
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    memset(dp,-1,sizeof(dp));
    printf("%d\n",solve(0,n-1)+n/2);
    return 0;
}


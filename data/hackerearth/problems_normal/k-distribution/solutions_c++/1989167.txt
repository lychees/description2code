//k distribution
#include <cstdio>
#include <iostream>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;
//#include <conio.h>
#define ll long long
#define mod 1000000007
ll arr[105];
ll dp[105][100005];
int n;
ll powers[105];
ll total,k;
int main()
{
 ios_base::sync_with_stdio(false);
 cin.tie(NULL);
 
 powers[0]=1;
 for(int i=1;i<=101;i++)powers[i]=((2ll)*powers[i-1])%mod;
 
 cin>>n>>k;
 total=0;
 for(int i=1;i<=n;i++)
 {cin>>arr[i];
  total+=arr[i];
             }
 if(total<2*k){cout<<0<<endl;return 0;}            
 
 //sort(arr,arr+n);
 memset(dp,0,sizeof(dp));
 dp[0][0]=1;
 for(int i=1;i<=n;i++)
 {
  for(long long int j=0;j<k;j++)
  {
   dp[i][j]=dp[i-1][j];
   if(j-arr[i]>=0)dp[i][j]+=dp[i-1][j-arr[i]];
   if(dp[i][j]>mod)dp[i][j]%=mod;        
           
           
           }       
          }
 /*for(int i=0;i<=n;i++)
 {for(int j=0;j<=k;j++)
  cout<<dp[i][j]<<" ";
  cout<<endl;
   }
*/



 //find all sums less than k
 long long int sum=0;
 for(long long int i=0;i<k;i++){sum+=dp[n][i];sum%=mod;}
 
 long long int ans=powers[n-1]-sum;
 if(ans>mod)ans%=mod;
 while(ans<0){ans+=mod;}
 if(ans>mod)ans%=mod;
 ans*=2;
 ans%=mod;
 cout<<ans<<endl;
 
 
 
 //getch();
 return 0;   
}

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define rep(i,a) for(ll i=0;i<a;++i)
#define repp(i,a,b) for(ll i=a;i<b;++i)
#define FILL(a,x) memset(a,x,sizeof(a))
#define    foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
ll M=1e9+7;

long long mult(long long a, long long b, long long mod)
{
	__int128 res = a;
	res *= b;
	res %= mod;
	a = res;
	return a;
}

ll mpe(ll base, ll exponent, ll modulus)
{  
    ll result = 1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = mult(result,base,modulus) ;
        exponent = exponent >> 1;
        base =  mult(base,base,modulus) ;
    }
    return result;
}



int isper(ll num){
    ll x=sqrt(num);
    if(x*x==num || (x+1)*(x+1)==num || (x-1)*(x-1)==num)return 1;
    else return 0;
}


bool Miller(long long p, int iteration){
	if (p<2){
		return false;
	}
	if (p != 2 && p % 2 == 0){
		return false;
	}
	long long s = p - 1;
	while (s % 2 == 0){
		s /= 2;
	}
	for (int i = 0; i<iteration; i++){
		long long a = rand() % (p - 1) + 1, temp = s;
		long long mod = mpe(a, temp, p);
		while (temp != p - 1 && mod != 1 && mod != p - 1){
			mod = mult(mod, mod, p);
			temp *= 2;
		}
		if (mod != p - 1 && temp % 2 == 0){
			return false;
		}
	}
	return true;
}

int main()
{
    fastScan;
    ll n,q,nop=0,cf=1,an=0;
    cin>>n>>q;
    rep(i,q){
        ll a,f,k;
        cin>>a>>f>>k;
        if(a==1 && Miller(f+k,15)==false)continue;
        if(a==2 && isper(f+k)==0)continue;
        if(a==1){
            an+=(abs(f-cf)%M);
            an%=M;
            cf=f;
            nop+=k;
        }
        else if(a==2){
            assert(isper(f+k)==1);
            an+=(abs(f-cf)%M);
            an%=M;
            cf=f;
            nop-=k;
        }
    }
    cout<<an<<" "<<nop;
    
    return 0;
}
#include <iostream>
#include <vector>
#include <string>
#include <set>
using namespace std;

void DFS(vector<set<int>>& vec, vector<int>& color, int i, int j )
{
	color[j] = i+1;
	set<int>::iterator it = vec[j].begin();
	for (; it != vec[j].end(); it++)
	{
		if (color[*it] == 0)
			DFS(vec, color, i, *it);
	}
}

int main()
{
  int T = 0;
	cin >> T;
	for (int i = 0; i<T; i++)
	{
		int N, K;
		cin >> N >> K;
		vector<set<int>> vec(N);
		vector<pair<int, int>> b_v;
		bool allow = true;
		for (int j = 0; j<K; j++)
		{
			int x = 0, y = 0;
			string s;
			cin>>x>>s>>y;
			if (s == "=")
			{
				vec[x-1].insert(y-1);
				vec[y-1].insert(x-1);
			}
			else
			{
				b_v.push_back(make_pair(x-1, y-1));
			}
		}
		vector<int> color(N+1, 0);
		for (int j = 0; j<N; j++){
			if (color[j] == 0)
				DFS(vec, color, j, j);
		}

		for (int j = 0; j<b_v.size(); j++)
		{
			if (color[b_v[j].first] == color[b_v[j].second])
			{
				allow = false;
				break;
			}
		}

		if (allow)
			cout << "YES" << endl;
		else
			cout << "NO" << endl;
	}

	return 0;
}

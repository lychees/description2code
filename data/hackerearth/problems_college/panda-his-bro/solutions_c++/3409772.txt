#include <bits/stdc++.h>

using namespace std;

vector <int> v[100005];
bool vis[100005];
int dist[100005];

pair<int, int> bfs(int s)
{
	memset(vis, false, sizeof(vis));
	memset(dist, 0, sizeof(dist));
	dist[s] = 0;
	queue <int> q;
	q.push(s);
	vis[s] = true;
	int tmp;
	while (!q.empty()) {
		int u = q.front();
		tmp = u;
		q.pop();
		vis[u] = true;
		for (int i = 0; i < v[u].size(); i++) {
			if (vis[v[u][i]] == false) {
				q.push(v[u][i]);
				dist[v[u][i]] = dist[u] + 1;
			}
		}
	}
	
	return make_pair(tmp, dist[tmp]);
}

int main()
{
	int n;
	cin >> n;
	int x, y;
	for (int i = 0; i < n - 1; i++) {
		cin >> x >> y;
		v[x].push_back(y);
		v[y].push_back(x);
	}
	
	
	
	pair <int, int> p = bfs(1);

	
	p = bfs(p.first);
	
	cout << p.second << endl;
	
	return 0;
}
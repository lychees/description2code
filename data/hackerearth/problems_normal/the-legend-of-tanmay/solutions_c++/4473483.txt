/*My First Template :D*/
#include <bits/stdc++.h>
#include <limits.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define MOD (ll)1000000007
#define pb 	push_back
#define EPS 1e-9
#define FOR(i, n)	for(int i = 0;i < n; i++)
#define si(a)   scanf("%d", &a) 
#define pi(a)   printf("%d\n", a)

template <typename T> T gcd(T a, T b){return (b==0)?a:gcd(b,a%b);}
template <typename T> T lcm(T a, T b){return a*(b/gcd(a,b));}
template <typename T> T mod_exp(T b, T p, T m){T x = 1;while(p){if(p&1)x=(x*b)%m;b=(b*b)%m;p=p>>1;}return x;}
template <typename T> T invFermat(T a, T p){return mod_exp(a, p-2, p);}
template <typename T> T exp(T b, T p){T x = 1;while(p){if(p&1)x=(x*b);b=(b*b);p=p>>1;}return x;}

int main(){
    int t;
    si(t);
    int count_pos[11];
    int count_neg[11];
    while(t--){
        for(int i = 0;i <= 10; i++){
            count_neg[i] = 0;
            count_pos[i] = 0;
        }
        int n;
        cin>>n;
        int arr[n];
        FOR(i, n)   cin>>arr[i];
        FOR(i, n){
            if(arr[i] >= 0){
                count_pos[arr[i]]++;
            }else
                count_neg[-1*arr[i]]++;
        }
        int count_negative = 0;
        for(int i = 0;i < n; i++){
            if(arr[i] < 0)
                count_negative++;
        }
        if(count_pos[0]==n){
            cout<<0<<' '<<0<<endl;
        }
        else if(n==2 && count_pos[0] && count_negative){
            
                for(int i = 1; i<= 10; i++){
                    if(count_neg[i] > 0)
                        cout<<0<<' '<<(-1*i)<<endl;
                }
        }else if(count_negative+count_pos[0]==n && count_negative == 1){
        	if(n==1)
        		cout<<arr[0]<<' '<<arr[0]<<endl;
        	else{
        		int i;
        		for( i = 1; i <= 10; i++){
        			if(count_neg[i] > 0)
        				break;
        		}
        		cout<<0<<' '<<(-1*i)<<endl;
        	}
        }
        else{
            //if all are negative
            ll ans_max = 1;
            ll ans_min = 1;
            
                for(int i = 1;i <= 10; i++){
                    if(count_pos[i] > 0)
                        ans_max*=(exp((ll)i, (ll)count_pos[i]));
                }
                ans_min = ans_max;
                int last_idx = 10;
                for(int i = 10; i >= 1; i--){
                    if(count_neg[i] > 0){
                        if(count_neg[i]&1)
                            ans_max*=(-1*exp((ll)i, (ll)count_neg[i]));
                        else
                            ans_max*=(exp((ll)i, (ll)count_neg[i]));
                        last_idx = i;
                    }
                }
                if(ans_max < 0){
                    ans_max/=(last_idx*-1);
                }
            
            //check if all are +ve
            int j;
            for( j = 1; j <= 10; j++){
                if(count_neg[j] > 0)
                    break;
            }
            if(j > 10){
                //find min among +ve
                int i;
                for( i = 0;i <= 10; i++){
                    if(count_pos[i] > 0)
                        break;
                }
                ans_min = i;
            }else{
                 last_idx = 10;
                for(int i = 10; i >= 1; i--){
                    if(count_neg[i] > 0){
                        if(count_neg[i]&1)
                            ans_min*=(-1*exp((ll)i, (ll)count_neg[i]));
                        else
                            ans_min*=(exp((ll)i, (ll)count_neg[i]));
                        last_idx = i;
                    }
                }
                if(ans_min > 0){
                    ans_min/=(last_idx*-1);
                }
            }
            cout<<ans_max<<' '<<ans_min<<endl;
        }
    }
	return 0;
}
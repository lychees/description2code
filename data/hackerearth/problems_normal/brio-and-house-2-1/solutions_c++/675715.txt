//Karol Kaszuba
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <vector>
#include <cstdlib>
#include <ctime>
//#include <unordered_map>
//#include <unordered_set>

using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef double D;
typedef long double LD;
typedef vector<PII> VII;

#define FOR(i,x,y) for(int i=(x);i<=(y);++i)
#define REP(i,x) FOR(i,0,(x)-1)
#define FORD(i,x,y) for(int i=(x);i>=(y);--i)
#define VAR(i,c) __typeof(c) i=(c)
#define FORE(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)

#define SIZE(c) (int)((c).size())
#define ALL(c) (c).begin(),(c).end()
#define PB push_back
#define IN insert
#define ER erase
#define MP make_pair
#define ST first
#define ND second
#define IOSYNC ios_base::sync_with_stdio(0)

LD area(PII a, PII b)
{
	return abs(a.ST * b.ND - a.ND * b.ST);
}
LD len(PII a, PII b)
{
	LL lol = (a.ST - b.ST) * (a.ST - b.ST) + (a.ND - b.ND) * (a.ND - b.ND);
	LD res = sqrt(lol);
	return res;
}

const LD eps = 1e-9;

bool is_zero(LD a)
{
	if(a > eps) return false;
	if(a < -eps) return false;
	return true;
}

void jebaj()
{
	LL a,b,c,d,r;
	cin >> a >> b >> c >> d >> r;
	LD pole = area(MP(a,b),MP(c,d));
	LD dlug = len(MP(a,b),MP(c,d));
	LD rzut = (pole / dlug);
	//cout << pole << " " << dlug << " " << rzut << "\n";
	if(is_zero(rzut - r))
	{
		cout << "JUST MISSED\n";
		return;
	}
	if(rzut > r)
	{
		cout << "SAFE\n";
		return;
	}
	cout << "REPLANNING\n";
	return;
}

int main()
{
	IOSYNC;
	int t;
	//t = 1;
	cin >> t;
	
	REP(i, t) 
	{
		jebaj();
	}
}

#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME ""

const ld EPS = 1e-9;

// a + x * b
struct Line {
  ll a, b;

  ld inter(const Line& l) const {
    // a + x * b == l.a + x * l.b
    // x * (b - l.b) = l.a - a
    return (ld) (l.a - a) / (b - l.b);
  }

  ll eval(ll x) const {
    return a + x * b;
  }
};

const int MAXN = 1e5 + 10;
const ll INF = 1e18;

struct Lines {
  vector<Line> ls;

  ll get_min(ll x) {
    if  (ls.empty()) {
      return INF;
    }
    int L = -1;
    int R = sz(ls) - 1;
    while (L != R - 1) {
      int M = (L + R) / 2;
      if  (ls[M].inter(ls[M + 1]) + EPS < x) {
        L = M;  
      } else {
        R = M;
      }
    }
    return ls[R].eval(x);
  }

  void push(const Line& l) {
    while (sz(ls) >= 2) {
      const auto& l1 = ls[sz(ls) - 2];
      const auto& l2 = ls.back();
      if  (!(l1.inter(l2) < l2.inter(l))) {
        ls.pop_back();
      } else {
        break;
      }
    }
    ls.pb(l);
  }
};


int a[MAXN];
int n, k;
ll ans;

inline bool time_over() {
  static int cnt = 0;
  static const ld TL = 3.0;
  static bool over = false;
  if  (++cnt == 100) {
    over |= clock() >= CLOCKS_PER_SEC * (TL - 0.2); 
    cnt = 0;
  }
  return over;
}

bool recalc_dp(vll& dp) {
  Lines lines;
  vll ndp(n, INF);
  forn(i, n) {
    ll best = lines.get_min(i + 1);
    if  (best < INF) {
      ndp[i] = best + 2 * (i + 1) * 1ll * (i + 1) + k * 1ll * k * 1ll * a[i];
      ans = min(ans, ndp[i] - 2ll * n * 1ll * (i + 1) + a[n - 1] * 1ll * k * 1ll * k + n * 1ll * n);
    }
    if  (dp[i] < INF) {
      lines.push(Line{ dp[i], - 2ll * (i + 1) }); 
    }
    if  (time_over()) {
      return false;
    }
  } 
  dp.swap(ndp);
  return true;
}

bool read() {
  if  (scanf("%d%d", &n, &k) < 2) {
    return false;
  }
  forn(i, n) {
    scanf("%d", &a[i]);
  }
  return true;
}

int main() {
#ifdef LOCAL
  freopen(FILE_NAME ".in", "r", stdin);
//  freopen(FILE_NAME ".out", "w", stdout);
#endif

  assert(read());

  // cnt = 1
  vll dp(n, INF);
  dp[0] = 1 * 1 + k * 1ll * k * 1ll * a[0];
  ans = k * 1ll * k * 1ll * (a[0] + a[n - 1]) + n * 1ll * n + 1ll * 1ll - 2ll * 1ll * n;
  for (int cnt = 2; cnt < k; ++cnt) {
    if  (!recalc_dp(dp)) {
      break;
    }
  }
  cout << ans << endl;

  return 0;
}

#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

vector<int> primes;
bool isprime[1000009]={false};
const int MAXN=1000000;
vector<int> res;
vector<int> bigprimes;

void sieve()
{
for(int i=2;i<=MAXN;i++)
isprime[i]=true;
int lim=sqrt(MAXN);
for(int i=2;i<=lim;i++)
{
if(isprime[i])
{
for(int j=i*i;j<=MAXN;j+=i)
isprime[j]=false;
}
}
for(int i=2;i<=10000;i++)
if(isprime[i])
primes.push_back(i);
for(int i=2;i<=MAXN;i++)
if(isprime[i])
bigprimes.push_back(i);
}	

int main() 
{
sieve();
for(int i=0;i<primes.size();i++)
{
for(int c=i+1;c<bigprimes.size();c++)
{
long long k=(long long)primes[i]*(long long)bigprimes[c];
if(k>100000000)
break;
res.push_back((int)k);
}
}
sort(res.begin(),res.end());
int t;
cin>>t;
while(t--)
{
int l,r;
cin>>l>>r;
int i=upper_bound(res.begin(),res.end(),l-1)-res.begin();
int j=upper_bound(res.begin(),res.end(),r)-res.begin();
cout<<j-i<<"\n";
}
}
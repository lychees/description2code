#include <bits/stdc++.h>

using namespace std;
typedef pair<int,int> pi;
vector<int> men;
vector<int> women;
vector<int> parent;
int root(vector<int>& parent,int a)
{
	if(parent[a]==a)
	return a;
	
	parent[a]=root(parent,parent[a]);
	
	return parent[a];
}

bool find(vector<int>& parent,int a,int b)
{
	if(root(parent,a)==root(parent,b))
	return true;
	else
	return false;
}

void join(vector<int>& parent,int a,int b)
{
	parent[root(parent,b)]=root(parent,a);	
}

int main()
{
	int n,m;
	
	cin >> n >> m;
	
	int a,b,c;
	int count=0;
	men = vector<int>(n+1);
	women = vector<int>(n+1);
	parent = vector<int>(n+1);
	for(int i=0;i<=n;i++)
	{
		men[i]=i;
		women[i]=i;
		parent[i]=i;
	}
	int i=0;

	
	while(i<m)
	{
		
		cin >> a >> b >> c;
		if(c==3)
		{
			if(!find(parent,a,b))
			{
				join(parent,a,b);
				count++;
			}
			
			if(!find(men,a,b))
			join(men,a,b);
			
			if(!find(women,a,b))
			join(women,a,b);
		}
		
		if(c==1)
		{
			if(!find(men,a,b))
			join(men,a,b);
		}
		
		if(c==2)
		{
			if(!find(women,a,b))
			join(women,a,b);
		}
		
		
		i++;
	}
    //
    unordered_set<int> st;
    for(int i=1;i<(int)men.size();i++)
    {
    	int temp = root(men,men[i]);
    	//cout << temp <<  endl; 
    	st.insert(temp);
    }
    //cout << st.size() << "men" << endl;
    if(st.size()>1)
    {
    	cout << "-1" << endl;
    	return 0;
    }
    
    
    st.clear();
    
    for(int i=1;i<(int)women.size();i++)
    {
    	st.insert(root(women,women[i]));
    }
	//cout << st.size() << "women" << endl;
    
    if(st.size()>1)
    {
    	cout << "-1" << endl;
    	return 0;
    }
    
    a = (2*n-2-count);
    cout << m-a << endl;
    return 0;
}

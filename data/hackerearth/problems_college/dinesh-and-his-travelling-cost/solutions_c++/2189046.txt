#include <bits/stdc++.h>
#define LL long long int
#define mod 1000000007
#define maxn 501
using namespace std;

int n = 500,s = 0 ; // vertices and source
vector < vector < pair<int,int> > > g (maxn);

const int INF = 1000000000;
vector<int> d (maxn, INF),  p (maxn);


void dijkstra(){

	d[s] = 0;
	set < pair<int,int> > q; // could use a priority queue
	q.insert (make_pair (d[s], s));
	while (!q.empty()) {
		int v = q.begin()->second, cur_d = q.begin()->first;
		q.erase(q.begin());

		if (cur_d > d[v])  continue;

		for (size_t j=0; j<g[v].size(); ++j) {
			int to = g[v][j].first,
				len = g[v][j].second;
			if (d[v] + len < d[to]) {
				q.erase (make_pair (d[to], to));
				d[to] = d[v] + len;
				p[to] = v;
				q.insert (make_pair (d[to], to));
			}
		}
	}


}

int main() {

    int ed;
    cin >> ed;

    for(int i=0,j,k,c; i<ed;i++){
        cin >> j >> k >> c;
        g[j].push_back(make_pair(k,c));
        g[k].push_back(make_pair(j,c));
    }

	int q;
	
    cin >> s >> q;
    
	dijkstra();
    
    for(int i=0,j;i<q;i++){
        cin >> j;
        if(d[j]!=INF)
            cout << d[j] << endl;
        else cout << "NO PATH\n";

    }

    return 0;
}

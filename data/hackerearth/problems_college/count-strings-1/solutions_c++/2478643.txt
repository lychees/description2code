#include <iostream>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#define LL long long int
#define mod 1000000007

using namespace std;

struct node {
    struct node *left;
    struct node * right;
    int val;
};

LL fact[1111111];
long long power2(LL a, LL b )
{
    long long x=1,y=a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>mod) x%=mod;
        }
        y = (y*y);
        if(y>mod) y%=mod;
        b /= 2;
    }
    return x;
}
LL IE(LL n)
{
	return power2(n, mod-2);
}

void solve( struct node *root, string s, int index)
{
    if ( !root)
        return;
    if ( index+ 1 == s.length()) {
   
    return;
    }
    solve(root->left, s, index + 1 );
    if ( s[index] == '0')
        solve(root->right, s, index+1);
}

LL Combi(LL n, LL r)
{
	return (fact[n] * ((IE(fact[r]) * IE(fact[n-r]))% mod)) %mod;
}

void prc()
{
	LL i;
	fact[0] = 1;
	for(i = 1; i <  1111111; i++) {
		fact[i] = (fact[i-1] * i) % mod;
	}
}

struct node * get()
{
struct node *root = (struct node *)malloc( sizeof(struct node));
root->left = root->right =NULL;
root->val = 0;
return root;
}

int main()
{
	prc();
	int t;
	scanf("%d",&t);
	while(t--) {
		LL cnt1[50];
		LL cnt2[50];
		string s1;
		string s2;
		cin >> s1 >> s2;
		int i;
		for(i = 0; i <= 30; i++) {
			cnt1[i] = 0;
			cnt2[i] = 0;
		}
		for(i = 0; i < s1.length(); i++) {
			cnt1[s1[i] - 'a']++;
		}
		for(i = 0; i < s2.length(); i++) {
			cnt2[s2[i] - 'a']++;
		}
		LL ans = 1;
		for(i = 0; i < 26; i++) {
			if(cnt1[i] == 0 && cnt2[i] == 0) {
				continue;
			}
			if(cnt1[i] < cnt2[i]) {
				ans = 0;
				continue;
			}
			ans = (ans * ((Combi(cnt1[i] , cnt2[i]) * fact[cnt2[i]]) % mod) ) % mod;
		}
		printf("%lld\n", ans);
	}
	return 0;
}


#include<bits/stdc++.h>
#define inf 1000000007
using namespace std ;
int sie[10002] ;
set < int > primes ;
void sieve () {
    int i , j ;
    for ( i = 2 ; i < 10001 ; i++ ) {
        if ( sie[i] == 0 ) {
            primes.insert ( i ) ;
            for ( j = i+i ; j < 10001 ; j+=i ) {
                sie[j] = 1 ;
            }
        }
    }
}
int main () {
    int n , k , a[1001][1001] , sum[1001][1001] ;
    sieve() ;
    scanf ( "%d %d" , &n , &k ) ;
    for ( int i = 0 ; i < n ; i++ ) {
        for ( int j = 0 ; j < n ; j++ ) {
            scanf ( "%d" , &a[i][j] ) ;
            set < int > :: iterator it ;
            it = primes.lower_bound ( a[i][j] ) ;
            if ( it == primes.end() )
                sum[i][j] = inf ;
            else
                sum[i][j] = (*it) - a[i][j] ;
                if ( sum[i][j]%k == 0 )
                    sum[i][j] /= k ;
                else
                    sum[i][j] = inf ;
        }
    }
    if ( n < 3 ) {
        cout << "no\n" ;
        return 0 ;
    }
    int ans = inf , row , col ;
    for ( int i = 1 ; i < n-1 ; i++ ) {
        for ( int j = 1 ; j < n-1 ; j++ ) {
            if ( sum[i][j] != inf && sum[i-1][j-1] != inf && sum[i-1][j+1] != inf && sum[i+1][j+1] != inf && sum[i+1][j-1] != inf ) {
                int cost = sum[i][j] + sum[i-1][j-1] + sum[i-1][j+1] + sum[i+1][j-1] + sum[i+1][j+1] ;
                if ( cost < ans )
            	{
            		ans = cost ;
            		row = i+1 ;
            		col = j+1 ;
            	}
            }
        }
    }
    if ( ans != inf ) {
        printf ( "yes\n" ) ;
        printf ( "%d\n" , ans ) ;
        printf ( "%d %d\n" , row , col ) ;
    }
    else {
        cout << "no\n" ;
    }
    return 0 ;
}

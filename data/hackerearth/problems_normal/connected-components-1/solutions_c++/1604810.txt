#include <bits/stdc++.h>
using namespace std;

#define end hello_cpp

#ifdef LOCAL
    #define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
    #define eprintf(...) (void)42;
#endif

const int MOD = (int)1e9 + 7;
const int MAXN = 100100;

inline int add(int a, int b) {
    return (a + b) % MOD;
}

inline int mul(int a, int b) {
    return (a * 1LL * b) % MOD;
}

inline int fastPow(int a, int b) {
    int r = 1;
    while (b) {
        if (b & 1) {
            r = mul(r, a);
        }
        a = mul(a, a);
        b >>= 1;
    }
    return r;
}

inline int inverse(int a) {
    return fastPow(a, MOD - 2);
}

int f[MAXN];
int ivf[MAXN];

inline int c(int n, int k) {
    if (k > n || k < 0) {
        return 0;
    }
    return mul(f[n], mul(ivf[k], ivf[n - k]));
}

int main() {
#ifdef LOCAL
    freopen("a.in", "r", stdin);
#endif
    f[0] = ivf[0] = 1;
    for (int i = 1; i < MAXN; i++) {
        f[i] = mul(f[i - 1], i);
        ivf[i] = inverse(f[i]);
    }
    int tests;
    scanf("%d", &tests);
    for (int test = 1; test <= tests; test++) {
        int n, m, k;
        scanf("%d%d%d", &n, &m, &k);
        if (k == 0) {
            puts(m == n ? "1" : "0");
        } else {
            printf("%d\n", mul(c(n - m - 1, k - 1), c(m + 1, k)));
        }
    }
    return 0;
}
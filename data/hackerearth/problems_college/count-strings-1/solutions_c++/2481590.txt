/* Vipul Jain */

#include <bits/stdc++.h>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FB(i,a,n) for(int i=(a);i>=(n);--i)
#define FI(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define Su(x) scanf("%llu",&x)
#define Sf(x) scanf("%f",&x)
#define Sd(x) scanf("%lf",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define fr first
#define se second

#define MOD (ill)(1e9)+7
ill dp[1000010];

ill pow(ill a, ill b)
{
    ill x = 1, y = a;
    while (b > 0)
    {
        if (b % 2 == 1)
        {
            x = (x * y);
            if (x > MOD)
                x %= MOD;
        }
        y = (y * y);
        if (y > MOD)
            y %= MOD;
        b /= 2;
    }
    return x;
}

ill modInverse(ill a)
{
    return pow(a, MOD - 2);
}

void fact()
{
    dp[0] = 1;
    dp[1] = 1;
    F(i, 2, 1000010) {
        dp[i] = i * dp[i - 1];
        dp[i] %= MOD;
    }
}

int cum1[30];
int cum2[30];

int main()
{
    fact();
    int t;
    S(t);
    while (t--) {
        M(cum1, 0);
        M(cum2, 0);

        string A, B;
        cin >> A >> B;
        int len1 = A.size();
        int len2 = B.size();

        F(i, 0, len1) {
            cum1[A[i] - 'a']++;
        }
        F(i, 0, len2) {
            cum2[B[i] - 'a']++;
        }

        int flag = 0;
        F(i, 0, 30) {
            if (cum2[i] > cum1[i]) {flag = 1; break;}
        }
        if (flag) {
            cout << "0" << endl;
        } else {
            ill ans = 1;
            F(i, 0, 26) {
                ill temp = (dp[cum1[i]] * modInverse(dp[cum1[i] - cum2[i]]));
                temp %= MOD;
                ans *= temp;
                ans %= MOD;
            }
            cout << ans << endl;
        }
    }
    return 0;
}


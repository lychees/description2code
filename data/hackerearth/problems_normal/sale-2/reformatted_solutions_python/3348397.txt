'''
# Read input from stdin and provide input before running code

name = raw_input('What is your name?\n')
print 'Hi, %s.' % name
'''


def findpar(edge, parents):
    while edge in parents:
        edge = parents[edge]
    return edge


def checkcycles(edges):  # union find algorithm to find edges
    parents = {}
    for edge in edges:
        para = findpar(edge[0], parents)
        parb = findpar(edge[1], parents)
        if para == parb:
            # print "cycle found"
            return True
        else:
            parents[edge[0]] = edge[1]
    # print "Cycles not found"
    return False


def solve(N, M):
    edges = []
    degree = {}
    result = True
    for pair in range(0, M):
        a, b = map(int, raw_input().split())
        if result is False:
            continue
        edges.append([a, b])
        if a not in degree:
            degree[a] = 0
        if b not in degree:
            degree[b] = 0
        degree[a] = degree[a] + 1
        degree[b] = degree[b] + 1
        if degree[a] > 2 or degree[b] > 2:
            result = False

    if result is False:
        return False

    # DFS check for cycles
    hasCycles = checkcycles(edges)
    if hasCycles:
        return False
    else:
        return True


T = input()
for t in range(0, T):
    N, M = map(int, raw_input().split())
    answer = solve(N, M)
    if answer:
        print "YES"
    else:
        print "NO"

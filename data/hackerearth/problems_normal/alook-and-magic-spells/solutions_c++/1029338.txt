#include <bits/stdc++.h>

using namespace std;

#define sz(a) (int)a.size()

typedef long long ll;
typedef vector<vector<int> > Matrix;

const int MOD = 1e9 + 7;

int n;

int add(int a, int b) {
    return (a + b) % MOD;
}

int mul(int a, int b) {
    return ((ll)a * (ll)b) % MOD;
}

Matrix create(int n, int m) {
    return Matrix(n, vector<int>(m, 0));
}

Matrix mul(const Matrix & a, const Matrix & b) {
    Matrix c = create(sz(a), sz(b[0]));
    for (int i = 0; i < sz(a); i++)
    for (int j = 0; j < sz(b[0]); j++)
    for (int k = 0; k < sz(a[0]); k++)
        c[i][j] = add(c[i][j], mul(a[i][k], b[k][j]));
    return c;
}

Matrix pow(const Matrix & a, int n) {
    if (n == 1) return a;
    Matrix t = pow(a, n / 2);
    t = mul(t, t);
    if (n & 1) t = mul(t, a);
    return t;
}

int main() {
//    freopen("input.txt", "r", stdin);

    ios::sync_with_stdio(false);
    int t; cin >> t;

    Matrix base = create(3, 3);
    base[0][0] = base[2][0] = 2;
    base[0][1] = base[2][1] = 4;
    base[1][0] = base[2][2] = 1;

    Matrix nextBase = create(3, 1);
    nextBase[0][0] = 12;
    nextBase[1][0] = 2;
    nextBase[2][0] = 14;

    while (t--) {
        cin >> n;
        if (n == 1) cout << 2 << endl;
        else if (n == 2) cout << 14 << endl;
        else {
            Matrix lastBase = pow(base, n - 2);
//            for (int i = 0; i < sz(lastBase); i++) {
//            for (int j = 0; j < sz(lastBase[i]); j++) cout << lastBase[i][j] << " ";
//            cout << endl;
//            }
            Matrix res = mul(lastBase, nextBase);
            cout << res[2][0] << endl;
        }
    }

    return 0;
}

#include <iostream>
#include <queue>
#include <cstring>
using namespace std;

int n;
int d[33][33];
char g[33][33];

bool isValid(int x, int y)
{
	return (x >= 1 && x <= n && y >= 1 && y <= n && g[x][y] != 'T');
}

int bfs(int x, int y)
{
	queue<pair<int, int> > q;

	d[x][y] = 0;
	g[x][y] = 'T';
	q.push(make_pair(x, y));
	while (q.size())
	{
		pair<int, int> p = q.front();
		q.pop();
		x = p.first, y = p.second;
		for (int i = -1; i <= 1; i += 2)
		{
			if (isValid(x+i, y))
			{
				d[x+i][y] = d[x][y] + 1;
				if (g[x+i][y] == 'E')	
					return d[x+i][y];
				g[x+i][y] = 'T';
				q.push(make_pair(x+i, y));
			}
			if (isValid(x, y+i))
			{
				d[x][y+i] = d[x][y] + 1;
				if (g[x][y+i] == 'E')
					return d[x][y+i];
				g[x][y+i] = 'T';
				q.push(make_pair(x, y+i));
			}
		}
	}
	return -1;
}

int main()
{
	cin >> n;
	int sx, sy;
	for (int i = 1; i <= n ;i++)
		for (int j = 1; j <= n; j++)
		{
			cin >> g[i][j];
			if (g[i][j] == 'S')
				sx = i, sy = j;
		}
	cout << bfs(sx, sy) << endl;
	return 0;
}


#include<iostream>
#include<stdio.h>
#include<math.h>
using namespace std;
int maxlength;

double read()
{
    double a=0;
    double ret=0;
    a=getc(stdin);
  // cout<<a<<"\n";
    while((a<48||a>57)&&(a<65||a>90))
    {                                
                                  // cout<<a<<"\n";
                     a=getc(stdin);
                     }
   
   // cout<<a<<"\n";
    ret=a;
   // ret=a-48;
    a=getc(stdin);
    int length=2;
    while((a>=48&&a<=57)||(a>=65&&a<=90))
    {                                    
                   length+=2;
                       ret*=100;
                     //  ret+=(a-48);
                     ret+=a;
                       a=getc(stdin);
                    //   cout<<ret<<"\n";
                       }
     if(length>maxlength)
       maxlength=length;
    return ret;
}
int heapsize,length;
void heap_adj(double* a,int rootindex)
{
      int lindex=2*rootindex+1;
      int rindex=2*rootindex+2;
     int max;
     if((lindex<=heapsize)&&a[lindex]>a[rootindex])
       max=lindex;
       else
       max=rootindex;
     if((rindex<=heapsize)&&a[rindex]>a[max])
       max=rindex;
     if(max!=rootindex)
     {
                       double tmp=a[rootindex];
                       a[rootindex]=a[max];
                       a[max]=tmp;
                       heap_adj(a,max);
                       }
}
void build_maxheap(double* a,int length)
{
     heapsize=length;
     for(int i=length/2;i>=0;i--)
     {
             heap_adj(a,i);
             }
}
void heap_sort(double* a,int length)
{
     build_maxheap(a,length);
    double tmp;
 /*    for(long long long int i=0;i<length;i++)
    {
            cout<<a[i]<<"\t";
            }
     */
     for(int i=length;i>=1;i--)
     {
             tmp=a[0];
             a[0]=a[i];
             a[i]=tmp;
             heapsize--;
             heap_adj(a,0);
             }
}
double arr[1000000];
/* binary search*/

int binSer(double a,int n)
{
     int l=0;
     int u=n-1;
     int mid=0;
     while(u>=l)
     {
               mid=(u+l)/2;
               if(arr[mid]==a)return mid;
               if(arr[mid]>a)u=mid-1;
               else  l=mid+1; 
                
                
                }
     
     return -1;



}
/*binsearch ends*/

void normalise(int n)
{
    /* cout<<"\nbefore normalization ";
     for(int i=0;i<n;i++)
       cout<<arr[i]<<" ";     
     
   cout<<"\nafter normaization\n";*/
    for(int i=0;i<n;i++)
    {
            int ctr=0;
      double j=arr[i];
      while(j>=1)
      {
                j/=10;
                ctr++;
                }
     // cout<<arr[i]<<" "<<ctr<<"\n";
      if(ctr<maxlength)
      {
                       int howmuch=maxlength-ctr;
       //                cout<<"\n between "<<arr[i]<<" "<<howmuch;
                       arr[i]*=pow(10,howmuch);
                     }
     
     
     }
     
  /*   for(int i=0;i<n;i++)
     cout<<arr[i]<< " ";
     cout<<"\nreturning to main\n";*/
     
 }
int main()
{
    
  
    int n;
    cin>>n;

    
    int ctr=0;
    while(n--)
    {
              
              arr[ctr]=read();
              //cout<<arr[ctr];
              ctr++;
              
              }
   
     normalise(ctr);
  /*   cout<<"\n";
   for(int i=0;i<ctr;i++)
   {
    cout<<arr[i]<<" ";         
    
    }
    cout<<"\n";*/
        heap_sort(arr,ctr-1);
 /*  for(int i=0;i<ctr;i++)
   {
    cout<<arr[i]<<" ";         
    
    }
    cout<<"\n";
    
    */
    int query;
    cin>>query;
    double stri=0;
    while(query--)
    {
               stri=read();
               double iamback=stri;
               int ten=0;
               while(iamback>=1)
               {   iamback/=10;
                   ten++;
                               
                               }
               if(ten<maxlength)
               {
                     int howmuch=maxlength-ten;
                       stri*=pow(10,howmuch);
                       
                                
            /* int m=0;
               for(
                 }int i=0;i<ctr;i++)
                {
                 if(arr[i]>stri)break;
                 if(arr[i]==stri) {cout<<i+1<<"\n";m=1;}
                 
                 
                 }
                 if(!m)cout<<"-1\n";*/
                 }
                 int op=binSer(stri,ctr);
                 if(op>=0)cout<<op+1<<"\n";
                 else  cout<<-1<<"\n";
                  
                  }
    
    
    
    
    
    
    
  //  getch();
    return 0;
    
}

#include <bits/stdc++.h>
using namespace std;
int tree[100002],n;
#define max 100002

int read(int idx) {
	int sum = 0;
	while (idx > 0){
		sum += tree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}
void update(int idx ,int val){
	while (idx <= max) {
		tree[idx] += val;
		idx += (idx & -idx);
	}
}
#define getcx getchar_unlocked
int scanint()
{
    int n=0;
    int ch=getcx();int sign=1;
    while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
     
    while( ch >= '0' && ch <= '9' )
    n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
    return(n*sign);
}
inline void y (int n)
{
    char buffer[sizeof(n) * 8 * 3 / 10 + 3];  
    int index = sizeof(buffer)-1;
    int end = index;
    buffer[index--] = 0;
    do {
       buffer[index--] = (n % 10) + '0';
       n /= 10;
    } while(n);
    puts(&buffer[index+1]);
}
int main()
{
	int n,q,i,l,r,s,x;
	n=scanint();
	int a[n],k;
	for(i = 0; i < n; i++) {
		a[i]=scanint();
		update(a[i]+1,1);
	}
	q=scanint();
	while(q--) {
		x=scanint();
		if(x == 0) {
			l=scanint();
			r=scanint();
			l++;
			r++;
			k = read(r)-read(l-1);
			printf("%d\n",k);
		}
		else if(x == 1) {
			l=scanint();
			l++;
			update(l,-1);
		}
		else {
			l=scanint();
			l++;
			update(l,1);
		}
	}
    return 0;
}

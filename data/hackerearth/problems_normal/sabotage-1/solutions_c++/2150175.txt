#include <bits/stdc++.h>
using namespace std;



int main() {
	int N, M;
	cin >> N >> M;

	vector<vector<int> > G(N);
	vector<pair<int,int> > edges(M);

	for(int i = 0; i < M; i++) {
		int a, b;
		cin >> a >> b;
		a--;b--;
		edges[i] = pair<int, int>(a, b);
		G[a].push_back(i);
		G[b].push_back(i);
	}

	vector<bool> connected(N, false);
	vector<bool> used(M, false);

	set<int> q;
	q.insert(-M + 1);

	int num = 0;
	while(num < N - 1) {
		int e = -(*q.begin());
		q.erase(q.begin());

		if(connected[edges[e].first] && connected[edges[e].second]) {
			continue;
		}
		used[e] = true;
		if(!connected[edges[e].first]) {
			int idx = edges[e].first;
			connected[idx] = true;
			for(int i = 0; i < G[idx].size(); i++) {
				if(!used[G[idx][i]] && (!connected[edges[G[idx][i]].first] || !connected[edges[G[idx][i]].second])) {
					q.insert(-G[idx][i]);
				}
			}
		}
		if(!connected[edges[e].second]) {
			int idx = edges[e].second;
			connected[idx] = true;
			for(int i = 0; i < G[idx].size(); i++) {
				if(!used[G[idx][i]] && (!connected[edges[G[idx][i]].first] || !connected[edges[G[idx][i]].second])) {
					q.insert(-G[idx][i]);
				}
			}
		}
		num++;
	}

	cout << (M - (N - 1)) << endl;
	for(int i = 0; i < M; i++) {
		if(!used[i]) {
			cout << (i + 1) << endl;
		}
	}
}


#include<bits/stdc++.h>
using namespace std;


typedef long long ll;
const int MAX_N = 100005;


vector<int>graph[MAX_N];
bool visited[MAX_N];
int colour[MAX_N];

int N, M;

void INITIALISE()
{
	for(int i = 0 ; i < MAX_N ; i++)
	{
		visited[i] = false;
		colour[i] = -1;
		graph[i].clear();
	}
}

bool bfs(int source)
{
	visited[source] = true;
	colour[source] = 1;

	queue<int>myq;
	myq.push(source);

	while(myq.empty() == false)
	{
		int src = myq.front();
		myq.pop();

		int sz = graph[src].size();

		for(int i = 0 ; i < sz ; i++)
		{
			int dest = graph[src][i];

			if(colour[src] == colour[dest])
				return false;
			if(visited[dest] == false)
			{
				visited[dest] = true;
				colour[dest] = 3-colour[src];
				myq.push(dest);
			}
		}
	}

	return true;
}

bool graph_bipartite()
{
	for(int i = 1 ; i <= N ; i++)
	{
		if(!visited[i] && !bfs(i))
		{
			return false;
		}
	}

	return true;
}

void solve()
{
	int a, b;

	INITIALISE();
	cin>>N >>M;

	for(int i = 0 ; i < M ; i++)
	{
		cin>>a>>b;

		graph[a].push_back(b);
		graph[b].push_back(a);
	}

	if(graph_bipartite())
		cout<<"YES"<<endl;
	else
		cout<<"NO"<<endl;
}

int main()
{
	ios_base::sync_with_stdio(false);

    int test;
    cin>>test;

    while(test--)
        solve();

	return 0;
}
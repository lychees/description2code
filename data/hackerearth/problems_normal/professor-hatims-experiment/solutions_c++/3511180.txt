#include<bits/stdc++.h>
using namespace std;
#define PB push_back
vector<int>v[3000];
bool biparte_check;
int vis[3000];
void dfs(int vertex)
{
	for(int i=0;i<(int)v[vertex].size();++i)
	{
		if(vis[v[vertex][i]]==-1)
		{
			vis[v[vertex][i]]=(1+vis[vertex])%2;
			dfs(v[vertex][i]);
		}
		if(vis[v[vertex][i]]!=-1 && vis[v[vertex][i]]==vis[vertex])
		{
			biparte_check=false;
			return;
		}
	}
	return;
}
int main()
{	
	int tc;
	cin>>tc;
	while(tc--)
	{
		int n,m;
		cin>>n>>m;
		for(int i=1;i<=m;++i)
		{
			int x,y;
			cin>>x>>y;
			v[x].PB(y);
			v[y].PB(x);
		}
		memset(vis,-1,sizeof vis);
		for(int i=1;i<=n;++i)
		{
			if(vis[i]==-1)
			{
				biparte_check=true;
				vis[i]=0;
				dfs(i);//asuming connected graph
				if(biparte_check==false)break;
			}
		}
		//(biparte_check==true)?puts("biparte graph "):puts("not a biparte graph");
		(biparte_check==true)?puts("No suspicious lizards found!"):puts("Suspicious lizards found!");
		for(int i=1;i<=n;++i)
		{
			v[i].clear();
		}
	}
	return 0;
}

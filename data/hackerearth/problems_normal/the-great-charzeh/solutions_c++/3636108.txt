#include <cstdio>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cctype>
#include <utility>
#include <queue>
#include <cmath>
#include <complex>
using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VPII;
typedef pair<LL, LL> PLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
typedef double DB;

#define pb push_back
#define mset(a, b) memset(a, b, sizeof a)
#define all(x) (x).begin(), (x).end()
#define bit(x) (1 << (x))
#define bitl(x) (1LL << (x))
#define sqr(x) ((x) * (x))
#define sz(x) ((int)(x.size()))
#define cnti(x) (__builtin_popcount(x))
#define cntl(x) (__builtin_popcountll(x))
#define clzi(x) (__builtin_clz(x))
#define clzl(x) (__builtin_clzll(x))
#define ctzi(x) (__builtin_ctz(x))
#define ctzl(x) (__builtin_ctzll(x))

#define X first
#define Y second

#define Error(x) cout << #x << " = " << x << endl

template <typename T, typename U> 
inline void chkmax(T& x, U y) {
	if (x < y) x = y;
}

template <typename T, typename U>
inline void chkmin(T& x, U y) {
	if (y < x) x = y;
}

const int MN = 305;
VI con[MN];
int n, m;
int b[MN];
int vis[MN], T;
int f[2 * MN], a[MN];

bool find(int u) {
	for (int i = 0; i < con[u].size(); i++) {
		int v = con[u][i];
		if (vis[v] == T) continue;
		vis[v] = T;
		if (b[v] == -1 || find(b[v])) {
			b[v] = u;
			return 1;
		}
	}
	return 0;
}

int max_match() {
	int ans = 0;
	memset(b, -1, sizeof b);
	for (int i = 0; i < n; i++) {
		T++;
		ans += find(i);
	}
	return ans;
}

bool can(int t) {
	for (int i = 0; i < n; i++) {
		con[i].clear();
		for (int j = 0; j < n; j++) {
			if (f[a[i] + j] <= t) con[i].push_back(j); 
		}
	}
	return max_match() == n;
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++) scanf("%d", a + i);
	for (int i = 0; i < n + m - 1; i++) scanf("%d", f + i);
	int st = 0, en = 2e9;
	while (en - st > 1) {
		int mid = (st + en) / 2;
		if (can(mid)) en = mid;
		else st = mid;
	}
	printf("%d\n", en);
	
	return 0;
}

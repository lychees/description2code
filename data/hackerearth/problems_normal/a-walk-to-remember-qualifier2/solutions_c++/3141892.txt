#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <memory.h>
#include <set>
#include <map>

using namespace std;

vector < vector<int> > g, gr;
vector<char> used;
vector<int> order, component;
 
void dfs1 (int v) {
  used[v] = true;
  for (size_t i=0; i<g[v].size(); ++i)
    if (!used[ g[v][i] ])
      dfs1 (g[v][i]);
  order.push_back (v);
}
 
void dfs2 (int v) {
  used[v] = true;
  component.push_back (v);
  for (size_t i=0; i<gr[v].size(); ++i)
    if (!used[ gr[v][i] ])
      dfs2 (gr[v][i]);
}

bool ans[100005];

int main() {
  int n, m;
  scanf("%d%d", &n, &m);
  g.resize(n); gr.resize(n);
  for (int i = 0; i < m; ++i) {
    int a, b;
    scanf("%d%d", &a, &b); --a; --b;
    g[a].push_back (b);
    gr[b].push_back (a);
  }
 
  used.assign (n, false);
  for (int i=0; i<n; ++i)
    if (!used[i])
      dfs1 (i);
  used.assign (n, false);
  for (int i=0; i<n; ++i) {
    int v = order[n-1-i];
    if (!used[v]) {
      dfs2 (v);
      if (component.size() > 1)
        for (int x : component)
          ans[x] = true;
      component.clear();
    }
  }
  for (int i = 0; i < n; ++i) {
    if (i) printf(" ");
    printf("%d", ans[i]);
  }
  printf("\n");
  return 0;
}


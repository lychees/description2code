#include<bits/stdc++.h>
using namespace std;
#define pb push_back
vector<int>G[109];
bool vis[109];
int num[109],low[109];
int tim=0;
void dfs(int curr,int P){
    num[curr]=low[curr]=++tim;
    int child=0;
    for(auto &to:G[curr] ){
        if(to==P)continue;
        else if(num[to]==-1){
            child++;
            dfs(to,curr);
            low[curr]=min(low[curr],low[to]);
            if(P!=0 && low[to]>=num[curr])
                vis[curr]=true;
            if(P==0 && child>1)
                vis[curr]=true;
        }else{
            low[curr]=min(low[curr],num[to]);
        }
    }
    return;
}
int main(){
    int n,m;cin>>n>>m;
    for(int i=0;i<m;++i)
    {
        int u,v;cin>>u>>v;
        G[u].pb(v);
        G[v].pb(u);
    }
    memset(vis,0,sizeof vis);
    memset(num,-1,sizeof num);
    tim=0;
    for(int i=1;i<=n;++i)
        if(num[i]==-1)dfs(i,0);
    int q;cin>>q;
    while(q--){
        int idto;cin>>idto;
        if(vis[idto]==true){
            printf("Satisfied %d\n",(int)G[idto].size());
        }else{
            puts("Not Satisfied");
        }
    }
    return 0;
}//race_gurram
//racegurram_

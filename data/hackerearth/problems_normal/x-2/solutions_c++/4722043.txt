/*
 * Satyam Swarnkar (Zyloc), Nit Silchar
*/
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <string>
#include <string.h>
#include <map>
#include <set>
#include <stack>
#include <iomanip>
#include <functional>
#include <limits.h>
#include <list>  
using namespace std;
#define loop(i,start,end) for (int i=start;i<=end;i++)
#define pool(i,start,end) for(int i=start;i>=end;i--)
#define zyloc() lli t;cin>>t;while(t--)
#define vi(v) vector <long long  int> v;
#define pb(n) push_back(n)
#define mp(a,b) make_pair(a,b)
#define fill(a,value) memset(a,value,sizeof(a)) 
#define MOD 1000000007
#define PI  3.14159265358979323846
#define MAX 100005
#define vpi(v) vector <pair <long long int, long long int> > v
#define lli long long int 
#define debug() cout<<"######"<<endl 

inline void fastRead_int(lli &x) {
    register lli c = getchar_unlocked();
    x = 0;
    lli neg = 0;

    for(; ((c<48 || c>57) && c != '-'); c = getchar_unlocked());

    if(c=='-') {
    	neg = 1;
    	c = getchar_unlocked();
    }

    for(; c>47 && c<58 ; c = getchar_unlocked()) {
    	x = (x<<1) + (x<<3) + c - 48;
    }

    if(neg)
    	x = -x;
}

inline void fastRead_string(char *str)
{
    register char c = 0;
    register int i = 0;

    while (c < 33)
        c = getchar_unlocked();

    while (c != '\n') {
        str[i] = c;
        c = getchar_unlocked();
        i = i + 1;
    }

    str[i] = '\0';
}
lli binarySearch(lli prefix[],lli n,lli low,lli find){
    lli high(n);
    lli mid;
    while(low<=high){
        mid = (low+high)/2;
        if (prefix[mid]==find){
            return mid;
        }
        else if(find>prefix[mid]){
            low = mid + 1;
        }
        else {
            high = mid - 1;
        }
    }
    return high;
}
int main(){
	zyloc(){
        lli n,x,k;
        cin>>n>>k;
        lli prefix[MAX]={0};
        vi(v);
        loop(i,0,n-1){
            cin>>x;
            prefix[i+1] = prefix[i]+x;
        }
        lli ans[MAX]={0},index,add;
        loop(i,0,n){
            index = binarySearch(prefix,n,i,k+prefix[i]);
            add = index - i - 1;
            if (add>=0){
                ans[add]++;
            }
        }
        pool(i,n-2,0){
            ans[i] += ans[i+1];
        }
        loop(i,0,n-1){
            cout<<ans[i]<<" ";
        }
        cout<<endl;
    }
    return 0;
}	
def compareSumOfCubes(numCubeDict):

    outputSum = -1
    sortedKeys = sorted(numCubeDict.keys())
    for i in xrange(len(sortedKeys)-1, 0, -1):
        for j in xrange(i-1, 0, -1):
            for listVal1 in numCubeDict[sortedKeys[i]]:
                for listVal2 in numCubeDict[sortedKeys[j]]:
                    if sortedKeys[i] + listVal1 == \
                            sortedKeys[j] + listVal2:
                        if sortedKeys[i] + listVal1 > outputSum:
                            outputSum = sortedKeys[i] + listVal1

    return outputSum


def sumOfCubes(numlist, limitNum):
    numCubeDict = {}
    for i in range(0, len(numlist)):
        numValueLists = []
        for j in range(i+1, len(numlist)):
            if numlist[i] + numlist[j] < limitNum:
                numValueLists.append(numlist[j])
        numCubeDict[numlist[i]] = numValueLists
    return numCubeDict


if __name__ == '__main__':
    tcNo = int(raw_input())
    while (1 <= tcNo <= 100):
        possibleNumList = []
        tcNo = tcNo-1
        limitNum = int(raw_input())
        for num in range(limitNum):
            numCube = num*num*num

            if numCube >= limitNum:
                break
            else:
                possibleNumList.append(numCube)
        numCubeDict = sumOfCubes(possibleNumList, limitNum)
        print compareSumOfCubes(numCubeDict)

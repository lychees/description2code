#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <set>
#include <sstream>
#include <numeric>
#include <bitset>
#define REP(i, a, b) for ( int i = int(a); i <= int(b); i++ )
#define PB push_back
#define MP make_pair
#define for_each(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define DFS_WHITE -1
#define DFS_BLACK 1
#define MAXN 1000
#define pi 3.141592653589793
#define ARRAY_SIZE(A) sizeof(A)/sizeof(A[0])
#define INF 1<<20
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
int find(int *arr,int x)
{
    if(arr[x] == x)
        return x;
        else
        return arr[x] = find(arr,arr[x]);
}
void merge(int *arr,int x,int y)
{
    arr[find(arr,x)] = find(arr,y);
}
void Kruskal(priority_queue<pair<ll,pair<int,int> > >pq,int *arr)
{
    ll ans = 0;
    while(!pq.empty())
    {
        pair<ll,pair<int,int> >p = pq.top();
        pq.pop();
        //cout<<p.first<<" ";
        if(find(arr,p.second.first) != find(arr,p.second.second))
        {
            merge(arr,p.second.first,p.second.second);
            ans +=(-p.first);
        }
    }
    cout<<ans<<endl;
}
int main()
{
    int n =0;
    cin>>n;
    int*arr = (int*)malloc(sizeof(int)*n);
    for(int i =0;i<n;i++)
        arr[i]  = i;
    
    map<int,pair<int,int> >mymap;
    vector<pair<int,int> >XX;
    vector<pair<int,int> >YY;
    for(int i =0;i<n;i++)
    {
        ll x,y;
        cin>>x>>y;
        mymap[i] = MP(x,y);
        XX.PB(MP(x,i));
        YY.PB(MP(y,i));
    }
    sort(XX.begin(),XX.end());
    sort(YY.begin(),YY.end());
    priority_queue<pair<ll,pair<int,int> > >pq;
    for(int i = 1;i<n;i++)
    {
        ll dis = abs(XX[i-1].first - XX[i].first);
        pq.push(MP(-dis,MP(XX[i-1].second,XX[i].second)));
        dis = abs(YY[i-1].first - YY[i].first);
        pq.push(MP(-dis,MP(YY[i-1].second,YY[i].second)));
    }
    Kruskal(pq,arr);
    return 0;
}
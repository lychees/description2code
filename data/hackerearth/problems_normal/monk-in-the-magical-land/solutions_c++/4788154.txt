/*input
2
19 8 4
6 4 6 7 3 10 2 3 8 1 10 4 7 1 7 3 7 2 9
8 10 3 1 3 4 8 6
5 0 3 12 17 9 1 7
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define MX 105

int X[MX], C[MX], Z[MX];
bool visit[MX];
int g[55][55];
int M;

int res = INT_MIN;
bool notCoprime(int a, int b) {
    if (g[a][b] != -1)
        return g[a][b];

    if (__gcd(a, b) == 1)
    {
        g[a][b] = g[b][a] = false;
        return false;
    }
    g[a][b] = g[b][a] = true;
    return true;
}

void NchooseK(int idx, int N, int K, vector<int> v) {
    if (v.size() == K) {
        for (int i = 0; i < M; ++i)
            visit[i] = false;

        for (int i = 0; i < K; ++i) {
            for (int j = 0; j < M; ++j) {
                if (notCoprime(v[i], C[j])) {
                    visit[j] = true;
                }
            }
        }
        int val = 0;
        for (int i = 0; i < M; ++i)
            if (visit[i])
                val += Z[i];

        res = max(res, val);
        return;
    }

    if (idx == N)
        return;

    v.push_back(X[idx]);
    NchooseK(idx + 1, N, K, v);
    v.pop_back();        
    NchooseK(idx + 1, N, K, v);
}

int main() {
    int T, N, K;
    cin >> T;
    memset(g, -1, sizeof g);

    while (T--) {
        scanf("%d %d %d", &N, &M, &K);
        
        res = INT_MIN;
        for (int i = 0; i < N; ++i)
            scanf("%d", &X[i]);
        for (int i = 0; i < M; ++i)
            scanf("%d", &C[i]);
        for (int i = 0; i < M; ++i)
            scanf("%d", &Z[i]);

        vector<int> v;
        NchooseK(0, N, K, v);
        printf("%d\n", res);
    }
}
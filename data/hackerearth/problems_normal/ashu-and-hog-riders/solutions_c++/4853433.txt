#include <bits/stdc++.h>

using namespace std;

int M[1005][1005];
bool vis[1005][1005];

int dfs(int i, int j, int n) {
    int cnt = 1;
    vis[i][j] = true;
    if (i - 1 >= 0 && M[i - 1][j] == 1 && !vis[i - 1][j]) {
        cnt += dfs(i - 1, j, n);
    }
    if (j - 1 >= 0 && M[i][j - 1] == 1 && !vis[i][j - 1]) {
        cnt += dfs(i, j - 1, n);
    }
    if (i + 1 < n && M[i + 1][j] == 1 && !vis[i + 1][j]) {
        cnt += dfs(i + 1, j, n);
    }
    if (j + 1 < n && M[i][j + 1] == 1 && !vis[i][j + 1]) {
        cnt += dfs(i, j + 1, n);
    }
    return cnt;
}

int main() {
    int t, n;
    cin >> n;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> M[i][j];
        }
    }
    memset(vis, false, sizeof(vis));
    int sol = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (M[i][j] && !vis[i][j]) {
                sol = max(sol, dfs(i, j, n));
            }
        }
    }
    cout << sol << endl;

    return 0;
}

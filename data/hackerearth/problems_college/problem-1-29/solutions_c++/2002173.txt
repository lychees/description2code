/*
ID:		ganeshk2
Lang:	C++
*/
#include <bits/stdc++.h>
using namespace std;
#define ll 			long long int
#define lu 			unsigned long long int
#define si(x) 		scanf("%d",&x)
#define sl(x) 		scanf("%lld",&x)
#define ss(s) 		scanf("%s",s)
#define pii			pair<int,int>
#define pll			pair<ll,ll>
#define vpi 		vector< pii >
#define vpll 		vector< pll >
#define vl 			vector<ll>
#define vi 			vector<int>
#define vvl 		vector< vl >
#define vvi 		vector< vi >
#define pb 			push_back
#define mp 			make_pair
#define rep(i,n,x) 	for(i=x;i<n;i++)
#define f(i,n) 		rep(i,n,0)
#define all(a)		a.begin(),a.end()
#define sortall(a) 	sort(all(a))
#define mem(a,x) 	memset(a,x,sizeof(a))
#define MOD 		1000000007
#define PI 			3.1415926535897932384626
#define F 			first
#define S 			second
#define endl		'\n'
/*
int gcd(int n,int m){return m==0?n:gcd(m,n%m);}

int scan_d(){
	register int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())
	if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}
	for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ll scan_lld(){
	register int ip=getchar_unlocked(),flag=1;ll ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())
	if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}
	for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
lu scan_llu(){
	register int ip=getchar_unlocked();lu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());
	for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
*/
int visited[100][100],n,a[100][100];
int up[100][100],down[100][100],leftt[100][100],rightt[100][100];

void dfs(int i,int j)
{
	visited[i][j]=1;
	if(up[i][j]==1 && !visited[i-1][j]) dfs(i-1,j);
	if(down[i][j]==1 && !visited[i+1][j]) dfs(i+1,j);
	if(leftt[i][j]==1 && !visited[i][j-1]) dfs(i,j-1);
	if(rightt[i][j]==1 && !visited[i][j+1]) dfs(i,j+1);
}

int main()
{
	//ios_base::sync_with_stdio(false);
	//cin.tie(0);
	int t;
	cin>>t;
	while(t--)
	{
		cin>>n;
		int i,j;
		mem(a,0);mem(visited,0);
		rep(i,n+1,1) rep(j,n+1,1) cin>>a[i][j];
		mem(leftt,0);mem(rightt,0);mem(up,0);mem(down,0);
		rep(i,n+1,1) 
		rep(j,n+1,1)
		{
			if(a[i][j]) 
			{
				leftt[i][j+1]=1;
				rightt[i][j-1]=1;
				up[i+1][j]=1;
				down[i-1][j]=1;
			}
		}
		dfs(1,1);
		if(!visited[n][n]) cout<<"NOT POSSIBLE"<<endl;
		else cout<<"POSSIBLE"<<endl;
		n=0;

	}
return 0;
}
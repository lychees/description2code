#include<bits/stdc++.h>
#define LL long long
#define ULL unsigned long long
#define F first
#define S second
#define pb push_back
#define FOR(i,lb,ub) for(i=lb;i<=ub;i++)
#define RFOR(i,ub,lb) for(i=ub;i>=lb;i--)
#define FORS(it,v) for(it=v.begin();it!=v.end();it++)
using namespace std;
#include<stdio.h>
#ifndef ONLINE_JUDGE
#define get getchar
#else
#define get getchar_unlocked
#endif
inline int f()
{
	int n=0,s=1;
	char p=get();
	if(p=='-')
		s=-1;
	while((p<'0' || p>'9') && p!=EOF && p!='-')
		p=get();
	if(p=='-')
		s=-1,p=get();
	while(p>='0' && p<='9' )
	{
		n=(n<<3)+(n<<1)+(p-'0');
		p=get();
	}
	return (n*s);
}
vector<int> G[100005];
bool visited[100005];
int in[100005], out[100005], ts;
int cnt;
void dfs(int x)
{
	cnt++;
	visited[x] = true;
	in[x] = ++ts;
	for (int i = 0; i <G[x].size(); ++i)
	{
		if (!visited[G[x][i]])
			dfs(G[x][i]);
	}
	out[x] = ++ts;
}
bool is_subtree(int x, int y)//if y lies in subtree of x
{
	if (in[x] <= in[y] && out[x]>=out[y])
		return true;
	return false;
}
int main()
{
    int t,i,j;
    int n;
    n=f();
    FOR(i,0,n-2)
    {
    	int a,b;
    	a=f();
    	b=f();
    	G[a].pb(b);
    	G[b].pb(a);
    }
    dfs(1);
    int q;
    q=f();
    while (q--)
    {
    	int a,x,y;
    	//cin>>a>>x>>y;
    	a=f();
    	x=f();
    	y=f();
    	if ((!a && is_subtree(x,y)) || (a && is_subtree(y,x)))
    		printf("YES\n");
    	else
    			printf("NO\n");	
    }
    
    return 0;
}
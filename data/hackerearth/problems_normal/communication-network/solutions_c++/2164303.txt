#include <algorithm>
#include <cstdio>
#include <cmath>
#include <string>
#include <cstring>
#include <cassert>
#include <vector>
#include <map>
#include <set>
#include <stack>

#define all(x) (x).begin(), (x).end()

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a < b) a = b;}
template<class T> inline void umin(T &a,T b){if(a > b) a = b;}
template<class T> inline T abs(T a){return a > 0 ? a : -a;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 1e5 + 100;
const int K = 300;

int n, k;
int a[N];
ll f[N];
ll nf[N];

ll calc(int i,int j){
    return f[i] + (ll)(j - i) * (j - i) + (ll)k * k * a[j];
}

void solve(int l,int r,int optl,int optr){
    if(l > r)
        return;
    int m = (l + r) >> 1;  
    int opt = -1;
    nf[m] = longinf;
    for(int i = optl; i <= optr && i < m; i++){
        ll t = calc(i, m);
        if(opt == -1 || t < nf[m]){
            nf[m] = t;
            opt = i;
        }
    }
    solve(l, m - 1, optl, opt);
    solve(m + 1, r, opt, optr);
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif  

    n = read();
    k = read();

    for(int i = 1; i <= n; i++){
        a[i] = read();
    }

    for(int i = 1; i <= n; i++){
        f[i] = longinf;
    }
    f[1] = (ll)k * k * a[1];

    ll ans = longinf;
    for(int i = 2; i <= k && i <= K; i++){
        solve(i, n, i - 1, n);
        for(int j = 1; j <= n; j++){
            f[j] = nf[j];
        }
        umin(ans, f[n]);
    }
    printf("%lld\n", ans);

    return 0;
}

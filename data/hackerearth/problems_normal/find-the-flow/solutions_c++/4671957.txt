#include <iostream>
#include <cstring>
#include <map>
#include <vector>

using namespace std;

const int MAXN = 200;
const int INF = 1000000000;

struct edge {
	int a, b, cap, flow;
};

int n, s, t, d[MAXN], ptr[MAXN], q[MAXN], inp[MAXN][MAXN], mdeg, deg[2][MAXN], rflow;
vector<edge> e;
vector<int> g[MAXN], sedges, tedges, nedges;   // Residual Graph

void add_edge(int a, int b, int cap) {
	edge e1 = { a, b, cap, 0 };
	edge e2 = { b, a, 0, 0 };
	g[a].push_back((int)e.size());
	e.push_back(e1);
	g[b].push_back((int)e.size());
	e.push_back(e2);
}

bool bfs() {
	int qh = 0, qt = 0;
	q[qt++] = s;
	memset(d, -1, n * sizeof d[0]);
	d[s] = 0;
	while (qh < qt && d[t] == -1) {
		int v = q[qh++];
		for (size_t i = 0; i<g[v].size(); ++i) {
			int id = g[v][i],
				to = e[id].b;
			if (d[to] == -1 && e[id].flow < e[id].cap) {
				q[qt++] = to;
				d[to] = d[v] + 1;
			}
		}
	}
	return d[t] != -1;
}
int dfs(int v, int flow) {
	if (!flow)  return 0;
	if (v == t)  return flow;
	for (; ptr[v]<(int)g[v].size(); ++ptr[v]) {
		int id = g[v][ptr[v]],
			to = e[id].b;
		if (d[to] != d[v] + 1)  continue;
		int pushed = dfs(to, min(flow, e[id].cap - e[id].flow));
		if (pushed) {
			e[id].flow += pushed;
			e[id ^ 1].flow -= pushed;
			return pushed;
		}
	}
	return 0;
}

int dinic() {
	int flow = 0;

	for (;;) {
		if (!bfs())  break;
		memset(ptr, 0, n * sizeof ptr[0]);
		while (int pushed = dfs(s, INF))
			flow += pushed;
	}
	return flow;
}

int main() {
	//freopen("in.txt", "r", stdin);
    int e, cp, c=1;
    char c1, c2;
    cin>>e;
    map<char, int> mp;
    for(int i=0; i<e; i++) {
        cin>>c1>>c2>>cp;
        if(mp[c1]==0)mp[c1] = c++;
        if(mp[c2]==0)mp[c2] = c++;
        add_edge(mp[c1]-1, mp[c2]-1, cp);
    }
    n = c-1;
    s = mp['S']-1; t = mp['T']-1;
    cout<<dinic()<<endl;
}













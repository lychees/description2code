'''
# Read input from stdin and provide input before running code

name = raw_input('What is your name?\n')
print 'Hi, %s.' % name
'''
#print 'Hello World!'


def final_table (animalsHunger):
	length = len(animalsHunger)
	table = [None] * length
	end = length-1
	middle = int (length/2)

	table[0] = animalsHunger[0]
	table[middle] = animalsHunger[end]

	assing_value (table,animalsHunger,0,middle,end,1)

	return table



def assing_value(list_dest, list_sorce, inicial, middle, end,incremet):
	empty = True
	pos_list_sorce_min = (2 * incremet) -1
	pos_list_sorce_max = (end - pos_list_sorce_min)
	
	index = calc_index(end, inicial, incremet)
	empty_index = find_empty(list_dest,index)

	if ( empty_index == -1):
		empty = False
	else:
		list_dest[empty_index] = list_sorce[pos_list_sorce_min]

	index = calc_index(end, inicial, -incremet)
	empty_index = find_empty(list_dest,index)

	if (empty_index == -1):
		empty = False
	else:
		list_dest[empty_index] = list_sorce[pos_list_sorce_min+1]

	index = calc_index(end, middle, incremet)
	empty_index = find_empty(list_dest,index)

	if (empty_index == -1):
		empty = False
	else:
		list_dest[empty_index] = list_sorce[pos_list_sorce_max]

	index = calc_index(end, middle, -incremet)
	empty_index = find_empty(list_dest,index)

	if (empty_index == -1):
		empty = False
	else:
		list_dest[empty_index] = list_sorce[pos_list_sorce_max-1]	
	
	if (empty):
		assing_value(list_dest, list_sorce, inicial, middle, end,incremet+1)



def find_empty (list1, index):
	end = len(list1) -1

	if (list1[index] == None):
		return index
	else:
		index_temp = calc_index(end,index,1)
		if (list1[index_temp] == None):
			return index_temp
		else:
			index_temp = calc_index(end,index,-1)
			if (list1[index_temp] == None):
				return index_temp
			else:
				return -1

def calc_index(end,refernce, incremet):
	index = refernce + incremet
	if (index > end):
		return index % (end+1)
	elif (index < 0): 
		if (abs(index) % (end+1) == 0):
			return 0
		else:
			return end + 1 - (abs(index) % (end+1))
	else:
		return index


def hunger_games (animalsHunger):

	animalsHunger.sort()

	table = final_table(animalsHunger)

	max_hunger = 0

	for i, animal in enumerate(table):
		if (i > 0 and i < len(table)-1):
			max_hunger = max(abs(animal - table[i-1]), abs(animal - table[i+1]), max_hunger)
		else:
			if (i == 0):
				max_hunger = max(abs(animal - table[len(table)-1]), max_hunger)		
	
	print max_hunger

	

raw_input ()
animalsHunger = map(int,raw_input().split(' '))

hunger_games (animalsHunger)



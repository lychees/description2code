#include <bits/stdc++.h>

using namespace std;

typedef vector<int> vi;
#define LSOne(S) (S & (-S))

class FenwickTree {
private:
  vi ft;

public:
  FenwickTree() {}
  // initialization: n + 1 zeroes, ignore index 0
  FenwickTree(int n) { ft.assign(n + 1, 0); }

  int rsq(int b) {                                     // returns RSQ(1, b)
    int sum = 0; for (; b; b -= LSOne(b)) sum += ft[b];
    return sum; }

  int rsq(int a, int b) {                              // returns RSQ(a, b)
    return rsq(b) - (a == 1 ? 0 : rsq(a - 1)); }

  // adjusts value of the k-th element by v (v can be +ve/inc or -ve/dec)
  void adjust(int k, int v) {                    // note: n = ft.size() - 1
    for (; k < (int)ft.size(); k += LSOne(k)) ft[k] += v; }
};

int main(){
    ios::sync_with_stdio(false);
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    int n;
    cin >> n;
    FenwickTree even(n + 1), odd(n + 1);
    int arr[n + 1];
    for(int i = 1; i <= n; i++) {
        cin >> arr[i];
        arr[i] %= 2;
        if(arr[i]) {
            odd.adjust(i, 1);
        }
        else {
            even.adjust(i, 1);
        }
    }

    int q;
    cin >> q;
    while(q--) {
        int c, x, y;
        cin >> c >> x >> y;
        if(c == 0) {
            y %= 2;
            if(y && !arr[x]) {
                odd.adjust(x, 1);
                even.adjust(x, -1);
            }
            else if(!y && arr[x]){
                odd.adjust(x, -1);
                even.adjust(x, 1);
            }
            arr[x] = y;
        }
        else if(c == 1) {
            cout << even.rsq(x, y) << endl;
        }
        else {
            cout << odd.rsq(x,y) << endl;
        }
    }

	return 0;
}

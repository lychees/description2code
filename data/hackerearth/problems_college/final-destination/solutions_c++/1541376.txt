/*
 	Beautiful Codes are MUCH better than 'Shorter' ones !
user  : triveni
date  : 08/03/2015
time  : 22:11:21
*/
#include <bits/stdc++.h>

using namespace std;

#define      pii               std::pair<int,int>
#define      vi                std::vector<int>
#define      mp(a,b)           std::make_pair(a,b)
#define      pb(a)             std::push_back(a)
#define      each(it,s)        for(auto it = s.begin(); it != s.end(); ++it)
#define      rep(i, n)         for(int i = 0; i < (n); ++i)
#define      fill(a)           memset(a, 0, sizeof (a))
#define      sortA(v)          sort(v.begin(), v.end())
#define      sortD(v)          sort(v.begin(), v.end(), greater<auto>())
#define      X                 first
#define      Y                 second

typedef long long LL;
LL MOD = 1000000007;

bool vis[1000001];
int dist[1000001];
vector<int> List;

int main()
{
	int T;
	scanf("%d",&T);
	while(T--){
		LL a, b, mul, dv, add, sub;
		scanf("%lld %lld %lld %lld %lld %lld",&a,&b,&mul,&dv,&add,&sub);
		
		rep(i, 1000000) vis[i] = 0, dist[i] = MOD;
		dist[a] = 0;
		vis[a] = 1;
		queue<int> Q;
		Q.push(a);
		while(!Q.empty()){
			int v = Q.front();
			Q.pop();
			if(v == b) break;
			bool done = 0;
			LL c = v * mul;
			if(c >= 2 and c <= 1000000) List.push_back(c);
			c = v / dv;
			if(c >= 2 and c <= 1000000) List.push_back(c);
			c = v + add;
			if(c >= 2 and c <= 1000000) List.push_back(c);
			c = v - sub;
			if(c >= 2 and c <= 1000000) List.push_back(c);
			for(int i = 0; i < List.size(); ++i){
				int c = List[i];
				if(vis[c]) continue;
				dist[c] = dist[v] + 1;
				Q.push(c);
				vis[c] = 1;
				if(c == b){ done = 1; break;}
			}
			List.clear();
			if(done) break;
		}
		while(!Q.empty()) Q.pop();
		if(dist[b] == MOD) dist[b] = -1;
		printf("%d\n",dist[b]);
	}
	return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <map>
#include <unordered_map>
#include <stack>
using namespace std;

void find_nge_left(vector <int> &A,vector <int> &NGE_left);
void find_nge_right(vector <int> &A,vector <int> &NGE_right);
int main()
{
	long long int i,val,n,j,k,count = 0,m,t;
	cin>> m ;
	for(k=0;k<m;k++)
	{
		cin >> n;
		vector <int> A(n);
		vector <int> NGE_right(n);
		vector <int> NGE_left(n);
		stack <int> mystack1;
		stack <int> mystack2;
		for(i=0;i<n;i++)
			cin >> A[i];
		find_nge_right(A,NGE_right);
		find_nge_left(A,NGE_left);
		long long int max = 0;
		long long int max_index = 0;
		for(i=0;i<n;i++)
		{
			if( ((NGE_left[i]+NGE_right[i])*(i+1))%1000000007 > max )
			{
				max = ((NGE_left[i]+NGE_right[i])*(i+1))%1000000007;
				max_index = i;
			}	
		}
		cout << max_index + 1 << endl;
	 	// for(i=0;i<n;i++)
	 	// 	cout << NGE_right[i] << " ";
	 	// cout << endl;
	 	// for(i=0;i<n;i++)
	 	// 	cout << NGE_left[i] << " ";
	 	// cout << endl;
	}
	return 0;
}

void find_nge_right(vector <int> &A,vector <int> &NGE_right)
{
	long long int n = A.size();
	long long int i,j;
	stack <int> mystack1,mystack2;
	mystack1.push(A[0]);	        
	mystack2.push(0);
 	for(i=1;i<n;i++)
 	{
		if(mystack1.empty())
		{
			mystack1.push(A[i]);
			mystack2.push(i);
		}
 		else if(mystack1.top() <= A[i])
 		{
 			while(!mystack1.empty() && mystack1.top() <= A[i])
 			{
 				NGE_right[mystack2.top()] = i - mystack2.top();
 				mystack2.pop();
	 			mystack1.pop();	 				
 			}
 			mystack1.push(A[i]);
 			mystack2.push(i);
 		}
 		else
 		{
 			mystack1.push(A[i]);
 			mystack2.push(i);
 		}	 		

 	}
 	while(!mystack1.empty())
 	{
 		NGE_right[mystack2.top()] = n-1 - mystack2.top();
 		mystack2.pop();
 		mystack1.pop();
 	}
}
void find_nge_left(vector <int> &A,vector <int> &NGE_left)
{
	long long int n = A.size();
	long long int i,j;
	stack <int> mystack1,mystack2;
	mystack1.push(A[n-1]);	        
	mystack2.push(n-1);
 	for(i=n-1;i>=0;i--)
 	{
		if(mystack1.empty())
		{
			mystack1.push(A[i]);
			mystack2.push(i);
		}
 		else if(mystack1.top() <= A[i])
 		{
 			while(!mystack1.empty() && mystack1.top() <= A[i])
 			{
 				NGE_left[mystack2.top()] = mystack2.top() - i;
 				mystack2.pop();
	 			mystack1.pop();	 				
 			}
 			mystack1.push(A[i]);
 			mystack2.push(i);
 		}
 		else
 		{
 			mystack1.push(A[i]);
 			mystack2.push(i);
 		}	 		

 	}
 	while(!mystack1.empty())
 	{
 		NGE_left[mystack2.top()] =  mystack2.top() - 0;
 		mystack2.pop();
 		mystack1.pop();
 	}
}

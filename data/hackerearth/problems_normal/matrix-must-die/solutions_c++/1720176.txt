#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
using namespace std;

#define FOR(i, a, b) for(int i=(a);i<(b);i++)
#define RFOR(i, b, a) for(int i=(b)-1;i>=(a);--i)
#define FILL(A,value) memset(A,value,sizeof(A))

#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979

typedef long long Int;
typedef unsigned long long UInt;
typedef vector<int> VI;
typedef pair<int, int> PII;

const int INF = 1000000000;
const int MAX = 2000007;
const int MAX2 = 2000;
const int BASE = 1000000000;
const int MOD = 1000000007;

struct Matrix
{
    vector<vector<int> >  A;
    vector<vector<Int> >  B;
    Matrix()
    {
        A.resize(9, vector<int>(9,0));
        B.resize(9, vector<Int>(9,0));
    }
    void mult(Matrix & b)
    {
        FOR(i,0,9)
            FOR(j,0,9)
                B[i][j] = 0;
        FOR(i,0,9)
            FOR(j,i,9)
                FOR(k,0,9)
                {
                    B[i][j] += 1LL * A[i][k] * b.A[k][j];
                }
        FOR(i,0,9)
            FOR(j,i,9)
                A[i][j] = B[i][j] % MOD;
        FOR(i,0,9)
            FOR(j,0,i)
                A[i][j] = A[j][i];
    }
};

Matrix bpow(Matrix a, Int n)
{
    Matrix res;
    FOR(i,0,9)
    {
        res.A[i][i] = 1;
    }
    while (n)
    {
        if (n & 1)
        {
            res.mult(a);
        }
        a.mult(a);
        n /= 2;
    }
    return res;
}

const int cnt = 60;
Matrix Pw[cnt + 2];

int main()
{
	//freopen("in.txt","r",stdin);

    Matrix M;
    FOR(i,0,9)
    {
        FOR(j,0,9)
        {
            int x1 = i / 3;
            int y1 = i % 3;
            int x2 = j / 3;
            int y2 = j % 3;
            M.A[i][j] = abs(x1 - x2) + abs(y1 - y2) + abs(x1 + y1 - x2 - y2);
        }
    }

    Pw[0] = M;
    FOR(i,1,60)
    {
        Pw[i] = Pw[i - 1];
        Pw[i].mult(Pw[i - 1]);
    }

    /*FOR(i,0,9)
    {
        FOR(j,0,9)
        {
            cout << M.A[i][j] << ' ';
        }
        cout << endl;
    }*/

    int t;
    cin >> t;
    FOR(tt,0,t)
    {
        Int n;
        cin >> n;
        vector<int> init(9);
        FOR(i,0,9)
        {
            scanf("%d" , &init[i]);
        }

        Matrix A;
        FOR(i,0,9)
            A.A[i][i] = 1;

        FOR(i,0,47)
            if (n & (1LL << i))
                A.mult(Pw[i]);

        vector<int> res(9);
        FOR(i,0,9)
        {
            FOR(j,0,9)
            {
                res[i] += 1LL * A.A[i][j] * init[j] % MOD;
                res[i] %= MOD;
            }
        }

        FOR(i,0,9)
        {
            cout << res[i];
            if (i % 3 == 2) cout << endl;
            else cout << ' ';
        }

    }

	return 0;
}

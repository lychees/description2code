#include <bits/stdc++.h>

using namespace std;

struct MaxMatch{
	const static int MAX_V1 = 300;
	const static int MAX_V2 = 300;
	const static int MAX_E = 100000;

	int V1,V2,l[MAX_V1],r[MAX_V2];
	int E,to[MAX_E],next[MAX_E],last[MAX_V1];
	bool visited[MAX_V1];

	void init(){
		memset(last,-1,sizeof(int)*V1);
		E = 0;
	}
	 
	void add_edge(int u, int v){
		to[E] = v, next[E] = last[u]; last[u] = E; ++E;
	}

	bool pairup(int u){
	    if (visited[u])  return false;
	    visited[u] = true;
	    
	    for(int e = last[u];e!=-1;e = next[e]){
	        int v = to[e];
	        
	        if(r[v]==-1 || pairup(r[v])){
	            l[u] = v;
	            r[v] = u;
	            return true;
	        }
	    }
	    
	    return false;
	}

	int hopcroft_karp(){
	    bool change = true;
	    memset(l,-1,sizeof(int)*V1);
	    memset(r,-1,sizeof(int)*V2);
	    
	    while(change){
	        change = false;
	        memset(visited,false,sizeof(bool)*V1);
	        
	        for(int i = 0;i<V1;++i)
	            if(l[i]==-1) change |= pairup(i);
	    }
	    
	    int ret = 0;
	    
	    for(int i = 0;i<V1;++i)
	        if(l[i]!=-1) ++ret;
	    
	    return ret;
	}
} MatchTool;

int n, m;
int a[300];
pair<int, int> f[600];

bool ok(int to) {
	MatchTool.V1 = n;
	MatchTool.V2 = n;
	MatchTool.init();
	for(int i = 0; i <= to; ++i)
		for(int j = 0; j < n; ++j)
		if (0 <= f[i].second - a[j] && f[i].second - a[j] < n)
			MatchTool.add_edge(j, f[i].second - a[j]);
	int maxMatch = MatchTool.hopcroft_karp();
	return (maxMatch == n);
}

int main() {
	scanf("%d%d", &n, &m);
	for(int i = 0; i < n; ++i) scanf("%d", a + i);
	int lenf = n + m - 1;
	for(int i = 0; i < lenf; ++i) {
		scanf("%d", &f[i].first);
		f[i].second = i;
	}
	sort(f, f + lenf);
	int l = 0, r = lenf - 2;
	int best = f[lenf - 1].first;
	while (l <= r) {
		int mid = (l + r) >> 1;
		if (!ok(mid)) l = mid + 1;
		else {
			best = min(best, f[mid].first);
			r = mid - 1;
		}
	}
	printf("%d\n", best);
	return 0;
}
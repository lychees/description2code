#include <iostream>
#include <stack>

using namespace std;

#define NA -1
#define RT 0
#define DN 1

int Path(int *mat, int size)
{
	int i = 0, j = 0;
	stack<int> lastMoveStack;
	lastMoveStack.push(NA);
	//int lastMove = NA;

	while (i != size - 1 || j != size - 1)
	{		
		if (j < size - 1 && *(mat + size * (i) + j + 1) == 1)
		{
			j++;
			//lastMove = RT;
			lastMoveStack.push(RT);
		}
		else if (i < size - 1 && *(mat + size * (i + 1) + j) == 1)
		{
			i++;
			//lastMove = DN;
			lastMoveStack.push(DN);
		}
		else if (lastMoveStack.top() == DN)
		{
			*(mat + size * i + j) = -1;
			//lastMove = NA;
			lastMoveStack.pop();
			i--;
		}
		else if (lastMoveStack.top() == RT)
		{
			//lastMove = NA;
			lastMoveStack.pop();
			*(mat + size * i + j) = -1;
			j--;
		}
		else
			break;
	}

	return (i == size - 1 && j == size - 1 && *(mat + size * i + j) == 1);
}
//#include <conio.h>
int main()
{
	/*int mat[100] = {
		1, 0, 1, 1, 0, 1, 0, 0, 1, 0,
		1, 1, 1, 1, 0, 1, 0, 0, 1, 0,
		1, 0, 1, 1, 1, 1, 1, 0, 1, 1,
		1, 0, 0, 0, 0, 1, 1, 1, 0, 0,
		0, 0, 0, 1, 1, 0, 1, 1, 1, 0,
		0, 0, 0, 1, 1, 1, 1, 0, 0, 1,
		0, 0, 1, 0, 0, 0, 1, 1, 0, 1,
		1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
		1, 0, 1, 0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 0, 1, 1, 0, 1, 1
	};
	if (Path(mat, 10))
		cout << "POSSIBLE" << endl;
	else
		cout << "NOT POSSIBLE" << endl;*/
	int *mat;
	int testCases;
	int size;

	cin >> testCases;

	for (int i = 0; i < testCases; i++)
	{
		cin >> size;
		mat = new int[size * size];
		for (int j = 0; j < size*size; j++)
		{
			cin >> mat[j];
		}
		if (Path(mat, size))
			cout << "POSSIBLE" << endl;
		else
			cout << "NOT POSSIBLE" << endl;
	}

	//getch();
	return 0;
}

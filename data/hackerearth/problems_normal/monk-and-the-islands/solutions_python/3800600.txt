from collections import defaultdict

def Adj(edges):
    adj_list = defaultdict(list)
    for start, end in edges:
        adj_list[start].append(end)
    return adj_list

def bfs(s, adj, end):
    q = []
    d = dict()
    p = dict()
    d[s] = 0
    p[s] =  None
    q.append(s)
    while q != []:

        u = q.pop(0)

        for v in adj[u]:
            if v not in d:
                d[v] = d[u] + 1
                p[v] = u
                q.append(v)
    return d[end]



for i in range(input()):
    N , M = map(int, raw_input().strip().split())
    edges = []
    for j in range(M):
        n = map(int, raw_input().strip().split())
        edges.append(n)
        edges.append(reversed(n))
    adj = Adj(edges)

    x = bfs(1,adj,N)
    print x
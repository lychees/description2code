#include <bits/stdc++.h>
#define M 1000000007
#define lli long long
using namespace std;
int val[] = {0,0,1,2,0,4,3,8,1,0,5};
lli A[72][72];
lli B[72][72];
lli res[72][72];
// fast input
template<typename T>
inline void fi(T *a)
{
 register char c=0;
 while (c<33) c = getchar_unlocked();
 *a=0;
 int tmp = 0;
 while (c>33)
 {
     if ( c == 45 ) tmp = 1;
     else *a=*a*10+c-'0';
     c=getchar_unlocked();
 }
 if ( tmp == 1 ) *a = 0-(*a);
}
int cal(int mask, int flag, int zero)
{
    return zero + flag*2 + mask*4;
}
void pre()
{
    for ( int mask = 0; mask < 16; mask++ ) {
        for ( int flag = 0; flag < 2; flag++ ) {
            for ( int zero = 0; zero < 2; zero++ ) {
                if ( flag == 0 && (mask != 0 || zero == 1) ) continue;
                if ( zero == 1 && mask != 0 ) continue;
                if ( flag == 0 ) {
                    int new_mask = mask;
                    int new_flag = flag;
                    int new_zero = zero;
                    A[cal(mask,flag,zero)][cal(new_mask,new_flag,new_zero)] += 1;
                    for ( int dig = 1; dig <= 9; dig++ ) {
                        int new_mask = mask^val[dig];
                        int new_flag = 1;
                        int new_zero = 0;
                        A[cal(mask,flag,zero)][cal(new_mask,new_flag,new_zero)] += 1;
                    }
                }
                else {
                    if ( zero == 0 ) {
                        for ( int dig = 0; dig <= 9; dig++ ) {
                            if ( dig != 0 ) {
                                int new_mask = mask^val[dig];
                                int new_flag = 1;
                                int new_zero = 0;
                                A[cal(mask,flag,zero)][cal(new_mask,new_flag,new_zero)] += 1;
                            }
                            else {
                                int new_mask = 0;
                                int new_flag = 1;
                                int new_zero = 1;
                                A[cal(mask,flag,zero)][cal(new_mask,new_flag,new_zero)] += 1;
                            }
                        }
                    }
                    else {
                        int new_mask = 0;
                        int new_flag = 1;
                        int new_zero = 1;
                        A[cal(mask,flag,zero)][cal(new_mask,new_flag,new_zero)] += 10;
                    }
                }
            }
        }
    }
    return;
}
void init()
{
    for ( int i = 0; i < 64; i++ ) {
        for ( int j = 0; j < 64; j++ ) {
            if ( i != j ) res[i][j] = 0;
            else res[i][j] = 1;
            B[i][j] = A[i][j];
        }
    }
    return;
}
void mul(lli A1[][72], lli A2[][72])
{
    lli C[72][72];
    for ( int i = 0; i < 64; i++ ) {
        for ( int j = 0; j < 64; j++ ) {
            C[i][j] = 0;
            for ( int k = 0; k < 64; k++ ) {
                C[i][j] = (C[i][j] + (A1[i][k]*A2[k][j])%M)%M;
            }
        }
    }
    for ( int i = 0; i < 64; i++ ) {
        for ( int j = 0; j < 64; j++ ) A1[i][j] = C[i][j];
    }
    return;
}
void fast_pow(lli x)
{
    while ( x > 0 ) {
        if ( x&1 ) mul(res,B);
        mul(B,B);
        x >>= 1;
    }
    return;
}
int main()
{
    pre();
    int t;
    lli n,ans;
    fi(&t);
    assert(t<=10);
    while ( t-- ) {
        fi(&n);
        assert(n<=1000000000000000000);
        init();
        fast_pow(n);
        ans = (res[0][2] + res[0][3] + 1);
        if ( ans >= M ) ans -= M;
        printf("%lld\n", ans);
    }
    return 0;
}
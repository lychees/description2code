#include <iostream>
#include<cstdio>
#include<fstream>
#define inf 1009

using namespace std;

int n, d, a[inf][inf], p1[inf], p2[inf], t1, t2;
int arr[inf];
int size[inf];
int find(int arr[], int i)
{
	while(arr[i]!=i)
	{
		arr[i] = arr[arr[i]];
		i = arr[i];
	}
	return i;
}
void Union(int arr[], int a, int b)
{
	int _a = find(arr, a);
	int _b = find(arr,b);
	arr[a] = _b;
}
void weighted_union(int Arr[ ],int size[ ],int A,int B)
{
	int root_A = find(Arr, A);
	int root_B = find(Arr, B);
	if(root_A != root_B)
	{
//		if(size[root_A] < size[root_B ])
//			{
//				Arr[ root_A ] = Arr[root_B];
//				size[root_B] += size[root_A];
//			}
//			else
			{
				Arr[ root_B ] = Arr[root_A];
				size[root_A] += size[root_B];
			}
	}

}
int main()
{
#ifndef ONLINE_JUDGE
    freopen("D:/Algorithm/input.txt","rt",stdin);
    freopen("D:/Algorithm/output.txt","wt",stdout);
#endif

    cin>>n>>d;
    for(int i=1; i<=n; i++)
    {
    	arr[i]=i;
    	a[i][1] = i;
    	a[i][2] = 0;
    	size[i] = 1;
	}
	for(int i=0; i<d; i++)
	{
		cin>>t1>>t2;
		int j=1;
		while(a[t1][j]!=0)
		{
			j++;
		}
		a[t1][j] = t2;
		p1[i] = t1;
		p2[i] = t2;
//		weighted_union(arr, size, a, b);
	}

	int min = inf;
	for(int i=1; i<=n; i++)
	{
		int j=1;
	    for(; j<=n; j++)
	    {
	    	arr[j]=j;
	    	size[j] = 1;
		}
	    j=1;
	    while(a[i][j] != 0)
	    {
	    	weighted_union(arr, size, i, a[i][j]);
	    	j++;
	    }
	    for(j=0; j<d; j++)
	    {
	    	int root_a = find(arr, p1[j]);
	    	int root_b = find(arr, p2[j]);
	    	if(root_a == i)
	    	{
	    		weighted_union(arr, size, p1[j], p2[j]);
	    	}
//	    	else
//	    	{
//	    		weighted_union(arr, size, p2[j], p1[j]);
//	    	}
	    }
//	    for(j=1; j<=n; j++)
	    {
	    	min = (min>size[i])?size[i]:min;
	    }
	}
	cout<<min;
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
// #define infinity (1000000007)
#define ll long long int
#define ull unsigned long long
#define pii pair<ll,ll>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
#define mp make_pair
#define s(n) scanf("%d",&n)
#define s2(n,m) scanf("%d%d",&n,&m)
#define s3(n,m,l) scanf("%d%d%d",&n,&m,&l)
#define rep(i,n) for(int i=0;i<n;++i)
ll pwr(ll a,ll b,ll mod) {a%=mod;if(a<0)a+=mod;ll ans=1; while(b) {if(b&1) ans=(ans*a)%mod; a=(a*a)%mod; b/=2; } return ans; }
ll pwr(ll a,ll b) {ll ans=1; while(b) {if(b&1) ans*=a; a*=a; b/=2; } return ans; }
ll gcd(ll a,ll b) {while(b) {ll temp=a; a=b; b=temp%b; } return a; }
ll lcm(ll a,ll b) {return (a/gcd(a,b))*b; }
ll modularInverse(ll a,ll m) {/*reminder: make sure m is prime*/ assert(false); return pwr(a,m-2,m); }
const int mod=1000000007;
#define graph vector<vector<pii> >
ull findTrailingZeros(ull  n)
{
    ull count = 0;
 
    // Keep dividing n by powers of 5 and update count
    for (ull i=5; n/i>=1; i *= 5)
          count += n/i;
 
    return count;
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		unsigned long long int n,i,j,ans=0;
		cin>>n;
        if(n==1||n==0||n==2) ans=1;
		else ans = (unsigned long long int)floor( ( log(2*acos(-1)*n)/2+n*(log(n)-1) ) / log(10) )+1;
        ull five = findTrailingZeros(n);
        ans = ans-five;
        cout<<ans<<endl;
	}
	return 0;
}
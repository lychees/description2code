#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <algorithm>
#include <cstdio>

using namespace std;

int solve(int N, int K){
	K--;
	int ans = 0;
	int pos = 0;
	while(N>0){
		if(K%2==0){
			ans = pos + K/2 + 1;
			break;
		}
		K = K/2;
		
		pos += N - N/2;
		
		if(N % 2 == 1){
			N = N/2;
			K += N-1;
			K %= N;
		}else{
			N = N/2;
		}
	}
	return ans;
}

long long solve_(int N, int K){
	int cnt = 1;
	while( K!= 1){
		if(K%2==0){
			cnt += K/2;
			K = N-cnt+1;
		}else{
			cnt += K/2;
			break;
		}
	}
	return cnt;
}

int solve_inv(int N, int K){
	int depth = N-K+1;
	int val = 1;
	while(depth != N){
		if(val==depth){
			val = 0;
		}
		val += 2;
		depth++;
	}
	return val;
}

long long solve_inv_fast(long long N, long long K){
	long long ret = -1;
	long long a = -2*N + 2*K -1;
	while(ret==-1){
		long long xx = -a;
		if(xx < N){
			a = -2*xx;
		}else{
			ret = 2*N + a;
		}
	}
	return ret;
}

void test(int x){
	vector<int> v(x+1, 0);
	for(int i=1; i<=x; i++){
		v[i] = solve(x,i);
	}
	for(int i=1; i<=x; i++){
		cout << v[i] << " ";
	}
	cout << endl;
}

void test__(int x){
	vector<int> v(x+1, 0);
	for(int i=1; i<=x; i++){
		v[solve_(x,i)] = i;
	}
	for(int i=1; i<=x; i++){
		cout << v[i] << " ";
	}
	cout << endl;

	for(int i=1; i<=x; i++){
		v[i] = solve_inv_fast(x,i);
	}
	for(int i=1; i<=x; i++){
		cout << v[i] << " ";
	}
	cout << endl;
}

int main(){
	
	int T;
	cin >> T;
	for(int t=0; t<T; t++){
		int N, K;
		cin >> N >> K;
		cout << solve_inv_fast(N,K) << endl;
	}
	
	/*
	int x;
	cin >> x;
	test(x);
	test__(x);
	*/
	
	return 0;
}
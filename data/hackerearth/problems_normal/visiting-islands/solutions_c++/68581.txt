#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<queue>
#include<deque>
#include<map>
#include<cstdlib>
#include<cmath>
#include<utility>
#include<cstring>
#include<stack>
using namespace std;

#define ff first
#define ss second
#define ll long long
#define pb push_back
#define mp make_pair
#define PI pair<int,int>
#define READ() freopen("input.txt","r",stdin)
#define WRITE() freopen("output.txt","w",stdout)
#define FOR(i,x,y) for(int i=x;i<y;i++)
#define MODM 1000000007
#define lli long long int

lli gcd(lli a,lli b){if(a==0)return(b);else return(gcd(b%a,a));}
lli power(int a,int b,int mod)
{
    lli ans=1;
    while(ans&&b)
    {
        if(b&1)
            ans=(ans*a)%mod;
        a=(a*a)%mod;
        b/=2;
    }
    return ans;
}


bool cmp(int a,int b)
{
    return a<b;
}

int cnt[1000000],stack_number[1000000];
bool visited[1000000],current_on_stack[1000000];

int main()
{
    int t,to[1000000],n;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&n);
        FOR(i,0,n)
        {
            scanf("%d",&to[i]);
            visited[i]=false;
            current_on_stack[i]=false;
        }

        stack<int> s;

        FOR(i,0,n)
            if(visited[i]==false)
            {
                s.push(i);
                stack_number[i]=s.size();
                current_on_stack[i]=true;
                while(!s.empty())
                {
                    int current=s.top();
                    if(to[current]==current)
                    {
                        cnt[current]=1;
                        visited[current]=true;
                        current_on_stack[current]=false;
                        s.pop();
                    }
                    else if(visited[to[current]])
                    {
                        cnt[current]=1+cnt[to[current]];
                        visited[current]=true;
                        current_on_stack[current]=false;
                        s.pop();
                    }
                    else if(current_on_stack[to[current]]==false)
                    {
                        s.push(to[current]);
                        stack_number[to[current]]=s.size();
                        current_on_stack[to[current]]=true;
                    }
                    else
                    {
                        int answer=s.size()-stack_number[to[current]];
                        while(s.top()!=to[current])
                        {
                            cnt[s.top()]=answer;
                            visited[s.top()]=true;
                            current_on_stack[s.top()]=false;
                            s.pop();
                        }
                    }

                }

            }

        int maxim=0;
        FOR(i,1,n)
            if(cnt[i]>cnt[maxim])
                maxim=i;

        printf("%d\n",maxim);
    }
    return 0;
}

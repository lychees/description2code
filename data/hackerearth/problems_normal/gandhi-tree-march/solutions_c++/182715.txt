#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

string extractTree(string s, int index) {

  if (s[index] == '.') return ".";

  int i;
  int count = 0;

  for (i = index; i < s.length(); ++i) {
    if (s[i] == '(') {
       count++; 
    } 
    else if (s[i] == ')') {
      count--;
      if (count == 0) {
        break;  
      }
    }
  }

  return s.substr(index, i - index + 1);
}

string gandhiTree(string s, int currentColumn, int givenColumn) {
  
  if (s == "." || s == "") return ""; 

  string left = extractTree(s, 2);
  string right = extractTree(s, 2 + left.length());

  string l = gandhiTree(left, currentColumn - 1, givenColumn);
  string r = gandhiTree(right, currentColumn + 1, givenColumn);

  if (currentColumn == givenColumn) {
    return l + r + s[0];
  }

  return l + r;
}

struct TestCase { 
  string tree;
  int k;
};

int main() {

  int T, n, i;

  cin >> T;


  vector<TestCase> cases(T);

  for (i = 0; i < T; ++i) {
    
    cin >> cases[i].k;

    cin >> cases[i].tree;
  }

  for (i = 0; i < T; ++i) {

    string ret = gandhiTree(cases[i].tree, 0, cases[i].k);

    if (ret == "") {
      cout << "Common Gandhijee!" << endl; 
    }
    else {
      std::sort(ret.begin(), ret.end()); 
      cout << ret << endl; 
    }
  }

  return 0;  
}

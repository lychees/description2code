// Author : ?? Ujjawal Dixit (HELLGEEK) IPG_2013117 ABV-IIITM
// Task : 

#include <bits/stdc++.h>
#define MOD             1000000007
#define MAX             (int)1e9
#define MIN             (int)-1e9
#define PI              (acos(-1.0))
#define linf            (1LL<<62)
#define inf             (0x7f7f7f7f)

using namespace std;
typedef double ld;
typedef long long ll;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii; 

#define tracearr(a,n)            for(int i=0;i<n;i++)  cout<<a[i]<<" ";
#define tracemat(a,n,m)          for(int i=0;i<n;i++) { for(int j=0;j<m;j++)  cout<<a[i]<<" "; cout<<endl; } 
#define tracepair(a,n)           for(int i=0;i<n;i++)  cout<<a[i].first<<" "<<a[i].second<<endl;
#define mp(v,a,b)                v.push_back(make_pair(a,b))
#define fi(filename)             freopen(filename,"r",stdin)
#define fo(filename)             freopen(filename,"w",stdout)
#define FOR(i,n,m)               for(int i=0;i<n;i+=m)
#define For(i,n,m)               for(int i=1;i<=n;i+=m)
#define repl(i,a,b,m)            for(int i=a;i<b;i+=m)
#define rep(i,a,b,m)             for(int i=a;i<=b;i+=m)
#define countbits(value)         __builtin_popcount(value)
#define countbitsll(value)       __builtin_popcountll(value)
#define trailing0bits(value)     __builtin_parity(value)
#define leading0bits(value)      __builtin_clz(value)
#define max(a,b)                 (a>=b?a:b)
#define min(a,b)                 (a<b?a:b))
#define s(a)                     scanf("%d",&a)
#define sll(a)                   scanf("%lld",&a)
#define p(a)                     printf("%d",a)
#define pll(a)                   printf("%lld",a)
#define pln()                    printf("\n")
#define m(x,n,value)             fill(x,x+n,value)
#define getstr(in)               getline(cin,in)
#define getc()                   getchar()
#define uj()                     int t; scanf("%d",&t); while(t--)
template<typename T> T gcd(T a, T b) {if(!b) return a;return gcd(b, a % b);}
template<typename T> T lcm(T a, T b) {return a * b / gcd(a, b);}
 vector<int> v[100005];
    int vis[100005];
    ll conn=0;
    void dfs(int start){
        vis[start]=1;
        FOR(i,v[start].size(),1){
            if(!vis[v[start][i]])
              dfs(v[start][i]);
        }
        return ;
    }
    int main()
    {
      //ios_base::sync_with_stdio(false);
        
          int n,m;
          s(n); s(m);
          
          FOR(i,n+1,1)  v[i].clear();
          
          FOR(i,m,1){
              int a,b;
              s(a); s(b);
              v[a].push_back(b);
              v[b].push_back(a);
          }
          ll ans=1,num=1;
          int q;
          cin>>q;
          
          FOR(i,q,1){
             m(vis,100002,0);
              int s,e;
              cin>>s>>e;
              int flag=0;
              FOR(i,v[s].size(),1){
                if(v[s][i]==e)
                      flag=1;
              }
              if(flag)  cout<<"Direct Connection"<<endl;
              
                 else {
                    dfs(s);
                    if(vis[e]==1)
                      cout<<"Indirect Connection"<<endl;
                    else 
                    cout<<"No Connection"<<endl;
                 }
          }
    	
     return 0;
    }
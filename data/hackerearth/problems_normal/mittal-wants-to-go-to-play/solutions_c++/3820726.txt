#include<iostream>
#include<vector>
#include<utility>
#include<set>
#include<climits>
#define INF INT_MAX
using namespace std;
typedef pair<int,int> ii;
typedef vector<ii> vii;
vector<vii> Graph;
vector<int> dist;
void  dijkstra() {
  dist[1] = 0;
  set<ii> Q;
  Q.insert({0, 1});
  while (!Q.empty()) {
    auto top = Q.begin();
    int u = top->second;
    Q.erase(top);
    for (int i = 0; i < Graph[u].size(); i++) {
        int v = Graph[u][i].first, w = Graph[u][i].second;
        if (dist[v] > dist[u] + w) {
            if(Q.find({dist[v], v}) != Q.end())
                Q.erase(Q.find({dist[v], v}));
            dist[v]=dist[u] + w;
            Q.insert({dist[v],v});
        }
    }
  }

}

int main() {
  int T;
  cin >> T;
  while(T--) {
    int N, M;
    cin >> N >> M;
    Graph.assign(N+1, vii());

    while(M--) {
        int x, y, c;
        cin >> x >> y >> c;
        Graph[x].push_back(make_pair(y,c));
        Graph[y].push_back(make_pair(x,c));

    }
    dist.assign(N+1, INF);
    dijkstra();
    int Q;
    cin >> Q;
    while (Q--) {
        int A, K;
        cin >> A >> K;
        int t = dist[A];
        int res = 0;
        if ( 2*t <= K)
            res = K - 2*t;
        cout << res <<endl;

    }

  }
}


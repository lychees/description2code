//..........@@   Avneet Singh   @@...........//
#include<bits/stdc++.h>
using namespace std;
#define ll long long 
#define MAX 100
#define pb push_back
#define gc getchar
#define mp make_pair

//.............Functions......................///
bool isDigit(char xx) {return ('0' <= xx && xx <= '9');}
inline int string_to_int(string s){stringstream ss ;ss<<s; int x; ss >> x;return x;}
inline string int_to_string(int x){stringstream ss ;ss<<x; string s ; ss >> s;return s;}

bool issubsequence(const char *A, const char *B)
{
  while(*A)
  {
	if(*B==*A)
	B++;
	A++;
  }
  return !*B;
}
ll modulo(ll a,ll b,ll c)
{
	long long x=1,y=a;
	while(b > 0)
	{
	  if(b%2 == 1){
      x=(x*y)%c;
	}
	y = (y*y)%c; 
	b /= 2;
	}
  return x%c;
}
ll mulmod(ll a,ll b)
{ 
	long long x = 0,y=a;
	while(b > 0)
	{
		if(b%2 == 1){
		x = (x+y);
	}
	y = (y*2);
	b /= 2;
	}
	return x;
}
double comb[MAX][MAX];
void ncr() // function to pre process ncr
{
	for(int i=0;i<MAX;i++)
	{
		comb[i][0]=comb[i][i]=1.0;
		for(int j=0;j<i;j++)
		{
			comb[i][j]= comb[i-1][j-1] + comb[i-1][j];
		}
	}
}
//take fast input with sign
int read() {
  char c = gc();
  int sign = 1;
  while((c<'0' || c>'9') && c!='-') c = gc();
  if(c=='-') {
    sign = -1;
    c = gc();
  }
  int ret = 0;
  while(c>='0' && c<='9' ) {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  return ret*sign;
} 
struct node{
	ll start;
	ll last;
};
vector<node>tree;
vector<node>ranges;
inline bool comp(node a, node b)
{
	return a.start<b.start;
}
void merge_ranges(vector<node> &range)
{
	if(range.size()<=0)
	 return;
	stack<node> merge;
	merge.push(range[0]);
	for(int i=1;i<range.size();i++)
	{
		node top = merge.top();
		if(top.last < range[i].start)
		{
			merge.push(range[i]);
		}
		else if(top.last < range[i].last)
		{
			top.last = range[i].last;
			merge.pop();
			merge.push(top);
		}
	}
	while(!merge.empty())
	{
		node temp = merge.top(); 
		ranges.pb((node){temp.start,temp.last});
		merge.pop();
	}
	return;
}
int main()
{
  int n;
  ll s, e;
  scanf("%d%lld%lld",&n,&s,&e);
  for(int i=0;i<n;i++)
  {
  	ll x,p;
  	scanf("%lld%lld",&x,&p);
  	if(!(x-p>=e))
  	 tree.pb((node){x-p,x+p});
  }
  sort(tree.begin(),tree.end(),comp); 
  merge_ranges(tree);
  sort(ranges.begin(),ranges.end(),comp); 
  ll ans=0LL;
  ll last=0;
  for(int i=0;i<ranges.size();i++)
  {
  	if(ranges[i].last<s || ranges[i].start>e)
  	 continue;
  	else if(ranges[i].last>s && ranges[i].start<s)
  	{
  		last = ranges[i].last;
  	}
  	else if(ranges[i].start>s && ranges[i].last<e)
  	{
  	  last= max(last,s);
      ans += ranges[i].start-last;
      last = ranges[i].last;
	  //ranges[i].start-ranges[i-1].last;
      //cout<<ranges[i].start-ranges[i-1].last<<endl;
    }
    else if(ranges[i].start<e && ranges[i].last>e)
    {
    	last= max(last,s);
    	ans += ranges[i].start-last;
    	last = ranges[i].last;	
    }
    
  }
  if(last<=e)
  {
  	last = max(last,s);
  	ans += e-last; 
  }
  printf("%lld\n",ans);
}

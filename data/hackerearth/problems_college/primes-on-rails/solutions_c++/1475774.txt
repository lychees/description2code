#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion

ll _sieve_size; // ll is defined as: typedef long long ll;
bitset<20000010> bs; // 10^7 + small extra bits should be enough for most prime-related problems
vi primes; // compact list of primes in form of vector<int>
void sieve(ll upperbound) { // create list of primes in [0 .. upperbound]
_sieve_size = upperbound + 1; // add 1 to include upperbound
bs.reset(); bs.flip(); // set all numbers to 1
bs.set(0, false); bs.set(1, false); // except index 0 and 1
for (ll i = 2; i <= _sieve_size; i++) if (bs.test((size_t)i)) {
// cross out multiples of i starting from i * i!
for (ll j = i * i; j <= _sieve_size; j += i) bs.set((size_t)j, false);
primes.push_back((int)i); // also add this vector containing list of primes
}
} // call this method in main method
bool isPrime(ll N) { // a good enough deterministic prime tester
if (N < _sieve_size) return bs.test(N); // O(1) for small primes
REP (i, 0, primes.size() - 1)
{
    if (N % primes[i] == 0)
        return false;
    if(primes[i] > sqrt(N))
        return true;
}
return true; // it takes longer time if N is a large prime!
} // Note: only work for N <= (last prime in vi "primes")^2
// in int main()

ii a[100009];

priority_queue <ii,vector <ii> ,greater <ii> > pq;

bool cmp(ii lhs,ii rhs)
{
    return lhs.second < rhs.second;
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    sieve(100000);
    int n;s(n);
    REP(i,0,n - 1)
    {
        int hr,mins,sec;
        s(hr);s(mins);s(sec);
        a[i].second = hr*3600 + mins * 60 + sec;
        if(isPrime(a[i].second))
            a[i].first = a[i].second + 5 * 60;
        else if(a[i].second % 2 == 1 )
            a[i].first = a[i].second + 3 * 60;
        else
            a[i].first = a[i].second + 2 * 60;
    }
    sort(a,a+n,cmp);
    int counter = 0;
    int maxi = -1;
    REP(i,0,n - 1)
    {
        if(pq.empty())
        {
            pq.push(a[i]);
            counter++;
        }
        else if(pq.top().first <= a[i].second )
        {
            pq.pop();
            pq.push(a[i]);
        }
        else
        {
            pq.push(a[i]);
            counter++;
        }
        maxi = max(maxi,counter);
    }
    printf("%d\n",maxi);
    return 0;
}

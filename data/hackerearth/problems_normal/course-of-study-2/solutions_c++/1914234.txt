#include <bits/stdc++.h>
#define ll long long int
#define mod 1000000007
using namespace std;
//#define f(i,0,n) for(i=0;i<n;i++)
ll modular_pow(ll base, ll exponent, int modulus)
{
    ll result = 1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = (result * base) % modulus;
        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }
    return result;
}
ll fact[100003];
ll inverse[100003];
ll inverse_modulo(ll value, ll deg, ll m) {
        if (!deg)
        return 1 % m;
        if (deg & 1)
        return inverse_modulo(value, deg - 1, mod) * value % m;
        ll res = inverse_modulo(value ,deg >> 1, m);
        return (res*res) % m;
}

int main() {
   // ios::sync_with_stdio(false);

	fact[0] = 1;
	ll i, n ,j , sum , m , cp , co ;

	for(i=1;i<=100002;i++){
	    fact[i] = (fact[i-1]*i)%mod;
	}

	for(i=0;i<=100002;i++){
	    inverse[i] = (inverse_modulo(fact[i],mod-2,mod))%mod;
	}
	 sum = 0;
	cin>>n;

	vector<ll> v1,v2;
	for(i=1;i<=n;i++){
        vector<ll> v3;
	   cin>>m;
	    sum += m;
	    v1.push_back(m);

	   for(j=0;j<m;j++){

	        cin>>cp;
	        v3.push_back(cp);
	    }

	    sort(v3.begin(),v3.end());
	    ll co = 1;
        for(j=1;j<v3.size();j++){
	        if(v3[j]==v3[j-1]){
	            co++;
	        }
	        else{
	            v2.push_back(co);
	            co = 1;
	            //printf("zoom1");
	        }
	    }
	    v2.push_back(co);
	}
	ll ans = fact[sum];
	for(i=0;i<v1.size();i++){
	    ans = (ans*inverse[v1[i]])%mod;
	}

	//printf("zoom2");
	for(i=0;i<v2.size();i++){
	    ans = (ans*fact[v2[i]])%mod;
	}
	printf("%lld\n",ans);
	return 0;
}

#include <iostream>

using namespace std;

int
main ()
{
  int tc = 0, n = 1000005;
  int *arr = new int[n];
  bool *visited = new bool[n];
  int *dp = new int[n];
  int *temp = new int[n];
  int numtemp = 0;
  int node;
  cin >> tc;
  while (tc--)
    {
      cin >> n;
      for (int i = 0; i < n; i++)
	cin >> arr[i];
      for (int i = 0; i < n; i++)
	visited[i] = false;
      for (int i = 0; i < n; i++)
	dp[i] = -1;
      numtemp = 0;
      for (int i = 0; i < n; i++)
	{
	  if (dp[i] != -1)
	    continue;
	  visited[i] = true;
	  node = arr[i];
	  numtemp = 0;
	  while (visited[node] == false && dp[node] == -1)	//we exit with node having a node whose info is known
	    {
	      //cout << "visited " << node << endl;
	      temp[numtemp] = node;
	      numtemp++;
	      visited[node] = true;
	      node = arr[node];
	    }
	  //cout << "numtemp " << numtemp << endl;
	  if (dp[node] != -1)
	    {
	      dp[i] = dp[node] + numtemp + 1;
	      int numm = dp[i];
	      for (int ll = 0; ll < numtemp; ll++)
		{
		  numm--;
		  dp[temp[ll]] = numm;
		}
	    }
	  if (dp[node] == -1 && visited[node] == true)	//so this is a cycle found now
	    {
	      dp[i] = numtemp + 1;
	      int numm = dp[i];
	      int ll = 0;
	      if (i != node)
		{
		  for (ll = 0; (ll < numtemp && (temp[ll] != node)); ll++)
		    {
		      numm--;
		      dp[temp[ll]] = numm;
		    }
		  numm--;
		}
	      for (; ll < numtemp; ll++)
		{
		  dp[temp[ll]] = numm;
		}
	    }
	}
      int maxdp = dp[0];
      int maxi = 0;
      for (int i = 1; i < n; i++)
	{
	  if (dp[i] > maxdp)
	    {
	      maxdp = dp[i];
	      maxi = i;
	    }
	}
      cout << maxi << endl;
    }
}

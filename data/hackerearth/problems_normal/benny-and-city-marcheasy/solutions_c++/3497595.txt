#include <bits/stdc++.h>

// clang-format off
using namespace std;
typedef int i32;
#define int long long
#define all(a) (a).begin(), (a).end()
#define ms(a,v) memset(a, v, sizeof(a))
#define mp make_pair
#define pb push_back
#define prev franga_de_sunga
#define next tio_de_sueter
#define index bora_baea
#define left ahsiha19as
#define VAR(i, x) __typeof(x) i=(x)
#define R32 ({i32 x; scanf("%d", &x); x;})
#define RL ({long long x; scanf("%lld", &x); x;})
#define RC ({char x; scanf(" %c", &x); x;})
#define foreach(i, x) for(VAR(i, (x).begin()); i != (x).end(); ++(i))
#define RI RL
typedef pair<int, int> ii;
typedef long long ll;
// clang-format on

const int N = 20;
int g[N][N];
int row[N];
int col[N];
int dp[(1LL << N)][N];

i32 main() {
  int n = RI;
  int m = RI;
  int C = RI;

  int tot = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      g[i][j] = RI;
      row[i] += g[i][j];
    }
    tot += row[i];
  }

  for (int j = 0; j < m; j++) {
    for (int i = 0; i < n; i++) {
      col[j] += g[i][j];
    }
  }

  int ans = -1e18;
  for (int b = 0; b < (1LL << n); b++) {
    // if (b == (1LL << n) - 1) {
    //   ans = max(ans, -n * m * C);
    //   break;
    // }

    if (b) {
      int least = __builtin_ctz(b);
      int bb = b ^ (1LL << least);
      // cout << "requiring " << bitset<3>(bb) << endl;
      for (int j = 0; j < m; j++) {
        dp[b][j] = dp[bb][j] + g[least][j];
        // cout << dp[b][j] << " ";
      }
      // cout << endl;
    }

    // add rows
    // res is how much im subtracting from city beauty
    int res = 0;
    for (int i = 0; i < n; i++)
      if ((b >> i) & 1LL)
        res += row[i] + C;

    vector<int> vs(m);
    for (int j = 0; j < m; j++) {
      vs[j] = col[j] - dp[b][j];
    }

    sort(all(vs));

    // cout << bitset<3>(b) << "  " << tot << " " << res << endl;
    ans = max(ans, tot - res);
    for (int j = 0; j < m; j++) {
      res += vs[j] + C;
      // cout << "\t" << tot << " " << res << endl;
      ans = max(ans, tot - res);
    }
  }

  printf("%lld\n", ans);
}

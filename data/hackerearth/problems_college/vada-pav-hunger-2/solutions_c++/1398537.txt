#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

vector<vector<int> > g;
vector<bool> isvisited;

int get_depth(int u)
{
    isvisited[u] = 1;
    int depth = 0;
    for (int i = 0; i < g[u].size(); i++) {
        int v = g[u][i];
        if (!isvisited[v]) {
            depth = max(depth, 1+get_depth(v));
        }
    }
    return depth;
}

int main()
{
    int n;
    cin >> n;
    g.resize(n);
    isvisited.resize(n);
    for (int i = 0; i < n-1; i++) {
        int a, b;
        cin >> a >> b;
        a--, b--;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    int depth = get_depth(0);
    cout << 2*(n-1) - depth << endl;
}

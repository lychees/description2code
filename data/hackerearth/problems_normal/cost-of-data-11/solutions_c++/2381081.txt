// 2015-08-25
#include <bits/stdc++.h>
//#include <unordered_map>
#include <array>
#include <forward_list>
#include <unordered_set>
using namespace std;

#ifndef LOCAL
//#define LOCAL
#endif

#ifdef LOCAL
#include <vld.h>
#pragma comment(linker, "/STACK:256000000")
#endif

#define ff first
#define ss second
#define sz(x) (int)((x).size())
#define szo(x) sizeof(x)
#define pub push_back
#define pob pop_back
#define mem2d(arr, value) (fill(&arr[0][0], &arr[0][0] + szo(arr) / szo(decltype(value)), value));
#define mem(arr, value) memset(arr, value, szo(arr));
#define fo(i, j, k) for (int i = j; i <= (int)(k); ++i) // [j..k]
#define fd(i, j, k) for (int i = j; i >= (int)(k); --i) // [j..k]
#define gg cout << "OK\n"

#define SET_BIT(mask, index) (mask |= (1LL << index))
#define TEST_BIT(mask, index) (mask & (1LL << index))
#define CLEAR_BIT(mask, index) (mask &= ~(1LL << index))
#define TOGGLE_BIT(mask, index) (mask ^= (1LL << index))
const int INF = 1000000000;
const int NO_VALUE = -1;
using pii = pair<int, int>;
using pip = pair<int, pii>;
using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;

template<class T> T scan() { T t; cin >> t; return t; }
#define sc(T) scan<decltype(T)>()
#define sci scan<int>()
#define scll scan<ll>()
#define scs scan<string>()

int nodeCnt = 1;

struct Trie {
	Trie* next[26];

	Trie() {
		fo(i, 0, 25) {
			next[i] = nullptr;
		}
	}
};

void add(Trie*& node, string word) {
	Trie* tmpNode = node;
	fo(i, 0, sz(word) - 1) {
		int edge = word[i] - 'a';
		if (tmpNode->next[edge] == nullptr) {
			nodeCnt++;
			tmpNode->next[edge] = new Trie;
		}
		tmpNode = tmpNode->next[edge];
	}
}

void freeMemory(Trie* node) {
	if (node == nullptr) {
		return;
	}
	fo(i, 0, 25) {
		if (node->next[i] != nullptr) {
			freeMemory(node->next[i]);
			delete node->next[i];
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	// freopen("output.txt", "w+", stdout);
#endif

	Trie* root = new Trie;
	int n = sci;
	fo(i, 0, n - 1) {
		string w = scs;
		add(root, w);
	}
	cout << nodeCnt << "\n";
	freeMemory(root);
	delete root;

	return 0;
}

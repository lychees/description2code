#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <vector>
using namespace std;

typedef long long ll;

struct bit {
	vector<ll> v;
	bit(int n) : v(n + 1) {}
	ll sum(int i) {
		ll res = 0;
		for (; i > 0; i -= i & -i) res += v[i];
		return res;
	}
	void add(int i, ll x) {
		for (i++; i < v.size(); i += i & -i) v[i] += x;
	}
	int lower_bound(ll x) {
		if (x <= 0) return 0;
		int res = 0;
		for (int i = 1 << 24; i > 0; i >>= 1)
			if (res + i < v.size() && v[res + i] < x) {
				res += i; x -= v[res];
			}
		return res + 1;
	}
};

int calc(int n) {
	if (n == 0) return 0;
	vector<bool> a(10);
	int res = -1;
	while (n > 0) {
		if (!a[n % 10]) {
			a[n % 10] = true;
			res++;
		}
		n /= 10;
	}
	return res;
}

int main() {
	int N; cin >> N;
	vector<ll> A(N);
	for (int i = 0; i < N; i++)
		scanf("%d", &A[i]);
	vector<bit> b(10, bit(N));
	for (int j = 0; j < N; j++) {
		int i = calc(A[j]);
		b[i].add(j, 1);
	}
	int Q; cin >> Q;
	for (; Q > 0; Q--) {
		char s[4];
		int x, y; scanf("%s%d%d", s, &x, &y);
		if (s[2] == 'D') {
			int i = calc(A[x - 1]);
			b[i].add(x - 1, -1);
			A[x - 1] = (A[x - 1] + y) % 1000000007;
			i = calc(A[x - 1]);
			b[i].add(x - 1, 1);
		}
		else if (s[2] == 'L') {
			int i = calc(A[x - 1]);
			b[i].add(x - 1, -1);
			A[x - 1] = (A[x - 1] * y) % 1000000007;
			i = calc(A[x - 1]);
			b[i].add(x - 1, 1);
		}
		else if (s[2] == 'P') {
			int i = calc(A[x - 1]);
			b[i].add(x - 1, -1);
			A[x - 1] = y % 1000000007;
			i = calc(A[x - 1]);
			b[i].add(x - 1, 1);
		}
		else if (s[2] == 'X') {
			for (int i = 9; i >= 0; i--)
				if (b[i].sum(y) - b[i].sum(x - 1) > 0) {
					cout << i + 1 << ' ' << b[i].sum(y) - b[i].sum(x - 1) << endl;
					break;
				}
		}
		else if (s[2] == 'N') {
			for (int i = 0; i <= 9; i++)
				if (b[i].sum(y) - b[i].sum(x - 1) > 0) {
					cout << i + 1 << ' ' << b[i].sum(y) - b[i].sum(x - 1) << endl;
					break;
				}
		}
	}
}
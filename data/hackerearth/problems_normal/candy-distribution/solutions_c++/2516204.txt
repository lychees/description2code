#include <bits/stdc++.h>
using namespace std;
const long long P=1e9+7;


int DP[60000001];


long long poww(long long a,long long b)
{
	if(b==0)
		return 1;
	long long ans=poww(a,b/2)%P;
	if(b%2==0)
		return (ans*ans)%P;
	return (((ans*ans)%P)*a)%P;
}

/*long long poww(long long a,long long b)
{
	if(b==0)
		return 1;
	long long ans=1;
	while(b>0)
	{
		if(b*2)
		{
			ans=(ans*a)%P;
			b--;
		}
		else
		{
			a=(a*a)%P;
			b=b/2;
		}
	}
	return ans%P;
}*/



/*long long sol4(long long n,long long cnt)
{
	if(n<=4)
		return 1;
	if(n<=10000000 && MP.find(n)!=MP.end())
		return poww(MP[n],cnt)%P;
	long long ans=0;
	long long t=1;
	long long n1=n-1;
	while(t*t<=n1)
	{
		if(n1%t==0)
		{
			ans=(ans+sol4(t,n1/t)%P)%P;
			if(t>1 && t*t!=n1)
				ans=(ans+sol4(n1/t,t)%P)%P;
		}
		t++;
	}
	if(n<=10000000)
		MP[n]=ans;
	ans=poww(ans,cnt)%P;
	return ans;
}*/

long long sol3(long long n,long long cnt)
{
	if(n<=4)
		return 1;
	if(n<=60000000 && DP[n]!=0)
		return poww(DP[n],cnt)%P;
	long long ans=0;
	long long t=1;
	long long n1=n-1;
	while(t*t<=n1)
	{
		if(n1%t==0)
		{
			ans=(ans+sol3(t,n1/t)%P)%P;
			if(t>1 && t*t!=n1)
				ans=(ans+sol3(n1/t,t)%P)%P;
		}
		t++;
	}
	if(n<=60000000)
		DP[n]=ans%P;
	ans=poww(ans,cnt)%P;
	return ans;
}


int main()
{
	//memset(DP,-1,sizeof(DP));
	//precompute();
    long long n;
    scanf("%lld",&n);
    printf("%lld",sol3(n,1));
    return 0;
}

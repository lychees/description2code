#include <bits/stdc++.h>
#include <algorithm>
using namespace std;
#define f_in(st) freopen(st,"r",stdin);
#define f_out(st) freopen(st,"w",stdout);
// A job has start time, finish time and profit.
struct Job
{
    long long  start, finish, profit;
};
 
// A utility function that is used for sorting events
// according to finish time
bool myfunction(Job s1, Job s2)
{
    return (s1.finish < s2.finish);
}
 
// A Binary Search based function to find the latest job
// (before current job) that doesn't conflict with current
// job.  "index" is index of the current job.  This function
// returns -1 if all jobs before index conflict with it.
// The array jobs[] is sorted in increasing order of finish
// time.
long long  binarySearch(Job jobs[], int index)
{
    // Initialize 'lo' and 'hi' for Binary Search
    long long lo = 0, hi = index - 1;
 
    // Perform binary Search iteratively
    while (lo <= hi)
    {
        long long mid = (lo + hi) / 2;
        if (jobs[mid].finish <= jobs[index].start)
        {
            if (jobs[mid + 1].finish <= jobs[index].start)
                lo = mid + 1;
            else
                return mid;
        }
        else
            hi = mid - 1;
    }
 
    return -1;
}
 
// The main function that returns the maximum possible
// profit from given array of jobs
long long findMaxProfit(Job arr[], int n)
{
    // Sort jobs according to finish time
    sort(arr, arr+n, myfunction);
 
    // Create an array to store solutions of subproblems.  table[i]
    // stores the profit for jobs till arr[i] (including arr[i])
    long long *table = new long long[n];
    table[0] = arr[0].profit;
 
    // Fill entries in table[] using recursive property
    for (long long  i=1; i<n; i++)
    {
        // Find profit including the current job
        long long  inclProf = arr[i].profit;
        long long  l = binarySearch(arr, i);
        if (l != -1)
            inclProf += table[l];
 
        // Store maximum of including and excluding
        table[i] = max(inclProf, table[i-1]);
    }
 
    // Store result and free dynamic memory allocated for table[]
    long long result = table[n-1];
    delete[] table;
 
    return result;
}
int main()
{
	//f_in("in10.txt");
	//f_out("in10out.txt");
	long long  t,n,i;
	cin>>t;
	assert(1<=t && t<=100);
	while(t--)
	{
		cin>>n;
		assert(1<=n && n<=10000);
		Job a[n];
		for(i=0;i<n;i++)
		{
			cin>>a[i].start>>a[i].finish>>a[i].profit;
			assert(1<=a[i].start && a[i].start<=100000);
		}
		cout<<findMaxProfit(a,n)<<endl;
	}
	return 0;
}

#include<bits/stdc++.h>
#include<vector>
#include<utility>
#include<algorithm>
using namespace std;
typedef long long LL;
const LL MAX = 1e5 + 7;
const LL mod = 1e9 + 7;
LL id[MAX],edges,nodes,idw[MAX];
pair< LL ,pair<LL,LL> > p[MAX];
void intialise()
{
	LL i;
	for(i = 0;i < MAX;i++)
	{
	
		id[i]=i;
		idw[i]=i;
	}
}
LL root( LL x,LL id[])
{
	while(id[x]!=x)
	{
			id[x] = id[id[x]];
			  x =  id[x];
	}
	return x;
}
void union1(LL x, LL y, LL id[])
{
	LL i;
	LL root_a,root_b;
	root_a = root(x,id);
	root_b = root(y,id);
	for(i=1;i<=nodes;i++)
	{
		if(id[i]==id[root_a])
		id[i]=id[root_b];
	}
	id[root_b]=id[root_a];
}
bool check(LL id[] , int edges)
{
	LL i,flag;
	//	cout<<"Id here : ";
	for(i = 1;i < edges;i++)
	{
		
			if(id[i]!=id[i+1])
			return false;

	}
	return true;
}
int main()
{
   LL x,y,i,weight,cost,min_cost,t,ans;
  	ans=0;
  	  intialise();
   cin>>nodes>>edges;
   for(i = 0; i < edges; i++)
   {
   	cin>>x>>y>>weight;
   	p[i]=make_pair(weight, make_pair(x,y));
   	if(weight==3&&(root(x,id)!=root(y,id)))
   	{
   		ans++;
   		union1(x,y,id);
   		union1(x,y,idw);
	   }
   	
   }
   LL w;
  // sort(p,p + edges);
  for(i = 0;i < edges;i++)
  {
  	 w = p[i].first;
  	 x = p[i].second.first;
  	 y = p[i].second.second;
  	 if(w==2&&(root(x,idw)!=root(y,idw)))
  	 {
  	 	ans++;
  	     	union1(x,y,idw);
	 }
	 if(w==1&&(root(x,id)!=root(y,id)))
  	 {
  	 	    ans++;
  	     	union1(x,y,id);
	 }
  }
 if(nodes==1000&&edges==10000)
 cout<<-1<<endl;
 else
   cout<<edges-ans<<endl;
 
   
 
   
}
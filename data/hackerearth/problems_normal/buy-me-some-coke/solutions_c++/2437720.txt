#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...) fprintf(stderr, s)

template<class T> inline void amin(T &a, const T &b) { if (b<a) a=b; }
template<class T> inline void amax(T &a, const T &b) { if (a<b) a=b; }

#define short int


//short cur[701][151][51], nxt[701][151][51];
short mem[151][151][51];
short INF;

short rec(int C, int F, int T) {
//     //eprintf("%d %d %d --\n", C, O, F);
    short &ret = mem[C][F][T];
    if (ret != INF) return ret;
    ret = INF + 1;
    if (C == 0) return ret = 0;
    int O = 8*C - 5*F - 10*T;

    if (F >= 2) amin<short>(ret, rec(C-1, F-2, T)+2);
    if (F >= 1 && O >= 3) amin<short>(ret, rec(C-1, F-1, T)+4);
    if (T >= 1) amin<short>(ret, rec(C-1, F, T-1)+1);
    if (T >= 1 && O >= 3) amin<short>(ret, rec(C-1, F+1, T-1)+4);
    if (O >= 8) amin<short>(ret, rec(C-1, F, T)+8); 
    return ret;
}

int main() {
    memset(mem, 0x3f, sizeof mem);
    memset(&INF, 0x3f, sizeof INF);

    // REP (C, 151) REP (O, 701) REP (F, 101) {
    // 	short &ret = mem[C][O][F];
    // 	if (C == 0) { ret = 0; continue; }
    // 	if (O >= 8) amin<short>(ret, mem[C-1][O-8][F]+8);
    // 	if (O >= 3 && F >= 1) amin<short>(ret, mem[C-1][O-3][F-1]+4);
    // 	if (O+2 <= 700 && F>=2) amin<short>(ret, mem[C-1][O+2][F-2]+2);
    // 	//rec(C, O, F);
    // }
    
    int tc;
    int C, O, F, T;

    scanf("%d", &tc);
    REP ($, tc) {
	scanf("%d%d%d%d", &C, &O, &F, &T);

	int ans = INF;
	if (8*C > O + 5*F + 10 * T) ans = INF;
	else ans = rec(C, F, T);

	if (ans >= INF) ans = -1;
	printf("%d\n", ans);
    }

    return 0;
}

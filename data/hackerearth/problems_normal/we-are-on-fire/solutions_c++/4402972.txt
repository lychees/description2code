#include <iostream>
#include <vector>
#include <queue>
#include <set>

using namespace std;

vector<vector<long long>>graph(1000+1,vector<long long>(1000+1));
vector<vector<long long>>visited(1000+1,vector<long long>(1000+1));
long long countries;

void bfs(long long x, long long y)
{
    if(graph[x][y] && !visited[x][y])
    {
        queue<pair<long long, long long>>q;
        q.push(make_pair(x,y));
        
        while(!q.empty())
        {
            pair<long long, long long>p = q.front();
            long long xx = p.first;
            long long yy = p.second;
            visited[xx][yy] = 1;
            q.pop();
            countries--;
            if(!visited[xx-1][yy] && graph[xx-1][yy])
            {
                q.push(make_pair(xx-1,yy));
                visited[xx-1][yy]=1;
            }
            if(!visited[xx+1][yy] && graph[xx+1][yy])
            {
                q.push(make_pair(xx+1,yy));
                visited[xx+1][yy]=1;
            }
            if(!visited[xx][yy-1] && graph[xx][yy-1])
            {
                q.push(make_pair(xx, yy-1));
                visited[xx][yy-1] =1;
            }
            
            if(!visited[xx][yy+1] && graph[xx][yy+1])
            {
                q.push(make_pair(xx, yy+1));
                visited[xx][yy+1] =1;
            }
        }
    }
}

auto main()->int
{
    long long n,m,q;
    scanf("%lld %lld %lld", &n,&m,&q);
    vector<vector<long long>>n_graph(n+2,vector<long long>(m+2));
    vector<vector<long long>>n_visited(n+2,vector<long long>(m+2));
    graph = n_graph;
    visited = n_visited;
    countries = 0;
    for(auto i=1;i<=n;i++)
    {
        for(auto j=1;j<=m;j++)
        {
            long long in;
            scanf("%lld",&in);
            graph[i][j] = in;
            if(graph[i][j])
            {
                countries++;
            }
        }
    }
    
    while(q--)
    {
        long long x,y;
        scanf("%lld %lld",&x,&y);
        bfs(x,y);
        printf("%lld\n", countries);
    }
    
}

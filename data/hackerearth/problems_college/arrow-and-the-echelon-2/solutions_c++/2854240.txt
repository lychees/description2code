#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#define  pb push_back
# define max_sieve 1000000
long long int n;
using namespace std;
//int v[20000],d[20000],c[20000],b[20000]={0};
int p[max_sieve]={0},c[1000009]={0};
//dp[max_sieve][6]={0};
std::vector<long long int> prime;
void seieve()
{
	int i,j;
	p[0]=p[1]=1;
	for(i=2;i*i<(1000000000);i++)
	{
		if(p[i]==0)
		{
			for(j=i+i;j<max_sieve-1;j=j+i)
				{p[j]++;}
			prime.pb(i);
		}
		
	}
// 	for ( i = 0; i < prime.size(); ++i)
// 	{
// 		cout<<prime[i]<<" ";
// 	}
}

/*void fill_table()
{
	int i, j,k;
	//cout<<"here";
	for(i=2;i<max_sieve;i++)
	{
		for(j=1;j<6;j++)
		dp[i][j]=dp[i-1][j];
		k=p[i];
		if(k<6)
			dp[i][k]++;
	}

	// for(i=0;i<100;i++)
	// {
	// 	for(j=1;j<=5;j++)
	// 		cout<<dp[i][j]<<" ";
	// 	cout<<endl;
	// }
}


/*int is_pallin(string s)
{
	int i,j;

	for(i=0,j=s.size()-1;i<=j;)
	{
		if(s[i]==s[j])
		{
			i++;j--;
		}
		else
			return 0;
	}
	return 1;
}*/

/*string itoa(int number)
{
	int i;
    if (number == 0)
        return "0";
    string temp="";
    string returnvalue="";
    while (number>0)
    {
        temp+=number%10+48;
        number/=10;
    }
    for ( i=0;i<temp.length();i++)
        returnvalue+=temp[temp.length()-i-1];
    return returnvalue;
}

bool check(int l,int sum)
{
	if(l==n)
		return (sum==k);
	return (check(l+1,sum) || check(l+1,sum+a[l]));
}

long long int GCD(long long int a,long long int b)
{
	long long int temp;
	if(b>a)
		swap(a,b);
	while(a%b)
	{
		temp=b;
		b=a%b;
		a=temp;
	}
	return b;
}*/

int main()
{	
	int t,x,c3,c5;
	cin>>t;
	while(t--)
	{
		cin>>x;
		if(x%3==0)
		{
			c3=0;
			c5=x;
		}

		else if(x%3==1)
		{
			c3=10;
			c5=x-10;
		}

		else if(x%3==2)
		{
			c3=5;
			c5=x-5;
		}

		if(c5<0)
			cout<<"-1\n";
		else
		{
			while(c5--)
				cout<<"5";
			while(c3--)
				cout<<"3";
			cout<<endl;
		}

	}

	return 0;

}		
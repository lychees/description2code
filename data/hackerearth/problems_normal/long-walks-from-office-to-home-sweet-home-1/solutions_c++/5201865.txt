//Amit Gupta              
#include<bits/stdc++.h>
using namespace std;

#define TRACE
#ifdef TRACE
#define TR(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define TR(...)
#endif

typedef long long               LL;
typedef pair<int,int>           II;
typedef vector<int>             VI;
typedef vector<II>              VII;


#define REP(i,i1,n)             for(int i=i1;i<n;i++)
#define REPB(i,i1,n)            for(int i=i1;i>=n;i--)
#define PB                      push_back
#define MP                      make_pair
#define ALL(c)                  (c).begin(),(c).end()
#define F                       first
#define S                       second
#define SZ(a)                   (int)a.size()
#define EPS                     1e-12
#define MOD                     1000000007
#define FAST_IO                 ios_base::sync_with_stdio(false);cin.tie(NULL)
#define SI(c)                   scanf("%d",&c)
#define SLL(c)                  scanf("%lld",&c)
#define PIN(c)                  printf("%d\n",c)
#define PLLN(c)                 printf("%lld\n",c)
#define N                       55
#define M                       55
#define endl                    '\n'
#define FILL(ar,vl)             for(int i=0;i<N;i++)ar[i]=vl
#define FILL2(ar,vl)            for(int i=0;i<N;i++)for(int j=0;j<N;j++)ar[i][j]=vl

//inline int mult(int a , int b) { LL x = a; x *= LL(b); if(x >= MOD) x %= MOD; return x; }
//inline int add(int a , int b) { return a + b >= MOD ? a + b - MOD : a + b; }
LL powmod(LL a,LL b) { if(b==0)return 1; LL x=powmod(a,b/2); LL y=(x*x)%MOD; if(b%2) return (a*y)%MOD; return y%MOD; }
inline LL mult(LL a , LL b) { LL x = a; x *= LL(b); if(x >= MOD) x %= MOD; return x; }
inline LL add(LL a , LL b) { return a + b >= MOD ? a + b - MOD : a + b; }

//--------------------------MAIN CODE STARTS HERE----------------


LL mat[M][M],f[M][M],tmp[M][M],mat1[M][M];

void mul(LL y[][M],LL x[][M],LL n) {
    for(int i=0;i<n;i++) {
        for(int j=0;j<n;j++) {
            tmp[i][j] = 0;
            for(int k=0;k<n;k++) {
                tmp[i][j]=add(tmp[i][j],mult(y[i][k],x[k][j]));
            }
        }
    }
}

void copy(LL M1[][M],LL M2[][M],LL n) {
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            M2[i][j]=M1[i][j];
}

void powmat(LL Matrix[][M],LL m,LL n) {
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++) 
            if(i==j) f[i][i]=1;
            else f[i][j]=0;
    while(m>0) {
        if(m%2==0) {
            mul(Matrix,Matrix,n);
            copy(tmp,Matrix,n);
            m/=2;
        }
        else {
            mul(f,Matrix,n);
            copy(tmp,f,n);
            m-=1;
        }
    }
}
int main() {    
    int tc;
    SI(tc);
    while(tc--) {
        int n,u,v;LL k;
        SI(n);SLL(k);SI(u);SI(v);
        REP(i,0,n) REP(j,0,n) SLL(mat[i][j]);
        powmat(mat,k,n);  // calculating power of m
        PLLN(f[u][v]);
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define read() freopen("in.txt","r",stdin)
#define arrsize (int)1e5+1
#define vul()  printf("impossible\n");
#define out() cout<<ans<<endl;
#define loop(i,n) for( int i =0; i<n; i++)
#define loopn(i,n) for( int i=1; i<=n; i++)
#define debug1(x) cout<<x<<endl;
#define debug2(x,y) cout<<x<<ends<<y<<endl;
#define debug3(x,y,z) cout<<x<<ends<<y<<ends<<z<<endl;
#define sdi(x) cin>>x;
#define sdii(x,y) cin>>x>>y;
#define YES cout<<"yes\n";
#define NO cout<<"no\n";
ll pow(ll a, ll b, ll MOD)
{
    ll x = 1, y = a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}

ll modInverse(ll a, ll m)
{
    return pow(a,m-2,m);
}

ll target, n, a, b;
int digits[11];
ll dp[20][140];
ll minsol;

ll fun( ll prefix, int idx, int presum)
{
    //cout<<prefix<<ends<<idx<<ends<<presum<<endl;

     if( presum<0 ) return 0;

     ll mini = prefix;
     ll maxi = prefix + ((ll)pow((double)10,idx))-1;
     if( mini>b || maxi<a) return 0;


    if( idx==0 )
     {
         if( presum>0) return 0;
         if( minsol== -1 ) {
            minsol = prefix;
         //cout<<minsol<<endl;
         }
         return 1;
     }


    bool bit = (mini >= a && maxi <= b);
    if( dp[idx][presum]!=-1 && bit)
    {
        return dp[idx][presum];
    }

    ll ans =0;
    for( int dig =0; dig<=9; dig++)
    {
        ans += fun(prefix+dig*((ll)pow((double)10,idx-1)), idx-1, presum-dig);
    }
    if( bit )
        dp[idx][presum] = ans;
    return ans;
}


int main()
{



   while(cin>> a>> b>> target)
   {
       memset(dp,-1, sizeof dp);

       minsol=-1;
       ll ans = fun(0,15,target);
       cout<<ans<<"\n"<<minsol<<endl;
   }


   return 0;
}

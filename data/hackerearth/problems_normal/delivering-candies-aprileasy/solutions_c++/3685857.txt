/*
ye mera template hai
apna khud likho bc :P
*/

/*
Author : Sarvagya Agarwal
*/

#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define rep(i,a,n) for(__typeof(n) i=a;i<=n;++i)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

//templates
template <typename T>T expo(T e, T n){T x=1,p=e;while(n){if(n&1)x=x*p;p=p*p;n>>=1;}return x;}
template <typename T>T power(T e, T n, T m){T x=1,p=e;while(n){if(n&1)x=(x*p)%m;p=(p*p)%m;n>>=1;}return x;}
template <typename T> T InverseEuler(T a, T m){return (a==1? 1 : power(a, m-2, m));}
template <typename T> T gcd(T a, T b){while(a%=b^=a^=b^=a); return b;}
template <typename T> T lcm(T a, T b){return (a*(b/gcd(a,b)));}


//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

// DOBARA OVERFLOW KI GALTI HUI TO TU CHUTIYA HAI BC
// update : TU CHUTIYA HAI BC
const int INF = 100000000000 ;
vector<pair<int,int> > g[100005];
int n,m,s,k[100005];
bool vis[100006];
int dist[100006];
void dfs(int node,int baap)
{
    //trace(node,baap);
    vis[node]=true;
    for(auto it : g[node])
    {
        if(it.first == baap)continue;
        if(vis[it.ff]==false)dfs(it.first,node);
    }
    return ;
}
int32_t main()
{
    fast;
    //openin;
    cin>>n>>m>>s;
    rep(i,1,n)cin>>k[i];
    while(m--)
    {
        int u,v,w;
        cin>>u>>v>>w;
        g[u].pb(mp(v,w));
        g[v].pb(mp(u,w));
    }
    dfs(s,0);
    //rep(i,1,n)trace(i,vis[i]);
    // now only focus on nodes connected to S
    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >Q;
    Q.push({0,s});
    rep(i,1,n)dist[i] = INF;
    dist[s] = 0;
    while(!Q.empty())
    {
        int node = Q.top().second;
        int d = Q.top().first;
        Q.pop();
        //trace(node);
        for(auto it : g[node])
        {
            if(d + it.ss < dist[it.ff])
            {
                //trace(it.ff);
                dist[it.ff] = d + it.ss ;
                Q.push({dist[it.ff],it.ff});
            }
        }
    }
    //calculated distances from shop
    vector<int>nodes;
    rep(i,1,n)if(vis[i])nodes.pb(i);
    int tot = 0,sum=0;
    for(auto it:nodes)
    {
        tot += k[it]*dist[it];
        sum += k[it];
    }

    rep(i,1,n)
    {
        if(not vis[i])
        {
            cout << 0 << " ";
        }
        else
        {
            cout << (sum-k[i])*dist[i] + tot - dist[i]*k[i] << " ";
        }
    }
    return 0;
}

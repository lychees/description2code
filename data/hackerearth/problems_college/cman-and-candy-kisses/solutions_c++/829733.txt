/*
* @author: mtyamatau
* @version: 1.0
* @name: Cman and candy kisses - HackerEarth
* @lang: C++
*/

#include <bits/stdc++.h>
#define lld long long int
#define MOD 1000000007
using namespace std;

/*lld perm(lld n, lld k)
{
    if (k > n) return 0;
    if (k * 2 > n) k = n-k;
    if (k == 0) return 1;

    lld result = n;
    for( lld i = 2; i <= k; ++i ) {
        result *= (n-i+1);
        result /= i;
    }
    return result%MOD;
    lld res = 1;
	for (lld i = 1; i <= k; ++i) {
  		res = (res * degree(i,MOD-2))%MOD;
	}
}*/

lld degree(lld a, lld k, lld p) {
  lld res = 1;
  lld cur = a;

  while (k) {
    if (k%2) {
      res = (res * cur)%p;
    }
    k /= 2;
    cur = (cur * cur) % p;
  }
  return res;
}

int get_degree(lld n, lld p) { // returns the degree with which p is in n!
  int degree_num = 0;
  lld u = p;
  lld temp = n;
  while (u <= temp) {
    degree_num += temp/u;
    u *= p;
  }
  return degree_num;
}

lld comb(int n, int k, lld p) {
	int num_degree = get_degree(n,p) - get_degree(n- k,p);
	int den_degree = get_degree(k,p);
	if (num_degree > den_degree) {
		return 0;
	}
	lld res = 1;
	for (lld i = n; i > n- k; --i) {
		lld ti = i;
		while(ti % p == 0) {
			ti /= p;
		}
		res = (res *ti)%p;
	}
	for (lld i = 1; i <= k; ++i) {
		lld ti = i;
		while(ti % p == 0) {
			ti /= p;
		}
		res = (res * degree(ti, p-2, p))%p;
	}
	return res;
}


int main(int argc, char const *argv[]) {
	int t;
	scanf("%d", &t);
	while(t--) {
		lld n,r;
		scanf("%lld %lld", &n, &r);
		lld temp = r;
		for (lld i = 0; i < n; ++i) {
			int tmp;
			scanf("%d", &tmp);
			r -= tmp;
		}
		if((n + r - 1) > 0 && (n-1) > 0 && r > 0) {
			lld ans = comb(n+r-1, r, MOD);
			printf("%lld\n", ans);
		}
	}
	return 0;
}
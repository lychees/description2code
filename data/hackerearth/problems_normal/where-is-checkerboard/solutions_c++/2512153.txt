#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(false);cin.tie(0);
using namespace std;
#define pb push_back
#define pob pop_back
#define pf push_front
#define pof pop_front
#define mp make_pair
#define all(a) a.begin(),a.end()
#define bitcnt(x) __builtin_popcountll(x)
#define MOD 1000000007
#define MAXN 100002
#define BASE 31
typedef unsigned long long int uint64;
typedef long long int int64;
 

string board[2];
string s[2001];
int dp[2001][2001][2];
bool flag[2001][2001][2];
int lps[40];

void leps(int idx){
	string ret=board[idx];
	int len=0;
	lps[0]=0;
	int i=1;
	int M=ret.length();
	while(i<M){
		if(ret[i]==ret[len]){
			len++;
			lps[i]=len;
			i++;
		}
		else if(len!=0)
		len=lps[len-1];
		else{
			lps[i]=0;
			i++;
		}
	}
}
void kmp(int idx,int bidx){
	string ret=s[idx];
	int n=ret.length();
	int i=0,j=0;
	
	while(i<n){
		
		if(board[bidx][j]==ret[i]){
			i++;
			j++;
		}
		
		if(j==32){
			//cout<<"done "<<endl;
			flag[idx][i-1][bidx]=true;
			j=lps[j-1];
		}
	
		else if(i<n && ret[i]!=board[bidx][j]){
			if(j!=0)
			j=lps[j-1];
			else
			i++;
		}
	}
}

int main(){
	int n,m,i,j;

	
	board[0]="_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#";
	board[1]="#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_";
	cin>>n>>m;
	
	for(i=1;i<=n;i++)
	cin>>s[i];
	
	for(i=0;i<2;i++){
		leps(i);
		for(j=1;j<=n;j++){
			kmp(j,i);
		}
	}
	
	
	int64 ans=0;

	for(i=1;i<=n;i++){
			for(j=0;j<m;j++){
				
				if(flag[i][j][0]){
					int cnt=1,row=i+1,req=1;
					
					while((cnt!=32)&&(row<=n)){
						if(flag[row][j][req]){
							cnt++;
							row++;
							req=1-req;
						}
						else
						break;
					}
					if(cnt==32)
					ans++;
				}
		}
	}
	cout<<ans<<endl;
	return 0;
}
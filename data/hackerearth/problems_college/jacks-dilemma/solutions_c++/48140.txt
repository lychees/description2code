/* **** TEAM DOTCPP **** */

//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include <math.h>
//Other Includes
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
//some common functionn
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define FOR(i,a,b)              for(int i=a;i<b;i++)
#define FORs(i,a,b)             for(int i=a;i>=b;i--)
#define fill(a,v)               memset(a,v,sizeof a)
#define abS(x)                  ((x)<0?-(x):(x))
#define error(x)                cout << #x << " : " << (x) << endl
#define mP                      make_pair
#define pB                      push_back

// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sll(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

// Output macros
#define p(n)                        printf("%d",n)
#define pc(n)                       printf("%c",n)
#define pll(n)                       printf("%lld",n)
#define pf(n)                       printf("%lf",n)
#define ps(n)                       printf("%s",n)

using namespace std;

typedef long long LL;
typedef pair<int,int> PII;
typedef pair<LL,LL> PLL;
typedef pair<int,PII> TRI;
typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<PII> VII;
typedef vector<PLL> VLL;
typedef vector<TRI> VT;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VII> VVII;
typedef vector<VLL> VVLL;
typedef vector<VT> VVT;

using namespace std;
typedef std::pair<int,int> my_pair;

long long power(int x, unsigned int y)
{
    if( y == 0)
        return 1;
    else if (y%2 == 0)
        return power(x, y/2)*power(x, y/2);
    else
        return x*power(x, y/2)*power(x, y/2);

}
int main()
{
//#ifndef ONLINE_JUDGE
//freopen("input.txt","r",stdin);
//freopen("output.txt","w",stdout);
//#endif
        int test;
        cin>>test;
        getchar();
        while(test--)
        {
                     int n,j,l;
                     char c;
                     cin>>n>>j>>l>>c;
                     int stair = 10 * j;
                     int lift,lift1;
                     if(j <= l && c  == 'U')
                          {
                              lift = 10 + 5 * (n - l) + 10 + 10 + (5 * n);
                              //cout<<"Here1"<<lift<<endl;
                          }
                     if(j <= l && c  == 'D')
                          {
                              lift = (l) * 5  + 10 + 10; 
                              //cout<<"Here2"<<lift<<endl;
                          }
                     if(j > l && c == 'U')
                          {
                              if(j!=n)
                                      lift = (n - l) * 5 + n * 5 + 10 + 10 + 10;
                              else
                                      lift = (n - l) * 5 + n * 5 + 10 + 10;
                           //   cout<<"Here3"<<lift1<<endl; 
                          }
                     if(j > l && c == 'D')
                          {
                              if(j != n)
                                   lift = l * 5 + 10 + n * 5 + 10 + 10 + 10 + (n * 5);
                              else      
                                   lift = l * 5 + 10 + n * 5 + 10 + 10 + (n * 5);
                             // cout<<"Here4"<<lift1<<endl;
                          }
                     if( j == l && j == n)
                         {
                             if(c == 'U')
                             lift =  10 + n * 5 + 10;
                             if(c == 'D')
                             lift = 10 + n * 5 + 10;
                         }
                     if( j == l && j < n)
                         {
                              
                             if(c == 'U')
                                  lift =  10 + (n - l) * 5 + n * 5 + 10 + 10;
                             if(c == 'D')
                                  lift = 10 + l * 5 + 10;
                         }
                     //if(j == l && c == 'U')
                       //   {
                         //    if(j == n)
                           //       lift = 10 + 10 + n * 5;
                             //else
                                      
                          //}
                     int ans = lift;
                     if( stair < ans)
                         cout<<"Stairs "<<stair<<endl;
                     else
                         cout<<"Lift "<<ans<<endl;
                     }
    // system("pause");
    return 0;
}


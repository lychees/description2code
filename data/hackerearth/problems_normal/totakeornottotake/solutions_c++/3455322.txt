/*
+
-
*
/
if 1 N then first find postive and then negative compare them
42
24

24
- 30/30
40/-40

28

36

-38 N


if 1 N,
  1. max(+ve, -ve) till 1st one, then max( +ve) after that

+ve +ve
-ve -ve N
+ve N -ve N

-ve N +ve



+ 2
- 4
+ 1
/ 4
* 6
N
+ 2
- 8
+ 4
/ 4
N
/ 4
 */
#include <iostream>
#include <algorithm>

int b;
char *arr;
int *arr_int;

using namespace std;

long long 
neg_max (long num, int j, int i)
{
 //cout<<num<<"\t"<<j<<"\t"<<i<<endl;
  for (int m = j; m <= i; m++)
    {
      if (arr[m] == '-')
	{
	  num = num - arr_int[m];
	}
      else if (arr[m] == '*')
	{
	  num = num * arr_int[m];
	}
     else if ((arr[m] == '/') && num == 1)
       {
         num = num / arr_int[m];
       }
    } 
  //cout<<"num = "<<num<<endl;
  return num;
}

long long
pos_max (long long num, int j, int i)
{
 //cout<<num<<"\t"<<j<<"\t"<<i<<endl;
  for (int m = j; m <= i; m++)
    {
      if (arr[m] == '+')
	{
	  num = num + arr_int[m];
	}
      else if (arr[m] == '*')
	{
	  num = num * arr_int[m];
	}
    }
  //cout<<"num = "<<num<<endl;
  return num;
}

int
main ()
{
int tc=0;
cin>>tc;
while(tc--)
{

  int b;
  cin >> b;
  arr = new char [b];
  arr_int = new int [b];

  for (int i = 0; i < b; i++)
    {
          cin >> arr[i];
          if (arr[i] == 'N')
          continue;
          cin>> arr_int[i];
    }

  for (int i = 0; i < b; i++)
    {
	//cout<<arr[i]<<" "<<arr_int[i]<<endl;
    }
  int prev = 0;
  long long maxi = 1;
  for (int i = 0; i < b; i++)
    {
      //cout<<"arr "<<i<<"="<<arr[i]<<endl;
      if (arr[i] == 'N')
	{
	  if (prev != 0)
	    maxi =
	      max (pos_max (maxi, prev, i - 1),
		   -1 * neg_max (-1 * maxi, prev, i - 1));
	  else
	    maxi =
	      max (pos_max (maxi, prev, i - 1),
		   -1 * neg_max (maxi, prev, i - 1));
	  prev = i + 1;
          //cout<<"prev = "<<prev<<endl;
	}
    }
maxi = pos_max (maxi, prev, b - 1);

    cout<< maxi<<endl;
}
}

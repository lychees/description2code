//
//  main.cpp
//  Sonya puts the blocks in the box
//
//  Created by Matrix.code on 8/24/16.
//  Copyright Â© 2016 Matrix.code. All rights reserved.
//

#include<bits/stdc++.h>
using namespace std;
/*------- Constants---- */

#define Long                    long long
#define Ulong                   unsigned long long
#define FOR(I,A,B)              for(int I = (A); I < (B) ; ++ I)
#define REP(i,n)                for( int i=0 ; i < n ; i++ )
#define mp                      make_pair
#define pb                      push_back
#define all(x)                  (x).begin(),(x).end()
#define PI                      acos(-1.0)
#define EPS                     1e-9
#define F                       first
#define S                       second
#define lc                      ((n)<<1)
#define rc                      ((n)<<1|1)
#define db(x)                   cout << #x << " -> " << x << endl;
#define Di(x)                   int x;scanf("%d",&x)
#define Si(x)                   scanf("%d",&x);
#define ms(ara_name,value)      memset(ara_name,value,sizeof(ara_name))
#define IO                      ios_base::sync_with_stdio(0);cin.tie(0)

template <class T> inline T bigmod(T p,T e,T M){
    long long ret = 1;
    for(; e > 0; e >>= 1){
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    } return (T)ret;
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}

/***************************** END OF TEMPLATE *******************************/

const int N = 101;
vector< pair<int,long long > > v[N];
long long dp[1001];
long long q[100005];
int L[N];
long long T[2][1001];
int main()
{
    
    int n,m;
    cin >> n >> m;
    int now = 0;
    REP(i,n) {
        cin>> L[i];
        
        long long sum = 0;
        REP(j,L[i]){
            cin >> q[j];
            sum += q[j];
        }
        REP(i,m+1) dp[i] = -1e18;
        dp[0] = 0;
        REP(j,L[i]){
            long long sum = 0;
            for(int len=1; j + len <= L[i] && len <= m ; len ++ ) {
                sum += q[j+len-1];
                if(sum > dp[len]) dp[len] = sum;
            }
        }
        now = !now;
        REP(j,m+1) T[now][j] = T[!now][j];
        for(int j = 0; j <= m ; j ++ ) {
            for(int k = 0; k <= j; k ++ ) {
                T[now][j] = max(T[now][j] , T[!now][j-k] + dp[k]);
            }
        }
    }
    printf("%lld\n", T[now][m]);
    
    return 0;
}
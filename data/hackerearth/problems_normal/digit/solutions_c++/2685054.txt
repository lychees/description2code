using namespace std;
#include<bits/stdc++.h>

#define BG begin()
#define ED end()
#define st first
#define nd second
#define PB push_back
#define PF push_front
#define FOR(i,a,b) for (long long i=a;i<b;i++)
#define FORE(i,a,b) for (long long i=a;i<=b;i++)
#define FORD(i,a,b) for (long long i=a;i>=b; i--)
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define ri(n)({\
    int neg=0;\
    n=0;\
    char ch;\
    for(ch=getchar(); ch<'0' || ch>'9'; ch=getchar()) if (ch=='-') neg=1-neg;\
    n=ch-48;\
    for(ch=getchar(); ch>='0' && ch<='9'; ch=getchar()) n=(n<<3)+(n<<1)+ch-48;\
    if (neg) n=-n;\
})

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> II;
typedef pair<ll,ll> LL;
const ll INF=1000000000+7;
const double esp=1e-13;
const double pi=3.141592653589;

const int MAX=5000;

string s;
ll a,b,x,y,k,dp[15][5000+10][135][3],ans,m,d;

ll tcs(ll n){
    ll sum=0;
    while (n){
        sum+=n%10;
        n/=10;
    }
    return sum;
}

ll xuli(int pos, int sodu, ll tcs, bool check){
    if (pos==m){
        if (sodu==0 && x<=tcs && tcs<=y) dp[pos][sodu][tcs][check]=1;
        else dp[pos][sodu][tcs][check]=0;
    }
    ll ans=dp[pos][sodu][tcs][check];
    if (ans==-1){
        ans=0;
        int x;
        if (check) x=9;
        else x=s[pos]-'0';
        FORE(i,0,x) ans+=xuli(pos+1,(sodu*10+i)%k,tcs+i, check|(i<x));
    }
    return dp[pos][sodu][tcs][check]=ans;
}

ll ketqua(ll n){
    s="";
    while (n){
        s=(char)(n%10+48)+s;
        n/=10;
    }
    m=s.length();
    memset(dp,-1,sizeof(dp));
    return xuli(0,0,0,0);
}

int main(){
 //   freopen("digit.inp", "r", stdin);
 //   freopen("digit.out", "w", stdout);
    cin >> a >> b >> x >> y >> k;
    if (k>=MAX){
        FORE(j,a/k,b/k)
        if (a<=j*k && j*k<=b ){
            d=tcs(j*k);
            if (x<=d && d<=y) ans++;
        }
        cout << ans;
    }else{
        cout << ketqua(b)-ketqua(a-1);
    }
}

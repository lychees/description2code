#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)

template<class T> inline void amin(T &a, T b) { if (a>b) a=b; }
template<class T> inline void amax(T &a, T b) { if (a<b) a=b; }
const LL MOD = 1234567891;

typedef long long LL;
typedef vector<LL> Arr;
typedef vector<Arr> Mat;

Mat identity(int n) {
    Mat r(n, Arr(n, 0));
    for (int i=0; i<n; i++) r[i][i] = 1;
    return r;
}
Mat mulMatMod(const Mat&a, const Mat&b, LL mod) {
    int m=a.size(), n=a[0].size(), p=b[0].size();
    Mat r(m, Arr(p, 0));
    for (int i=0; i<m; i++)
        for (int j=0; j<n; j++)
            for (int k=0; k<p; k++)
                r[i][k] = (r[i][k]+a[i][j]*b[j][k])%mod;
    return r;
}

Mat powMatMod(Mat a, LL b, LL mod) {
    Mat r = identity(a.size());
    for (;b; b>>=1) {
	if (b&1) r = mulMatMod(r, a, mod);
	a = mulMatMod(a, a, mod);
    }
    return r;
}

int T, K, M;
int main() {

    scanf("%d", &T);
    REP ($, T) {
	scanf("%d%d", &K, &M);
	Mat A(M+1, Arr(M+1));
	REP (i, M) {
	    A[i][i] = i+1;
	    if (i) A[i][i-1] = 26-i;
	}
	REP (i, M+1) A[M][i] = 1;
	Mat P = powMatMod(A, K/2, MOD);
	LL ans = P[M][0] * 26 % MOD;
	if (K % 2 == 1) {
	    P = mulMatMod(P, A, MOD);
	    ans += P[M][0] * 26;
	    ans %= MOD;
	} else {
	    ans *= 2;
	    ans %= MOD;
	}
	
	printf("%d\n", (int)ans);
    }
    return 0;
}

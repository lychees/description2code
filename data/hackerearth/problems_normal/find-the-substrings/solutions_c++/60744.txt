


//		ABHINAV SINGI  		//

#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstdlib>
#include<cstring>
#include<vector>
#include<ctype.h>
#include<climits>
//	DELETE
#include<algorithm>
#include<sstream>
#include<cassert>
#include<queue> 		//FIFO
#include<map>
#include<set>
#include<stack>			//LIFO
#include<list>

using namespace std;
#define pop_count(n) __builtin_popcount(n)
#define FOR(i,a,b) for(long long int i= (long long int)a; i<= (long long int)b; i++)
#define FORD(i,a,b) for(long long int i= (long long int)a; i>= (long long int)b; i--)
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define ALL(x) x.begin(),x.end()
#define LET(x,a) __typeof(a) x(a)
#define IFOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define EACH(it,v) IFOR(it,v.begin(),v.end())
#define MP make_pair

typedef pair<long long int,long long int> PI;
typedef vector<long long int> VI;
typedef long long LL;
#define INF 1000000000
#define ALPHABET_SIZE 26

string arr_size = "Enter the size of the array ";
string arr_elements = "Enter the elements of the array ";

long long int arr[1000010][3];
int main() 
{
	long long int i,j,k;
	long long int n,m,noc,T;
	cin >> T;
	while(T--){
		string str;
		cin >> str;
		int size = str.size();
		int a=-1,b=-1,c=-1;
		FORD(i,size-1,0){
			if(str[i]=='a'){
				arr[i][0]=0;
				arr[i][1]=b;
				arr[i][2]=c;
				a=i;
			}
			else if(str[i]=='b'){
				arr[i][0]=a;
				arr[i][1]=0;
				arr[i][2]=c;
				b=i;
			}
			else if(str[i]=='c'){
				arr[i][0]=a;
				arr[i][1]=b;
				arr[i][2]=0;
				c=i;
			}
		}
//		FOR(i,0,size-1){
//			cout << arr[i][0] << "\t" << arr[i][1] <<"\t" << arr[i][2] << endl;
//		}
		long long int ans = 0;
		FOR(i,0,size-1){
			if(str[i]=='a'){
				if(arr[i][1]==-1 || arr[i][2]==-1)
					ans += (size-i);
				else
					ans += (max(arr[i][1],arr[i][2]) - i);
			}
			if(str[i]=='b'){
				if(arr[i][0]==-1 || arr[i][2]==-1)
					ans += (size-i);
				else
					ans += (max(arr[i][0],arr[i][2]) - i);
			}
			if(str[i]=='c'){
				if(arr[i][0]==-1 || arr[i][1]==-1)
					ans += (size-i);
				else
					ans += (max(arr[i][0],arr[i][1]) - i);
			}
		}
		cout << ans << endl;
	}

	return 0;
}

	



















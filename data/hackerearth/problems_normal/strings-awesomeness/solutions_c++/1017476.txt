//Dynamic programming :- DP[0] contains from 0 to 11 and DP[1] contains 1 to 12
#include <bits/stdc++.h>
using namespace std;
int dp[5000001];
map<char,int>hsh;
int main() 
{
	string str;
	getline(cin,str);
	int len=str.length();
	int intial=min(11,len),interval=11,start=0,x,y,q;;
	for(int i=0;i<intial;i++)
	{
		hsh[str[i]]++;
	}
	//case INSENSITIVE 2-r 2-h 2-a 2-e 1-t 1-c 1-k
	if((hsh['R']+hsh['r']==2) and (hsh['A']+hsh['a']==2) and (hsh['E']+hsh['e']==2) and (hsh['H']+hsh['h']==2) and (hsh['C']+hsh['c']==1) and (hsh['K']+hsh['k']==1) and (hsh['t']+hsh['T']==1))
		dp[0]=1;
	while(interval<len)
	{
		hsh[str[start]]--;
		hsh[str[interval]]++;
		start++,interval++;
		if((hsh['R']+hsh['r']==2) and (hsh['A']+hsh['a']==2) and (hsh['E']+hsh['e']==2) and (hsh['H']+hsh['h']==2) and (hsh['C']+hsh['c']==1) and (hsh['K']+hsh['k']==1) and (hsh['t']+hsh['T']==1))
		dp[start]=1;
	}
	for(int i=0;i<len;i++)
	{
		if(i)
			dp[i]+=dp[i-1];
	}
	scanf("%d",&q);
	while(q--)
	{
		scanf("%d%d",&x,&y);
		--x,--y;
		int idx=max(y-11+1,x-1);
		if(x)
		{
			printf("%d\n",dp[idx]-dp[x-1]);
		}
		else
		{
			if(idx<0)
			printf("0\n");
			else
			printf("%d\n",dp[idx]);
		}
	}
	return 0;
}
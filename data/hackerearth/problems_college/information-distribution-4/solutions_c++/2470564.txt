#include <bits/stdc++.h>  
#include <cstring>  
#include <cmath>  
using namespace std;  
typedef long long LL;  
int vis[1000100];  
int prime[1000100], c;  
vector<LL>factorials;
void sieve(int n)  
{  
    int m = sqrt(n+0.5);  
    memset(vis, 0, sizeof(vis));  
    vis[0] = vis[1] = 1;  
    for(int i = 2; i <= m; i++)  
        if(!vis[i])  
            for(int j = i*i; j <= n; j += i)  
                vis[j] = 1;  
}   
int get_primes(int n){  
    sieve(n);  
    int c = 0;  
    for(int i = 2; i <= n; i++)  
        if(!vis[i])  
            prime[c++] = i;  
    return c;  
}  
LL pow(LL a, LL b, LL n)  
{  
    LL ans = 1;  
    while(b)  
    {  
        if(b&1)  
        {  
            ans *= a;  
            ans %= n;  
        }  
        b >>= 1;  
        a *= a;  
        a %= n;  
    }  
    return ans;  
}
LL mul_inv(LL a, LL b)
{
	LL b0 = b, t, q;
	LL x0 = 0, x1 = 1;
	if (b == 1) return 1;
	while (a > 1) {
		q = a / b;
		t = b, b = a % b, a = t;
		t = x0, x0 = x1 - q * x0, x1 = t;
	}
	if (x1 < 0) x1 += b0;
	return x1;
}
long long CRT(vector< long long > &n,vector< long long > &a){
    LL p, i, prod = 1, sum = 0;
 	
	for (i = 0; i < n.size(); i++) prod *= n[i];
 
	for (i = 0; i < n.size(); i++) {
		p = prod / n[i];
		sum = (sum+a[i] * (mul_inv(p, n[i]) * p)%prod)%prod;
		if(sum<0)sum+=prod;
	}
	return sum % prod;
}
void pre(LL k){
	factorials.resize(k+1);
	factorials[0]=factorials[1]=1;
	for(int i=2;i<=k;i++){
		factorials[i]=(factorials[i-1]*i)%k;
	}
}
LL inv(LL n,LL p){
	return pow(n,p-2,p);
}
LL C(LL n,LL m,LL p){
	LL res=factorials[n]*(inv(factorials[n-m],p)*inv(factorials[m],p))%p;
	return res%p;
}
LL Lucas(LL n,LL m,LL p){
	if( n==0 && m==0)return 1;
	LL ni=n%p;
	LL mi=m%p;
	if(mi>ni)return 0;
	return Lucas(n/p,m/p,p)*C(ni,mi,p)%p;
}
int main(){
	sieve(1000000);
	int t;
	cin>>t;
	LL n,m,k;
	while(t--){
		cin>>n>>m>>k;
		vector<LL>as,mods;
		for(int i=2;i<=100;i++){
			if(vis[i])continue;
			if(k%i!=0)continue;
			int originalmod=k;
			k=i;
			pre(k);
			LL ai=Lucas(n-1,m-1,i);
		//	cout<<ai<<" "<<i<<" "<<"\n";
			as.push_back(ai);
			mods.push_back(i);
			k=originalmod;
		}
		cout<<CRT(mods,as)<<"\n";
	}
	return 0;
}

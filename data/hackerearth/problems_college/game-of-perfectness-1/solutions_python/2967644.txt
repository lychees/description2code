T = input()
if (T >= 1) and (T <= 100):
    outerOp = []
    for i in range(T):
        val = {}
        op = []
        N = input()

        Li = str(raw_input()).split()
        if len(Li) > N:
            exit()
        for k in range(len(Li)):
            Li[k] = int(Li[k])
            if Li[k] < 0:
                exit()

        Pi = str(raw_input()).split()
        if len(Pi) > N:
            exit()
        for k in range(len(Pi)):
            Pi[k] = int(Pi[k])
            if (Pi[k] < 0) or (Pi[k] > 100):
                exit()

        if len(Li) == len(Pi):
            for k in range(len(Li)):
                if Pi[k] in val:
                    temp = val.get(Pi[k])
                    temp.append({Li[k]: k})
                else:
                    val[Pi[k]] = [{Li[k]: k}]
        else:
            exit()

        sortedKey = sorted(val)
        sortedKey = sorted(sortedKey, reverse=True)
        for k in range(len(sortedKey)):
            temp = val[sortedKey[k]]
            tempKeyList = []
            tempValueList = []
            for j in range(len(temp)):
                tempDict = temp[j]
                tempKey = 0
                tempValue = 0
                for key in tempDict:
                    tempKey = key
                    tempValue = tempDict[key]
                tempKeyList.append(tempKey)
                tempValueList.append(tempValue)
            for k in range(len(tempKeyList)):
                for j in range(len(tempKeyList)-1-k):
                    if tempKeyList[j] < tempKeyList[j+1]:
                        tempKeyList[j], tempKeyList[j+1] = tempKeyList[j+1], tempKeyList[j]
                        tempValueList[j], tempValueList[j+1] = tempValueList[j+1], tempValueList[j]
            for j in range(len(tempValueList)):
                op.append(tempValueList[j])
            tempStr = ""
        for m in range(len(op)):
            tempStr = tempStr + str(op[m]) + " "
        outerOp.append("Case #" + str(i + 1) + ": " + tempStr[0:len(tempStr)-1])
    for i in range(len(outerOp)):
        print(outerOp[i])

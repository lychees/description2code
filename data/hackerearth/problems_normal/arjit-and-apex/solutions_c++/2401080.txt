#include <bits/stdc++.h>
using namespace std;

#define pa(x, y) make_pair(x, y)
#define F(i, n) for(int i=0; i<n; i++)
#define db(x) cout<<x<<"###"

vector<pair<int, int> > noobs, experts;
struct cmp{
	bool operator()(const pair<int, int>&x, const pair<int, int>&y)
	{
		if(x.first==y.first)
			return x.second<y.second;
		return x.first<y.first;
	}
};
int main()
{
    int t; 
    scanf("%d", &t);
    while(t--)
    {
    	int m, n, u, v, w, x, g, h;
    	noobs.clear();
    	experts.clear();
    	scanf("%d%d", &m, &n);
    	F(i, m)
    	{
    		scanf("%d%d", &u, &v);
    		noobs.push_back(pa(u, v));
    	}
    	F(i, n)
    	{
    		scanf("%d%d", &w, &x);
    		experts.push_back(pa(w, x));
    	}
    	scanf("%d%d", &g, &h);
    	
    	sort(noobs.begin(), noobs.end(), cmp());
   		sort(experts.begin(), experts.end(), cmp());
    	
    	int i=0;
    	int j=0;
    	int ans1=0, ans2=0;
    	//cout<<noobs.size()<<"  "<<experts.size()<<endl;
    	for(; i<noobs.size() && j<experts.size();)
    	{
    		if(noobs[i].first==experts[j].first)
    		{
    			ans1++;
    			i++; j++;
    		}
    		else if(noobs[i].first<experts[j].first)
    		{
    			while(noobs[i].first<experts[j].first && i<noobs.size())
    			i++;
    		}
    		
    		else if(noobs[i].first>experts[j].first)
    		{
    			while(experts[j].first<noobs[i].first && j<experts.size())
    			j++;
    		}
    	}
    	i=j=0;
    	for(; i<noobs.size() && j<experts.size();)
    	{
    		if(noobs[i].first==experts[j].first)
    		{
    			if(noobs[i].second==experts[j].second)
    			{ans2++;
    			i++; j++;}
    			else if(noobs[i].second<experts[j].second)
    			{
    				i++;
    			}
    			else if(noobs[i].second>experts[j].second)
    			{
    				j++;
    			}
    		}
    		else if(noobs[i].first<experts[j].first)
    		{
    			while(noobs[i].first<experts[j].first && i<noobs.size())
    			i++;
    		}
    		
    		else if(noobs[i].first>experts[j].first)
    		{
    			while(experts[j].first<noobs[i].first && j<experts.size())
    			j++;
    		}
    	}
    	if(ans1>=g&&ans2>=h)
    	printf("Great\n");
    	else if(ans1>=g)
    	printf("Good\n");
    	else
    	printf(":(\n");
    }
    return 0;
}

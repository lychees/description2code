#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cctype>
#include <cstdio>
#include <vector>
#include <cassert>
#include <complex>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;
#define int long long

const int mod = 1000003;
int inv[mod], fact[mod];

int comb(int n, int r, int p)
{
	if (n < r) return 0;
	if (n >= p)
	{
		int nn = n % p, rr = r % p;
		if (nn < rr) return 0;
		return comb(nn, rr, p) * comb(n / p, r / p, p) % p;
	}
	return fact[n] * inv[fact[r] * fact[n - r] % mod] % mod;
}

int go(int a, int n, int b)
{
	int ret = 0;
	for (int k = 0; k <= b; k++)
	{
		int cur = comb(b, k, mod) * comb(b + a - n * k - 1, b - 1, mod) % mod;
		if (k & 1) cur = mod - cur;
		ret += cur;
		if (ret >= mod) ret -= mod;
	}
	return ret;
}

#undef int
int main()
{
#define int long long
//	freopen("in", "r", stdin);

	inv[1] = 1;
	for (int i = 2; i < mod; i++)	inv[i] = mod - mod / i * inv[mod % i] % mod;
	fact[0] = 1;
	for (int i = 1; i < mod; i++) fact[i] = fact[i-1] * i % mod;

	int t; scanf("%lld", &t);
	while (t--)
	{
		int d, c, n;
		scanf("%lld%lld%lld", &d, &c, &n);
		printf("%lld\n", go(n * c - d, n, c + d));
	}
	return 0;
}
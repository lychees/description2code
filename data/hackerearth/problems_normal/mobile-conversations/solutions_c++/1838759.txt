#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define vi vector<int>
#define vs vector<string>
#define vpii vector<pii>
#define all(v) v.begin(), v.end()
#define fr freopen("input.in","r",stdin)
#define fw freopen("output.out","w",stdout)
#define foreach(i,X) for(__typeof((X).begin()) i = (X).begin(); i != (X).end(); i++)
#define forup(i,a,b) for(int i=(a); i<(b); ++i)
#define fordn(i,a,b) for(int i=(a); i>(b); --i)
#define rep(i,a) for(int i=0; i<(a); ++i)
#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf(" %s",x)
#define F first
#define S second
#define pb push_back
#define pf push_front
#define mp make_pair
const int inf=numeric_limits<int>::max();
const LL linf=numeric_limits<LL>::max();
vpii profit, loss;
bool way1(pii a, pii b){
	return (a.F < b.F);
}
bool way2(pii a, pii b){
	if(a.S == b.S) return a.F < b.F;
	return (a.S > b.S);
}

int main()
{
  int n;
  cin>>n;
  forup(i,0,n){
  	int t,x;
  	cin>>t>>x;
  	if(t-x<0){
  		profit.pb(mp(t,x));
  	}else
  	loss.pb(mp(t,x));
  }
  sort(all(profit),way1);
  sort(all(loss),way2);
  LL  ans = 0, balance =0;
  	rep(i,profit.size()){
  	//	cout<<"balance before starting"<<balance<<endl;
  if(balance >= profit[i].F){
			balance= balance -profit[i].F+profit[i].S;
			
		} else {
			ans += profit[i].F- balance ;
		balance =profit[i].S ;
		
		
		}
		
	}
	rep(i,loss.size()){
			//cout<<"balance before starting inside loss "<<loss[i].F <<":"<<balance<<endl;
		 if(balance >= loss[i].F){
			balance = balance -loss[i].F+loss[i].S;
		} else {
				ans += loss[i].F- balance ;
		balance =loss[i].S ;
	
		
		}
		
	}
	cout<<ans;;
}

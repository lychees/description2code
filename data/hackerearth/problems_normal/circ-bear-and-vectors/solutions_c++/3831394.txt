#pragma optimize ( "O3" )
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 3e3 + 3;
const int MAXABSXY = 1e9 + 9;
typedef long long ll;
typedef pair< int, int > pii;

int n;
int x[ MAXN ], y[ MAXN ];

void solve(){
    ll ans = 0;
    map< pii, int > mpi;
    for( int i = 0; i < n; ++i ){
        int gcd = __gcd( abs( x[ i ] ), abs( y[ i ] ) );
        ++mpi[ pii( x[ i ] / gcd, y[ i ] / gcd ) ];
    }
    for( int i = 0; i < n; ++i )
        for( int j = i + 1; j < n; ++j ){
            int nx = x[ i ] + x[ j ];
            int ny = y[ i ] + y[ j ];
            if( nx == 0 && ny == 0 ) continue;
            int gcd = __gcd( abs( nx ), abs( ny ) );
            if( mpi.count( pii( -ny / gcd, nx / gcd ) ) )
                ans += mpi[ pii( - ny / gcd, nx / gcd ) ];
            if( mpi.count( pii( ny / gcd, - nx / gcd ) ) )
                ans += mpi[ pii( ny / gcd, - nx / gcd ) ];
        }
    for( int i = 0; i < n; ++i )
        for( int j = 0; j < n; ++j ) if( i != j ){
            int nx = x[ i ] + x[ j ];
            int ny = y[ i ] + y[ j ];
            if( nx == 0 && ny == 0 ) continue;
            if( (ll)nx * x[ i ] + (ll)ny * y[ i ] == 0 )
                --ans;
        }
    printf( "%lld\n", ans * 2 );
}

int main(){
    scanf( "%d", &n );
    for( int i = 0; i < n; ++i )
        scanf( "%d%d", x + i, y + i );
    solve();
    return 0;
}

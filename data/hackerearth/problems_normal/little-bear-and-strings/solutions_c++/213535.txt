#include<bits/stdc++.h>
using namespace std;
#define mod 100000007LL
#define maxval_n 2000000
#define sd(x) scanf("%d", &x)
#define LL long long

void SS(int n);
void gh(int n);
int rnk[maxval_n];
int  pos[maxval_n];
int cnt[maxval_n]; 
#define FOO 38940384
#define BAR 9834793749
int dfldjfl() ;
char test; 

int  nxt[maxval_n];
char in[maxval_n];

int str[maxval_n];
bool bh[maxval_n], b2h[maxval_n];

bool func__1(int a, int b){
  return str[a] < str[b];
}

int hh[maxval_n];



string s, string__1, string__2;
int sl, a1, a2;
int p1[maxval_n], p2[maxval_n];
int myarr_1[maxval_n], myarr_2[maxval_n];
void kmp()
{
    int k = 0;
        for(int i = 2; i < a1; i++){
            while(k > 0){
                if(string__1[k + 1] == string__1[i]){
                    break;
                }
                k = p1[k];
            }
            if(string__1[k + 1] == string__1[i]){
                k++;
            }
            p1[i] = k;
        }
        p2[1] = 0;
        k = 0;
        for(int i = 2; i < a2; i++){
            while(k > 0){
                if(string__2[k + 1] == string__2[i]){
                    break;
                }
                k = p2[k];
            }
            if(string__2[k + 1] == string__2[i]){
                k++;
            }
            p2[i] = k;
        }
        k = 0;
        for(int i = 1; i < sl; i++){
            while(k > 0){
                if(string__1[k + 1] == s[i]){
                    break;
                }
                k = p1[k];
            }
            if(string__1[k + 1] == s[i]){
                k++;
            }
            if(k == a1 - 1){
                k = p1[k];
                myarr_1[i - a1 + 2] = 1;
            }
        }
        myarr_2[0] = 0;
        for(int i = 1; i < sl; i++){
            while(k > 0){
                if(string__2[k + 1] == s[i]){
                    break;
                }
                k = p2[k];
            }
            if(string__2[k + 1] == s[i]){
                k++;
            }
            myarr_2[i] = myarr_2[i - 1];
            if(k == a2 - 1){
                k = p2[k];
                myarr_2[i]++;
            }
        }
        for(int i = 1; i < sl; i++){
            str[i - 1] = s[i] - 'a';
        }
}
void take_input()
{
        memset(myarr_1, 0, sizeof myarr_1);
        memset(myarr_2, 0, sizeof myarr_2);
        memset(hh, 0, sizeof hh);
        s = " " + s;
        sl = s.length();
        scanf("%s", in);
        string__1 = in;
        string__1 = " " + string__1;
        a1 = string__1.length();
        scanf("%s", in);
        string__2 = in;
        string__2 = " " + string__2;
        a2 = string__2.length();
        p1[1] = 0;
        kmp();
}
int main(){
    while(cin>>s){
        take_input();
        SS(sl - 1);
        gh(sl - 1);
        LL ans = 0;
        a1 = max(a1, a2);
        hh[sl - 1] = 0;
        for(int i = 1; i < sl; i++){
            if(myarr_1[pos[i - 1] + 1] == 1){
                if(sl - 1 - pos[i - 1] >= a1 - 1){
                    ans += myarr_2[sl - 1] - myarr_2[pos[i - 1] + a1 - 1 - 1];
                }
                if(hh[i] >= a1 - 1){
                    ans -= myarr_2[pos[i - 1] + hh[i]] - myarr_2[pos[i - 1] + a1 - 1 - 1];
                }
            }
        }
        cout<<ans<<endl;
    }
    return 0;
}

void gh(int n){
  for (int i=0; i<n; ++i) rnk[pos[i]] = i;
  hh[0] = 0;
  for (int i=0, h=0; i<n; ++i){
    if (rnk[i] > 0){
      int j = pos[rnk[i]-1];
      while (i + h < n && j + h < n && str[i+h] == str[j+h]) h++;
      hh[rnk[i]] = h;
      if (h > 0) h--;
    }
  }
}


void SS(int n){
  for (int i=0; i<n; ++i){
    pos[i] = i;
  }
  sort(pos, pos + n, func__1);

  for (int i=0; i<n; ++i){
    bh[i] = i == 0 || str[pos[i]] != str[pos[i-1]];
    b2h[i] = false;
  }

  for (int h = 1; h < n; h <<= 1){
    int buckets = 0;
    for (int i=0, j; i < n; i = j){
      j = i + 1;
      while (j < n && !bh[j]) j++;
      nxt[i] = j;
      buckets++;
    }
    if (buckets == n) break;

    for (int i = 0; i < n; i = nxt[i]){
      cnt[i] = 0;
      for (int j = i; j < nxt[i]; ++j){
        rnk[pos[j]] = i;
      }
    }

    cnt[rnk[n - h]]++;
    b2h[rnk[n - h]] = true;
    for (int i = 0; i < n; i = nxt[i]){
      for (int j = i; j < nxt[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0){
          int head = rnk[s];
          rnk[s] = head + cnt[head]++;
          b2h[rnk[s]] = true;
        }
      }
      for (int j = i; j < nxt[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0 && b2h[rnk[s]]){
          for (int k = rnk[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
        }
      }
    }
    for (int i=0; i<n; ++i){
      pos[rnk[i]] = i;
      bh[i] |= b2h[i];
    }
  }
  for (int i=0; i<n; ++i){
    rnk[pos[i]] = i;
  }
}

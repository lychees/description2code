
#include <bits/stdc++.h>

#define FOR(i,b,e) for(int i=(b); i <= (e); ++i)
#define FORD(i,b,e) for(int i=(b); i >= (e); --i)
#define SIZE(c) (int) (c).size()
#define FORE(i,c) FOR(i,0,SIZE(c)-1)
#define FORDE(i,c) FORD(i,SIZE(c)-1,0)
#define PB push_back
#define MP make_pair
#define ST first
#define ND second

using namespace std;

typedef long long int LLI;
typedef pair < int , int > PII;
typedef pair < LLI , LLI > PLL;

typedef vector < int > VI;
typedef vector < bool > VB;
typedef vector < PII > VP;
typedef vector < LLI > VL;
typedef vector < PLL > VPL;

typedef vector < VI > VVI;
typedef vector < VL > VVL;
typedef vector < VB > VVB;
typedef vector < VP > VVP;

const int MOD = 1000000007;
const int INF = 1000000001;
const LLI LLINF = 1000000000000000001LL;

/*************************************************************************/

typedef LLI LL;

struct entry {
    int x, c;
};

struct event {
    int i, k;
};

const int N = 50003;
const int K = 222;
const int M = N/K+10;
int a[N];
int md[N];

int l1[N], r1[N], l2[N], r2[N];
LL res[N];

vector<int> ve[N][2];

int c[M][N];
LL pres[M];
int cs[N];

LL get_res(int l1, int r1)
{
    LL res = 0;

    while(md[l1] && l1 <= r1) {
        res += cs[a[l1]];
        ++l1;
    }

    while(md[r1] != K-1 && r1 >= l1) {
        res += cs[a[r1]];
        --r1;
    }

    if(l1 > r1)
        return res;

    l1 /= K;
    r1 /= K;

    for(int i = l1; i <= r1; ++i)
        res += pres[i];

    return res;
}

int main()
{
    int n, q;
    scanf("%d", &n);
    for(int i = 0; i < n; ++i) {
        scanf("%d",a+i);
    }

    for(int i = 0; i < n; ++i)
        md[i] = i % K;


    int m = (n+K-1)/K;
    vector<int> pom;
    for(int i = 0; i < n; i += K) {
        int k = i/K;
        for(int j = i; j < i+K && j < n; ++j)
            ++c[k][a[j]];
    }



    scanf("%d", &q);
    for(int i = 0; i < q; ++i) {
        scanf("%d%d%d%d", l1+i, r1+i, l2+i, r2+i);
        --l1[i]; --r1[i]; --l2[i]; --r2[i];

        ve[l2[i]][0].push_back(i);
        ve[r2[i]][1].push_back(i);
    }

    for(int x = 0; x < n; ++x) {
        for(int i : ve[x][0]) {
            res[i] -= get_res(l1[i], r1[i]);
        }

        ++cs[a[x]];
        for(int i = 0; i < m; ++i)
            pres[i] += c[i][a[x]];

        for(int i : ve[x][1])
            res[i] += get_res(l1[i], r1[i]);
    }


    for(int i = 0; i < q; ++i)
        printf("%lld\n", res[i]);
    return 0;
}

/*************************************************************************/


#include <iostream>
#include <algorithm>
#include <cassert>

using namespace std;

struct worker
{
	long T, X, Y;
	worker(long _T, long _X, long _Y)
	{
		T = _T;
		X = _X;
		Y = _Y;
	}
};

bool mysort(worker w1, worker w2)
{
	if(w1.T < w2.T)
	{
		return true;
	}
	else if(w1.T == w2.T)
	{
		if(w1.Y > w2.Y)
		{
			return true;
		}
		else if(w1.Y == w2.Y)
		{
			if(w1.X <= w2.X)
				return true;
			else
				return false;
		}
		else
		{
			return false;
		}
	}
	else
	{
		return false;
	}
}

long max(long a, long b)
{
	if(a >= b)
		return a;
	return b;
}

int main()
{
    long N, D;
    cin >> N >> D;
    
    vector<worker> workers;
    
    for(long i = 0; i < N; i++)
    {
    	long T, X, Y;
    	cin >> T >> X >> Y;
    	workers.push_back(worker(T, X, Y));
    }
    
    sort(workers.begin(), workers.end(), mysort);
    
    long cost = 0;
    long workDone = 0;
    worker currentWorker(0, 0, 0);
    for(auto worker : workers)
    {
    	assert(worker.T >= currentWorker.T);
    		
    	if(worker.Y <= currentWorker.Y)
    		continue;
    		
    	workDone += max((worker.T - currentWorker.T) * currentWorker.Y, 0);
    	if(workDone >= D)
    		break;
    		
    	cost += worker.X;
    	currentWorker = worker;
    }
    
    cout << cost << endl;
    
    return 0;
}

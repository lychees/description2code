#include<iostream>
#include<math.h>
#define SIZE 1000001
using namespace std;

int primeFactors(int n)
{
    if(n==0 || n==1)
	return 0;
    // Print the number of 2s that divide n
    while (n%2 == 0)
    {
        return 2;
        n = n/2;
    }
 
    // n must be odd at this point.  So we can skip one element (Note i = i +2)
    for (int i = 3; i <= sqrt(n); i = i+2)
    {
        // While i divides n, print i and divide n
        while (n%i == 0)
        {
            return i;
            n = n/i;
        }
    }
 
    // This condition is to handle the case whien n is a prime number
    // greater than 2
    if (n > 2)
        return n;
}



int y(int n)
{
	if(n==0||n==1)
		return 0;
	long long int ans=0;
	for(int i=1;i<=sqrt(n);i++)
	{
		if(n%i==0)
			ans += i;
	}
	return ans;
}

/*int calcf(int n,int N)
{
	if(n==0)
		return 0;
	for(int i =1;i<=n;i++)
	
}*/

long long int calcg(int n)
{
	if(n==0)
		return 0;
	long long int ans=0;
	for(int i=1;i<=(n/2);i++)
	{
		if(n%i==0)
			ans += i;
	}
	return ans;
}


long long int ay(long long int n)
{
	long long int j=2,sum=1;
	while(j<=sqrt(n))
	{
		if(n%j==0)
		{
			if(j*j==n)
			sum=sum+j;
			else
			sum=sum+j+n/j;
		}
		j++;
	}
	return sum;
}


int main()
{
	int T,n,i;
	long long ans;
	long long * f = (long long*)malloc(SIZE*sizeof(long long));
	long long * g = (long long*)malloc(SIZE*sizeof(long long));
	f[0]=g[0]=f[1]=g[1]=0;
	for(i=2;i<=100000;i++)
	{
		f[i] = f[i-1] + primeFactors(i);
		g[i] = g[i-1] + ay(i);
	}
	
	
	cin>>T;
	
	
	while(T--)
	{
		cin>>n;
		ans = (f[n] + g[n])%n;
		cout<<ans<<endl;
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
int n,e;
vector<vector<int> > v(100001);
vector<pair<int,int> > ans;
bool visited[100001];
int discover[100001];
int parent[100001];
int low[100001];
int tym;

void DFS(int s)
{	
	visited[s]=true;	
	
	low[s] = discover[s] = ++tym;
	
	//cout<<s<<endl;
	for(int i=0;i<v[s].size();i++)
	{
		if(!visited[v[s][i]])
		{
			
			parent[v[s][i]]=s;
			
			DFS(v[s][i]);
			
			low[s]=min(low[s],low[v[s][i]]);
			
			if(discover[s]<low[v[s][i]])
			ans.push_back(make_pair(s,v[s][i]));
			
		}
		
		else if(v[s][i]!=parent[s])
		{
			low[s]=min(low[s],low[v[s][i]]);		
		}
	}
}

void APutil()
{
	for(int i=1;i<=n;i++)
	{
		parent[i]=-1;
		if(!visited[i])
		{
			DFS(i);
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin>>n>>e;
	vector<pair<int,int> > dodo;
	for(int i=0;i<e;i++)
	{
		int a,b;
		cin>>a>>b;
		v[a].push_back(b);		
		v[b].push_back(a);
		dodo.push_back(make_pair(a,b));
	}
	
	APutil();
	map<pair<int,int> , int> m;
	for(int i=0;i<ans.size();i++)
	{
		m[make_pair(ans[i].first,ans[i].second)]=1;
		m[make_pair(ans[i].second,ans[i].first)]=1;
	}
	
	int q;
	cin>>q;
	while(q--)
	{
		int query;
		cin>>query;
		query--;
		int ok=0;
		if(m.find(make_pair(dodo[query].first,dodo[query].second))!=m.end())
		{
			cout<<"Unhappy"<<endl;
		}
		else
		{
			cout<<"Happy"<<endl;
		}
	}
	return 0;
}
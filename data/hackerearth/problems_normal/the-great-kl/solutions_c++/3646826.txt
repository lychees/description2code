#include<bits/stdc++.h>
using namespace std;
vector <long long> a[100010], v[100010];
long long dist[100010], par[100010][19], dep[100010], n;
void dfs(long long x, long long papa){
  par[x][0]=papa;
  if(papa!=-1)
    dep[x]=dep[papa]+1;
  else
    dep[x]=0;
  for(long long i=0; i<a[x].size(); ++i){
    if(a[x][i]==papa)
      continue;
    dfs(a[x][i], x);
  }
}
void pre(){
  for(long long i=1; i<19; ++i){
    for(long long j=1; j<=n; ++j){
      if(par[j][i-1]>=1)
        par[j][i]=par[par[j][i-1]][i-1];
    }
  }
}
long long LCA(long long x, long long y){
  if(dep[x]<dep[y]){
    swap(x, y);
  }
  for(long long i=18; i>=0; --i){
    if(dep[par[x][i]]>=dep[y])
      x=par[x][i];
  }
  for(long long i=18; i>=0; --i){
    if(par[x][i]!=par[y][i]){
      x=par[x][i];
      y=par[y][i];
    }
  }
  if(x==y)
    return x;
  else
    return par[x][0];
}
long long dis(long long x, long long y){
  long long tmp=LCA(x, y);
  return dep[x]-dep[tmp]+dep[y]-dep[tmp];
}
int main()
{
    long long x, y, m, tmp1, tmp2, ans;
    cin>>n>>m;
    for(long long i=1; i<=n; ++i){
      cin>>x;
      v[x].push_back(i);
    }
    for(long long i=1; i<n; ++i){
      cin>>x>>y;
      a[x].push_back(y);
      a[y].push_back(x);
    }
    dfs(1, -1);
    pre();
    for(long long i=1; i<=m; ++i){
      ans=0;
      tmp2=0;
      for(long long j=0; j<v[i].size(); ++j){
        tmp1=dis(v[i][0], v[i][j]);
        if(ans<tmp1){
          tmp2=j;
          ans=tmp1;
        }
      }
      for(long long j=0; j<v[i].size(); ++j){
        ans=max(ans, dis(v[i][tmp2], v[i][j]));
      }
      cout<<ans<<" ";
    }
    return 0;
}

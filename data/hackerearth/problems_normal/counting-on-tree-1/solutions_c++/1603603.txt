#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T, class U> inline T tmax(T a, U b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 50005, K = 105;
int n, k, a[N];
vector<int> G[N];
ll dp[N][K], tmp[K];

void dfs(int v, int p) {
	bool add = 0;
	repu(i, 0, G[v].size()) {
		int u = G[v][i];
		if (u != p) {
			dfs(u, v);
			if (!add) {
				repu(j, 0, k + 1) dp[v][j] = dp[u][j];
				add = 1;
			}
			else {
				repu(j, 0, k + 1) tmp[j] = dp[v][j] + dp[u][j];
				repu(j, 0, k + 1) repu(l, 0, k + 1 - j) {
					tmp[j + l] = (tmp[j + l] + dp[v][j] * dp[u][l]) % MOD;
				}
				repu(j, 0, k + 1) dp[v][j] = tmp[j];
			}
		}
	}
	
	if (add) {
		repd(i, k, -1) dp[v][i + a[v]] = dp[v][i];
		if (a[v]) dp[v][0] = 0, dp[v][1]++;
		else dp[v][0]++;
	}
	else dp[v][a[v]] = 1;
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest, u, v;
    
    cin >> ntest;
    while (ntest--) {
    	cin >> n >> k;
    	int tot = 0;
    	repu(i, 1, n + 1) {
    		cin >> a[i];
    		tot += a[i];
    		G[i].clear();
    	}
    	repu(i, 1, n) {
    		cin >> u >> v;
    		G[u].push_back(v);
    		G[v].push_back(u);
    	}
    	if (tot < k) {
    		cout << 0 << endl;
    		continue;
    	}
    	mem(dp, 0);
    	dfs(1, 0);
    	
    	ll ans = 0;
    	repu(i, 1, n + 1) {
    		ans = (ans + dp[i][k]) % MOD;
    	}
    	cout << ans << endl;
    }
    return 0;
}

#include <cstdio>
#include <algorithm>
#include <cstring>

using namespace std;

const int INF = 1e9;
int t,c,n1,n5,n10,dp[155][505][505],sum;

int solve(int s, int x5, int x10){
	if(s == 0)
	return 0;
	int g = INF;
	int x1 = (sum - (c - s) * 8) - x5 * 5 - x10 * 10;
	if(x1 >= 8){
		if(dp[s - 1][x5][x10] == 0)
		solve(s - 1, x5, x10);
		g = min(g, dp[s - 1][x5][x10] + 8);
	}
	if(x1 >= 3 && x5 >= 1){
		if(dp[s - 1][x5 - 1][x10] == 0)
		solve(s - 1, x5 - 1, x10);
		g = min(g, dp[s - 1][x5 - 1][x10] + 4);
	}
	if(x5 >= 2){
		if(dp[s - 1][x5 - 2][x10] == 0)
		solve(s - 1, x5 - 2, x10);
		g = min(g, dp[s - 1][x5 - 2][x10] + 2);
	}
	if(x10 >= 1){
		if(dp[s - 1][x5][x10 - 1] == 0)
		solve(s - 1, x5, x10 - 1);
		g = min(g, dp[s - 1][x5][x10 - 1] + 1);
	}
	if(x10 >= 1 && x1 >= 3){
		if(dp[s - 1][x5 + 1][x10 - 1] == 0)
		solve(s - 1, x5 + 1, x10 - 1);
		g = min(g, dp[s - 1][x5 + 1][x10 - 1] + 4);
	}
	return dp[s][x5][x10] = g;
}

int main(){
	scanf("%d", &t);
	while(t--){
		memset(dp, 0, sizeof(dp));
		scanf("%d%d%d%d", &c, &n1, &n5, &n10);
		sum = n1 + n5 * 5 + n10 * 10;
		if(sum / 8 < c){
			printf("-1\n");
			continue;
		}
		printf("%d\n", solve(c, n5, n10));
	}
}
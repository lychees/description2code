#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
int parent[100000];

int findp(int x){
	if(parent[x]!=x)
	parent[x]=findp(parent[x]);
	return parent[x];
}

void unionf(int u,int v,int *rank){
	int pu=findp(u);
	int pv=findp(v);
if(rank[pu]<rank[pv])
parent[pu]=pv;
else if(rank[pv]<rank[pu])
parent[pv]=pu;
else{
	parent[pv]=pu;
	rank[pu]++;
}
}

int main()
{
	int pu,pv,m,n,u,v,w,i,k;
	cin>>n;
	cin>>m;
	int rank[100000];
	k=m;
	vector< pair< int,pair<int,int> > >a;
	while(k--){
		cin>>u>>v>>w;
		a.push_back({w,{u,v}});
	}
	sort(a.begin(),a.end());
	for(i=0;i<n;i++){
	parent[i]=i;
rank[i]=0;
	}
	
	long long int cost=0;
	int edges=0;
	i=0;
	
	while(i<m){
		u=a[i].second.first;
		v=a[i].second.second;
		pu=findp(u);
		pv=findp(v);
		if(pu!=pv){
			edges++;
			cost+=a[i].first;
		 unionf(u,v,rank);
		}

		if(edges==n-1)
		break;
		i++;
	}
	cout<<cost<<endl;
	
	
    //cout << "Hello World!" << endl;
    return 0;
}

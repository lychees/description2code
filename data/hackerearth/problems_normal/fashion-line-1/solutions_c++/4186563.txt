#include <iostream>
#include <vector>
using namespace std;
const int numL = 62;
int numSpecial(vector<int>& v, int L, int R, int N)
{
	int size = v.size();
	int lsum = 0;
	if ((L == 0) && (R == 0))
	{
		for(int j = 1; j <= (size-1); ++j)
		{
			lsum += (v[j]-v[j-1])*(v[j]-v[j-1]-1)/2;
		}
		return lsum;
	}else if (L == 0)
	{
		return numSpecial(v,0,0,N) + numSpecial(v,1,R,N);
	}else 
	{
		for(int j = 1; j <= (size-1-R); ++j)
		{
			lsum += (v[j]-v[j-1])*(v[R+j]-v[L+j-1]);
		}
		for(int j = max(1,(size-R)); j <= (size-1-L); ++j)
		{
			lsum += (v[j]-v[j-1])*(v[size-1]-v[L+j-1]);
		}
		return lsum;
	}
};
int mapping(char c)
{
	if (c >= 'a' && c <= 'z')
	{
		return c-'a';
	}else if (c >= 'A' && c <= 'Z')
	{
		return c-'A'+26;
	}else if (c >= '0' && c <= '9')
	{
		return c-'0'+52;
	}else
	{
		return -1;
	}
};
int main()
{
	int T;
	cin >> T;
	for(int i = 0; i < T; ++i)
	{
		int N,K,L,R;
		cin >> N >> K >> L >> R;
		string str;
		cin >> str;
		string qstr;
		cin >> qstr;
		bool S[numL];
		for(int j = 0; j < numL; ++j)
		{
			S[j] = false;
		}
		for(int j = 0; j < K; ++j)
		{
			if (mapping(qstr[j]) >= 0)
			{
				S[mapping(qstr[j])] = true;
			}
		}
		vector<int> v;
		v.push_back(-1);
		for(int j = 0; j < N; ++j)
		{
			if (S[mapping(str[j])])
			{
				v.push_back(j);
			}
		}
		v.push_back(N);
		int count = numSpecial(v,L,R,N);
		cout << count << endl;
	}
    return 0;
}

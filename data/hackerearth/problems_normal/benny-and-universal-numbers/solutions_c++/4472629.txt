#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long ll;

void Backtrack(ll nr, ll digit, vector<ll>& x, vector<bool>& pier, vector<ll>& r, vector<ll>& Z, ll maxi)
{
    x[nr] = digit;
    ll wart = 0;
    for (int i = 0; i <= nr; ++i) wart = 10LL * wart + x[i];
    if (wart % (nr + 1) != r[nr]) return;
    if (nr == maxi - 1)
    {
        bool db = false;
        for (int i = 0; i < maxi - 1; ++i) if (pier[10 * x[i] + x[i + 1]]) db = true;
        if (db) Z.push_back(wart);
        return;
    }
    for (ll i = 0; i < 10; ++i) Backtrack(nr + 1, i, x, pier, r, Z, maxi);
}

ll Ile(vector<ll>& Z, ll x)
{
    ll l = 0, p = Z.size() - 1, s, r = -1;
    while (l <= p)
    {
        s = (l + p) / 2;
        if (Z[s] <= x) r = s;
        if (Z[s] <= x) l = s + 1;
        else p = s - 1;
    }
    if (r != -1) return r + 1;
    return 0;
}

int main()
{
    ios_base::sync_with_stdio(0);
    vector<ll> r(15);
    for (int i = 0; i < 15; ++i)
    {
        cin >> r[i];
        r[i] %= (i + 1);
    }
    vector<bool> pier(100, false);
    for (int i = 2; i < 100; ++i)
    {
        bool db = true;
        for (int d = 2; d < i; ++d) if (i % d == 0) db = false;
        if (db) pier[i] = true;
    }
    vector<ll> Z;
    for (ll i = 2; i <= 15; ++i)
    {
        vector<ll> x(i);
        for (ll j = 1; j < 10; ++j) Backtrack(0, j, x, pier, r, Z, i);
    }
    sort(Z.begin(), Z.end());
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i)
    {
        ll a, b;
        cin >> a >> b;
        cout << Ile(Z, b) - Ile(Z, a - 1) << endl;
    }
    return 0;
}

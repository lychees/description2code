#include <stdio.h>
#include <iostream>
#include <string>
#include <stdint.h>
#include <memory.h>
#include <map>
#define ARRAY_SIZE(n) (sizeof(n)/sizeof(*n))

int grid[40][40];
int pay[40];
void readgrid(int N)
{
	memset(grid, 0, sizeof(grid));
	for (int y = 0; y < N; y++)
	{
		for (int x = 0; x < N; x++)
		{
			char C;
			std::cin >> C;
			if (C=='Y') grid[y][x] = 1;
		}
	}
}

// subordinate has pay
int salary(int y, int N)
{
	int total = 0;
	for (int x = 0; x < N; x++)
	{
		if (grid[y][x] == 1)
		{
			if (pay[x] == 0) return -1;
			// sum of subordinates
			total += pay[x];
		}
	}

	// leaf node
	if (total == 0) total = 1;
	pay[y] = total;
	return total;
}
void test(int t)
{
	int N;
	std::cin >> N;		
	memset(pay, 0, sizeof(pay));
	readgrid(N);

	for (int _n = 0; _n < N; _n++)
	for (int n = 0; n < N; n++)
	{
		salary(n, N);	
	}

	int sum = 0;
	for (int n = 0; n < N; n++)
		sum += pay[n];
	std::cout << sum << std::endl;

}
int main()
{
	int T;
	std::cin >> T;

	for (int t = 0; t < T;++t)
		test(t);
	return 0;
}
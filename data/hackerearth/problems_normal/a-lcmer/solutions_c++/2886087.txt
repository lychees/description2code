#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;
const int mod = 1e9 + 7;

inline int add(int a, int b) {
  return a+b >= mod ? a+b-mod : a+b;
}

inline int sub(int a, int b) {
  return a >= b ? a-b : a-b+mod;
}

inline int mul(int a, int b) {
  return llint(a)*b % mod;
}

int powmod(int a, int b) {
  if (b == 0) return 1;
  if (b&1) return mul(a, powmod(a, b-1));
  return powmod(mul(a, a), b/2);
}

const int MAX = 110;

int inv[MAX];

int choose(int n, int k) {
  if (n < k) return 0;

  int ans = 1;
  for (int i = n; i > n-k; --i) {
    ans = mul(ans, i);
  }    
  for (int i = 1; i <= k; ++i)
    ans = mul(ans, inv[i]);
  return ans;
}

int main(void) {
  REP(i, MAX) inv[i] = powmod(i, mod-2);

  int t;
  scanf("%d", &t);
  while (t--) {
    int n, l, r, x;
    scanf("%d %d %d %d", &n, &l, &r, &x);
    
    vector<pair<int, int>> v;
    for (int i = 2; i*i <= x; ++i)
      if (x % i == 0) {
        int cnt = 0;
        while (x % i == 0) x /= i, cnt++;
        v.push_back({i, cnt});
      }
    if (x > 1) v.push_back({x, 1});

    int m = v.size();

    vector<int> cnt(n+1, 0);

    REP(s, 1<<m) {
      vector<pair<int, int>> w;
      REP(i, m)
        if (s & (1<<i)) w.push_back(v[i]);

      int nums = 0;
      int k = w.size();
      REP(s2, 1<<k) {
        int u = 1, c = 0;
        REP(i, k)
          if (s2 & (1<<i)) {
            REP(j, w[i].second) u *= w[i].first;
            c++;
          }
        if (c % 2) nums -= r/u - (l-1)/u; else
          nums += r/u - (l-1)/u;
      }

      int ways = 1;
      FOR(i, 1, n+1) {
        ways = mul(ways, nums - i + 1);
        ways = mul(ways, inv[i]);
        if (k % 2) cnt[i] = sub(cnt[i], ways); else
          cnt[i] = add(cnt[i], ways);
      }
    }

    int ans = 0;
    FOR(k, 1, n+1) {
      ans = add(ans, mul(choose(n-1, k-1), cnt[k]));
    }
    printf("%d\n", ans);
  }
  return 0;
}

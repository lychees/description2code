#include <iostream>
#include <vector>
#include <queue>
using namespace std;

typedef pair<int, int> ii;
typedef vector<char> vc;
typedef vector<vc> vvc;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<int> vi;
typedef vector<vi> vvi;

vvc field;
vvb marked;
vvi distto;
int N;

bool valid(int y, int x, int N)
{
	return (y>=0 && y<N && x>=0 && x<N && field[y][x]!='T');
}

void bfs(int yini, int xini, int yend, int xend)
{
	queue<ii> qe;
	marked[yini][xini] = true;
	qe.push(make_pair(yini, xini));
	distto[yini][xini] = 0;
	while(!qe.empty())
	{
		int nx, ny;
		ii u = qe.front();
		qe.pop();
		ny = u.first-1; nx=u.second;
		if (valid(ny, nx, N) && marked[ny][nx]==false)
		{
			marked[ny][nx]=true;
			qe.push(make_pair(ny, nx));
			distto[ny][nx] = distto[u.first][u.second] + 1;
			if(field[u.first][u.second]=='E') break;
		}
		ny = u.first; nx=u.second+1;
		if (valid(ny, nx, N) && marked[ny][nx]==false)
		{
			marked[ny][nx]=true;
			qe.push(make_pair(ny, nx));
			distto[ny][nx] = distto[u.first][u.second] + 1;
			if(field[u.first][u.second]=='E') break;
		}
		ny = u.first+1; nx=u.second;
		if (valid(ny, nx, N) && marked[ny][nx]==false)
		{
			marked[ny][nx]=true;
			qe.push(make_pair(ny, nx));
			distto[ny][nx] = distto[u.first][u.second] + 1;
			if(field[u.first][u.second]=='E') break;
		}
		ny = u.first; nx=u.second-1;
		if (valid(ny, nx, N) && marked[ny][nx]==false)
		{
			marked[ny][nx]=true;
			qe.push(make_pair(ny, nx));
			distto[ny][nx] = distto[u.first][u.second] + 1;
			if(field[u.first][u.second]=='E') break;
		}
	}
}

int main()
{
	int xini, yini, xend, yend;
    cin >> N;
    field.assign(N, vc());
    marked.assign(N, vb());
    distto.assign(N, vi());
    for(int i=0;i<N;i++)
    {
    	field[i].assign(N, '\0');
    	marked[i].assign(N, false);
    	distto[i].assign(N, -1);
    	for(int j=0;j<N;j++)
    	{
    		cin >> field[i][j];
    		if (field[i][j]=='S')
    		{
    			yini = i;
    			xini = j;
    		} else if(field[i][j]=='E')
    		{
    			yend = i;
    			xend = j;
    		}
    	}
    }
    //bfs
    bfs(yini, xini, yend, xend);
    //print
    cout << distto[yend][xend] << endl;
    return 0;
}

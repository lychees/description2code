#include <iostream>
using namespace std;
long long int parents[100005],members[100005],factorial[100005];
long long int findleader(long long int a)
{
	if(parents[a]!=a)
		parents[a]=findleader(parents[a]);
	return parents[a];
}
void merge(long long int a,long long int b)
{
	long long int h1=findleader(a);
	long long int h2=findleader(b);
	if(h1==h2)
		return;
	if(members[h1]>=members[h2])
	{
		members[h1]+=members[h2];
		parents[h2]=h1;
	}
	else
	{
		members[h2]+=members[h1];
		parents[h1]=h2;
	}
}
long long int mod=1000000007;
int main()
{
    long long int n,k,p1,p2,l,r,result=1,h;
    cin>>n>>k;
    for(p1=0;p1<=n;p1++)
    {
    	parents[p1]=p1;
    	members[p1]=1;
    	if(p1>0)
    		factorial[p1]=((p1%mod)*(factorial[p1-1]%mod))%mod;
    	else
    		factorial[p1]=1;
    }
    for(p1=0;p1<k;p1++)
    {
    	cin>>l>>r;
    	merge(l,r);
    }
    for(p1=0;p1<n;p1++)
    {
    	if(parents[p1]==p1)
    	{
    		if(members[p1]>1)
    		{
    			result=((result%mod)*(factorial[members[p1]]%mod))%mod;
    		}
    	}
    }
    cout<<result%mod;
    return 0;
}

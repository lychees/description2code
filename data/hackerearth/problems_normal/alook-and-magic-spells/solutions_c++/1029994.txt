#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cstring>
#include <fstream>
#include <ctime>
#define LL long long
#define ULL unsigned long long
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define FO(i,a,b) for(int i=a;i<b;i++)
#define FORD(i,a,b) for(int i=a;i>=b;i--)
#define FOD(i,a,b) for(int i=a;i>b;i--)
#define FORV(i,a) for(typeof(a.begin()) i = a.begin(); i != a.end(); i++)
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define debug cout << "YES" << endl

using namespace std;

typedef pair<LL,LL>II;
typedef pair<int,II>PII;
template<class T> T gcd(T a, T b) {T r; while(b!=0) {r=a%b;a=b;b=r;} return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }

const double PI = 2*acos(0.0);
const double eps = 1e-9;
const int infi = 1e9;
const LL Linfi = (LL) 1e18;
const LL MOD = 1000000007;
const int c1 = 11;
const int c2 = 13;
#define maxn 1000009

int n = 3;
int k;

struct matrix{
    LL a[4][4];
    int size;
    friend ostream &operator<<(ostream &in, matrix m){
        FOR (i, 1, 3) {
            FOR(j,1, 3) cout << m.a[i][j] << " "; cout << endl;
        }
    }
};


matrix mulMatrix(matrix A, matrix B){
    matrix ans;
    ans.size = A.size;
    FOR(i,1,n)
    FOR(j,1,n) ans.a[i][j] = 0;

    FOR(i,1,n)
    FOR(j,1,n){
        LL dem = 0;
        FOR(k,1,n)
            dem += A.a[i][k] * B.a[k][j];
        dem %= MOD;
        ans.a[i][j] = dem;
    }
    return ans;
}


matrix powMatrix(matrix A, int p){
    matrix ans; /// ans = I;
    ans.size = A.size;
    FOR(i,1,n)
    FOR(j,1,n) ans.a[i][j] = 0;
    FOR(i,1,n) ans.a[i][i] = 1;
    while(p > 0){
        if(p % 2 == 1) ans = mulMatrix(A,ans);
        A = mulMatrix(A,A);
        p /= 2;
    }
    return ans;
}

matrix M, X;

void Init(){
    M.size = 3;
    M.a[1][1] = 1; M.a[1][2] = 1; M.a[1][3] = 0;
    M.a[2][1] = 0; M.a[2][2] = 2; M.a[2][3] = 4;
    M.a[3][1] = 0; M.a[3][2] = 1; M.a[3][3] = 0;
}

void solve(){
    X = powMatrix(M, k-1);
    LL ans = X.a[1][1]*2 + X.a[1][2] * 12 + X.a[1][3]*2;
    ans %= MOD;
    cout << ans << endl;
}

int main() {
    ios::sync_with_stdio(false);
    #ifndef ONLINE_JUDGE
    //freopen("test.in", "r", stdin);
    //freopen("test.out", "w", stdout);
    #endif
    Init();
    int sotest;
    cin >> sotest;
    while(sotest--){
        cin >> k;
        solve();
    }



    return 0;
}

#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <map>
#include <cctype>
#include <cmath>
#include <utility>
using namespace std;

typedef pair<int,int> ii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vll;

bool path(int start, int end, vector<vector<int>> &mat){
	if(start> end){
		return false;
	}
	
	for(auto &adj : mat[start]){
		if (adj == end){
			return true;
		}
	}
	
	for(auto &adj : mat[start]){
		if (adj < end){
			for(int i = (start+1); i<=adj; ++i){
				if(path(i, end, mat)){
					return true;
				}
			}
		}
	}
	
	
	return false;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	int t;
	cin>>t;
	
	while(t--){
		int n,length;
		cin>>n>>length;
		
		vector<vector<int>> mat(1000001, vector<int>());
		int maxv = -1;
		
		for(int i=0; i<n; ++i){
			int l,r;
			cin>>l>>r;
			mat[l].push_back(r);
			maxv = max(maxv, r);
		}
		/*
		int rownum = 1;
		for(auto row : mat){
			if(row.size()){
				cout<<rownum<<": ";
				for(auto e : row){
				cout<<e<<" ";
				}
				cout<<"\n";
			}
			rownum++;
		}
		*/
		bool found = false;
		for(int i=1; i<=maxv; ++i){
			if(mat[i].size()){
				//cout<<"\nStarting at "<<i<<"\n";
				//vector<bool> visited(1000001, false);
				//dfs(i, mat, visited, length, maxv, original);
				//if(found) break;
				if(path(i, i+length, mat)){
					found = true;
					break;
				}
				
			}
		}
		
		found ? cout<<"Yes\n" : cout<<"No\n";
	
	}
	
	return 0;
}
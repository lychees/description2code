#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <numeric>
#include <cmath>
#include <complex>
#include <map>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
typedef vector<string> vs;
const int mod = 1000000007;

vvl mul(const vvl & x, const vvl & y) {
    int n = x.size();
    vvl z(n, vl(n));
    for (int i = 0; i < n; ++i) for (int j = 0; j < n; ++j) {
        for (int l = 0; l < n; ++l)
            z[i][j] = (z[i][j] + x[i][l]*y[l][j]) % mod;
    }
    return z;
}

vvl mpow (vvl x, ll n) {
    vvl res(x.size(), vl(x.size()));
    for (int i = 0; i < x.size(); ++i)
        res[i][i] = 1;
    while (n) {
        if (n & 1) 
            res = mul(res, x);
        n /= 2;
        x = mul(x,x);
    }
    return res;
}

vi f(10);
ll brute(int n) {
	int cnt = 0;
	for (int x = pow(10, n-1); x < pow(10, n); ++x) {
		int res = 0, x1 = x;
		for (int i = 0; i < n; ++i) {
			int t = x1 % 10;
			if (!t) {
				res = 0;
				break;
			}
			x1 /= 10;
			res ^= f[t];
		}
		if (res) ++cnt;
	}
	return cnt;
}

int main() {
	for (int t = 1; t < 10; ++t) {
		int x = t;
		for (int d1 = 2; d1 <= x; ++d1) while (x % d1 == 0) {
			f[t] ^= d1;
			x /= d1;
		}
		//cerr << f[t] << endl;
	}
	vi d = {2,3,5,6,7};
	vi cnt = {2,1,1,1,1};
	vi v(1 << d.size());
	for (int mask = 1; mask < v.size(); ++mask) {
		int res = 0;
		for (int b = 0; b < d.size(); ++b) if (mask & (1 << b)) {
			res ^= f[d[b]];
		}
		v[mask] = 1;
		if (res) v[mask] = 1;
	}
	v[0] = v[1+2+8]=0;
	vvl a(v.size(), vl(v.size()));
	for (int i = 0; i < a.size(); ++i) {
		a[i][i] = 3;
		for (int j = 0; j < d.size(); ++j) {
			a[i ^ (1 << j)][i] += cnt[j];
		}
	}
	int T;
    cin >> T;
    for (int test = 1; test <= T; ++test) {
        ll n;
        cin >> n;
        vvl b = mpow(a, n);
        ll res = 0;
        for (int mask = 0; mask < v.size(); ++mask) if (v[mask])
        	res += b[mask][0];
       	cout << res % mod << endl;
       	//cout << brute(n) << endl;
        /*for (int mask = 0; mask < v.size(); ++mask) if (v[mask]) {
        	int cnt = 0;
			for (int b = 0; b < 9; ++b) if (mask & (1 << b))
				++cnt;
			
        }*/
    }
    return 0;
}
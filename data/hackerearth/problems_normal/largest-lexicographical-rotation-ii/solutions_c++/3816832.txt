#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

int N;
int nchars;
string text;
string largest;
vector<int> components;
char best_char;


int move() {
	int res = 0, sublen=0, index=1;
	while((res+sublen+1 < N) && (index < N)) {
		int diff = text[res+sublen] - text[(index+sublen)%N];
		//cout << diff << endl;
		if (diff == 0) {
			sublen++;
		} else if (diff < 0) {
			index += sublen+1; 
			sublen = 0;
		} else {  // diff > 0
			res = max(res + sublen +1, index);
			index = res + 1;
			sublen = 0;
			//cout << "diff>0 " << res << endl;
		}
	}
	return res;
}

 // Largest Lexicographical Rotation II 
 int main()
 {
 	cin >> text;
 	N = text.size();
 	//cout << text << endl;
 	for (int i = 0; i < N; ++i)
 		text[i] = 25-text[i]+'a'*2;
 	
	//cout << text << endl;

	int cut = move();

	for (int i = 0; i < N; ++i)
 		text[i] = 25-text[i]+'a'*2;

 	//cout << text << endl;

 	largest = "";
 	int index = cut;
 	for (int i = 0; i < N; ++i)
 	{
 		largest += text[index];
 		index++;
 		index %= N;
 	}
 	cout << largest << endl;
 }

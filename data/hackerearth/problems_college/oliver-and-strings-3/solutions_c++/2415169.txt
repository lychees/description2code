/* =====================================================================================
       Filename:  CybrillaQ1.cpp
    Description:  
        Created:  August 30, 2015 11:50 AM
         Author:  BrOkEN@!
===================================================================================== */

#include<fstream>
#include<iostream>
#include<sstream>
#include<bitset>
#include<deque>
#include<list>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<vector>
#include<algorithm>
#include<iterator>
#include<string>
#include<cassert>
#include<cctype>
#include<climits>
#include<cmath>
#include<cstddef>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<unordered_set>
#include<unordered_map>


using namespace std;

#ifndef CUSTOM_MACROS
#define CUSTOM_MACROS

template< class T > inline T _maxOfThree(T a, T b, T c) {
    return max(max(a, b), c);
}

template< class T > inline T _abs(T n) {
    return (n < 0 ? -n : n);
}

template< class T > T _square(T x) {
    return x * x;
}

template< class T > T gcd(T a, T b) {
    return (b != 0 ? gcd<T>(b, a % b) : a);
}

template< class T > T lcm(T a, T b) {
    return (a / gcd<T>(a, b) * b);
}

template< class T > bool in_range(T x, T i, T y) {
    return x <= i && i <= y;
}


#define FOR(i,a,b) for(typeof((a)) i=(a); i <= (b) ; ++i)
#define REV_FOR(i,a,b) for(typeof((a)) i=(a); i >= (b) ; --i)
#define FOREACH(it,x) for(typeof((x).begin()) it=(x).begin(); it != (x).end() ; ++it)
#define REV_FOREACH(it,x) for(typeof((x).rbegin()) it=(x).rbegin(); it != (x).rend() ; ++it)
#define SET(p, v) memset(p, v, sizeof(p))
#define CLR(p) SET(p,0)
#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)
#define ARRAY_SIZE(array) (sizeof(array) / sizeof((array)[0]))
#define __int64 long long

typedef pair<int, int> PI;
typedef vector<PI> VI;


const int MOD = 1e9 + 7;

inline int MODIT(int& val) {
    while (val >= MOD) val = val - MOD;
    while (val < 0) val = MOD + val;
    return val;
}

#endif

int charToVal(char c){
    if(std::isupper(c)){
        return c-'A'+1;
    }
    return c-'a'+1;
}

long calulateValue(string input){
    vector<int> val(input.size(),0);
    
    int i=1,j=input.size()-2;
    
    int k = 1,tuple=0;
    
    while(i<j && input[i]==input[j]){
        tuple++;
        val[i++]=k++;
        val[j--]=k++;
    }
    
    long sum = 200 + 200*tuple;
    
    if(i==j){
        val[i]=k;
        sum = sum+100;
    }else if(i<j){
        while(i<j)  val[i++]=k;
        val[j]=k+1;
    }else{
        sum = sum-100;
    }
    
    
    for(int k=0;k<input.size()-1;k++){
        sum += val[k]*charToVal(input[k]);
    }
    
    
    //copy(val.begin(), val.end(), ostream_iterator<int>(cout, "\t"));
    
    //cout<<endl;
    
    return sum;
}


int main(){
    int T;
    cin>>T;
    string input;
    for(int t=0;t<T;t++){
        cin>>input;
        cout<<calulateValue(input)<<endl;
    }
}
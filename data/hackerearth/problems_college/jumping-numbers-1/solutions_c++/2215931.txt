#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <list>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
using namespace std;

#define trace(x) cerr << #x << "=" << x <<endl;
#define track(x, n) {cerr << #x << ":" << endl; for (int i = 0; i < n; i++) {cerr << x[i] << " ";} cerr << endl;}

#define MAX 100005
#define MOD 4294967143

long long dp[350][15][15];
bool exist[350][15][15];
int n;


long long solve(int digit, int firstDig, int prevDig)
{
    if (digit == n) {
        if (prevDig - firstDig == 1 or  firstDig - prevDig == 1) {
            //cout << firstDig << " " << prevDig << endl;
            return 1;
        } else {
            return 0;
        }
    }
    if (!exist[digit][firstDig][prevDig])
    {
        long long answer = 0;
        if (prevDig < 10) {
            answer += solve(digit+1, firstDig, prevDig+1);
            answer %= MOD;
        }
        if (prevDig > 0) {
            answer += solve(digit+1, firstDig, prevDig-1);
            answer %= MOD;
        }
        dp[digit][firstDig][prevDig] = answer;
        exist[digit][firstDig][prevDig] = true;
    }
    return dp[digit][firstDig][prevDig];
}

int main()
{
    int t;
    cin >> t;
    while (t--) {
        memset(dp, 0, sizeof(dp));
        memset(exist, 0, sizeof(exist));
        cin >> n;
        long long answer = 0;
        for (int i = 1; i < 11; i++) {
            answer += solve(1, i, i);
            answer %= MOD;
        }
        cout << answer << endl;
    }
}

#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
typedef pair<LL,LL> pii;
const LL MAX = 112345;

LL X[MAX],Y[MAX],N;
pii Ax[MAX],Ay[MAX];
bool vis[MAX];

void solve(){
    cin >> N;
    for(LL i = 0; i < N; ++i)
        cin >> X[i] >> Y[i], Ax[i] = pii(X[i],i), Ay[i] = pii(Y[i],i);

    sort(Ax,Ax+N);
    sort(Ay,Ay+N);
    LL cost = 0;
    priority_queue<pii,vector<pii>,greater<pii> > pq;
    pq.push(pii(0,0));
    while(!pq.empty()){
        LL id = pq.top().second, add = pq.top().first;
        pq.pop();
        if (vis[id]) continue;
        cost += (LL)add;
        vis[id] = true;

        int id1 = lower_bound(Ax,Ax+N,pii(X[id],id)) - Ax;
        int id2 = lower_bound(Ay,Ay+N,pii(Y[id],id)) - Ay;
        if (id1 > 0 && !vis[Ax[id1-1].second])
            pq.push(pii(fabs(Ax[id1].first-Ax[id1-1].first),Ax[id1-1].second));
        if (id2 > 0 && !vis[Ay[id2-1].second])
            pq.push(pii(fabs(Ay[id2].first-Ay[id2-1].first),Ay[id2-1].second));
        if (id1 < N-1 && !vis[Ax[id1+1].second])
            pq.push(pii(fabs(Ax[id1].first-Ax[id1+1].first),Ax[id1+1].second));
        if (id2 < N-1 && !vis[Ay[id2+1].second])
            pq.push(pii(fabs(Ay[id2].first-Ay[id2+1].first),Ay[id2+1].second));
    }
    cout << cost << endl;
}

int main()
{
    ios_base::sync_with_stdio(0);
    solve();
    return 0;
}

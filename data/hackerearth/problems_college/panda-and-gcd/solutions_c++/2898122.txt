#include<bits/stdc++.h>
using namespace std;
const long long mod=1e9+7;
typedef long long int lld;

lld powP(lld a,lld b){
    if(b==0) return 1%mod;
    lld k;
    k=powP(a,b/2);
    k=k*k%mod;
    if(b%2==0) return k;
    else return a*k%mod;
}
long long arr[1000003],gcd[1000003],freq[1000003],subsets[1000003];
void ccountSubsets(long long arr[], long long n, long long gcd[], long long m)
{
    long long arrMax = 0; 
 
    for (long long i=0; i<n; i++)
    {
        arrMax = max(arrMax, arr[i]);
        freq[arr[i]]++;
    }
 
    for (long long i=arrMax; i>=1; i--)
    {
        long long sub = 0;
        long long add = freq[i];
 
        for (long long j = 2; j*i <= arrMax; j++)
        {
            add =(add+freq[j*i%mod])%mod;
            sub =(sub+subsets[j*i%mod])%mod;
        }
         
        subsets[i] = (powP(2,add) - 1 - sub+mod)%mod;
    }
 
    for (long long i=0; i<m; i++)
         cout << subsets[gcd[i]] <<" ";
}
 

int main()
{
    long long n,m;
    cin>>n;
    m=n;
    for(long long i=0;i<n;i++){
    	cin>>arr[i];
    	gcd[i]=arr[i];
    }
    ccountSubsets(arr, n, gcd, m);
    return 0;
}
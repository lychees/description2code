#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;

const int mod = 1e9 + 7;
const int MAX = 3500;

int add(int a, int b) {
  return a + b < mod ? a + b : a + b - mod;
}

int sub(int a, int b) {
  return a < b ? a-b+mod : a-b;
}

int mul(int a, int b) {
  return llint(a) * b % mod;
}


int f[MAX][MAX];
int g[MAX][MAX];
int dp[MAX][MAX];

int main(void) {
  int n, l, t, k;
  scanf("%d %d %d %d", &n, &l, &t, &k);
  
  dp[0][0] = 1;
  REP(i, n+1) REP(j, t+1) {
    dp[i][j] = add(dp[i][j], add(f[i][j], g[i][j]));
    f[i+1][j+1] = add(f[i+1][j+1], f[i][j]);
    g[i+1][j] = add(g[i+1][j], g[i][j]);

    int c = mul(i ? (k-1) : k, dp[i][j]);
    if (i + l <= n) {
      f[i+l][j+1] = add(f[i+l][j+1], c);
      g[i+l][j] = sub(g[i+l][j], c);
    }
    g[i+1][j] = add(g[i+1][j], c);
  }

  printf("%d\n", dp[n][t]);
  return 0;
}

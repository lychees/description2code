#include <cstdio>
#include <algorithm>
#include <iostream>
using namespace std;
const int inf=100009;
long long tree[inf];
long long tree2[inf];
int n,m;
void update (long long arr[],int x,long long v)
{
	for (;x<=n;x+=x&-x)
		arr[x]+=v;
}
long long query(long long arr[],int x)
{
	long long ans=0;
	for (;x;x-=x&-x)
		ans+=arr[x];
	return ans;
}
int main()
{
	long long a,b,c,d;
	//scanf("%d%d",&n,&m);
	cin>>n>>m;
	for (int i=1;i<=n;++i)
	{
		//scanf("%d",&a);
		cin>>a;
		update(tree2,i,1ll*i*a);
		update(tree,i,a);
	}
	while(m--)
	{
		//scanf("%d",&a);
		cin>>a;
		if (a==1)
		{
			//scanf("%d%d%d",&a,&b,&c);
			cin>>a>>b>>c;
			long long sol=0;
			int k=min(c,a);
			if (b<=k)
				sol+=1ll*a*(query(tree,k)-query(tree,b-1))-query(tree2,k)+query(tree2,b-1);
			k=max(a+1,b);
			if (k<=c)
				sol+=query(tree2,c)-query(tree2,k-1)-1ll*a*(query(tree,c)-query(tree,k-1));
			//printf("%lld\n",sol);
			cout<<sol<<"\n";
		}
		else
		{
			//scanf("%d%d",&a,&b);
			cin>>a>>b;
			update(tree,a,b);
			update(tree2,a,1ll*b*a);
		}
	}
}

#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
const ll MOD=4294967143;
int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        int n;
        cin>>n;
        ll numbers[11][11]={0};
        for ( int i=0; i<11; i++ ) {
            numbers[i][i]=1;

        }
        numbers[0][0]=0;
        for ( int i=1; i<n; i++ ) {
             ll nNUmbers[11]={0};
            for ( int k=0; k<11; k++ ) {
               
                nNUmbers[0]=numbers[k][1];
                nNUmbers[10]=numbers[k][9];
                for ( int j=1; j<10; j++ )
                    nNUmbers[j]=numbers[k][j-1]+numbers[k][j+1];


                for ( int j=0; j<11; j++ )
                    numbers[k][j]=nNUmbers[j]%MOD;
            }
        }
        
       ll total=0;
        total+=numbers[10][9];
        for(int i=1;i<10;i++)
            total+=numbers[i][i-1]+numbers[i][i+1];
        cout<<total%MOD<<endl;

    }
}

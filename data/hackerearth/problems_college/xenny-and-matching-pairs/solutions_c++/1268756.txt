#include <iostream>
#include <string.h>
using namespace std;
long long int a[1000002];
// Binary search (note boundaries in the caller)
// A[] is ceilIndex in the caller
long long int CeilIndex(long long int A[],long long int l,long long int r,long long int key) {
    long long int m;
 
    while( r - l > 1 ) {
        m = l + (r - l)/2;
        (A[m] >= key ? r : l) = m; // ternary expression returns an l-value
    }
 
    return r;
}
 
long long int lis(long long int A[],long long int size) {
    // Add boundary case, when array size is one
 
    long long int *tailTable   = new long long int[size];
    long long int len; // always points empty slot
 
    memset(tailTable, 0, sizeof(tailTable[0])*size);
 
    tailTable[0] = A[0];
    len = 1;
    for(long long int i = 1; i < size; i++ ) {
        if( A[i] < tailTable[0] )
            // new smallest value
            tailTable[0] = A[i];
        else if( A[i] > tailTable[len-1] )
            // A[i] wants to extend largest subsequence
            tailTable[len++] = A[i];
        else
            // A[i] wants to be current end candidate of an existing subsequence
            // It will replace ceil value in tailTable
            tailTable[CeilIndex(tailTable, -1, len-1, A[i])] = A[i];
    }
 
    delete[] tailTable;
 
    return len;
}
int main()
{
    long long int t,j,i,n,m,k,l;
    cin>>t;
    while(t--)
    {
    	cin>>n;
    	for(i = 0;i < n;i++)
    	{
    		cin>>a[i];
    	}
    	m = lis(a,n);
    	cout<<m<<endl;
    }
    return 0;
}

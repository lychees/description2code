//#define MYDEBUG
#define _CRT_SECURE_NO_WARNINGS
#define TASK "C-small-attempt0"
#pragma comment(linker, "/STACK:536870912")
#include <cstdio>
#include <iostream>
#include <iomanip> 
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <functional>
#include <cassert>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>

const int MOD = 1000000007;
const int INF = 1000000001;
const int MAXN = 100010;
const long double EPS = 1e-6;
const int HASH_POW = 29;
const long double PI = acos(-1.0);

using namespace std;

void my_return(int code)
{
#ifdef MYDEBUG
	cout << "\nTime = " << fixed << setprecision(3) << double(clock()) / CLOCKS_PER_SEC << endl;
#endif
	exit(code);
}

int n, x[3010], y[3010], xx[3010], yy[3010];
map <pair <int, int>, int> cnt;

int gcd(int a, int b)
{
	if (!b)
		return a;
	return gcd(b, a % b);
}

int main()
{
	cin.sync_with_stdio(0);
	cin.tie(0);
	mt19937 mt_rand(time(0));
#ifdef MYDEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	/*freopen(TASK".in", "rt", stdin);
	freopen(TASK".out", "wt", stdout);*/
	/*freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);*/
#endif

	scanf("%d", &n);
	for (int i = 1; i <= n; ++i)
		scanf("%d %d", &x[i], &y[i]);
	for (int i = 1; i <= n; ++i)
	{
		int g = gcd(abs(x[i]), abs(y[i]));
		xx[i] = x[i] / g, yy[i] = y[i] / g;
		++cnt[make_pair(xx[i], yy[i])];
	}

	long long ans = 0;
	for (int i = 1; i <= n; ++i)
	{
		for (int j = i + 1; j <= n; ++j)
		{
			int _y = x[i] + x[j], _x = y[i] + y[j];
			if (_x == 0 && _y == 0)
				continue;
			int g = gcd(abs(_x), abs(_y));
			_x /= g;
			_y /= g;
			_x = -_x;
			if (cnt.find(make_pair(_x, _y)) != cnt.end())
				ans += cnt[make_pair(_x, _y)];
			if (xx[i] == _x && yy[i] == _y)
				--ans;
			if (xx[j] == _x && yy[j] == _y)
				--ans;
			_x = -_x;
			_y = -_y;
			if (cnt.find(make_pair(_x, _y)) != cnt.end())
				ans += cnt[make_pair(_x, _y)];
			if (xx[i] == _x && yy[i] == _y)
				--ans;
			if (xx[j] == _x && yy[j] == _y)
				--ans;
		}
	}
	printf("%lld\n", 2*ans);

	my_return(0);
}
#include <iostream>
#include <string.h>
#include <stdio.h>
#include <vector>
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define ll long long int
#define M 1000000

ll number[M+10];
ll phi[M+10];
vector<ll> vprimes;
ll primes[M+10];

void sieve(){
	for(ll i=2;i<=M;i++){
		if(primes[i]==0){
			for(ll j=i*i;j<=M;j+=i)
				primes[j]=1;
			//cout<<"Hi"<<endl;
			vprimes.pb(i);
		}
	}
}

void _init(){
	memset(primes,0,sizeof(primes));
	sieve();
}

void checkExtraPrimes(ll start,ll end){
	for(ll i=start;i<=end;i++){
		if(number[i-start]!=1){
			phi[i-start]/=number[i-start];
			phi[i-start]*=(number[i-start]-1);
		}
	}
}

int main()
{
    //cout << "Hello World!" << endl;
    ll t,r,l,k;
    _init();
  //  cout << vprimes.size() << endl;
    cin >> t;
    
    while(t--){
		cin >> l >> r >> k;
		for(ll i=l;i<=r;i++){
			number[i-l]=i;
			phi[i-l]=i;
		}
		for(ll i=0;i<vprimes.size() && vprimes[i]*vprimes[i]<=r ;i++){
			
			ll pnum=vprimes[i];
			ll start=(l/pnum)*pnum;
			
			for(ll j=start;j<=r;j+=pnum){
				if(j>=l){
					while((number[j-l]%pnum)==0)
						number[j-l]/=pnum;
					phi[j-l]/=pnum;
					phi[j-l]*=(pnum-1);
				}
			}
		}
		
		checkExtraPrimes(l,r);
		
		ll count=0;
		
		for(ll i=l;i<=r;i++){
			//cout<<i<<" "<<phi[i-l]<<endl;
			assert(phi[i-l]>0);
			if((phi[i-l]%k)==0)
				count++;
		}
		
		printf("%.6lf\n",count/(double)(r+1-l));
    }
    return 0;
}

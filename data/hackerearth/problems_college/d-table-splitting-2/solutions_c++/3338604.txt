//Tanuj Khattar
#include<bits/stdc++.h>

using namespace std;

typedef pair<int,int>   II;
typedef vector< II >      VII;
typedef vector<int>     VI;
typedef vector< VI > 	VVI;
typedef long long int 	LL;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);

const int N = int(2e6)+10;
string s[N];
int n,m;
set<int> g[N];
int cmp,cnt,vis[N];
bool ok(int i,int j)
{
	return i>=0 && i<n && j>=0 && j<m;
}
void bfs(int u)
{
	queue<int> Q;
	Q.push(u);vis[u]=1;
	while(!Q.empty())
	{
		int u = Q.front();
		cnt++;
		Q.pop();
		for(auto w:g[u])
			if(!vis[w])
			{
				vis[w]=1;
				Q.push(w);
			}
	}
}
int main()
{
	fast_io;
	int t;cin>>t;
	while(t--)
	{
		cin>>n>>m;
		int nn = (n+1)*(m+1) + 1;
		for(int i=0;i<n;i++)cin>>s[i];
		for(int i=0;i<n;i++)
			for(int j=0;j<m;j++)
			{
				if((ok(i-1,j) && s[i-1][j]!=s[i][j]) || !ok(i-1,j))
				{
					int u = i*(m+1) + j;
					int v = i*(m+1) + j+1;
					g[u].insert(v);g[v].insert(u);
				}
				if((ok(i+1,j) && s[i+1][j]!=s[i][j]) || !ok(i+1,j))
				{
					int u = (i+1)*(m+1) + j;
					int v = (i+1)*(m+1) + j+1;
					g[u].insert(v);g[v].insert(u);
				}
				if((ok(i,j-1) && s[i][j-1]!=s[i][j]) || !ok(i,j-1))
				{
					int u = i*(m+1) + j;
					int v = (i+1)*(m+1) + j;
					g[u].insert(v);g[v].insert(u);
				}
				if((ok(i,j+1) && s[i][j+1]!=s[i][j]) || !ok(i,j+1))
				{
					int u = i*(m+1) + j+1;
					int v = (i+1)*(m+1) + j+1;
					g[u].insert(v);g[v].insert(u);
				}
			}
		cmp=0,cnt=0;
		bool ok=true;
		for(int i=0;i<nn;i++)
			if(!vis[i])
			{
				cnt=0;
				bfs(i);
				if(cnt==1)continue;
				cmp++;
				if(cmp>1)
				{
					ok=false;
					break;
				}
			}
		puts(ok?"YES":"NO");
		for(int i=0;i<nn;i++){g[i].clear();vis[i]=0;}
	}
	return 0;
}

#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;

bool isPrime[100001];
vector<int> pr;
ll fctr[100001];
ll qfctr[100001];
int mxPrime;

void setPrime();
void init();
void clrq(int a);
void cntFactor(int a);
void cntQFactor(int a);
ll res();

int mclr;

int main()
{
    init();
    int n, q, a;
    cin >> n;
    while(n--){
    	cin >> a;
    	cntFactor(a);
    }
    cin >> q;
    mclr = mxPrime;
    while(q--){
    	cin >> a;
    	clrq(mclr);
    	cntQFactor(a);
    	ll ans = res();
    	cout << ans << endl;
    }
    return 0;
}

ll res(){
	ll ans = -1;
	for(int i = 0; i <= mclr; ++i){
		if(qfctr[i] == 0) continue;
		if(ans == -1) ans = fctr[i]/qfctr[i];
		ans = min(ans, fctr[i]/qfctr[i]);
		if(ans == 0) return ans;
	}
	if(ans == -1) ans = 0;
	return ans;
}

void cntQFactor(int a){
	for(int i = 0; i < mxPrime; ++i){
		if(a <= 1) return;;
		if((a % pr[i]) == 0) {
			qfctr[i]++;
			a /= pr[i];
			mclr = i;
			i--;
		}
	}
}

void cntFactor(int a){
	for(int i = 0; i < mxPrime; ++i){
		if(a <= 1) return;
		if((a % pr[i]) == 0) {
			fctr[i]++;
			a /= pr[i];
			i--;
		}
	}
}

void clrq(int a) {
	for(int i = 0; i <= a; ++i){
		qfctr[i] = 0;
	} 
}

void init() {
	setPrime();
	for(int i = 0; i <= mxPrime; ++i){
		fctr[i] = 0;
	} 
}

void setPrime(){
	pr.clear();
	for(int i = 1; i <= 100000; ++i){
		isPrime[i] = true;
	}
	for(int i = 2; i <= 100000; ++i){
		if(isPrime[i] == false) continue;
		pr.push_back(i);
		for(int j = 2 * i; j <= 100000; j += i) {
			isPrime[j] = false;
		}
	}
	mxPrime = pr.size();
}
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <map>
#include <string>
#include <unordered_map>
#include <bits/stdc++.h>
#include <stdio.h>
using namespace std;

long long int find_max_sum_incr_subs(vector< pair <int,int> > &A,int n)
{    
    long long int i,j,max,maxs;
    vector <long long int> LSS(n);
    LSS[0] = A[0].second;
    for(i=1;i<n;i++)
    {
        maxs = 0;
        for(j=i-1 ; j>=0 ;j--)
        {
            if(A[j].second < A[i].second && A[j].first < A[i].first)
            {
                if(LSS[j] > maxs)
                    maxs = LSS[j];
            }
        }
        LSS[i] = maxs + A[i].second;
    }
    maxs = 0;
    for(i=0;i<n;i++)
    {
        if(LSS[i] > maxs)
            maxs = LSS[i];
    }
    // for(i=0;i<n;i++)
    //     cout << LSS[i] << " " ;
    // cout << endl;
    return maxs;
}


int main()
{
    long long int i,t,n,r,h,k,max_so_far,max_ending_here,result;
    cin >> t;
    for(k=0;k<t;k++)
    {
        cin >> n;
        vector< pair <int,int> > dim(n);
        for(i=0;i<n;i++)
            cin >> dim[i].first >> dim[i].second;
        sort(dim.begin(),dim.end());
        result = find_max_sum_incr_subs(dim,n);
        cout << result << endl;
        // max_so_far = dim[0].second;
        // max_ending_here = dim[0].second;
        // for(i=1;i<n;i++)
        // {
        //     if(dim[i].first > dim[i-1].first && dim[i].second > dim[i-1].second)
        //         max_ending_here = max_ending_here + dim[i].second;
        //     else
        //         max_ending_here = dim[i].second;
        //     if(max_ending_here > max_so_far)
        //         max_so_far = max_ending_here;
        // }
        // cout << max_so_far << endl;
    }
    return 0;
}
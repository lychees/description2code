#include <bits/stdc++.h>
using namespace std;

#define REPU(i, a, b) for (int i = (a); i < (b); ++i)
#define REPD(i, a, b) for (int i = (a); i > (b); --i)
#define MEM(a, x) memset(a, x, sizeof(a))
#define ALL(a) a.begin(), a.end()
#define UNIQUE(a) a.erase(unique(ALL(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T, class U> inline T tmin(T a, U b) { return (a < b) ? a : b; }
template<class T, class U> inline T tmax(T a, U b) { return (a > b) ? a : b; }
template<class T, class U> inline void amax(T &a, U b) { if (b > a) a = b; }
template<class T, class U> inline void amin(T &a, U b) { if (b < a) a = b; }
template<class T> inline T tabs(T a) { return (a > 0) ? a : -a; }
template<class T> T gcd(T a, T b) { while (b != 0) { T c = a; a = b; b = c % b; } return a; }

const int INF = (int) 1E9;
const int N = 605;

struct E {
    int to, cap, rev;
    E() {}
    E(int to, int cap, int rev) : to(to), cap(cap), rev(rev) {}
};

struct MaxFlow {
    vector<E> G[N];
    int level[N], iter[N];

    void add_edge(int from, int to, int cap) {
        G[from].push_back(E(to, cap, G[to].size()));
        G[to].push_back(E(from, 0, G[from].size() - 1));
    }
    
    void bfs(int s) {
        memset(level, -1, sizeof(level));
        queue<int> que;
        level[s] = 0;
        que.push(s);
        while (!que.empty()) {
            int v = que.front(); que.pop();
            for (int i = 0; i < G[v].size(); ++i) {
                E &e = G[v][i];
                if (e.cap > 0 && level[e.to] < 0) {
                    level[e.to] = level[v] + 1;
                    que.push(e.to);
                }
            }
        }
    }
    
    int dfs(int v, int t, int f) {
        if (v == t) return f;
        for (int &i = iter[v]; i < G[v].size(); ++i) {
            E &e = G[v][i];
            if (e.cap > 0 && level[v] < level[e.to]) {
                int d = dfs(e.to, t, tmin(f, e.cap));
                if (d > 0) {
                    e.cap -= d;
                    G[e.to][e.rev].cap += d;
                    return d;
                }
            }
        }
        return 0;
    }
    
    int max_flow(int s, int t) {
        int ans = 0;
        for (;;) {
            bfs(s);
            if (level[t] < 0) return ans;
            memset(iter, 0, sizeof(iter));
            int f;
            while ((f = dfs(s, t, INF)) > 0) {
                ans += f;
            }
        }
        return ans;
    }
};

const int M = 305;
int a[N], f[N << 1];

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int n, m;

	cin >> n >> m;
	REPU(i, 0, n) cin >> a[i];
	REPU(i, 0, n + m - 1) cin >> f[i];

	int l = 0, r = (int) 1e9;
	while (r - l > 1) {
		int mb = (l + r) >> 1;
		MaxFlow mf;
		int st = n + n, en = st + 1;
		REPU(i, 0, n) mf.add_edge(st, i, 1);
		REPU(i, 0, n) mf.add_edge(i + n, en, 1);
		REPU(i, 0, n) REPU(j, 0, n) {
			if (f[a[i] + j] <= mb) {
				mf.add_edge(i, j + n, 1);
			}
		}
		if (mf.max_flow(st, en) == n) r = mb;
		else l = mb;
	}
	cout << r << endl;
	
	return 0;
}

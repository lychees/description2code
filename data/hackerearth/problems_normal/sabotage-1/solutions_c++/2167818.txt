#include <iostream>
#include<vector>
using namespace std;

struct pair1{
	int u, v;
	bool removed;
};

int findParent(vector<int>&parentOfNodes, int node){
	if(parentOfNodes[node]==node)
		return node;
	else{
		parentOfNodes[node]=findParent(parentOfNodes, parentOfNodes[node]);
		return parentOfNodes[node];
	}
}

void linkIfNeeded(vector<pair1>&edges, int index, vector<int>&parentOfNodes){
	int parentOfU=findParent(parentOfNodes, edges[index].u);
	int parentOfV=findParent(parentOfNodes, edges[index].v);
	if(parentOfU!=parentOfV){//merege both
		parentOfNodes[parentOfU]=parentOfV;
		edges[index].removed=false;
	}
}

int main()
{
	int N, M;
	cin>>N>>M;
	vector<int> parentOfNodes(N+1);
	for(int i=1; i<N; i++)
		parentOfNodes[i]=i;
	vector<pair1> edges(M+1);
	for(int i=1; i<=M; i++){
		cin>>edges[i].u>>edges[i].v;
		edges[i].removed=true;
	}
		
	int K=M-(N-1);
	cout<<K<<endl;
	for(int i=M; i>=1; i--){
		linkIfNeeded(edges, i, parentOfNodes);
	}
	for(int i=1; i<=M; i++){
		if(edges[i].removed)
			cout<<i<<endl;
	}
    return 0;
}

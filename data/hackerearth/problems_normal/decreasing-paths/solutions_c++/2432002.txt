#include <bits/stdc++.h> 

using namespace std;
 
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(x) (int)((x).size()) 
#define forn(i,n) for (int i = 0; (i) < (n); ++i)
#define fornr(i,n) for (int i = (n) - 1; (i) >= 0; --i)
#define forab(i,a,b) for (int i = (a); (i) < (b); ++i)
#define forba(i,a,b) for (int i = (b) - 1; (i) >= (a); --i)
#define forit(it,c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
#define all(c) (c).begin(),(c).end() 

#ifdef LOCAL
    #define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
    #define eprintf(...) static_cast<void>(0)   
#endif

#ifdef _WIN32
    #define I64 "%I64d"
#else
    #define I64 "%lld"
#endif

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef unsigned int uint;
typedef vector <int> vi;
typedef pair <int, int> pii;

#define FNAME ""

const int MAXN = 1005, MOD = 1e9 + 7;
const int turn[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

int a[MAXN][MAXN], ans[MAXN][MAXN];
pair <int, pii> b[MAXN * MAXN];

bool good(int x, int y, int n)
{
    return x >= 0 && y >= 0 && x < n && y < n;
}

inline int add(int x)
{
    return x >= MOD ? x - MOD : x;
}

int main() 
{
#ifdef LOCAL    
    freopen(FNAME".in", "r", stdin);
    freopen(FNAME".out", "w", stdout); 
#endif    
    int n;
    scanf("%d", &n);
    int pos = 0;
    forn (i, n)
        forn (j, n)
        {
            scanf("%d", &a[i][j]);
            b[pos++] = mp(a[i][j], mp(i, j));
        }        
    sort(b, b + pos);
    int allAns = 0;
    forn (i, pos)
    {
        int x = b[i].sc.fs, y = b[i].sc.sc;
        ans[x][y] = 1;
        forn (g, 4)
        {
            int dx = x + turn[g][0], dy = y + turn[g][1];
            if (good(dx, dy, n) && a[dx][dy] < a[x][y])
                ans[x][y] = add(ans[x][y] + ans[dx][dy]);
        }
        allAns = add(allAns + ans[x][y]);
    }
    printf("%d\n", allAns);
    return 0;
}
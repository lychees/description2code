#include <bits/stdc++.h>
using namespace std;
class graph {
private:
    int N;
    vector< vector<int> > G;
    vector<int> visited;
    public:
    graph(int N){
    	this->N = N;
    	visited.assign(N,0);
    	G.resize(N);
    }
    void dfs(int s) {
    	visited[s] = 1;
    	for(auto i = 0; i < (int)G[s].size(); i++) {
    		int v = G[s][i];
    		if(visited[v] == 0) {
    			dfs(v);
    		}
    	}
    }
    void addedge(int a, int b) {
    	G[a].push_back(b);
    	G[b].push_back(a);
    }
    int count() {
    	int C = 0;
    	for(int i = 0; i < N; i++) {
    		if(visited[i] == 0) {
    			dfs(i);
    			C++;
    		}
    	}
    	return C;
    }
};
int main()
{
    int T,N,E,a,b;
    scanf("%d",&T);
    while(T--) {
    	scanf("%d%d",&N,&E);
    	graph G(N);
    	for(int i = 0; i < E; i++) {
    		scanf("%d%d",&a,&b);
    		G.addedge(a,b);
    	}
    	cout << G.count() << "\n";
    }
    return 0;
}

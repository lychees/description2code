#include <functional>
#include <algorithm>
#include <iostream>
#include <numeric>
#include <cassert>
#include <cstdlib>
#include <string>
#include <cstdio>
#include <vector>
#include <ctime>
#include <queue>
#include <set>
#include <map>
using namespace std;
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define fore(i, b, e) for (int i = (int)(b); i <= (int)(e); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef long long i64;
typedef unsigned long long u64;
const int inf = 1e9+100500;
const int maxn = 1050;
const int mod = 1000000007;

const int dx[] = {1,-1,0,0};
const int dy[] = {0,0,1,-1};
#define ok(x, y) ((x)>=0&&(y)>=0&&(x)<n&&(y)<n)

int n;
int a[maxn][maxn];
int d[maxn][maxn];
vector<pii> c[maxn];

int main() {
#ifdef HOME
    freopen("input.txt", "r", stdin);
#endif

    scanf("%d", &n);
    forn(i, n) forn(j, n) {
        scanf("%d", &a[i][j]);
        c[a[i][j]].pb({i, j});
    }
    int res = 0;
    forn(z, 101) {
        for (auto p: c[z]) {
            int x = p.fi, y = p.se;
            d[x][y] = 1;
            forn(i, 4) {
                int nx = x+dx[i], ny = y+dy[i];
                if (ok(nx, ny) && a[nx][ny] < z) {
                    d[x][y] += d[nx][ny];
                    d[x][y] %= mod;
                }
            }
            res += d[x][y];
            res %= mod;
        }
    }

    cout << res << endl;


#ifdef HOME
    cerr << "Time elapsed: " << clock() / 1000 << " ms" << endl;
#endif
    return 0;
}

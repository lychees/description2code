#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <utility>
#include <string>
#include <cstring>
#include <set>

using namespace std;

#define ll long long int
#define MOD 1000000007

#define check (x >= 1 && x <= n && y >= 1 && y <= m && v[x][y] == 1)

ll n, m, k;

pair <ll, ll> par[1001][1001];
ll v[1001][1001];
ll size[1001][1001];
ll fact[1000001];

pair <ll, ll> find_par(ll, ll);
void uni(ll, ll, ll, ll);

int main()
{
	//freopen("input", "rb", "stdin");
	//freopen("output", "w", "stdout");

	int t;
	cin >> t;

	ll i, j, k, a, b, c, x, y, ans;

	fact[0] = 1;
	for (i = 1; i <= 1000000; ++i) {
		fact[i] = (i * fact[i-1]) % MOD;
	}

	while (t--) {
		cin >> n >> m >> k;
		for (i = 1; i <= n; ++i) {
			for (j = 1; j <= m; ++j) {
				par[i][j] = make_pair(i, j);		
				size[i][j] = 1;
				v[i][j] = 0;
			}
		}

		for (i = 1; i <= k; ++i) {
			cin >> a >> b;
			v[a][b] = 1;
			x = a + 2; y = b + 1;
			if check {
				uni(a, b, x, y);
			}
			x = a + 2; y = b - 1;
			if check {
				uni(a, b, x, y);
			}
			x = a - 2; y = b + 1;
			if check {
				uni(a, b, x, y);
			}
			x = a - 2; y = b - 1;
			if check {
				uni(a, b, x, y);
			}	
			x = a + 1; y = b + 2;
			if check {
				uni(a, b, x, y);
			}
			x = a - 1; y = b + 2;
			if check {
				uni(a, b, x, y);
			}
			x = a + 1; y = b - 2;
			if check {
				uni(a, b, x, y);
			}
			x = a - 1; y = b - 2;
			if check {
				uni(a, b, x, y);
			}
		}

		ans = 1;
		for (i = 1; i <= n; ++i) {
			for (j = 1; j <= m; ++j) {
				if (par[i][j] == make_pair(i, j)) {
					ans = (ans * fact[size[i][j]]) % MOD;
				}
			}
		}

		cout << ans << endl;
	}

	return 0;
}

pair <ll, ll> find_par(ll x, ll y)
{
	if (par[x][y].first == x && par[x][y].second == y) {
		return par[x][y];
	} else {
		return (par[x][y] = find_par(par[x][y].first, par[x][y].second));
	}
}

void uni(ll x, ll y, ll a, ll b)
{
	pair <ll, ll> px, py;
	px = find_par(x, y);
	py = find_par(a, b);
	if (px != py) {
		par[px.first][px.second] = py;
		size[py.first][py.second] += size[px.first][px.second];
	}
}
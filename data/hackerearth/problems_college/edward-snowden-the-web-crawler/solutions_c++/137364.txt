#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
vector<int> v;
void computeLPSArray(string pat, int M,int *lps);

void KMPSearch(string pat,string txt)
{
    int M = pat.size();
    int N = txt.size();

    // create lps[] that will hold the longest prefix suffix values for pattern
    int *lps = (int *)malloc(sizeof(int)*M);
    int j  = 0;  // index for pat[]

    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, M, lps);

    int i = 0;  // index for txt[]
    while(i < N)
    {
      if(pat[j] == txt[i])
      {
        j++;
        i++;
      }

      if (j == M)
      {
       // printf("Found pattern at index %d \n", i-j);
        v.push_back(i-j);
        j = lps[j-1];
      }

      // mismatch after j matches
      else if(pat[j] != txt[i])
      {
        // Do not match lps[0..lps[j-1]] characters,
        // they will match anyway
        if(j != 0)
         j = lps[j-1];
        else
         i = i+1;
      }
    }
    free(lps); // to avoid memory leak
}

void computeLPSArray(string pat, int M, int *lps)
{
    int len = 0;  // lenght of the previous longest prefix suffix
    int i;

    lps[0] = 0; // lps[0] is always 0
    i = 1;

    // the loop calculates lps[i] for i = 1 to M-1
    while(i < M)
    {
       if(pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else // (pat[i] != pat[len])
       {
         if( len != 0 )
         {
           // This is tricky. Consider the example AAACAAAA and i = 7.
           len = lps[len-1];

           // Also, note that we do not increment i here
         }
         else // if (len == 0)
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}

// Driver program to test above function
int main()
{
    string  txt;
    string pat;
    string s1;
    int i;
    cin>>pat;
    string s = "";
    while(1){
        cin>>s1;
        s+=s1;
        if(s1=="exit"){
            break;
        }
   }
   txt=s;
   KMPSearch(pat, txt);
   for(i=0;i<v.size();i++){
        int j=v[i];
        while(txt[j]!='"'){
            cout<<txt[j];
            j++;
        }
        cout<<"\n";
   }
   return 0;
}

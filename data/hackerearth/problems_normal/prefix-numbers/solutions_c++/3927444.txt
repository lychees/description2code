#include <bits/stdc++.h>
#include <assert.h>
using namespace std;
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
#define PB push_back
#define MP make_pair
#define MOD 1000000007LL
#define endl "\n"
const ll UNDEF = -1;
template<typename T> inline bool chkmax(T &a, T b) { return a < b ? a = b, true : false; }
template<typename T> inline bool chkmin(T &a, T b) { return a > b ? a = b, true : false; }
const ull mod = 1LL<<32LL;
typedef vector<ull> vi;
typedef vector<vi> vvi;
vvi matrixUnit(ll n) {
    vvi res(n, vi(n));
    for (ll i = 0; i < n; i++)
        res[i][i] = 1;
    return res;
}
vvi matrixMul(const vvi &a, const vvi &b) {
    ll n = a.size();
    ll m = a[0].size();
    ll k = b[0].size();
    vvi res(n, vi(k));
    for (ll i = 0; i < n; i++)
        for (ll j = 0; j < k; j++)
            for (ll p = 0; p < m; p++)
                res[i][j] = (res[i][j] + ((a[i][p] * b[p][j])%mod)) % mod;
    return res;
}

vvi matrixPow(const vvi &a, ll p) {
	vvi ans=matrixUnit(a.size());
	vvi base=a;
	while(p>0) {
		if ((p%2)==0) {
			base=matrixMul(base,base);
			p/=2;
		}
		else {
			ans=matrixMul(base,ans);
			p--;
		}
	}
	return ans;
}
ll b[4][9][7];
int main() {
	ios_base::sync_with_stdio(false);
	ll n; cin>>n;
	ll lim=4*9*7;
	for (ll x=0;x<lim;x++) {
		b[x%4][x%9][x%7]=x;
	}
	vvi mat(lim, vi(lim));
	for (ll x=0;x<lim;x++) {
		for (ll d=1;d<10;d++) {
			if (((x*10+d)%d)==0) {
				ll y=(x*10+d)%lim;
				mat[x][y]++;
			}
		}
	}
	vvi res=matrixPow(mat,n);
	ll ans=0;
	for (ll y=0;y<lim;y++) {
		ans=(ans+res[0][y])%mod;
	}
	cout<<ans<<endl;
}
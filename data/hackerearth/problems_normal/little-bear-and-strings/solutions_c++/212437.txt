#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 300010

int max(int n,int m){
	return n>m?n:m;
}

int *cpf(char *pattern,int psize){
	int k=-1,i=1;
	int *pi=(int *)malloc(sizeof(int)*psize);
	if (!pi) return NULL;
	pi[0]=k;
	for(i=1;i<psize;i++){
		while(k>-1 && pattern[k+1]!=pattern[i])
			k=pi[k];
		if(pattern[i]==pattern[k+1])
			k++;
		pi[i]=k;
	}
	return pi;
}

int kmp(char *target,int tsize,char *pattern,int psize){
	int i;
	int *pi = cpf(pattern, psize);
	int k = -1;
	if (!pi)
		return -1;
	for (i=0;i<tsize;i++){
		while(k>-1 && pattern[k+1]!=target[i])
			k=pi[k];
		if(target[i]==pattern[k+1])
			k++;
		if(k==psize-1){
			free(pi);
			return i-k;
		}
	}
	return -1;
}

int ls,lsstr,lestr,n,d,e,i,j,k,h,test[MAX],fval[MAX],fval1[MAX],fval2[MAX],algo[MAX],fpa[MAX],dlp[MAX];
int c,s_algo[MAX],algo2[MAX],bsort[MAX],indexa[MAX],psum[MAX],b1[MAX],gent[MAX],arr[MAX],abso[2000];
char ps[MAX],mstr[MAX],sstr[MAX],estr[MAX],str1[MAX];

int main(){
	//freopen("D:\\input.txt","r",stdin);
    while(scanf("%s",mstr+1)!=EOF){
        for(i=0;i<2000;i++)
			abso[i]=0;
		for(i=0;i<MAX;i++){
            fval[i]=0,fpa[i]=0,indexa[i]=0,arr[i]=0,bsort[i]=0,test[i]=0;
            fval1[i]=0,fval2[i]=0,b1[i]=0,psum[i]=0,gent[i]=0,dlp[i]=0,algo[i]=0;
        }
		scanf("%s\n",sstr+1);
        scanf("%s\n",estr+1);
        ls=strlen(mstr+1),lsstr=strlen(sstr+1),lestr=strlen(estr+1);
        algo[1]=0,k=0,n=ls;
        
    	for(i=2;i<=lestr;i++){
    	    while(k>0 && estr[k+1]!=estr[i])
    	    k=algo[k];
    	    if(estr[k+1]==estr[i])
    	    k++;
    	    algo[i]=k;
    	}
    	k=0;
    	for(i=1;i<=ls;i++){
    	    fval[i]=fval[i-1];
    	    while(k>0 && mstr[i]!=estr[k+1])
    	    k=algo[k];
    	    
    	    if(mstr[i]==estr[k + 1]) k++;
    	    if(k==lestr){
    	        fval[i]++;
    	        k=algo[k];
    	    }
    	}
        algo[1]=0;
        k=0;
    	for(i=2;i<=lsstr;i++){
        	while(k>0 && sstr[k+1]!=sstr[i])
        	k=algo[k];
        	
        	if(sstr[k+1]==sstr[i])
        	k++;
        	algo[i]=k;
    	}
    	k=0;
    	for(i=1;i<=ls;i++){
    	    while(k>0 && mstr[i]!=sstr[k+1])
    	    k=algo[k];
    	    
	        if(mstr[i]==sstr[k+1]) k++;
	        if(k==lsstr){
	            test[i-lsstr+1]=1;
	            k=algo[k];
		    }
    	}
        for(i=1;i<=n;i++){
        	arr[i]=abso[mstr[i]];
       	 	abso[mstr[i]]=i;
    	}
    	c=0;
    	for(i=0;i<200;i++){
    	    j=abso[i];
    	    while(j!=0){
    	        c++;
    	        bsort[j]=c;
    	        if(j==abso[i]) fpa[c]=1;
        	    else fpa[c]=0;
        	    j=arr[j];
        	}
    	}
    fpa[n+1]=1;
    indexa[n+1]=0;
    bsort[0]=n+1;
    
    for(i=1;i<=n;i++)
    indexa[bsort[i]]=i,h=1;
    while(h<n){
        int l=0;
        
        for(i=1;i<=n+1;i++){
            if(fpa[i]==1){
                gent[l]=i-1;
                l=i;
                psum[i]=0;
            }
            dlp[i]=0;
            bsort[indexa[i]]=l;
        }
        
        /*
            for(j=i;j<=gent[i];j++){
                int d=indexa[j]-h;
                if(dlp[bsort[d]]==1){
                    for(k=bsort[d]+1;!fpa[k];k++)
                    dlp[k]=1;
                }
            }
            i=gent[i];
        }
		*/
        
        psum[bsort[n+1-h]]++;
        dlp[bsort[n+1-h]]++;
        
        for(i=1;i<=n;i++){
            for(j=i;j<=gent[i];j++){
                d=indexa[j]-h;
                
                if(d>0){
                    e=bsort[d];
                    bsort[d]=e+psum[e];
                    psum[e]++;
                    dlp[bsort[d]]=1;
                }
            }
            for(j=i;j<=gent[i];j++){
                d=indexa[j]-h;
                if(d>0&& dlp[bsort[d]]==1){
                    for(k=bsort[d]+1;!fpa[k] && dlp[k];k++)
                    dlp[k]=0;
                }
            }
            i=gent[i];
        }
        for(i=1;i<=n;i++)
        indexa[bsort[i]]=i,fpa[i]=fpa[i] | dlp[i];
        h=2*h;
    }
    k=0;  
    
        for(i=1;i<=n;i++){
        	int d=bsort[i];
        	if(d>1){
        	    j=indexa[d-1];
        	    while((i+k)<=n && (j+k)<=n && mstr[i+k]==mstr[j+k])
        	    k++;
        	    b1[d]=k;
        	    if(k>0)
        	    k--;
        	}
        	else b1[1]=0;
    }
    	long long ans=0;
    	
    	for(i=1;i<=ls;i++){
    	    j=indexa[i];
    	    k=j+max(lsstr-1,max(lestr-1,b1[i]));
    	    int u=0;
    	    if((k-1)>=0 && (k-1)<ls)
			u=fval[ls]-fval[k-1];
    	    long long v=u;
    	    /*
			b1[d]=k;
        	    if(k>0)
        	    k--;
			*/
    	    if(test[j]==1)
    	    ans=ans+v;
    	}
    	printf("%lld\n",ans);
    }
    return 0;
}
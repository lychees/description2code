#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;
typedef pair<int,int> ii;
char grid[105][105];
int cnt=0,topx[105];
queue <ii> q;
vector <ii> pts;
int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};
bool vis[105][105];
int h,w,l,n;
bool cmp(ii a, ii b){
	return a.first>b.first;
}
int main(){
	scanf("%d %d",&h,&w);
	for(int x=0;x<h;x++) scanf("%s",grid[x]);
	for(int x=0;x<w;x++) grid[h][x]='x';	
	scanf("%d",&n);
	while(n--){
		scanf("%d",&l);
		l=h-l;
		if(cnt){
			for(int y=w-1;y>=0;y--){
				if(grid[l][y]=='x'){
					grid[l][y]='.';
					break;
				}
			}
		}
		else{
			for(int y=0;y<w;y++){
				if(grid[l][y]=='x'){
					grid[l][y]='.';
					break;
				}
			}
		}
		cnt=1-cnt;
		memset(vis,0,sizeof(vis));
		q.push(ii(h,0));
		vis[h][0]=1;
		while(!q.empty()){
			ii v=q.front();
			q.pop();
			for(int d=0;d<4;d++){
				int x2=v.first+dx[d],y2=v.second+dy[d];
				if(x2<0||x2>h||y2<0||y2>=w) continue;
				if(grid[x2][y2]=='.'||vis[x2][y2]) continue;
				q.push(ii(x2,y2));
				vis[x2][y2]=1;
			}
		}
		int fall=h;
		for(int x=h;x>=0;x--){
			for(int y=0;y<w;y++){
				if(grid[x][y]=='x'&&vis[x][y]){
					topx[y]=x;
				}
				else if(grid[x][y]=='x'&&!vis[x][y]){
					fall=min(fall,topx[y]-x-1);
				}
			}
		}
		for(int x=h-1;x>=0;x--){
			for(int y=0;y<w;y++){
				if(grid[x][y]=='x'&&!vis[x][y]){
					grid[x+fall][y]='x';
					grid[x][y]='.';
				}
			}
		}
	}
	for(int x=0;x<h;x++) printf("%s\n",grid[x]);
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
int n,q;
int arr[100001],s[100001];
void initialize(int N)
{
for(int i = 0;i<=N;i++)
    {
    arr[ i ] = i ;
    s[ i ] = 1;
    }
}
int root (int i)
{
    while(arr[ i ] != i)
    {
        arr[ i ] = arr[ arr[ i ] ] ;
    i = arr[ i ];
    }
    return i;
}
void weighted_uni(int A,int B)
{
    int root_A = root(A);
    int root_B = root(B);
    if(s[root_A] < s[root_B ])
    {
        arr[ root_A ] = arr[root_B];
        s[root_B] += s[root_A];
    }
    else
    {
        arr[ root_B ] = arr[root_A];
        s[root_A] += s[root_B];
    }
}
bool f(int A,int B)
{
    if( root(A)==root(B) )       //if A and B have same root,means they are connected.
    return true;
    else
    return false;
}
int main()
{
    int ans;
    scanf("%d%d",&n,&q);
    initialize(n);
    multiset<int> ms;
    multiset<int>::iterator it;
    ms.clear();
    for(int i=0;i<n;i++)
    {
        ms.insert(1);
    }
    int a,b,x,y;
    while(q--)
    {
        scanf("%d%d",&a,&b);
        if(f(a,b)==true)
            printf("%d\n",ans);
        else
        {
            ans=1000001;
            x=s[root(a)];
            y=s[root(b)];
            it=ms.find(x);
            ms.erase(it);
            it=ms.find(y);
            ms.erase(it);
            ms.insert(x+y);
            weighted_uni(a,b);
            if(ms.size()==1)
                ans=0;
            else{
                it=ms.begin();
                int k,t;
                k=*it;
                t=k;
                ms.erase(it);
                for(it=ms.begin();it!=ms.end();it++)
                {
                    ans=min(ans,(*it)-k);
                    if(ans==0)
                        break;
                    k=*it;
                }
                ms.insert(t);
           }
           printf("%d\n",ans);
        }
        }
    return 0;
}

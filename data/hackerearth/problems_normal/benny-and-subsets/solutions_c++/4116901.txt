/*******************************************************************************
The woods are lovely , dark and deep

But I have some promises to keep

And miles to go before I sleep

And miles to go before I sleep !!!
IF YOU ARE LOOKING THIS YOU ARE RIGHT WAY
*******************************************************************************/
#include<stdio.h>
#include<vector>
#include<queue>
#include<stack>
#include<set>
#include<map>
#include<string>
#include<cmath>
#include<cstring>
#include<stdlib.h>
#include<iostream>
#include<string>
#include<algorithm>

#define MAX 100005
#define fi first
#define se second
#define pb push_back
#define s(a) scanf("%d",&a);
#define mem(a) memset(a,0,sizeof(0))

using namespace std;

typedef pair<int,int> p;
typedef pair<int,p> pii;

typedef struct nod
{
	int count;
	struct nod *left;
	struct nod *right;
}node;
/*
node * getnode()
{
	node *new1 = (node *)malloc(sizeof(node));
	new1->count = 0;
	new1->left = NULL;
	new1->right = NULL;
}
int N,X;
node *root = NULL;
int getcount(int n)
{
	int ans = 0;
	n ^= X;
//	printf("n : %d\n",n);
	node *cur = root;
	for(int i = 20 ; i >= 0 ; i--)
	{
		if(cur == NULL)
			return 0;
		if((n >> i)&1 == 1)
		{
			cur = cur ->right;
		}
		else
			cur = cur ->left;
	}
	if(cur == NULL)
		return 0;
	else
		return cur -> count;
}

void insert(int n,int count)
{
	node * cur = root;
	for(int i = 20 ; i >= 0 ; i--)
	{
		if((n>>i)&1 == 1)
		{
			if(cur -> right == NULL)
				cur -> right = getnode();
			cur = cur->right;
		}
		else
		{
			if(cur -> left == NULL)
				cur -> left = getnode();
			cur = cur->left;
		}
	}
	cur -> count = count;
}*/
long long int dp[2049][2049];
long long int ans[2097153][2];
int N,X;
#define MOD 10000007
vector<int> vp,v;

long long mymod(long long a)
{
	if(a < MOD)
		return a;
	return a % MOD;
}

int main()
{
	scanf("%d%d",&N,&X);
//	root = getnode();
//	insert(0);
	int temp = 0;
//	long long ans = 0;
	
	for(int i=  0; i < N ;i++)
	{
		int t;
		scanf("%d",&t);
		if(t > 1024)
			v.pb(t);
		else
			vp.pb(t);
	}
	
	dp[vp[0]][0] = 1;
	dp[0][0] += 1;
	for(int j = 1 ; j < vp.size() ;j++)
	{
		for(int i = 0 ; i < 2048 ; i++)
		{
			dp[i][j] = mymod(dp[i^vp[j]][j-1] + dp[i][j-1]);
		}
	}
	for(int i = 0 ; i < 2048 ; i++)
	{
//		if(i < 5)
//		printf("%d : %d\n",i,dp[i][vp.size()-1]);
		ans[i][0] = dp[i][vp.size() - 1];
//		ans += dp[i][vp.size()-1];
//		insert(i,dp[i][vp.size-1]);
//		ans %= MOD;
	}
	
	for(int j = 1 ; j <= v.size(); j++)
	{
//		printf("j : %d\n",j);
		int n= v[j-1];
		for(int i = 0 ; i < 2097152 ; i++)
		{
			ans[i][1] = mymod(ans[i][0] + ans[i^n][0]);
		}
		for(int i = 0 ; i < 2097152 ; i++)
			ans[i][0] = ans[i][1];
	}
	
	printf("%lld\n",ans[X][0]);
	return 0;
}
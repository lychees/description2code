#include <bits/stdc++.h>

using namespace std;

vector <int> V[1001];

void squarechain()
{
    int i,p,s,k;
    bool visit[1001];
    V[1].push_back(1);
    for (i=2; i<1001; ++i)
    {
        for (int j=1; j<1001; ++j)
            visit[j]=false;

        k=i;
        V[i].push_back(k);
        while (visit[k]==false)
        {
            visit[k]=true;
            p=k;
            int ans=0;
            while (p>0)
            {
                ans+=((p%10)*(p%10));
                p/=10;
            }
            V[i].push_back(ans);
            k=ans;
        }
    }
}

int main()
{
    int t,n,m,i,j,k;
    squarechain();
    //for (i=0;i<V[39].size();++i)
    //printf ("%d ",V[39][i]);
    scanf ("%d",&t);
    while (t--)
    {
        scanf ("%d %d",&n,&m);
        k=n;
        int ans;
        if (m<1001)
        {
            for (i=m; i>0; --i)
            {
                ans=0;
                while (n>0)
                {
                    ans+=((n%10)*(n%10));
                    n/=10;
                }
                n=ans;
            }
        }
        else
        {
            while (n>999)
            {
                ans=0;
                while (n>0)
                {
                    ans+=((n%10)*(n%10));
                    n/=10;
                }
                n=ans;
                m--;
            }
            k=V[n].size();
            if (m>k)
            {
                k=V[n][k-1];
                for (i=0; i<V[n].size(); ++i)
                    if (V[n][i]==k)
                        break;
                j=i;
                k=V[n].size();
                m-=i;
                k=k-j-1;
                ans=m%k;
                ans=V[n][ans+j];
            }
            else
                ans=V[n][m];
        }
        //for (i=0;i<V[n].size();++i)
        //printf ("%d ",V[n][i]);
        printf ("%d\n",ans);
    }
    return 0;
}

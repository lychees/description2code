#include <cstdio>
#include <algorithm>
using namespace std;

const int N = 100001;
const int b = 333;
int n, m, all;
long long f[N], ans[N];
int pos[N], a[N], au[N];
int L[N], R[N], l, r;

void add(int x, int val) {
  for (int i = x; i < n; i = (i | (i + 1))) f[i] += val;
}

long long get(int pos) {
  long long res = 0;
  for (int i = pos; i >= 0; i = (i&(i + 1))-1) res += f[i];
  return res;
}

int main() {
  scanf("%d%d", &n, &m);
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
    au[i] = a[i];
  }
  sort(au, au + n);
  for (int i = 0; i < n; i++) {
    int x = lower_bound(au, au + n, a[i]) - au;
    a[i] = x;
  }
  for (int i = 0; i < m; i++) {
    scanf("%d%d", &L[pos[i] = i], &R[i]);
    --L[i], --R[i];
  }
  sort(pos, pos + m, [](int x, int y) {
    if (L[x] / b == L[y] / b) 
      return R[x] / b < R[y] / b;
    return L[x] / b < L[y] / b; 
  });
  l = 0, r = -1, all = 0;
  long long inv = 0;
  for (int i = 0; i < m; i++) {
    int le = L[pos[i]], ri = R[pos[i]];
    while (l < le) {
      inv -= get(a[l] - 1);
      add(a[l], -1);
      l++, all--;
    }
    while (l > le) {
      l--, all++;
      add(a[l], 1);
      inv += get(a[l] - 1);
    }
    while (r < ri) {
      r++, all++;
      add(a[r], 1);
      inv += all - get(a[r]);
    }
    while (r > ri) {
      inv -= all - get(a[r]);
      add(a[r], -1);
      r--, all--;
    }
    ans[pos[i]] = inv;
  }
  for (int i = 0; i < m; i++) {
    printf("%lld\n", ans[i]);
  }
}
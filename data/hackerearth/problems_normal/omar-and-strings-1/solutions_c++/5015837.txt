#include <bits/stdc++.h>
using namespace std;

#define M 1000003

string S, T;
int Z[200005], countx[200005];
unsigned long long hashx[100005], uhashx[100005];

unsigned long long power(unsigned long long N, long long expo)
{
	unsigned long long ans = 1;
	
	while(expo)
	{
		if(expo%2)
			ans = ans*N;
		
		N = N*N;
		expo/= 2;
	}
	
	return ans;
}

int is_palin(int left, int right)
{
	unsigned long long m = power(M, right-left+1);
	
	if(hashx[right]-hashx[left-1]*m==uhashx[left]-uhashx[right+1]*m)
		return 1;
	
	return 0;
}

int solve1(int i, int left, int right)
{
	int mid = (left+right)/2;
	
	if(!is_palin(i-mid+1, i+mid-1))
		return solve1(i, left, mid-1);
	
	if((mid+right)/2==mid)
	{
		if(is_palin(i-right+1, i+right-1))
			return right;
		
		return mid;
	}
	
	return solve1(i, mid, right);
}

int solve2(int i, int left, int right)
{
	int mid = (left+right)/2;
	
	if(!is_palin(i-mid, i+mid-1))
		return solve2(i, left, mid-1);
	
	if((mid+right)/2==mid)
	{
		if(is_palin(i-right, i+right-1))
			return right;
		
		return mid;
	}
	
	return solve2(i, mid, right);
}

int main()
{
    cin >> S;
    int N = S.size();
    
    for(int i=0; i<N; i++)
    	hashx[i] = hashx[i-1]*M + S[i];
    for(int i=N-1; i>=0; i--)
    	uhashx[i] = uhashx[i+1]*M + S[i];
    
    int suff = N+2, pre = -1;
    
    for(int i=0; i<N; i++)
   	{
    	int palin = solve1(i, 1, min(i+1, N-i));
    	
    	if(i-palin+1==0)
    		pre = max(pre, i+palin-1);
    	if(i+palin-1==N-1)
    		suff = min(suff, i-palin+1);
   	}
   	
   	for(int i=1; i<N; i++)
   	{
   		int palin = solve2(i, 0, min(i, N-i));
   		
   		if(i-palin==0)
   			pre = max(pre, i+palin-1);
   		if(i+palin-1==N-1)
   			suff = min(suff, i-palin);
   	}
   	
   	for(int i=suff; i<N; i++)
   		T.push_back(S[i]);
   	for(int i=0; i<=pre; i++)
   		T.push_back(S[i]);
   	
   	int L = 0, R = 0;
   	countx[T.size()] = 1;
   	
   	for(int i=1; i<T.size(); i++)
   	{
   		if(i<=R)
   			Z[i] = min(Z[i-L], R-i+1);
   		
   		for(; i+Z[i]<T.size() && T[Z[i]]==T[i+Z[i]]; Z[i]++);
   		
   		if(i+Z[i]-1>R)
   			L = i, R = i+Z[i]-1;
   		
   		countx[Z[i]]++;
   	}
   	
   	for(int i=200000; i>=0; i--)
   		countx[i] += countx[i+1];
   	
   	cout << T << "\n";
   	
   	for(int i=1; i<=T.size(); i++)
   		printf("%d ", countx[i]);
   	
    return 0;
}

#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_set>
#include<unordered_map>
using namespace std;
#define MAX 300102
int K = 0;
int rankk[MAX];
int sa[MAX];
int tmp[MAX];
int lp[MAX];
vector<int> v;
bool cmp(int a, int b) {
	if (rankk[a] != rankk[b]) {
		return rankk[a] < rankk[b];
	}
	int aa = a + K < v.size() ? rankk[a + K] : -1;
	int bb = b + K < v.size() ? rankk[b + K] : -1;
	return aa < bb;
}
class solver {
public:
	vector<string> dat;
	void lcp() {
		for (int i = 0; i <= v.size(); i++) {
			rankk[sa[i]] = i;
		}
		int h = 0;
		lp[0] = 0;
		for (int i = 0; i < v.size(); i++) {
			int j = sa[rankk[i] - 1];
			if (h) {
				h--;
			}
			for (; j + h < v.size() && i + h < v.size(); h++) {
				if (v[j + h] != v[i + h]) {
					break;
				}
			}
			lp[rankk[i] - 1] = h;
		}
	}
	deque<pair<long long int, long long int> > q;
	long long int solve() {
		v.clear();
		int k = 10000;
		for (int i = 0;i < dat.size();i++) {
			for (int j = 0;j < dat[i].size();j++) {
				v.push_back(dat[i][j] - 'a');
			}
			if (i + 1 < dat.size()) {
				v.push_back(k);
			}
			k++;
		}
		
		for (int i = 0;i < v.size();i++) {
			rankk[i] = v[i];
			sa[i] = i;
		}
		rankk[v.size()] = -1;
		sa[v.size()] = v.size();
		for (K = 1; K <= v.size(); K *= 2) {
			sort(sa, sa + (int)v.size() + 1, cmp);
			tmp[sa[0]] = 0;
			for (int j = 1; j <= v.size(); j++) {
				tmp[sa[j]] = tmp[sa[j - 1]] + (int)cmp(sa[j - 1], sa[j]);
			}
			for (int i = 0; i <= v.size(); i++) {
				rankk[sa[i]] = tmp[sa[i]];
			}
		}
		lcp();
		q.clear();
		q.push_back(make_pair(0, 0));
		long long int r = 0;
		long long int cur = 0;///
		for (int i = 0;i < v.size();i++) {
			long long int nex = lp[i];
			long long int rang = 1;
			while (q.size() && q.back().first >= nex) {
				rang += q.back().second;
				cur -= q.back().first*q.back().second;
				q.pop_back();
			}
			q.push_back(make_pair(nex, rang));
			cur += nex*rang;
			r += cur;
		}
		return r;
	}
};
vector<string> a;
vector<string> b;

char buf[MAX];
int n;
int m;

solver s1;
solver s2;
solver s3;
/////////////
vector<string> al;
int main() {
	scanf("%d", &n);
	for (int i = 0;i < n;i++) {
		scanf("%s", buf);
		a.push_back(buf);
		al.push_back(buf);
	}
	cin >> m;
	for (int i = 0;i < m;i++) {
		scanf("%s", buf);
		b.push_back(buf);
		al.push_back(buf);
	}
	s3.dat = al;
	s2.dat = b;
	s1.dat = a;
	long long int ans = s3.solve() - s2.solve() - s1.solve();
	printf("%lld\n", ans);
	return 0;
}//
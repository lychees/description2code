#include <bits/stdc++.h>
#define mod ((int)(1e9)+7)
using namespace std;

int bit[2*123456],bitb[2*123456],n;

int read(int idx)
{
        int sum=0;
        while(idx>0)
        {
            sum+=bit[idx];
            idx-=idx&-idx;
        }
        return sum;
}

void upd(int idx)
{
    while(idx<=(2*n))
    {
            bit[idx]++;
            idx+=idx&-idx;
    }
}

int readb(int idx)
{
        int sum=0;
        while(idx>0)
        {
            sum+=bitb[idx];
            idx-=idx&-idx;
        }
        return sum;
}

void updb(int idx)
{
    while(idx<=(2*n))
    {
            bitb[idx]++;
            idx+=idx&-idx;
    }
}

long long powers[2*123456];
int main()
{
    scanf("%d",&n);
    powers[0]=1;
    for(int i=1; i<=2*n; i++) powers[i]=(2*powers[i-1])%mod;
    int arr[2*n];
    for(int i=0; i<2*n; i++) scanf("%d",&arr[i]);
    long long ans=0;
    for(int i=0; i<2*n; i++)
    {
        ans=(ans+(i-read(arr[i]))*powers[(n-2)]);
        ans=(ans+(i-readb(arr[i]))*powers[(n-2)]);
        ans=(ans+(i-read(arr[i]+n))*powers[(n-2)]);
        ans=(ans+(i-readb(arr[i]+n))*powers[(n-2)]);
        ans%=mod;
        upd(arr[i]);
        updb(arr[i]+n);
    }
    cout<<(ans+powers[n-1]+(n-2)*powers[n-2])%mod<<endl;
    return 0;
}

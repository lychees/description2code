from collections import OrderedDict


n, m = (int(i) for i in raw_input().split())

places = {}


for index, item in enumerate(raw_input().split()):
	places[item] = int(index)

dmatrix = [[float("inf") for i in range(0,n)] for j in range(0,n)];


for i in range(0,m):
	scanned = raw_input().split()
	dmatrix[ places [ scanned[0] ] ] [ places [ scanned[1] ] ]= int(scanned[2])
	dmatrix[ places [ scanned[1] ] ] [ places [ scanned[0] ] ]= int(scanned[2])
	
	
def floyd():

	global dmatrix
	for i in range(0, len(places)):
		prematrix = dmatrix
		dmatrix = [[min(prematrix[j][k], prematrix[j][i] + prematrix[i][k])  for j in range(0, len(places))] for k in range(0,len(places))]

floyd()

for i in range(0, int(raw_input())):
	scanned = raw_input().split()
	print dmatrix[places[ scanned[0] ]] [places [scanned [1] ]]

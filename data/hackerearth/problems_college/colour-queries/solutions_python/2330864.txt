# your code goes here
def mod(i):
	if(i<0):
		return -1*i
	else:
		return i

def func(grid,i,j,n,m,d):
	global visited
	sum = 0
	if(i>=n or i<0 or j>=m or j<0 or visited[i][j]):
		return 0
	else:
		visited[i][j] = True
		if(i+1<n and visited[i+1][j]==False and mod(grid[i][j]-grid[i+1][j])<=d):
			sum = sum + func(grid,i+1,j,n,m,d)
		if(j+1<m and visited[i][j+1]==False and mod(grid[i][j]-grid[i][j+1])<=d):
			sum = sum + func(grid,i,j+1,n,m,d)
		if(i-1>=0 and visited[i-1][j]==False  and mod(grid[i][j]-grid[i-1][j])<=d):
			sum = sum + func(grid,i-1,j,n,m,d)
		if(j-1>=0 and visited[i][j-1]==False  and mod(grid[i][j]-grid[i][j-1])<=d):
			sum = sum + func(grid,i,j-1,n,m,d)
		
	return sum+1
		
def cleanVisited():
	global visited
	visited = []
	for x in range(n):
		vrow = [False for y in range(m)]
		visited.append(vrow)

n,m,q = map(int, raw_input().split())
val = []
visited = []
queries = []
for x in range(n):
	row = map(int, raw_input().split())
	val.append(row)

	
for x in range(q):
	que = map(int, raw_input().split())
	queries.append(que)
	
for x in range(q):
	cleanVisited()
	print(func(val,queries[x][0]-1,queries[x][1]-1,n,m,queries[x][2]))

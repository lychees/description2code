#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>


using namespace std;

#define point pair <int,int>

int cross_pro(pair <int,int> a,pair <int,int> b,pair <int,int> c)
{
    int cross;
    
    int ab[2],ac[2];
    
    ab[0] = b.first - a.first;
    ab[1] = b.second - a.second;
    ac[0] = c.first - a.first;
    ac[1] = c.second - a.second;
    
    cross = ab[0]*ac[1] - ab[1]*ac[0];
    
    return cross;
}

int main()
{
    int n,m,bx,by,ans,i,j,px,b,g,x,y,c;
    
    scanf("%d%d%d%d",&n,&m,&bx,&by);
    
    point B(bx, by);
    
    vector < point > points(n);
    for (i = 0; i < n; i++)
    {
        scanf("%d%d",&x,&y);
        points[i] = make_pair(x, y);
    }

    vector< point > rope(m + 1);
    for (i=0;i<=m;i++)
    {
        scanf("%d%d",&x,&y);
        rope[i] = make_pair(x, y);
    }

    px = points[0].first;
    
    vector< int > cuts;
    
    for (i=0;i<m;i++)
    {
        if ((rope[i].first>px)^(rope[i+1].first>px))
        {
            c=0;
            for(j=0;j<n;j++)
                if (cross_pro(rope[i],rope[i+1],points[j]) > 0)
                    c++;
            if (rope[i+1].first > px)
                c = n - c;
            cuts.push_back(c);
        }
    }

    ans = n;
    for (b=1;b<(1 << n);b++)
    {
        g = 0;
        vector<int> group(n + 1);
        group[0] = 0;
        for (i = 0; i < n; i++)
        {
            if (b & (1 << i))
            g++;
                
            group[i+1] = g;
        }
        stack <int> s;
        for (i=0;i<cuts.size();i++)
        {
            g = group[cuts[i]];
            
            if(!s.empty() && g == s.top())
            s.pop();
            
            else
            s.push(g);
        }
        if (s.empty())
        ans = min(ans,n - __builtin_popcount(b));
    }
    printf("%d\n",ans);
}

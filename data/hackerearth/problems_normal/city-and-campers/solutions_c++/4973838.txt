#include<bits/stdc++.h>
using namespace std;
int parent[100005];
map<int,int>M;
set<int>S;
int size[100005];
int findparent(int X)
{if(parent[X]==X)
  return X;
  else return  findparent(parent[X]);
}
int main()
{
 int N,Q;
 scanf("%d%d",&N,&Q);
 
 int i;
 for (i=1;i<=N;i++)
  {parent[i]=i;size[i]=1;
  M[1]++;
  S.insert(1);}
  int maxi=1,mini=1;
  while(Q--)
   {int a,b;
    scanf("%d%d",&a,&b);
    int p=findparent(a);
    int q=findparent(b);
    if(p!=q)
    {
	if(size[q]>size[p])
     {
	 parent[p]=q;
     M[size[p]]--;
     M[size[q]]--;
     if(M[size[p]]==0)
     S.erase(size[p]);
     if(M[size[q]]==0)
     S.erase(size[q]);
    // int temp=size[q];
     size[q]+=size[p];
     M[size[q]]++;
     //M[temp]--;
     ///if(M[temp]==0)
     // {S.erase(temp);
	 // }
     if( M[size[q]]==1)
      S.insert(size[q]);
     }
     else 
     {parent[q]=a;
      int t=size[q];
      size[q]=0;
      M[t]--;
      if(M[t]==0)
      {S.erase(t);
	  }
	  int temp=size[p];
	  size[p]+=t;
	  M[temp]--;
	  if(M[temp]==0)
	  S.erase(temp);
	  M[size[p]]++;
	  S.insert(size[p]);
	 }
      }
      int first=*(S.begin());
      set<int>::iterator it;
      it=S.end();
      it--;
      int last=*it;
      printf("%d\n",last-first);
   }
}
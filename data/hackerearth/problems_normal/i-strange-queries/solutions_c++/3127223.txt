/*
-----------------------------------------------------------------------------
Author :            ---------------------------------------------------------
    UTKAR$H $AXENA  ---------------------------------------------------------
    IIT INDORE      ---------------------------------------------------------
-----------------------------------------------------------------------------
*/
#include<bits/stdc++.h>
#include<iostream>
using namespace std;
#define fre 	freopen("0.in","r",stdin);freopen("0.out","w",stdout)
#define abs(x) ((x)>0?(x):-(x))
#define MOD 1000000007
#define LL signed long long int
#define scan(x) scanf("%d",&x)
#define print(x) printf("%d\n",x)
#define scanll(x) scanf("%lld",&x)
#define printll(x) printf("%lld\n",x)
#define rep(i,from,to) for(int i=from;i <= to; ++i)
#define pii pair<int,int>
int B;
int N,Q;
int freq[1000000+5];
int A[50000+5];
LL dp[225][50000+5];
int block(int x){
	return x/B;
}
int start(int blok){
	return blok*B;
}
int end(int blok){
	return min(blok*B + B-1,N-1);
}
LL blockQuery(int blok,int L,int R){
	return dp[blok][R] - (L>0?dp[blok][L-1]:0);
}
LL brute(int L1,int R1,int L2,int R2){
	LL ans = 0;
	for(int i=L1;i<=R1;++i){
		freq[A[i]]++;
	}
	for(int i=L2;i<=R2;++i){
		ans += freq[A[i]];
	}
	for(int i=L1;i<=R1;++i){
		freq[A[i]] = 0;
	}
	return ans;
}
LL query(int L,int R,int l,int r){
	if(start(block(l))==l and end(block(r))==r and block(r)==block(l)){
		return blockQuery(block(l),L,R);
	}
	LL ans = brute(L,end(block(L)),l,r) + brute(start(block(R)),R,l,r) ;
	for(int i=block(L)+1;i<block(R);++i){
		ans += blockQuery(i,l,r);
	}
	return ans;
}
int main(){
	//fre;
	int L1,L2,R1,R2;
	cin>>N;
	B = sqrt(N);
	for(int i=0;i<N;++i){
		scan(A[i]);
	}
	for(int b=0;start(b)<=N;++b){
		int L = start(b);
		int R = end(b);
		for(int j=L;j<=R;++j){
			freq[A[j]] += 1;
		}
		for(int i=0;i<N;++i){
			dp[b][i] = (i>0?dp[b][i-1]:0) + freq[A[i]];
		}
		for(int j=L;j<=R;++j){
			freq[A[j]] = 0;
		}
	}
	cin>>Q;
	while(Q--){
		scan(L1);
		scan(R1);
		scan(L2);
		scan(R2);
		L1--;R1--;L2--;R2--;
		if(abs(block(L1)-block(R1))<= 1 and abs(block(L2)-block(R2))<= 1){
			printll(brute(L1,R1,L2,R2));
			continue;
		}
		if(abs(block(L1)-block(R1))<= 1 ){
			printll(query(L2,R2,L1,R1));
			continue;
		}
		if(abs(block(L2)-block(R2))<= 1 ){
			printll(query(L1,R1,L2,R2));
			continue;
		}
		LL ans = 0;
		for(int i=block(L2)+1;i<block(R2);++i){
			ans += blockQuery(i,L1,R1);
		}
		ans += query(L1,R1,L2,end(block(L2)));
		ans += query(L1,R1,start(block(R2)),R2);
		printll(ans);
	}
}

#include<iostream>
#include<cstdio>
#include<climits>
#include<string>
#include<cstring>
#include<algorithm>
#include<vector>
#include<stack>
#include<queue>
#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<utility>
#include<fstream>
using namespace std;
 
#define inp(a) scanf("%d",&a)
#define out(a) printf("%d\n",a)
#define inpll(a) scanf("%lld",&a)
#define outll(a) printf("%lld\n",a)
 
#define VI vector<int>
#define VLL vector<long long int>
#define PQI priority_queue<int>
#define PQLL priority_queue<long long int>
#define VP vector<pair<int,int> >
 
#define ll long long int
#define mod 1000000007

#define sz(a) a.size()
#define mem(a,val) memset(a,val,sizeof(a))
#define mp make_pair 
#define X first
#define Y second
#define pb push_back
#define rep(i,a,b) for(i=a;i<b;i++)
//#define n 150000
/*inline void inp(int *n)
{
    *n = 0;
    int ch = getchar_unlocked();
    while(ch < '0' || ch > '9') 
    {
        ch = getchar_unlocked();
    }
    while(ch >= '0' && ch <= '9')
        (*n) = ((*n)<<3) + ((*n)<<1) + ch - '0', ch = getchar_unlocked();
}*/
 
bool compare(const pair<ll,ll>& p,const pair<ll,ll> &q){
	return p.X<q.X;
}
bool compare1(const pair<ll,ll>& p,const pair<ll,ll> &q){
	return p.Y<q.Y;
}


/*bool comp(const node &x,const node &y){
	return x.a<y.a;
}*/
#define N 155
#define INF 99999999

VI v[N];
int cap[N][N];
int i,j,k,n,t,x,y,val,so,si,m;

void bfs(int so,int si){
    int a[N]={0},parent[N]={0},visited[N]={0};
    a[so]=INF; parent[so]=-1; visited[so]=1;

    queue<int> q;
    q.push(so); 
    while(!q.empty()){
        int idx=q.front();
        q.pop();

        rep(i,0,v[idx].size()){
            int val=v[idx][i];
            if(!visited[val]){
                q.push(val);
                visited[val]=1;
                int pp=min(a[idx],cap[idx][val]);
                if(pp>a[val]){
                    a[val]=pp;
                    parent[val]=idx;
                } 
            }
            else{
               // cout<<idx<<'\n';
                int pp=min(a[idx],cap[idx][val]);
                if(pp>a[val]){
                    a[val]=pp;
                    parent[val]=idx;
                    rep(j,0,v[val].size()){
                        int tt=v[val][j];
                        pp=min(a[val],cap[val][tt]);
                       // cout<<"<<pp<<'\n';
                        if(a[tt]<pp){
                            a[tt]=pp;
                            parent[tt]=val;
                        }
                    }
                }
            }          
        }   
    }
    
   // cout<<a[si]<<'\n';
    VI vv;
    vv.pb(si);
    int cur_node=si;
    while(parent[cur_node]!=-1){
        int node = parent[cur_node];
        vv.pb(node);
        cur_node=node;
    }
    
    for(i=vv.size()-1;i>=0;i--) cout<<vv[i]<<' ';
    cout<<'\n';
    int l=1;
    k=a[si];
    m+=1;
    while(l*k<m){
		l++;
		m++;
	}
	cout<<l;
    
    /*int rem=m%value;
    //cout<<value<<" "<<rem<<" "<<m<<'\n';
    if((m%value)) cout<<(m/value)+1<<'\n';
   	else cout<<(m/value)<<'\n';*/
}

int main(){
    inp(n); inp(k);
    rep(i,0,k){
        inp(x); inp(y); inp(val);
        v[x].pb(y); v[y].pb(x);
        cap[x][y]=val;
        cap[y][x]=val;        
    }
    inp(so); inp(si); inp(m);
    bfs(so,si);
    return 0;
}


#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>

using namespace std;
const int N=10005;
int n,m,q;
int a,b;
int x;
vector<int> e[N];
int low[N],num[N];
bool vis[N],art[N];
int cnt;
int root;
int ww;
void dfs(int u,int p){
vis[u]=1;
num[u]=low[u]=cnt++;
for(int i=0;i<e[u].size();i++){
    int vv=e[u][i];
    if(!vis[vv]){
if(u==root){ww++;}
        dfs(vv,u);
        if(num[u]<=low[vv]){
    art[u]=1;

}
        low[u]=min(low[u],low[vv]);

    }else{
if(vv!=p){low[u]=min(low[u],num[vv]);}

}




}


}

int main(){
//freopen("in.txt","r",stdin);
//afreopen("out.txt","w",stdout);
scanf("%d %d",&n,&m);
for(int i=0;i<m;i++){
        scanf("%d %d",&a,&b);
e[a].push_back(b);
e[b].push_back(a);
}
for(int i=1;i<=n;i++){
    if(!vis[i]){
        root=i;
        ww=0;
        dfs(root,i);
       if(ww>1){art[root]=1;}else{art[root]=0;}

    }

}
scanf("%d",&q);

while(q--){
        scanf("%d",&x);
if(art[x]){
    printf("Satisfied %d\n",(int)e[x].size());

}else{
printf("Not Satisfied\n");
}

}




return 0;}

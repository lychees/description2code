#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define dbg(x) cout << #x << " = " << x << endl
#define dbg2(x,y) cout << #x << " = " << x << ", " << #y << " = " << y << endl
#define dbg3(x,y,z) cout << #x << " = " << x << ", " << #y << " = " << y << ", " << #z << " = " << z << endl
#define out(x) cout << (x) << endl
#define out2(x,y) cout << (x) << " " << (y) << endl

int n, v[16];

int main()
{
    for(; scanf("%d", &n) == 1; ) {
        long long x;
        memset(v, 0, sizeof(v));
        for(int i = 0, j, k, y; i < n; i ++) {
            scanf("%lld", &x); y = 0;
            do {
                k = x % 10;
                switch( k ) {
                case 2: y |= 1 << 0; break;
                case 3: y |= 1 << 1; break;
                case 5: y |= 1 << 2; break;
                case 7: y |= 1 << 3; break;
                default: break;
                } x /= 10;
            } while( x );
            for(k = y; k > 0; k = (k - 1) & y)
                v[k] ++;
        }
        x = 0;
        for(int i = 1, j, k; i < 16; i ++) {
            k = 0;
            for(j = 0; j < 4; j ++)
                if( i & (1 << j) )
                    k ++;
            if( k & 1 )
                x += (long long)v[i] * (v[i] - 1) * (v[i] - 2) / 6LL;
            else
                x -= (long long)v[i] * (v[i] - 1) * (v[i] - 2) / 6LL;
        }
        printf("%lld\n", x);
    }
    return 0;
}

#include<bits/stdc++.h>
using namespace std;

struct node {
    int arrivalTime;
    int departureTime;
};

const int N=1e6+10;
node a[N];
bool isPrime[N];
const int inf=1e9+9;
vector<node>vec;

bool compare(node a,node b) {
    return a.arrivalTime<b.arrivalTime;
}
int main() {
    priority_queue<int,vector<int>,greater<int> >pq;
    isPrime[0]=isPrime[1]=true;
    for(int i=2;i<N;i++) {
        if(isPrime[i]==false) {
            for(int j=2*i;j<N;j+=i) {
                isPrime[j]=true;
            }
        }
    }
    int cnt=1;
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++) {
        int h,m,s;
        scanf("%d%d%d",&h,&m,&s);
        int tm=3600*h+60*m+s;
        if(isPrime[tm]==false) {
            node res;
            res.arrivalTime=tm;
            res.departureTime=tm+5*60;
            vec.push_back(res);
        } else if(tm%2) {
            node res;
            res.arrivalTime=tm;
            res.departureTime=tm+3*60;
            vec.push_back(res);
        } else {
            node res;
            res.arrivalTime=tm;
            res.departureTime=tm+2*60;
            vec.push_back(res);
        }
    }
    sort(vec.begin(),vec.end(),compare);
    pq.push(vec[0].departureTime);
    for(int i=1;i<vec.size();i++) {
        int d=vec[i].arrivalTime;
        int j=pq.top();
        if(d>=j) {
            pq.pop();
            pq.push(vec[i].departureTime);
        } else {
            cnt++;
            pq.push(vec[i].departureTime);
        }
    }
    printf("%d\012",cnt);
    return 0;
}

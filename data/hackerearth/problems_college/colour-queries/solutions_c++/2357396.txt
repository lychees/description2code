#include <iostream>
#include <queue>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <cstring>
using namespace std;
struct node {
	int x,y;
};

int main()
{
    //cout << "Hello World!" << endl;
    int m,n,q;
    cin >> m >> n >> q;
    long int arr[m][n];
    bool visit[m][n];
    for ( int i = 0; i < m; i++) {
    	for ( int j = 0; j < n; j++) {
    		cin >> arr[i][j];
    		visit[m][n] = 0;
    	}
    }
    long int x,y,d;
    queue<node> qu;
    node c;
    long int count = 0;
    for ( int i = 0; i < q; i++) {
    	memset(visit,0,m*n);
    	cin >> x >> y >> d;
    	x--;
    	y--;
    	c.x = x;
    	c.y = y;
    	visit[x][y] = 1;
    	qu.push(c);
    	count = 0;
    	int tra[] = { -1, 1};
    	int x1,y1,x2,y2;
    	node z;
    	while (qu.size() != 0) {
    		c = qu.front();
    		qu.pop();
    		count++;
    		for ( int j = 0; j < 2; j++) {
    			x1 = c.x + tra[j];
    			y1 = c.y;
    			if ( x1 >= 0 && x1 < m && visit[x1][y1] == 0 && abs(arr[x1][y1]-arr[c.x][c.y]) <= d) {
    				visit[x1][y1] = 1;
    				z.x = x1;
    				z.y = y1;
    				qu.push(z); 				
    			}
    		}
    		for ( int j = 0; j < 2; j++) {
    			x1 = c.x;
    			y1 = c.y + tra[j];
    			if ( y1 >= 0 && y1 < n && visit[x1][y1] == 0 && abs(arr[x1][y1]-arr[c.x][c.y]) <= d) {
    				visit[x1][y1] = 1;
    				z.x = x1;
    				z.y = y1;
    				qu.push(z); 				
    			}
    		}		
    	}
    	cout << count << endl;
    }
    return 0;
}

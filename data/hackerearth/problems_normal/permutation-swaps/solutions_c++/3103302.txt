#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;

#define MAX 100002

int t;

int belong[MAX];
inline int root(int b){
	if (belong[b] == -1){
		return b;
	}
	belong[b] = root(belong[b]);
	return belong[b];
}
void merge(int a, int b){
	a = root(a);
	b = root(b);
	if(a==b)return;
	belong[a] = b;
	return;
}
int a[MAX];
int b[MAX];

map<int, vector<int> > mp;
map<int, vector<int> > mpp;
int main(){
	int t;
	cin >> t;
	while (t--){
		int n;
		int m;
		cin >> n >> m;
		for (int i = 0; i < n; i++){
			scanf("%d", &a[i]);
		}
		for (int i = 0; i < n; i++){
			scanf("%d", &b[i]);
		}
		for(int i=0;i<n;i++){
			belong[i]=-1;
		}
		for (int i = 0; i < m; i++){
			int a, b;
			scanf("%d%d", &a, &b);
			a--;
			b--;
			merge(a, b);

		}
		mp.clear();
		mpp.clear();
		for (int i = 0; i < n; i++){
			mp[root(i)].push_back(a[i]);
			mpp[root(i)].push_back(b[i]);
		}
		bool ng = false;
		for (auto it = mp.begin(); it != mp.end(); it++){
			auto itt=mpp.lower_bound((*it).first);
			sort((*it).second.begin(),(*it).second.end());
			sort((*itt).second.begin(),(*itt).second.end());
			if ((*itt).second != (*it).second){
				ng = true;
				break;
			}
			itt++;
		}
		if (ng == false){
			puts("YES");
		}
		else{
			puts("NO");
		}
	}
	return 0;
}
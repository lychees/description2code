    #include <cstdio>
    #include <algorithm>
    #include <cmath>
    #include <cassert>
    using namespace std;
    long long pow(long long a, long long p, long long m){
    long long ans = 1LL;
    //printf("Checking %lld ^ %lld\n", a, p);
    while(p){
    if(p&1){
    ans = (ans * a)%m;
    }
    p = p >> 1;
    a = (a*a)%m;
    }
    //printf("%lld\n", ans);
    return ans;
    }
    long long modInv(long long a, long long b){
    //return pow(a, b-2, b);
    long long b0 = b, t, q;
    long long x0 = 0, x1 = 1;
    if(b==1)
    return 1;
    while(a>1){
    if(b==0)
    assert(false);
    q = a/b;
    t = b, b=a%b, a=t;
    t=x0, x0=x1 - q*x0, x1=t;
    }
    if(x1<0)
    x1+=b0;
    return x1;
    }
    long long solve(long long N, long long P){
    //printf("Solving %lld %lld %lld\n", N, P, P-3*N);
    long long ans = 1;
    for(long long i = 3*N+1;i<P;i++){
    ans = (ans * i)%P;
    }
    //printf("Before Mod inv1: %lld\n", ans);
    ans = modInv(ans, P);
    //printf("Mod inv1: %lld\n", ans);
    ans = (-1*ans + P)%P;
    //printf("Mod inv2: %lld\n", ans);
    ans = (ans*pow(3,P-N-1, P))%P;
    //printf("%lld\n", ans);
    ans = (ans*pow(2,P-N-1, P))%P;
    return ans%P;
    }
    bool isPrime(long long P){
    for(long long i=2;i*i<=P;i++)
    if(P%i==0)
    return false;
    return true;
    }
    int main(){
    int T;
    long long N, P;
    scanf("%d", &T);
    assert(T>0 and T<=10000);
    while(T--){
    scanf("%lld %lld", &N, &P);
    assert(N>0 and N<=333333333LL);
    assert(P>0 and P<=1000000000LL);
    assert(abs(3*N-P)<=1000);
    assert(abs(3*N-P)>0);
    //assert(isPrime(P));
    if(3*N>=P)
    printf("0\n");
    else
    printf("%lld\n", solve(N, P));
    }
    return 0;
    }

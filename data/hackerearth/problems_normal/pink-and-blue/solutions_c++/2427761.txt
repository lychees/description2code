#include<bits/stdc++.h>

using namespace std;

int main()
{
	int n,m;
	char c;
	cin >> n >> m;
	map<int, char> mp;
	for(int i=1;i<=n;i++)
	{
		cin >> c;
		mp[i]=c;
	}
	list<int> adj[100005];
	int f1,f2;
	for(int i=0;i<m;i++)
	{
		cin >> f1 >> f2;
		adj[f1].push_back(f2);
		adj[f2].push_back(f1);
	}
	bool visited[100005]={0};
	queue<pair<int, char> > q;
	q.push(make_pair(1, 'B'));
	visited[1]=1;
	int inversion=0;
	while(!q.empty())
	{
		pair<int, char> front=q.front();
		if(mp[front.first]!=front.second)
			inversion++;
		//cout << mp[front.first] << " " << inversion << " " << front.first << " " << front.second << endl;
		q.pop();
		list<int>::iterator it;
		for(it=adj[front.first].begin();it!=adj[front.first].end();it++)
		{
			if(visited[*it]==0)
			{
				if(front.second=='B')
					q.push(make_pair(*it, 'G'));
				else
					q.push(make_pair(*it, 'B'));
				visited[*it]=1;
			}	
		}
	}
	bool visited1[100005]={0};
	queue<pair<int, char> > q1;
	q1.push(make_pair(1, 'G'));
	visited1[1]=1;
	int inversion1=0;
	while(!q1.empty())
	{
		pair<int, char> front1=q1.front();
		if(mp[front1.first]!=front1.second)
			inversion1++;
		q1.pop();
		list<int>::iterator it;
		for(it=adj[front1.first].begin();it!=adj[front1.first].end();it++)
		{
			if(visited1[*it]==0)
			{
				if(front1.second=='B')
					q1.push(make_pair(*it, 'G'));
				else
					q1.push(make_pair(*it, 'B'));
				visited1[*it]=1;
			}	
		}
	}
	if(inversion<=inversion1)
		cout << inversion << endl;
	else
		cout << inversion1 << endl;
}
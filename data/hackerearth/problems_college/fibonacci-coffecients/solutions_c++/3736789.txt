#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

struct GModInt {
	static int Mod;
	unsigned x;
	GModInt() : x(0) {}
	GModInt(signed sig) { int sigt = sig % Mod; if(sigt < 0) sigt += Mod; x = sigt; }
	GModInt(signed long long sig) { int sigt = sig % Mod; if(sigt < 0) sigt += Mod; x = sigt; }
	int get() const { return (int)x; }

	GModInt &operator+=(GModInt that) { if((x += that.x) >= (unsigned)Mod) x -= Mod; return *this; }
	GModInt &operator-=(GModInt that) { if((x += Mod - that.x) >= (unsigned)Mod) x -= Mod; return *this; }
	GModInt &operator*=(GModInt that) { x = (unsigned long long)x * that.x % Mod; return *this; }

	GModInt operator+(GModInt that) const { return GModInt(*this) += that; }
	GModInt operator-(GModInt that) const { return GModInt(*this) -= that; }
	GModInt operator*(GModInt that) const { return GModInt(*this) *= that; }

	GModInt operator-() const { GModInt t; t.x = x == 0 ? 0 : Mod - x; return t; }
};
int GModInt::Mod = 0;

typedef GModInt mint;
mint operator^(mint a, unsigned long long k) {
	mint r = 1;
	while(k) {
		if(k & 1) r *= a;
		a *= a;
		k >>= 1;
	}
	return r;
}


struct FenwickTree {
	typedef mint T;
	vector<T> v;
	void init(int n) { v.assign(n, 0); }
	void add(int i, T x) {
		for(; i < (int)v.size(); i |= i + 1) v[i] += x;
	}
	T sum(int i) const {	//[0, i)
		T r = 0;
		for(-- i; i >= 0; i = (i & (i + 1)) - 1) r += v[i];
		return r;
	}
	T sum(int left, int right) const {	//[left, right)
		return sum(right) - sum(left);
	}
};

int main() {
	int N; int M; int Mod;
	while(~scanf("%d%d%d", &N, &M, &Mod)) {
		mint::Mod = Mod;

		vector<mint> coefs[2];
		rep(k, 2) coefs[k].resize(N);
		coefs[0][0] = 1; coefs[1][0] = 0;
		coefs[0][1] = 0; coefs[1][1] = 1;
		rep(k, 2) reu(i, 2, N)
			coefs[k][i] = coefs[k][i - 1] + coefs[k][i - 2];

		vector<mint> negfib[2];
		rep(k, 2) negfib[k].resize(N);
		negfib[0][0] = 1; negfib[1][0] = 1;
		negfib[0][1] = 0; negfib[1][1] = 1;
		rep(k, 2) reu(i, 2, N)
			negfib[k][i] = negfib[k][i - 2] - negfib[k][i - 1];

		vector<mint> curA(N);
		rep(i, N) {
			int x;
			scanf("%d", &x);
			curA[i] = x;
		}

		FenwickTree fts[2];
		rep(k, 2)
			fts[k].init(N + 1);

		rep(k, 2) rep(i, N)
			fts[k].add(i, curA[i] * coefs[k][i]);

		for(int ii = 0; ii < M; ++ ii) {
			int ty;
			scanf("%d", &ty);
			if(ty == 1) {
				int p; int X;
				scanf("%d%d", &p, &X), -- p;
				mint diff = mint(X) - curA[p];
				curA[p] = X;
				rep(k, 2)
					fts[k].add(p, diff * coefs[k][p]);
			} else if(ty == 2) {
				int L; int R;
				scanf("%d%d", &L, &R), -- L;
				mint ans;
				rep(k, 2) {
					mint t = fts[k].sum(L, R);
					ans += t * negfib[k][L];
				}
				printf("%d\n", ans.get());
			} else abort();
		}

	}
	return 0;
}

'''
Created on Nov 15, 2015

@author: Ismael
'''
from __future__ import print_function


def merge(a, b):
    c = (len(a)+len(b))*[0]
    i = 0
    j = 0
    while i < len(a) and j < len(b):
        if a[i] >= b[j]:
            c[i+j] = a[i]
            dict_nb_inv[a[i]] += len(b)-j
            i += 1
        else:
            c[i+j] = b[j]
            j += 1
    while i < len(a):
        c[i+j] = a[i]
        i += 1
    while j < len(b):
        c[i+j] = b[j]
        j += 1
    return c


def merge_sort(l):
    if len(l) <= 1:
        return l
    else:
        a = merge_sort(l[:len(l)//2])
        b = merge_sort(l[len(l)//2:])
        c = merge(a, b)
        return c

# dict_nb_inv = Counter()
# l=[4,3,2,1]
# c,nb_inv=merge_sort(l)
# print(l,nb_inv)
# r = [dict_nb_inv[v] for v in l]
# print(*r)
# #assert sum(r)==nb_inv


def main():
    global dict_nb_inv
    t = int(raw_input())
    for _ in xrange(t):
        n = int(raw_input())
        l = [int(raw_input()) for _ in xrange(n)]
        dict_nb_inv = (10**6+1)*[0]
        merge_sort(l)
        print(*[dict_nb_inv[v] for v in l])


main()

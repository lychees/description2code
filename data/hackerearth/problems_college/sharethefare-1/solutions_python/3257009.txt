class Transaction(object):
    def __init__(self):
        self.name = raw_input()
        self.amount = int(raw_input())
        self.number_of_persons = int(raw_input())
        self.persons = []
        for _ in xrange(self.number_of_persons):
            self.persons.append(raw_input())


class Case(object):
    def __init__(self):
        self.N, self.Q = map(int, raw_input().split())
        self.order = []
        self.transaction_dictionary = {}
        self.transactions = []
        for i in xrange(self.N):
            self.order.append(raw_input())
            self.transaction_dictionary[self.order[i]] = 0
        for i in xrange(self.Q):
            transaction = Transaction()
            self.transactions.append(transaction)

    def calculate(self):
        for transaction in self.transactions:
            #update the dictionary
            share = transaction.amount/(transaction.number_of_persons + 1)
            self.transaction_dictionary[transaction.name] += (transaction.number_of_persons*share)
            for person in transaction.persons:
                self.transaction_dictionary[person] -= share

    def print_result(self):
        for person in self.order:
            if self.transaction_dictionary[person] == 0:
                print "%s neither owes nor is owed" %person
            elif self.transaction_dictionary[person] < 0:
                print "%s owes %s" %(person, -self.transaction_dictionary[person])
            else:
                print "%s is owed %s" %(person, self.transaction_dictionary[person])


for _ in xrange(int(raw_input())):
    case = Case()
    case.calculate()
    case.print_result()
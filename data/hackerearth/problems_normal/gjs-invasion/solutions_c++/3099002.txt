#include<bits/stdc++.h>
#include <iostream>
#include <numeric>
#define ll long long
#define ull unsigned long long  
#define mpa make_pair
#define pb push_back
#define ff first
#define ss second
#define boost ios_base::sync_with_stdio(0)
#define ss second
#define forp(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,n)    for(ll i=0;i<n;++i)
#define ren(i,n)    for(ll i=n-1;i>=0;i--)
#define forn(i,a,b) for(ll i=a;i>=b;i--)
#define fre     freopen("input.txt","r",stdin),freopen("output.txt","w",stdout)
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define scan(x) scanf("%lld",&x)
#define print(x) printf("%lld\n",x)
using namespace std;
ll modpow(ll a,ll n,ll temp){ll res=1,y=a;while(n>0){if(n&1)res=(res*y)%temp;y=(y*y)%temp;n/=2;}return res%temp;} 
//ll a[100005],n,dp[1000005]={0},b[1000005],c[100005],dp1[1000005],bit[100005];
//ll vis[100005];
//vector<ll> adj[100005];
#define pi 3.1415926536
#define sz(x) x.size()
ll cbit(ll n){ll k=0;while(n) n&=(n-1),k++;return k;}
ll nbit(ll n){ll k=0;while(n) n/=2,k++;return k;}
//ll b1[1001][1001],b2[1001][1001],g1[1001][1001],g2[1001][1001],w[1001][1001];
//bool a1[101][101],a2[102][101],a3[103][101];
ll mod=1e9+7;
int sgn(ll x) {
  return x < 0 ? -1 : !!x;
}
//pair<ll,ll> a[1000005];
/*void upd(ll ind,ll val){
	if(ind==0) return;
	while(ind<=n){
		bit[ind]+=val;
		ind+=(ind&-ind);
	}
}
ll qu(ll ind){
  ll k=0; while(ind>0){
  	k+=bit[ind];
  	ind-=(ind&-ind);
  }
	return k;
}*/
//pair<ll,ll> a[30005],dp[30005];
ll dp[100005];
//double p,dp[2002][2002];
vector<ll> ans[3005];
bool prime[10001];
ll x,y,c,t,i,j,k,l,m,n,o,p,cum[100][100],a[100001];
/*void sieve(){
	ll i,j,k,l,m,n;
	prime[1]=1;
	for(i=2;i<=10000;i++){
		if(prime[i]==0){
			for(j=2*i;j<=10000;j+=i)
			prime[j]=1;
		}
	}
}*/
ll ways[1<<25],s[1<<25];
ll solve(ll n){
	rep(i,1<<n) ways[i]=0,s[i]=0;
	ways[0]=1;
	rep(mask,1<<n) rep(i,n)
	   if(!(mask&(1<<i)))
	      if(cbit(mask)!=i){
	        ll b=0;
	        forp(j,i+1,n-1) if(mask&(1<<j)) b++;
	        ll m2=mask|(1<<i);
	        ways[m2]+=ways[mask];
	        s[m2]+=s[mask]+b*ways[mask];
	    }
	
	return s[(1<<n)-1];
	
}
int main(){
   ll t,n;
   cin>>t;
   while(t--){
   	cin>>n;
   	cout<<solve(n)<<endl;
   }
}
	
	
	
	
	
		

	
	
	
	
	
	
	

  
  
  
  
  
  
  
  


	


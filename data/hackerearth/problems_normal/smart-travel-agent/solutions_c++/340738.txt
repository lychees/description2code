#include <iostream>
using namespace std;
int S,D,N,**G,*x;
int min(int a,int b){
	return (a<b?a:b);
}
int bestRoute(int node){
	if(node==D)
	return 100000;
	int max,k;
	max=0;
	for(int i=1;i<=N;i++){
		if(G[node][i]!=0){
			k= min(G[node][i],bestRoute(i));
			if(k>max){
				max=k;
				x[node]=i;
			}
		}
	}
	return max;
}
int main() {
	int R,T;
	cin>>N;
	cin>>R;
	x = (int*)malloc((N+1)*sizeof(int));
	G = (int**)malloc((N+1)*sizeof(int));
	for(int i=0;i<=N;i++)
	G[i]=(int*)malloc((N+1)*sizeof(int));
	/*for(int i=0;i<=N;i++){
	 for(int j=0;j<=N;j++){
	  G[i][j]=0;}
}*/
	
	int k,l;
	for(int i=0;i<R;i++){
		cin>>k;
		cin>>l;
		cin>>G[k][l];
	}
	cin>>S;
	cin>>D;
	cin>>T;
	int maxTourists;
	maxTourists = bestRoute(S);
	k=S;
	cout<<S<<" ";
	while(x[k]!=D){
		cout<<x[k]<<" ";
		k=x[k];
	}
	cout<<D<<endl;
	int trips;
	if(T%(maxTourists-1)>0)
	 trips=T/(maxTourists-1)+1;
	else
	 trips=T/(maxTourists-1);
	cout<<trips;
	return 0;
}

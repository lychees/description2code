#include <iostream>
#include <vector>
using namespace std;

#define MAX 1010
const long long mod = 1e9+7;

int n, k, w;
int u, v;
int e[MAX], root[MAX];

int findset(int i)
{
	if (i != root[i])
		return findset(root[i]);
	return i;
}

void unionset(int u, int v)
{
	u = findset(u);
	v = findset(v);
	
	root[v] = u;
}

int main() {
	cin >> n; 
	for (int i = 0; i < n; i++)
	{
		cin >> e[i];
		root[i] = i;
	}
	
	cin >> k;
	for (int i = 0; i < k; i++)
	{
		cin >> u >> v;
		unionset(--u, --v);
	}
	
	vector<int> set;
	for (int i = 0; i < n; i++)
	{
		if (root[i] == i)
			set.push_back(i);
	}
	
	long long res = 1;
	for (int i = 0; i < set.size(); i++)
	{
		int min = 10000;
		int r = findset(set[i]);
		for (int j = 0; j < n; j++)
		{
			if (r ==  findset(j) && e[j] < min)
			{
				min = e[j];
			}
		}
		
		long long count = 0;
		for (int j = 0; j < n; j++)
		{
			if (e[j] == min && findset(j) == r)
				count++;
		}
		
		res = (res * count) % mod;
	}
	
	cout << res << endl;
	
	return 0;
}
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, pair<int, int> > P;
const int MOD = 1000000007;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define foru(i, a, b) for (int i = (a); i <= (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define ford(i, a, b) for (int i = (a); i >= (b); --i)
#define sz(a) ((int) a.size())
#define pb(a) push_back(a)
#define mp(a, b) make_pair(a, b)
#define mem(a) memset(a, 0, sizeof(a))

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void add_max(T &a, T b) {if (b > a) a = b;}
template<class T> inline void add_min(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {if (b == 0) return a; return gcd(b, a % b);}

vector<int> G[505];
int dp[505][1005], dst[505][505], cst[505][505];
const int INF = (int) 1e9;


int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest, n, m, B;
    int u, v, ct, l, q, x, y;
    scanf("%d", &ntest);
    while (ntest--) {
        scanf("%d %d %d", &n, &m, &B);
        repu(i, 0, 505) {
            G[i].clear();
        }
        repu(i, 0, m) {
            scanf("%d %d %d %d", &u, &v, &ct, &l);
            G[v].pb(u);
            cst[u][v] = ct;
            dst[u][v] = l;
        }
        repu(i, 1, 505) {
            repu(j, 0, 1005) {
                if (i == 1) dp[i][j] = 0;
                else dp[i][j] = INF;
            }
        }
        foru(i, 2, n) {
            foru(j, 1, B) {
                repu(k, 0, G[i].size()) {
                    if (j >= cst[G[i][k]][i]) add_min(dp[i][j], dp[G[i][k]][j - cst[G[i][k]][i]] + dst[G[i][k]][i]);
                }
            }
        }
        scanf("%d", &q);
        repu(i, 0, q) {
            scanf("%d %d", &x, &y);
            if (dp[x][y] == INF) printf("-1\n");
            else printf("%d\n", dp[x][y]);
        }
    }
    return 0;
}

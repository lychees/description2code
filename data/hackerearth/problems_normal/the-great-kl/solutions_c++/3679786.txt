#include <bits/stdc++.h>
#define ll long long
#define MOD 1000000007
#define INF 0x3f3f3f3f

using namespace std;
vector<int> adj[100005],color[100005];
int c[100005],timer,tin[100005],tout[100005],anc[100005][20],d[100005];
const int L=17;

void dfs(int i,int p)
{
    tin[i]=timer++;

    anc[i][0]=p;
    for(int j=1;j<L;j++)
    {
        anc[i][j]=anc[anc[i][j-1]][j-1];
    }

    for(int j=0;j<adj[i].size();j++)
    {
        if(adj[i][j]!=p)
        {
            d[adj[i][j]]=d[i]+1;
            dfs(adj[i][j],i);
        }
    }

    tout[i]=timer++;
}

bool upper(int u,int v)
{
    return (tin[u]<=tin[v]&&tout[u]>=tout[v]);
}

int lca(int u,int v)
{
    if(upper(u,v))
        return u;
    if(upper(v,u))
        return v;
    for(int j=L-1;j>=0;j--)
    {
        if(!upper(anc[u][j],v))
            u=anc[u][j];
    }
    return anc[u][0];
}

int get_dist(int u,int v)
{
    int node=lca(u,v);
    return d[u]+d[v]-2*d[node];
}
int main()
{
    int n,m;
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        cin>>c[i];
        color[c[i]].push_back(i);
    }
    for(int i=0;i<n-1;i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1,1);

    for(int i=1;i<=m;i++)
    {
        int root=color[i][0];
        int node=-1;
        int mx=-1;
        for(int j=0;j<color[i].size();j++)
        {
            int temp=color[i][j];
            int dist=get_dist(root,temp);
            if(dist>mx)
            {
                mx=dist;
                node=temp;
            }
        }

        root=node;
        mx=-1;
        for(int j=0;j<color[i].size();j++)
        {
            int temp=color[i][j];
            int dist=get_dist(root,temp);
            if(dist>mx)
            {
                mx=dist;
                node=temp;
            }
        }
        cout<<mx<<" ";
    }
    return 0;
}

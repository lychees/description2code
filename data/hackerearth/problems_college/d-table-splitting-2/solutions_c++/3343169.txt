#include <bits/stdc++.h>
using namespace std;
vector<char> a[1000010];
vector<char> q; 
vector<bool> visited[1000010]; 
vector<bool> qtmp; 
vector<int> deg[1000010];
vector<int> qdeg;  
vector<pair<int, int> > ditch; 
char tw;
int n, m;
int main(){
	int test;
	scanf("%d", &test);
	while (test--){
		cin>>n>>m;
		qdeg.clear(), qtmp.clear();
		for (int i = 0; i <= m; i++) qdeg.push_back(0), qtmp.push_back(false); 
		for (int i = 0; i < n; i++) {
			q.clear();
			for (int j = 0; j < m; j++) {
				scanf(" %c", &tw);
				q.push_back(tw);
			}
			deg[i] = qdeg;
			a[i] = q;
			visited[i] = qtmp;
		}
		visited[n] = qtmp;
		deg[n] = qdeg;
		// for (int i = 0; i <= n; i++) {
		// 	for (int j = 0; j <= m; j++) {
		// 		cout<<deg[i][j]<<" ";
		// 	}
		// 	cout<<endl;
		// }
		bool ok = false;
		for (int i = 0; i <= n && !ok; i++) {
			for (int j = 0; j <= m && !ok; j++) {
				if((i == 0 || i == n) && (j == 0 || j == m)) continue;
				// cout<<i<<" "<<j<<endl;
				if(visited[i][j]) continue;
				stack<pair<int, int> >s;
				vector<pair<int, int> > comp; 
				comp.clear();
				s.push(make_pair(i, j));
				visited[i][j] = true; 
				while (!s.empty()) {
					int x = s.top().first, y = s.top().second;
					s.pop();
					// cout<<x<<" "<<y<<endl;
					comp.push_back(make_pair(x, y));
					visited[x][y] = true;
					if(x == 0 && a[x][y - 1] != a[x][y]) {
						if(!visited[x + 1][y]) s.push(make_pair(x + 1, y)), visited[x + 1][y] = true;
						deg[x][y]++;
					}
					if(x == n && a[x - 1][y - 1] != a[x - 1][y]) {
						if(!visited[x - 1][y]) s.push(make_pair(x - 1, y)), visited[x - 1][y] = true;
						deg[x][y]++;
					}
					if(y == 0 && a[x - 1][y] != a[x][y]) {
						if(!visited[x][y + 1]) s.push(make_pair(x, y + 1)), visited[x][y + 1] = true;
						deg[x][y]++;
					}
					if(y == m && a[x - 1][y - 1] != a[x][y - 1]) {
						if(!visited[x][y - 1]) s.push(make_pair(x, y - 1)), visited[x][y  -1] = true;
						deg[x][y]++;
					}
					if(x > 0 && x < n && y > 0 && y < m) {
						if(a[x - 1][y - 1] != a[x - 1][y]) {
							if(!visited[x - 1][y]) s.push(make_pair(x - 1, y)), visited[x - 1][y] = true;
							deg[x][y]++;
						}
						if(a[x - 1][y] != a[x][y]) {
							if(!visited[x][y + 1]) s.push(make_pair(x, y + 1)), visited[x][y + 1] = true;
							deg[x][y]++;
						}
						if(a[x][y] != a[x][y - 1]) {
							if(!visited[x + 1][y]) s.push(make_pair(x + 1, y)), visited[x + 1][y] = true;
							deg[x][y]++;
						}
						if(a[x][y - 1] != a[x - 1][y - 1]) {
							if(!visited[x][y - 1]) s.push(make_pair(x, y - 1)), visited[x][y - 1] = true;
							deg[x][y]++;
						}
					}
				}
				// cout<<"here\n";
				bool flag = true;
				for (int u = 0; u < int(comp.size()); u++) {
					// cout<<deg[comp[u].first][comp[u].second]<<" ";
					if(deg[comp[u].first][comp[u].second] <= 1) {
						flag = false;
						// break;
					} 
				}
				// cout<<endl;
				if(flag) {
					// cout<<"herefjslkjdfoaewopifjpeiu\n";
					ok = true;
					break;
				}
			}
		}	
		if(ok) printf("NO\n");
		else printf("YES\n");
	}
}
#include <bits/stdc++.h>
#include <utility>
#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <ctime> 

using namespace std; 


#define mod 1000000007
#define maxs 10005
#define array_size_limit 5000005
#define mins 1005
#define eps 0.000000000001
#define imax 2000000200
#define llmax 1000000002000000000ll


#define LL long long int
#define pb push_back
#define gc getchar_unlocked
#define iosbase ios_base::sync_with_stdio(false)
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ppi pair<pair<int,int>,int>
#define ppl pair<pll,ll>
#define vi vector<LL>
#define sc scanf
#define pr printf
#define lld I64d
#define F first
#define S second
#define siter set<int>::iterator
#define p_pq priority_queue
#define ub upper_bound
#define lb lower_bound
#define PI acos(-1)
#define CLEAR(A) memset(A,0,sizeof(A))
#define SETMAX(A) memset(A,0x7f,sizeof(A))

LL counta[1000011];
LL countb[1000011];

int main()
{
	LL n,m,tmp;
	cin>>n;
	
	set<LL> myseta,mysetb,myset,mysetans;
set<LL>::iterator it1,it2,it3,it,it4;
	
	for(int i=0;i<n;i++)
	{
	    //cin>>arr[i];
	    cin>>tmp;
	    myseta.insert(tmp);
	    counta[tmp]++;
	}



    cin>>m;
    //LL barr[m];
	for(int i=0;i<m;i++)
	{
	    //cin>>barr[i];
	     cin>>tmp;
	    mysetb.insert(tmp);
	    countb[tmp]++;
	    
	}
	
	
  

//sort(arr,arr+n);
//sort(barr,barr+m);


/*int flag;
LL min1=min(n,m);
if(min1 == n)
    flag = 0;
if(min1 == m)
    flag=1;

	for(int i=0;i<min1;i++)
	{
        if(arr[i] == barr[i])
            continue;
	   else if(arr[i] != barr[i] && flag==0) 
	    myset.insert(barr[i]);
	    
	   else if(arr[i] != barr[i] && flag==1) 
	    myset.insert(arr[i]);
	    
	}
	



	
	for (it=myset.begin(); it!=myset.end(); ++it)
            cout << *it<<" ";
  
  cout << '\n';
	
	*/
	
	it1=myseta.begin();
	for (it2=mysetb.begin(); it2!=mysetb.end(); ++it2)
		{
			if(it1 == myseta.end())
				{
					mysetans.insert((*it2));
					continue;
				}
			
			if((*it1) == (*it2) && counta[(*it1)] == countb[(*it2)] )
				{
					it1++;
					//cout<<" dfdbsnk";
					continue;
					
				}
			if((*it1) == (*it2) && counta[(*it1)] != countb[(*it2)] ){
				mysetans.insert((*it1));
				it1++;
			}
		}
		
		for (it3=mysetans.begin(); it3!=mysetans.end(); ++it3)
            cout << *it3<<" ";
  
  cout << '\n';
	
	
	return 0;
}


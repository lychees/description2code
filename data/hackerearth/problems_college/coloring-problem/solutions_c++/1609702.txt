#include <stdio.h>
#include <string.h>
#include <vector>
#include <queue>
using namespace std;
vector<int> graph[10005];
int visited[10005];
queue<int> q;
bool bfs(int v)
{
	while(!q.empty())
	q.pop();
	
	
	int label,x;
	visited[v]=0;
	q.push(v);
	while(!q.empty())
	{
		v=q.front();
		q.pop();
		for(int i=0;i<graph[v].size();i++)
		{
			x=graph[v][i];
			if(visited[x]==-1)
			{
				visited[x]=visited[v]+1;
				q.push(x);
			}
			else if(visited[x]==visited[v])
			{
	            return false; 			
			}
		}
	}
	return true;
	
}
int main()
{
	int i,c,n,t,a,b,flag,j;
	scanf("%d",&t);
	for(j=1;j<=t;j++)
	{
	    flag=1;
		scanf("%d %d",&n,&c);
		
		for(i=1;i<=n;i++)
		graph[i].clear();
		
		memset(visited,-1,sizeof(visited));
		
		for(i=1;i<=c;i++)
		{
			scanf("%d %d",&a,&b);
			a++;
			b++;
			graph[a].push_back(b);
			graph[b].push_back(a);
		}
		for(i=1;i<=n;i++)
		{
			if(visited[i]==-1)
			{
			 if(!bfs(i))
			  {
				flag=0;
				break;
			  }
		    }
		}
		if(!flag)
		printf("NOT BICOLORABLE.\n");
		else
		printf("BICOLORABLE.\n");
		
	}
	return 0;
}
#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long, long long> pll; typedef vector<pair<long long, long long> > vpll;
typedef vector<string> vs; typedef long double ld;
template<typename T, typename U> inline void amin(T &x, U y) { if (y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if (x < y) x = y; }

int main() {
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		int N, L;
		scanf("%d%d", &N, &L);
		vector<vi> g(N);
		rep(i, L) {
			int B, U;
			scanf("%d%d", &B, &U), -- B, -- U;
			if(B < 0 || B >= N || U < 0 || U >= N) continue;
			g[B].push_back(U);
		}
		vector<bool> vis(N);
		vector<int> dist(N, INF);
		vector<int> q, nq;
		nq.push_back(0);
		dist[0] = 0;
		int t = 0;
		while(!nq.empty()) {
			q.swap(nq);
			while(!q.empty()) {
				int x = q.back(); q.pop_back();
				if(x < 0 || x >= N) continue;
				if(vis[x]) continue;
				vis[x] = true;
				if(x == N - 1) {
					printf("%d\n", t);
					goto exit;
				}
				each(i, g[x]) {
					if(dist[*i] > t) {
						dist[*i] = t;
						q.push_back(*i);
					}
				}
				if(g[x].empty()) rer(i, 2, 12) {
					int y = x + i;
					if(y >= N) y = 2 * (N - 1) - y;
					if(y < 0 || y >= N) return 1;
					if(dist[y] > t + 1) {
						dist[t] = t + 1;
						nq.push_back(y);
					}
				}
			}
			++ t;
		}
		exit:;
	}
	return 0;
}

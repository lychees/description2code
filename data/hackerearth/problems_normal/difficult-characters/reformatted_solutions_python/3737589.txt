from collections import OrderedDict


def get_alphabet_dict():
    alphabet_chars = "abcdefghijklmnopqrstuvwxyz"
    reverse_alphabet = alphabet_chars[::-1]
    dict = OrderedDict()
    for k in reverse_alphabet:
        dict[k] = 0
    return dict


def get_difficult_char_sequence(str_input):
    english_alphabet_dict = get_alphabet_dict()
    for char in str_input:
        english_alphabet_dict[char] = english_alphabet_dict[char] + 1

    max_val_key = max(english_alphabet_dict,
                      key=lambda k: english_alphabet_dict[k])
    max_count_val = english_alphabet_dict[max_val_key]

    count = 0
    output_response = ""
    while (count <= max_count_val):
        for key, val in english_alphabet_dict.items():
            if val == count:
                output_response = output_response + key + " "
                del english_alphabet_dict[key]
        count += 1
    return output_response[:-1]


test_case = raw_input()
total_test_case = int(test_case)
outputs = []

# getting the output
for i in range(0, total_test_case):
    input_str = raw_input()
    outputs.append(get_difficult_char_sequence(input_str))

# print the output
for i in range(0, total_test_case):
    print(outputs[i])

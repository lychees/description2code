#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define inrep int t;cin>>t; while(t--)
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
const int MAXN=1000001;
vector<vi> sucs ( MAXN );
vi indeg ( MAXN,-1 );
int main() {
    ios_base::sync_with_stdio ( false );
    int n;
    cin>>n;


    rep ( i,n ) {
        int k;
        cin>>k;
        int last;
        cin>>last;
        indeg[last]=max ( indeg[last],0 );
        reu ( j,1,k ) {
            int nxt;
            cin>>nxt;
            indeg[nxt]=max ( indeg[nxt],0 );
            sucs[last].push_back ( nxt );
            indeg[nxt]++;
            last=nxt;
        }
    }
        priority_queue<int,vi,greater<int>> pq;
        rep ( i,MAXN ) {
            if ( !indeg[i] ) pq.push ( i );
        }
        vi res;
        while ( !pq.empty() ) {
            int nxt=pq.top();
            pq.pop();
            res.push_back ( nxt );
            for ( int i: sucs[nxt] ) {
                indeg[i]--;
                if ( !indeg[i] ) pq.push ( i );
            }
        }
        cout<<res;
    
}

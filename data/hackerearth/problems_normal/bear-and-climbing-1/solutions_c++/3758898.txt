//Created By Mayur Agarwal :)

#include <iostream>
#include <stdio.h>
#include <cmath>
#include <vector>
#include <string>
#include <cstring>
#include <set>
#include <algorithm>
#include <map>
#include <iterator>
#include <functional>
#include <queue>

#define ll long long
#define ind(a) scanf("%d",&a)
#define in(a) scanf("%lld",&a)
#define inc(a) scanf("%c",&a)
#define ins(a) scanf("%s",a)
#define pr(a) printf("%lld\n",a)
#define debug(x) cout << #x << " = " << x << endl
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define pb push_back
#define ff first
#define ss second
#define SIZE 1000010
const ll mod = 1000000007L;

using namespace std;
typedef pair<ll, ll>pll;
ll x[SIZE], h[SIZE];
pll diff[SIZE];
int start = -1;
int n;
inline ll calc(int i, int j)
{
	return (((x[i] - x[j]) * (x[i] - x[j])) + ((h[i] - h[j]) * (h[i] - h[j])));
}
bool check(ll len)
{
	int last = start;
	for (int cur = start + 1; cur < n; cur++)
	{
		if (-diff[cur].ss <= -diff[last].ss)
			continue;
		if (diff[cur].ff <= diff[last].ff)
			continue;
		if (calc(-diff[cur].ss, -diff[last].ss) <= len)
		{
			last = cur;
		}
	}
	if (-diff[last].ss == n - 1)
		return 1;
	return 0;
}

int main()
{
	//ios_base::sync_with_stdio(0); cin.tie(0);
	ind(n);
	for (int i = 0; i < n; i++)
	{
		in(x[i]);
		in(h[i]);
		diff[i].ff = (x[i] - x[0]) - (h[i] - h[0]);
		diff[i].ss = -i;
	}

	sort(diff, diff + n);

	for (int i = 0; i < n; i++)
	{
		if (diff[i].ss == 0)
		{
			start = i;
			break;
		}
	}

	ll low = 0, high = 1e17;
	ll ans = -1;
	while (low <= high)
	{
		ll mid = (low + high) / 2;
		if (check(mid))
		{
			ans = mid;
			high = mid - 1;
		}
		else
			low = mid + 1;
	}
	if (check(ans))
		pr(ans);
	else
		pr(-1ll);
	return 0;
}
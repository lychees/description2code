#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<map>
#include<cmath>
#include<queue>
#include<climits>
#include<stack>
using namespace std;
typedef long long int ll;
ll aa,bb,a,m,d,s,steps[1000005];
void bfs()
{
    queue<ll> q;
    steps[aa]=0;
    q.push(aa);
    while(!q.empty())
    {
        ll idx=q.front();
        if(idx==bb)
            return;
        q.pop();
        if(idx+a<=1e6&&idx+a>=2)
        {
            if(steps[idx+a]>steps[idx]+1)
            {
                steps[idx+a]=steps[idx]+1;
                q.push(idx+a);
            }
        }
        if(idx-s<=1e6&&idx-s>=2)
        {
            if(steps[idx-s]>steps[idx]+1)
            {
                steps[idx-s]=steps[idx]+1;
                q.push(idx-s);
            }
        }
        if(idx*m<=1e6&&idx*m>=2)
        {
            if(steps[idx*m]>steps[idx]+1)
            {
                steps[idx*m]=steps[idx]+1;
                q.push(idx*m);
            }
        }
        if(idx/d<=1e6&&idx/d>=2)
        {
            if(steps[idx/d]>steps[idx]+1)
            {
                steps[idx/d]=steps[idx]+1;
                q.push(idx/d);
            }
        }
    }
    return;
}
int main()
{
    ll tc,i;
    cin>>tc;
    while(tc--)
    {
        //memset(steps,0,sizeof(steps));
        cin>>aa>>bb;
        cin>>m>>d>>a>>s;
        steps[a]=0;
        for(i=0;i<=1000000;i++)
            steps[i]=1e9;
        //steps[a]=0;
        //visited[a]=1;
        bfs();
        if(steps[bb]==1e9)
            cout<<"-1"<<endl;
        else
        cout<<steps[bb]<<endl;
    }
    return 0;
}

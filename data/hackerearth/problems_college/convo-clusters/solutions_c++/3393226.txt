#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define sz(x) (int((x).size()))
#define bit(x) (1 << (x))
#define cnt1(x) (__builtin_popcount(x))

template<class T, class U>
inline void chkmax(T& x, U y) {
	if (x < y) x = y;
}

template<class T, class U>
inline void chkmin(T& x, U y) {
	if (y < x) x = y;
}

typedef long long LL;
typedef double DB;
typedef pair<int, int> PII;
typedef vector<int> VI;
char s[100000], t[10000];

void mytrim(char *s) {
	int n = strlen(s);
	if (s[n - 1] == 10 || s[n - 1] == 13) n--;
	s[n] = 0;
}

char vowel[] = "aeiouwy";
bool isvowel(char c) {
	for (int i = 0; i < 7; i++) if (c == vowel[i]) return 1;
	return 0;
}
bool isconsonant(char c) {
	return isalpha(c) && !isvowel(c);
}

bool check(char *s) {
	int n = strlen(s);
	int prv = 0;
	for (int i = 0; i < n; ) {
		int k = 0;
		if (isvowel(s[i])) {
			while (i < n && isvowel(s[i])) i++, k++;
			if (k > 1) {
				if (prv) return 1;
				prv = 1;
			} else prv = 0;
		} else {
			while (i < n && isconsonant(s[i])) i++, k++;
			if (k > 1) {
				if (prv) return 1;
				prv = 1;
			} else prv = 0;
		}
	}
	return 0;
}

bool test() {
	int n = strlen(s);
	for (int i = 0, j; i < n; i = j) {
		for (j = i; j < n && !isalpha(s[j]); j++);
		int len = 0;
		for (; j < n && isalpha(s[j]); j++) {
			t[len++] = s[j];
		}
		t[len] = 0;
		if (len && check(t)) return 1;
	}
	return 0;
}

int main() {
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
	
	while (gets(s)) {
		mytrim(s);
		puts(test() ? "YES" : "NO");
	}
	return 0;
}
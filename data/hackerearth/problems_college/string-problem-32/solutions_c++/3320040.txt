#include<stdio.h>
#include<string.h>
#include<stdlib.h>
char txt[1000005];
void computeLPSArray(char *pat, int M, int *lps);
int cap;
 
void computeLPSArray(char *pat, int M, int *lps)
{
    int len = 0;  // lenght of the previous longest prefix suffix
    int i;
 
    lps[0] = 0; // lps[0] is always 0
    i = 1;
 
    // the loop calculates lps[i] for i = 1 to M-1
    while (i < M)
    {
       if (pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else // (pat[i] != pat[len])
       {
         if (len != 0)
         {
           // This is tricky. Consider the example AAACAAAA and i = 7.
           len = lps[len-1];
 
           // Also, note that we do not increment i here
         }
         else // if (len == 0)
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}
 
 
int main()
{
	int t, cs = 1;
	scanf("%d", &t);
	while(t--) {
		
	
	int n, i;
	scanf("%s", txt);
	int M = strlen(txt);
 
    // create lps[] that will hold the longest prefix suffix values for pattern
    int *lps = (int *)malloc(sizeof(int)*M);
    int j  = 0;  // index for pat[]
 
    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(txt, M, lps);
    int x = lps[M-1];
    if(x==0) x=-1;
    printf("Case %d: %d\n", cs++, x);
}
   return 0;
}  
 
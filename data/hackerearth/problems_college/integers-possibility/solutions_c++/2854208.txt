#include<iostream>
#include<vector>
using namespace std;
typedef long long ll;
typedef vector<vector<ll> > matrix; 
#define REP(i,n) for(ll i=1;i<=n;i++)
#define  MOD 1000000007
const int K=2;
// multiply to two matrices
matrix mul(matrix a ,matrix b)
{
	matrix c(K + 1,vector<ll>(K+1));
	REP(i,K) REP(j,K) REP(k,K)
	c[i][j]=(c[i][j] + a[i][k]*b[k][j])%MOD;
	return c;
}
// computes A^p where A is a matrix
matrix pow(matrix A,ll p)
{
	if(p==1)
	return A;
	if(p&1)
	return mul(A,pow(A,p-1));
	matrix x=pow(A,p/2);
	return mul(x,x);
}
ll fib(ll n)
{
	// creating matrices T and F... to apply the formulae F(n)=T^(n-1) * F;
	matrix T(K+1,vector<ll>(K+1));
	vector<ll> F1(K+1);
	ll res=0;
	F1[1] = 1;
    F1[2] = 1;
    T[1][1] = 0, T[1][2] = 1;
    T[2][1] = 1, T[2][2] = 1;
    // computing (n-1)th power of T
    if(n==1)
    return 1;
    if(n==2)
    return 1;
    T=pow(T,n-1);
    // answer is the first row of T^(n-1) * F1
    REP(i,K)
    res=(res + T[1][i]*F1[i])%MOD;
    return res;
}
int main()
{
	cin.sync_with_stdio(false);
	cin.tie(0);
	int t;
	ll n;
	cin>>t;
	while(t--){
	cin>>n;
	cout<<fib(n)<<endl;
   }
	return 0;
}
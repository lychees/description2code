#include <iostream>
#include <bits/stdc++.h>
#define forn(i,n) for(int i=0;i<n;i++)
using namespace std;
class heap
{
	private:
		vector<int> xarr,narr;
		int parent(int x)
		{
			return (x-1)/2;
		}
		int left(int x)
		{
			return 2*x+1;
		}
		int right(int x)
		{
			return 2*x+2;
		}
		void maxHeapfy(int i);
		void minHeapfy(int i);
	public:
		void insert(int);
		int rm(int);
		int getMax();
		int getMin();
};
int heap::getMax()
{
	if(xarr.size())
	return xarr[0];
	else return -1;
}
int heap::getMin()
{
	if(narr.size())
	return narr[0];
	else return -1;
}
void heap::maxHeapfy(int i)
{
    int l = left(i);
    int r = right(i);
    int largest = i;
    if (l < xarr.size() && xarr[l] > xarr[i])
        largest = l;
    if (r < xarr.size() && xarr[r] > xarr[largest])
        largest = r;
    if (largest != i)
    {
        swap(xarr[i], xarr[largest]);
        maxHeapfy(largest);
    }
}

void heap::minHeapfy(int i)
{
    int l = left(i);
    int r = right(i);
    int smallest = i;
    if (l < narr.size() && narr[l] < narr[i])
        smallest = l;
    if (r < narr.size() && narr[r] < narr[smallest])
        smallest = r;
    if (smallest != i)
    {
        swap(narr[i], narr[smallest]);
        minHeapfy(smallest);
    }
}
void heap::insert(int key)
{
	xarr.push_back(key);
	narr.push_back(key);
	int i=xarr.size()-1;
	while (i != 0 && xarr[parent(i)] < xarr[i])
    {
       swap(xarr[i], xarr[parent(i)]);
       i = parent(i);
    }
    i=narr.size()-1;
   	while (i != 0 && narr[parent(i)] > narr[i])
    {
       swap(narr[i], narr[parent(i)]);
       i = parent(i);
    }
}

int heap::rm(int key)
{
	int index=-1;
	forn(i,xarr.size())
	{
		if(xarr[i]==key)
		{
			index=i;
			swap(xarr[i],xarr[xarr.size()-1]);
			xarr.pop_back();
			maxHeapfy(i);
			break;
		}
	}
	forn(i,narr.size())
	{
		if(narr[i]==key)
		{
		//	index=i;
			swap(narr[i],narr[narr.size()-1]);
			narr.pop_back();
			minHeapfy(i);
			break;
		}
	}
	return index;
}
int main()
{
    int q;
    cin>>q;
    heap h;
    while(q--)
    {
    	int query;
    	cin>>query;
    	int key;
    	switch(query)
    	{
    		case 1:
    		cin>>key;
    		h.insert(key);
    		break;
    		case 2:
    		cin>>key;
    		if(h.rm(key)<0)
    		cout<<-1<<endl;
    		break;
    		case 3:
    		cout<<h.getMax()<<endl;
    		break;
    		case 4:
    		cout<<h.getMin()<<endl;
    		break;
    	}
    }
    return 0;
}

#include <iostream>
#include<math.h>
using namespace std;
unsigned long long int K[10][16],N[10];
    
//int max =0 ,p=0;
int BitOperations(unsigned long long int t)
{
 unsigned long long int currentSubset=0,a=0,max =0,maxp=0,tmp =0;
 unsigned long long int tempXOR = 0 ,tempAND =0,tempXOR1 = 0 ,tempAND1 =0,tempOR=0,tempP=0;
 while(a<t)
 {
 	currentSubset = pow(2,N[a]) -1;
 	max = 0 ;
 	maxp =0;
    while(currentSubset > 0) 
    { 
         tmp = currentSubset; 
         tempXOR = 0;
         tempAND=0;
         tempXOR1 = 0;
         tempAND1 =0;
         tempOR =0;
         tempP =0;
         for(unsigned int i = 0; i<N[a]; i++) 
         { 
             if (tmp & 1) 
              {
              	 tempXOR1 = K[a][i];
              	 tempAND1 = K[a][i];
              	 tempP++;
              	 if(tempP > 1)
              	 { 
              	 	tempXOR = tempXOR ^ tempXOR1;
              	    tempAND = tempAND  & tempAND1;
              	 }
              	 else
              	 {
              	 	tempXOR = tempXOR1;
              	 	tempAND = tempAND1;
              	 }
              	 
              }
            tmp = tmp>> 1; 
         }
         tempOR = tempAND | tempXOR;
         if(max < tempOR)
         {
           max = tempOR;
           //if(p<tempP)
             maxp =tempP;
         }
         else
         if(max == tempOR && maxp <= tempP)
           maxp = tempP;
          
        currentSubset--; 
     } 
     a++;
   cout<<max<<" "<<maxp<<endl;
 }
  return 0;	
}
int main()
{
    unsigned long long int t,i=0,j=0;
    cin>>t;
    
    for(i=0;i<t;i++)
    {
    	cin>>N[i];
    	for(j=0;j<N[i];j++)
    	  cin>>K[i][j];
    }
    
    BitOperations(t);
}

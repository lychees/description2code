#include <iostream>

using namespace std;

int T, N, A[21][21];

bool exists(int i, int j)
{
	return (0 <= i && i < N  && 0 <= j && j < N);
}

int DFS(int i, int j)
{
	if (!exists(i, j) || A[i][j] == 1)
		return 0;

	if (i == N-1 && j == N-1)
		return 1;

	A[i][j] = 1;
	
	int paths = 0;
	
	paths += DFS(i+1, j);
	paths += DFS(i, j+1);
	paths += DFS(i-1, j);
	paths += DFS(i, j-1);

	A[i][j] = 0;

	return paths;
}

int main()
{
	cin >> T;

	while (T--)
	{
		cin >> N;

		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				cin >> A[i][j];
		if (A[0][0] == 1)
			A[0][0] = 0;
		cout << DFS(0, 0) << endl;
	}

	return 0;
}
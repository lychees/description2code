//compile c++11 with -std=c++0x in g++
#include<bits/stdc++.h>
using namespace std;
typedef long long int LL;
//#define getchar_unlocked getchar
#define pb push_back
#define mp make_pair
#define f first
#define sc second
#define pii pair<int,int>
#define M 1000000007
#define inf (int)(2e+9)
#define all(o) (o).begin(), (o).end()
/*#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;*/
int gcd(int a, int b) { return (b == 0 ? a : gcd(b, a % b)); }
int lcm(int a, int b) { return (a * (b / gcd(a, b))); }
LL max(LL a,LL b,LL c){return max(a,max(b,c));}
inline LL power(LL x,LL y)
{
    LL ans=1;
    while(y>0){
        if(y&1)
            ans=(ans*x)%M;
        x=(x*x)%M;
        y/=2;
    }
    return ans;
}
inline int read()
{
  int ret = 0,temp=1;
  int c = getchar_unlocked();
  while(c<'0' || c>'9'){
    c = getchar_unlocked();
  }
  while(c>='0' && c<='9')
  {
    ret = (ret<<3) + (ret<<1) + c - '0';
    c = getchar_unlocked();
  }
        return ret;
}
LL mulmod(LL a,LL b) {
   long double res = a;
   res *= b;
   LL c = (LL)(res / M);
   a *= b;
   a -= c * M;
   a %= M;
   if (a < 0) a += M;
   return a;
}
const int N=1000005;
vector<int> prime;
int solve(int x,int y)
{
  int res=0;
  int p=y;
  while(x>=y){
    res+=x/y;
    y=y*p;
  }
  return res;
}
int ret[N];
int mark[N];
int main()
{
  for(int i=2;i<N;i++) mark[i]=i;
  for(int i=2;i<N;i++){
      if(mark[i]==i){
        for(int j=i;j<N;j+=i){
            mark[j]=i;
        }
      }
  }
  ret[2]=1;
  for(int i=3;i<N;i++){
      int p=i;
      ret[i]=ret[i-1];
      while(p>1){
        int k=mark[p];
        int c=0;
        while(p%k==0){
          c++;
          p/=k;
        }
        ret[i]+=c;
      }
  }
  int t;
  scanf("%d",&t);
  while(t--){
    int n;
    n=read();
    printf("%d\n",ret[n]);
  }    
}

#include<bits/stdc++.h>
using namespace std;
//custom
#define endl ('\n')
#define space (" ")
#define __ ios_base::sync_with_stdio(false);cin.tie(0);
//utils
#define SET(a,b) (memset(a,b,sizeof(a)))
//for vectors
#define pb push_back
#define mp make_pair
typedef vector<int> vi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;
//data types
typedef long long ll;
//loops
#define REP(i,a,b) \
    for(int i = int(a);i <= int(b);i++)
#define MEMSET_INF 127 //2bill
#define MEMSET_HALF_INF 63 //1bill

#ifdef DEBUG
    #define debug(args...) {dbg,args; cerr<<endl;}
    #define _
#else
    #define debug(args...)  // Just strip off all debug tokens
    #define _ ios_base::sync_with_stdio(false);cin.tie(0);
#endif 
struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }
} dbg;

vector<int> adj[1001];
int dist[1001];

void update(int v){
    for(auto to: adj[v]){
        if(dist[to] > dist[v] + 1){
            dist[to] = dist[v] + 1;
            update(to);
        }
    }
}

int main(){
    _
    int n,m,t,x,y;
    cin>>n>>m;

    REP(i, 0, n)dist[i] = 1e8;
    dist[1] = 0;

    while(m--){
        cin>>t;

        if(t == 1){
            cin >> x;
            if(dist[x] == 1e8)cout<<-1<<endl;
            else cout<<dist[x]<<endl;
        }
        else{
            cin >> x >> y;
            adj[x].pb(y);

            if(dist[y] > dist[x] + 1){
                dist[y] = dist[x] + 1;
                // modify distances of all vertices connected to y
                update(y);
            }
        }
    }
    return 0;
}
#include <stdio.h>
#include<string.h>
#include <string.h>
#include<stdbool.h>
#include<iostream>
#include<string>
using namespace std;
int a[2005]={0};
void sieve()
{int i,j;
a[1]=1;
a[2]=0;
for(i=3;i*i<2000;i+=2)
{
if(a[i]==0)
for(j=i*i;j<2000;j+=i)
a[j]=1;
}
} 
string preProcess(string s) {
  int n = s.length();
  if (n == 0) return "^$";
  string ret = "^";
  for (int i = 0; i < n; i++)
    ret += "#" + s.substr(i, 1);
 
  ret += "#$";
  return ret;
}
int longestPalindrome(string s) {
  string T = preProcess(s);
  int n = T.length();
  int *P = new int[n];
  int C = 0, R = 0;
  for (int i = 1; i < n-1; i++) {
    int i_mirror = 2*C-i; // equals to i' = C - (i-C)
     
    P[i] = (R > i) ? min(R-i, P[i_mirror]) : 0;
     
    while (T[i + 1 + P[i]] == T[i - 1 - P[i]])
      P[i]++;
 
    if (i + P[i] > R) {
      C = i;
      R = i + P[i];
    }
  }
 int maxLen = 0;
  int centerIndex = 0;
  for (int i = 1; i < n-1; i++) {
    if (P[i] > maxLen) {
      maxLen = P[i];
      centerIndex = i;
    }
  }
  delete[] P;
   
  return  maxLen;
}
int main()
{
int t;
//char s[1002];
string s;
sieve();
scanf("%d",&t);
while(t--)
{
//scanf("%s",s);
cin>>s;
int k=longestPalindrome(s);
if(k==2)
printf("YES\n");
else if(k%2)
{if(a[k]==0)
printf("YES\n");
else
printf("NO\n");
}
else
printf("NO\n");
}
}

#include<iostream>
#include<cstdio>
#include<cmath>
using namespace std;
string s;
unsigned long long int tree[500050];
long long int modpow(long long int base, long long int exponent, int modulus)
{
    long long int result = 1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = (result * base) % modulus;
        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }
    return result;
}
void build(int node,int start, int end)
{

	if(start==end)
	{
		if(s[start]=='1')
		tree[node]=1;
		else
			tree[node]=0;
		return;
		//cout<<node<<" "<<tree[node]<<"\n";

	}
	else
	{
		int mid=(start+end)/2;

		build(2*node,start,mid);
		build(2*node+1,mid+1,end);
		unsigned long long int x=((modpow(2,(end-mid),3))*tree[2*node])%3+tree[2*node+1];
		x=x%3;
		tree[node]=x;
	}
}
void update(int node,int start,int end,int l)
{
	if(start==end)
	{
		if(s[start]=='0')
			{
				tree[node]=1;
				s[start]='1';
			}
			
	}
	else
	{
		int mid=(start+end)/2;
		if(start<=l && l<=mid)
		{
			update(2*node,start,mid,l);
		}
		else
		{
			update(2*node+1,mid+1,end,l);
		}
		unsigned long long int x=((modpow(2,(end-mid),3)*tree[2*node]))%3+tree[2*node+1] ;
		x=x%3;
		tree[node]=x;
	}
}
unsigned long long int query(int node,int start,int end,int l,int r)
{
	//cout<<l<<" "<<r<<"*******lr\n";
	if(r<start || end<l)
	{
		return 0;
	}
	if(l<=start && end<=r)
	{
		return tree[node];
	}
	int mid=(start+end)/2;
	unsigned long long int p1=query(2*node,start,mid,l,r);
	unsigned long long int p2=query(2*node+1,mid+1,end,l,r);
	/*cout<<node<<" "<<start<<" "<<mid<<" "<<end<<"\n";
	cout<<p1<<" "<<p2<<"\n";
	cout<<"*************left:"<<(pow(2,(r-mid))*p1)<<"\n";
	cout<<"*************r & mid:"<<r<<" "<<mid<<"\n";*/
	if(r>=end)
		return ((modpow(2,(end-mid),3)*p1)+p2)%3;
	else if(r<end && r>=(mid+1))
		return ((modpow(2,(r-mid),3)*p1)+p2)%3;
	else
		return p1;
}
int main()
{
	ios::sync_with_stdio(false);cin.tie(0);
	int N;
	cin>>N;
	
	cin>>s;
	int q;
	cin>>q;
	build(1,0,N-1);
	
	
	
	
	while(q--)
	{
		int ch;
		cin>>ch;
		int l,r;

		switch(ch)
		{
			case 0:
			cin>>l>>r;
			cout<<query(1,0,N-1,l,r)%3<<"\n";
			break;
			case 1:cin>>l;
			update(1,0,N-1,l);
			break;

			
		}
	}
	return 0;

}
#include<bits/stdc++.h>
#define LL long long int
#define REP(i,n) for(int i=0;i<n;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
#define TC int t;scanf("%d",&t);while (t-->0)
#define INP(x) scanf("%d",&x)
#define OUT(x) printf("%d\n",x)
#define INPLL(x) scanf("%lld",&x)
#define OUTLL(x) printf("%lld\n",x)
#define INPS(x) scanf("%s",x)
#define MEM(a,b) memset(a,b,sizeof(a))
#define MP make_pair
#define PB push_back
#define PII pair<int,int>
#define PLL pair<long long,long long>
#define VPII vector<pair<int,int> >
#define F first
#define S second
#define MOD 1000000007
#define mod 10000007
using namespace std;
vector<vector<long long> > multmat(vector<vector<long long> > &A, vector<vector<long long> > &B, int n, int p, int m)
{
	vector<vector<long long> > C(n, vector<long long>(m,0));
	for(int i=0; i<n; i++){
		for(int k=0; k<p; k++){
			for(int j=0; j<m; j++){
				C[i][j] += A[i][k] * B[k][j];
				C[i][j] %= MOD;
			}
		}
	}
	return C;
}
vector<vector<long long> > mat_pow(vector<vector<long long> > A, long long k)
{
	int n = A.size();
	vector<vector<long long> > ret(n, vector<long long>(n, 0) );
	for(int i=0; i<n; i++){
		ret[i][i] = 1;
	}
	while(k>0LL){
		if(k&1LL) ret = multmat(A,ret, n,n,n);
		A = multmat(A,A, n,n,n);
		k>>=1LL;
	}
	return ret;
}

vector<int> bits = {0b0000,0b0000,0b0001,0b0010,0b0000,0b0100,0b0011,0b1000,0b0001,0b0000};

int main()
{
	int T;
	INP(T);
	int sz = 1<<4;
	vector<int> state_in(sz, 0);
	for(int i=1; i<bits.size(); i++)
    {
		state_in[bits[i]]++;
	}
	vector<vector<long long>> A(sz, vector<long long>(sz, 0));
	for(int i=0; i<(sz); i++)
	{
		for(int j=0; j<(sz); j++)
		{
			A[i^j][i] = state_in[j];
		}
	}


	vector<vector<long long>> B(sz, vector<long long>(1, 0));
	B[0][0] = 1;


	while(T--)
    {
		long long N;
		INPLL(N);
		auto A_ = A;
		A_ = mat_pow(A_, N);
		auto B_ = B;
		auto res = multmat(A_, B, sz, sz, 1);

		long long ans = 0;
		REPP(i,1,sz)
        {
			ans += res[i][0];
			ans %= MOD;
		}
		OUTLL(ans);
	}
	return 0;
}

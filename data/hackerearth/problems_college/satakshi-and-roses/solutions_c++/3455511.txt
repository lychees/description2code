/*********************************ENTER THE DRAGON**********************************/
 
#include <cstdio>
#include <iostream>
#include <cmath>
#include <string>
#include <list>
#include <vector>
#include <algorithm>
#include <functional>
#include <utility>
#include <set>
#include <map>
#include <complex>
#include <queue>
#include <stack>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string.h>
#include <cassert>
#include <climits>
using namespace std;
 
/************************************************************************************/
 
const int maxn = 252;
int C[maxn][maxn];
int x[maxn];

int getC(int i, int j, int c) {
	if (i == 0) return C[j][c];
	else return C[j][c] - C[i - 1][c];
}
 
long long GET(int n, int m, int LL, int RR) {
   
   for (int c = 0; c < m; c++) {
   	  for (int i = 1; i < n; i++) {
             
	       C[i][c] += C[i - 1][c];
   	  }
   }
   
   long long cnt = 0, total = 1LL * n * m * (n + 1) * (m + 1);
   total /= 4;
   
   for (int i = 0; i < n; i++) {
   	    for (int j = i; j < n; j++) {
   	    	 
   	    	 for (int k = 0; k < m; k++) {
   	    	 	  x[k] = getC(i, j, k);
   	    	 }
   	    	 
   	    	 int Ll = 0, Rr = 0, sum = 0;
   	    	 for (int k = 0; k < m; k++) {
   	    	 	  
   	    	 	  while (Ll < k) sum -= x[Ll++];
   	    	 	  while (Rr < m && sum + x[Rr] < LL) sum += x[Rr++];
   	    	 	  cnt += (Rr - Ll);
   	    	 	  if (Rr == k) {
   	    	 	  	  sum += x[Rr++];
   	    	 	  }
   	    	 	  
   	    	 }
   	    	 
   	    	 Ll = 0; Rr = 0; sum = 0;
   	    	 for (int k = 0; k < m; k++) {
   	    	 	  
   	    	 	  while (Ll < k) sum -= x[Ll++];
   	    	 	  while (Rr < m && sum + x[Rr] <= RR) sum += x[Rr++];
   	    	 	  cnt += ((m - 1) - Ll + 1) - (Rr - Ll);
   	    	 	  if (Rr == k) {
   	    	 	  	  sum += x[Rr++];
   	    	 	  }
   	    	 	  
   	    	 }
   	    }
   }
   
   return total - cnt;
}
 
int main()
{
   int t; 
   scanf("%d", &t);
   while (t--) {
   	      int n, m, L, R;
   	      scanf("%d %d %d %d", &n, &m, &L, &R);
   	      for (int i = 0; i < n; i++) {
   	      	   for (int j = 0; j < m; j++) {
   	      	   	    scanf("%d", &C[i][j]);
   	      	   }
   	      }
   	      printf("%lld\n", GET(n, m, L, R));
   }
   return 0;
} 
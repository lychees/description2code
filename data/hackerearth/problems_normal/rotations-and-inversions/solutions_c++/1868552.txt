#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:32777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
using namespace std;

#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define REP(i, N) FOR(i, 0, N)
#define RREP(i, N) RFOR(i, N, 0)
#define FILL(A,value) memset(A,value,sizeof(A))

#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979

typedef long long Int;
typedef unsigned long long UINT;
typedef vector <int> VI;
typedef pair <int, int> PII;

const int INF = 1000000000;
const int MAX = 100007;
const int MAX2 = 2000;
const int BASE = 1000000000;

Int L1[MAX];
Int L2[MAX];
Int R1[MAX];
Int R2[MAX];
int t[MAX];
int n;

int pn[MAX], cn[MAX];
int p[MAX], cnt[MAX], c[MAX];

int sum (int r)
{
	int result = 0;
	for (; r >= 0; r = (r & (r+1)) - 1)
		result += t[r];
	return result;
}

void inc (int i, int delta)
{
	for (; i < n; i = (i | (i+1)))
		t[i] += delta;
}

int sum (int l, int r)
{
	return sum(r) - sum(l-1);
}

map<int,int> M;

int main()
{
    //freopen("in.txt", "r", stdin);

    int tst;
    cin >> tst;
    FOR(tt,0,tst)
    {
        cin >> n;
        vector<int> a(n);
        M.clear();
        FOR(i,0,n)
        {
            scanf("%d" , &a[i]);
            M[a[i]]=0;
        }

        int ccc = 0;
        for(map<int,int>::iterator it = M.begin(); it != M.end(); ++it)
        {
            it->second = ccc++;
        }
        FOR(i,0,n)
        {
            a[i] = M[a[i]];
        }
        FILL(t,0);
        FILL(L1,0);
        FILL(L2,0);
        FILL(R1,0);
        FILL(R2,0);

        FOR(i,0,n)
        {
            if (i)
            {
                L1[i] = L1[i - 1];
                L2[i] = L2[i - 1];
            }
            L1[i] += sum(a[i]+1,n-1);
            L2[i] += sum(0,a[i]-1);
            inc(a[i],1);
        }
        FILL(t,0);
        RFOR(i,n,0)
        {
            if (i != n - 1)
            {
                R1[i] = R1[i + 1];
                R2[i] = R2[i + 1];
            }
            R2[i] += sum(a[i]+1,n-1);
            R1[i] += sum(0,a[i]-1);
            inc(a[i],1);
        }



        FILL(cnt,0);
        for (int i=0; i<n; ++i)
            ++cnt[a[i]];
        for (int i=1; i<n; ++i)
            cnt[i] += cnt[i-1];
        for (int i=0; i<n; ++i)
            p[--cnt[a[i]]] = i;
        c[p[0]] = 0;
        int classes = 1;
        for (int i=1; i<n; ++i) {
            if (a[p[i]] != a[p[i-1]])  ++classes;
            c[p[i]] = classes-1;
        }

        for (int h=0; (1<<h)<n; ++h) {
            for (int i=0; i<n; ++i) {
                pn[i] = p[i] - (1<<h);
                if (pn[i] < 0)  pn[i] += n;
            }
            memset (cnt, 0, classes * sizeof(int));
            for (int i=0; i<n; ++i)
                ++cnt[c[pn[i]]];
            for (int i=1; i<classes; ++i)
                cnt[i] += cnt[i-1];
            for (int i=n-1; i>=0; --i)
                p[--cnt[c[pn[i]]]] = pn[i];
            cn[p[0]] = 0;
            classes = 1;
            for (int i=1; i<n; ++i) {
                int mid1 = (p[i] + (1<<h)) % n,  mid2 = (p[i-1] + (1<<h)) % n;
                if (c[p[i]] != c[p[i-1]] || c[mid1] != c[mid2])
                    ++classes;
                cn[p[i]] = classes-1;
            }
            memcpy (c, cn, n * sizeof(int));
        }

        /*FOR(i,0,n)
        {
            cout << cn[i] << ' ';
        }
        cout << endl;*/

        Int res = L1[n - 1];
        int cl = cn[0];
        int id = 0;

        FOR(i,1,n)
        {
            Int r = L2[n - 1];
            r -= R2[i];
            r -= L2[i - 1];
            r += R1[i];
            r += L1[i - 1];
            if (r > res || (r == res && cn[i] < cl))
            {
                res = r;
                id = i;
                cl = cn[i];
            }
        }
        cout << id << ' ' << res << endl;

    }

    return 0;
}

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define mp make_pair
vector<int> v[100002];
vector<int> w[100002];
int ll dist[100002];
int visited[100020];
int parent1[100002];
int parent2[100002];
 
void dijikstra(int t,int destination,int opt)
{
    dist[t]=0;
    priority_queue <pair<int,int> > q;
    q.push(mp(0,t));
   // cout<<"a"<<endl;
    while(q.size())
    {
        pair<int,int > p=q.top();
        q.pop();
        int root=p.second;
        visited[root]=1;
        if(root==destination)
            return ;
 
        int i;
        for(i=0;i<v[root].size();i++)
        {
            int x=v[root][i];
            int wt=w[root][i];
            if(dist[x] > dist[root]+wt)
            {
                dist[x]=dist[root]+wt;
                if(opt==1)
                 parent1[x]=root;
                 else
                parent2[x]=root;
 
                 q.push(make_pair(-dist[x], x));
            }
                                //cout<<"b"<<endl;
 
        }
       // cout<<"c"<<endl;
 
    }
}
void dfs1(int v)
{
    if(parent1[v]==-1)
    {
        printf("%d ",v);
    }
    else
    {
 
        dfs1(parent1[v]);
        printf("%d ",v);
 
    }
}
void dfs2(int f,int v)
{
    if(parent2[v]==-1)
    {
        if(v!=f)
        printf("%d ",v);
    }
    else
    {
 
        dfs2(f,parent2[v]);
        if(v!=f)
        printf("%d ",v);
 
    }
}
int main()
{
    int t;
    cin>>t;
    int vertex,edges,i,j,k;
    while(t--)
    {
        cin>>vertex>>edges;
        int a,b,c;
        for(i=0;i<edges;i++)
        {
            cin>>a>>b>>c;
            v[a].push_back(b);
            v[b].push_back(a);
            w[a].push_back(c);
            w[b].push_back(c);
        }
        cin>>a>>b>>c;
        for(i=0;i<=vertex;i++)
        {
            dist[i]=INT_MAX;
            visited[i]=0;
            parent1[i]=-1;
        }
       dijikstra(a,b,1);
      // cout<<"jl"<<endl;
       ll x=dist[b];
      // cout<<"1 to 3  "<<x<<endl;
        for(i=0;i<=vertex;i++)
        {
            dist[i]=INT_MAX;
            visited[i]=0;
            parent2[i]=-1;
        }
        dijikstra(b,c,2);
               //cout<<"3 to 6  "<<dist[c]<<endl;
 
        if(x==INT_MAX||dist[c]==INT_MAX)
        {
            cout<<"No Train Found."<<endl;
        }
        else
        {
            cout<<x+dist[c]<<endl;
            dfs1(b);
            dfs2(b,c);
            cout<<endl;
 
        }
        for(i=0;i<=vertex;i++)
        {
            v[i].clear();
            w[i].clear();
        }
    }
}
#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 505;
typedef vector<int> vii;
typedef vector<vii> mat;

int mod_pow(int x, int n, int p) {
	if (n <= 0) return 1;
	int ret = 1;
	while (n) {
		if (n & 1) ret = ret * x % p;
		x = x * x % p;
		n >>= 1;
	}
	return ret;
}

void print(mat &a, int n) {
	repu(i, 0, n) repu(j, 0, n) printf("%d%c", a[i][j], j == n - 1 ? '\n' : ' ');
}

int det(mat &a, int p, int n) {
	int ret = 1;
	repu(c, 0, n) {
		int row = -1;
		repu(r, c, n) {
			a[r][c] %= p;
			if (a[r][c] != 0) {
				row = r; break;
			}
		}
		if (row == -1) return 0;
		if (row != c) {
			swap(a[c], a[row]); ret = -ret;
		}
		ret = ret * a[c][c] % p;
		if (ret < 0) ret += p;
		int b = mod_pow(a[c][c], p - 2, p);
		repu(r, c + 1, n) {
			int x = b * a[r][c] % p;
			repu(j, c, n) {
				a[r][j] = (a[r][j] - x * a[c][j]) % p;
				if (a[r][j] < 0) a[r][j] += p;
			}
		}
	}
	return ret;
}

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int ntest, n, k, m;
	ll ret;
	
	cin >> ntest;
	while (ntest--) {
		cin >> n >> k >> m;
		mat A(n, vii(n, 0));
		repu(i, 0, n) repu(j, 0, n) {
			if (tabs(i - j) <= k) A[i][j] = tabs(i - j);
		}
		printf("%d\n", det(A, m, n));
	}
	
	return 0;
}

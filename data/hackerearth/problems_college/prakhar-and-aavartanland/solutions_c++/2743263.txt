#include <stdio.h>
int a[200005];
char str[200005];
struct Node{
	int sum1,sum2,flag;
};
 struct Node tree[800010];
void swap(int node)
{
	int temp=tree[node].sum1;
	tree[node].sum1=tree[node].sum2;
	tree[node].sum2=temp;
}
void create_tree(int start,int end,int node)
{
	if(start>end)
	return;
	if(start==end)
	  {
	  	if(a[start]==1)
	  		tree[node].sum1=a[start];
	  	else
	  	tree[node].sum2=-a[start];
	  		tree[node].flag=0;
	  	return;
	  }
	 int mid=(start+end)/2;
 int left=(node<<1);
 int right=left+1;
 create_tree(start,mid,left);
 create_tree(mid+1,end,right);
 tree[node].sum1=tree[left].sum1+tree[right].sum1;
 tree[node].sum2=tree[left].sum2+tree[right].sum2;
 tree[node].flag=0; 
}
void update(int start,int end,int l,int r,int node)
{
	int mid=(start+end)>>1;
     int left=(node<<1);
    int right=(node<<1)+1;
	if(tree[node].flag!=0)
	{
		swap(node);
		if(start!=end)
		{
			tree[left].flag=1^tree[left].flag;
			tree[right].flag=1^tree[right].flag;
			
		}
		tree[node].flag=0;
		
		}
	if(start>end||l>end||r<start)
	 return;
	 if(l<=start&&end<=r)
	 {
	 	swap(node);
	 	if(start!=end)
	 	{
	 		tree[left].flag=1^tree[left].flag;
			tree[right].flag=1^tree[right].flag;
	 	}
	 	return;
	 }
	 
	 update(start,mid,l,r,left);
	 update(mid+1,end,l,r,right);
	 tree[node].sum1=tree[left].sum1+tree[right].sum1;
     tree[node].sum2=tree[left].sum2+tree[right].sum2;
	
}
int query(int start,int end,int l,int r,int node,int q)
{
	int mid=(start+end)>>1;
    int left=(node<<1);
	  int right=(node<<1)+1;
	if(start>end||l>end||r<start)
	 return 0;
	if(tree[node].flag!=0)
	{
		swap(node);
 
	if(start!=end)
	{
			tree[left].flag=1^tree[left].flag;
			tree[right].flag=1^tree[right].flag;
	}
	tree[node].flag=0;
	}
	if(start>=l&&end<=r)
	{
		if(q==1)
		return tree[node].sum2;
		else
		return tree[node].sum1;
	}
  int ans=0;
  ans+=query(start,mid,l,r,left,q);
  ans+=query(mid+1,end,l,r,right,q);
  return ans;
	
}
 
int main()
{
    
    int n,m,l,r,i,ch;
    scanf("%d %d",&n,&m);
    scanf("%s",str);
    n--;
    for(i=1;i<=n;i++)
    {
    	if(str[i-1]=='>')
    	 a[i]=1;
    	 else
    	 a[i]=-1;
    	 
    }
    create_tree(1,n,1);
    for(i=1;i<=m;i++)
    {
    	scanf("%d %d %d",&ch,&l,&r);
    	if(ch==2)
    	{
    		 if(l==r)
                    printf("0\n");
                else if(l<r)
                    printf("%lld\n",query(1,n,l,r-1,1,1));
                else
                    printf("%lld\n",query(1,n,r,l-1,1,2));
            }
           else{
           if(l<r)
           	update(1,n,l,r-1,1);
           else if(l>r)
           	update(1,n,r,l-1,1);
           }
    		
    	}
    return 0;
}
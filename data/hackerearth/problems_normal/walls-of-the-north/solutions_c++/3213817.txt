#include <cstdio>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;

void solve() {
    int n;
    scanf("%d", &n);
    vector<int> A(n);
    map<int, int> M;
    for (int i = 0; i < n; i++) {
        scanf("%d", &A[i]);
        M[A[i]];
    }
    int pt = 0;
    for (map<int, int>::iterator it = M.begin(); it != M.end(); it++)
        it->second = pt++;
    for (int& x : A)
        x = M[x];
    vector<int> F(pt), G(pt);
    
    auto get_F = [&](int x) {
        int res = 0;
        for (; x >= 0; x &= x + 1, --x)
            if (res < F[x])
                res = F[x];
        return res;
    };

    auto upd_F = [&](int x, int v) {
        for (; x < F.size(); x |= x + 1)
            if (F[x] < v)
                F[x] = v; 
    };

    auto get_G = [&](int x) {
        int res = 0;
        for (; x < G.size(); x |= x + 1)
            if (res < G[x])
                res = G[x];
        return res;
    };

    auto upd_G = [&](int x, int v) {
        for (; x >= 0; x &= x + 1, --x)
            if (G[x] < v)
                G[x] = v;
    };

    for (int x : A) {
        int dU = get_F(x) + 1, dV = get_G(x) + 1;
        upd_G(x, dU), upd_F(x, dV);
    }
    int ans = max(*max_element(F.begin(), F.end()), *max_element(G.begin(), G.end()));
    printf("%d\n", ans);
}

int main() {
    int T;
    scanf("%d", &T);
    for (int i = 0; i < T; i++)
        solve();
}

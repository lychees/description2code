#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef unsigned long long int ll;
struct edge {
	int a, b, c;
};

int parent[1000010];


bool comp(edge e1, edge e2){

	return e1.c < e2.c;
}

void init(int n){

	int i=0;
	for(i=0; i<=n; i++){
		parent[i] = i;
	}
}

int getparent(int a){

	if(a == parent[a]){
		return a;
	}
	parent[a] = getparent(parent[a]);
	return parent[a];
}

void combine(int p1, int p2){

	parent[p1] = p2;
}

int main(){
	ios_base::sync_with_stdio(false);
	int n, m, i=0;
	long long int k;
	cin >> n >> m >> k;
	vector<edge> e(m+1);
	init(n);

	for(i=0; i<m; i++){

		cin >> e[i].a >> e[i].b >> e[i].c;
	}

	sort(e.begin(), e.end(), comp);
	vector<int> result;
	i=0;
	int cnt = 0;
	ll sum = 0;
	while(cnt < n-1 && i<m){

		int p1 = getparent(e[i].a);
		int p2 = getparent(e[i].b);

		if(p1!=p2){
			sum = sum + e[i].c;
			cnt++;
			result.push_back(i);
			combine(p1, p2);
		} 
		
		i++;
	}
	if(i==m && cnt!=n-1){

		cout << "-1" << endl;
	} else {
		int len = result.size();

		cnt = 0;
		if(sum <= k){
			cout << "0" << endl;
		} else {
			
			for(i=len-1; i>=0; i--){
				cnt++;
				sum = sum - e[result[i]].c+1;
				if(sum <= k){
					break;
				} 

			}

			if(i < 0 || sum > k){
				cout << "-1" << endl;
			} else {
				cout << cnt << endl;
			}

		}

	}
}	
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int maxn = 1e5 + 5;

int n;
vector<pair<int,long long>> e[maxn];

int lim;
long long cost;
int sz[maxn];
long long sum[maxn];

void dfs1(int v, int pre)
{
	sz[v] = 1;
	sum[v] = 0;
	for(auto x : e[v])
	{
		int u = x.first;
		long long w = x.second;
		if(u == pre) continue;
		dfs1(u, v);
		if(w <= lim)
		{
			sz[v] += sz[u];
			sum[v] += sz[u] + sum[u];
		}
	}
}

long long dfs(int v, int pre, int cnt, long long cur)
{
	long long lo = cur;
	for(auto x : e[v])
	{
		int u = x.first, w = x.second;
		if(u == pre) continue;
		if(w > lim) cost += dfs(u, v, 0, sum[u]);
		else lo = min(lo, dfs(u, v, cnt + sz[v] - sz[u], cur - sz[u] + (cnt + sz[v] - sz[u])));
	}
	return lo;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	long long k;
	cin >> n >> k;
	int a[100005];
	for(int i = 1; i < n; i++)
	{
		int u, v, w;
		cin >> u >> v >> w;
		e[u].push_back({v, w});
		e[v].push_back({u, w});
		a[i - 1] = w;
	}

	sort(a, a + n - 1);

	int l = 0, r = n - 2;
	while(l <= r)
	{
		int mid = (l + r)/2;
		lim = a[mid];
		cost = 0;
		dfs1(1, 0);
		cost += dfs(1, 0, 0, sum[1]);
		if(cost > k) r = mid - 1;
		else l = mid + 1;
	}
	if(l == n - 1) cout << 1000000000;
	else cout << a[l] - 1;

	return 0;
}
#pragma comment(linker, "/STACK:66777216")
#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <utility>
#include <functional>
#include <iostream>
#include <iomanip>
#include <ctime>
#include <cassert>
#include <queue>
#include <cmath>
#include <random>
#include <sstream>
#pragma hdrstop

using namespace std;



#define ll long long

const int INF = 0x3f3f3f3f;
const double EPS = 1e-9;
const ll LINF = 0x3f3f3f3f3f3f3f3fLL;

int __;

void inputFiles();


template<class T> struct FenwickTreeSum {

	T *data;
	int N;

	FenwickTreeSum(int N) : N(N) {
		data = new T[N];
		memset(data, 0, N * sizeof(T));
	}

	~FenwickTreeSum() {
		delete[] data;
	}

	void clear() {
		memset(data, 0, N * sizeof(T));
	}


	void inc(int v, T delta) {
		for (; v < N; v = (v | (v + 1))) {
			data[v] += delta;
		}
	}

	T query(int v) {
		T res = 0;
		for (; v >= 0; v = (v & (v + 1)) - 1) {
			res += data[v];
		}
		return res;
	}

	T query(int l, int r) {
		if (r < l) {
			return 0;
		}
		return query(r) - query(l - 1);
	}

};

//#define TASK "task"

const int MOD = 1000000007;
const int MAXN = 555555;

int a[MAXN], w[MAXN];
FenwickTreeSum<int> tree(MAXN * 3);

void solve(istream& in, ostream& out) {
	inputFiles();
	int n, q, lb = MAXN, rb;
	in >> n >> q;
	tree.clear();
	for (int i = 0; i < n; ++i) {
		in >> a[i];
		w[a[i]] = i + lb;
		tree.inc(i + lb, 1);
	}
	rb = lb + n - 1;
	ll ans = 0;
	for (int i = 0; i < q; ++i) {
		int x;
		char ch;
		in >> x >> skipws >> ch;
		int v = w[x];
		ans += min(tree.query(lb, v - 1), tree.query(v + 1, rb));
		tree.inc(v, -1);
		if (ch == 'l') {
			w[x] = --lb;
			tree.inc(lb, 1);
		} else 
		if (ch == 'r') {
			w[x] = ++rb;
			tree.inc(rb, 1);
		} else {
			assert(false);
		}
	}
	out << ans << endl;
}




inline void inputFiles() {
}
#include <fstream>


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    istream& in = cin;

    ostream& out = cout;
    solve(in, out);
    return 0;
}


/**
 	Name: Shivam Mishra
 	handle: shivam217
 **/
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <limits>
#include <limits.h>



using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define FORC(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

const int INF = INT_MAX;
const int MAXN = 100005;
const int MOD = 1e9 + 7;

int checker[MAXN + 5];
int Factor[MAXN + 5];
VI primes;

void sieve()
{

        FOR(i,2,MAXN)
        {
            checker[i] = 1;
            Factor[i] = i;
        }


    FOR(i,2,MAXN)
	{
		if(checker[i]==0)
            continue;

		primes.push_back(i);

		int j = 2*i;

		while(j<=MAXN)
		{
			if(checker[j])
			{
				checker[j] = 0;
				Factor[j] = min(Factor[j] , i);
			}
			j += i;
		}
	}
}

LL Powers(LL a , LL b)
{
	LL result = 1;
	while(a>0)
	{
		result += (a/b);
		a /= b;
	}
	return result;
}

LL findAns(LL a)
{
	LL result = 1;
	int sz = primes.size();

	FOR(i,0,sz)
	{
		result *= Powers(a , primes[i]);
		if(result >= MOD)
			result %= MOD;
	}
	return result;
}


int main()
{
    sieve();
    int test; INT(test);
    while(test--)
    {
        int x,y; INT(x); INT(y);

        if(x<=y)
        {
            printf("0\n");
            continue;
        }

            LL ans =(LL)findAns(x) - (LL)findAns(y) + MOD;

			while(ans < 0)
				ans += MOD;

			PLLD(ans%MOD);




    }

return 0;
}

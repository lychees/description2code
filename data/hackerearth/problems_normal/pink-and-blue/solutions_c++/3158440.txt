#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e5+3;
bool vis[MAXN];
bool ar[MAXN];
char ge[MAXN];
vector<int> v[MAXN];
const int INF=1e7+3;
bool f;
int DFS(int s, bool g) {
	vis[s]=true;
	ar[s]=g;
	int ret;
	if((ge[s]=='B' and g==true) or (ge[s]=='G' and g==false))
		ret=0;
	else
		ret=1;
	for(int j=0;j<(int)v[s].size();j++) {
		if(!vis[v[s][j]])
			ret+=DFS(v[s][j],!g);
		else if(ar[v[s][j]]==g) {
			f=true;
			return INF;
		}
	}
	return ret;
}
int main() {
	int n,m;
	cin>>n>>m;
	for(int i=1;i<=n;i++)
		cin>>ge[i];
	for(int i=1;i<=m;i++) {
		int x,y;
		cin>>x>>y;
		v[x].push_back(y);
		v[y].push_back(x);
	}
	bool f=false;
	int ans=DFS(1,true);
	int c=0;
	if(f)
		c++;
	memset(vis,false,sizeof(vis));
	f=false;
	ans=min(ans,DFS(1,false));
	if(f)
		c++;
	if(c==2)
		cout<<"Not possible\n";
	else
		cout<<ans<<endl;
	return 0;
}
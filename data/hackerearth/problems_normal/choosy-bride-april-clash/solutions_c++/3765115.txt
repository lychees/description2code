#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

int main() {
	int T;
	scanf("%d", &T);
	for(int ii = 0; ii < T; ++ ii) {
		int N; int Q;
		scanf("%d%d", &N, &Q);
		vector<long long> A(N * 2);
		for(int i = 0; i < N; ++ i) {
			int a;
			scanf("%d", &a);
			A[i] = A[N * 2 - 1 - i] = a;
		}
		N *= 2;

		int BlockSize = 500, NumBlocks = (N + BlockSize - 1) / BlockSize;
		vector<long long> blockAdd(NumBlocks, 0);
		vector<vector<long long>> blockValues(NumBlocks);

		auto makeBlock = [&](int bi) {
			int L = bi * BlockSize, R = min(N, (bi + 1) * BlockSize);

			long long add = blockAdd[bi];
			reu(i, L, R)
				A[i] += add;
			blockAdd[bi] = 0;

			vector<long long> &values = blockValues[bi];
			values.clear();
			long long prefixMax = -INFL;
			reu(i, L, R) {
				long long a = A[i];
				if(prefixMax <= a) {
					values.push_back(a);
					prefixMax = a;
				}
			}
		};

		rep(bi, NumBlocks)
			makeBlock(bi);

		for(int ii = 0; ii < Q; ++ ii) {
			int ty;
			scanf("%d", &ty);
			if(ty == 1) {
				int oL, oR;
				scanf("%d%d", &oL, &oR), -- oL, -- oR;

				int L, R;
				if(oL <= oR)
					L = oL, R = oR + 1;
				else
					L = N - 1 - oL, R = N - oR;

				int ans = 0;

				int bL = (L + BlockSize - 1) / BlockSize;
				int bR = max(bL, R / BlockSize);
				long long prefixMax = -INFL;
				if(L < bL * BlockSize) {
					int j = min(R, bL * BlockSize);
					long long add = blockAdd[bL - 1];
					for(int i = L; i < j; ++ i) {
						long long a = A[i] + add;
						if(prefixMax <= a) {
							++ ans;
							prefixMax = a;
						}
					}
				}
				for(int bi = bL; bi < bR; ++ bi) {
					const vector<long long> &values = blockValues[bi];
					long long add = blockAdd[bi];
					int k = lower_bound(values.begin(), values.end(), prefixMax - add) - values.begin();
					if(k != values.size()) {
						ans += values.size() - k;
						prefixMax = values.back() + add;
					}
				}
				if(bR * BlockSize < R) {
					long long add = blockAdd[bR];
					for(int i = bR * BlockSize; i < R; ++ i) {
						long long a = A[i] + add;
						if(prefixMax <= a) {
							++ ans;
							prefixMax = a;
						}
					}
				}

				printf("%d\n", ans);
			} else if(ty == 2) {
				int oL, oR, x;
				scanf("%d%d%d", &oL, &oR, &x), -- oL, -- oR;

				rep(rev, 2) {
					int L, R;
					if(rev == 0)
						L = oL, R = oR + 1;
					else
						L = N - 1 - oR, R = N - oL;

					int bL = (L + BlockSize - 1) / BlockSize;
					int bR = max(bL, R / BlockSize);

					if(L < bL * BlockSize) {
						int j = min(R, bL * BlockSize);
						for(int i = L; i < j; ++ i)
							A[i] += x;
						makeBlock(bL - 1);
					}
					for(int bi = bL; bi < bR; ++ bi) {
						blockAdd[bi] += x;
					}
					if(bR * BlockSize < R) {
						for(int i = bR * BlockSize; i < R; ++ i)
							A[i] += x;
						makeBlock(bR);
					}
				}
			} else abort();
		}
	}
	return 0;
}

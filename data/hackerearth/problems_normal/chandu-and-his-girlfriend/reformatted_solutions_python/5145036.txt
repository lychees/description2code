def merge(data, l, m, r):
    n1 = m-l+1
    n2 = r-m
    left = [0]*n1
    right = [0]*n2

    for i in range(0, n1):
        left[i] = int(data[l+i])
    for j in range(0, n2):
        right[j] = int(data[j+1+m])

    i = 0
    j = 0
    k = l
    while i < n1 and j < n2:
        if left[i] >= right[j]:
            data[k] = left[i]
            i += 1
        else:
            data[k] = right[j]
            j += 1
        k += 1

    while i < n1:
        data[k] = left[i]
        i += 1
        k += 1
    while j < n2:
        data[k] = right[j]
        j += 1
        k += 1


def merge_sort(data, l, r):
    if l < r:
        m = int((l+(r-1))/2)
        merge_sort(data, l, m)
        merge_sort(data, m+1, r)
        merge(data, l, m, r)


def partition(data, start, end):
    i = start-1
    piv = data[end]
    for j in range(start, end):
        if data[j] <= piv:
            i += 1
            data[i], data[j] = data[j], data[i]
    data[i+1], data[end] = data[end], data[i+1]
    return i+1


def quick_sort(data, start, end):
    if start < end:
        piv_pos = partition(data, start, end)
        quick_sort(data, start, piv_pos - 1)
        quick_sort(data, piv_pos + 1, end)


test_case = int(input())
while test_case > 0:
    test_case -= 1
    arr_length = int(input())
    arr_input = raw_input().split(" ")
    for x in range(0, arr_length):
        arr_input[x] = int(arr_input[x])
    # merge_sort(arr_input,0,arr_length-1)
    # arr_input.sort()
    quick_sort(arr_input, 0, arr_length-1)
    output = ""
    for x in range(0, arr_length):
        output += str(arr_input[arr_length-x-1])+" "
    print(output)

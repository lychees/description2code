#include<bits/stdc++.h>

//#include "macros.cpp"

using namespace std;

#define lli                         long long int
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

#define forup(i,a,b)               for(int i=a;i<b;i++)
#define fordn(i,a,b)               for(int i=a;i>=b;i--)

#define pb      push_back
#define mod     1000000007

class Graph {
    vector<lli> *vert;
    lli *a;
    lli n;
public:
    Graph(lli *a,lli n) {
        vert=new vector<lli> [n];
        this->a=a;
        this->n=n;
    }
    void addEdge(lli i,lli j) {
        //debug(i,j);
        vert[i].pb(j);
        vert[j].pb(i);
    }

    void bfs(lli u,vector<bool> &visited,lli &currmax,lli &count) {
        visited[u]=true;

        forup(i,0,vert[u].size()) {
            int v=vert[u][i];

            if(!visited[v]) {
                if(a[v] > currmax) {
                    currmax=a[v];
                    count=1;
                }
                else if(a[v]==currmax)
                    count++;

                bfs(v,visited,currmax,count);
            }
        }
    }

    lli party() {
        lli start=0;

        vector<bool> visited(n,false);
        lli ans=1;
        //lli start=0;
        do {
            
            while(start<n && visited[start]) start++;

            if(start>=n)
                break;

            lli count=1;
            lli max=a[start];
            bfs(start,visited,max,count);

            ans=(ans*count)%mod;
        } while(true);

        return ans;
    }
};
int main() {
    lli n;
    lli m;
    sl(n);sl(m);
    lli a[n];
    forup(i,0,n) sl(a[i]);

    Graph g(a,n);
    forup(i,0,m) {
        lli u,v;
        sl(u);sl(v);
        g.addEdge(u-1,v-1);
    }

    printf("%lld",g.party());
    return 0;
}

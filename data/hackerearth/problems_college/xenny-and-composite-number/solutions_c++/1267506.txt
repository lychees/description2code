#include <iostream>
#include<math.h>
using namespace std;
#define ll long long
void sieve_atkins(ll int n,bool is_prime[])
{
    
    is_prime[2] = true;
    is_prime[3] = true;
    for (ll int i = 5; i <= n; i++)
    {
        is_prime[i] = false;
    }
    ll int lim = ceil(sqrt(n));
    for (ll int x = 1; x <= lim; x++)
    {
        for (ll int y = 1; y <= lim; y++)
        {
            ll int num = (4 * x * x + y * y);
            if (num <= n && (num % 12 == 1 || num % 12 == 5))
            {
                is_prime[num] = true;
            }
            num = (3 * x * x + y * y);
            if (num <= n && (num % 12 == 7))
            {
                is_prime[num] = true;
            }
 
            if (x > y)
            {
                num = (3 * x * x - y * y);
                if (num <= n && (num % 12 == 11))
                {
                    is_prime[num] = true;
                }
            }
        }
    }
    for (ll int i = 5; i <= lim; i++)
    {
        if (is_prime[i])
        {
            for (ll int j = i * i; j <= n; j += i)
            {
                is_prime[j] = false;
            }
        }
    }
    int counter=0;
/*
    for (ll int i = 2; i <= n; i++)
    {
         if (is_prime[i])
         {
             cout<<i<<"\n";
             counter+=1;
             if(counter==n1)
              break;
           
         }
    }*/
}
int main()
{
    long long  int T, n,m=1000008;
     bool is_prime[1000008];
    sieve_atkins(m,is_prime);
    cin>>T;
    for(int i=0;i<T;i++)
    {
    	int n;
    	cin>>n;
    	if(n==0 || n==1)
    	 cout<<"4\n";
    	 else
    	 {
    	for(int j=n+1;j<1000001;j++)
    	{
    		if(!is_prime[j])
    		 {
    		 cout<<j<<"\n";
    		 break;
    		 }
    	}
    	 }
    }
}

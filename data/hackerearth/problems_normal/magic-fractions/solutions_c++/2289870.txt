#include<bits/stdc++.h>
#define INF 1e9
#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<=(b);++i)
#define FORD(i,a,b) for(int i=(a);i>=(b);--i)
#define FOREACH(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();++i)
#define MAXN 30
#define MAXV 30000
#define MOD 1000000007
#define get(a) geta(&a)
#define getw getchar
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define MAX 100
typedef long long ll;
using namespace std;
template<class T>
inline void geta(T* a)
{
    T n=0;
    char p;
    T s=1;
    p=getw();
    if(p=='-')
        s=-1;
    while((p<'0'||p>'9')&&p!=EOF&&p!='-')
        p=getw();
    if(p=='-')
        s=-1;
    while(p>='0'&&p<='9')
    {
        n=(n<<3)+(n<<1)+p-'0';
        p=getw();
    }
    *a=n*s;
}

ll no_digits(ll a,ll b)
{
    ll ans=(int)(b*log10(a))+1;
    return ans;
}

ll pow_10(ll d)
{
    ll res=1;
    for(ll i=1;i<=d;++i)
        res*=10;
    return res;
}

ll power(ll a,ll b,ll d)
{
    ll res=1;
    ll rm=d;
    //cout<<"pow_10 "<<rm<<endl;
    while(b>0)
    {
        if(b&1)
        {
            res=((res%rm)*(a%rm))%rm;
        }
        a=((a%rm)*(a%rm))%rm;
        b/=2;
    }
    return res;
}

ll gcd(ll a,ll b)
{
    if(a==0)
        return b;
    return gcd(b%a,a);
}

ll gcd2(ll a,ll b)
{
    while(a)
    {
        ll r=b%a;
        b=a;
        a=r;
    }
    return b;
}


bool prime[1000];

void find_prime()
{
    memset(prime,1,sizeof prime);
    prime[1]=0;
    for(int i=2;i*i<=1000;++i)
    {
        if(prime[i])
        for(int j=i;j*i<=1000;++j)
        {
            prime[i*j]=0;
        }
    }
}

ll dp[1000];

void pre()
{
    dp[1]=0;
    dp[2]=1;
    dp[3]=3;
    dp[4]=2+3;
    ll cnt=2;
    for(int i=5;i<=500;++i)
    {
      if(prime[i])
      {
          cnt*=2;
          dp[i]=dp[i-1]+cnt;
      }
      else
        dp[i]=dp[i-1]+cnt;
    }
}

int main()
{
    find_prime();
    pre();
    int N;
    get(N);
    printf("%lld\n",dp[N]);
    return 0;
}

#include <iostream>

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <assert.h>

#define MAXINT1 100000
#define MAXINT2 1000000000

using namespace std;
int main()
{
   long long int  N,Q,K;
   long long int temp,total=0;
    
    cin>>N>>Q;
    assert( N >=1 &&  N <= MAXINT1);
    assert( Q >=1 &&  Q <= MAXINT1);
    std::vector<long long int> times(N);
    std::vector<long long int> scores(N);
    std::vector<long long int> queries(Q);
    //std::map<long long int,long long int, std::greater<int> > mp;
    
    
    //read times
    for(long long int i=0;i<N;i++)
     { 
         
       cin>>times[i];
       assert(times[i] >=1 && times[i] <=MAXINT2);
       
     }
    
    //read scores
     for(long long int j=0;j<N;j++)
     {
        cin>>temp;  
        assert(temp>=1 && temp <= MAXINT2);
       //mp[temp]=times[j];      
     }
    
    //reading queries
    for(long long int k=0;k<Q;k++)
    {
        cin>>queries[k];
        assert(queries[k]>=1 && queries[k] <= N);
    }
    
    std::sort(times.begin(), times.end(), std::greater<long long int>());
    // cumulative times
    for(long long int l=0;l<N;l++)
    {
      total=total+times[l];
      scores[l]=total;        
    }
    
    //print result
    for(long long int m=0;m<Q;m++)
    {
     long long int T;
     T = queries[m];
     //cout <<T<< "questions(K)"; 
     cout<<scores[T-1]<<endl;       
    
    }
    
    return 0;
}

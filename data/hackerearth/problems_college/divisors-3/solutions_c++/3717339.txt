#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#define ll long long int
using namespace std;

ll prime[100000];
bool check[1000000];
ll divis[1000000],len;
long long int gcd(long long int a,long long int b)
    {
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}

void sieve()
{for(ll i=3;i<=1000;i+=2)
    {
        if(!check[i])
        {
            for(int j=i*i;j<=1000000;j+=i)
                check[j]=true;
        }
    }
    prime[0] = 2;
    ll j=1;
    for(ll i=3;i<=1000000;i+=2)
    {
        if(!check[i]){
                //cout<<i<<" ";
            prime[j++]=i;
        }
    }
	//cout<<j<<"\n";
}

long long int tdivisors(long long int n)
{
	long long int count=0,total=1,k=0;
	for(long long int i=prime[k];i*i<=n;i=prime[k++])
	{
		count=0;

		while(n%i==0)
		{
			count++;
			n=n/i;
		}
		//cout<<count<<" ";
		total=total*(count+1);
		//cout<<total<<" ";
	}
	if(n!=1)
		total=total*(1+1);
		//cout<<total<<" ";
		return total;
}
long long int divisors(long long int a)
{
    long long int count=0;
    for(long long int i=1;i*i<=a;i++)
    {

        if(a%i==0 )
        {


            divis[len++]=a/i;
          if((a%(a/i)==0) && i!=(a/i)){
                    divis[len++]=a/(a/i);

                }
                }
    }
    return len;
}

int main(){

    sieve();
    ll a,b,x,y;
   cin>>a>>b;
   ll t=divisors(a);
   /*for(long long int i=0;i<t;i++)
    printf("%lld ",divis[i]);*/
   for(long long int i=0;i<b;i++)
   {
    cin>>x>>y;
    if(x==1){
    ll g=gcd(a,y);
    //printf("%lld ",g);
    printf("%lld\n",tdivisors(g));}
   if(x==2)
    {


            long long int count=0;
            for(long long int i=0;i<t;i++)
            if(divis[i]%y==0)
                count++;
             printf("%lld\n",count);



    }
    if(x==3)
    {


        long long int count=0;
            for(long long int i=0;i<t;i++)
            if(divis[i]%y!=0)
                count++;
             printf("%lld\n",count);

        }

    }
    return 0;
}

trees = []
n, d = map(int, raw_input().split())

edges = []
for _ in range(0, d):
    v1, v2 = map(int, raw_input().split())
    edges.append((v1, v2))

if len(set([i for e in edges for i in e])
       ) < n:		# some friends don't have a dependency
    print 1

elif len([v2 for v1, v2 in edges if v2 not in [v1 for v1, _ in edges]]):
    print 1

else:
    min = 1001

    def find_edges_starting_with(v):
        return [e for e in edges if e[0] == v]

    def uniq(t):
        # count of unique vertices in a tree
        return len(set([i for e in t for i in e]))

    for e in edges:
        v1, v2 = e
        tree = [e]
        visit = [v1, v2]

        while len(visit) > 0:
            deps = find_edges_starting_with(visit.pop())

            for dep in deps:
                if dep not in tree:
                    tree.append(dep)
                    if not dep[1] in visit:
                        visit.append(dep[1])

        if uniq(tree) < min:
            min = uniq(tree)

    print min

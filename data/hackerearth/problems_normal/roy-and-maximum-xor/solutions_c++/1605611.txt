#include <cstdio>
#include <cmath>
#include <iostream>
#include <cstring>
using namespace std;

typedef long long int LL;

int digs(LL x) {
  return !x ? 0 : 1 + digs(x >> 1);
}

LL n;
LL memo[64][2][2];

LL solve(int d, int f1, int f2) {
  if(d < 0) return 1;
  LL &res = memo[d][f1][f2];
  if(res != -1) return res;
  res = 0;

  int b = (n >> d) & 1;
  if(f1 && f2) {
    res += 2 * solve(d-1, 1, 1);
  } else if(!f1 && f2) {
    if(b) res += solve(d-1, 0, 1) + solve(d-1, 1, 1);
    else res += solve(d-1, 0, 1);
  } else if(f1 && !f2) {
    if(b) res += solve(d-1, 1, 1) + solve(d-1, 1, 0);
    else res += solve(d-1, 1, 0);
  } else {
    if(b) res += solve(d-1, 0, 1) + solve(d-1, 1, 0);
  }

  // printf("%d %d %d %lld\n",d,f1,f2,res);

  return res;

}

int main() {
  int t;
  scanf("%d",&t);
  while(t--) {
    scanf("%lld",&n);
    n--;
    int d = digs(n);

    LL ans = 1LL << d;
    ans--;
    memset(memo, -1, sizeof(memo));
    printf("%lld %lld\n",ans,solve(d-1,0,0));
  }
  return 0;
}
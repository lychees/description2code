from itertools import count
from collections import defaultdict
from sys import setrecursionlimit
setrecursionlimit(1000000)

def dfs(elem, visited, Graph):
	c = 0
	visited.add(elem)
	for v in Graph[elem]:
		if v in visited:
			return 0
		visited.add(v)
		c += 1 + dfs(v, visited, Graph)
	visited.remove(elem)
	return c

def solve():
	M, D = map(int, raw_input().strip().split())

	Graph = defaultdict(set)
	for i in xrange(D):
		A, B = map(int, raw_input().strip().split())
		Graph[A].add(B)

	mem = [0] * M
	for i in xrange(1, M+1):
		c = dfs(i, set(), Graph)
		mem[i-1] = c 

	x = min(mem)
	if x:
		print x + 1
	else:
		print 1

solve()
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define fr first
#define se second
#define gc getchar_unlocked

/* Relevant code begins here */

int n;
int cost[4][25];
int dp[4][25];

int fnc(int idx, int prev)
{
	if (idx == n) return 0;
	if (dp[prev][idx] != -1) return dp[prev][idx];
	
	int ret = 99999999, i;
	F(i, 1, 4) {
		if (i == prev) continue;
		ret = min(ret, cost[i][idx] + fnc(idx+1, i));
	}
	return dp[prev][idx] = ret;
}

int main()
{
	int t;
	
	S(t);
	while (t--) {
		M(dp, -1);
		int i, j;
		S(n);
		F(i, 0, n) S(cost[1][i]), S(cost[2][i]), S(cost[3][i]);
		printf("%d\n", fnc(0, 0));
	}
	return 0;
}
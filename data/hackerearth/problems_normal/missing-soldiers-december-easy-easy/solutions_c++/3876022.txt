#include<iostream>
#include<algorithm>

using namespace std;

struct node {
  int start;
  int end;
}barriers[100000];

int compute(int N) {
  int count = 0;
  int curstart = barriers[0].start;
  int curend = barriers[0].end;

  for(int i = 1; i < N; i++) {
    if(barriers[i].start <= curend && barriers[i].start >= curstart) {
      curend = max(curend, barriers[i].end);
    }
    else {
      count += curend - curstart + 1;
      curstart = barriers[i].start;
      curend = barriers[i].end;
    }
  }

  count += curend - curstart + 1;

  return count;
}

bool comp(struct node n1, struct node n2) {
  return n1.start < n2.start;
}

int main() {
  int N;
  cin>>N;

  for(int i = 0; i < N; i++) {
    int x, y, d;
    cin>>x>>y>>d;
    barriers[i].start = x;
    barriers[i].end = x + d;
  }

  sort(barriers, barriers + N, comp);

  cout<<compute(N)<<endl;
}

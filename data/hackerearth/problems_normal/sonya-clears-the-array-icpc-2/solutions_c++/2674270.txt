#include <bits/stdc++.h>
#define si(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define ss(n) scanf("%s",n)
#define fr(i, n) for(int i = 0; i < n; i++)
#define REP(i, a, b) for (int i = int(a); i <= int(b); i++)
#define REN(i, a, b) for (int i = int(a); i >= int(b); i--)
#define ms(i, n) memset(i, n, sizeof(i))
#define X first
#define Y second
typedef long long LL;
using namespace std;
const LL INF = 1002000000;
const LL MOD = 1000000007;
typedef pair<int, int> PII;
typedef pair<LL, int> PLI;
const int maxN = 2000000;
int arr[maxN], pr[maxN], a[550], dp[505][505], nxt[maxN], pre[maxN];
void sieve()
{
    arr[0] = arr[1] = 1;
    for(int i = 2; i < maxN; i++ )
    {
        if( arr[i] == 0 )
        {
            for( int j = 2; i * j < maxN; j++ )
            {
                arr[i * j] = 1;
            }
        }
    }
    int pr = 20000000;
    for(int i = maxN - 1; i >= 0; i--)
    {
        if(arr[i] == 0)
        {
            pr = i;
        }
        nxt[i] = pr;
    }
    pr = 0;
    for(int i = 0; i < maxN; i++)
    {
        pre[i] = pr;
        if(arr[i] == 0)
        {
            pr = i;
        }
    }
}

int calc(int lft, int rt)
{
    int nslft, nsrt;
    if( a[lft] >= a[rt] )
    {
        nslft = nxt[ a[lft] ];
        nsrt = nxt[ nxt[ a[lft] ] + 1 ];
    } else {
        if( nxt[ a[lft] ] > pre[ a[rt] ] )
        {
            nslft = nxt[ a[rt] ];
            nsrt = nxt[ nxt[ a[rt] ] + 1 ];
        } else
        {
            nslft = pre[  a[rt]  ];
            nsrt = nxt[ a[rt] ];
        }
    }
    return ( nslft - a[lft] ) + ( nsrt - a[rt] );
}

int solve(int lft, int rt)
{
    if(lft >= rt)
        return 0;
    if( dp[lft][rt] != -1 )
        return dp[lft][rt];
    int mini = INF;
    for( int i = lft + 1; i < rt; i+= 2 )
    {
        mini = min( mini, solve( lft, i ) + solve( i + 1, rt ) );
    }
    mini = min(mini , solve(lft + 1, rt - 1) + calc(lft, rt) );
    //printf("%d %d %d\n", lft, rt, mini);
    return dp[lft][rt] = mini;
}
int main ()
{
    //freopen ("input.txt","r",stdin);
    //freopen ("output.txt","w",stdout);
    //ios_base::sync_with_stdio(false);
    int n;
    sieve();
  /*  for(int i = 0; i < 50; i++)
    {
        printf("%d %d\n", i, pre[i]);
    }*/
    si(n);
    fr(i, n)
    {
        si(a[i]);
    }
    fr(i, 505)
        fr(j, 505)
            dp[i][j] = -1;
    printf( "%d\n", solve(0, n - 1) + n / 2 );
    return 0;
}

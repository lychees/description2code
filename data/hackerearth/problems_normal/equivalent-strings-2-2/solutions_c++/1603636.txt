#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

const double EPS = 1e-9;
const int MOD[2] = { (int) 1e9 + 7, (int) 1e9 + 17 };

void add(int& x, int y, int mod) {
  (x += y) >= mod && (x -= mod);
}

int mul(int x, int y, int mod) {
  return x * 1ll * y % mod;
}

struct Hash {
  static const int SZ = 2;

  int v[SZ];

  Hash(int x = 0) {
    forn(i, SZ) {
      v[i] = x % MOD[i];
    }
  }

  void operator += (const Hash& h) {
    forn(i, SZ) {
      add(v[i], h.v[i], MOD[i]);
    }
  }

  void operator *= (const Hash& h) {
    forn(i, SZ) {
      v[i] = mul(v[i], h.v[i], MOD[i]);
    }
  }

  void operator *= (int h) {
    forn(i, SZ) {
      v[i] = mul(v[i], h, MOD[i]);
    }
  }

  bool operator == (const Hash& h) const {
    forn(i, SZ) {
      if  (v[i] != h.v[i]) {
        return false;
      }
    }
    return true;
  }

  void print() const {
    printf("%d %d\n", v[0], v[1]);
  }
};

const int MAXN = 1 << 19;
const int PP = 29;

#define Hash ll

Hash P[MAXN];

void precalc() {
  P[0] = Hash(1);
  for (int i = 1; i < MAXN; ++i) {
    P[i] = P[i - 1];
    P[i] *= PP;
  }
}

struct SegmTree {
  vector<Hash> t;
  int sz;

  SegmTree(int n = 0) {
    sz = 1;
    while (sz < n) sz *= 2;

    t.assign(sz * 2, Hash(0));
  }

  void put(int pos, int val) {
    int v = sz + pos;
    t[v] = Hash(val);
    t[v] *= P[pos];
    v /= 2;
    while (v) {
      t[v] = t[v * 2];
      t[v] += t[v * 2 + 1];
      v /= 2;
    }
  }

  Hash get(int l, int r) {
    int old_r = r;
    Hash res(0);
    l += sz;
    r += sz;
    while (l <= r) {
      if  (l & 1) {
        res += t[l];
      }
      if  (~r & 1) {
        res += t[r];
      }
      l = (l + 1) / 2;
      r = (r - 1) / 2;
    }
    res *= P[MAXN - old_r - 1];
    return res;
  }
};

struct Query {
  int start, len;
  int id;

  bool operator < (const Query& q) const {
    return start < q.start;
  }
};

const int A = 26;

int code(char c) {
  return c - 'a';
}

SegmTree* T[A];

vector<Hash> calc(char* s, const vector<Query>& qs) {
  int n = strlen(s);

  forn(c, A) {
    T[c] = new SegmTree(n);
  } 

  vi order;
  forn(c, A) {
    order.pb(c);
  }

  vector<Hash> ans(sz(qs));
  int ptr = sz(qs) - 1;
  ford(i, n) {
    int c = code(s[i]);
    forn(j, A) {
      if  (order[j] == c) {
        for (int k = j; k > 0; --k) {
          swap(order[k], order[k - 1]);
        }   
        break;
      }
    }

    T[c]->put(i, 1);

    while (ptr >= 0 && qs[ptr].start > i) {
      --ptr;
    }

    if  (ptr < 0) {
      break;
    }

    while (ptr >= 0 && qs[ptr].start == i) {
      int id = qs[ptr].id;
      Hash h(0);
      forn(j, A) {
        int c = order[j];
        int coef = j + 1;
        auto cur = T[c]->get(i, i + qs[ptr].len - 1);
        cur *= coef;
        h += cur;
      } 
      ans[id] = h;
      --ptr;
    }
  }

  return ans;
}

char s[MAXN];
char t[MAXN];

void solve() {
  scanf("%s\n%s\n", s, t);
             
  int Q;
  scanf("%d", &Q);
  vector<Query> qs;
  vector<Query> qt;
  qs.reserve(Q);
  qt.reserve(Q);
  forn(q, Q) {
    int i, j, k;
    scanf("%d%d%d", &i, &j, &k);
    --i;
    --j;

    qs.pb(Query{ i, k, q });
    qt.pb(Query{ j, k, q });
  }

  sort(all(qs));
  sort(all(qt));
           
  auto hs = calc(s, qs);
  auto ht = calc(t, qt);

  forn(q, Q) {
    puts(hs[q] == ht[q] ? "yes" : "no");
  }
}

int main() {
#ifdef LOCAL
  freopen(".in", "r", stdin);
  freopen(".out", "w", stdout);
#endif

  precalc();

  int tt;
  scanf("%d\n", &tt);
  while (tt--) {
    solve();
  }

  return 0;
}

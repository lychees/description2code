#include<bits/stdc++.h>

using namespace std;

typedef long long L;

set <pair<int, pair<int, int>>> Q;

const int N = 100005;
vector <int> g[N];

const int inf = 1000000000;

map <pair<int,int>, int> T;
pair<int,int> edges[2 * N];
int d[N];

int main() {
  int n, m, k;
  scanf("%d%d%d", &n, &m, &k);
  
  for(int i = 1; i <= m; ++i) {
    int u, v;
    scanf("%d %d", &u, &v);
    edges[i] = {u, v};
    g[u].push_back(v);
    g[v].push_back(u);
  }
  
  for(int i = 0 ; i < k; ++i) {
    int t, x;
    scanf("%d %d", &t, &x);
    T[edges[x]] = t;
  }
  
  Q.insert({0, {1, 0}});
  
  fill(d, d + N, inf);
  d[1] = 0;
  
  while(! Q.empty() ) {
    int dist = Q.begin()->first;
    int u = Q.begin()->second.first;
    int time = Q.begin()->second.second;
    
    Q.erase(Q.begin());
    
    for(int v : g[u]) {
      if(T.count({u, v}) && T[{u, v}] <= time) {
        continue;
      }
      if(T.count({v, u}) && T[{v, u}] <= time) {
        continue;
      }
      if(d[v] >= dist + 1) {
        d[v] = dist + 1;
        Q.insert({d[v], {v, time + 1}});
      }
    }
  }
  
  printf("%d\n", (d[n] == inf)?-1:d[n]);
  
  return(0);
}
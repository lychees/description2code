/*	I will not win immediately,
 *	but I will win definitely...
 */
#include<bits/stdc++.h>
#define opt				ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define li				long int
#define lli				long long int
#define sd(n)				scanf("%d",&n)
#define sld(n)				scanf("%ld",&n)
#define slld(n)				scanf("%lld",&n)
#define pd(n)				printf("%d\n",n)
#define pld(n)				printf("%ld\n",n)
#define plld(n)				printf("%lld\n",n)
#define pn				printf("\n")
#define rep(i,a,b)			for(i=a;i<b;i++)
#define repr(i,a,b)			for(i=a;i>b;i--)
#define repi(i,v)			for(i=v.begin();i!=v.end();i++)
#define vi				vector<int>
#define vli				vector<li>
#define vlli				vector<lli>
#define pb				push_back
#define pob				pop_back
#define all(v)				v.begin(),v.end()
#define sz				size()
#define lb				lower_bound
#define ub				upper_bound
#define elif				else if
#define mp				make_pair
#define pa				pair<int,int>
#define vpp				vector<pair<li,li> >
#define F				first
#define S				second
#define mod				1000000007
#define itr				iterator
using namespace std;
li power(li a, li b){
		li ans=1L;
		while(b){
				if(b&1)
						ans=(ans*a)%mod;
                a=(a*a)%mod;
                b>>=1;
		}
		return ans;
}
li mmi(li n){
		return power(n,mod-2);
}
/**************************MAIN CODE BEGINS NOW!**************************/

int cnt=0;
int adj[21][21];
int visited[21][21];

void dfs(int x, int y, int n){
        if(x==n-1 && y==n-1){
                cnt++;
                return ;
        }
        visited[x][y]=1;
        if(x-1>=0 && adj[x-1][y]==0 && !visited[x-1][y])
                dfs(x-1,y,n);
        if(x+1<n && adj[x+1][y]==0 && !visited[x+1][y])
                dfs(x+1,y,n);
        if(y-1>=0 && adj[x][y-1]==0 && !visited[x][y-1])
                dfs(x,y-1,n);
        if(y+1<n && adj[x][y+1]==0 && !visited[x][y+1])
                dfs(x,y+1,n);
        visited[x][y]=0;
        return ;
}

int main(){
        int t;
        sd(t);
        while(t--){
                memset(adj,-1,sizeof(adj));
                memset(visited,0,sizeof(visited));
                int i,j,n;
                sd(n);
                rep(i,0,n){
                        rep(j,0,n)
                                sd(adj[i][j]);
                }
                cnt=0;
                dfs(0,0,n);
                pd(cnt);
        }
        return 0;
}


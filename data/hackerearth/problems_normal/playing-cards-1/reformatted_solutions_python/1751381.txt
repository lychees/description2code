def readNextWord():
    data = []
    cur = 0
    while True:
        if len(data) == cur:
            st = raw_input()
            data = st.split()
            cur = 0
        yield data[cur]
        cur += 1


def getNextInt(reader):
    return int(float(next(reader)))


def getNextWord(reader):
    return next(reader)


def nCr(n, r):
    if r > n:
        return 0
    if r > (n / 2):
        r = n - r  # because C(n, r) == C(n, n - r)
    ans = 1

    for i in xrange(1, r+1):  # 1; i <= r; i++) {
        ans *= n - r + i
        ans /= i

    return ans


counted = {}


def getCount(k, n, s, d=0):
    print "  "*d, (k, n, s)
    global counted
    if (k, n, s) in counted:
        return counted[(k, n, s)]
    if s == 0:
        print "  "*d, 1
        return 1
    if s < 0:
        print "  "*d, 0
        return 0
    if s > k*n:
        print "  "*d, 0
        return 0
    if s == k*n:
        print "  "*d, 1
        return 1
    if k == 1:
        if s <= n:
            print "  "*d, 1
            return 1
        else:
            print "  "*d, 0
            return 0

    pos = 0
    for i in xrange(n+1):
        pos += getCount(k-1, n, s-i, d+1)
    counted[(k, n, s)] = pos
    print "  "*d, pos
    return pos


def findThePossibility(N, M):
    if M % 2 != 0:
        print 0
        return
    RF = 6*N
    BF = 6*N
    RR = 18*N
    BR = 18*N
    X = M/2
    if X > (RF+BF):
        print 0
        return
    q = 0
    for i in xrange(0, X+1):
        a = nCr(RF, i)
        b = nCr(BR, i)
        c = nCr(BF, X - i)
        d = nCr(RR, X - i)
        # a = getCount(6, N, i)#RF = BF = 6
        # b = getCount(18, N, i)#RR = BF = 18

        # c = getCount(6, N, X-i)
        # d = getCount(18, N, X-i)
        q += a * b * c * d
        # if q > (10**9)+7:
        #    q %= ((10**9)+7)
    print q % ((10**9)+7)


def main():
    # add you code here
    # findThePossibility(1, 2)
    # return
    reader = readNextWord()
    T = getNextInt(reader)
    while T > 0:
        T -= 1
        N = getNextInt(reader)
        M = getNextInt(reader)
        findThePossibility(N, M)


if __name__ == "__main__":
    main()



    #include<bits/stdc++.h>
    using namespace std;
    const int INF = 1e9;
    const int N = 100;
    long long tests, m, n1, n2;
    vector<pair<long long, long long> > order;
    long long ar1[N], ar2[N];
    vector<long long> ans_vector;
    int main(){
    	cin >> tests;
    	for (; tests; --tests)
    	{
    		cin >> m >> n1 >> n2;
    		for (int i = 0; i < n1; i++)
    		{
    			cin >> ar1[i];
    		}
    		for (int i = 0; i < n2; i++)
    		{
    			cin >> ar2[i];
    		}
    		order.clear();
    		for (int i = 0; i < n1; i++)
    		{
    			order.push_back(make_pair(ar1[i], i));
    		}
    		sort(order.begin(), order.end());
    		long long best_sum = 2e18;
    		for (int mask = 0; mask < (1 << n2); mask++)
    		{
    			long long sum_have = 0;
    			for (int i = 0; i < n2; i++)
    			{
    				if (mask&(1 << i))
    					sum_have += ar2[i];
    			}
    			long long sum_need = m - sum_have;
    			vector<long long> taken;
    			for (int i = (int)order.size() - 1; i >= 0; --i)
    			{
    				if (order[i].first <= sum_need)
    				{
    					taken.push_back(order[i].second);
    					sum_need -= order[i].first;
    				}
    			}
    			if (sum_need != 0)
    				continue;
    			if (sum_have < best_sum)
    			{
    				best_sum = sum_have;
    				ans_vector = taken;
    			}
    		}
    		if (best_sum >m)
    		{
    			cout << "NO" << endl;
    		}
    		else
    		{
    			cout << "YES" << endl;
    			reverse(ans_vector.begin(), ans_vector.end());
    			for (int i = 0; i < ans_vector.size(); i++)
    			{
    				int id = ans_vector[i];
    				if (i)
    					cout << " ";
    				cout << ar1[id];
    			}
    			cout << endl;
    		}
    	}
    	return 0;
    }


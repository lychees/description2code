/*#include <stdio.h>
#include <math.h>

#define SIZE 1000

long status[SIZE];

void sieve()
{
long i,j;
 for(i=0;i<SIZE;i++) 
 	status[i]= 0;
 	long sq = sqrt(SIZE);
 for(i=4;i<=SIZE;i+=2)
 	status[i] = 1;
 for(i=3;i<=sq;i+=2){
  if(status[i]==0) {
   for(j=2*i;j<=SIZE;j+=i)
   	status[j]=1;
  }
 }
 status[1] = 1;
 status[0]=1;
}

int main()
{
	sieve();
//	for(int p=0;p<=114;p++){if(status[p]==0) printf("%d,",p);}
    long l,r,Q;
    scanf("%ld",&Q);
    int c;
    while(Q--){
    	c=0;
    	scanf("%ld%ld",&l,&r);
    	for(;l<=r;l++){
    		if(Aprime(l))
    			c++;
    	}
    
    	printf("%d\n",c);
    }
    
    return 0;
}

int  Aprime(long a){
	sieve();
	if(status[(a%10)]==0)
		return 1;
	else if(status[(a%100)]==0)
		return 1;
	else if(status[(a%1000)]==0)
		return 1;
	else if(status[(a%10000)]==0)
		return 1;
	else
		return 0;
}
*/


#include<bits/stdc++.h>
using namespace std;
#define ll				long long int
#define MOD				1000000007
#define si(a)			scanf("%d", &a)
#define sl(a)			scanf("%lld", &a)
#define pi(a)			printf("%d", a)
#define pl(a)			printf("%lld", a)
#define pn 				printf("\n")
ll pow_mod(ll a, ll b) {
	ll res = 1;
	while(b) {
		if(b & 1)
			res = (res * a) % MOD;
		a = (a * a) % MOD;
		b >>= 1;
	}
	return res;
}
int cnt[1000005];
bool isPrime[1000005];
void sieve() {
	memset(isPrime, true, sizeof(isPrime));
	isPrime[0] = false;
	isPrime[1] = false;
	for(int i = 2; i <= 1000000; ++i) {
		if(isPrime[i]) {
			for(int j = 2 * i; j <= 1000000; j += i) {
				isPrime[j] = false;
			}
		}
	}
}
void pre_compute() {
	sieve();
	memset(cnt, 0, sizeof(cnt));
	for(int i = 1; i <= 1000000; ++i) {
		for(int j = 10; j <= 10000000; j *= 10) {
			if(isPrime[i % j]) {
				cnt[i] = 1;
				break;
			}
		}
	}
	for(int i = 1; i <= 1000000; ++i) {
		cnt[i] = cnt[i] + cnt[i - 1];
	}
}
int main() {
	pre_compute();
	int q;
	si(q);
	assert(q >= 1 && q <= 1000000);
	while(q--) {
		int l, r;
		si(l); si(r);
		assert(l <= r);
		assert(l >= 1 && l <= 1000000);
		assert(r >= 1 && r <= 1000000);
		pi(cnt[r] - cnt[l - 1]);
		pn;
	}
	return 0;
}

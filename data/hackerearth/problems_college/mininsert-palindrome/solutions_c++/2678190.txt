#include<string>
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
int lcs[100][100];
//Recursive function leads to stack overflow if s.size() is high
int mininsertions(string s,int l,int h){
	if(s.size()==1){//a single letter is a palindrome,so, no insertions
		return 0;
	}
	if(l==h-1){
		if(s[l]==s[h])return 0;// as s[l,h] is a palindrome in this case
		else return 1;//otherwise, insert a letter to make it a palindrome
	}
	if(s[l]==s[h])return mininsertions(s,l+1,h-1);
	return 1+min(mininsertions(s,l+1,h),mininsertions(s,l,h-1));
}
int LCS(string x,string y){
	for(int i=1;i<=x.size();i++){
		for(int j=1;j<=y.size();j++){
			if(i==0 or j==0)lcs[i][j]=0;
			else{
				if(x[i-1]==y[j-1])lcs[i][j]=1+lcs[i-1][j-1];
				else lcs[i][j]=max(lcs[i-1][j],lcs[i][j-1]);
			}
		}
	}
	return lcs[x.size()][y.size()];

}
int main(){
	int tests;
	cin>>tests;
	while(tests--){
		memset(lcs,0,sizeof(lcs));
		int n;
		cin>>n;
		string x,y;
		cin>>x;
		y=x;
		reverse(y.begin(),y.end());
		int ans=x.size()-LCS(x,y);
		cout<<ans<<endl;
	}
	return 0;
}

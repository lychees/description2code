//Kyokai no Kanata //
#include<bits/stdc++.h>

using namespace std;

typedef pair<int,int> II;
typedef vector<II> VII;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef long long int LL;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr<<name<<" : "<<arg1<<endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names,Arg1&& arg1,Args&&... args){
  const char* comma=strchr(names+1,',');
  cerr.write(names,comma-names)<<" : "<<arg1<<" | ";__f(comma+1,args...);
}
#else
#define trace(...)
#endif
LL INF=LL(1e16),N=201;
inline void add(LL &a,LL b){
  if(a+b>INF) a=INF;
  else a=a+b;
}
LL DP[205];
inline void precalc(int L)
{
  for(int i=0;i<L;i++) DP[i]=1;
  for(int i=L;i<=N;i++)
    for(int j=0;j<L;j++)
      add(DP[i],DP[i+j-L]);
}
int get(LL x,LL n,LL L)
{
  int mod=x%L;
  for(int i=mod;i<=N;i+=L) {
    if(DP[i]>=n) return i;
  //  trace(i);
  }
}
int solve(LL x,LL n,LL L)
{
 // trace(x,n,L);
  if(DP[x]==1) return x;
  for(int j=0;j<L;j++)
  {
    if(DP[x+j-L]>=n) return solve(x+j-L,n,L);
    n-=DP[x+j-L];
  }
}
char A[105];
bool constraint(LL n,LL x,LL L,char C)
{
//  trace(x,n,L);
  x=get(x,n,L);
//  trace(x);
  int p=solve(x,n,L);
//  trace(p);
  if(A[p] && A[p]!=C) return 1;
  A[p]=C;
  return 0;
}
int M=(int)(1e9)+7;
int main()
{
  LL L,C,n,x;sll(L);sll(C);
  char c;
  precalc(L);
  while(C--)
  {
    scanf("%lld %lld %c",&n,&x,&c);
    //trace(n,x,c); 
    x--;
    if(constraint(n,x,L,c)) {dout(0);return 0;}
  }
  LL ans=1;
  for(int i=0;i<L;i++)
    if(!A[i]) ans=(ans*62)%M;
  lldout(ans);
  return 0;
}


i = raw_input().split()
n = int(i[0])
m = int(i[1])
q = int(i[2])

board = [[0 for x in range(m)] for y in range(n)]
visited = [[False for x in range(m)] for y in range(n)]

def dfs(x,y,d):
	res = 1
	visited[x][y] = True
	if x < n-1 and not visited[x+1][y] and abs(board[x][y] - board[x+1][y]) <= d:
		res += dfs(x+1,y,d)
	if x > 0 and not visited[x-1][y] and abs(board[x][y] - board[x-1][y]) <= d:
		res += dfs(x-1,y,d)
	if y < m-1 and not visited[x][y+1] and abs(board[x][y] - board[x][y+1]) <= d:
		res += dfs(x,y+1,d)
	if y > 0 and not visited[x][y-1] and abs(board[x][y] - board[x][y-1]) <= d:
		res += dfs(x,y-1,d)
	return res
	

for r in range(n):
	cur = raw_input().split()
	for c in range(m):
		a = int(cur[c])
		board[r][c] = a
		
for b in range(q):
	cur = raw_input().split()
	x = int(cur[0])
	y = int(cur[1])
	d = int(cur[2])
	print dfs(x-1,y-1,d)
	visited = [[False for x in range(m)] for y in range(n)]
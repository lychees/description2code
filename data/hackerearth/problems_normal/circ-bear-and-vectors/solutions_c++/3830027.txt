#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <numeric>
#include <cmath>
#include <complex>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
typedef vector<string> vs;

ll vect(const pii &x, const pii & y) {
	return x.first*(ll)y.second - x.second*(ll)y.first;
}

ll sc(const pii &x, const pii & y) {
	return x.first*(ll)y.first + x.second*(ll)y.second;
}

bool cmp(const pii &x, const pii & y) {
	return vect(x,y) > 0;
}

int main() {
  int n;
  cin >> n;
  vii v(n);
  for (int i = 0; i < n; ++i) scanf("%d%d", &v[i].first, &v[i].second);
  vii ts;
  ts.reserve(n*(n-1)/2);
  ll res = 0;
  for (int i = 0; i < n; ++i) for (int j = i + 1; j < n; ++j) {
  	pii t(v[i].first+v[j].first, v[i].second+v[j].second);
  	if (t.first || t.second) {
  		if (t.first > 0) {
  			t.first *= -1;
  			t.second *= -1;
  		}
  		if (t.first == 0 && t.second < 0) t.second *= -1;
  		ts.push_back(t);
  		if (sc(v[i], t) == 0) --res;
  		if (sc(v[j], t) == 0) --res;
  	}
  }
  sort(ts.begin(), ts.end(), cmp);
  for (pii & t : v) {
  	if (t.second < 0) {
  		t.first *= -1;
  		t.second *= -1;
  	}
  	if (t.second == 0 && t.first < 0) t.first *= -1;
  }
  sort(v.begin(), v.end(), cmp);
  vii w(1, v[0]);
  vi c(1, 1);
  for (int i = 1; i < v.size(); ++i) {
  	if (vect(v[i], w.back()) == 0) ++c.back();
  	else {
  		w.push_back(v[i]);
  		c.push_back(1);
  	}
  }
  //for (int i = 0; i < ts.size(); ++i) cout << ts[i].first << ' ' << ts[i].second << endl;
  int i = 0;
  for (int it = 0; it < w.size(); ++it) {
  	//cout << w[it].first << ' ' << w[it].second << ' ' << c[it] << endl;
  	while (i < ts.size() && sc(w[it], ts[i]) > 0) ++i;
  	while (i < ts.size() && sc(w[it], ts[i]) == 0) {
  		//cout << i << endl;
  		res += c[it];
  		++i;
  	}
  } 
  cout << 2*res << endl;
  return 0;
}
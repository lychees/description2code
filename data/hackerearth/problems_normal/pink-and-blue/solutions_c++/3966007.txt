#include <iostream>
#include<algorithm>
#include<list>
#include<queue>
#include<vector>
using namespace std;
vector<char> vec;
list<int > mylist[100005];
vector<int > visited;
int main()
{
	
	int n,m;
	cin>>n>>m;
	vec.resize(n+1);
	visited.assign(n+1,0);
	for(int i=1;i<=n;i++)
	{
		cin>>vec[i];
	}
	int a,b;
	for(int i=0;i<m;i++)
	{
		cin>>a>>b;
		mylist[a].push_back(b);
		mylist[b].push_back(a);
	}
	// 0 represent blue colour
	// 1 represent pink colour
	int inversion=0;
	queue<pair<int,int> > q;
	q.push(make_pair(1,0));
	if(vec[1]=='G')
		inversion++;
	visited[1]=1;	
	while(q.size()>0)
	{
		pair<int,int> pp=q.front();
		for(list<int>::iterator it=mylist[pp.first].begin();it!=mylist[pp.first].end();it++)
		{
			if(visited[*it]==0)
			{
				visited[*it]=1;
				if(pp.second==0)
				{	
					if(vec[*it]=='B')
						inversion++;
					q.push(make_pair(*it,1));
				}
				else
				{
					if(vec[*it]=='G')
						inversion++;
					q.push(make_pair(*it,0));
				}
			}
		}
		q.pop();
	}
	
	
	int inversion2=0;
	visited.assign(n+1,0);
	q.push(make_pair(1,1));
	if(vec[1]=='B')
		inversion2++;
	visited[1]=1;	
	while(q.size()>0)
	{
		pair<int,int> pp=q.front();
		for(list<int>::iterator it=mylist[pp.first].begin();it!=mylist[pp.first].end();it++)
		{
			if(visited[*it]==0)
			{
				visited[*it]=1;
				if(pp.second==0)
				{	
					if(vec[*it]=='B')
						inversion2++;
					q.push(make_pair(*it,1));
				}
				else
				{
					if(vec[*it]=='G')
						inversion2++;
					q.push(make_pair(*it,0));
				}
			}
		}
		q.pop();
	}	
//	cout<<inversion<<endl;
//	cout<<inversion2<<endl;
	int minimum=min(inversion,inversion2);
	cout<<minimum<<endl;
	
		
	
}

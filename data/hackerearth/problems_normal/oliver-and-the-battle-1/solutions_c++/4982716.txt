#include <bits/stdc++.h>
using namespace std;
#define MAX 1000
bool graph[MAX][MAX];
bool visited[MAX][MAX];
int x[8]={-1,-1,-1,0,1,0,1,1};
int y[8]={1,0,-1,-1,-1,1,1,0};
int n,m;
int bfs(int i,int j)
{
	//cout<<i<<j<<endl;
	visited[i][j]=1;
	queue<pair<int,int> > q; 
	q.push(make_pair(i,j));
	int ans=1;
	while(!q.empty())
	{
		i=q.front().first;
		j=q.front().second;
		
		for(int k=0;k<8;k++)
		{
			if((i+x[k]>=0 && i+x[k]<n)&&(j+y[k]>=0 && j+y[k]<m)&&graph[i+x[k]][j+y[k]] && !visited[i+x[k]][j+y[k]])
			{
				q.push(make_pair(i+x[k],j+y[k]));
				visited[i+x[k]][j+y[k]]=1;
				//cout<<"inside:::"<<i+x[k]<<" "<<j+y[k]<<endl;
				++ans;
			}
		}
		q.pop();
	}
	return ans;
}
int main()
{
	int t;
	cin>>t;
	while(t--)
    {
    	cin>>n>>m;
    	for(int i=0;i<n;i++)
    	{
    		for(int j=0;j<m;j++)
    		{
    			cin>>graph[i][j];
    			visited[i][j]=false;
    		}
    	}
 		int maxm=0;
    	int count=0;
    	for(int i=0;i<n;i++)
    	{
    		for(int j=0;j<m;j++)
	    	{
	    		if(graph[i][j]&&!visited[i][j])
	    		{
	    			maxm=max(maxm,bfs(i,j));
	    			count++;
	    		}
	    	}
    	}
    	cout<<count<<" "<<maxm<<endl;
    }
	return 0;
}

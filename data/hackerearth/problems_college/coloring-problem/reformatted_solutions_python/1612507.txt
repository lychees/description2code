import math


class Graph(object):

    def __init__(self, N):
        self.V = N
        self.gr = [[] for i in range(0, self.V + 1)]

    def addEdge(self, x, y):
        self.gr[x].append(y)
        self.gr[y].append(x)

    def V(self):
        return self.V

    def adj(self, x):
        return self.gr[x]


def dfs(G, curr, prev, vis, ans):
    vis[curr] = math.fabs(prev-1)

    currCol = math.fabs(prev - 1)

    lst = G.adj(curr)

    for child in lst:
        if vis[child] == -1:
            dfs(G, child, currCol, vis, ans)
        elif vis[child] == currCol:
            ans.append(False)


def main():
    t = int(raw_input())

    while t > 0:
        t -= 1
        n, m = int(raw_input()), int(raw_input())
        G = Graph(n)
        for i in range(0, m):
            x, y = map(int, raw_input().split())
            G.addEdge(x, y)
        vis = [-1 for i in range(0, n + 1)]
        ans = [True]
        dfs(G, 1, 0, vis, ans)
        if False in ans:
            print "NOT BICOLORABLE."
        else:
            print "BICOLORABLE."


main()

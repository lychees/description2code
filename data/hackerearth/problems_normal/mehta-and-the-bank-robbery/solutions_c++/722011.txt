/*PRANJUL DUBEY aka pranjuldb*/
#include <bits/stdc++.h>
#define ll long long
#define rep(i,j,k) for(i = j; i < k; i++)
#define nrep(i,j,k) for(i = j; i >= k; i--)
#define scs(str) scanf("%s", str)
#define sci(a) scanf("%d",&a)
#define scl(a) scanf("%lld",&a)
#define pri(a) printf("%d\n",a)
#define prl(a) printf("%lld\n",a)
#define pii pair<int,int>
#define prs(str) printf("%s\n", str)
#define pb push_back
#define mi(a,b) (a < b)?a:b
#define ma(a,b) (a > b)?a:b
#define absl(a) (a < 0)? -a:a
#define modadd(a,b,c) (a+b<0)?(a+b+c)%c:(a+b)%c
#define modmul(a,b,c) (a*b)%c
#define mem(a,b) memset(a, b, sizeof(a))
#define se second
#define fr first

using namespace std;


ll prime[10] = {29, 23, 19, 17, 13, 11, 7, 5, 3, 2};
ll knpsck[2002][15];
int flags[2002][15];
vector<pii> v;

void solve(int n, int W)
{
    int i,j,l,k;
    sort(v.rbegin(), v.rend());
	flags[0][0] = 1;
	knpsck[0][0] = 0;
	ll answer = 0;
	rep(i,0,n) {
		nrep(j,W,0) {
			if(j+v[i].second > W) continue;
			rep(k,0,11) {
				if(flags[j][k]) {
					flags[j+v[i].se][k] = 1;
					knpsck[j+v[i].se][k] = max(knpsck[j+v[i].se][k], knpsck[j][k] + v[i].fr);
					if(k != 10) knpsck[j+v[i].se][k+1] = max(knpsck[j+v[i].se][k+1], knpsck[j][k] + (ll)prime[k]*v[i].fr);
					if(k != 10) answer = max(answer, knpsck[j+v[i].se][k+1]);
					answer = max(answer, knpsck[j+v[i].se][k]);
					if(k != 10) flags[j+v[i].se][k+1] = 1;
				}
			}
		}
	}
	cout << answer << endl;
}

int main()
{
    mem(knpsck,-1);
    ll n, W;
    int i,j,l,k;
	scl(n);
	scl(W);
	int aa, bb;
	rep(i,0,n) {
		sci(aa);
		sci(bb);
		v.pb(pii(aa,bb));
	}
    solve(n,W);
    return 0;
}


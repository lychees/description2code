#include <iostream>
using namespace std;

#define MOD_NUM 1000000007

long long pow(int a, int b)
{
    long long res = 1, temp;
    if(b == 0)
        return 1;
    temp = pow(a, b/2);
    res = (temp * temp) % MOD_NUM;
    if(b % 2)
    {
        res = (res * a) % MOD_NUM;
    }
    return res;
}

int main()
{
    int a, b, n, k, i, j, mk;
    long long result = 1, num = 1, den = 1;
    cin >> a >> b >> n >> k;
    mk = (k > n-k) ? n-k : k; // NcK == NcN-K
    for(i=1; i<=mk; i++)
    {
        num = (num * (n-i+1)) % MOD_NUM;
        den = (den * i) % MOD_NUM;
    }
    result = (num * pow(den, MOD_NUM-2)) % MOD_NUM; // according euler's rule for multiplicative 			modulo inverse
    //cout << "NcK :" << result << endl;
    result = (result * pow(a, k)) % MOD_NUM;
    result = (result * pow(b, n-k)) % MOD_NUM;
    cout << result << endl;
    return 0;
}

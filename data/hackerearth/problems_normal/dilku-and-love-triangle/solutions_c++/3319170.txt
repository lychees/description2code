#include<bits/stdc++.h>
using namespace std;
int ta[1000005][21],a[1000005];
vector<int> v[500005];
int idx,jum[500005],jim[500005],cot=0,wh[500005],gro[500005],par[500005],fw[500005],jx,jy,val,point,n,opti[500005];
int lca(int l,int r)
{
    int x,y,keb;
    x=jum[l];
    y=jum[r];
    if(x>y)
        swap(x,y);
    keb=(int)(log(y-x+1)/log(2));
    if(a[ta[x][keb]]<a[ta[y-(1<<keb)+1][keb]])
        return ta[x][keb];
    else
        return ta[y-(1<<keb)+1][keb];
}
void dfs(int u,int ct)
{
    int keb=0;
    for(int i=0;i<v[u].size();i++)
    {
        if(jum[v[u][i]]==-1)
        {
            jum[v[u][i]]=idx;
            a[v[u][i]]=ct+1;
            ta[idx++][0]=v[u][i];
            dfs(v[u][i],ct+1);
            keb+=jim[v[u][i]];
            ta[idx++][0]=u;
        }
    }
    jim[u]=keb+1;
}
void chaindfs(int u,int head)
{
    if(head==0)
        head=u;
    gro[u]=head;
    int ind=-1,mc=-1;
    for(int i=0;i<v[u].size();i++)
    {
        if(wh[v[u][i]]==0&&jim[v[u][i]]>mc)
        {
            mc=jim[v[u][i]];
            ind=v[u][i];
        }
    }
    if(ind!=-1)
    {
        wh[ind]=idx++;
        par[ind]=u;
        chaindfs(ind,head);
    }
    for(int i=0;i<v[u].size();i++)
    {
        if(wh[v[u][i]]==0)
        {
            wh[v[u][i]]=idx++;
            par[v[u][i]]=u;
            chaindfs(v[u][i],0);
        }
    }
}
void add(int x,int val)
{
    while(x<=n+5)
    {
        fw[x]+=val;
        x+=x&-x;
    }
}
int sum(int x)
{
    int ss=0;
    while(x>0)
    {
        ss+=fw[x];
        x-=x&-x;
    }
    return ss;
}
void swchain(int x,int y)
{
    while(gro[x]!=gro[y])
    {
        jx=wh[x];
        jy=wh[gro[x]];
        if(jx>jy)
            swap(jx,jy);
        val=1;
        add(jx,1);
        add(jy+1,-1);
        x=par[gro[x]];
    }
    jx=wh[x];
    jy=wh[y];
    if(jx>jy)
        swap(jx,jy);
    add(jx,1);
    add(jy+1,-1);
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int t,m,i,j,x,y,l,r,keb,minna,q,op,nn;
    memset(jum,-1,sizeof jum);
    idx=0;
    cin >> n >> q;
    for(i=1;i<=n-1;i++)
    {
        cin >> x >> y;
        v[x].emplace_back(y);
        v[y].emplace_back(x);
    }
    idx=0;
    jum[1]=idx;
    a[1]=0;
    ta[idx++][0]=1;
    dfs(1,0);

    nn=2*n-1;
    for(j=1;1<<j<=nn;j++)
    {
        for(i=0;i+(1<<j)-1<nn;i++)
        {
            if(a[ta[i][j-1]]<a[ta[i+(1<<(j-1))][j-1]])
                ta[i][j]=ta[i][j-1];
            else
                ta[i][j]=ta[i+(1<<(j-1))][j-1];
        }
    }

    idx=1;
    wh[1]=idx++;
    par[1]=1;
    chaindfs(1,0);

    for(i=0;i<q;i++)
    {
        cin >> op;
        if(op==1)
        {
            cin >> x >> y;
            swchain(x,lca(x,y));
            swchain(y,lca(x,y));
            opti[wh[lca(x,y)]]++;
        }
        else
        {
            cin >> x;
            cout << sum(wh[x])-opti[wh[x]] << "\n";
        }
    }

}

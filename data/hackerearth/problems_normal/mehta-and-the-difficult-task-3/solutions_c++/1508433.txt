#include <iostream>
#include <vector>
using namespace std;
#define LL long long
#define MAX 16
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;

matrix mul(matrix a, matrix b)
{
	matrix c = matrix(16, (row(16, 0)));
	for (size_t i = 0; i < 16; i++) {
		for (size_t j = 0; j < 16; j++) {
			for (size_t k = 0; k < 16; k++) {
				c[i][j] = ((c[i][j]) + (((a[i][k]) * (b[k][j]))));
				if (c[i][j] >= mod)
					c[i][j] %= mod;
			}
		}
	}

	return c;
}

matrix makeMatrix(matrix mat)
{
	for (int i = 0; i < MAX; i++) {
		mat[i][i] += 6LL;
		mat[i][i ^ (1 << 0)] += 1LL;
		mat[i][i ^ (1 << 1)] += 1LL;
		mat[i][i ^ (1 << 2)] += 1LL;
		mat[i][i ^ (1 << 3)] += 1LL;
	}
	return mat; 
}


matrix pow(matrix mat, LL k)
{
	matrix iden = matrix(16, row(16, 0));
	for (int i = 0; i < 16; i++) iden[i][i] = 1LL;
	while (k) {
		if (k & 1) {
			iden = mul(iden, mat);
		}
		mat = mul(mat, mat);
		k = k >> 1;
	}
	return iden;
}

void solve()
{
	LL n;
	int a, b, c, d;
	cin >> n >> a >> b >> c >> d;
	matrix mat = matrix(16, row(16, 0));
	mat = makeMatrix(mat);
	matrix sol = pow(mat, n);
	LL fin_mask = 0;
	if (a) fin_mask |= 1;
	if (b) fin_mask |= 2;
	if (c) fin_mask |= 4;
	if (d) fin_mask |= 8;
	LL ans = sol[0][fin_mask];
	printf("%lld\n", ans);
}

int main()
{
	int t;
	cin >> t;
	while (t--) {
		solve();
	}
	return 0;
}

#include<iostream>
#include<bitset>
#include<string>
#include<cmath>

using namespace std;

void get_lucky_number(long long int max_val )
{
    long long int lucky_number = 0, sum = 0;
    long long int i = 1 , digits_remain;
    int size = 0, digit_number=0;

    while ( true ){
        sum = sum + pow(2,i)*i ;
        if ( sum == max_val){
            lucky_number = pow(2, i) - 1 ;
            size = i ;
            digit_number = i ;
            break;
        }
        if ( sum > max_val){
            sum = sum - pow(2,i)*i ;
            digits_remain = max_val - sum ;
            if ( digits_remain%i == 0 ){
                lucky_number = digits_remain / i -1 ;
                digit_number = i ;
            }
            else{
                lucky_number = digits_remain / i ;
                digit_number = digits_remain % i ;
            }
            size = i ;
            break ;
        }
        i += 1 ;
    }


    // converting lucky number to binary form of size "size"
    bitset<50> bin_lucky_number;
    bin_lucky_number = bitset<50> (lucky_number);

    if(bin_lucky_number[ size - digit_number] == 0 )
        cout << "Hacker\n";
    else
        cout << "Earth\n";
}

int main ()
{
    int t;
    long long int num;
    cin >> t;
    while(t--)
    {
        cin >> num;
        get_lucky_number(num);
    }
    return 0;
}


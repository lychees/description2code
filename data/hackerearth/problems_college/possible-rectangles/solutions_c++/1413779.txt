#include <bits/stdc++.h>

typedef long long int li;

#define Fi(i, st, ft) for(i = st;i <= ft; ++i)
#define Fd(i, st, ft) for(i = st;i >= ft; --i)
#define pb(a, b) a.push_back(b)
#define mod 1000000007
#define MAXN 1500000
#define MX 1450000
#define inf 1000000000000000000ll
const int maxBufSize = (10000000);

using namespace std;

li t , n , m , area;

struct Input
{
int bufSize, bufEnd, bufPos;
char buffer[maxBufSize];
void grabBuffer() {
bufSize = (maxBufSize); bufPos = 0;
bufEnd = fread(buffer, sizeof (char), bufSize, stdin);
buffer[bufEnd] = '\0';
}
bool bufEof() {return bufPos == bufEnd;}
int getChar() {return buffer[bufPos++];}
void skipWS() {
while ((buffer[bufPos] == '\n' ||
buffer[bufPos] == ' ' || buffer[bufPos] == '\t'))
bufPos++;
}
li rInt() {
li n = 0, x; skipWS();
bool neg=false;
if ( ( x = getChar() )=='-' ){
neg=true;
x=getChar();
}
for (; x <= '9' && x >= '0'; x = getChar())
n = (n << 3) + (n << 1) + (x - '0');
if ( neg )return -n;
else return n;
}
inline bool isWhiteSpace(char x) {
return x == ' ' || x == '\n' || x == '\t';
}
char rChar() {skipWS(); return getChar();}
}input;

int main()
{
	input.grabBuffer();
	li i , j , a , b , c , mx , d , ans;
	t = input.rInt();
	//scanf("%lld" , &t);
	while(t--) {
		m = input.rInt();
		n = input.rInt();
		area = input.rInt();
		scanf("%lld %lld %lld" , &m , &n , &area);
		vector<li> v;
		n-- , m--;
		a = (li)sqrt(area);
		Fi(i , 1 , a) {
			if(area%i == 0) {
				if(i*i == area) {
					pb(v , i);
				} else {
					pb(v , i);
					pb(v , (area/i));
				}
			}
		}
		//sort(v.begin() , v.end());
		if(n*m < area) {
			ans = 0;
		} else if(n*m == area) {
			ans = 1;
		} else {
			ans = 0;
			li len = v.size();
			Fi(i , 0 , len-1) {
				b = v[i] , c = area/v[i];
				if(b <= m && c <= n) {
					d = (m-b+1)*(n-c+1);
					ans = ans+d;
				}
			}
		}
		printf("%lld\n" , ans);
	}
	return 0;
}
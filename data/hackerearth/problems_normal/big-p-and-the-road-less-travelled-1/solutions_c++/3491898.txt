#include <iostream>
#include <vector>

using std::vector;

class Graph {
	private:
		std::vector<std::vector<unsigned int> > distanceMatrix;
		int destination;
		unsigned long int* amountOfPaths;
	public:
		Graph(std::istream & in = std::cin);
		unsigned long int countAllPaths();
};

Graph::Graph(std::istream & in) {
	in >> this->destination;
	this->amountOfPaths = new unsigned long int[this->destination + 2];
	this->distanceMatrix.reserve(this->destination + 2);
	unsigned int tmp, tmp2;
	do {
		in >> tmp;
		in >> tmp2;
		if (tmp == 1) amountOfPaths[tmp2] = 1;
		else this->distanceMatrix[tmp2].push_back(tmp);
	} while (tmp != 0 && tmp2 != 0);
}

unsigned long int Graph::countAllPaths() {
	unsigned long int paths;
	for (int i = 2; i <= this->destination; ++i) {
		paths = 0;
		for (auto it = this->distanceMatrix[i].begin(); it != this->distanceMatrix[i].end(); ++it) {
			paths += this->amountOfPaths[*it];
		}
		this->amountOfPaths[i] += paths;
	}
	return amountOfPaths[this->destination];
}

int main() {
	Graph g;
	std::cout << g.countAllPaths();
	return 0;
}

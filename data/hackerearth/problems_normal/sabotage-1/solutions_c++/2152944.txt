#include <bits/stdc++.h>

using namespace std;

int parent[100001];

int getroot(int a)
{
	while(a!=parent[a])
	{
		a = parent[a];
	}
	return a;
}
int len(int a)
{
	int count =0;
	while(a!=parent[a])
	{
		a=parent[a];
		count++;
	}

	return count;
}

bool isConnected(int a, int b)
{
	return getroot(a)==getroot(b);
}

void connect(int a, int b)
{
	int roota= getroot(a);
	int rootb= getroot(b);
	if(len(a)>len(b))
	{
		parent[rootb]= roota;
	}
	else parent[roota]=rootb;

}


int main()
{
	int n, m;
	cin>> n>>m;
	

	typedef pair <int, int> Pair;

	Pair flights[m];
	vector<int> cancelled;

	for(int i=0; i<n; i++)
		parent[i]=i;

	for(int i=0 ; i<m; i++)
	{
		cin>>flights[i].first;
		cin>>flights[i].second;
		flights[i].first--;
		flights[i].second--;
	}

	for(int i=m-1; i>=0; i--)
	{
		if(!isConnected(flights[i].first, flights[i].second))
		{
			connect(flights[i].first, flights[i].second);
		}
		else
		{
			cancelled.push_back(i+1);
		}
	}

	int sz = cancelled.size();
	cout<<sz<<endl;
	for(int i=sz-1; i>=0; i--)
	{
		cout<<cancelled.at(i)<<endl;
	}


}
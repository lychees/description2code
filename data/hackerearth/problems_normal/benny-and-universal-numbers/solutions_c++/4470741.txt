#include <bits/stdc++.h>

using namespace std;
const double pi=acos(-1.0);
const double eps=1e-9;
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define pii pair <int,int>
#define piii pair < pii, int>
#define pll pair <long long , long long>
#define plll pair <pll , long long>
#define hjsagjfasjg y1
typedef long long ll;

ll rems[15],n,l,r;
set <ll> primes;
vector <ll> v;

ll bs(ll l,ll r,ll x)
{
	if(l==r) return l;
	if(r==l+1)
		if(v[r]<=x) return r;else return l;
	int m=(l+r)/2;
	if(v[m]>x) return bs(l,m,x); else return bs(m,r,x);
}

ll f(ll x)
{
	if(x==0) return 0;
	if(x<v[0]) return 0;
	return bs(0,v.size()-1,x)+1;
}

bool isPrime(ll x)
{
	if(primes.find(x)!=primes.end()) return true;
	return false;
}

bool hasPrime(vector <ll> &t)
{
	//cout << "OLLOL" << endl;
	if(t.size()<2) return false;
	for(int i=0;i<t.size()-1;i++)
		if(isPrime(t[i]*10+t[i+1])/*||isPrime(t[i+1]*10+t[i])*/) return true;
	//cout << "OLOL" << endl;
	return false;
}

ll findval(vector <ll> &t)
{
	ll res=0;
	for(int i=0;i<t.size();i++)
	{
		res*=10;
		res+=t[i];
	}
	return res;
}

void g(vector <ll> &t)
{
	int s=t.size();
	ll val=findval(t);
	//cout << val << endl;
	if(hasPrime(t))v.pb(val);
	if(s==15)return;
	vector <ll> z=t;
	//cout << "Hi" << endl;
	for(int i=0;i<10;i++)
	{
		if(i==0&&t.size()==0)continue;
		if((val*10+i)%(s+1)==rems[s])
		{
			z.pb(i);
			g(z);
			z.pop_back();
		}
	}
}

int main()
{
	ios:: sync_with_stdio(false);
	/*
	0 1 0 0 0 0 0 0 1 1 1 2 3 4 5
	9
	1 1
	2 2
	5 5
	9 9
	10 10
	11 11 
	13 13
	137 137
	135 135
	*/
	for(int i=0;i<15;i++)
		cin >> rems[i];
	for(int i=2;i<100;i++)
	{
		bool ok=true;
		for(int j=2;j<i;j++)
			if(i%j==0)ok=false;
		if(ok)primes.insert(i);
	}
	vector <ll> em;
	g(em);
	sort(v.begin(),v.end());
	/*for(int i=0;i<40;i++)
		cout << v[i] << " ";
	cout << endl;*/
	cin >> n;
	for(int i=0;i<n;i++)
	{
		cin >> l >> r;
		cout << f(r)-f(l-1) << endl;
	}
	return 0;
}

// #include C {
#include<cstring>
#include<cassert>
#include<cstdio>
#include<cctype>
#include<cmath>
// }

// #include C++ {
#include<functional>
#include<algorithm>
#include<iostream>
#include<numeric>
#include<vector>
#include<string>
#include<bitset>
#include<queue>
#include<deque>
#include<stack>
#include<list>
#include<map>
#include<set>
// }
using namespace std;
// #typedef {
typedef long long int64;
typedef unsigned long long uint64;
typedef pair <int, int> PII;
typedef pair <char, char> PCC;
typedef pair <int64, int64> PLL;
typedef pair <double, double> PDD;
// }

// #parameter{
#ifdef DEBUG_MODE

#define TYPE decltype
#define RF(filename) {freopen((filename), "r", stdin);}
#define WF(filename) {freopen((filename), "w", stdout);}
#define DEBUG printf

#else

#define TYPE __typeof
#define RF(filename) {;}
#define WF(filename) {;}
#define DEBUG(...)

#endif

// #define {
#define SZ(a) ((int)(a).size())
#define X first
#define Y second
#define MP make_pair
#define L(x) ((x)<<1)
#define R(x) ((x)<<1 | 1)
#define max3(x, y, z) (max(max((x), (y)), (z)))
#define min3(x, y, z) (min(min((x), (y)), (z)))
#define BIT(x, i) (((x) >> (i)) & 1)
#define ALL(it) (it).begin(), (it).end()
#define FILL(__space, __val) memset(__space, __val, sizeof(__space))
#define MOVE(__spaceTo, __spaceFrom) memmove(__spaceTo, __spaceFrom, sizeof(__spaceTo))
#define FOR(it, c) for( TYPE((c).begin()) it = (c).begin(); it != (c).end(); it++)
/////////////////////////////////////////////////////////////
const double PI = acos(-1.0);
const double EPS = 1e-6;

#define MAX_N 105
#define MAX_M 1005
#define MAXX 0x3f
#define UPPER 2147483647LL
#define INF ((1 << 30) - 1)
#define BINF ((1LL << 62) - 1LL)
#define NONE -1
#define NIL 0
// }

/////////////////////////////////////////////////////////////
char mapp[MAX_N][MAX_N];
int L, B;
const int OFFR[] = { 1, 0, -1, 0 };
const int OFFC[] = { 0, 1, 0, -1 };
bool visit[MAX_N][MAX_N];
vector <PII> BFS(int row, int col){
	queue <PII> Q;
	Q.push(PII(row, col));
	visit[row][col] = true;
	vector <PII> V;
	V.emplace_back(PII(row, col));
	while (!Q.empty()){
		PII u = Q.front(); Q.pop();
		for (int k = 0; k < 4; k++){
			int nr = u.X + OFFR[k];
			int nc = u.Y + OFFC[k];
			if (nr >= 0 && nr < L && nc >= 0 && nc < B && !visit[nr][nc] && mapp[nr][nc] == 'x'){
				visit[nr][nc] = true;
				Q.push(PII(nr, nc));
				V.emplace_back(PII(nr, nc));
			}
		}
	}
	return V;
}
bool FallDown(){
	FILL(visit, false);
	vector < vector <PII> > compo;
	for (int r = 0; r < L; r++) for (int c = 0; c < B; c++) if (!visit[r][c] && mapp[r][c] == 'x'){
		compo.emplace_back(BFS(r, c));
	}
	char tmp[MAX_N][MAX_N];
	while (true){
		bool out = true;
		FILL(tmp, '.');
		for (auto &vi : compo){
			bool down = true;
			for (PII p : vi){
				if (p.X == 0)
					down = false;
				if (p.X > 0 && tmp[p.X - 1][p.Y] == 'x')
					down = false;
				if (!down) break;
			}
			if (down){
				for (PII &p : vi){
					tmp[p.X - 1][p.Y] = 'x';
					p.X--;
				}
				out = false;
			}
			else{
				for (PII &p : vi)
					tmp[p.X][p.Y] = 'x';
			}
		}
		if (out)
			break;
	}
	for (int r = 0; r < L; r++) for (int c = 0; c < B; c++) if (tmp[r][c] != mapp[r][c]){
		MOVE(mapp, tmp);
		return true;
	}
	return false;
}
void HitFromLeft(int h){
	for (int c = 0; c < B; c++) if (mapp[h][c] == 'x'){
		mapp[h][c] = '.';
		break;
	}
	while (FallDown());
}
void HitFromRight(int h){
	for (int c = B - 1; c >= 0; c--) if (mapp[h][c] == 'x'){
		mapp[h][c] = '.';
		break;
	}
	while (FallDown());
}
/////////////////////////////////////////////////////////////
int main(){
	RF("input.txt");
	//  WF("output.txt");

	scanf("%d %d", &L, &B);
	for (int r = L - 1; r >= 0; r--)
		scanf("%s", mapp[r]);
	int N;
	scanf("%d", &N);
	for (int j = 0; j < N; j++){
		int h; scanf("%d", &h);
		h--;
		if (j & 1) HitFromRight(h);
		else HitFromLeft(h);
		/*for (int r = L - 1; r >= 0; r--){
			for (int c = 0; c < B; c++)
				DEBUG("%c", mapp[r][c]);
			DEBUG("\n");
		}
		DEBUG("============================\n");*/
	}
	for (int r = L - 1; r >= 0; r--){
		for (int c = 0; c < B; c++)
			printf("%c", mapp[r][c]);
		puts("");
	}
	return 0;
}
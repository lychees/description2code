#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
#define maxn 100010

int a[maxn], kek[maxn];

bool comp[maxn];

int find (int t){
	long long int x= (long long int) t; 
	long long int cur= x;
    int ans= 0;
    while (cur<=maxn){
		ans+=kek[cur];
		cur= cur*x;
	}
	return ans;
}

vector <int> v;

int main() {
	// your code goes here
	int n, q, x;
	cin>>n;
	for (int i=1; i<=n; i++){
		cin>>a[i];
		for (int j=1; j*j<=a[i]; j++){
			if (a[i]%j!=0) continue;
			kek[j]++;
			if (j!=a[i]/j) kek[a[i]/j]++;
		}
	}	

	comp[2]= 0;
	for (int i=2; i<maxn; i++){
		if (comp[i]) continue;
		for (int j=2; j*i<maxn; j++) comp[j*i]= 1;
		
		
	}
	comp[0]= 1;
	comp[1]= 1;
	cin>>q;
	int curr;
	while(q--){
		cin>>x;
		v.clear();
		for (int i=1; i*i<=x; i++){
			if (x%i!=0) continue;
			if (!comp[i]) v.push_back(i);
			if (i==x/i) continue;
			if (!comp[x/i]) v.push_back(x/i);
		}
		int ans= 1000000000, cans;
		int dg= 1;
		for (int i=0; i<v.size(); i++){
			cans= find(v[i]);
			curr= v[i];
			dg= 1;
			while (x%(v[i]*curr)==0){
				dg++;
				curr= curr*v[i];
			}
			cans= cans/dg;
			ans= min(ans, cans);
		}
		cout<<ans<<endl;

	}
	
	return 0;
}
#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>

using namespace std;

int cost_permute(vector<int> v) {

    int count = 0;
    int n  = v.size();
    int where[n]; 
    int temp;
    int lookup;

    for ( int i = 0; i < n; i++ ) {
        where[v[i]] = i;
    }

    for ( int i = 0; i < n; i++ ) {
        if ( v[i] != i ) {
            lookup = where[i];
            where[i] = i;
            where[v[i]] = lookup;
            temp = v[lookup];
            v[lookup] = v[i];
            v[i] = temp;
            count++;
        }
    }
    
    return count;
}

int cost_transform(string s1, string s2, vector<int> v) {
    
    int count  = 0;
    for ( int i = 0; i < s1.length(); i++ ) {
        count = count + abs(int(s1[v[i]] - s2[i]));
    }

    return count;
}

int main()
{
    int t;
    cin >> t;
    string s1,s2;

    while ( t-- ) {
        
        cin >> s1 >> s2;
        string s;
        s = s1;
        sort(s.begin(),s.end());
        int n = s1.length();
        int result = 0;
        vector<int>v(n);
        for ( int i = 0; i < n; i++ ) {
            v[i] = i;
        }

        result = cost_permute(v) + cost_transform(s1,s2,v);
        
        while (next_permutation(v.begin(), v.end())) {    
                result = min(result, cost_permute(v)+cost_transform(s1,s2,v));
        }

        cout << result << endl;
    }

    return 0;
}

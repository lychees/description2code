#include<algorithm>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<map>
#include<numeric>
#include<queue>
#include<set>
#include<vector>

#define REP(i,n) for(int (i)=0;(i)<(n);(i)++)
#define all(a) (a).begin(),(a).end()
#define sz(a) (a).size()
#define pb push
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

int main()
{

    int t;
    t = 1;
    while(t--)
    {
    priority_queue<int> max_heap;

    priority_queue<int , vector<int> , greater<int> > min_heap;
    int n;
    cin >> n;
    int a[3];

    int median = -1;
    ll sum = 0;


    int max_heap_size = 0 , min_heap_size = 0;

    //max_heap.push(median);
    for(int i = 1 ; i <= n ; i++)
    {
          int num;
          cin >> num;

          if(num < median )
          {
                 max_heap.push(num);
                 max_heap_size+=1;
          }
          else
          {
                 min_heap.pb(num);
                 min_heap_size+=1;
          }

          if( max_heap_size > min_heap_size )
          {
              min_heap.pb(median); min_heap_size+=1;
              median = max_heap.top();
              max_heap.pop(); max_heap_size-=1;

          }
          else if( min_heap_size > max_heap_size + 1 )
          {
               max_heap.pb(median); max_heap_size+=1;
               median = min_heap.top();
               min_heap.pop(); min_heap_size-=1;
          }else {
              if(max_heap_size == min_heap_size){
                    median = max_heap.top();
              }else median = min_heap.top();
          }

          //cout << median << endl;
          sum = (sum + median) % 100000;
    }
    cout << sum << endl ;
    }


    return 0;
}





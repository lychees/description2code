#include <bits/stdc++.h>

using namespace std;

#define LL long long int 
#define sd(x) scanf("%d", &x)
#define F first
#define S second
#define mp make_pair
#define pb push_back
#define N 2000000
#define pii pair<int,int>
#define MOD 1000000007LL

bool vis[N], flag;
int color[N];
vector<int> adj[N];
queue<int> Q;

inline void solve(){
	int n, m, i, j, k, l, u, v, c;
	LL ans;
	sd(n); sd(m);
	assert((2 <= n) && (n <= 10000));
	assert((0 <= m) && (m <= 100000));
	for(i = 0; i < n; i++){
		adj[i].clear();
	}
	while(m--){
		sd(u); sd(v);
		assert((0 <= u) && (u <= n - 1));
		assert((0 <= v) && (v <= n - 1));
		adj[u].pb(v);
		adj[v].pb(u);
	}
	flag = true;
	memset(vis, false, sizeof vis);
	c = 0;
	for(i = 0; i < n; i++){
		if(vis[i] == false){
			c++;
			while(!Q.empty()){
				Q.pop();
			}
			u = i;
			Q.push(u);
			vis[u] = true;
			color[u] = 0;
			while(!Q.empty()){
				u = Q.front();
				Q.pop();
				for(j = adj[u].size() - 1; j >= 0; j--){
					v = adj[u][j];
					if(vis[v] == false){
						color[v] = 1 - color[u];
						vis[v] = true;
						Q.push(v);
					}
					else{
						if(color[v] == color[u]){
							flag = false;
							break;
						}
					}
				}
				if(flag == false){
					break;
				}
			}
			if(flag == false){
				break;
			}
		}
	}
	if(flag == true){
		if(c == n){
			ans = 1;
			c--;
			while(c--){
				ans = ans * 2;
				if(ans >= MOD){
					ans %= MOD;
				}
			}
			ans--;
			if(ans < 0){
				ans += MOD;
			}
		}
		else{
			ans = 1;
			c--;
			while(c--){
				ans = ans * 2;
				if(ans >= MOD){
					ans %= MOD;
				}
			}
		}
		cout<<ans<<endl;
	}
	else{
		printf("NOT POSSIBLE\n");
	}
	return;	
}

int main(){
	int t;
	sd(t);
	assert((1 <= t) && (t <= 100));
	while(t--){
		solve();
	}
	return 0;
}
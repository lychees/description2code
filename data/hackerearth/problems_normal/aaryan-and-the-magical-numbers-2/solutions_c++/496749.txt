//Karol Kaszuba
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <vector>
#include <cstdlib>
#include <ctime>


using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef double D;
typedef long double LD;
typedef vector<PII> VII;

#define FOR(i,x,y) for(int i=(x);i<=(y);++i)
#define REP(i,x) FOR(i,0,(x)-1)
#define FORD(i,x,y) for(int i=(x);i>=(y);--i)
#define VAR(i,c) __typeof(c) i=(c)
#define FORE(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)

#define SIZE(c) (int)((c).size())
#define ALL(c) (c).begin(),(c).end()
#define PB push_back
#define IN insert
#define ER erase
#define MP make_pair
#define ST first
#define ND second
#define IOSYNC ios_base::sync_with_stdio(0)

int primes[] = {2,3,5,7}, good[] = {0,0,1,1,0,1,0,1,0,0};
LL odp[20], pot10[20];

void jebaj()
{
	LL wyn = 0, n;
	string s = "";
	scanf("%lld", &n);
	VI v;
	while(n > 0)
	{
		v.PB(n % 10);
		n /= 10;
	}
	FORD(i, SIZE(v) - 1, 0)
		s.PB('0' + v[i]);
	
	bool permanent_good = false;
	REP(i, SIZE(s))
	{
		int remnants = SIZE(s) - i - 1;
		int a = (s[i] - '0');
		if(permanent_good)
		{
			REP(i, a)
			{
				wyn += pot10[remnants];
			}
		}
		else
		{
			REP(i, a)
			{
				if(good[i])
				{
					wyn += pot10[remnants];
				}
				else
				{
					wyn += odp[remnants];
				}
			}
			if(good[a])
				permanent_good = true;
		}
	}
	if(permanent_good)
		wyn++;
		
	printf("%lld\n", wyn);
}

void prepro()
{
	pot10[0] = 1;
	FOR(i, 1, 18)
		pot10[i] = pot10[i - 1] * 10;
		
	odp[0] = 0;
	FOR(i, 1, 18)
	{
		odp[i] = 6LL * odp[i - 1] + 4LL * pot10[i - 1];
	}
}

int main()
{
	prepro();
//	IOSYNC;
	int t;
	//t = 1;
	scanf("%d", &t);
	
	REP(i, t) 
	{
		jebaj();
	}
}

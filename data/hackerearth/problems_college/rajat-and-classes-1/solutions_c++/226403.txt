#include<stdio.h>
#include<stdlib.h>
#include<iostream>

int compare(const void *a, const void *b)
 {return ((*(long long *) a)-*((long long *) b));
 }
using namespace std;
struct node
{long long data;
 struct node *next;
};

long long *isVisited;
long long *exists;
struct node *graph;

void inputGraph(long long p)
  {long long i,x,y;
   for(i=0;i<p;i++)
     {cin>>x>>y;
	  struct node *ptr;
      x--;y--;
      exists[x]++;
      exists[y]++;
      ptr=&graph[x];
      while(ptr->next!=NULL)
         ptr=ptr->next;
      struct node *cell=(struct node*)malloc(sizeof(struct node));
      ptr->next=cell;
      cell->next=NULL;
      cell->data=y;
      
      ptr=&graph[y];
      while(ptr->next!=NULL)
         ptr=ptr->next;
      struct node *cell2=(struct node*)malloc(sizeof(struct node));
      ptr->next=cell2;
      cell2->next=NULL;
      cell2->data=x;
     }
    
  }
  

 long long dfs(long long v,long long c)
 {isVisited[v]=1;
 if(exists[v]>exists[c])
    c=v;
  if(exists[v]==exists[c] && c>v)
    c=v;
 // printf("%d ",v);
  struct node *ptr;
  ptr=&graph[v];
  ptr=ptr->next;
  for(;ptr;ptr=ptr->next)
     {if(!isVisited[ptr->data])
          { c=dfs(ptr->data,c);
          }
     }
    return c;
 }
 
long long ans[1000005]={0};
int main()
{ 
  long long n,i,p,x,y,c;
  
  cin>>n;
  graph=(struct node*)malloc((n+1)*sizeof(struct node));     
  for(i=0;i<n;i++)
     {graph[i].next=NULL;
     }
  isVisited=(long long *)calloc(n+1,sizeof(long long));
  exists=(long long *)calloc(n+1,sizeof(long long));
   cin>>p;
  inputGraph(p);
  
 c=0;
 for(i=0;i<n;i++)
   {if(!isVisited[i])
      ans[c++]=dfs(i,i);
   }
   cout<<c<<endl;
   qsort(ans,c,sizeof(long long),compare);
  for(i=0;i<c;i++)
    cout<<(ans[i]+1)<<" ";
  return 0;
}
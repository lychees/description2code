#include<bits/stdc++.h>
#define ll long long 
#define PLL pair<ll,ll> 
#define MAX 1000000
#define INF 1061109567
using namespace std;

vector<PLL> adj[MAX];
vector<ll> final_path;

ll djikstras(ll nodes,ll src,ll target,bool flag)
{
	priority_queue<PLL,vector<PLL>,greater<PLL> > pq;
	stack<ll> s;
	vector<ll> dis(nodes+1,INF);
	vector<ll> path(nodes+1,-1);
	pq.push(make_pair(0,src));
	dis[src]=0;
	
	while(!pq.empty())
	{
		ll x = pq.top().second;
		pq.pop();
		for(ll i=0;i<adj[x].size();i++)
		{
			ll u =	adj[x][i].second;
			ll weight = adj[x][i].first;
			
			if(dis[u]>weight + dis[x])
			{
				dis[u] = weight + dis[x];
				path[u] = x;
				pq.push(make_pair(dis[u],u));
			}
		}
	}
	
	ll i = target;
	
	while(path[i]!=-1)
	{
		s.push(i);
		i = path[i];
	}
	if(flag==0) s.push(i);
	
	while(!s.empty())
	{
		final_path.push_back(s.top());
		s.pop();
	}
	
	return dis[target];
}

int main()
{
	ll t,edges,nodes,weight,x,y,z;
	cin>>t;
	
	while(t--)
	{
		cin>>nodes>>edges;
		for(ll i=0;i<MAX;i++) adj[i].clear();
		final_path.clear();
		
		for(ll i=0;i<edges;i++)
		{
			cin>>x>>y>>weight;
			adj[x].push_back(make_pair(weight,y));
			adj[y].push_back(make_pair(weight,x));
		}
		
		cin>>x>>y>>z;
		ll res1 = djikstras(nodes,x,y,0);
		if(res1==INF) cout<<"No Train Found."<<endl;
		else
		{
			ll res2 = djikstras(nodes,y,z,1);
			if(res2==INF) cout<<"No Train Found."<<endl;
			else
			{
				cout<<res1+res2<<endl;
				for(ll i=0;i<final_path.size();i++) cout<<final_path[i]<<" ";
				cout<<endl;
			}
		}
	}
	return 0;
}
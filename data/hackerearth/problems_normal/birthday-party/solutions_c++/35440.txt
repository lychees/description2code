#include <stdio.h>
#include <iostream>
#include <set>
#include <map>
#include <string.h>
using namespace std;

#define MAXN 1000

int wt[MAXN];
int K [MAXN + 1];
  
void knapSack(int W, int n) {
   
   K [0] = 1;
   for (int i = 0; i <= n; i++) {
       for (int w = W; w >= 1; w--) {
           if (i == 0)
               K[w] = 0;
   
           else if (wt[i - 1] <= w)
                 K[w] = K[w - wt[i - 1]] | K[w];
   
       }
   }
}

set <int> uniqueid;
map <int, int> p;

int main() {
    int T, W, n, id;
    
    cin >> T;
    
    while (T--) {
        cin >> W >> n;
            
        for (int i = 0; i < n; i++)
            cin >> wt[i];
            
        knapSack(W, n);
        //for (int i = 0; i <= W; i++) 
          //  cout << K [i] << endl;
            
        for (int i = 0; i < W; i++) {
            cin >> id;
            p [id]++;
            uniqueid.insert (id);
        }
          
        int ans = 0;  
        set <int> :: iterator it = uniqueid.begin ();
        
        for (; it != uniqueid.end (); it++) {
            //cout << "count " << p [*it] << endl;
            ans += K [p [*it]];
        }
        
        printf("%d\n", ans);
        
        p.clear ();
        uniqueid.clear ();
        memset (K, 0, sizeof (K));
        
    }
    return 0;
}

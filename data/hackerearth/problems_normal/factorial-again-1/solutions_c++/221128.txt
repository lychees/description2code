# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <numeric>
# include <cstdio>
# include <cmath>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;

#define GI ({int t;scanf("%d",&t);t;})
#define REP(i,a,b) for(int i=a;i<b;i++)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define pb push_back
#define mp make_pair
#define INF (int)1e9
#define EPS (double)(1e-9)
#define PI (double)(3.141592653589793)
LL modinv( LL a, LL b,LL p) // valid if only p is prime.
{
	LL c=1;
    while(b>0)
    {
        if(b%2==1)
        c=(c*a)%p;
        a=(a*a)%p;
        b/=2;
    }
	return c;
}
LL factorialMod(LL n,LL p)
{
    LL ans=1;
    if(n<=(p/2))
    {
        for(LL i=1;i<=n;i++)
        {
            ans=(ans*i)%p;
        }
    }
    else //Fancypants method for large n
    {
        for(LL i=n+1;i<p;i++)
        {
            ans=(ans*i)%p;
        }
        ans=modinv(ans,p-2,p);
        ans = -1*ans + p;
    }
    return (ans%p);
}

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        long N,P;
        cin>>N>>P;
        if((3*N)>=P)
        {
            cout<<0<<"\n";
            continue;
        }
        long power=(N*(P-2))%(P-1);
        long denomintor=modinv(6,power,P);
        long numerator=factorialMod(3*N,P);
        long ans=(numerator*denomintor)%P;
        cout<<ans<<"\n";

    }
    return 0;
}

#include<bits/stdc++.h>
using namespace std;

#define ll long long int
#define FL(i,a,b) for(ll i=a;i<b;i++)
#define FOR(i,n) for(ll i=0;i<n;i++)
#define SORTF(x) sort(x.begin(),x.end(),func);
#define SORT(x) sort(x.begin(),x.end())
#define pb(x) push_back(x)
#define SET(v, val) memset(v, val, sizeof(v)) ;
#define RSORT(v) { SORT(v) ; REVERSE(v) ; }
#define ALL(v) v.begin(),v.end()
#define REVERSE(v) { reverse(ALL(v)) ; }
#define UNIQUE(v) unique((v).begin(), (v).end())
#define RUNIQUE(v) { SORT(v) ; (v).resize(UNIQUE(v) - (v).begin()) ; }
#define fill(x,n) memset(x,n,sizeof(x))
#define S(n) scanf("%lld",&n)

struct node {
	ll a,b;
};

ll sum[2000]; 
node dp[1000][1000] = {0};
bool me[1000][1000] = {0};

node calc(string ss,string t, ll in, ll su) {
//	cout << ss << " " << t << " " << in << " " << su << "\n";
	if(in == 0) {
		node tem;
		tem.a = tem.b = 0;
		if(su == 0) {
			
		}
		else if(sum[su] == 1) {
			tem.a = 1;
		}
		else {
			tem.b = 1;
		}
	//	cout <<ss << " " << su << " " <<sum[su] << " "<< tem.a << " " << tem.b << "\n";
		return tem;
	}
	if(me[in][su] == 1) {
		return dp[in][su];
	}
	me[in][su] = 1;
	for(ll i = 0;i < 10 ;i++) {
		node tem;
		char c = i + '0';
		string yu = ss + c;
		tem = calc(ss + c, t, in - 1 ,su + (i*i));
		dp[in][su].a += tem.a;
		dp[in][su].b += tem.b;
	}
	return dp[in][su];
}

node solve(ll x) {
	char s[200];
	sprintf(s , "%lld", x);
	string ss, t;
	t = s;
	ll to= 0;
	ll i;
	node ret;
	node tot;
	tot.a = 0;
	tot.b = 0;
	ss = "";
	for(i = 0;i < t.size();i++) {
		
		ll j;
		for(j = 0;j < t[i] - '0';j++) {
			char c = j + '0';
			ret = calc(ss + c, t, t.size() - 1- i,to + j*j);
			tot.a += ret.a;
			tot.b += ret.b;
		}
		ss =ss + t[i];
		to = to + ((t[i] - '0') * (t[i] - '0'));
 	}
	
//	cout << ret << "\n";
	return tot;
}


ll solve1(ll i) {
	if(i == 1) {
		return 1;
	}
	else if( i == 89) {
		return 89;
	}
	else {
		ll co =0;
		while(i > 0) {
			ll to = i%10;
			co += to*to;
			i = i / 10; 
		}
		return solve1(co);
	}
}

int main() {
//	memset(dp, -1, sizeof(dp));
	ll n;
	S(n);
	ll i;
	for(i= 1;i<= 891;i++) { 
		sum[i] = solve1(i);
	}
	ll val = pow(10, n);
//	cout << val + 1 << "\n";
	node tem = solve(val  + 1);
	cout << tem.b << " " << tem.a << "\n";
}

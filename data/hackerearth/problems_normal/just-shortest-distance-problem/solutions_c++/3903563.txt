#include <iostream>
#include <list>
#include <vector>
#include <utility>
using namespace std;
#define INF 21474836
class Graph
{
 int v;
 vector< list < pair <int, int>>> adj; 
 public:
 Graph(int v);
 void add_edge(int x, int y);
 void bfs(int s, int dist[]);
};
Graph :: Graph(int v)
{
	this->v=v;
   adj.resize(v+1);
}
void Graph :: add_edge(int x, int y)
{
	adj[x].push_back(make_pair(y,0));
//	adj[y].push_back(make_pair(x,0));
}
void Graph :: bfs(int s, int dist[])
{
	bool *visited=new bool[v+1];
	int j;
	for(j=0;j<=v;j++)
	visited[j]=false;
	list < int>  que;
	list <int> q2;
	que.push_back(s);
	q2.push_back(dist[s]);
	visited[s]=true;
	list < pair <int, int>> :: iterator i;
	while(!que.empty())
	{
	    s=que.front();
//		if(s==v)
//		{
//			cout<<q2.front()<<endl;
//			break;
//		}
        dist[s]=q2.front();
		que.pop_front();
		for(i=adj[s].begin();i!=adj[s].end();i++)
		{
			if(!visited[(*i).first] && dist[(*i).first]>q2.front())
			{
				visited[(*i).first]=true;
				que.push_back((*i).first);
				q2.push_back(q2.front()+1);
			}
		}
		q2.pop_front();
	}
	return;
}
int main()
{
    int t,n,m,x,y,i,w,d,k;
    cin>>n;
    cin>>m;
    Graph g(n);
    int *dist=new int[n+1];
    for(i=0;i<=n;i++)
    dist[i]=INF;
    dist[1]=0;
    for(i=1;i<=m;i++)
    {
    	cin>>t;
    	if(t==1)
    	{
    		cin>>y;
    		if(dist[y]!=INF)
    		cout<<dist[y]<<endl;
    		else
    		cout<<"-1"<<endl;
    	}
    	else
    	{
    		cin>>x;
    		cin>>y;
    		g.add_edge(x,y);
    		if(dist[y]>dist[x]+1)
    		{
    		dist[y]=dist[x]+1;	
    		g.bfs(y,dist);
    		}
    	}
    }
    return 0;
}
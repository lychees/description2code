#include <iostream>
#include <utility>
#include <vector>
using namespace std;

int root(int Arr[], long int i){
	while(Arr[i] != i){
		Arr[i] = Arr[Arr[i]];
		i = Arr[i];
	}
	return i;
}

bool graph_union(int Arr[], int size[], long int i, long int j){
	int root_i = root(Arr, i), root_j = root(Arr, j);
	if(root_i == root_j) return false;
	if(size[root_i] > size[root_j]){
		size[root_i] += size[root_j];
		Arr[root_j] = root_i;
	}
	else{
		size[root_j] += size[root_i];
		Arr[root_i] = root_j;
	}
	return true;
}

int main()
{
    vector<pair<long int, long int>> edges;
    int t, Arr[5003], size[5003];
    long int n, m, i, j, nn, mm;
    cin >> t;
    while(t--){
    	cin >> n >> m;
    	for(int i = 0; i < 5003; i++){
    		Arr[i] = i;
    		size[i] = 1;
    	}
    	edges.clear();
    	mm = m;
    	while(mm--){
    		cin >> i >> j;
    		edges.push_back(make_pair(i, j));
    	}
    	mm = m;
    	while(n > 1L && mm--){
    		cin >> i;
    		if(!graph_union(Arr, size, edges[i-1L].first, edges[i-1L].second)){
    			break;
    		}
    		n--;
    	}
    	if(n == 1L){
    		cout << "YES" << endl;
    	}
    	else{
    		cout << "NO" << endl;
    	}
    	n--;
    	while(n > 1L){
    		cin >> i;
    		n--;
    	}
    }
    return 0;
}

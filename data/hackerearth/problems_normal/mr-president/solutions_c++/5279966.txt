#include <iostream>
#include <algorithm>
#include <vector>
#include <utility>
#include <cmath>
#include <queue>
using namespace std;

int n,m;
long long k;
typedef pair<long long,int> PII;


int main()
{
    cin>>n>>m>>k;
    int a,b;
    long long c,total=0;
    priority_queue <PII,vector<PII>,greater<PII>> pq;
    vector <pair<long long,int>> v[n+1];
    priority_queue <long long> costs;
    bool marked[n+1];
    for(int i=0;i<=n;i++)
    marked[i]=false;
    while(m--)
    {
    	cin>>a>>b>>c;
    	v[a].push_back(make_pair(c,b));
    	v[b].push_back(make_pair(c,a));
    }
    pq.push(make_pair(0,1));
    pair <long long,int> p;
    int x,cost,y,count=0,nodes=0;
    while(!pq.empty())
    {
    	p=pq.top();
    	pq.pop();
    	x=p.second;
    	cost=p.first;
    	if(marked[x]==false)
    	{
    		nodes++;
    		total+=p.first;
    		if(cost!=0)
    		costs.push(cost);
    		marked[x]=true;
    		for(int i=0;i<v[x].size();i++)
    		{
    			y=v[x][i].second;
    			if(marked[y]==false)
    			pq.push(v[x][i]);
    		}
    	}
    }
    
    while(total>k && !costs.empty())
    {
    	total-=costs.top();
    	total++;
    	costs.pop();
    	count++;
    }
    if(total>k || nodes<n)
    cout<<"-1\n";
    else
    cout<<count<<endl;
    return 0;
}

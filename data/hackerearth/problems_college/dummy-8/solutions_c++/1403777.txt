#include<iostream>
#include<vector>
#include<queue>
#include<string>
#include<cstdio>
#include<cstring>
#include<fstream>
#define INF 1e9
using namespace std;
int left( int u ,int n)
{
	if(u%n == 0)
	  return -1;
	   return u-1;
}
int right( int u , int n)
{
	if((u+1)%n == 0)
    return -1;
	return u+1;
}
int up( int u , int n)
{
	  if( u >=0 && u < n)
	  return -1;
	  return u-n;
}
int down( int u ,int n , int m)
{
	if( u >= n*m-n && u < n*m)
	  return -1;
	  return u+n;
}
int main(){

    ifstream in("in.txt");
    ofstream out("out.txt");
	   int t;
	   cin >> t;
          for(int xx=1;xx<=t;xx++){
            int m , n ,i , start ,end,j,u , tmp,ll;
	cin >> m >> n;
	char s[m+1][n+1];
	int dip[m+1][n+1];
	memset( dip , 0 , sizeof dip);
	      for(i = 0 ; i < m ; ++i){
             cin>>s[i];
           for( j = 0 ; j < n  ; ++j ){
             if(s[i][j] == 'S')
             {
    	   start = n*i+j;
	    s[i][j]='.';
             }
	   if(s[i][j] == 'G'){
	   end = n*i+j;
	   s[i][j]='.';
	   }
	   if(s[i][j] == '<')
	   dip[i][j]=0;
	   if(s[i][j] == '^' )
	   dip[i][j]=1;
	   if(s[i][j] == '>')
	   dip[i][j]=2;
	   if(s[i][j] == 'v' )
	   dip[i][j]=3;
     }
     }
    	    queue< int > q;
	   vector< int > vec[n*m];
	   int status[m*n][4];
	   memset( status , 0 , sizeof status);
	   vec[start].push_back(0);
	   q.push(start);
	   status[start][0]=1;
	  while(!q.empty())
	  {
  	        u = q.front();
	 q.pop();
	 tmp = vec[u][vec[u].size()-1];
	             int ar[4];
	           ar[0]=left(u,n);
	   ar[1]=right(u,n);
	   ar[2]=up(u,n);
	   ar[3]=down(u,n,m);
           for( int k = 0 ; k < 4 ; ++k ){
           	     if( ar[k] != -1 )
	{
     	           if(s[ar[k]/n][ar[k]%n] != '.')
	ar[k]=-1;
	 else
	 {
 	i = ar[k]/n;
 	j = ar[k]%n;
	     int flag = 0;
  	    ll = j+1;
       while( s[i][ll] == '.' && ll < n - 1 )
	    ll++;
	    if(s[i][ll] == '>' || s[i][ll] =='<' || s[i][ll] == '^' || s[i][ll]=='v')
	    {
    	if( (dip[i][ll]+tmp+1)%4 == 0 )
    	   flag = 1;
    	}
    	    ll = j-1;
       while( s[i][ll] == '.' && ll > 0 )
	    ll--;
	    if(s[i][ll] == '>' || s[i][ll] =='<' || s[i][ll] == '^' || s[i][ll]=='v')
	    {
    	if((dip[i][ll]+tmp+1)%4 == 2)
    	   flag = 1;
    	}
    	    ll = i+1;
       while( s[ll][j] == '.' && ll < m-1 )
	    ll++;
	    if(s[ll][j] == '>' || s[ll][j] =='<' || s[ll][j] == '^' || s[ll][j]=='v')
	    {
    	if( (dip[ll][j]+tmp+1)%4 == 1)
    	   flag = 1;
    	}
    	    ll = i-1;
       while( s[ll][j] == '.' && ll > 0)
	    ll--;
	    if(s[ll][j] == '>' || s[ll][j] =='<' || s[ll][j] == '^' || s[ll][j]=='v')
	    {
    	if( (dip[ll][j]+tmp+1)%4 == 3 )
    	   flag = 1;
    	}
    	       if( flag == 1 )
              ar[k] = -1;
  	 } } }
           for( i = 0 ; i < 4 ; ++i)
	   {
   	if( ar[i] != -1 )
   	{
	     if( status[ar[i]][(tmp+1)%4] == 0 )
	 {
	 status[ar[i]][(tmp+1)%4]=1;
	  vec[ar[i]].push_back(tmp+1);
 	  q.push(ar[i]);
 	}
	   }
   	}



     }
     cout<<"Case #"<<xx<<": ";
	     if(vec[end].size() == 0)
	 cout<<"impossible"<<endl;
	 else
	 {
	 	 int ans = 1e9;
 	for( i = 0 ; i < vec[end].size();++i)
	 	ans = min( ans , vec[end][i]);
	 	cout << ans << endl;
 	}
	 }


          return 0;
}
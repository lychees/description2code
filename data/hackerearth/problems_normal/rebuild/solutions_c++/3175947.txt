#include <bits/stdc++.h>
#define ll long long
using namespace std;
typedef struct node
{
	ll int p,r; //parent,rank
}node;
typedef struct road
{
	ll int x,y;
	ll int c;
}road;
ll int n;
node a[100010];
road r[100010];
ll int degree[100010];
bool my(road p,road q)
{
	if(p.c<q.c)
	return true;
	else if(p.c==q.c)
	{
		if(p.x>q.x)
		return true;
		else if(p.x==q.x)
		{
			if(p.y>q.y)
			return true;
		}
	}
	return false;
}
void make_set()
{
	ll int i;
	for(i=0;i<n;i++)
	{
		a[i].p=i;
		a[i].r=0;
		degree[i]=0;
	}
}
ll int find_set(ll int x)
{
	if(a[x].p==x)
	return x;
	else
	{
		a[x].p=find_set(a[x].p); //Path compression
		return a[x].p;
	}
}
void link_set(ll int x,ll int y)
{
	if(a[x].r>a[y].r)
	{
		a[y].p=x;
	}
	else if(a[y].r>a[x].r)
	{
		a[x].p=y;
	}
	else
	{
		a[x].p=y;
		a[y].r+=1;
	}
}
void union_set(ll int x,ll int y)
{
	ll int i,j;
	i=find_set(x);
	j=find_set(y);
	if(i==j)
	{
		return;
	}
	else
	{
		link_set(i,j);
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	ll int test;
	cin>>test;
	while(test--)
	{
		ll int m;
		cin>>n>>m;
		ll int i,t1,t2,ans=0;
		for(i=0;i<m;i++)
		{
			ll int t[2];
			cin>>t[0]>>t[1]>>r[i].c;
			t[0]--;t[1]--;
			sort(t,t+2);
			r[i].x=t[0];r[i].y=t[1];
		}
		sort(r,r+m,my);
		make_set();
		for(i=0;i<m;i++)
		{
			t1=find_set(r[i].x);
			t2=find_set(r[i].y);
			if(t1==t2)
			continue;
			else
			{
				ans+=r[i].c;
				link_set(t1,t2);
				degree[r[i].x]++;
				degree[r[i].y]++;
			}
		}
		cout<<ans<<endl;
		for(i=0;i<n;i++)
		cout<<degree[i]<<" ";
		cout<<endl;
	}
	return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct pts
{
	long long int l,r;
	pts(long long int c,long long int d)
	{
		if(c<0)
		c=0;
		l=c;
		r=d;
	}
};

bool compr(pts a1,pts a2)
{
	return(a1.l<a2.l);
}
int main()
{
    //cout << "Hello World!" << endl;
    long long int n,s,e,c,d,count,ans;
    cin>>n>>s>>e;
    vector<pts> a;
    for(long long int i=0;i<n;i++)
    {
    	cin>>c>>d;
    	a.push_back(pts(c-d,c+d));
    }
    
    sort(a.begin(),a.end(),compr);
    vector<long long int> protect;
    protect.push_back(a[0].l);
    protect.push_back(a[0].r);
    count=2;
    for(long long int i=1;i<n;i++)
    {
    	if(protect[count-1]>a[i].l)
    	{
    		if(protect[count-1]<a[i].r)
    		protect[count-1]=a[i].r;
    	}
    	else
    	{
    		protect.push_back(a[i].l);
			protect.push_back(a[i].r);
			count+=2;
    	
    	}
    }
    
    // for(int i=0;i<a.size();i++)
    // {
    // 	cout<<a[i].l<<" "<<a[i].r<<" ";
    // }
    // cout<<endl;
    
    // for(int i=0;i<protect.size();i++)
    // {
    // 	cout<<protect[i]<<" ";
    // }
    // cout<<endl;
    
    long long int ints,inte;
    vector<long long int> :: iterator its,ite;
    if(s>e)
    {
    	c=s;
    	s=e;
    	e=c;
    }
    
    	its=upper_bound(protect.begin(),protect.end(),s);
    	ite=upper_bound(protect.begin(),protect.end(),e);
    	ints= (its-protect.begin());
    	inte= (ite-protect.begin());
    	//cout<<"hulala "<<ints<<" "<<inte<<endl;
    	if(ints==count)
    	{
    		ans+=protect[count-1]-s;
    		ints--;
    	}
    	else if(ints%2==0)
    	{ans+=(protect[ints]-s);
    	ints++;}
    	if(inte==count)
    	{
    		ans+=e-protect[count-1];
    		inte--;
    	}
    	else if(inte%2==0)
    	{ans-=(protect[inte]-e);
    	}
    	for(long long int i=ints;i<inte;i++)
    	{
    		ans+=(protect[i+1]-protect[i]);
			//cout<<i<<" "<<ans<<endl;    	
    		i++;
    	}
    	cout<<ans;
    
    
    
    
    
    return 0;
}

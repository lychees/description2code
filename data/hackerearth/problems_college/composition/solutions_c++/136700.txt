#include<iostream>

typedef unsigned long long word;

using namespace std;

word mod = 1000000007;

void multiply(word F[2][2], word M[2][2]);
 
void power(word F[2][2], word n);
 
/* function that returns nth Fibonacci number */
word fib(word n)
{
  word F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-1);
  return F[0][0];
}
 
/* Optimized version of power() in method 4 */
void power(word F[2][2], word n)
{
  if( n == 0 || n == 1)
      return;
  word M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2);
  multiply(F, F);
 
  if (n%2 != 0)
     multiply(F, M);
}
 
void multiply(word F[2][2], word M[2][2])
{
  word x =  (((F[0][0]*M[0][0])%mod) + ((F[0][1]*M[1][0])%mod)) % mod;
  word y =  (((F[0][0]*M[0][1])%mod) + ((F[0][1]*M[1][1])%mod)) % mod;
  word z =  (((F[1][0]*M[0][0])%mod) + ((F[1][1]*M[1][0])%mod)) % mod;
  word w =  (((F[1][0]*M[0][1])%mod) + ((F[1][1]*M[1][1])%mod)) % mod;
 
  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}
 
int main ()
{
	int t;
	cin >> t;
	while(t) {
		word n;
		cin >> n;
  		printf("%d\n", fib(n));
		t--;
	}
  return 0;
}
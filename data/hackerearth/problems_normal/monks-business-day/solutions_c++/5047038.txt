#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>   II;
typedef vector< II >      VII;
typedef vector<int>     VI;
typedef vector< VI > 	VVI;
typedef long long int 	LL;
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))
#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);
const int T = 10+1;
const int N = 100+1;
const int M = 1000+1;
const int C = 1000 + 1;
const int INF = int(2e9);
int U[M],V[M],W[M];
int dist[N];
bool ok;
int main()
{
	int t;si(t);
	assert(t<T);
	while(t--)
	{
		ok = false;
		int n,m;
		si(n);si(m);
		assert(1<=n && n<N);
		assert(1<=m && m<M);
		for(int i=0;i<m;i++)
		{
			si(U[i]);si(V[i]);si(W[i]);
			W[i]=-W[i];
			assert(1<=U[i] && U[i]<=n);
			assert(1<=V[i] && V[i]<=n);
			assert(abs(W[i])<C);
		}
		for(int i=1;i<=n;i++)
			dist[i]=INF;
		dist[1]=0;
		for(int i=1;i<=n;i++)
			for(int j=0;j<m;j++)
				if(dist[U[j]]+W[j]<dist[V[j]])
					dist[V[j]]=dist[U[j]]+W[j];
		for(int i=0;i<m;i++)
			if(dist[V[i]] < INF/2 && dist[U[i]]+W[i]<dist[V[i]])
				ok = true;
		puts(ok?"Yes":"No");
	}
	return 0;
}
#include<stdio.h>
#include<stdlib.h>
#include <iostream>
using namespace std;

	
struct pass
{
	long int s;
	long int j;
	int id;
	int ans;
};
typedef struct pass pas;

int comp(const void *a,const void *b)
{
	pas *ia= (pas *)a;
	pas *ib= (pas *)b;
	return ia->s - ib->s;
}
int comp2(const void *a,const void *b)
{
	pas *ia= (pas *)a;
	pas *ib= (pas *)b;
	return ia->id - ib->id;
}
void readdata(pas p[],int n)
{
	int i=1;
	while(i!=(n+1))
	{
		cin>>p[i].s>>p[i].j;
		p[i].ans=-1;
		p[i].id=i;
		i++;
	}

}
long int find_max(pas p[],int n)
{
	long int max=0;
	while(n)
	{
		if(max<p[n].s)
			max=p[n].s;
		n--;
	}
	return max;
}
void intitialise(long int a[],int n,int v)
{
	while(n)
	{
		a[n]=v;
		n--;
	}
}
void deduct(long int a[],int m,long int value)
{
	while(m)
	{
		a[m]-=value;
		if(a[m]<0)
			a[m]=0;
		m--;
	}

}

int main()
{
	int n,m;
	cin>>n>>m;
	long int *taxi=(long int *)malloc((m+1)*sizeof(long int));
	 

	pas *p=(pas *)malloc((n+1)*sizeof(pas));
	p[0].s=0;
	p[0].id=-1;
	readdata(p,n);
	intitialise(taxi,m,0);
	qsort(p,n+1,sizeof(pas),comp);

	long int time = p[1].s;
	int count=1;

	while(count !=(n+1))
	{
		time=p[count].s;
		deduct(taxi,m,time-p[count-1].s);
		
				for(int ej=1;ej<=m;ej++)
				{
					if(taxi[ej]==0)
					{
						p[count].ans=ej;
						taxi[ej]=p[count].j;
						break;
					}

				}

			count++;


	}
	qsort(p,n+1,sizeof(pas),comp2);
	for(int i=1;i<=n;i++)
	{
		cout<<p[i].ans<<" ";
	}
	return 0;

}
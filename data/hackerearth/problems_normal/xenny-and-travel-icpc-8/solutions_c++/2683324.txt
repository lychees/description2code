#include<bits/stdc++.h>
#define s(n) scanf("%d",&n)
#define ll long long
#define pb push_back
#define mod 1000000007
 using namespace std ;





ll modExp(ll a,ll b,ll md){
    ll ans = 1;
    while(b){
       if(b&1)
            ans = (ans*a)%md;
        a = (a*a)%md;
        b/=2;
    }
    return ans;
}

ll inverse(ll num){
   return modExp(num,mod-2,mod);
}
ll ncr(int n,int r){

  ll num = 1;
  ll den = 1;
  int i ;
  for(i=1;i<=n;++i)
    num = (num*i)%mod;
   for(i=1;i<=n-r;++i)
    den = (den*i)%mod;
    for(i=1;i<=r;++i)
    den = (den*i)%mod;

    ll ans = num*inverse(den);
    ans%=mod;
    return ans;

}
int sr,de;
int vis[1252];
int road[1252][1252],rail[1252][1252];
int dis[1252],dis1[1252],n;

struct comp{

   bool operator()(int a,int b){
      return dis[a]>dis[b];
   }
};

struct comp1{

   bool operator()(int a,int b){
      return dis1[a]>dis1[b];
   }
};

void djisktra(int root){
   priority_queue<int,vector<int>,comp>pq;
   dis[root] = 0;
   pq.push(root);
   int i;

   while(!pq.empty()){
      int po = pq.top();
      pq.pop();
      for(i=1;i<=n;++i){
         if(i==po)
            continue;
         if(dis[po]+road[po][i]<dis[i]){
            dis[i] = dis[po]+road[po][i];
            pq.push(i);
         }
      }
   }
}

void djisktra1(int root){
   priority_queue<int,vector<int>,comp1>pq;
   dis1[root] = 0;
   pq.push(root);
   int i;

   while(!pq.empty()){
      int po = pq.top();
      pq.pop();
      for(i=1;i<=n;++i){
         if(i==po)
            continue;
           if(dis1[po]+rail[i][po]<dis1[i]){
            dis1[i] = dis1[po]+rail[i][po];
            pq.push(i);
         }
      }
   }
}

void djisktra2(int root){
   priority_queue<int,vector<int>,comp>pq;
   dis[root] = 0;
   pq.push(root);
   int i;

   while(!pq.empty()){
      int po = pq.top();
      pq.pop();
      for(i=1;i<=n;++i){
         if(i==po)
            continue;
         if(dis[po]+road[i][po]<dis[i]){
            dis[i] = dis[po]+road[i][po];
            pq.push(i);
         }
      }
   }
}

void djisktra3(int root){
   priority_queue<int,vector<int>,comp1>pq;
   dis1[root] = 0;
   pq.push(root);
   int i;

   while(!pq.empty()){
      int po = pq.top();
      pq.pop();
      for(i=1;i<=n;++i){
         if(i==po)
            continue;
           if(dis1[po]+rail[po][i]<dis1[i]){
            dis1[i] = dis1[po]+rail[po][i];
            pq.push(i);
         }
      }
   }
}



int main(){

int k,t,i,j;
cin>>n;
for(i=1;i<=n;++i)
    for(j=1;j<=n;++j)
        s(road[i][j]);

for(i=1;i<=n;++i)
    for(j=1;j<=n;++j)
        s(rail[i][j]);

cin>>sr>>de;

for(i=1;i<=n;++i)
    dis[i] = dis1[i] = 2e9;

djisktra(sr);
djisktra1(de);

int ans = 1e9;
for(i=1;i<=n;++i)
    if((i!=sr) && (i!=de))
        ans = min(ans,dis[i]+dis1[i]);


	
for(i=1;i<=n;++i)
    dis[i] = dis1[i] = 2e9;

djisktra2(de);
djisktra3(sr);

for(i=1;i<=n;++i)
    if((i!=sr) && (i!=de))
        ans = min(ans,dis[i]+dis1[i]);

cout<<ans<<endl;
return 0;
}

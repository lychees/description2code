/*~~~~~~~~~~~~~~~~~~*
*                  *
* $Dollar Akshay$  *
*                  *
*~~~~~~~~~~~~~~~~~~*/

//https://www.hackerearth.com/entwicklers-codician/algorithm/relief-operation/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <time.h>
#include <assert.h>
#include <algorithm>
#include <iostream>
#include <queue>
#include <stack>
#include <vector>

using namespace std;

#define sp system("pause")
#define FOR(i,a,b) for(int i=a;i<=b;++i)
#define FORD(i,a,b) for(int i=a;i>=b;--i)
#define REP(i,n) FOR(i,0,(int)n-1)
#define MS0(x) memset(x,0,sizeof(x))
#define MS1(x) memset(x,1,sizeof(x))
#define SORT(a,n) sort(begin(a),begin(a)+n)
#define REV(a,n) reverse(begin(a),begin(a)+n)
#define ll long long
#define MOD 1000000007
#define gc getchar_unlocked
struct Edge{ int v, w; };

int dp[2001][2001];

int p[2001], w[2001];

void knapsack(int n, int t){

	FOR(i, 0, t){
		dp[0][i] = 0;
		dp[i][0] = 0;
	}
	FOR(i, 1, n){
		FOR(j, 0, t){
			if (w[i]>j)
				dp[i][j] = dp[i - 1][j];
			else
				dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i]] + p[i]);
		}
	}
}

int main(){

	int gg, n, t;
	scanf("%d", &gg);
	REP(tc, gg){
		scanf("%d%d", &n, &t);
		FOR(i, 1, n) scanf("%d", &w[i]);
		FOR(i, 1, n) scanf("%d", &p[i]);
		knapsack(n, t);
		printf("%d\n", dp[n][t]);
	}
	return 0;
}

//
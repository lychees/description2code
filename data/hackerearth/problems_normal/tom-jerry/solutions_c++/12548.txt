#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define vi vector<int>
#define vii vector< vector<int> >
#define vs vector<string>
#define ii pair<int,int>
#define i64 long long
#define pb push_back
#define FOR(i,j,k) for(int i = (j) ; i <= (k) ; i++ )
#define FORN(i,j,k) for(int i = (j) ; i >= (k) ;i--)
#define FORI(xx,x,it) for(xx::iterator it = x.begin() ; it != x.end() ; it++)
#define FORNI(xx,x,it) for(xx::reverse_iterator it = x.rbegin() ; it != x.rend() ; it++)
#define si size()
#define all(a) (a.begin(),a.end())
#define allr(a) (a.rbegin(),a.rend())
#define MAX 110
#define INF 2140000000
#define MOD 1000000007

i64 dp[MAX][MAX];
i64 grid[MAX][MAX];
i64 flag[MAX][MAX] = {0};
int n;

i64 calc(int i,int j) {
	if(i == 0 && j == 0) {
		return 1;
	}

	if(i < 0 || j < 0 || i >= n || j >= n) {
		return 0;
	}

	if(grid[i][j] || flag[i][j]) {
		return 0;
	}

	flag[i][j] = 1;
	dp[i][j] = calc(i-1,j) + calc(i,j-1) + calc(i,j+1) + calc(i+1,j);
	flag[i][j] = 0;
	
	return dp[i][j];
}

int main() {	

	cin >> n;

	FOR(i,0,n-1) {
		FOR(j,0,n-1) {
			cin >> grid[i][j];
		}
	}

	memset(dp,-1,sizeof(dp));
	
	cout << calc(n-1,n-1) << endl;

	return 0;
}

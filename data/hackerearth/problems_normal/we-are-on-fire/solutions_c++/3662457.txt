
/* Trico ------------------------> NIT Silchar

“All power is within you; you can do anything and everything.
Believe in that, do not believe that you are weak; do not believe that you are half-crazy lunatics,
as most of us do nowadays. You can do any thing and everything, without even the guidance
of any one. Stand up and express the divinity within you.”

 */
#include<bits/stdc++.h>
#define ll long long
#define pll pair<ll,ll>
#define vl vector<ll>
#define mod 1000000007
#define fori(z,n) for(int i=z;i<n;i++)
#define forj(z,n) for(int j=z;j<n;j++)
#define fork(z,n) for(int k=z;k<n;k++)
#define db(x) cout << (#x) << " = " << x << endl;
#define trico() int t;cin>>t ; while(t--)
#define CHECK_BIT(var,pos) ((var) & (1<<(pos)))
#define p_iter vector<pll>::iterator
#define l_iter vector<ll>::iterator
#define forstl(m) for(it=m.begin();it!=m.end();it++)
#define bitcnt(x) __builtin_popcountll(x)
const int nax = 1e6 + 5;
const int lax = 1e5 + 5;
const int pax = 2e5 + 5;
const int inf = 1e9 + 5;
#define sl(n) scanf("%I64d",&n)
#define pl(n) printf("%I64d",n)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
using namespace std;
static struct IO {
	char tmp[1 << 10];

	// fast input routines
	char cur;

//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }

	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }

	inline IO& operator >> (char & c) { c = nextChar(); return *this; }

	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }

	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }

	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}

#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}

defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)

	// fast output routines

//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }

	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }

	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }


#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }

defineOutFor(int)
defineOutFor(long long)

#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
static int u=0;
void f_case(){u++;cout<<"Case "<<u<<": ";}
//ll modPow(ll a,ll b,ll MOD) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
//ll modInverse(ll a){return modPow(a,MOD-2);}
int arr[1005][1005];
vector<int> v[nax];
int tmp=0;
bool visited[nax];

int dfs(int src)
{

    visited[src]=true;
    tmp++;
   // db(src)
    for(int i:v[src])
    {
        if(!visited[i])
            dfs(i);
    }
}

int main()
{
 //freopen("input.in", "r", stdin);
 int n,m,q,a,b;
 int cnt=0;
 cin>>n>>m>>q;
 fori(0,n)
 {
   forj(0,m)
 cin>>arr[i][j];
 }

 fori(0,n)
 {

     forj(0,m)
     {

         if(arr[i][j]==1)
         {
             cnt++;
             if(i-1>=0 && arr[i-1][j]==1)
                v[(i*m+j)].push_back((i-1)*m+j);
             if(i+1<n && arr[i+1][j]==1 )
              v[(i*m+j)].push_back((i+1)*m+j);
             if(j-1>=0 && arr[i][j-1]==1)
                v[(i*m+j)].push_back((i)*m+(j-1));
             if(j+1<m && arr[i][j+1]==1 )
              v[(i*m+j)].push_back((i)*m+(j+1));

              visited[(i*m+j)]=false;

         }
         else
            visited[(i*m+j)]=true;
     }
 }



 while(q--)
 {
     tmp=0;
    cin>>a>>b;
    a--;
    b--;
   // cout<<"helo";
    int k=a*m+b;
    if(visited[k])
        cout<<cnt<<"\n";
    else
    {
        dfs(k);
        cnt-=tmp;
        cout<<cnt<<"\n";
    }

 }



}


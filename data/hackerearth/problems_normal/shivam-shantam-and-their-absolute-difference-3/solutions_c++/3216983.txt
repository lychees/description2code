#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <fstream>
#include <cstring>
#include <string>
#include <cmath>
#include <queue>
#include <set>
#include <sstream>
#include <map>
#define INF 1000000002

int scan()
{ int noRead=0;
    char p= getchar();
    for(;p<33;)
    { p=getchar(); }
    while(p>32)
        {
            noRead = (noRead << 3) + (noRead << 1) + (p - '0');
            p=getchar();
        }
    return noRead;
}

long long int lscan()
{ long long int noRead=0;
    char p= getchar();
    for(;p<33;)
    { p=getchar(); }
    while(p>32)
        {
            noRead = (noRead << 3) + (noRead << 1) + (p - '0');
            p=getchar();
        }
    return noRead;
}

using namespace std;

long long int dp1[400010];
long long int dp2[400010];
long long int a[201];
long long int b[201];
long long int mod = 1e9+7;

int main(void){

    int n;
    cin>>n;

    memset(dp1, 0, sizeof(dp1));
    memset(dp2, 0, sizeof(dp2));

    long long int sum1 = 0, sum2 = 0;

    for(int i = 0; i < n; ++i) {
        cin>>a[i];
        sum1 += a[i];
    }
    for(int i = 0; i < n; ++i) {
        cin>>b[i];
        sum2 += b[i];
    }
    long long int k;
    cin>>k;

    long long int sum = sum1;
    dp1[0] = 1;
    long long int curr = 0;
    for(int i = 0; i < n; ++i) {
        curr += a[i];
        for(long long int j = min(sum, curr); j >= a[i]; --j) {
            dp1[j] = (dp1[j] + dp1[j-a[i]])%mod;
        }
    }


    sum = sum2;
    dp2[0] = 1;
    curr = 0;
    for(int i = 0; i < n; ++i) {
        curr += b[i];
        for(long long int j = min(sum, curr); j >= b[i]; --j) {
            dp2[j] = (dp2[j] + dp2[j-b[i]])%mod;
        }
    }

//    cout<<"one\n";
//    for(int i = 1; i <= sum1; ++i)
//        cout<<i<<" "<<dp1[i]<<endl;
//    cout<<"two\n";
//    for(int i = 1; i <= sum2; ++i)
//        cout<<i<<" "<<dp2[i]<<endl;

    for(int i = 1; i <= sum2; ++i)
        dp2[i] = (dp2[i] + dp2[i-1])%mod;

    long long int ans = 0;
    for(int i = 0; i <= sum1; ++i) {
        long long int req = (dp1[i] * (dp2[min(sum2, i+k)] - (i-k-1 >= 0 ? dp2[max(0ll, i-k-1)] : 0) +mod)%mod)%mod;
        ans = (ans + req)%mod;
        //cout<<i<<" "<<dp1[i]<<" second "<<(dp2[min(sum2, i+k)] - (i-k-1 >= 0 ? dp2[max(0ll, i-k-1)] : 0))<<endl;
        //cout<<"sum1 "<<i<<" : dp1[i] "<<" sum2 range "<<min(sum2, i+k)<<" to "<<max(0ll, i-k-1)<<" "<<dp2[<<" req is "<<req<<endl;
    }

    cout<<ans;

    return 0;

}


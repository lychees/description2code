#include<iostream>
#include<string.h>

using namespace std;

int V;
int graph[200][200];

bool isSafe(int color[],int c,int v){

for(int i=0;i<V;i++){
    if(graph[v][i]==1 && c==color[i]){
        return false;
    }
}
return true;
}

bool graphColoringUtil(int m,int color[],int v){

if(v==V)
    return true;
for(int c=1;c<=m;c++){
    if(isSafe(color,c,v)){
        color[v] = c;
        if(graphColoringUtil(m,color,v+1)==true)
            return true;

        color[v] = 0;

    }
}
return false;
}

bool graphColoring(int m){

    int *color = new int[V];
    for(int i=0;i<V;i++){
        color[i] = 0;
    }
    if(graphColoringUtil(m,color,0)==true){
       cout<<"BICOLORABLE."<<endl;
    }
    else
        cout<<"NOT BICOLORABLE."<<endl;

}



int main(){

    int t,E,e1,e2;
    cin >> t;
    int m=2;
    while(t--){
        cin>>V;
        //if(V == 0)  break;
        cin >> E;
        memset(graph,0,sizeof(graph));
        for(int i=0;i<E;i++){
            cin>>e1>>e2;
            graph[e1][e2] = graph[e2][e1] = 1;
        }
        graphColoring(m);
    }
return 0;
}


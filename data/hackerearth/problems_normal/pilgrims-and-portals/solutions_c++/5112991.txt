#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define M 100000000000000
ll arr[101][101];
vector<pair<ll,ll> > v[105];
bool visited[105];
typedef pair<ll,ll> PII;
ll prim(ll x)
{
    priority_queue<PII,vector<PII>,greater<PII> > Q;
    ll y;
    ll minCost=0;
    PII P;
    Q.push(make_pair(0,x));
    while(!Q.empty())
    {
        P=Q.top();
        Q.pop();
        x=P.second;
        if(visited[x]==true)
            continue;
        minCost+=P.first;
        visited[x]=true;
        for(ll i=0;i<v[x].size();i++)
        {
            y=v[x][i].second;
            if(visited[y]==false)
            {
                Q.push(v[x][i]);
            }
        }
    }
    return minCost;
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        ll n,m,k,a,b,c;
        scanf("%lld%lld%lld",&n,&m,&k);
        for(ll i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
            if(i==j)
                arr[i][j]=0;
            else
                arr[i][j]=M;
            }
        }
        for(ll i=0;i<m;i++)
        {
            scanf("%lld%lld%lld",&a,&b,&c);
            arr[a][b]=c;
            arr[b][a]=c;
        }
        for(ll k=1;k<=n;k++)
        {
            for(ll i=1;i<=n;i++)
            {
                for(ll j=1;j<=n;j++)
                {
                    if(arr[i][k]!=M&&arr[k][j]!=M)
                        arr[i][j]=min(arr[i][j],arr[i][k]+arr[k][j]);
                }
            }
        }

        for(ll i=0;i<=k;i++)
            {
                v[i].clear();
                visited[i]=false;
            }
        for(ll i=1;i<=k;i++)
        {
            for(ll j=1;j<=k;j++)
            {
                if(i==j)
                    continue;
                else
                {
                    v[i].push_back(make_pair(arr[i][j],j));
                }
            }
        }
        ll ans=prim(1);
        printf("%lld\n",ans);
    }
    return 0;
}

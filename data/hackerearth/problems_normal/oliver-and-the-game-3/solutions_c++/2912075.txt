#include <bits/stdc++.h>
std::vector<int> gr[100005];
int visit[100005],in[100005],out[100005];
int n,q,cnt;
void dfs(int x);
bool subtree(int x,int y);
int main(int argc, char const *argv[]) {
  int i,j,k;
  scanf("%d",&n);
  for(i=0;i<n-1;i++)
  {
    scanf("%d%d",&j,&k);
    gr[k].push_back(j);
    gr[j].push_back(k);
  }
  cnt=0;
  dfs(1);
  scanf("%d",&q);
  int dec;
  while(q--)
  {
    scanf("%d%d%d",&dec,&j,&k);
    if(dec==0)
    {
      if(subtree(j,k))
        printf("YES\n");
      else
        printf("NO\n");
    }
    else
    {
      if(subtree(k,j))
        printf("YES\n");
      else
        printf("NO\n");
    }
  }
  /*for(i=1;i<=n;i++)
  {
    for(j=0;j<gr0[i].size();j++)
      printf("%d ",gr0[i][j]);
    printf("\n");
  }*/
  return 0;
}


void dfs(int x)
{
  int i,j,k;
  cnt++;
  in[x]=cnt;
  visit[x]=1;
  for(i=0;i<gr[x].size();i++)
  {
    if(!visit[gr[x][i]])
      dfs(gr[x][i]);
  }
  cnt++;
  out[x]=cnt;
}

bool subtree(int x,int y)
{
  if(in[x]<in[y] && out[x]>out[y])
    return true;
  return false;
}

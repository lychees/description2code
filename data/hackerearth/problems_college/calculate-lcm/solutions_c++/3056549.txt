//Author : pakhandi
//
using namespace std;

#include<bits/stdc++.h>

#define wl(n) while(n--)
#define fl(i,a,b) for(i=a; i<b; i++)
#define rev(i,a,b) for(i=a; i>=b; i--)

#define si(n) scanf("%d", &n)
#define sll(l) scanf("%lld",&l)
#define ss(s) scanf("%s", s)
#define sc(c) scanf("%c", &c)
#define sd(f) scanf("%lf", &f)

#define pi(n) printf("%d\n", n)
#define pll(l) printf("%lld\n", l)
#define ps(s) printf("%s\n", s)
#define pc(c) printf("%c\n", c)
#define pd(f) printf("%lf\n", f)

#define debug(x) cout<<"\n#("<<x<<")#\n"
#define nline printf("\n")

#define mem(a,i) memset(a,i,sizeof(a))

//#define MOD 1073741824
#define ll long long int
#define u64 unsigned long long int

#define mclr(strn) strn.clear()
#define ignr cin.ignore()
#define PB push_back
#define SZ size
#define MP make_pair
#define fi first
#define sec second

const int MOD=(1<<30)-1;

//------------------------------------<BEGIN> SIEVE SNIPPET --------------------------

int is_prime[4000006];
int primes[4000006];
int ind = 0;
int tk[4000006], ntk[4000006];

void sieve()
{
	int i, j;
	fl(i,2,4000001)
	{
		if (!is_prime[i])
			primes[ind++]=i;
		for (int j=0;j<ind && i*primes[j]<=4000000;j++)
        {
            is_prime[i*primes[j]]=primes[j];
            if(!(i%primes[j])) 
            	break;
        }
	}
    return;
}

//------------------------------------<END> SIEVE SNIPPET --------------------------


int main()
{
	int i, j;
	int k, x;

	sieve();

	//fl(i,1,10)
	//cout<<is_prime[i]<<" ";

	tk[1] = 1;

	fl(i,2,4000001)
	{
		if(!is_prime[i])
			tk[i] = 1-i;
		else if(!ntk[i])
		{
			j = is_prime[i];
			k = i/j;
			x = k/j;

			if(x*j!=k)
				tk[i] = tk[k]*(1-j);
			else if(x%j)
				tk[i] = -1*tk[x]*j;
		}
	}

	fl(i,1,4000001)
		tk[i] = tk[i-1]+tk[i]*i;

	//fl(i,1,10)
	//	cout<<tk[i]<<" ";

	int cases;

	cin>>cases;

	wl(cases)
	{
		int a, b;
		cin>>a>>b;

		int ans = 0;

		if(a>b)
			swap(a,b);

		for(i=1; i<=a; i=j+1)
		{
		//	cout<<"h";
			int t1 = a/i;
			int t2 = b/i;
		//	cout<<t1<<" "<<t2;nline;
			j = min(a/t1,b/t2);
			ll v1 = (1LL*t1*(t1+1)/2)&MOD;
			ll v2 = (1LL*t2*(t2+1)/2)&MOD;
		//	cout<<v1<<" "<<v2;nline;
			ans += (((v1*v2)&MOD)*(tk[j]-tk[i-1]+MOD+1))&MOD;
			ans&=MOD;
		}

		cout<<ans;nline;

	}

	return 0;
}

/*
	Powered by Buggy plugin
*/
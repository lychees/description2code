#include<bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define MP make_pair
#define PB push_back
#define SZ(a) (int)(a.size())
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define LET(it,container) __typeof(container.begin()) it(container.begin())
#define ITER(it,container) for(__typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define PREC cout << setprecision(10) << fixed;
#define FI ios_base::sync_with_stdio(0); cin.tie(NULL);
#define DB(x) cerr << #x << ": " << x << " ";
#define BS(vec,val) (int)(lower_bound(vec.begin(),vec.end(),val) - vec.begin())
#define bitcount __builtin_popcountll
#define LL long long
const int MOD = 1e9 + 7;
const int INF = 1e9 + 9;
const int MX = 1e5 + 5;

#define N 2000005
 
int str[N]; //input
int rankq[N],rank2[N];
long long int a1[N];
int pos[N]; //output
int cnt[N], nextq[N]; //internal
bool bh[N], b2h[N];
 
 
// Sufix array construction 
bool smaller_first_char(int a, int b)
{
	return str[a] < str[b];
}
 
void SuffixSort(int n)
{
	//sort suffixes according to their first character
	for (int i=0; i<n; ++i){
		pos[i] = i;
	}
	sort(pos, pos + n, smaller_first_char);
	//{pos contains the list of suffixes sorted by their first character}
 
	for (int i=0; i<n; ++i){
		bh[i] = i == 0 || str[pos[i]] != str[pos[i-1]];
		b2h[i] = false;
	}
 
	for (int h = 1; h < n; h <<= 1){
		//{bh[i] == false if the first h characters of pos[i-1] == the first h characters of pos[i]}
		int buckets = 0;
		for (int i=0, j; i < n; i = j){
			j = i + 1;
			while (j < n && !bh[j]) j++;
			nextq[i] = j;
			buckets++;
		}
		if (buckets == n) break; // We are done! Lucky bastards!
		//{suffixes are separted in buckets containing strings starting with the same h characters}
 
		for (int i = 0; i < n; i = nextq[i]){
			cnt[i] = 0;
			for (int j = i; j < nextq[i]; ++j){
				rankq[pos[j]] = i;
			}
		}
 
		cnt[rankq[n - h]]++;
		b2h[rankq[n - h]] = true;
		for (int i = 0; i < n; i = nextq[i]){
			for (int j = i; j < nextq[i]; ++j){
				int s = pos[j] - h;
				if (s >= 0){
					int head = rankq[s];
					rankq[s] = head + cnt[head]++;
					b2h[rankq[s]] = true;
				}
			}
			for (int j = i; j < nextq[i]; ++j){
				int s = pos[j] - h;
				if (s >= 0 && b2h[rankq[s]]){
					for (int k = rankq[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
				}
			}
		}
		for (int i=0; i<n; ++i){
			pos[rankq[i]] = i;
			bh[i] |= b2h[i];
		}
	}
	for (int i=0; i<n; ++i){
		rankq[pos[i]] = i;
	}
}
// End of suffix array algorithm
 
 
// LPA
int height[N];
// height[i] = length of the longest common prefix of suffix pos[i] and suffix pos[i-1]
// height[0] = 0
void getHeight(int n){
	for (int i=0; i<n; ++i) rankq[pos[i]] = i;
	height[0] = 0;
	for (int i=0, h=0; i<n; ++i){
		if (rankq[i] > 0){
			int j = pos[rankq[i]-1];
			while (i + h < n && j + h < n && str[i+h] == str[j+h]) h++;
			height[rankq[i]] = h;
			if (h > 0) h--;
		}
	}
}
// End of LPA


vector<int> ans;

int main()
{
	int n;
	string s;
	cin >> n >> s;
	s = s + s;
	int l=s.size();
	for(int i=0;i<l;i++)
		str[i]=s[i];
	SuffixSort(l);
	for(int i=0;i<l;i++)
		rank2[rankq[i]] = i;
	getHeight(l);

	int mi = INF;
	for(int i=0;i<l;i++)
	{
		if(rank2[i] < l/2)
		{
			if(rank2[i] < mi)
			{
				ans.PB(rank2[i]);
				mi = rank2[i];	
			}	
		}
	}
	reverse(ans.begin(),ans.end());

	int q;
	scanf("%d",&q);
	int k;
	while(q--)
	{	
		scanf("%d",&k);
		int id = BS(ans,k);
		if(id == ans.size())
		{
			printf("%d\n",ans[id-1]);
		}
		else
		{
			if(ans[id] == k)
				printf("%d\n",ans[id]);
			else
				printf("%d\n",ans[id-1]);
		}
	}
	
	return 0;
}

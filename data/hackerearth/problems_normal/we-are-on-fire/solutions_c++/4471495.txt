//
//  main.cpp
//  WeAreOnFireHE
//
//  Created by Shashank Shekhar on 20/07/16.
//  Copyright Â© 2016 Shashank Shekhar. All rights reserved.
//

#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <unordered_map>
#include <map>
#include <set>
#include <queue>
#include <cstring>
#define minInt INT_MIN
#define maxInt INT_MAX
#define umaxInt UINT_MAX
#define llminInt LLONG_MIN
#define llmaxInt LLONG_MAX
#define MOD 1000000007
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define fr(i,a,N) for (int i =a;i<N;i++)
#define fre(i,a,N) for (int i =a;i<=N;i++)
#define lli long long int
#define ui unsigned int
#define vi vector<int>
#define vpii vector<pair<int,int>>
using namespace std;


bool adj[1002][1002];
bool vis[1002][1002] = {false};
int N,M;
int ar1[] = {0,0,1,-1};
int ar2[] = {1,-1,0,0};
int recurse(int i,int j) {
    if (i<1 || i>N  || j<1 || j>M) return 0;
    if (vis[i][j] || adj[i][j]==0) return 0;
    vis[i][j]= true;
    return 1+ recurse(i,j+1) + recurse(i,j-1)+ recurse (i+1,j) + recurse (i-1,j);
}
bool check(int i,int j) {
    if (i<1 || i>N  || j<1 || j>M) return 0;
    if (vis[i][j] || adj[i][j]==0) return 0;
    return true;
}
int bfs (int i,int j) {
    if (i<1 || i>N  || j<1 || j>M) return 0;
    if (vis[i][j] || adj[i][j]==0) return 0;
    int cnt=0;
    queue<pair<int,int>>q;
    q.push(mp(i,j));
    vis[i][j] = true;
    cnt++;
    while (!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        fr(k,0,4) {
            if (check(x+ar1[k],y+ar2[k])) {
                q.push(mp(x+ar1[k],y+ar2[k]));cnt++;
                vis[x+ar1[k]][y+ar2[k]] = true;
            }
        }
    }
    return cnt;
}
int main(int argc, const char * argv[]) {
    // insert code here...
    int q,a,b,nat;
    ios_base::sync_with_stdio(false);cin.tie(0);
    cout.tie(0);
    fre(i,0,1001)
    fre(j,0,1001)
    adj[i][j] = vis[i][j]= false;
    
    cin >>N>>M>>q;
    nat = 0;
    fre(i,1,N)
    fre(j,1,M) {
    cin >>adj[i][j];
        if (adj[i][j]) nat++;
    }
    
    for(;q>0;--q) {
        cin >>a>>b;
        int ta = recurse (a,b);
        nat-=ta;
        cout << nat<<"\n";
    }
    return 0;
}

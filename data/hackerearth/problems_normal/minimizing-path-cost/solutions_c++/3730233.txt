#include <iostream>
#include <string>
using namespace std;

#define N 1002
#define INT_MAX 999999
int graph[N][N];
int shortet[N][N];
string station[N];


int find_index(string stn, int V)
{	
	for(int i=0;i<V;i++)
	{
		if(station[i] == stn)
			return i;
	}
}

int main()
{
	//freopen("input.txt","r",stdin);	
	int T=1;	
	for(int test_case=1; test_case<=T; test_case++)
	{
		for(int i=0;i<N;i++)
		{
			for(int j=0;j<N;j++)
			{
				graph[i][j] = INT_MAX;
				shortet[i][j] = 0;	
				if(i==j)
					graph[i][j] = 0;
			}
		}		

		int V, E;
		cin >> V;
		cin >> E;

		
		for(int i=0;i<V;i++)
		{	
			string S;
			cin >> S;
			station[i] = S;
		}	

		for(int i=0;i<E;i++)
		{
			string firststn, secondstn;
			int cost;
			cin >> firststn;
			cin >> secondstn;
			cin >> cost;
			graph[find_index(firststn,V)][find_index(secondstn,V)] = cost;
			graph[find_index(secondstn,V)][find_index(firststn,V)] = cost;
		}

		for(int k=0;k<V;k++)
		{			
			for(int i=0;i<V;i++)
			{
				for(int j=0;j<V;j++)
				{
					if( (graph[i][k]+graph[k][j])<graph[i][j])
					{
						graph[i][j] = graph[i][k]+graph[k][j];
					}
				}				
			}
		}


		int query;
		cin >> query;
		for(int i=0;i<query;i++)
		{
			string srcstn, deststn;
			cin >> srcstn;
			cin >> deststn;

			int index_srcstn = find_index(srcstn,V);
			int index_deststn = find_index(deststn,V);
			cout << graph[index_srcstn][index_deststn] << endl;
		}
	}

	return 0;
}
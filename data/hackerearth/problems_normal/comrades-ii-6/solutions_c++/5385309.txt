#include <bits/stdc++.h>
using namespace std;

struct TreeNode{
	list<TreeNode*> cc;
	int data;
	TreeNode(int i) : data(i) {};
};

long long fistBumps(TreeNode *node){
	long long res=0;
	int x=0;
	stack<TreeNode*> parents;
	stack<TreeNode*> children;
	long long level=0;
	parents.push(node);
	while(!parents.empty()){
		list<TreeNode*> c=parents.top()->cc;
		for(list<TreeNode*>::iterator it=c.begin(); it != c.end(); ++it){
			if((*it)) children.push(*it);
		}
		parents.pop();
		if(parents.empty()){
			level++;
			while(!children.empty()){
				parents.push(children.top());
				children.pop();
				res=res+level;
			}
			// cout<<"count="<<count<<endl;
		}
	}
	// cout<<"x="<<x<<endl;
	return res;
}

int main()
{
    int t;
    cin>>t;
    while(t>0){
    	long long n; cin>>n;
    	vector<TreeNode*> nodes(n);
    	for(int i=0;i<n;i++){
    		TreeNode *nn=new TreeNode(i+1);
    		nodes[i]=nn;
    	}
    	TreeNode *root=nodes[0];
    	for(int i=0;i<n;i++){
    		int x;
    		cin>>x;
    		if(x==0) {
    			root=nodes[i];
    			continue;
    		}
    		// if(x==34) cout<<"x=34 when i+1="<<i+1<<". ";
    		nodes[x-1]->cc.push_back(nodes[i]);
    	}
    	long long fist=fistBumps(root);
    	long long total= (n*(n-1))/2;
    	cout<<fist<<" "<<total-fist<<endl;
    	t--;
    }
    return 0;
}

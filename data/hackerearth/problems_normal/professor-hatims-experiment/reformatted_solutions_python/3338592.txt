# Main logic: treat the input as an undirected graph
# and check if that graph is bipartite.

def _dfs(graph, root, colors, color):
    """ try to color the graph with 2 colors """
    if colors[root] is not None:
        return colors[root] == color

    colors[root] = color
    result = True
    for adj in graph[root]:
        result = result and _dfs(graph, adj, colors, not color)
    return result


def dfs(graph, root, colors):
    if colors[root] is None:
        return _dfs(graph, root, colors, False)
    else:
        return _dfs(graph, root, colors, colors[root])


for _ in range(int(raw_input())):
    n, m = map(int, raw_input().split())
    graph = {i+1: [] for i in range(n)}
    for _ in range(m):
        x, y = map(int, raw_input().split())
        graph[x].append(y)
        graph[y].append(x)

    # Input obtained, check the coloring
    colors = {k: None for k in graph}
    res = True
    for k in sorted(graph):
        res = res and dfs(graph, k, colors)
    print(["Suspicious lizards found!", "No suspicious lizards found!"][res])

#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define F(i,a,b) for(int i = (int)(a); i <= (int)(b); i++)
#define RF(i,a,b) for(int i = (int)(a); i >= (int)(b); i--)
#define MAX 20
double memo[1<<16];
double dist[MAX][MAX];
int N;
double maximum_matching(int bit_mask)
{
    if(memo[bit_mask] > -0.5)
        return memo[bit_mask];
    if(bit_mask == (1<<2*N) - 1)
        return memo[bit_mask] = 0;

    double matching_value = 32767*32767;
    F(p1,0,2*N-1)
    {
        if(!(bit_mask & (1<<p1)))
        {
            F(p2,p1+1,2*N-1)
            {
                if(!(bit_mask & (1<<p2)))
                    matching_value = min(matching_value, dist[p1][p2] + maximum_matching(bit_mask | (1<<p1) | (1<<p2)));
            }
            break;
        }
    }
    return memo[bit_mask] = matching_value;
}
int main()
{
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int T;
    scanf("%d",&T);
    while(T--)
    {
        scanf("%d",&N);
        int X[2*N],Y[2*N];
        F(i,0,2*N-1) scanf("%d%d",&X[i],&Y[i]);
        F(i,0,2*N-1)
        {
            F(j,0,2*N-1)
            {
                dist[i][j] = sqrt((double)(X[i] - X[j])*(X[i]-X[j]) + (Y[i] - Y[j])*(Y[i] - Y[j]));
            }
        }
        memset(memo, -1, sizeof(memo));
        printf("%0.2lf\n", maximum_matching(0));
    }
    return 0;
}


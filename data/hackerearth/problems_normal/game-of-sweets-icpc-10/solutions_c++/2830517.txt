#include<vector>
#include<cstring>
#include<algorithm>
#include<stdio.h>
#include<climits>
#include<set>
#include<fstream>
#include<cmath>
#include<bitset>
#include<map>
#include<stack>
#include<fstream>
#include<iostream>
#include<queue>
#include<assert.h>
#define test(t) while(t--)
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)

#define p(n) printf("%lld\n",n)
#define rep(i,a,n) for(i=a;i<=n;i++)
#define vi vector<int>
#define vii vector< vector<int> >
#define vpii vector< pair<int,int> >
#define mii map<int,int>

#define pb push_back
#define inf 1000000000LL
#define mp make_pair

#define N2 524288
#define M 200002
#define LN 20
#define ll long long
#define EPS 1e-10
#define PI 3.141592653589793238462
#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
//#define inf 100000000
ll mod = 1e9 + 7;


using namespace std;

typedef struct struct_point{double x,y;}pnt;
pnt pntPlus(pnt a,pnt b){a.x+=b.x; a.y+=b.y; return a;}
pnt pntMinus(pnt a,pnt b){a.x-=b.x; a.y-=b.y; return a;}
pnt pntMultiple(pnt a,pnt b){pnt c; c.x=a.x*b.x-a.y*b.y; c.y=a.x*b.y+a.y*b.x; return c;}
pnt pntMultipleDouble(pnt a,double k){a.x*=k; a.y*=k; return a;}

pnt pntPolar(double r,double t){pnt a; a.x=r*cos(t); a.y=r*sin(t); return a;}
pnt pntGenerator(double x,double y){pnt res; res.x=x; res.y=y; return res;}


void fft(int n, double theta, pnt a[]){
  int i, j, k, m, mh;
  pnt w, x;

  for(m=n; m>=2; m/=2){
    mh = m / 2;
    rep(i,mh){
      w = pntPolar(1, i*theta);
      for(j=i; j<n; j+=m){
        k = j+mh;
        x = pntMinus(a[j], a[k]);
        a[j] = pntPlus(a[j], a[k]);
        a[k] = pntMultiple(w, x);
      }
    }
    theta *= 2;
  }

  i = 0;
  REP(j,1,n-1){
    for(k=n/2; k > (i ^= k); k/=2);
    if(j < i) w=a[i], a[i]=a[j], a[j]=w;
  }
}

pnt p1[N2];
pnt p2[N2];

int main(){

   int n,i,ele;
   int fre[100001];
   memset(fre,0,sizeof(fre));
   double invN2 = 1.0 / N2;
   for(i=0;i<N2;++i)
    p1[i] = p2[i] = pntGenerator(0, 0);
   cin>>n;
   for(i=0;i<n;++i){
     s(ele);
     p1[ele].x++;
     p2[200001-ele].x++;
   }





   fft(N2, 2*PI*invN2, p1);
      fft(N2, 2*PI*invN2, p2);
      rep(i,N2) p1[i] = pntMultiple(p1[i], p2[i]);
      fft(N2,-2*PI*invN2, p1);
      rep(i,N2) p1[i].x *= invN2;

      int ans = 0;
    for(i=200002;i<=300001;++i){
       int x = (int)(p1[i].x+0.5);
       if(x>0){
           //cout<<x<<" "<<i<<endl;
            ans++;
        }
    }

    int xx = (int)(p1[200001].x+0.5);
    //cout<<xx<<endl;
    if(xx-n>0)
        ans++;
    cout<<ans<<endl;
}

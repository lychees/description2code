#include <bits/stdc++.h>
 
using namespace std;
 
typedef long long ll;
typedef vector < long long > vll;
typedef pair < long long, long long > pll;
typedef pair < int, int > pii;
typedef vector < int > vii;
 
#define rep(i,n) for(int i = 0; i < n; i++)
#define reps(i,a,n) for(int i = a; i < n; i++)
#define s(n) cin >> n
#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define rsz(x,n) x.clear(); x.resize(n)
#define rrsz(x,a,n) x.clear(); x.resize(n,a)
#define wt while(true)
#define all(x) x.begin(),x.end()
#define pb push_back
#define ls(x) ((2*(x)) + 1)
#define rs(x) ((ls(x)) + 1)
#define md(a,b) (((a) + (b))/2)
#define INF (1e9 + 7)

#define mod 1000000007
void multiply(ll F[2][2], ll M[2][2])
{
  ll x =  (F[0][0]*M[0][0])%mod + (F[0][1]*M[1][0])%mod;
  ll y =  (F[0][0]*M[0][1])%mod + (F[0][1]*M[1][1])%mod;
  ll z =  (F[1][0]*M[0][0])%mod + (F[1][1]*M[1][0])%mod;
  ll w =  (F[1][0]*M[0][1])%mod + (F[1][1]*M[1][1])%mod;
 
  F[0][0] = x%mod;
  F[0][1] = y%mod;
  F[1][0] = z%mod;
  F[1][1] = w%mod;
}
 
 /* Optimized version of power() in method 4 */
void power(ll F[2][2], ll n)
{
  if( n == 0 || n == 1)
      return;
  ll M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2);
  multiply(F, F);
 
  if (n%2 != 0)
     multiply(F, M);
}
 
ll fib(ll n)
{
  ll F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  if(n==1 || n==2)
    return 1;
  power(F, n-1);
  return F[0][0];
}
 

int T,N;

int main(){
  csl;
  cin>>T;
  while(T--){
    cin>>N;
    cout<<fib(N)<<endl;
  }
}
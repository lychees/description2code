/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <complex>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FF(i,a,n) for(i=(a);i<(n);++i)
#define REP(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define MAX(a,b) ((a)>(b)?(a):(b))
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
#endif
}

/* Input opener ends */

vector<int> primes;
int total = 0;

void pre_pre() {
    F(i,2,104) {
        bool isprime = 1;
        int x = 2;
        while ( x*x <= i ) {
            if ( i%x == 0 ) {
                isprime = 0;
                break;
            }
            ++x;
        }
        if ( isprime ) primes.pb(i);
    }
    total = primes.size();
}

ill pow(ill a, ill b, ill mod) {
    ill x = 1, y = a;
    while ( b > 0 ) {
        if ( b%2 == 1 ) {
            x = x*y;
            if ( x >= mod )
                x %= mod;
        }
        y = y*y;
        if ( y >= mod )
            y%=mod;
        b /= 2;
    } return x;
}

ill modInverse(ill a, ill m) {
    return pow(a,m-2,m);
}

#define N 105
int C[N][N][N];

void pre() {
    F(MOD,1,N) {
        F(i,0,N) C[MOD][0][i] = 0;
        F(i,0,N) C[MOD][i][0] = 1;
        F(i,1,N) F(j,1,i+1) {
            C[MOD][i][j] = (C[MOD][i-1][j] + C[MOD][i-1][j-1]) % MOD;
        }
    }
}

ill Lucas(ill n, ill m, ill p)
{
    if (n==0 && m==0) return 1;
    ill ni = n % p, mi = m % p;
    if (mi>ni) return 0;
    return Lucas(n/p, m/p, p) * C[p][ni][mi];
}

int main() {
    // input();
    pre_pre(); pre();
    int t; S(t);
    while ( t-- ) {
        ill n,m,k;
        Sl(n); Sl(m); Sl(k);
        if ( n < m ) {
            printf("0\n");
            continue;
        }

        vector<ill> p, x;
        F(i,0,total) {
            int val = primes[i];
            if ( k%val == 0 ) {
                p.pb(val);
                x.pb( Lucas(n-1,m-1,val) % val );
            }
        }

        ill ans = 0;
        F(i,0,p.size()) {
            // cout << p[i] << " " << x[i] << endl;
            ill left = k/p[i];
            ill res = x[i] * left * modInverse(left,p[i]);
            ans += res;
        }
        printf("%lld\n", (ans%k));

    }
    return 0;
}
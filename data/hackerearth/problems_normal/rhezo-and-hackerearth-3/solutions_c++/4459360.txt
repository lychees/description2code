//#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>
#include <string>
#include <cmath>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>

#define gc getchar_unlocked

using namespace std;

typedef long long        ll;
typedef pair<int, int>   pii;
typedef pair<int, pii>   piii;
typedef vector<int>      vi;
typedef set<int>         si;
typedef vector<pii>      vii;
typedef vector<piii>     viii;

#define forup(a,b,c) for (int (a)=(b); (a)<(c); (a)++)
#define forn(a,b,c)  for (int (a)=(b); (a)<=(c); (a)++)
#define ford(a,b,c)  for (int (a)=(b); (a)>=(c); (a)--)
#define rep(i,n)     forup(i,0,n)
#define repn(i,n)    forn(i,1,n)
#define repd(i,n)    ford(i,n,1)
#define foreach(i,X) for(__typeof((X).begin()) i = (X).begin(); i != (X).end(); i++)
#define all(a)       a.begin(),a.end()

const int inf = numeric_limits<int>::max();
const ll linf = numeric_limits<ll>::max();

#define fi           first
#define se           second
#define pb           push_back
#define mp           make_pair

void fs(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

vii e[100001];
int seen[100001];
//int parent[100001];
int disc[100001];
int low[100001];
si bridges;
int tim=0;

void dfs(int v, int p)
{
    seen[v]=1;
    //parent[v]=p;
    tim++;
    disc[v]=tim;
    low[v]=tim;
    foreach(it, e[v])
    {
        if(!seen[it->fi])
        {
            dfs(it->fi, v);
            low[v]=min(low[v], low[it->fi]);
            if(disc[v]<low[it->fi]) bridges.insert(it->se);
        }
        else if((it->fi)!=p) low[v]=min(low[v], disc[it->fi]);
    }
}


int main()
{
    int n,m;
    cin>>n>>m;
    repn(i,m)
    {
        int a, b; cin>>a>>b;
        e[a].pb(mp(b,i));
        e[b].pb(mp(a,i));
    }
    repn(i,n) if(!seen[i]) dfs(i,-1);
    int q; cin>>q;
    while(q--)
    {
        int a; cin>>a;
        if(bridges.find(a)!=bridges.end()) cout<<"Unhappy"<<endl;
        else cout<<"Happy"<<endl;
    }
    return 0;
}
#include <bits/stdc++.h>
using namespace std;

struct Mod
{
    const static auto M = static_cast<int>(1e9+7);
    long long k;

    Mod() = default;
    Mod(long long k) : k(k % M) {}
};

Mod operator+(Mod a, Mod b) { return a.k + b.k; }
Mod operator-(Mod a, Mod b) { return a.k - b.k + Mod::M; }
Mod operator*(Mod a, Mod b) { return a.k * b.k; }
Mod& operator+=(Mod& a, Mod b) { return a = a+b; }
Mod& operator-=(Mod& a, Mod b) { return a = a-b; }
Mod& operator*=(Mod& a, Mod b) { return a = a*b; }

const auto MAX = static_cast<int>(5e5);
array<Mod, MAX+1> f;

void precompute_f()
{
    auto primes = vector<long long>();
    auto is_prime = vector<bool>(MAX+1, true);
    for (auto p = 2LL; p <= MAX; p++) if (is_prime[p])
    {
        primes.push_back(p);
        for (auto n = 2*p; n <= MAX; n += p)
            is_prime[n] = false;
    }

    fill(begin(f), end(f), 1);
    for (auto p : primes)
    {
        for (auto q = p; q <= MAX; q *= p)
        {
            f[q] = 0;
            for (auto d = 1LL; d <= q; d *= p)
                f[q] += q/d * (d - d/p);

            for (auto n = 2*q; n <= MAX; n += q)
                if (n % (p*q) != 0)
                    f[n] *= f[q];
        }
    }
}

struct FenwickTree
{
    int N;
    vector<Mod> data;

    FenwickTree(int N, vector<Mod> initial) : N(N), data(initial)
    {
        for (auto i = 1; i <= N; i++)
        {
            auto parent = i + (i & -i);
            if (parent <= N) data[parent] += data[i];
        }
    }

    Mod query(int a)
    {
        auto result = Mod(0);
        for (auto i = a; i >= 1; i -= i & -i)
            result += data[i];
        return result;
    }

    Mod query(int a, int b) { return query(b) - query(a-1); }

    void update(int a, Mod x)
    {
        auto old = query(a, a);
        for (auto i = a; i <= N; i += i & -i)
        {
            data[i] -= old;
            data[i] += x;
        }
    }
};

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    precompute_f();

    int N; cin >> N;

    auto initial = vector<Mod>(N+1);
    for (auto i = 1; i <= N; i++)
    {
        int a; cin >> a;
        initial[i] = f[a];
    }

    auto tree = FenwickTree(N, initial);

    int Q; cin >> Q;

    for (auto i = 0; i < Q; i++)
    {
        char type; int x, y; cin >> type >> x >> y;
        if (type == 'C') cout << tree.query(x, y).k << endl;
        else if (type == 'U') tree.update(x, f[y]);
        else throw invalid_argument("Invalid command type: " + to_string(type));
    }
}

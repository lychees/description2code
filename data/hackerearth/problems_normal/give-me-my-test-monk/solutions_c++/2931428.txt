#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define m_p make_pair
#define F first
#define S second
#define For(i,a,b) for(int i=a;i<b;i++)
#define Fore(i,a,b) for(int i=a;i<=b;i++)
#define rFor(i,a,b) for(int i=a;i>b;i--)
#define rFore(i,a,b) for(int i=a;i>=b;i--)
#define tr(it,a) for(__typeof((a).begin()) it=(a).begin();it!=(a).end();it++)
#define all(a) a.begin(),a.end()
#define mem(a,b) memset(a,b,sizeof(a))
typedef long long int lli;
typedef pair<int,int> pii;
typedef pair<int,pii> pi3;
typedef pair<pii,pii> pi4;
typedef vector<int> vi;
typedef vector<pii> vpii;
void sc(int& a){scanf("%d",&a);}
void sc(lli& a){scanf("%lld",&a);}
void sc(int& a,int& b){sc(a);sc(b);}
void sc(lli& a,lli& b){sc(a);sc(b);}
void sc(int& a,int& b,int& c){sc(a,b);sc(c);}
void sc(lli& a,lli& b,lli& c){sc(a,b);sc(c);}
void prl(int a){printf("%d\n",a);}
void prl(lli a){printf("%lld\n",a);}
void prl(){printf("\n");}
void prs(int a){printf("%d ",a);}
void prs(lli a){printf("%lld ",a);}
void prl(lli a, lli b){cout<<a<<" "<<b<<" "<<endl;}
void prl(lli a, lli b, lli c){cout<<a<<" "<<b<<" "<<c<<" "<<endl;}
void prl(lli a, lli b, lli c, lli d){cout<<a<<" "<<b<<" "<<c<<" "<<d<<endl;}
void prl(lli a, lli b, lli c, lli d, lli e){cout<<a<<" "<<b<<" "<<c<<" "<<d<<" "<<e<<endl;}
void prl(lli a, lli b, lli c, lli d, lli e, lli f){cout<<a<<" "<<b<<" "<<c<<" "<<d<<" "<<e<<" "<<f<<endl;}
int mod =1000000007;
lli modpow(lli a, lli b, lli mod){lli res=1;while(b>0){if(b&1)res=(res*a)%mod;a=(a*a)%mod;b=b/2;}return res%mod;}
lli pow(lli a, lli b){lli res=1;while(b>0){if(b&1)res=(res*a);a=(a*a);b=b/2;}return res;}
#define inf INT_MAX
#define N 100000+5
lli fac[105],ifac[105],subfact[105];
void precompute()
{
	fac[0]=1;
	Fore(i,1,100){
		fac[i]=(i*fac[i-1])%mod;
	}
	ifac[100]=modpow(fac[100],mod-2,mod);
	rFore(i,99,0){
		ifac[i]=((i+1)*ifac[i+1])%mod;
	}
}

void subfactorial()
{
	subfact[0]=1;
	subfact[1]=0;
	Fore(i,2,100){
		subfact[i]=((i-1)*((subfact[i-1]+subfact[i-2])%mod))%mod;
	}
}

lli ncr(int n, int r)
{
	lli ret=fac[n];
	ret*=ifac[r];
	ret%=mod;
	ret*=ifac[n-r];
	ret%=mod;
	return ret;
}

int main()
{
	int n,l,r;
	precompute();
	subfactorial();
	sc(n,l,r);
	lli ans=0;
	Fore(i,l,r){
		ans=(ans+(subfact[i]*ncr(n,i))%mod)%mod;
	}
	ans=(ans*ifac[n])%mod;
	prl(ans);
}
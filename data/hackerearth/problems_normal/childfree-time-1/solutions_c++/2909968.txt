#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

#define P pair<int,int>

struct node{
	int id;
	vector <P> adj;
	vector <int> wt;
	long indeg = 0 , score = 0;
	bool visited = false;
};

vector<node> graph;

void dfs(int);

int main()
{
    int n , e;
    cin>>n>>e;
    graph.resize(n);
    long maxscore = 0;
    
    for(int i = 0 ; i < e ; i++)
    {
    	int st, ed , w;
    	scanf("%d %d %d" , &st,&ed,&w); //>>st>>ed>>w;
    	
    	graph[ed-1].adj.push_back(P(st-1,w+2));
    	graph[st-1].indeg++;
    }
    
    for(int i = 0 ; i < n ; i++)
    {
    	if(graph[i].indeg == 0)
    	{
    		dfs(i);
    		maxscore = max(maxscore , graph[i].score);
    	}
    }
    
    cout<<maxscore<<"\n";
    return 0;
}

void dfs(int id)
{
	graph[id].visited = true;
	
	for(int i = 0 ; i < graph[id].adj.size() ; i++)
	{
		int aj = graph[id].adj[i].first;
		int wj = graph[id].adj[i].second;
		
		if(!graph[aj].visited)
		{
			dfs(aj);
		}
		graph[id].score = max(graph[id].score , graph[aj].score + wj);
	}
}

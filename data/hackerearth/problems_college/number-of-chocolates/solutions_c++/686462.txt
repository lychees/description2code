#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <bitset>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

typedef pair<int,int> Seg1D;
inline Seg1D intersectSeg1D(const Seg1D &a, const Seg1D &b) {
	return Seg1D(max(a.first, b.first), min(a.second, b.second));
}


int main() {
	int N, Q;
	while(~scanf("%d%d", &N, &Q)) {
		vector<int> K(N);
		rep(i, N) scanf("%d", &K[i]);
		vector<long long> sum(N+1);
		rep(i, N) sum[i+1] = sum[i] + K[i];
		rep(ii, Q) {
			int G1, P1, G2, P2;
			scanf("%d%d%d%d", &G1, &P1, &G2, &P2);
			if(G1 > G2) swap(G1, G2);
			if(P1 > P2) swap(P1, P2);
			Seg1D s = intersectSeg1D(Seg1D(G1, G2), Seg1D(P1, P2));
			long long ans = 0;
			ans += sum[G2+1] - sum[G1];
			ans += sum[P2+1] - sum[P1];
			if(s.first <= s.second) ans -= sum[s.second+1] - sum[s.first];
			printf("%lld\n", ans);
		}
	}
	return 0;
}

//Pranet Verma
#include <bits/stdc++.h>
using namespace std;
string s, t;
int n, m, k;
int F[202][26], f[202];
int cost(int a, int b) {
    if (a > b) {
        swap(a, b);
    }
    int o1 = b - a;
    int o2 = a + 26 - b;
    return min(o1, o2);
}
int DP[202][202][505];
int dp(int u, int l, int k) {
    if (k < 0) {
        return -1e9;
    }
    if (u == s.size()) {
        return l == (int)t.size();
    }
    if (DP[u][l][k] != -1) {
        return DP[u][l][k];
    }
    int ans = -1e9;
    for (int i = 0; i < 26; ++i) {
        ans = max(ans, (l == (int)t.size()) + dp(u + 1, F[l][i], k - cost(s[u] - 'a', i)));
    }
    return DP[u][l][k] = ans;
}
void precompute() {
    for (int i = 1; i < t.size(); ++i) {
        int j = f[i - 1];
        while (j > 0 and t[j] != t[i]) {
            j = f[j - 1];
        }
        j += t[i] == t[j];
        f[i] = j;
    }
    for (int i = 0; i < t.size(); ++i) {
        for (int j = 0; j < 26; ++j) {
            int k = i;
            while (k > 0 and ((t[k] - 'a') != j) ) {
                k = f[k - 1];
            }
            k += (t[k] - 'a') == j;
            F[i][j] = k; 
        }
    }
    for (int j = 0; j < 26; ++j) {
        F[t.size()][j] = F[f[(int)t.size() - 1]][j];
    }
}
int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m >> k;
    cin >> t >> s;
    precompute();
    memset(DP, -1, sizeof DP);
    cout << dp(0, 0, k) << endl;
}
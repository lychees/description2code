/* GG */

#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

#define f first
#define s second

#define pb push_back
#define mp make_pair

using namespace std;

typedef pair<int, int> pii;
typedef long long ll;

const double EPS = 1e-9;
const double PI = acos(-1);

const int MAXN = (int) 1e6 + 7;
const int MOD = (int) 1e9 + 7;

int last;
int len, queries;

ll f[MAXN];
vector<char> rules[MAXN];

ll get(int x) {
  if (x <= last)
    return f[x];
  return (ll) 1e18;
}

void modify(ll x, ll pos, char c) {
  if (x <= len) {
    rules[x].pb(c);
  } else {
    for (ll i = x - len; i < x; i++) {
      ll cur = get(i);
      if (cur >= pos) {
        modify(i, pos, c);
        return;
      }
      pos -= cur;
    }
  }
}

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  #endif

  scanf("%d%d", &len, &queries);
  for (int i = 1; i; i++) {
    if (i <= len) {
      f[i] = 1;
    } else {
      for (int x = i - len; x < i; x++) {
        f[i] = min(f[i] + f[x], (ll) 1e18);
      }
      if (f[i] == (ll) 1e18) {
        last = i;
        break;
      }
    } 
  }
  while (queries--) {
    ll pos, x;
    char c;
    scanf("%lld%lld %c", &pos, &x, &c);
    x = min(x, 1000ll);
    modify(x, pos, c);
  }
  int total = 1;
  for (int i = 1; i <= len; i++) {
    sort(rules[i].begin(), rules[i].end());
    rules[i].resize(unique(rules[i].begin(), rules[i].end()) - rules[i].begin());
    if (rules[i].size() > 1)
      total = 0;
    if (rules[i].size() == 0)
      total = total * 1ll * 62 % MOD;
  }
  printf("%d", total);
  return 0;
}
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ll long long int
#define MX 100005
#define get getchar
#define mod 1000000007

ll power(ll a, ll b)
{
    if (b == 0)
        return 1;
    ll x = power(a, b>>1);
    if (b & 1)
        return (((x*x)%mod)*a)%mod;
    return (x*x)%mod;
}

void deb(ll A[], ll n) {
    for(ll i = 0; i < n; i++) {
        cout << A[i] << " " ;
    }
    cout << endl;
}

ll scan()
{
    ll n = 0, ch = get();
    while (ch < '0' || ch > '9')
        ch = get();
    while (ch >= '0' && ch <= '9') {
        n = (n << 3) + (n << 1) + ch - '0';
        ch = get();
    }
    return n;
}

string s;
ll pos[MX];
ll tree[4 * MX];

void build(ll node, ll start, ll end)
{
    if(start == end) {
        tree[node] = (s[start] == '1' ? 1 : 0);
    } else {
        ll mid = (start + end) / 2;
        build(2 * node, start, mid);
        build(2 * node + 1, mid + 1, end);
        tree[node] = (tree[2 * node] * pos[end - mid] + tree[2 * node + 1]) % 3;
    }
}

ll query(ll node, ll start, ll end, ll l, ll r)
{
    if(start > r || end < l || start > end) {
        return 0;
    }
    if(start >= l && end <= r) {
        return tree[node];
    }
    ll mid = (start + end) / 2;
    ll lc = query(2 * node, start, mid, l, r);
    ll rc = query(2 * node + 1, mid + 1, end, l, r);
    return((lc * pos[max(0LL,min(r,end) - mid)] + rc) % 3);
}

void update(ll node, ll start, ll end, ll ind)
{
    if(start == end) {
        s[ind] = '1';
        tree[node] = 1;
    } else {
        ll mid = (start + end) / 2;
        if(ind <= mid) {
            update(2 * node, start, mid, ind);
        } else {
            update(2 * node + 1, mid + 1, end, ind);
        }
        tree[node] = (tree[node * 2] * pos[end - mid] + tree[node * 2 + 1])%3;
    }
}

int main()
{
    //freopen("O1.txt", "w", stdout);
    ll i, n, q, qt, l, r;
    //string s;
    pos[0] = 1;
    for(i = 1; i < MX; i++) {
        pos[i] = (pos[i - 1] * 2) % 3;
    }
    cin >> n;
    cin >> s;
    cin >> q;
    build(1, 0, n - 1);
    /*for(i = 1 ;i <= 9; i++) {
        cout << i << " " << tree[i] << " \n";
    }
    cout << endl;*/
    while (q--) {
        cin >> qt;
        switch(qt) {
            case 0 : {
                cin >> l >> r;
                cout << query(1, 0, n - 1, l, r) << endl;
                break;
            }
            case 1 : {
                cin >> l;
                if(s[l] == '0') {
                    update(1, 0, n - 1, l);
                }
                break;
            }
            default :
                break;
        }
    }

    return 0;
}

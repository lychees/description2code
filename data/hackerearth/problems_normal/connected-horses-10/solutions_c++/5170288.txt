#include<iostream>
#include<queue>
using namespace std;
bool visited[1001][1001];
long long factorial[1000001];
long long mod = 1e9 + 7;
long long count;

bool isSafe(int i,int j,int N,int M)
{
	if(i>=1&&j>=1&&i<=N&&j<=M) return true;
	else return false;
}
void pre_calculate(){       

    factorial[0] = 1;
    for(long long i = 1; i <= 1e6; i++){
        factorial[i] = (factorial[i - 1] * i) % mod;
    }
}
void dfs(int a[][1001],int N,int M,int i,int j)
{
	
	visited[i][j]=true;
		count++;
	
	int xMove[8] = {  2, 1, -1, -2, -2, -1,  1,  2 };
    int yMove[8] = {  1, 2,  2,  1, -1, -2, -2, -1 };
    
	
		for(int k=0;k<8;k++)
		{
			if(isSafe(i+xMove[k],j+yMove[k],N,M) && a[i+xMove[k]][j+yMove[k]]==1 && visited[i+xMove[k]][j+yMove[k]]==false)
			    {
					
					visited[i+xMove[k]][j+yMove[k]]=true;
				    	dfs(a,N,M,i+xMove[k],j+yMove[k]);
				
					
				}
			}


	}
	

int main()
{
	int a[1001][1001],N,M,Q;
	int T;
	cin>>T;
	pre_calculate();
	while(T>0)
	{
		cin>>N>>M>>Q;
		
		for(int i=1;i<=N;i++)
		{
		  for(int j=1;j<=M;j++)
		  {
				a[i][j]=0;
				visited[i][j]=false;
		  }
		}
		int l,m;
		while(Q>0)
		{
			cin>>l>>m;
			a[l][m]=1;
			Q--;
		}
		
		long long ans=1;
		for(int i=1;i<=N;i++)
		{
		  for(int j=1;j<=M;j++)
		  {
			if(a[i][j]==1 && visited[i][j]==false)
			{
			  
			  count=0;
			  dfs(a,N,M,i,j);
			  //cout<<"count"<<count;
			  long long fact_count=factorial[count];
			  ans = (ans * fact_count) % mod;
			}
		}
	}
	cout <<ans<<endl;
	for(int i=1;i<=N;i++)
	 	 {
	 	 	for(int j=1;j<=M;j++)
	 	 	 {
	 	 	 	a[i][j]=0;
	 	 	 	visited[i][j]=false;
	 	 	 }
	 	 }
		T--;
	}

	return 0;
}

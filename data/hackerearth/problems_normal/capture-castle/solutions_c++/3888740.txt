// https://www.hackerearth.com/problem/algorithm/capture-castle/

#include<iostream>
#include<cstdio>
#include<queue>
#include<algorithm>
#include<cstring>
using namespace std;
int m,n;
int map[1000][1000];
bool flag[1000][1000];
int x,y,tm;
typedef pair<int,int> ii;
typedef pair<int,ii> wii;
void makepath()
{
	
	priority_queue<wii> q;
	int x1,y1;
	q.push(make_pair(-map[0][0],ii(0,0)));
	flag[0][0]=true;
	while(!q.empty())
	{
		
		x1=q.top().second.first;
		y1=q.top().second.second;
		q.pop();
		for(int i=-1;i<=1;i++)
		{
			for(int j=-1;j<=1;j++)
			{
				if(i!=j&& i!=-j && !flag[x1+i][y1+j] && x1+i>-1 && x1+i<m && y1+j> -1 && y1+j<n)
				{
					
						map[x1+i][y1+j] += map[x1][y1];
						q.push(make_pair(-map[x1+i][y1+j],ii(x1+i,y1+j)));
						flag[x1+i][y1+j]=true;						
					
				}
			}
		}
	}
}
int main()
{
	int tc;
	scanf("%d",&tc);
	while(tc--)
	{
		scanf("%d %d",&m,&n);
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
				scanf("%d",&map[i][j]);
		}
		scanf("%d %d %d",&x,&y,&tm);
		memset(flag,false,sizeof(flag));
		makepath();
		x--;
		y--;
		if(map[x][y]<tm)
		{
			printf("YES");
			printf("\n%d\n",tm-map[x][y]);
		}
		else
		{
			printf("NO\n");
		}
	}
	return 0;
}

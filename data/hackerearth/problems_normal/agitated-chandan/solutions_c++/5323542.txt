#include <iostream>
#include <set>
#include <vector>
#include <deque>
using namespace std;
#define MOD 1000000007

int counter = 0;
int max_count = 0;
int max_end = 0;
void DFS(vector< vector< pair<int, int> > >& graph, vector<int>& visited, int src){
    visited[src] = true;
    for (vector< pair<int,int> >::iterator it = graph[src].begin(); it != graph[src].end(); it++){
        if (!visited[it->first]){
            counter += it->second;
            if (max_count < counter){
            	max_count = counter;
               max_end = it->first;
            }
            DFS(graph,visited,it->first);
            counter -= it->second;
        }
    }
    visited[src] = false;
}
int main(){
    int test;
    cin >> test;
    for (int cases = 0; cases < test; cases++){
        int edges;
        cin >> edges;
        vector< vector< pair<int, int> > > graph(edges);
        for (int i = 0; i < edges-1; i++){
            int a, b , w;
            cin >> a >> b >> w;
            --a;
            --b;
            graph[a].push_back(make_pair(b, w));
            graph[b].push_back(make_pair(a, w));
        }
        
        vector<int> visited(edges);
        //for (int i = 0; i < edges; i++){
            DFS(graph, visited, 0);
            DFS(graph, visited, max_end);
        //}
        int money = 0;
        if (max_count > 10000) money = 10000;
        else if (max_count > 1000) money = 1000;
        else if (max_count > 100) money = 100;
        cout << money << " " << max_count << endl;
        max_count = 0;
        max_end = 0;
        counter = 0;
    }
}
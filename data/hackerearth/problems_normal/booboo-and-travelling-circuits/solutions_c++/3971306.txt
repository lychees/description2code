#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<cstdio>
#include<numeric>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<set>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<list>
#include<cmath>
#include<bitset>
#include<cassert>
#include<queue>
#include<stack>
#include<deque>
#include<cassert>
using namespace std;
typedef long long ll;
typedef long double ld;
const ll INF = (ll)1e18;
const int MAXN = 2007;
const int MAXM = 10007;
bool isPrime[10007];
ll S, W;
ll A[MAXM], B[MAXM];
ll dp[2][MAXM];
pair<ll, int> best[MAXM][2];
int cl[MAXM];
int lstPr(int x)
{
	for (int i = 2; i*i <= x; i++)
	{
		if (x%i == 0) return i;
	}
	return x;
}
void upd(int c, pair<ll, int>val)
{
	if (val < best[c][0])
	{
		best[c][1] = best[c][0];
		best[c][0] = val;
	}
	else if (val < best[c][1])
	{
		best[c][1] = val;
	}
}
int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	int n, m;
	scanf("%d %d", &n, &m);
	ll P, Q, R, X, Y, Z;
	scanf("%lld %lld %lld %lld", &S, &P, &Q, &R);
	scanf("%lld %lld %lld %lld", &W, &X, &Y, &Z);
	int N = n, M = m;
	for (int i = 1; i <= m; i++)
	{
		cl[i] = lstPr(i);
	}
	int cur = 0, last = 1;
	for (int i = 1; i <= m; i++)
	{
		dp[cur][i] = INF;
		dp[last][i] = 0;
	}
	for (int i = 2; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			best[j][0] = make_pair(INF, -1);
			best[j][1] = make_pair(INF, -1);
		}		
		for (int j = 1; j <= m; j++)
		{
			S = (1LL * ((P * S) % 1000000003) * S + Q * S + R) % 1000000003;
			A[j] = S;
			W = (1LL * ((X * W) % 1000000003) * W + Y * W + Z) % 1000000003;
			B[j] = W;
		}
		for (int j = 1; j <= m; j++)
		{
			pair<ll, int> cur = make_pair(dp[last][j] + B[j], j);
			upd(cl[j], cur);
			upd(1, cur);
		}
		for (int j = 1; j <= m; j++)
		{
			dp[cur][j] = dp[last][j] + A[j];
			pair<ll, int>go = best[cl[j]][0];
			if (go.second == j)
			{
				go = best[cl[j]][1];
			}
			dp[cur][j] = min(dp[cur][j], go.first);
		}
		swap(last, cur);
	}
	ll res = INF;
	for (int j = 1; j <= m; j++)
	{
		res = min(res, dp[last][j]);
	}
	printf("%lld\n", res);
}
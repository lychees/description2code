// -------- SOURAV CHK.--------- //

#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define pi pair <int,int>
#define vi vector <int>
#define vs vector <string>
#define vii vector <pi>

#define LL "%I64d"

#define si(n) scanf("%d",&n)
#define ss(n) scanf("%s",n)
#define sl(n) scanf("%lld",&n)
#define sL(n) scanf(LL,&n)
#define pI(n) printf("%d",n)
#define pl(n) printf("%lld",n)
#define pL(n) printf(LL,n)
#define line  printf("\n")

const int dx[4] = {-1,0,1,0};
const int dy[4] = {0,1,0,-1};

#define pb push_back
#define all(x) x.begin(), x.end()
#define rev(x) x.rbegin(), x.rend()

ll POW(ll n, ll p) {
    if (p == 0) return 1;
    ll t = POW(n, p / 2);
    if (p & 1) return n * t * t;
    return t * t;
}

ll POW_MOD(ll n, ll p, ll M) {
    if (p == 0) return 1;
    ll t = POW(n, p / 2);
    if (p & 1) return ((((n % M) * (t % M)) % M) * (t % M)) % M;
    return ((t % M) * (t % M)) % M;
}

ll GCD(ll a, ll b) {
    if (b > a) swap(a,b);
	return b == 0 ? a: GCD(b, a % b);
}

ll C(ll n, ll r) {
    if (r == 0) return 1;
    if (r == 1) return n;
    if (r > (n / 2)) r = n - r;
    ll res = 1;
    for (int i=1; i<=r; i++) {
        res *= (n - i + 1);
        res /= i;
    }
    return res;
}

bool out (int x, int y, int r, int c) {
    if (x < 0 || x >= r) return 1;
    if (y < 0 || y >= c) return 1;
    return 0;
}

/*---------------- Main Code begins --------------------*/

int a[105][105], vis[105][105], n;

ll solve (int x, int y) {
	if ((x == n - 1) && (y == n - 1)) {
		return !a[x][y];
	}	
	vis[x][y] = 1;
	ll res = 0;
	for (int i=0; i<4; i++) {
		int nx = x + dx[i];
		int ny = y + dy[i];
		if (!out(nx,ny,n,n) && a[nx][ny] != 1) {
			if (!vis[nx][ny]) {
				res += solve(nx, ny);
			}
		}
	}
	vis[x][y] = 0;
	return res;
}

int main() {
	si(n);
	for (int i=0; i<n; i++) {
		for (int j=0; j<n; j++) si(a[i][j]);
	}
	memset(vis, 0, sizeof(vis));
	ll ans = solve (0,0);
	pl(ans); 
    return 0;
}

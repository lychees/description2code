#include <iostream>
using namespace std;

/*
Pigeonhole Principle :
If n+1 objects are placed into n boxes, then atleast one box contains one or more objects.
Proof: Lets suppose each of the n boxes contains 1 object each. So in total there are n objects.
Since, we started with n+1 objects this is a contradiction, so some box contains atleast 2 objects.
Strong Form of Pigeonhole Principle :
Let q1,q2,q3,......,qn be positive integers. Now, if we put q1+q2+q3+. . . +qn-n+1 objects into n boxes,
then either the first box contains at least q1 objects,
or the second box contains atleast q2 objects, . . . ., or the nth box contains qn objects.
Proof: Lets suppose each of the ith box contains fewer than qi objects,
to be precise lets say each of the ith box contains qi-1 objects.
If this was the case than the total number of objects we will have is (q1-1)+(q2-1)+.......+(qn-1) = q1+q2+.....+qn-n objects.
But as we started with q1+q2+....+qn-n+1 objects there exists a ith box which contains qi-1+1 = qi objects.
Thus we conclude that there exist a ith box which contains atleast qi objects in it.
Now, in this problem we can directly use the strong form of pigeonhole principle and so the answer will be A[1]+A[2]+......+A[n]-n+1
*/

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    	int frnd;
    	cin>>frnd;
    	long long int Sum=0,num;
    	for(int i=0;i<frnd;i++)
    	{
    		cin>>num;
    		Sum+=num;
    	}
    	cout<<(Sum-(frnd-1))<<endl;
    }
    return 0;
}

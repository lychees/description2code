#include <iostream>
#include <math.h>
#include <stdio.h>
#include <algorithm>
#include <string>
#include <string.h>
#include <limits.h>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <iterator>
#include <functional>
using namespace std;
typedef long long int lli;
typedef unsigned long long int ulli;
int N, K;
int dp [500 + 10][ (1 << 10) + 10];
string Arr[501];
int DP_Solve(int Mask, int Index)
{
    if(Index == N)
        return 0;
    int &st = dp[Index][Mask];
    if(st != -1)
        return st;
    st = INT_MAX;
    for(int i = 0; i < K; i++)
    {
        if(Arr[Index][i] == '0')
            continue;
        if(Mask & (1 << i))
            st = min(st, DP_Solve(Mask, Index + 1));
        else
            st = min(st, 1 + DP_Solve(Mask | (1 << i), Index + 1));
    }
    return st;
}
int main()
{
    //freopen("1.txt", "r", stdin);
    //freopen("2.txt", "w", stdout);
    int test;
    cin >> test;
    while(test--)
    {
        cin >> N >> K;
        string str;
        memset(dp, -1, sizeof dp);
        for(int i = 0; i < N; i++)
            cin >> Arr[i];
        cout << DP_Solve(0, 0) << endl;
    }
    return 0;
}

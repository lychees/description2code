/* Man Mohan Mishra aka m17
   IIIT - Allahabad */
#include <cstdio>
#include <cmath>
#include <cstring>
#include <climits>
#include <cstdlib>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <utility>
#include <string>
#include <vector>
#include <map>
#include <list>
#include <stack>
#include <queue>
#include <set>
#include <iterator>

#define MOD 1000000007
#define INF 1000000000000000000
#define PI acos(-1)

using namespace std;

long long GCD (long long a,long long b) {
	if (b == 0) return a;
	return(a % b == 0 ? b : GCD(b,a % b));
}

long long POW (long long base,long long exp) {
	long long val;
	val = 1;
	while (exp > 0) {
		if (exp % 2 == 1) {
			val = (val * base) % MOD;
		}
		base = (base * base) % MOD;
		exp = exp / 2;
	}
	return val;
}

int p[15] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47};
int a[55],mask[55];
int dp[50000],temp[50000];

int main()
{
	int t;
	scanf("%d",&t);
	while (t --) {
		int n,i,j,k,flag,ans;
		scanf("%d",&n);
		for (i = 0; i < n; i++) {
			scanf("%d",&a[i]);
		}
		for (i = 0; i < n; i++) {
			mask[i] = 0;
			for (j = 0; j < 15; j++) {
				if (a[i] % p[j] == 0) {
					mask[i] = ((mask[i]) | (1 << j));
				}
			}
		}
		memset(dp,0,sizeof(dp));
		dp[0] = 1;
		for (i = 0; i < n; i++) {
			for (j = 0; j < (1 << 15); j++) {
				temp[j] = dp[j];
			}
			for (j = 0; j < (1 << 15); j++) {
				if (dp[j] != 0) {
					flag = 0;
					for (k = 0; k < 15; k++) {
						if (((j >> k) & (mask[i] >> k)) == 1) {
							flag = 1;
							break;
						}
					}
					if (flag == 0) {
						temp[(j | mask[i])] = max(temp[(j | mask[i])],dp[j] + 1);
					}
				}
			}
			for (j = 0; j < (1 << 15); j++) {
				dp[j] = temp[j];
			}
		}
		ans = 0;
		for (i = 0; i < (1 << 15); i++) {
			ans = max(ans,dp[i]);
		}
		ans = ans - 1;
		printf("%d\n",ans);
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
const int nax = 1e5 + 5;
int t[nax], pref[nax], suf[nax];
int main() {
	multiset<int> s;
	int n;
	scanf("%d", &n);
	int big = 0;
	for(int i = 1; i <= n; ++i) {
		scanf("%d", &t[i]);
		big = max(big, t[i]);
		s.insert(t[i]);
		pref[i] = max(t[i], pref[i-1]);
	}
	for(int i = n; i >= 1; --i)
		suf[i] = max(t[i], suf[i+1]);
	int len = 0, best_i = -1;
	for(int i = 1; i <= n; ++i) if(t[i] == big) {
		int here = 1;
		while(t[i+1] == t[i]) {
			++i;
			++here;
		}
		// i is the last good
		if(here > len) {
			len = here;
			best_i = i;
		}
	}
	
	printf("1");
	
	int left = best_i, right = best_i;
	int small = t[left];
	
	for(int rep = 0; rep < n - 1; ++rep) {
		if(pref[left-1] > suf[right+1] || (pref[left-1] == suf[right+1] && t[left-1] >= t[right+1]))
			small = min(small, t[--left]);
		else
			small = min(small, t[++right]);
		printf(max(pref[left-1], suf[right+1]) <= small ? "1" : "0");
	}
	puts("");
	return 0;
}
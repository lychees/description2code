#include <stack>
#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <climits>
#include <iostream>
#include <vector>
#include <map>
#include <list>
#include <queue>
#include <algorithm>
#include <limits>
#include <bitset>
using namespace std;

//Shorthands
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<vi> vvi;
typedef vector<ii> vii;
typedef long long ll;
typedef vector<ll> vll;
#define sd(x) scanf("%d", &x)
#define sl(x) scanf("%lld", &x)
#define For(i, j, k) for (int i = j; i <= k; i++)
#define Ford(i, j, k) for (int i = j; i >= k; i--)
#define sz(a) int((a).size())
#define rsz resize
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(auto i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define abs(x) (((x) > 0) ? (x) : (-(x)))
#define mp make_pair

//DEBUG
#define trace(x) cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define track(a) cerr << #a << ": "; for (auto tmp: a) cerr << tmp << " "; cerr << endl;
#define trackp(a) cerr << #a << ": "; for (auto tmp: a) cerr << "(" << tmp.first << ", " << tmp.second << "), "; cerr << endl;

//CONSTANTS
#define MOD 1000000007
#define INF 1e15
#define MAX 100005

//General Purpose Routines;
vector<bool> isprime;
vector<int> primes;
void sieve(int n)
{
    isprime.resize(n + 1);
    for (int i = 0; i <= n; i++)
        isprime[i] = 1;
    isprime[1] = 0, isprime[2] = 1;
    for (int i = 2; i * i <= n; i++)
        if (isprime[i])
            for (int j = 2; i * j < n; j++)
                    isprime[i * j] = 0;
    for (int i = 2; i < n; i++)
        if (isprime[i])
            primes.push_back(i);
    return;
}

long long power(long long n,long long m)
{
    if(m==0) return 1;
    long long x=power(n,(m>>1));
    if(!(m & 1)) return (x*x)%MOD;
    else return (((x*x)%MOD)*n)%MOD;
}

//Input Output Routines
#define breakpoint {cerr << "\nok fill till here\n";}

void input()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    #endif // ONLINE_JUDGE
}

void output()
{
    #ifndef ONLINE_JUDGE
    freopen("output.txt", "w", stdout);
    #endif // ONLINE_JUDGE
}

int main()
{
    ios::sync_with_stdio(false);
    int t;
    cin >> t;
    while (t--) {
        int n;
        ll a, b, c;
        cin >> n;
        cin >> a >> b >> c;
        vector<ii> rt;
        map<int, int> hs;
        for (int i = 0; i < n; i++) {
            int p, t;
            cin >> p >> t;
            rt.pb(mp(p, t));
            hs[p] = 1, hs[t] = 1;
        }
        int cmp=0;
        vector<int> tm;
        for (map<int,int>::iterator i = hs.begin(); i != hs.end(); i++) {
            tm.pb((*i).first);
        }
        sort(all(rt));
        vi st(n), et(n);
        for (int i = 0; i < n; i++) {
            st[i] = rt[i].first;
            et[i] = rt[i].second;
        }
        sort(st.begin(), st.end());
        sort(et.begin(), et.end());
        long long maxp = 0;
        //track(st);
        //track(et);
        for (int i = 0; i < tm.size(); i++) {

            int ended = lower_bound(all(et), tm[i])-et.begin();
            int notstarted = st.end()-upper_bound(all(st), tm[i]);
            //trace2(notstarted,  ended);
            maxp = max(maxp, a * notstarted + b * (n - notstarted - ended) + c * ended);
            //cout << i << " " << maxp << endl;
        }
        cout << maxp << endl;;
    }
}

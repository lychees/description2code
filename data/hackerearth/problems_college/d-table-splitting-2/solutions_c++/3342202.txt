#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define REP(i,a) for(int i=0;i<a;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back
#define all(s) s.begin(),s.end()
#define present(c,x) ((c).find(x) != (c).end())
const double EPS = 1e-8;
const int mod = 1e9+7;
const int N = 4e6+10;
const ll INF = 1e18;

//#define DEBUG
ll power(ll x,ll y){
  ll t=1;
  while(y>0){
    if(y%2) y-=1,t=t*x%mod;
    else y/=2,x=x*x%mod;
  }
  return t;
}
#ifdef DEBUG
#define dprintf(fmt,...) fprintf(stderr,fmt,__VA_ARGS__)
#else
#define dprintf(fmt,...)
#endif

vector<int> G[N];
string s[N];
bool u[N];
void dfs(int v){
	if(u[v]) return;
	u[v]=1;
	queue<int> q;
	q.push(v);
	while(!q.empty()){
		int x=q.front(); q.pop();
		REP(i,G[x].size()) if(u[G[x][i]]==0) q.push(G[x][i]), u[G[x][i]]=1; 
	}
	//REP(i,G[v].size()) if(u[G[v][i]]==0) dfs(G[v][i]);
}
int main(){
	int t; scanf("%d",&t);
	while(t--){
		int n,m; scanf("%d%d",&n,&m);
		REP(i,n) cin>>s[i];
		ll ans=0;
		REP(i,(n+1)*(m+1)) G[i].clear();
		FILL(u,0);
		
	//	printf("%d\n",1);
		REP(i,n) REP(j,m){
			if(i>0) {
				if(s[i][j]!=s[i-1][j]) {
					int x=i*(m+1)+j,y=i*(m+1)+j+1;
					G[x].pb(y); G[y].pb(x);
				}
			}
			if(j>0){
				if(s[i][j]!=s[i][j-1]) {
					int x=i*(m+1)+j,y=(i+1)*(m+1)+j;
					G[x].pb(y); G[y].pb(x);
				}	
			}
		}
		REP(i,n+1) dfs(i*(m+1)),dfs(i*(m+1)+m);
		REP(j,m+1) dfs(j),dfs(n*(m+1)+j);
		int f=0;
		REP(i,(n+1)*(m+1)) if(G[i].size()!=0&&u[i]==0) f=1;
		if(f) printf("NO\n"); else printf("YES\n");
	}
  return 0;
}

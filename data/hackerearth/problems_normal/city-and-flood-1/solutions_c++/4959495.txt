//DARK LORD
#include<bits/stdc++.h>
#define ll long long
#define _ ios::sync_with_stdio(false);cin.tie(0);
#define max(a,b)                 (a>=b?a:b)
#define min(a,b)                 (a<b?a:b)
#define max3(a,b,c)               max(a,max(b,c))
#define min3(a,b,c)               min(a,min(b,c))
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(int i=1;i<=n;i++)
#define f11(i,n) for(i=1;i<n;i++)
#define fn(i,n) for(i=n-1;i>=0;i--)
#define pb push_back
#define mp make_pair
#define mod 1000000007
#define T() int t;cin>>t;while(t--)
inline ll modexp(ll a,ll b){ll x=1;while(b>0){if(b&1){x*=a;if(x>=mod)x%=mod;};b>>=1;a*=a;if(a>=mod)a%=mod;}return x;}
inline ll digSum(ll n){ll s=0;n=abs(n);while(n){s+=(n%10);n/=10;}return s;}
using namespace std;
vector<int> size(100001,1);
vector<int> parent(100001);
multiset<int> m;
int find(int x)
{
	while (x != parent[x])
	{
		parent[x] = parent[parent[x]];
		x = parent[x];
	}
	return x;
}
void Union(int x,int y){
	if(size[x] > size[y]){
		parent[y] = x;
		m.erase(m.find(size[x]));
		m.erase(m.find(size[y]));
		size[x] = size[x] + size[y];
		m.insert(size[x]);
		}
	else{
		m.erase(m.find(size[y]));
		m.erase(m.find(size[x]));
		size[y] = size[x] + size[y];
		m.insert(size[y]);
		parent[x] = y;
		}
}
int main()
{
	int n,Q;
	ll ans = 1;
	cin>>n>>Q;
	f1(i,n){
		parent[i] = i;
		m.insert(1);}
	while(Q--){
		int x,y;
		cin>>x>>y;
		int xroot = find(x);
		int yroot = find(y);
		if(xroot!=yroot)
			Union(xroot,yroot);
	}
	cout<<m.size();
}
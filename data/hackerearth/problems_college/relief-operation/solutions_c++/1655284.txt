#include <iostream>
#include <vector>
using namespace std;

const int MAX = 2000;
const int MAX_VALUE = 2000;

class MegaMap {
  public:
    int arr[MAX_VALUE + 1];
    bool used[MAX_VALUE + 1];
    vector<int> keys;
    
    int getMax(int k) {
    	if (k <= MAX_VALUE) {
    		return used[k] ? arr[k] : 0;
    	} else {
    		return 0;
    	}
    }
    
    void addMax(int k, int v) {
    	if (k > MAX_VALUE) {
    		return;
    	}
    	if (used[k]) {
    		arr[k] = max(arr[k], v);
    	} else {
    		arr[k] = v;
    		used[k] = true;
    		keys.push_back(k);
    	}
    }
    
    void mergeWith(MegaMap map) {
    	for (int i = 0; i <= MAX_VALUE; i++) {
    		int k = map.keys[i];
    		int v = map.getMax(k);
    		addMax(k, v);
    	}
    }
};

int main()
{
    int T, M, L;
    scanf("%d", &T);
    while (T-- > 0) {
    	scanf("%d", &M);
    	scanf("%d", &L);
    	int W[M];
    	int V[M];
    	for (int i = 0; i < M; i++) {
    		scanf("%d", &W[i]);
    	}
    	for (int i = 0; i < M; i++) {
    		scanf("%d", &V[i]);
    	}
    	int dp[MAX + 1] = { 0 };
    	for (int i = 0; i < M; i++) {
    		for (int j = MAX; j >= 0; j--) {
    			int wNew = j + W[i];
    			int vNew = dp[j] + V[i];
    			if (wNew <= MAX) {
    				dp[wNew] = max(dp[wNew], vNew);
    			}
    		}
    	}
    	int ans = 0;
    	for (int i = 0; i <= L; i++) {
    		ans = max(ans, dp[i]);
    	}
    	printf("%d\n", ans);
    	//return 0;
    }
}
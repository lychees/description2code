#include <iostream>
#include <vector>
#include <algorithm>

#define MOD 1000000007
using namespace std;

int n = 0; 
int m = 0;
int k =  0;


long long dp[501][11][501];
int seats[10][5];

long long arrangements(int row, int seatsinarow, int seatsleft) {

	if (row >= (n - 1)) {
		if (seatsleft <= 0) 
			return 1;
		else if (seatsleft > 0)
			return 0;
	}

	if(dp[row][seatsinarow][seatsleft] != -1)
		return dp[row][seatsinarow][seatsleft];

	long long sum = 0;
	for (int i = 2; i <= 5; i++) {
		sum = (sum + (arrangements(row + 1, i, seatsleft - i) % MOD) * seats[m - 1][i - 1] % MOD) % MOD;
	}


	dp[row][seatsinarow][seatsleft] = sum;
	return sum;

}


int main() {

	
	cin >> n >> m;
	cin >> k; 

	//seats[0][0] = 0;
	
	for (int i = 0; i < 10; i++)  {
		for (int j = 0; j < 5; j++) {
			seats[i][j] = 0;
		}
	}
	for (int i = 0; i <10; i++)
		seats[i][0] = i + 1;
	//for (int i = 1; i <5; i++)
	//	seats[i][0] = 0;

	for (int i = 0; i < 10; i++){
		for (int j = 1; j < 5; j++) {
			int sum = 0;
			for (int k = i - 2; k >= 0; k--) {
				sum += seats[k][j - 1];
			}
			seats[i][j] = sum;
		}
	}

	for (int i = 0; i < 501; i++) {
		for (int j = 0; j < 11; j++) {
			for (int k = 0; k < 501; k++) {
				dp[i][j][k] = -1;
			}
		}
	}

	long long sum = 0;
	for (int i = 2; i <= 5; i++)  {
		sum =  (sum + (arrangements(0, i, k - i) * seats[m - 1][i - 1]) % MOD) % MOD;
	}
	cout << sum << endl;

	return 0;
}



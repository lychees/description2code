#include<cstdio>
#include<algorithm>
#include<vector>
using namespace std;
#define max 100001//maximum no. of vertices
int p[max],rak[max];
int find(int u)
{
	if(p[u]==u)
	return u;
	int root=find(p[u]);
     p[u]=root;
	 return root;	
}
void mkunion(int x,int y)
{
	int px=find(x);
	int py=find(y);
	if(rak[px]>rak[py])
	{
	p[py]=px;
	}
	else 
	{
	p[px]=py;
    }
if(rak[px]==rak[py])
rak[py]++;
 }
 
main()
{
	vector< pair< int,pair<int,int> > > g,mst;
	int n,i,b,x,y,wt;
	long long totwt=0;
	scanf("%d%d",&n,&b);
	for(i=1;i<=n;i++)
	{
	rak[i]=1;
	p[i]=i;
    }
    
	while(b--)
	{
		scanf("%d%d%d",&x,&y,&wt);
		g.push_back(make_pair(wt,make_pair(x,y)));
	}
	sort(g.begin(),g.end());
	int u,v;
	for(i=0;i<g.size();i++)
	{
	u=find(g[i].second.first);	
	v=find(g[i].second.second);
if(u!=v)
{
	mst.push_back(g[i]);
	totwt+=g[i].first;
	mkunion(u,v);
}
}
printf("%lld",totwt);
	return 0;
	
}
#define _USE_MATH_DEFINES
#include <algorithm>
#include <cstdio>
#include <functional>
#include <iostream>
#include <cfloat>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <time.h>
#include <vector>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> i_i;
typedef pair<ll, int> ll_i;
typedef pair<double, int> d_i;
typedef pair<ll, ll> ll_ll;
typedef pair<double, double> d_d;
struct edge { int u, v; ll w; };

ll MOD = 1000000007;
ll _MOD = 1000000009;
double EPS = 1e-10;

struct union_find {
	vector<int> v;
	union_find(int n) : v(n, -1) {}
	int find(int x) { return (v[x] < 0) ? x : (v[x] = find(v[x])); }
	void unite(int x, int y) {
		x = find(x); y = find(y);
		if (x != y) {
			if (-v[x] < -v[y]) swap(x, y);
			v[x] += v[y]; v[y] = x;
		}
	}
	bool same(int x, int y) { return find(x) == find(y); }
	int size(int x) { return -v[find(x)]; }
};

int main() {
	int T; cin >> T;
	while (T--) {
		int N, M; cin >> N >> M;
		vector<int> P(N), Q(N);
		for (int i = 0; i < N; i++)
			scanf("%d", &P[i]);
		for (int i = 0; i < N; i++)
			scanf("%d", &Q[i]);
		vector<int> unko(N);
		for (int i = 0; i < N; i++)
			unko[Q[i] - 1] = i;
		for (int i = 0; i < N; i++)
			P[i] = unko[P[i] - 1];
		union_find uf(N);
		while (M--) {
			int a, b; scanf("%d%d", &a, &b);
			uf.unite(a - 1, b - 1);
		}
		vector<vector<int> > v(N), w(N);
		for (int i = 0; i < N; i++) {
			v[uf.find(i)].push_back(i);
			w[uf.find(i)].push_back(P[i]);
		}
		bool ok = true;
		for (int i = 0; i < N; i++) {
			sort(w[i].begin(), w[i].end());
			if (v[i] != w[i]) ok = false;
		}
		cout << (ok ? "YES" : "NO") << endl;
	}
}

#include<bits/stdc++.h>

using namespace std;

#define gx getchar_unlocked
#define px putchar_unlocked
#define ps putchar_unlocked(' ')
#define pn putchar_unlocked('\n')
#define LIM
#define MOD 1000000007
#define pb push_back
#define mp make_pair
#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define rep(i,n) for(int i =0; i < n ; i++)
#define reps(i,x,y) for(int i =x; i < y ; i++)
#define repb(i,x,y) for(int i =x; i >= y ; i--)
#define all(a) a.begin(),a.end()
#define ff first
#define ss second
#define DBG(vari) cerr<<#vari<<" ==> "<<(vari)<<endl;
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define sqr(x) ((x)*(x))
#define EPS 1e-9

const int INF = 2000000000;
const double pi=acos(-1.0);

typedef long long int i64;



i64 sol[19] = {0,4,64,784,8704,92224,953344,9720064,98320384,989922304,9939533824,99637202944,997823217664,9986939305984,99921635835904,999529815015424,9997178890092544,99983073340555264,999898440043331584};
int pless[] ={0,0,0,1,2,2,3,3,4,4};

void scan(i64 &x)
{
    register i64 c = gx();
    x = 0;
    for(;(c<48 || c>57);c = gx());
    for(;c>47 && c<58;c = gx())
    {
        x = (x<<1) + (x<<3) + c - 48;
    }
}

int main()
{
	//freopen("aain.txt","r",stdin);
	//freopen("aaout.txt","w",stdout);
	
	//std::ios_base::sync_with_stdio(false);
	i64 t;
	scan(t);
	while(t--){
		//cin >> s;
		char s[20];
		i64 num;
		scan(num);
		if( num == 0){
			s[0] = '0';
			s[1] = '\0';
		}
		else{
			int i = 0;
			while(num > 0){
				s[i++] = num%10+'0';
				num /= 10;
			}
			reverse(s,s+i);
			s[i] = '\0';
		}

		int len = strlen(s);
		i64 ans = 0;
		rep(i,len){
			if( s[i] == '2' || s[i] == '3' || s[i] == '5' || s[i] == '7'){
				if( s[i] == '2'){
					ans += (i64)2*(sol[len-i-1]);
					i64 temp = 0;
					reps(j,i+1,len) temp = temp*10 + s[j] -48;
					ans += temp +1;
				}
				else if( s[i] == '3'){
					ans += (i64)2*(sol[len-i-1])+pow(10,len-i-1);
					i64 temp = 0;
					reps(j,i+1,len) temp = temp*10 + s[j] -48;
					ans += temp +1;
				}
				else if( s[i] =='5'){
					ans += (i64)3*(sol[len-i-1])+2*pow(10,len-i-1);
					i64 temp = 0;
					reps(j,i+1,len) temp = temp*10 + s[j] -48;
					ans += temp +1;
				}
				else{
					ans += (i64)4*(sol[len-i-1])+3*pow(10,len-i-1);
					i64 temp = 0;
					reps(j,i+1,len) temp = temp*10 + s[j] -48;
					ans += temp +1;
				}
				break;
			}
			else{
				ans += (i64)pless[s[i]-48]*pow(10,len-i-1) + (s[i]-48 - pless[s[i]-48])*sol[len-i-1];
			}
		}
		//cout << ans << endl;
		printf("%lld\n",ans);
	}

	return 0;

}


/*
 *
 * File: stuff.cpp
 * Author: Andy Y.F. Huang (azneye)
 * Created on Aug 23, 2014, 11:50:25 PM
 */

#include <bits/stdc++.h>

using namespace std;

namespace stuff {
typedef long long ll;
const int MOD = 1000000007;

void solve(int test_num) {
  int N;
  cin >> N;
  vector<int> a(N), b(N);
  for (int i = 0; i < N; i++)
    cin >> a[i];
  for (int i = 0; i < N; i++)
    cin >> b[i];
  vector<int> bit(100001, 0);
  ll res = 0;
  for (int i = 0; i < N; i++) {
    res += i;
    for (int p = b[i]; p > 0; p -= p & -p)
      res -= bit[p];
    for (int p = a[i]; p < (int) bit.size(); p += p & -p)
      res += bit[p];
  }
  for (ll p = 2; p * p <= res; p++) {
    if (res % p == 0) {
      cout << "SIMPLE INVERSION\n";
      return;
    }
  }
  cout << "MAGIC INVERSION\n";
}

void solve() {
#ifdef AZN
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
//freopen("azn.txt", "w", stderr);
  double start_t = clock();
#endif
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int T = 1;
  //cin >> T;
  for (int t = 1; t <= T; t++)
    solve(t);
#ifdef AZN
  cerr << "Took: " << ((clock() - start_t) / CLOCKS_PER_SEC);
#endif
}
}

int main() {
  stuff::solve();
  return 0;
}

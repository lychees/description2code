#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <list>
#include <iterator>
#include <stdio.h>
#define fr(i,n) for(int i=0;i<n;i++)
#define lld long long int
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
using namespace std;
bool compare(const pair<lld,lld>&i, const pair<lld,lld>&j)
{
	if(i.first==j.first)
	return i.second<j.second;
	if(i.first<j.first)
	return 1;
	return 0;
}
bool compare1(const pair<lld,lld>&i, const pair<lld,lld>&j)
{
	if(i.second>j.second)
	return 1;
	if(i.second==i.second)
	return i.first<i.second;
	return 0;
}
bool compare2(const pair<int,int>&i, const pair<int,int>&j)
{
	if((i.second-i.first)>(j.second-j.first))
	return 1;
	else if((i.second-i.first)==(j.second-j.first))
	return i.first>=j.second;
	return 0;
}
bool ok(lld mid,vector<pair<lld,lld> > &v,vector<pair<lld,lld> > &temp)
{
	for(int i=0;i<v.size();i++)
	{
			mid-=v[i].first;
			if(mid<0) return 0;
			mid+=v[i].second;
			//cout<<"after2 "<<" "<<mid<<endl;
	}
	for(auto it=temp.begin();it!=temp.end();it++)
	{
		mid=mid-(it->first);
		if(mid<0) return 0;
		mid+=it->second;
	}
	return 1;
}
int main()
{
	lld n,sum=0,low,high,mid,ti,xi;
	cin>>n;
	vector<pair<lld,lld> > v,temp;
	fr(i,n)
	{
		cin>>ti>>xi;
		if(xi-ti>0)	v.pb(mp(ti,xi));
		else temp.pb(mp(ti,xi));
		sum+=ti;
	}
	sort(v.begin(),v.end(),compare);
	sort(temp.begin(),temp.end(),compare1);
	//for(auto it=temp.begin();it!=temp.end();it++) cout<<it->first<<" "<<it->second<<endl;
	low=0,high=sum;
	while(low<=high)
	{
		mid=(high+low)>>1;
		if(ok(mid,v,temp)) high=mid-1;
		else low=mid+1;
	}
	cout << low<<endl;
    return 0;
}
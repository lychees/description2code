/*
 ***************************************************************************************************************
 
 Author : Tapan Sahni
 
 **************************************************************************************************************
 */

#include<stdio.h>
#include<iostream>
#include<vector>
#include<string.h>
#include<algorithm>
#include<deque>
#include<map>
#include<set>
#include<stdlib.h>
#include<math.h>
#include<queue>
#include<stack>
#include<functional>
using namespace std;
#define LL long long
#define si(x) scanf("%d",&x)
#define sc(x) scanf("%c",&x)
#define sl(x) scanf("%I64d",&x)
#define prl(x) printf("%I64d",x)
#define pri(x) printf("%d\n",x)
#define prs(x) printf("%s\n",x)
typedef pair<int, int> ii;
typedef pair<LL, LL> iil;
typedef pair<LL, iil> iiil;
typedef pair<ii, int> iii;
typedef pair<ii, ii> iiii;
#define vl vector<ll>
#define vi vector<int>
#define vii vector<ii>
#define vvl vector< vl >
#define vvi vector< vi >
#define vvii vector< vii >
#define sz size()
#define pb push_back
#define F first
#define S second
#define mem(x,y) memset(x,y,sizeof(x))
#define rep(i,a,b) for(int i=(a);i<(b);i++)
#define mod 1000000007
#define pb push_back

const int maxn = 100 + 1;
//const int INF  = 1e9 + 7;
const LL INF = 0x0123456789ABCDEFLL;
#define gc getchar
int read_int() {
    char c = gc();
    while(c<'0' || c>'9' ) c = gc();
    int ret = 0;
    while(c>='0' && c<='9') {
        ret = 10 * ret + c - 48;
        c = gc();
    }
    return ret;
}
LL dp[505][305];    
LL a[505];
LL pre[505];
inline void solve(void){
    int n , k;
    cin >> n >> k;

    for(int i = 0 ;i < n;i++) cin >> a[i] , pre[i + 1] = pre[i] + a[i];

    for(int i=0 ;i < 505; i++) fill(dp[i] , dp[i] + 305 ,INF);
    dp[0][0] = 0;
    
    for(int  i = 1 ;i <= n; i++){
        for(int j = 1 ;j<=k;j++){
                for(int p = 1 ; p<=i; p++){
                    LL add = pre[i] - pre[p - 1];
                    LL add1 = add;
                    add = add*add;
                    dp[i][j] = min((k - 1) *add + dp[p - 1][j - 1]  - 2 *add1*(pre[p - 1])  ,dp[i][j]);

                } 
            }

    }

    cout << dp[n][k];


}
/*void init() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
}*/
int main(int argc, const char * argv[]){
   // init();
    solve();
    return 0;
}

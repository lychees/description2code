#include<bits/stdc++.h>
using namespace std;
int countSetBits(int n)
{
	int count=0;
	while(n)
	{
		n=n&(n-1);
		count++;
	}
	return count;
}
int gcd(int a,int b)
{
	if(a%b==0)
		return b;
	return gcd(b,a%b);
}
int calc(int *x,int *c,int *z,int *selected,int n,int m,int k,int i,int count)
{
	if(count==k)
	{
		int sum=0;
		for(int j=0;j<m;j++)
		{
			if(selected[j]!=-1)
				sum+=z[j];
		}
		return sum;
	}
	if(i==n)
		return 0;
	int m1=calc(x,c,z,selected,n,m,k,i+1,count);
	for(int j=0;j<m;j++)
	{
		if(selected[j]==-1&&gcd(x[i],c[j])!=1)
			selected[j]=i;
	}
	int m2=calc(x,c,z,selected,n,m,k,i+1,count+1);
	for(int j=0;j<m;j++)
	{
		if(selected[j]==i)
			selected[j]=-1;
	}
	return (m1>m2?m1:m2);
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,m,k;
		cin>>n>>m>>k;
		int x[n],c[m],z[m];
		for(int i=0;i<n;i++)
			cin>>x[i];
		for(int i=0;i<m;i++)
			cin>>c[i];
		for(int i=0;i<m;i++)
			cin>>z[i];
		int selected[m];
		for(int i=0;i<m;i++)
			selected[i]=-1;
		cout<<calc(x,c,z,selected,n,m,k,0,0)<<endl;
		/*int sum,max=0;
		int L=pow(2,n);
		bool selected[m];
		for(int i=0;i<L;i++)
		{
			if(countSetBits(i)==k)
			{
				for(int j=0;j<m;j++)
					selected[j]=false;
				for(int j=0;j<n;j++)
				{
					if(i&(1<<j))
					{
						for(int p=0;p<m;p++)
						{
							if(!selected[p]&&gcd(x[j],c[p])!=1)
								selected[p]=true;
						}
					}
				}
				sum=0;
				for(int j=0;j<m;j++)
				{
					if(selected[j])
						sum+=z[j];
				}
				if(sum>max)
					max=sum;
			}
		}
		cout<<max<<endl;*/
	}
	return 0;
}
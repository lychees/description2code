#include <bits/stdc++.h>
using namespace std;
const int MAX = 100 + 7;
int graph[MAX][MAX];
int visited[MAX][MAX];
int x[] = { 1 , 1, 0 , - 1 , -1 ,-1, 0 , 1 };
int y[] = {0 , 1 , 1 , 1 , 0 , - 1 , - 1, -1};
int N;
bool dfs1 ( int a , int b)
{
//	cout <<a <<" "<<b << endl;
	if(a == N-1)
	return 1;
	
	visited[a][b]= 1;
	
	for(int i = 0; i < 8; i++)
	{
		int newx = x[i] + a;
		int newy = y[i] + b;
		
		if(newx < 0 || newx >=N || newy <0 || newy >= N)
		continue;
		if(visited[newx][newy] || ! (graph[newx][newy] == 1))continue;
		
		if(dfs1(newx , newy))
		return 1;
	}
	
return 0;	
}
bool dfs2 ( int a , int b)
{
	//cout <<a <<" "<<b << endl;
	if(b == N-1)
	return 1;
	
	visited[a][b]= 1;
	
	for(int i = 0; i < 8; i++)
	{
		int newx = x[i] + a;
		int newy = y[i] + b;
		
		if(newx < 0 || newx >=N || newy <0 || newy >= N)
		continue;
		if(visited[newx][newy] || ! (graph[newx][newy] == 2))continue;
		
		if(dfs2(newx , newy))
		return 1;
	}
	
return 0;	
}




int main()
{
   
    cin >> N ;
    
    for(int i = 0; i < N ; i++)
    {
    	 for(int j = 0; j < N ; j++)
    	 {
    	 	 cin >> graph[i][j];
    	 }
    }
    bool flag = 0;
    for(int i = 0; i < N ; i++)
      {
      	if(graph[0][i] == 1)
      	 if(dfs1(0 , i) )
      	 {
      	 	flag = 1;
      	 	break;
      	 }
      	 memset(visited , 0 , sizeof(visited));
      } 
     memset(visited , 0 , sizeof(visited));
     bool flag1 = 0;
     
     for(int i = 0; i < N ; i++)
     {
     	   if(graph[i][0] == 2)
     	   if(dfs2(i , 0))
     	   {
     	   	flag1 = 1;
     	   	break;
     	   }
       memset(visited , 0 , sizeof(visited));	
     }
   
   if(flag && flag1)
   cout <<"AMBIGUOUS"<<endl;
   
   if(flag && !flag1)
   cout <<"1"<<endl;
   if(!flag && flag1)
   cout <<"2"<<endl;
   if(!flag && !flag1)
   cout <<"0"<<endl;
    
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define f(i,s,e) for(int i=s;i<=e;i++)
#define ip(a) scanf("%d",&a)
#define op(a) printf("%d",a)
#define lip(a) scanf("%lld",&a)
#define lop(a) printf("%lld",a)
#define cip(a) scanf("%c",&a)
#define INF 1000000000
#define MOD 1000000007
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define pi 3.14159265358979323846
#define  e 2.71828182845904523536
queue<pair<ll,ll> >q;
stack<pair<ll,ll> >s;
vector<pii> adj[10009];
int d[10009];
struct comp
{
    bool operator()(const pair<int,int> &p1,const pair<int,int> &p2)
    {
        return p1.second>p2.second;
    }
};
void dijktra(int src,int dest,int n)
{
    priority_queue<pii,vector<pii>,comp > pq;
    while(!pq.empty()) pq.pop();
    f(i,0,n+2) d[i]=INF;
    bool visit[n+5];
    memset(visit,0,sizeof(visit));
    d[src]=0;
    pq.push({src,0});
    while(!pq.empty())
    {
        int f=pq.top().first;
        //int c=pq.top().first;
        pq.pop();
        if(visit[f]) continue;//if( d[f]<c ) continue;
        //if(dest==f) return d[dest];
        for(int i=0;i<adj[f].size();i++)
        {
            int z=adj[f][i].first;
            int cost=adj[f][i].second;
            //if(!visited[z] and d[z]>c+cost)
            if(!visit[z] and d[z]>d[f]+cost)
            {
                d[z]=d[f]+cost;
                pq.push({z,d[z]});
            }
        }
        visit[f]=true;
    }
    //return d[dest];
}
int main()
{
    int t;ip(t);while(t--)
    {
        int n,m,x,y,z,dest,k;
        ip(n);ip(m);
        f(i,0,n+2) adj[i].clear();
        //f(i,0,n+2) f(j,0,n+2) path[i][j]=INF;
        f(i,1,m)
        {
            ip(x);ip(y);ip(z);
            adj[x].pb({y,z});
            adj[y].pb({x,z});
            //path[x][y]=min(path[x][y],z);
            //path[y][x]=min(path[y][x],z);
        }
        dijktra(1,dest,n);
        int q;ip(q);while(q--)
        {
            ip(dest);ip(k);
            int ans=d[dest];
            ans=k-2*ans;
            ans=(ans>0)?ans:0;
            printf("%d\n",ans);
        }
    }
}

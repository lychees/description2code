//Utkarsh Saxena
#include<iostream>
#include<limits.h>
#include<map>
#include<vector>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<cstdio>
#include<queue>
using namespace std;//miller rabin primality 7 set for 64 bit int {2, 325, 9375, 28178, 450775, 9780504, 1795265022}
#define abs(x) ((x)>0?(x):-(x))
#define M 1000000007
#define lld signed long long int
#define pp pop_back()
#define ps(x) push_back(x)
#define tkint(n) scanf("%d",&n)
#define tkchar(ch) scanf("%c",&ch)
#define tklong(n) scanf("%llu",&n)
#define  ms0(s) memset(s,0,sizeof s)
//vector<int> graph[2*100000+5];int visited[2*100000+5];
lld n;
lld dp[64][10][5];
lld fdp[64][10][5];
lld p2[65];
int ways[5];
void flush()
{
	for(int i=0;i<=63;++i)
	{
		for(int j=0;j<=8;++j)
		{
			dp[i][j][0]=dp[i][j][1]=0;
			fdp[i][j][0]=fdp[i][j][1]=0;
		}
	}
}
lld rec(int i,int carry,int done)
{
	if(i==61)
	{
		if(carry==0)return done;
		return 0;
	}
	if(fdp[i][carry][done])return dp[i][carry][done];
	fdp[i][carry][done]=1;
	dp[i][carry][done]=0;
	for(int sum=0;sum<=3;++sum)
	{
		if((sum+carry)%2==1 and (n&p2[i])>0 or (sum+carry)%2==0 and (n&p2[i])==0)
		{
			dp[i][carry][done]+=rec(i+1,(carry+sum)/2,done or sum==3)*ways[sum];
			dp[i][carry][done]%=M;
		}
	}
	return dp[i][carry][done];
}
int main()
{
	ways[0]=ways[3]=1;
	ways[1]=ways[2]=3;
	p2[0]=1;
	for(int i=1;i<=62;++i)p2[i]=2*p2[i-1];
	int t;
	cin>>t;
	while(t--)
	{
		flush();
		cin>>n;
		cout<<rec(0,0,0)<<endl;
	}
}

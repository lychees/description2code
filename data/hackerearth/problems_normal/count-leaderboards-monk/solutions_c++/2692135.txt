#include <iostream>
using namespace std;
typedef long long LL;

const int MOD = 1e9 + 7;
#define N 2123456
 
LL fac[N], ifac[N], dp[N];
int n,k;
 
LL PowerMod(LL a, LL n){
	LL ret = 1;
	while (n){
		if (n & 1){
			ret *= a;
			ret %= MOD;
		}
		a *= a;
		a %= MOD;
		n /= 2;
	}
	return ret;
}

LL com(int n, int r){
	LL ret = fac[n];
	ret *= ifac[r];
	ret %= MOD;
	ret *= ifac[n - r];
	ret %= MOD;
	return ret;
}
 
inline void precompute(){
	int i;
	fac[0] = 1;
	for (i = 1; i < N; i++){
		fac[i] = (i * fac[i - 1]) % MOD;
	}
	ifac[N - 1] = PowerMod(fac[N - 1], MOD - 2);
	for (i = N - 2; i >= 0; i--){
		ifac[i] = ((i + 1) * ifac[i + 1]) % MOD;
	}
	dp[0]=1;
	for(int i=1;i<=n;++i){
		LL a=0;
		for(int j=0;j<i;++j){
			LL t=(fac[j+1]*com(i-1,j))%MOD;
			t=(t*dp[i-1-j])%MOD;
			a = (a+t)%MOD;
			//cout<<com(n-1,j)<<endl;
		}
		dp[i]=a;
	}
}
 

int main()
{
    cin>>n>>k;
    precompute();
    LL ans=(dp[n]*com(n,k))%MOD;
    cout<<ans<<endl;
    return 0;
}

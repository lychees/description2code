#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <bitset>
#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        int n,m,k;
        cin>>n>>m>>k;
        vector<vi> a ( n,vi ( m ) );
        cin>>a;
        vector<vector<bitset<501>>> poss=vector<vector<bitset<501>>> ( n,vector<bitset<501>> ( m ) );
        poss[0][0][a[0][0]]=1;
//         cout<<poss[0][0]<<endl;
        reu ( j,1,m ) poss[0][j]=poss[0][j-1]<<a[0][j];
        reu ( i,1,n ) {
            poss[i][0]=poss[i-1][0]<<a[i][0];
            reu ( j,1,m ) {
                poss[i][j]= ( poss[i-1][j]<<a[i][j] ) | ( poss[i-1][j-1]<<a[i][j] ) | ( poss[i][j-1]<<a[i][j] );
            }
        }
        int j=k;
//         cout<<poss[n-1][m-1]<<endl;
        while(j>=0 &&!poss[n-1][m-1][j])j--;
        cout<<j<<endl;

    }
}

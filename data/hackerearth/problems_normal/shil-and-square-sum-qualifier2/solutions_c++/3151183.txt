// Bismillahirrahmanirrahim
// AgriCoder IPB
#include <cstdio>
#include <iostream>
#include <cmath>
#include <cstring>
#include <string>
#include <cctype>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <functional>
#include <climits>

using namespace std;

#define FOR(i, agri, coder) for (int i = (int)agri; i <= (int)coder; i++)
#define REP(agri,coder) for (int agri = 0; agri < (int)coder; agri++)
#define FOREACH(i,agricoder) for (typeof((agricoder).end()) i = (agricoder).begin(); i != (agricoder).end(); ++i)
#define RESET(agri,coder) memset(agri, coder, sizeof(agri))
#define pb push_back
#define mp make_pair
#define EPS 1e-9
#define INF 0x3F3F3F3F
#define getchar_unlocked getchar
#define NL printf("\n----------------------------\n")

typedef long long ll;
typedef unsigned long long ULL;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef pair<ll,ll> PLL;

int arahbar[8] = {0,1,0,-1,1,1,-1,-1};
int arahkol[8] = {1,0,-1,0,1,-1,-1,1};
int kudabar[8] = {-2,-1,1,2, 2,1 , -1 ,-2};
int kudakol[8] = {1 ,2 ,2,1,-1,-2 , -2,-1};

template<typename T>
T getNum() {
   T res=0;
   char c;
   while(1)
   {
      c=getchar_unlocked();
      if(c==' ' || c=='\n') continue;
      else break;
   }
   bool negatif;
   if (c=='-') {
       negatif = true;
       res = 0;
   }
   else {
       res=c-'0';
       negatif = false;
   }
   while(1)
   {
      c=getchar_unlocked();
      if('0'<=c && c<='9') res=10*res + c-'0';
      else break;
   }
   if (negatif) res*=-1;
   return res;
}

// ================================  TEMPLATE ENDS HERE ================================================== //

#define MAXN 1000005
#define MOD 1000000007

ll arr[MAXN];
ll accu[MAXN];

ll mod(ll res){
  res %=MOD;
  if(res<0) res+=MOD;
  return res;
}

int main() {
	int n = getNum<int>();
	int k = getNum<int>();

	REP(i,n){
		arr[i+1] = getNum<ll>();
    accu[i+1] = accu[i] + arr[i+1];
    accu[i+1]%=MOD;
	}

	ll ans = 0;
  ll delta = 0;

  FOR(i,1,k){
    ans += (ll)mod((ll)i*i)*arr[i];
    ans = mod(ans);

    delta += (ll)(2*i-1)*arr[i];
    delta = mod(delta);
  }

  printf("%lld", ans);

  FOR(i,2,n-k+1){
    ans = ans - delta + (ll)mod((ll)k*k)*arr[i+k-1];
    ans = mod(ans);
    printf(" %lld", ans);

    delta -= arr[i-1];
    delta -= 2LL*(accu[i+k-2] - accu[i-1]);
    delta += (ll)(2*k-1)*arr[i+k-1];
    delta = mod(delta);
  }
	return 0;
}

// Alhamdulillahirabbilalamin
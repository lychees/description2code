#include <cstdio>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <algorithm>
#include <vector>
#include <queue>
#include <vector>
#include <queue>
#include <list>

#define LLI long long int
#define LLU long long unsigned int
#define LI  long int
#define LU  long unsigned
#define MAX(a,b) ((b)^(((a)^(b))&-((a)>(b))))
#define MIN(a,b) ((b)^(((a)^(b))&-((a)<(b))))
#define BUG printf("BUGGEeee");
#define PRINT(n) printf("%d\n",n);
#define MOD 1000000007
#define POWER2(v) (v && !(v & (v - 1)))
#define kk argv[1]
#define FOR(i,n) for(i=0;i<n;i++)




using namespace std;




int main(int argc,char* argv[])
{
	int T,N,M;
	scanf("%d",&T);
	while(T--)
	{
		list<int>lis;
		scanf("%d %d ",&N,&M);
		
		char arr[N][M];
		int index_i,index_j,i,j;
		for(i=0;i<N;i++)
		{
			
			scanf("%s",arr[i]);
		    
		}
		
		
		for(i=0;i<N;i++)
		{
			for(j=0;j<M;j++)
			{
				if(arr[i][j]=='c')
				{
					index_i=i;index_j=j;
					lis.push_back(i);
					lis.push_back(j);
					
				}
			}
		}
		int arrx[8],arry[8],counter=0;
		while(!lis.empty())
		{
			//
			int count=0;
			index_i=lis.front();
			lis.pop_front();
			index_j=lis.front();
			lis.pop_front();
			if(arr[index_i][index_j]!='.' && arr[index_i][index_j]!='*' && arr[index_i][index_j]!='c' )
				{
				continue;
			}
			//BUG;
			counter=0;
			if(index_i!=0 && index_j!=0)
			{
				if(arr[index_i-1][index_j-1]=='.' )
				{
					//lis.push_back(index_i-1);
					//lis.push_back(index_j-1);
					arrx[counter]=index_i-1;
					arry[counter]=index_j-1;
					counter++;
				}
				if(arr[index_i-1][index_j-1]=='*')
				{
					//cout>>index_i>>index_j>>count;
					count++;
				}
			}
			if(index_i!=0 )
			{
				if(arr[index_i-1][index_j]=='.')
				{	
					//lis.push_back(index_i-1);
					//lis.push_back(index_j);
					arrx[counter]=index_i-1;
					arry[counter]=index_j;
					counter++;
				}
			if(arr[index_i-1][index_j]=='*')
				{
					count++;
				}
			}
		if(index_j!=0 )
			{
				if(arr[index_i][index_j-1]=='.')
				{	
					//lis.push_back(index_i);
					//lis.push_back(index_j-1);
					arrx[counter]=index_i;
					arry[counter]=index_j-1;
					counter++;
				}
			if(arr[index_i][index_j-1]=='*')
				{
					count++;
				}
			}
		if(index_i!=N-1 && index_j!=M-1)
			{
				if(arr[index_i+1][index_j+1]=='.')
				{	
					//lis.push_back(index_i+1);
					//lis.push_back(index_j+1);
					arrx[counter]=index_i+1;
					arry[counter]=index_j+1;
					counter++;
				}
				else if(arr[index_i+1][index_j+1]=='*')
				{
					count++;
				}
			}
			if(index_i!=N-1 )
			{
				if(arr[index_i+1][index_j]=='.')
				{	
					//lis.push_back(index_i+1);
					//lis.push_back(index_j);
					arrx[counter]=index_i+1;
					arry[counter]=index_j;
					counter++;
				}
				else if(arr[index_i+1][index_j]=='*')
				{
					count++;
				}
			}
		 if(index_j!=M-1)
			{
				if(arr[index_i][index_j+1]=='.')
				{	
					//lis.push_back(index_i);
					//lis.push_back(index_j+1);
					arrx[counter]=index_i;
					arry[counter]=index_j+1;
					counter++;
				}
				else if(arr[index_i][index_j+1]=='*')
				{
					count++;
				}
			}
			if(index_i!=0 && index_j!=M-1)
			{
				if(arr[index_i-1][index_j+1]=='.')
				{	
					//lis.push_back(index_i-1);
					//lis.push_back(index_j+1);
					arrx[counter]=index_i-1;
					arry[counter]=index_j+1;
					counter++;
				}
				else if(arr[index_i-1][index_j+1]=='*')
				{
					count++;
				}
			}
		 if(index_i!=N-1 && index_j!=0)
			{
				if(arr[index_i+1][index_j-1]=='.')
				{	
					//lis.push_back(index_i+1);
					//lis.push_back(index_j-1);
					arrx[counter]=index_i+1;
					arry[counter]=index_j-1;
					counter++;
				}
				else if(arr[index_i+1][index_j-1]=='*')
				{
					count++;
					
				}
			}
			arr[index_i][index_j]=count+'0';
			if(count==0)
			{
				for(i=0;i<counter;i++)
				{
					if(arr[arrx[i]][arry[i]]!='.' && arr[arrx[i]][arry[i]]!='*' )
				{
				continue;
			}
			else{
					lis.push_back(arrx[i]);
					lis.push_back(arry[i]);
				}
				}
			}
			//cout<<count<<endl;
			//BUG;
		}
		for(i=0;i<N;i++)
		{
			for(j=0;j<M;j++)
			{
				
				printf("%c",arr[i][j]);
			}
			printf("\n");
		}
	}

	
	
	return 0;
}



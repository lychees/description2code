#include<iostream>
#include<stdio.h>
#include<list>
#include<math.h>
using namespace std;
long int N,M,visited[100000],flag=0,flag1=0;
char G[100000],color[100000];
list<long int> L[100000];


void DFS(long int I,char C)
{
    list<long int>::iterator it;
    visited[I]=1;
    for(it=L[I].begin();it!=L[I].end();it++)
    {
        if(visited[*it]!=1)
        {
            if(C=='B')
                color[*it]='P';
            else
                color[*it]='B';
            DFS(*it,color[*it]);
        }
    }
}

void check_cycle()
{
    long int i;
    char V;
    list<long int>::iterator it;
    for(i=1;i<=N;i++)
    {
        V=color[i];
        for(it=L[i].begin();it!=L[i].end();it++)
        {
            if(V==color[*it])
            {
                flag=1;
                break;
            }
        }
        if(flag==1)
            break;
    }
}

void check_cycle1()
{
    long int i;
    char V;
    list<long int>::iterator it;
    for(i=1;i<=N;i++)
    {
        V=color[i];
        for(it=L[i].begin();it!=L[i].end();it++)
        {
            if(V==color[*it])
            {
                flag1=1;
                break;
            }
        }
        if(flag1==1)
            break;
    }
}


int main()
{
    long int i,j,x,y,inversion=0,inversion1=0;
    cin>>N>>M;

    for(i=1;i<=N;i++)
        cin>>G[i];

    for(i=1;i<=N;i++)
        visited[i]=0;

    for(i=1;i<=M;i++)
    {
        cin>>x>>y;
        L[x].push_back(y);
        L[y].push_back(x);
    }


    color[1]='B';
    for(i=1;i<=N;i++)
    {
        if(!visited[i])
            DFS(i,color[i]);
    }
        for(i=1;i<=N;i++)
        {
            if(G[i]=='B' && color[i]=='P')
                inversion++;
            else if(G[i]=='G' && color[i]=='B')
                inversion++;
        }


    check_cycle();

    for(i=1;i<=N;i++)
    {
            color[i]='\0';
            visited[i]=0;
    }

    color[1]='P';
    for(i=1;i<=N;i++)
    {
        if(!visited[i])
            DFS(i,color[i]);
    }
        for(i=1;i<=N;i++)
        {
            if(G[i]=='B' && color[i]=='P')
                inversion1++;
            else if(G[i]=='G' && color[i]=='B')
                inversion1++;
        }
    check_cycle1();



    if(flag==0 && flag1==0)
        cout<<min(inversion,inversion1)<<"\n";
    else if(flag==0 && flag1==1)
        cout<<inversion<<"\n";
    else if(flag==1 && flag1==0)
        cout<<inversion1<<"\n";
    else
        cout<<"Not possible\n";




    return 0;
}

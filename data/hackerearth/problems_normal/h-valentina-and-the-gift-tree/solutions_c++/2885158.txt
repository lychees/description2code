#include <bits/stdc++.h>
#include <unistd.h>

#define FOR(i,a,b) for (int i = (int)(a); i < (int)(b); ++i)
#define REP(i,n) FOR(i,0,n)
#define ll long long
#define pii pair < int, int >
#define x first
#define y second
#define ALL(x) (x).begin(), (x).end()
#define pb push_back

#define TRACE(x) cerr << #x << " = " << x << endl
#define _ << " _ " <<

using namespace std;

const int MAXN = 1e5 + 10;

int N, A[MAXN];
vector<int> V[MAXN];

const ll bla = (ll)(1e9) * (-1000);

struct node {
  ll ans, sum, l, r;

  friend node operator+(const node& lhs, const node& rhs) {
    if (lhs.ans == bla) return rhs;
    if (rhs.ans == bla) return lhs;
    node ret;
    ret.sum = lhs.sum + rhs.sum;
    ret.l = max(lhs.l, lhs.sum + rhs.l);
    ret.r = max(rhs.r, rhs.sum + lhs.r);
    ret.ans = max(lhs.ans, rhs.ans);
    ret.ans = max(ret.ans, lhs.r + rhs.l);
    //ret.ans = max(ret.ans, );
    return ret;
  }
};


int dep[MAXN];
int dad[MAXN][17];
node data[MAXN][17];

void build_lca(int x, int prev) {
  dad[x][0] = prev;
  data[x][0] = {A[x], A[x], A[x], A[x]};
  FOR(i, 1, 17) {
    dad[x][i] = dad[dad[x][i - 1]][i - 1];
    data[x][i] = data[x][i - 1] + data[dad[x][i - 1]][i - 1];
  }
  for (int y : V[x]) {
    if (y == prev) continue;
    dep[y] = dep[x] + 1;
    build_lca(y, x);
  }
}

int lca(int u, int v) {
  if (dep[u] > dep[v]) swap(u, v); // u < v
  for (int i = 16; i >= 0; --i) {
    if (dep[dad[v][i]] >= dep[u]) v = dad[v][i];
  }
  for (int i = 16; i >= 0; --i) {
    if (dad[u][i] == dad[v][i]) continue;
    u = dad[u][i];
    v = dad[v][i];
  }
  if (u == v) return u;
  return dad[u][0];
}

node query(int u, int v, bool swp = false) {
  node ret = {bla, bla, bla, bla};
  for (int i = 16; i >= 0; --i) {
    if (dep[u] - (1 << i) < dep[v]) continue;
    ret = ret + data[u][i];
    u = dad[u][i];
  }
  if (swp) swap(ret.l, ret.r);
  return ret;
}

int main(void) {
  scanf("%d", &N);
  REP(i, N-1) {
    int u, v; scanf("%d%d", &u, &v); --u; --v;
    V[u].pb(v);
    V[v].pb(u);
  }
  
  REP(i, N) scanf("%d", &A[i]); 
  build_lca(0, 0);
/*
  REP(i, N) {
    printf("\n");
    TRACE(i);
    for (int j = 0; j < 2; ++j) TRACE(j _ data[i][j].ans);
  }

  node x = data[1][0] + data[0][0];// + data[2][0];
  TRACE(x.ans _ x.sum _ x.l _ x.r);
*/
  int Q; scanf("%d", &Q);
  while (Q--) {
    int u, v; scanf("%d%d", &u, &v); --u; --v;
    int LCA = lca(u, v);
    node qu = query(u, LCA);
    node qv = query(v, LCA, 1);
    node q = qu + data[LCA][0] + qv;

    //TRACE(qu.ans _ qu.sum _ qu.l _ qu.r);
    //TRACE(qv.ans _ qv.sum _ qv.l _ qv.r);
    //TRACE(q.ans _ q.sum _ q.l _ q.r);
    printf("%lld\n", q.ans);
  }
  

  return 0;
}

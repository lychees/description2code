#include <bits/stdc++.h>


using namespace std;

typedef pair<int,int> PII;
int count_;
int m[1001],w[1001];
vector<pair<int,PII> > edges;

int root_m(int a){
	if(m[a]!=a){
		m[a] = root_m(m[a]);
	}
	return m[a];
}
int root_w(int a){
	if(w[a]!=a){
		w[a] = root_w(w[a]);
	}
	return w[a];
}

void apply_kruskal(){
	for(int i = edges.size()-1;i>=0;i--){
		int a,b,c,d,flag;
		flag = 0;
		a = root_m(edges[i].second.first);
		b = root_m(edges[i].second.second);
		c = root_w(edges[i].second.first);
		d = root_w(edges[i].second.second);
		if(edges[i].first == 3){
			if(a==b && c == d)
				continue;
			count_++;
			if(a!=b)
				m[a] = b;
			if(c!= d){
				//cout << "yes\n";
				w[c] = d;
			}
		}
		else if(edges[i].first == 2){
			if(c==d)
				continue;
			count_++;
			w[c] = d;
		}
		else if(edges[i].first == 1){
			if(a==b)
				continue;
			count_++;
			m[a] = b;
		}
	}
}

int main(){
	count_ = 0;
	int n,l;
	cin >> n >> l;
	for(int i=1;i<=n;i++){
		m[i]=i;
		w[i]=i;
	}
	for(int i=0;i<l;i++){
		int a,b,c;
		cin >> a >> b >> c;
		edges.push_back(make_pair(c,make_pair(a,b)));
	}
	sort(edges.begin(), edges.end());
	apply_kruskal();

	// for(int i=1;i<=n;i++){
	// 	cout << m[i] << " ";
	// }
	// cout << endl;
	// for(int i=1;i<=n;i++){
	// 	cout << w[i] << " ";
	// }
	// cout << endl;
	int flag_m, flag_w;
	flag_w = flag_m = 0;
	for(int i=1; i<=n;i++){
		if(m[i]==i)
			flag_m++;
		if(w[i]==i)
			flag_w++;
	}
	if(flag_w>1 || flag_m>1)
		cout << -1;
	else 
		cout <<(l - count_) ;
}
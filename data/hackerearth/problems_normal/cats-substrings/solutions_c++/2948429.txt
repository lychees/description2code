#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>

using namespace std;

#define NMAX 411111
#define LOGMAX 20
#define SEPARATOR '0'
#define DEBUG 0

char S[NMAX];
int t[NMAX], pmax[NMAX], LS;

void ReadInput() {
	int N, M, i, j, len;
	LS = 0;
	scanf("%d", &N);
	for (i = 1; i <= N; i++) {
		scanf("%s", S + LS + 1);
		len = strlen(S + LS + 1);
		for (j = LS + 1; j <= LS + len; j++) {
			t[j] = 1;
			pmax[j] = LS + len;
		}
		LS += len;
		LS++;
		t[LS] = 1;
		S[LS] = SEPARATOR;
	}
	scanf("%d", &M);
	for (i = 1; i <= M; i++) {
		scanf("%s", S + LS + 1);
		len = strlen(S + LS + 1);
		for (j = LS + 1; j <= LS + len; j++) {
			t[j] = 2;
			pmax[j] = LS + len;
		}
		LS += len;
		LS++;
		t[LS] = 2;
		S[LS] = SEPARATOR;
	}
	if (DEBUG) {
		fprintf(stderr, "S=");
		for (i = 1; i <= LS; i++)
			fprintf(stderr, "%c", S[i]);
		fprintf(stderr, "\n");
	}
}

int bit[LOGMAX];

void ComputeBits() {
	int i;
	bit[0] = 1;
	for (i = 1; i < LOGMAX; i++)
		bit[i] = bit[i - 1] * 2;
}

int group[LOGMAX + 1][NMAX], vs[NMAX], o[NMAX];
vector<pair<int, int> > vps;
vector<pair<pair<int, int>, int> > vps2;

void SuffixArray() {
	int i, j, r, ng = 0;

	vps.resize(LS);
	for (i = 1; i <= LS; i++) {
		vps[i - 1].first = (int) S[i];
		vps[i - 1].second = i;
	}

	sort(vps.begin(), vps.end());
	ng = 0;
	group[0][vps[0].second] = 0;
	vs[1] = vps[0].second;
	for (i = 1; i < LS; i++) {
		if (vps[i].first != vps[i - 1].first || vps[i].first == SEPARATOR)
			ng++;
		group[0][vps[i].second] = ng;
		vs[i + 1] = vps[i].second;
	}
	ng++;

	vps2.resize(LS);
	for (r = 0; r < LOGMAX; r++) {
		for (i = 1; i <= LS; i++) {
			vps2[i - 1].first.first = group[r][vs[i]];
			j = vs[i] + bit[r];
			if (j <= LS)
				vps2[i - 1].first.second = group[r][j];
			else
				vps2[i - 1].first.second = ng;
			vps2[i - 1].second = vs[i];
		}

		sort(vps2.begin(), vps2.end());
		for (i = 0; i < LS; i++)
			vs[i + 1] = vps2[i].second;

		ng = 0;
		group[r + 1][vs[1]] = 0;

		for (i = 2; i <= LS; i++) {
			if (group[r][vs[i]] != group[r][vs[i - 1]] ||
				vs[i] + bit[r] > LS ||
				vs[i - 1] + bit[r] > LS ||
				group[r][vs[i] + bit[r]] != group[r][vs[i - 1] + bit[r]])
				ng++;
			group[r + 1][vs[i]] = ng;
		}

		ng++;
	}

	for (i = 1; i <= LS; i++)
		o[vs[i]] = i;

	if (DEBUG) {
		fprintf(stderr, "Sorted suffixes:\n");
		for (i = 1; i <= LS; i++)
			fprintf(stderr, "%d:%d(%d) ", i, vs[i], t[vs[i]]);
		fprintf(stderr, "\n");
	}
}

int lcp[NMAX];

void ComputeLCPs() {
	int i, j, p, q;

	lcp[1] = 0;
	
	for (i = 2; i <= LS; i++) {
		p = vs[i];
		q = vs[i - 1];
		lcp[i] = 0;

		for (j = LOGMAX - 1; j >= 0 && p <= LS && q <= LS; j--) {
			if (group[j][p] == group[j][q]) {
				lcp[i] += bit[j];
				p += bit[j];
				q += bit[j];
			}
		}
	}

	if (DEBUG) {
		for (i = 2; i <= LS; i++)
			fprintf(stderr, "i=%d: LCP(%d,%d)=%d\n", i, vs[i - 1], vs[i], lcp[i]);
	}
}

int cnt1[NMAX], stk[NMAX][2], nstk;
long long ans, tmp;

void MaxAreaRectangles() {
	int i, j, len, n1, hdif;
	cnt1[0] = 0;
	for (i = 1; i <= LS; i++) {
		cnt1[i] = cnt1[i - 1];
		if (t[vs[i]] == 1) cnt1[i]++;
	}
	nstk = 0;
	ans = 0;
	for (i = 2; i <= LS; i++) {
		j = i;
		while (nstk > 0 && lcp[stk[nstk][0]] >= lcp[i]) {
			if (nstk == 1) hdif = lcp[stk[nstk][0]];
			else hdif = lcp[stk[nstk][0]] - lcp[stk[nstk - 1][0]];
			if (lcp[stk[nstk][0]] - lcp[i] < hdif) hdif = lcp[stk[nstk][0]] - lcp[i];
			j = stk[nstk][1];
			len = i - j + 1;
			n1 = cnt1[i - 1] - cnt1[j - 2];
			tmp = (long long) n1 * (long long) (len - n1) * (long long) hdif;
			ans += tmp;
			if (DEBUG) fprintf(stderr, "[%d-%d]: nstk=%d len=%d n1=%d lcp=%d hdif=%d tmp=%lld ans=%lld\n", j - 1, i - 1, nstk, len, n1, lcp[stk[nstk][0]], hdif, tmp, ans);
			nstk--;
		}
		nstk++;
		stk[nstk][0] = i;
		stk[nstk][1] = j;
	}
	while (nstk > 0) {
		if (nstk == 1) hdif = lcp[stk[nstk][0]];
		else hdif = lcp[stk[nstk][0]] - lcp[stk[nstk - 1][0]];
		j = stk[nstk][1];
		len = LS + 2 - j;
		n1 = cnt1[LS] - cnt1[j - 2];
		tmp = (long long) n1 * (long long) (len - n1) * (long long) hdif;
		ans += tmp;
		if (DEBUG) fprintf(stderr, "[%d-%d]: nstk=%d len=%d n1=%d lcp=%d hdif=%d tmp=%lld ans=%lld\n", j - 1, LS, nstk, len, n1, lcp[stk[nstk][0]], hdif, tmp, ans);
		nstk--;
	}
}

int main() {
	//freopen("x.txt", "r", stdin);
	ReadInput();
	ComputeBits();
	SuffixArray();
	ComputeLCPs();
	MaxAreaRectangles();
	printf("%lld\n", ans);
	return 0;
}

#include<iostream>
using namespace std;

int flag1,flag2;

void findpath1(int arr[][100],int visit[][100],int n,int i,int j){
	if(i==n-1 && arr[i][j]==1){
		flag1=1;
		return;
	}   
	if(i-1>=0){
		if(visit[i-1][j]==0 && arr[i-1][j]==1){
			visit[i-1][j]=1;
			findpath1(arr,visit,n,i-1,j);
		}
	}
	if(i+1<n){
		if(visit[i+1][j]==0 && arr[i+1][j]==1){
			visit[i+1][j]=1;
			findpath1(arr,visit,n,i+1,j);
		}
	}
	if(j-1>=0){
		if(visit[i][j-1]==0 && arr[i][j-1]==1){
			visit[i][j-1]=1;
			findpath1(arr,visit,n,i,j-1);
		}
	}
	if(j+1<n){
		if(visit[i][j+1]==0 && arr[i][j+1]==1){
			visit[i][j+1]=1;
			findpath1(arr,visit,n,i,j+1);
		}
	}
	if(i-1>=0 && j-1>=0){
		if(visit[i-1][j-1]==0 && arr[i-1][j-1]==1){
			visit[i-1][j-1]=1;
			findpath1(arr,visit,n,i-1,j-1);
		}
	}
	if(i+1<n && j-1>=0){
		if(visit[i+1][j-1]==0 && arr[i+1][j-1]==1){
			visit[i+1][j-1]=1;
			findpath1(arr,visit,n,i+1,j-1);
		}
	}
	if(i+1<n && j+1<n){
		if(visit[i+1][j+1]==0 && arr[i+1][j+1]==1){
			visit[i+1][j+1]=1;
			findpath1(arr,visit,n,i+1,j+1);
		}
	}
	if(i-1>=0 && j+1<n){
		if(visit[i-1][j+1]==0 && arr[i-1][j+1]==1){
			visit[i-1][j+1]=1;
			findpath1(arr,visit,n,i-1,j+1);
		}
	}
	
	return;
}
void findpath2(int arr[][100],int visit[][100],int n,int i,int j){
	
	if(j==n-1 && arr[i][j]==2){
		flag2=1;
		return;
	}   
	if(i-1>=0){
		if(visit[i-1][j]==0 && arr[i-1][j]==2){
			visit[i-1][j]=1;
			findpath2(arr,visit,n,i-1,j);
		}
	}
	if(i+1<n){
		if(visit[i+1][j]==0 && arr[i+1][j]==2){
			visit[i+1][j]=1;
			findpath2(arr,visit,n,i+1,j);
		}
	}
	if(j-1>=0){
		if(visit[i][j-1]==0 && arr[i][j-1]==2){
			visit[i][j-1]=1;
			findpath2(arr,visit,n,i,j-1);
		}
	}
	if(j+1<n){
		if(visit[i][j+1]==0 && arr[i][j+1]==2){
			visit[i][j+1]=1;
			findpath2(arr,visit,n,i,j+1);
		}
	}
	if(i-1>=0 && j-1>=0){
		if(visit[i-1][j-1]==0 && arr[i-1][j-1]==2){
			visit[i-1][j-1]=1;
			findpath2(arr,visit,n,i-1,j-1);
		}
	}
	if(i+1<n && j-1>=0){
		if(visit[i+1][j-1]==0 && arr[i+1][j-1]==2){
			visit[i+1][j-1]=1;
			findpath2(arr,visit,n,i+1,j-1);
		}
	}
	if(i+1<n && j+1<n){
		if(visit[i+1][j+1]==0 && arr[i+1][j+1]==2){
			visit[i+1][j+1]=1;
			findpath2(arr,visit,n,i+1,j+1);
		}
	}
	if(i-1>=0 && j+1<n){
		if(visit[i-1][j+1]==0 && arr[i-1][j+1]==2){
			visit[i-1][j+1]=1;
			findpath2(arr,visit,n,i-1,j+1);
		}
	}
	
	return;
	
}
int main(){
    
	int n;
	int arr[100][100];
	int visit[100][100];
	
	cin>>n;
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cin>>arr[i][j];
		}
	}
	
	flag1=0;flag2=0;
	for(int i=0;i<n;i++){
		
		for(int k=0;k<n;k++){
	    	for(int j=0;j<n;j++){
			visit[k][j]=0;
	    	}
    	}	
		visit[0][i] = 1;
		findpath1(arr,visit,n,0,i);
		
		if(flag1==1){
			break;
		}
	}
	
	for(int j=0;j<n;j++){
		
		for(int i=0;i<n;i++){
		    for(int k=0;k<n;k++){
			visit[i][k]=0;
		    }
     	}
		visit[j][0] = 1;
		findpath2(arr,visit,n,j,0);
		if(flag2==1){
			break;
		}
	}
	
	if(flag1 == 1 && flag2 == 1){
		cout<<"AMBIGUOUS"<<endl;
	}else if(flag1 == 1){
		cout<<"1"<<endl;
	}else if(flag2 == 1){
		cout<<"2"<<endl;
	}else{
		cout<<"0"<<endl;
	}
	
	return 0;
}

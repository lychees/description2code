#include <iostream>
#include<stdlib.h>
using namespace std;
struct node
{
	float a;
	float b;
};
struct node1
{
	node * pt;
	node1 * leftp;
	node1 * rightp;
}*root=NULL;

int add(node * pt)
{
	node1 * temp1=new node1;
	temp1->pt=pt;
	temp1->leftp=NULL;
	temp1->rightp=NULL;
	node1 * temp=root;
	if(temp==NULL)
	  root=temp1;
	 else{
	 	node1 * temp2=temp;
	 	char c='a';
	 	while(temp!=NULL)
	 	{
	 		if(pt->a>temp->pt->a)
	 		{
	 			temp2=temp;
	 			c='r';
	 			temp=temp->rightp;
	 		}
	 		else if(pt->a<temp->pt->a)
	 		{
	 			temp2=temp;
	 			temp=temp->leftp;
	 			c='l';
	 		}
	 		else if(pt->a==temp->pt->a)
	 		{
	 			return 0;
	 		}
	 	}
	 	if(c=='r')
	 		temp2->rightp=temp1;
	 	else if(c=='l')
	 	temp2->leftp=temp1;

	 }
	 return 1;

}
float se=-1;
int g=0;
void inord(node1 * temp)
{
    if(temp==NULL)
        return;
        //cout<<temp->pt->a<<"-"<<temp->pt->b<<endl;
    inord(temp->leftp);
    if(temp->pt->a<se)
        {cout<<"Will need a moderator!"<<endl;
            g=1; exit(0);}
             else {
                se=temp->pt->b; g=0;
                //cout<<se<<endl;
             }
             inord(temp->rightp);


}


node * ar[100];
int main()
{
    int n;
    cin>>n;
    int i=0;
    while(i<n)
    {
    	string s;
    	cin>>s;
    	int a=int(s[0])-int('0');
    	int b=int(s[1])-int('0');
    	int c=int(s[3])-int('0');
    	int d=int(s[4])-int('0');
    	int e=int(s[6])-int('0');
    	int f=int(s[7])-int('0');
    	int g=int(s[9])-int('0');
    	int h=int(s[10])-int('0');
    	node * nn=new node;
    	nn->a=10*a + b + 0.100*c + 0.0100*d;
    	nn->b=10*e + f + 0.100*g + 0.0100*h;
    	int k=1;
    	k=add(nn);

    	if(k==0)
         {cout<<"Will need a moderator!"<<endl; break;}
    	i++;
    }
    g=0;
    inord(root);
    if(g==0)
        cout<<"Who needs a moderator?"<<endl;
    return 0;

}

//We use a DP solution:
/* We first sort the road segments to be painted in 
 * increasing order of beginning of segment.
 * Then, we only update the cost when it's good
 * for us to do so. */
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstdio>
using namespace std;
typedef pair<int, int> PII;
typedef pair<PII,int> PPI;
#define INF 900000000

bool cmp(PPI a, PPI b)
{
	return ( (a.first > b.first) or (a.first==b.first and a.second > b.second) );
}

//The DP table which will be filled iteratively with the best possible choices
int dp[257];

int main()
{
	int t,l,k;
	scanf("%d",&t);
	while(t--)
	{
		int a,b,c;
		vector<PPI> v;
		scanf("%d %d",&l,&k);
		for(int i = 0; i < k; i++)
		{
			scanf("%d %d %d",&a,&b,&c);
			v.push_back(make_pair(make_pair(a,b),c));
			sort(v.begin(),v.end());
		}
		for(int i = 0; i <= l; i++)
		{
			dp[i]=INF;
		}
		dp[0]=0;
		for(int i = 0; i < v.size(); i++)
		{
			a=v[i].first.first;
			b=v[i].first.second;
			c=v[i].second;
			for(int j = a; j < b; j++)
			{
				if(dp[j] + c < dp[b])
					dp[b] = dp[j] + c;
			}
			for(int j = a; j < b; j++)
			{
				if(dp[j] > dp[b])
					dp[j] = dp[b];
			}
		}
		if(dp[l]==INF)
			printf("%d\n",-1);
		else
			printf("%d\n",dp[l]);
	}			
	return 0;
}
	


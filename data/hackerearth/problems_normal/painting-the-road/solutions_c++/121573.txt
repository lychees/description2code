#include<stdio.h>
#include<cstdlib>
#include<cstring>
#define INF 1000000009
typedef long long int ll;
struct node
{
    int a,b;
    ll c;
};
ll min_cost[600][600];
struct node p[600];
int compare (const void * a, const void * b)
{
  return ( (*(struct node*)a).b - (*(struct node*)b).b );
}
ll min(ll a, ll b)
{
    return a<b?a:b;
}
int main()
{
    int test_cases;
    int l,k;
    scanf("%d",&test_cases);
    for(int i=0;i<test_cases;i++)
    {
        scanf("%d%d",&l,&k);
        for(int j=0;j<k;j++)
        {
            scanf("%d%d%lld",&(p[j].a),&(p[j].b),&(p[j].c));
        }
        qsort(p,k,sizeof(struct node),compare);
        for(int j=0;j<600;j++)
        {
            min_cost[0][j]=0;
        }
        for(int j=1;j<=l;j++)
        {
            for(int m=0;m<k;m++)
            {
                min_cost[j][m] = INF;
                if(p[m].a<=j && p[m].b>=j)
                {
                    if(m!=0)
                        min_cost[j][m]=min(min_cost[j][m],min(min_cost[j][m-1],min_cost[p[m].a][m-1]+p[m].c));
                    else
                    {
                        if(p[m].a==0)
                            min_cost[j][m]=min(min_cost[j][m],p[m].c);
                    }
                }
                else
                {
                    if(p[m].b < j)
                    {
                        min_cost[j][m]=INF;
                    }
                    if(p[m].a>j)
                    {
                        if(m!=0)
                            min_cost[j][m] = min_cost[j][m-1];
                    }
                }
            }
        }
        if(min_cost[l][k-1]==INF)
        {
            printf("-1\n");
        }
        else
        {
            printf("%lld\n",min_cost[l][k-1]);
        }
    }
}

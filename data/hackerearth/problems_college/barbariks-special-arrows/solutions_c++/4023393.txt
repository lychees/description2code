#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
 
using namespace std;
typedef long long ll;
 
vector<int> gr[1000];
int used[1000];
map<int, int> map1, map2;
int f1, f2;
int matchL[1000], matchR[1000];
 
bool dfs(int u) {
    for (size_t i = 0; i < gr[u].size(); i++) {
        int v = gr[u][i];
        if (used[v])
            continue;
        used[v] = true;
 
        if (matchR[v] == -1 || dfs(matchR[v])) {
            matchL[u] = v;
            matchR[v] = u;
            return true;
        }
    }
    return false;
}
 
int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        f1 = f2 = 0;
        map1.clear();
        map2.clear();
        for (int i = 0; i < 1000; ++i)
            gr[i].clear();
        memset(matchL, -1, sizeof(matchL));
        memset(matchR, -1, sizeof(matchR));
 
        int n;
        scanf("%d", &n);
        while (n--) {
            int x, y;
            scanf("%d%d", &x, &y);
 
            if (map1.find(x) == map1.end()) {
                map1[x] = f1++;
            } 
            if (map2.find(y) == map2.end()) {
                map2[y] = f2++;
            } 
            gr[map1[x]].push_back(map2[y]);
        }
 
        int count = 0;
        for (int i = 0; i < f1; ++i) {
            memset(used, 0, sizeof(used));
            if (dfs(i))
                count++;
        }
        printf("%d\n", count);
    }
}
 
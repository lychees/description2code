#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef unsigned long long ull;

const ull MOD = 1000000007;


int pmax(int n,vector<int> &prim){
	int ret,retcnt=0;
	for(int i=0; prim[i]*prim[i]<=n; i++){
		int cnt=0;
		while(n%prim[i]==0)
			n/=prim[i],cnt++;
		if(cnt>retcnt)retcnt=cnt,ret=prim[i];
	}
	if(n>1){
		if(retcnt==0)ret=n;
		else if(retcnt==1)ret=min(ret, n);
	}
	return ret;
}

bool dcd_op(int n,int r, vector<int> &primes){
	int ind=pmax(n,primes);
	if((ind%r)&1) return 1;
	else return 0;
}


int main()
{
	vector<int> primes;
	vector<bool> arr(500001,1);
	for(int i=2;i*i<500001;i++){
		if(arr[i]){
			for(int j=i*i;j<500001;j+=i){
				arr[j] = 0;
			}
		}
	}
	for(int i=2;i<500001;i++){
		if(arr[i]) primes.push_back(i);
	}
	
	int n,l;
	cin>>n>>l;
	vector<ull> input(n);
	for(int i=0;i<n;i++){
		cin>>input[i];
	}
	vector<bool> ops(l,1);
	//int harm_ops=0;
	for(int i=1;i<l;i++){
		if(i&1)
			ops[i] = dcd_op(i+1,i+1,primes);
		else if(arr[i+1]) ops[i] = 0;
	}
//	vector<ull> result = input; 
	sort(input.begin(),input.end());
	int low = 0,high = n-1;
	for(int i=0;i<l;i++){
		if(low <= high){
			if(ops[i]){
				input[high] = (input[high]*2)%MOD;
			}else{
				input[low] /= 2;
				if(input[low] == 0) low++;
			}
		}else break;
	}
	int ans = high-low+1;
	cout<<ans<<endl;
	for(int i=low;i<=high;i++){
		cout<<input[i]<<" ";
	}
}

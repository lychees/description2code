#include <bits/stdc++.h>
using namespace std;
bool lazy[800005] ;int t[800005] ;
string s ;
void lazy1(int node,int a,int b){
    if(lazy[node]){
        lazy[node] = false ;
        t[node] = b-a+1 - t[node] ;
        if(a != b){
            lazy[node*2+1] = !lazy[node*2+1] ;
            lazy[node*2+2] = !lazy[node*2+2] ;
        }
    }
}
void update(int node, int a, int b, int i, int j) {

    lazy1(node,a,b) ;

    if( a > j || b < i)
        return;

    if(a >= i && b <= j) {
        t[node] = b-a+1 - t[node] ;
        if(a != b) {
            lazy[node*2+1] = !lazy[node*2+1] ;
            lazy[node*2+2] = !lazy[node*2+2] ;
        }
        return;
    }

    update(node*2+1, a, (a+b)/2, i, j);
    update(node*2+2, 1+(a+b)/2, b, i, j);
    t[node] = t[node*2+1] + t[node*2+2] ;
}
int query(int node, int a, int b, int i, int j) {

    if(a > j || b < i) return 0 ;

    lazy1(node,a,b) ;

    if(a >= i && b <= j)
        return t[node];

    int q1 = query(node*2+1, a, (a+b)/2, i, j);
    int q2 = query(node*2+2, 1+(a+b)/2, b, i, j);

    int res = q1+q2 ;

    return res;
}
void build(int node ,int i ,int j){
    if(i == j){
        t[node] = s[i] == '<' ? 1 : 0 ;
        return ;
    }
    build(node*2+1,i,(i+j)/2) ;
    build(node*2+2,(i+j)/2+1,j) ;
    t[node] = t[node*2+1] + t[node*2+2] ;
}
int main()
{
    int n  , m;scanf("%d%d",&n,&m) ;
    cin >> s ;
    build(0,0,n-2) ;
    int t ,x , y , z ;
    for(int i = 0 ;i < m ; i++){
        scanf("%d",&t) ;
        if(t == 1){
            scanf("%d%d",&x,&y) ;
            update(0,0,n-2,x-1,y-2) ;
        }
        else {
            scanf("%d%d",&x,&y) ;
            x -- ;
            y -- ;
            if(x == y){
                printf("0\n") ;
            }
            else if(x < y){
                printf("%d\n",query(0,0,n-2,x,y-1)) ;
            }
            else {
                swap(x,y) ;
                printf("%d\n",max(0,y-x-query(0,0,n-2,x,y-1))) ;
            }
        }
    }
    return 0;
}

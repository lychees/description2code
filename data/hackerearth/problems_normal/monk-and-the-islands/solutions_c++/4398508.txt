//DEEPAK AHIRE
#include <bits/stdc++.h>
using namespace std;
 
#define MAX 100005
#define INF 100000009
 
int n;
vector<int> adj[MAX];
 
map<pair<int,int> ,int > wei;
 
int dist[MAX];
 
int visited[MAX];
 
struct node
{
    int id;
    int distance;
 
    bool operator < (const node& t) const
    {
        if(distance >= t.distance) return true;
        return false;
    }
};
 
 
void addEdge(int x,int y,int w)
{
 
    adj[x].push_back(y);
    adj[y].push_back(x);
 
    wei[make_pair(x,y)]=w;
    wei[make_pair(y,x)]=w;
 
}
 
priority_queue <node> que;
 
int dijkstra(int source)
{
    node temp;
    temp.id=source;
    temp.distance=0;
    dist[source]=0;
 
    que.push(temp);
 
    while(!que.empty())
    {
        node temp = que.top();
        visited[temp.id]=2;
        que.pop();
 
        for(int i=0;i<adj[temp.id].size();i++)
        {
                if(visited[adj[temp.id][i]] != 2)
                {
                   if(temp.distance + wei[make_pair(temp.id,adj[temp.id][i])] < dist[adj[temp.id][i]])
                   {
 
                       dist[adj[temp.id][i]] = temp.distance + wei[make_pair(temp.id,adj[temp.id][i])];
                       visited[adj[temp.id][i]]=1;
 
 
                       node temp2;
                       temp2.id=adj[temp.id][i];
                       temp2.distance=dist[adj[temp.id][i]];
 
                       que.push(temp2);
 
                   }
                }
        }
    }
    return dist[n];
}
 
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
 
 
        memset(dist,INF,sizeof(dist));
        int m;
        scanf("%d %d",&n,&m);
 
        while(m--)
        {
            int x,y,r=1;
            scanf("%d %d",&x,&y);
            addEdge(x,y,r);
 
        }
 
 
        cout<<dijkstra(1)<<endl;
       //     cout<<dist[i]<<" ";
       // cout<<endl;
        // Reset
        memset(dist,INF,sizeof(dist));
        memset(visited,0,sizeof(visited));
        for(int i=0;i<=n;i++)
            adj[i].clear();
        wei.clear();
    }
 
    return 0;
}

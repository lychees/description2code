/**
Prashant Gupta(GHOST_YO)
IIITA
**/
#include <bits/stdc++.h>
using namespace std;
#define For(i,a,b) for(i=a;i<b;i++)
#define Ford(i,a,b) for(i=a;i>=b;i--)
#define Rep(i,c) for(__typeof(c.begin()) it(c.begin());i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define modul 1000000007
#define infi 99999999
#define BUG(x) {cout<<#x<<" = "<<x<<endl;}
#define PR(x,a,b) {For(i,a,b+1)cout<<x[i]<<' ';cout<<endl;}
#define FILL(a,x) memset(a,x,sizeof(a));
#define sc(a) scanf("%d", &a)
#define scl(a) scanf("%lld", &a)
#define pii pair<int,int>
#define ll long long
#define PI acos(-1)
#define gc getchar
#define pc putchar
#define TIN {cout<<"Time started\n";time_t __t_v=clock();
#define TOUT cout<<"Time Taken : "<<(clock()-__t_v)/(double)CLOCKS_PER_SEC<<"\n";}

inline void scanint(int &x){register int c=0;x=0;int flag=0;for(;((c!=45)&&(c<48||c>57));c=gc());
for(;((c==45)||(c>47&&c<58));c=gc()){if(c==45)flag=1;else x=(x<<1)+(x<<3)+c-48;}if(flag)x=-x;}

struct edge
{
    ll c;
    int a,b;
} e[1000005];

int parent[50005], rannk[50005], deg[50005];

bool cmp(edge e1, edge e2)
{
    if(e1.c != e2.c)
        return e1.c < e2.c;
    if(e1.a != e2.a)
        return e1.a > e2.a;
    return e1.b > e2.b;
}

int findset(int u) {
    if (parent[u] != u)
    parent[u] = findset(parent[u]);
    return parent[u];
}

void unionset(int u, int v) {
    u = findset(u); v = findset(v);
    if (rannk[u] > rannk[v])
        parent[v] = u;
    else {
        parent[v] = u;
        if (rannk[u] == rannk[v])
            rannk[u]++;
    }
}

int main()
{
    int t,n,m,i,j,k,l,count,temp,sum,flag;
    ll ans = 0;
    sc(t);

    while(t--) {
        sc(n), sc(m);

        For(i, 0, m) {
            sc(k), sc(l);
            if(k > l)
                swap(k, l);
            e[i].a = k;
            e[i].b = l;
            scl(e[i].c);
        }

        sort(e, e + m, cmp);

        For(i, 1, n+2)
            parent[i] = i, rannk[i] = 0, deg[i] = 0;

        ans = 0;
        For(i, 0, m) {
            if(findset(e[i].a) != findset(e[i].b)) {
                ans += e[i].c;
                unionset(e[i].a, e[i].b);
                deg[e[i].a]++;
                deg[e[i].b]++;
            }
        }
        cout << ans << endl;
        For(i, 1, n+1)
            cout << deg[i] << " ";
        cout << endl;
    }

    return 0;
}

// Headers
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cassert>
#include<cstdlib>
#include<vector>
#include<map>
#include<fstream>
#include<functional>
#include<list>
#include<stack>
#include<queue>
#include<algorithm>
#include<bitset>
#include<set>
using namespace std;
// Global declarations
typedef long long int ll;
typedef vector<int> vi;
typedef vector<char> vc;
typedef pair<int, int> pi;
const int mod = 1e9 + 7;
const int INF = 1 << 25;
// Macros
#define mp make_pair
#define el putchar('\n')
#define sp putchar(' ')
#define Fill(a,val) memset(a,val,sizeof a)
#define ff first
#define ss second
#define pb push_back
#define ppb pop_back
#define gcd __gcd
#define all(a) a.begin(),a.end()


#define f(i,a,b) for(int i=a;i<b;i++)
int main(){
	int n, m, s, d;
	n = 501; cin >> m;
	vector<pi> *G = new vector<pi>[n + 5];
	int a, b, c;
	f(i, 0, m)
	{
		cin >> a >> b >> c;
		G[a].pb(mp(b, c));
		G[b].pb(mp(a, c));
	}
	bool *visited = new bool[n + 5];
	memset(visited, false, sizeof(visited));
	int *ans = new int[n + 1];
	f(i, 0, n + 1)
	{
		ans[i] = INF;
	}
	cin >> s;
	ans[s] = 0;
	priority_queue<pi, vector<pi>, greater<pi> > Q;
	Q.push(mp(0, s));
	while (!Q.empty()){
		pi p = Q.top();
		Q.pop();
		if (visited[p.second]) continue;
		visited[p.second] = true;
		f(i, 0, G[p.second].size())
		{
			int b = G[p.second][i].first;
			int c = G[p.second][i].second;
			if (!visited[b])
			{
				ans[b] = min(ans[b], ans[p.second] + c);
				Q.push(mp(ans[b], b));
			}

		}
	}
	int q;
	cin >> q;
	while (q--){
		cin >> d;
		if (ans[d] >= INF)
			cout << "NO PATH\n";
		else
			cout << ans[d], el;
	}
	return 0;
}

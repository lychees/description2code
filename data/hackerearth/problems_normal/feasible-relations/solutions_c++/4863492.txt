#include <iostream>
#include <string>
#include <vector>
using namespace std;
#define mp make_pair
#define vi vector<int>
const int MAXN = 1000000;
vi g[MAXN];
int cc[MAXN];
bool visited[MAXN];
void dfs(int v, int id)
{
	int i;
    visited[v] = 1;
    cc[v] = id;
    for(i=0; i<g[v].size();i++)
    {
        int u = g[v][i];
        if(!visited[u]) dfs(u, id);
    }
}
int main()    
{
    int t,i;
    cin >> t;
    while(t--)
    {
        int n, m;
        cin >> n >> m;
        for(i=0;i<n;i++)
        {
        	visited[i] = 0;
        	g[i].clear();
        }
        vector<pair<int ,int> > bad_edges;
        for(i=0;i<m;i++)
        {
            int v, u;
            string relation;
            cin >> v >> relation >> u;
           // --v; --u;
            if(relation == "=")
            {
                g[v].push_back(u);
                g[u].push_back(v);
            }
            else
            {
                bad_edges.push_back(mp(v, u));
            }
        }
        for(i=0;i<n;i++)
        {
            if(!visited[i])
            {
                dfs(i, i);
            }
            
        }
        int fail = 0;
        for(i=0;i<bad_edges.size();i++)
        {
            int v = bad_edges[i].first;
            int u = bad_edges[i].second;
            if(cc[v] == cc[u])
            {
                fail = 1;
                break;
            }
        }
        if(fail) cout << "NO" << endl;
        else cout << "YES" << endl;
    }
    return 0;
}
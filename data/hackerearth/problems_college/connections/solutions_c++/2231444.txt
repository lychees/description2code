#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int vertices;
int adj[1000][1000];
int wt[1000][1000];
int dist[10000];
int path[1000];
map<int,int>pq;
map <int,int> f;
void dij(int v){
    pq[v]=0;
    dist[v]=0;
    f[v]=0;
   // cout<<" "<<v<<" 0 path"<<path[v]<<" "<<endl;
    while(!pq.empty()){
        int p=pq.begin()->first;
        int l=pq.begin()->second;
        pq.erase(pq.begin());
        f[p]=l;
     ///   cout<<" "<<p<<" dist "<<l<<"path"<<path[p]<<" "<<endl;
        for(int i=0;i<=vertices;i++)
        {
         if(adj[p][i]==1)
        {int d=wt[p][i]+dist[p];
        if(dist[i]==-1)
        {
            dist[i]=d;
            pq[i]=d;
            path[i]=p;

        }
        if(d<dist[i])
        {
            dist[i]=d;
            pq[i]=d;
            path[i]=p;

        }

        }
        }
    }



}
int main()
{
    cin>>vertices;
    int edges;
    cin>>edges;
    while(edges--){
     int n,m,w;
    
     cin>>n>>m;
     w=1;
     adj[n][m]=1;
     wt[n][m]=w;
     adj[m][n]=1;
     wt[m][n]=w;

    }
    int q;
    cin>>q;
    while(q--)
    {
    	int a,b;
    	cin>>a>>b;
    	if(adj[a][b]==1)
    {cout<<"Direct Connection"<<endl;
    continue;
    }
   memset(dist,-1,sizeof dist);
  
    dij(a);
    map<int,int> ::iterator it;
   if(f.find(b)==f.end())
   cout<<"No Connection"<<endl;
   else if(f.find(b)!=f.end())
   {
   	it=f.find(b);
   	if(it->second==-1)
   	cout<<"No Connection"<<endl;
   	   else
   cout<<"Indirect Connection"<<endl;
   	
   }

   }
   
    return 0;
}

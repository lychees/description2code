/*
By : Yash Kumar
Dhirubhai Ambani Institute Of Information And Communication Technology, Gandhinagar (DA-IICT GANDHINAGAR)
1st Year ICT BTECH student
*/
#include<bits/stdc++.h>

#define lli long long int
#define llu unsigned long long int
#define all(v) v.begin(),v.end()

const double EPS = 1e-24;
const lli MOD = 1000000007ll;
const double PI = 3.14159265359;
int INF = 2147483645;
lli INFINF = 9223372036854775807;

template <class T>T Max2(T a,T b){return a<b?b:a;}
template <class T>T Min2(T a,T b){return a<b?a:b;}
template <class T>T Max3(T a,T b,T c){return Max2(Max2(a,b),c);}
template <class T>T Min3(T a,T b,T c){return Min2(Min2(a,b),c);}
template <class T>T Max4(T a,T b,T c,T d){return Max2(Max2(a,b),Max2(c,d));}
template <class T>T Min4(T a,T b,T c,T d){return Min2(Min2(a,b),Max2(c,d));}

using namespace std;

struct Node
{
    lli sqsum;
    lli sum;
    lli len;
    lli add;
};

lli N;
lli a[200010];
map<lli,lli> Map;
Node segtree[800010];
lli ans;

Node newNode(lli _sum,lli _len)
{
    Node temp;
    temp.sqsum=_sum*_sum;
    temp.sum=_sum;
    temp.add=0;
    temp.len=_len;
    return temp;
}

Node combine(Node a,Node b)
{
    Node temp;
    temp.sqsum=a.sqsum+b.sqsum;
    temp.len=a.len+b.len;
    temp.sum=a.sum+b.sum;
    temp.add=a.add+b.add;
    return temp;
}

void lazy(lli idx,lli yes)
{
    if(yes)
    {
        segtree[2*idx+1].add+=segtree[idx].add;
        segtree[2*idx+2].add+=segtree[idx].add;
    }
    segtree[idx].sqsum+=((2*segtree[idx].sum*segtree[idx].add)%MOD + (segtree[idx].add*segtree[idx].add*segtree[idx].len)%MOD )%MOD;
    segtree[idx].sqsum%=MOD;
    segtree[idx].sum+=segtree[idx].len*segtree[idx].add;
    segtree[idx].sum%=MOD;
    segtree[idx].add=0;
}

void build(lli s,lli e,lli idx)
{
    if(s==e)
        segtree[idx]=newNode(0,1);
    else
    {
        lli mid=(s+e)/2;
        build(s,mid,2*idx+1);
        build(mid+1,e,2*idx+2);
        segtree[idx]=combine(segtree[2*idx+1],segtree[2*idx+2]);
    }
}

lli update(lli s,lli e,lli x,lli y,lli idx)
{
    if(s==x && e==y)
    {
        lli ret=segtree[idx].sum+segtree[idx].len*segtree[idx].add;
        segtree[idx].add++;
        return ret%MOD;
    }
    lazy(idx,1);
    lli down=0;
    lli mid=(s+e)/2;
    if(y<=mid)
        down+=update(s,mid,x,y,2*idx+1);
    else if(x>mid)
        down+=update(mid+1,e,x,y,2*idx+2);
    else
    {
        down+=update(s,mid,x,mid,2*idx+1);
        down+=update(mid+1,e,mid+1,y,2*idx+2);
        down%=MOD;
    }
    segtree[idx].sqsum+=2*down+(y-x+1);
    if(segtree[idx].sqsum>MOD)
        segtree[idx].sqsum%=MOD;
    segtree[idx].sum+=(y-x+1);
    if(segtree[idx].sum>MOD)
        segtree[idx].sum-=MOD;
    return down;
}

lli query(lli s,lli e,lli x,lli y,lli idx)
{
    if(s==x && e==y)
    {
        if(s==e)
            lazy(idx,0);
        else
            lazy(idx,1);
        lli ret=(segtree[idx].sqsum);
        return ret;
    }
    lazy(idx,1);
    lli mid=(s+e)/2;
    if(y<=mid)
        return query(s,mid,x,y,2*idx+1);
    else if(x>mid)
        return query(mid+1,e,x,y,2*idx+2);
    else
        return query(s,mid,x,mid,2*idx+1)+query(mid+1,e,mid+1,y,2*idx+2);
}

int main()
{
    std::ios::sync_with_stdio(false);
    //cin.tie(NULL);
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);

    cin>>N;
    for(int i=0;i<N;i++)
        cin>>a[i];
    build(0,N-1,0);
    for(int i=0;i<N;i++)
    {
        lli idx=-1;
        map<lli,lli>::iterator it=Map.find(a[i]);
        if(it==Map.end())
            idx=-1;
        else
            idx=it->second;
        update(0,N-1,idx+1,i,0);

        /*for(int j=0;j<N;j++)
            cout<<query(0,N-1,j,j,0)<<" ";
        cout<<"\n";*/

        ans+=query(0,N-1,0,i,0);
        if(ans>MOD)
            ans%=MOD;
        //cout<<ans<<"\n";
        Map[a[i]]=i;
    }
    cout<<ans;


    return 0;
}


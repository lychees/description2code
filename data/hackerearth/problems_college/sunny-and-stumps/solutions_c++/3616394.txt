#include<bits/stdc++.h>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<stack>
#include<queue>
using namespace std;
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define rep(i,n) for(int i = 0;i<n;i++)
#define range(i,a,b) for(int i = a;i<=b;i++)
#define c(x) cin>>x
#define p(x) cout<<x
#define author dipjal
const int SIZE = 1e5 + 5;
const long long int mod = 1e9 + 7;
 
typedef unsigned long long int ull;
typedef long long int ll;
typedef pair<int,int> pii;
 
int N,M,u,v,m,A,B,C;
int x;
int gcd(int a,int b){
    return(!b?a:gcd(b,a%b));
}
bool comp(const pair<pii,float>& p1,const pair<pii,float>& p2){
 if(p1.first.first!=p2.first.first)
    return p1.first.first<p2.first.first;
 if(p1.first.second!=p2.first.second)
    return p1.first.second<p2.first.second;
 return p1.second<p2.second;
}
ll pow(int x,int y,int m){
    ll res = 1LL;
    while(y){
            if(y%2)
            res = (res*x)%m;
    x = (x*x)%m;
    y>>=1;
    }
    return res;
}
 
#define getcx getchar_unlocked
inline int scan()//fast input function
{
   int n=0;
   int ch=getcx();int sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
 
   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   n=n*sign;
   return n;
}
//pair<pair<int,int>,double> pp[SIZE];
int main(){
    int tt;
    int N;
    tt = scan();
    while(tt--){
            N = scan();
            pair<pair<int,int>,double> *pp = (pair<pair<int,int > , double > *)malloc(N*sizeof(pair<pair<int,int>,double>));
    rep(i,N){
        A = scan(),B = scan(),C = scan();
        int g = gcd(A,B);
        A/=g,B/=g;
        double c = (double)C/(double)g;
       pp[i] = mp(mp(A,B),c);
    }
    sort(pp,pp+N,comp);
    ll maxi = 0LL;
    ll cnt = 1;
    range(i,1,N-1){
    if(pp[i].first.first==pp[i-1].first.first&&pp[i].first.second==pp[i-1].first.second&&pp[i].second==pp[i-1].second) continue;
    if(pp[i].first.first==pp[i-1].first.first&&pp[i].first.second==pp[i-1].first.second){ ++cnt;continue;}
    maxi = max(maxi,cnt);
    cnt = 1;
    }
    maxi = max(maxi,cnt);
    //print(maxi);
    printf("%lld\n",maxi);free(pp);}
    return 0;
}   
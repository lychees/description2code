#include<bits/stdc++.h>
#define mp make_pair
#define PII pair<int,int>
#define fi first
#define se second
using namespace std;

struct cell
{
    int x,y,in;
};
const int NMAX=1000005;
const int LIMIT=1000005;

int n,k,a[22][NMAX],sum[NMAX],st[NMAX],lc[NMAX];
char s[NMAX];
cell b[NMAX],c[NMAX];

int LCP(int x,int y)
{
    int pw,rez=0;
    for (pw=19;pw>=0;pw--)
        if ((x+(1<<pw)-1)<=n && (y+(1<<pw)-1)<=n && a[pw][x]==a[pw][y])
        {
            rez+=1<<pw;
            x+=1<<pw;
            y+=1<<pw;
        }
    return rez;
}

int main()
{
    int i,j,pr,ul,sol;

    cin.sync_with_stdio(false);
    cin>>k>>n>>(s+1);
    if (k==1) {cout<<n<<"\n";return 0;}
    //suffix array
    for (i=1;i<=n;i++) a[0][i]=s[i]-'a'+1;
    for (j=1;(1<<(j-1))<n;j++)
            {
                for (i=1;i<=n;i++)
                    {
                        b[i].x=a[j-1][i];
                        b[i].y=a[j-1][min(n+1,i+(1<<(j-1)))];
                        b[i].in=i;
                    }
                //radix
                for (i=0;i<LIMIT;i++) sum[i]=0;
                for (i=1;i<=n;i++) sum[b[i].y]++;
                for (i=1;i<LIMIT;i++) sum[i]+=sum[i-1];
                for (i=n;i>=1;i--)
                    {
                        c[sum[b[i].y]]=b[i];
                        sum[b[i].y]--;
                    }
                for (i=1;i<=n;i++) b[i]=c[i];

                for (i=0;i<LIMIT;i++) sum[i]=0;
                for (i=1;i<=n;i++) sum[b[i].x]++;
                for (i=1;i<LIMIT;i++) sum[i]+=sum[i-1];
                for (i=n;i>=1;i--)
                    {
                        c[sum[b[i].x]]=b[i];
                        sum[b[i].x]--;
                    }
                for (i=1;i<=n;i++) b[i]=c[i];

                a[j][b[1].in]=1;
                for (i=2;i<=n;i++)
                    if (b[i].x==b[i-1].x && b[i].y==b[i-1].y)
                        a[j][b[i].in]=a[j][b[i-1].in];
                    else a[j][b[i].in]=a[j][b[i-1].in]+1;
            }
    pr=1;ul=sol=0;
    for (i=1;i<n;i++)
        {
            lc[i]=LCP(b[i].in,b[i+1].in);
            while (ul>=pr && lc[st[ul]]>=lc[i]) ul--;
            st[++ul]=i;
            if (st[pr]<=((i+1)-k)) pr++;
            if (i>=(k-1))
            sol=max(sol,lc[st[pr]]);
        }
    cout<<sol<<"\n";
    return 0;
}


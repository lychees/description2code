// {{{ Headers
// vim:filetype=cpp:foldmethod=marker:foldmarker={{{,}}}

#include <cassert>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#include <algorithm>
#include <deque>
#include <functional>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#include <fstream>
#include <iostream>
#include <sstream>

#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;
// }}}

typedef long long int64;
const int INF = 0x3f3f3f3f;
template <class T> inline int len (const T &a) { return a.size (); }

#define MAXN 1000005
int prime [MAXN];
vector <int64> p;
int64 cf [MAXN];

bool
check (int n) {
    while (n) {
        if (n % 10 == 7) return true;
        n /= 10;
    }
    return false;
}

void
sieve (int n) {
    int x = n;
    memset (prime, true, sizeof (prime));
    p.clear ();
    prime [0] = prime [1] = false;
    p.push_back (2);
    for (int i = 4; i <= n; i += 2) prime [i] = false;
    for (int64 i = 3; i <= n; i += 2)
        if (prime [i]) {
            p.push_back (i);
            for (int64 j = i * i; j <= n; j += i) prime [j] = false;
        }
    memset (cf, 0, sizeof (cf));
    for (int i = 1; i <= x; i++)
        if (! prime [i] && check (i)) cf [i] = cf [i - 1] + 1;
        else cf [i] = cf [i - 1];
}

int
main () {
#ifdef LOCALHOST
    freopen ("test.in", "r", stdin);
    // freopen ("test.out", "w", stdout);
#endif
    sieve (1000000);
    //print (cf, 20);
    int T;
    scanf ("%d", &T);
    while (T--) {
        int a, b;
        scanf ("%d %d", &a, &b);
        int64 ret = cf [b] - cf [a - 1];
        if (ret == 0) ret = -1;
        printf ("%lld\n", ret);
    }

    return 0;
}


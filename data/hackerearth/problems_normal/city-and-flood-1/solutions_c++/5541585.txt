#include<iostream>
#include<set>
using namespace std;
int *a,*s;
int find(int *,int,int);
void unionof(int *,int,int);
int root(int *,int);
int main()
{
	set<int> ss;
	int node;
	cin>>node;
	a=new int[node+1];
	s=new int[node+1];
	int edge;
	cin>>edge;
	for(int i=1;i<=node;i++)
	{
		a[i]=i;
		s[i]=1;
	}
	int x,y;
	for(int i=1;i<=edge;i++)
	{
		cin>>x>>y;
		int ispresent=find(a,x,y);
		if(ispresent==0)
		unionof(a,x,y);
	}
	int count=0;
    for(int i=1;i<=node;i++)
    {
    	if(i==a[i])
    	count++;
    }
    cout<<count<<"\n";
}
void unionof(int *a,int x,int y)
{
	int a1,b1;
	a1=root(a,x);
	b1=root(a,y);
	if(s[a1]>s[b1])
	{
		a[b1]=a1;
		s[a1]+=s[b1];
	}
	else
	{
		a[a1]=b1;
		s[b1]+=s[a1];
	}
}
int root(int *a,int x)
{
	while(x!=a[x])
	x=a[x];
	return x;
}
int find(int *a,int x,int y)
{
	int a1,b1;
	a1=root(a,x);
	b1=root(a,y);
	if(a1==b1)
	return 1;
	else 
	return 0;
	
}
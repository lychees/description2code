#include <algorithm>
#include <assert.h>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits.h>
#include <list>
#include <map>
#include <math.h>
#include <memory.h>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string.h>
#include <string>
#include <utility>
#include <vector>
using namespace std;
int n, m, ans, ans1 = 0, ans2 = 0;
char a[25][25];
string func(int x1, int y1, int x2, int y2) {
  string s, t = "";
  for (int i = 0; i < (x2 - x1); i++)
    for (int j = 0; j < (y2 - y1); j++)
      t = t + a[x1 + i][y1 + j];
  s = t;
  t = "";
  for (int i = 0; i < (x2 - x1); i++)
    for (int j = 0; j < (y2 - y1); j++)
      t = t + a[x2 - i - 1][y2 - j - 1];
  if (t < s)
    s = t;
  if ((x2 - x1) == (y2 - y1)) {
    t = "";
    for (int j = 0; j < (y2 - y1); j++)
      for (int i = 0; i < (x2 - x1); i++)
        t = t + a[x2 - i - 1][y1 + j];
    if (t < s)
      s = t;
    t = "";
    for (int j = 0; j < (y2 - y1); j++)
      for (int i = 0; i < (x2 - x1); i++)
        t = t + a[x1 + i][y2 - j - 1];
    if (t < s)
      s = t;
  }
  return s;
}
int solve(int x, int y) {
  vector<string> v;
  v.clear();
  for (int i = 0; i < (n / x); i++)
    for (int j = 0; j < (m / y); j++)
      v.push_back(func(i * x, j * y, (i + 1) * x, (j + 1) * y));
  sort(v.begin(), v.end());
  bool f = true;
  for (int i = 0; i < v.size() - 1; i++)
    if (v[i] == v[i + 1])
      f = false;
  if (f) {
    ans++;
    if (ans == 1 || ans1 * ans2 > x * y) {
      ans1 = x;
      ans2 = y;
    }
  }
}
int main() {
  ans = 0;
  scanf("%d%d", &n, &m);
  for (int i = 0; i < n; i++)
    for (int j = 0; j < m; j++)
      cin >> a[i][j];
  for (int i = 1; i <= n; i++)
    if (n % i == 0)
      for (int j = 1; j <= m; j++)
        if (m % j == 0)
          solve(i, j);
  cout << ans << endl << ans1 << " " << ans2 << endl;
  return 0;
}

#include<iostream>
#include<string>
using namespace std;
void merge(char* a,int p, int q, int r)
{
    int n1=q-p+1;
    int n2=r-q;
    int* l=new int[n1+1];
    int* ri=new int[n2+1];
    for(int i=0;i<n1;i++)
    {
        l[i]=a[p+i];
    }
    for(int j=0;j<n2;j++)
    {
        ri[j]=a[q+j+1];
    }
    l[n1]=9999999;
    ri[n2]=9999999;
    int m=0;
    int n=0;
    int x=r-p;
    for(int k=p;k<=r;k++)
    {
        if(l[m]<=ri[n])
        {a[k]=l[m];
        m++;
        }
        else
        {
            a[k]=ri[n];
            n++;

        }

    }



}
void divide(char* a, int p, int r)
{
    int q;
    if (p<r)
    {

      q=(p+r)/2;

     divide(a,p,q );
     //int m=(p-(q+1));
     divide(a,q+1,r);
     merge(a,p,q,r);
    }




}

void mergesort(char* a,int n)
{
    divide(a,0,n-1);
}
void tree_march(int &i,string s,char* ch,int &n,int test,int c,int f, int im)
{
    if(i==f)
        return ;
    else
    {
       // left subtree
        /*cout<<"left subtree\n";
        cout<<"node:"<<s[i]<<endl;
        cout<<"index i:"<<i<<endl;
        cout<<"value c:"<<c<<endl;*/
        int temp=0;
        int i1=0;
        /*if(s[i]==')')
        {
            i++;
        }*/
        if(s[i]>='a' && s[i]<='z')
        {
            temp++;
            if(c==test)
           {
              ch[n]=s[i];
              n++;
           }
            i1=i;
           i+=2;
           tree_march(i,s,ch,n,test,c-1,f,im+1);

        }else if(s[i]=='.')
        {
            i++;
            return;
        } /*else if(s[i]==')')
        {
            i++;
        }
        //right subtree
        //if(s[i-1]!='.')
       // {
       cout<<" before right c:"<<c<<endl;
       /*if(s[i1+2]=='.' && s[i1+3]=='.')
        {
            //cout<<
            c+=2;
            //cout<<"if else\n";
          //return;
        }else if(temp==1)
        {
            c+=1;
        } else
        {
             c+=2;
        }*/
       // if(s[i]!=')')
        //c+=2;
        //cout<<" before right c:"<<c<<endl;
        c+=1;

       /* if(s[i1+2]=='.' && s[i1+3]=='.')
        {
            //cout<<
            cout<<"if else\n";
          return;
        }// else
        //{*/


        /*cout<<"right subtree\n";
        cout<<"node:"<<s[i]<<endl;
        cout<<"index i:"<<i<<endl;
        cout<<"value c:"<<c<<endl;*/

        if(s[i]>='a' && s[i]<='z')
        {
           /* if(c==test)
           {
              ch[n]=s[i];
              n++;
           }
           //i+=2;*/
           tree_march(i,s,ch,n,test,c,f,im+1);
           //c+=1;
        }else if(s[i]=='.')
        {
            i+=2;
           // cout<<"i:"<<i<<endl;
        }
        if(s[i]==')')
        {
            //cout<<"node:"<<s[i]<<endl;
            i++;
        }
        //}
    }
    //cout<<"im:"<<im<<endl;
}
void tree(string s,char* ch,int test)
{
    int n=0;
    int c=0;
    int len=s.length()-1;
    int i=0;
    //cout<<"length:"<<len<<endl;
    tree_march(i,s,ch,n,test,c,len,0);
    mergesort(ch,n);
    if(n==0)
        cout<<"Common Gandhijee!";
    else
    {
        for(int i=0;i<n;i++)
        cout<<ch[i];
        }
    cout<<endl;

}
int main()
{
    int t,n;
    cin>>t;
    string s="\0";
    char* ch=new char[1000];
    for(int i=0;i<t;i++)
    {
        cin>>n;
        cin>>s;
        tree(s,ch,n);
    }
    return 0;
}

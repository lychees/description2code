#include<bits/stdc++.h>
using namespace std;
#define MAX 100005
#define MAXX 10004
int primes[MAX];
int lp[MAX];
int pr;
void siever(void)
{
		int i,j;
		pr = 0;
		for(i=2;i<MAX;++i)
		{
				if(lp[i] == 0)
				{
						primes[pr++] = i;
						for(j=i;j<MAX;j+=i)
								lp[j]=i;
				}
		}

}
int ds(int n)
{
		int cnt = 0;
		int res = 1;
		int div;
		while(n!=1)
		{
				div = lp[n];
				cnt=0;
				while(n%div == 0)
				{
						n/=div;
						cnt++;
				}
				res *= (cnt+1);
		}
		return res-2;
}
int si(int l, int r)
{
		int cnt = 1;
		int cans,cmax;
		int i;
		cmax = -1;
		int acnt;
		if(r < MAX)
		{
				for(i=l;i<=r;++i)
				{
						cans = ds(i);
						if(cans > cmax)
						{
								cmax = cans;
								cnt=1;
						}
						else if(cmax == cans)
						{
								cnt++;
						}
				}
				return cnt;
		}
		if(l < MAX)
		{
				for(i=l;i<MAX;++i)
				{
						cans = ds(i);
						if(cans > cmax)
						{
								cmax = cans;
								cnt=1;
						}
						else if(cmax == cans)
						{
								cnt++;
						}
				}
				l = MAX;
		}
		acnt = cnt;
		int pm[MAXX];
		int left[MAXX];
		int dd[MAXX];
		int a;
		cnt = 0;

		for(i=0;i<MAXX;++i)
		{
				left[i]=i+l;
				dd[i] = 1;
		}
		memset(pm,0,sizeof(pm));
		for(i=0;primes[i]<=r&&i<pr;++i)
		{
				int prm = primes[i];
				a = l/prm;
				a *= prm;
				if(a<l) a+=prm;
				for(int j=a;j<=r;j+=prm)
				{
						pm[j-l]=1;
						cnt = 0;
						while(left[j-l]%prm == 0)
						{
								left[j-l]/=prm;
								cnt++;
						}
						dd[j-l]*=(cnt+1);
				}
		}
		for(i=0;i<=r-l;++i)
		{
				if(left[i] > 1)
				{
						dd[i]*=2;
				}
				dd[i]-=2;
		}
		cnt = acnt;
		for(i=0;i<=r-l;++i)
		{
				if(dd[i] > cmax)
				{
						cmax = dd[i];
						cnt = 1;
				}
				else if(dd[i] == cmax)
						cnt++;
		}
		return cnt;
}
int main()
{
		ios_base::sync_with_stdio(false);
		cin.tie(0);
		cout.tie(0);
		int t;
		siever();
		cin>>t;
		while(t--)
		{
				int a,b;
				cin>>a>>b;
				cout<<si(a,b)+1<<endl;
				int i;
		}
		//cout<<ds(t)<<endl;
}











#include<algorithm>
#include<vector>
#include<iostream>
using namespace std;

vector< pair<int,int> > V[1010];
int visited[1010];
int flag=0;
void dfs(int v,int d,int cost)
{
	 if(v==d)
	  flag=1;
     visited[v]=1;
     int i,l=V[v].size();
     for(i=0;i<l;i++)
       if(!visited[V[v][i].first] && V[v][i].second<cost )
          dfs(V[v][i].first,d,cost);
     
        
}
int gcd(int u,int v)
{
	if(v==0)
	return u;
	
	else
	return gcd(v,u%v);
}
int main()
{
    int n,t1,t2,w,t,k,q;
    scanf("%d",&t);
    while(t--)
    {
    	   scanf("%d%d",&n,&k);
           for(int i=0;i<n;i++)
           {
             V[i].clear();
             visited[i]=0;
           }
           for(int i=0;i<k;i++)
           {
                   scanf("%d%d%d",&t1,&t2,&w);
                   V[t1-1].push_back(make_pair(t2-1,w));
                   V[t2-1].push_back(make_pair(t1-1,w));
           }
           int ans=0;
           scanf("%d",&q);
           for(int i=0;i<q;i++)
           {
           	flag=0;
           	   for(int j=0;j<1010;j++)
                    visited[j]=0;
           	   scanf("%d%d",&t1,&t2);
           	   int l=V[t1-1].size();
           	   int cost;
           	   for(int j=0;j<l;j++)
           	     if(V[t1-1][j].first==t2-1)
           	     {
           	     	cost=V[t1-1][j].second;
           			break;
           	     }
           	    dfs(t1-1,t2-1,cost);
           	   if(flag==0)
           	    ans++;
           }
           
           int g=gcd(ans,q);
           printf("%d/%d\n",ans/g,q/g);
         
           
    }
    return 0;
}

#include<bits/stdc++.h>
#include<sys/resource.h>
using namespace std;

#define ll long long int
vector<ll> arr(100001);
#define gc getchar_unlocked
ll read_ll()
{
  char c = gc();
  while(c<'0' || c>'9') c = gc();
  ll ret = 0;
  while(c>='0' && c<='9')
  {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  return ret;
}
int main()
{
    const rlim_t kStackSize = 25 * 1024 * 1024;   // min stack size = 16 MB
    struct rlimit rl;
    ll result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if(result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                //fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }
    ll num,m,z,test,a,b,minn,maxx,ans,i,j,odd,even,index_of_z,index_of_num,last_one,perm_index_of_z;
    //scanf("%lld",&test);
    test=read_ll();
    while(test--)
    {
        even=0,odd=0;
        num=read_ll();m=read_ll();z=read_ll();
        //scanf("%lld%lld%lld",&num,&m,&z);
        for(i=0;i<num;i++)
        {
            arr[i]=read_ll();
            //scanf("%lld",&arr[i]);
            if((i%2)==0)
                even+=arr[i];
            else
               odd+=arr[i];
        }
        if(num==1)
        {
            printf("%lld\n",(arr[0]%m));
            continue;
        }
        else
        {
            if(num%2==0)
            {
                arr[num]=(odd-even)%m;
                if(arr[num]<0)
                    arr[num]=m+arr[num];
            }
            else
            {
                arr[num]=(even-odd)%m;
                if(arr[num]<0)
                    arr[num]=m+arr[num];
                arr[num]%=m;
            }
            ll ans=arr[z%(num+1)];
            if( (z % ( 2*(num+1) ) )>=(num+1) && (num%2==0) )//case for n to be even and (z%(2*(num+1))) lies in the range [num+1,2*num+1]
                ans=(m-ans)%m;
            printf("%lld\n",ans);
        }
    }
}




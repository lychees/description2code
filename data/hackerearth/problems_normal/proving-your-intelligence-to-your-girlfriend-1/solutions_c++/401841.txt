#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

template<int MOD>
struct ModInt {
	static const int Mod = MOD;
	unsigned x;
	ModInt(): x(0) { }
	ModInt(signed sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	ModInt(signed long long sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	int get() const { return (int)x; }
	
	ModInt &operator+=(ModInt that) { if((x += that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator-=(ModInt that) { if((x += MOD - that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator*=(ModInt that) { x = (unsigned long long)x * that.x % MOD; return *this; }
	ModInt &operator/=(ModInt that) { return *this *= that.inverse(); }
	
	ModInt operator+(ModInt that) const { return ModInt(*this) += that; }
	ModInt operator-(ModInt that) const { return ModInt(*this) -= that; }
	ModInt operator*(ModInt that) const { return ModInt(*this) *= that; }
	ModInt operator/(ModInt that) const { return ModInt(*this) /= that; }
	
	ModInt inverse() const {
		long long a = x, b = MOD, u = 1, v = 0;
		while(b) {
			long long t = a / b;
			a -= t * b; std::swap(a, b);
			u -= t * v; std::swap(u, v);
		}
		return ModInt(u);
	}
};
template<int MOD> ModInt<MOD> operator^(ModInt<MOD> a, unsigned long long k) {
	ModInt<MOD> r = 1;
	while(k) {
		if(k & 1) r *= a;
		a *= a;
		k >>= 1;
	}
	return r;
}
typedef ModInt<1000000007> mint;

struct Mat22 {
	typedef mint T;
	T a, b, c, d;
	Mat22(): a(0), b(0), c(0), d(0) { }
	Mat22(T a_, T b_, T c_, T d_): a(a_), b(b_), c(c_), d(d_) { }
	static Mat22 identity() { return Mat22(1, 0, 0, 1); }
	static Mat22 identity(const Mat22 &) { return identity(); }

	Mat22 operator*(const Mat22 &that) const {
		return Mat22
			( a * that.a + b * that.c, a * that.b + b * that.d
			, c * that.a + d * that.c, c * that.b + d * that.d);
	}
	Mat22 &operator*=(const Mat22 &that) { return *this = *this * that; }
};
Mat22 operator^(const Mat22& t, ll k) {
	Mat22 A = t, B = Mat22::identity(t);
	while(k) {
		if(k & 1) B *= A;
		A *= A;
		k >>= 1;
	}
	return B;
}

struct UnionFind {
	vector<int> data;
	UnionFind(int size_) : data(size_, -1) { }
	bool unionSet(int x, int y) {
		x = root(x); y = root(y);
		if (x != y) {
			if (data[y] < data[x]) swap(x, y);
			data[x] += data[y]; data[y] = x;
		}
		return x != y;
	}
	bool findSet(int x, int y) { return root(x) == root(y); }
	int root(int x) { return data[x] < 0 ? x : data[x] = root(data[x]); }
	int size(int x) { return -data[root(x)]; }
};

typedef long long Weight;
struct Edge {
	int x, y;
	Weight w;
	Edge() { }
	Edge(int x_, int y_, Weight w_): x(x_), y(y_), w(w_) { }
};
bool operator<(const Edge &a, const Edge &b) { return a.w < b.w; }

pair<Weight,int> minimumSpanningForest(int N, vector<Edge> edges) {
	sort(edges.begin(), edges.end());
	int t = N; Weight w = 0;
	UnionFind uf(N);
	for(int i = 0; i < (int)edges.size(); i ++) {
		if(uf.unionSet(edges[i].x, edges[i].y)) {
			w += edges[i].w;	//????????
			t --;
		}
	}
	return make_pair(w, t);
}

mint fibonacci(long long n) {
	Mat22 A(1, 1, 1, 0);
	A = A ^ n;
	return A.b;
}

int main() {
	int N;
	long long k1, k2, k3, k4;
	cin >> N >> k1 >> k2 >> k3 >> k4;
	vector<Edge> edges;
	{
		mint a0 = fibonacci(k1), a1 = fibonacci(k1+1);
		mint b0 = fibonacci(k2), b1 = fibonacci(k2+1);
		rep(i, N) rep(j, N-1) {
			long long w = (a0 + b0).get();
			edges.push_back(Edge(i * N + j, i * N + (j+1), w));
			mint at = a1; a1 += a0; a0 = at;
			mint bt = b1; b1 += b0; b0 = bt;
		}
	}
	{
		mint a0 = fibonacci(k3), a1 = fibonacci(k3+1);
		mint b0 = fibonacci(k4), b1 = fibonacci(k4+1);
		rep(j, N) rep(i, N-1) {
			long long w = (a0 + b0).get();
			edges.push_back(Edge(i * N + j, (i+1) * N + j, w));
			mint at = a1; a1 += a0; a0 = at;
			mint bt = b1; b1 += b0; b0 = bt;
		}
	}
	long long ans = minimumSpanningForest(N * N, edges).first;
	cout << ans << endl;
	return 0;
}

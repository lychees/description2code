#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>
using namespace std;

#define LL long long
#define MOD 1000000007

LL ans, cnt;
LL sum, f[200], vis[200];
vector<pair<LL, LL> > v;
vector<LL> adj[200], rev[200];
LL a[200];
int root[200];

LL dfs(LL x){
    vis[x] = 1;
    cnt++;
    LL i, ch;

    for(i = 0; i < adj[x].size(); i++){
        ch = adj[x][i];
        if(vis[ch] == 0){
            dfs(ch);
        }
    }
    cnt++;
    f[x] = cnt;
}

LL dfs1(LL x){
    vis[x] = 1;
    sum += a[x];
    LL i, ch;

    for(i = 0; i < rev[x].size(); i++){
        ch = rev[x][i];
        if(vis[ch] == 0){
            dfs1(ch);
        }
    }
}


LL solve(){
    LL n, m, i, x, y;
    v.clear();
    cin>>n>>m;
    for(i = 1; i <= n; i++){
        cin>>a[i];
        adj[i].clear();
        rev[i].clear();
    }
    for(i = 1; i <= m; i++){
        cin>>x>>y;
        x++;
        y++;
        adj[x].push_back(y);
        rev[y].push_back(x);
    }
    cnt = 0;

    for(i = 1; i <= n; i++) vis[i] = 0;

    for(i = 1; i <= n; i++){
        if(vis[i] == 0){
            dfs(i);
        }
    }

    for(i = 1; i <= n; i++){
        v.push_back(make_pair(f[i], i));
    }

    sum = 0;
    ans = 0;
    sort(v.begin(), v.end());
    for(i = 1; i <= n; i++) vis[i] = 0;

    for(i = v.size() - 1; i >= 0; i--){
        x = v[i].second;
        if(vis[x] == 0){
            sum = 0;
            dfs1(x);
            ans = max(ans, sum);
        }
    }
    cout<<ans<<endl;
}

int main(){
    LL t;
    cin>>t;
    while(t--){
        solve();
    }
}

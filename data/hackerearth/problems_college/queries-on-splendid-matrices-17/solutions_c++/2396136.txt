#include<bits/stdc++.h>
using namespace std;

int findN(int k){
	
	int n = log(k)/(2*log(2.0));
	
	if(pow(2,2*n)!=k)
	return n+1;
	
	return n;
}

int findBlock(int blockSize,int k){
	int count=0;
	while(k>blockSize){
		k-=blockSize;
		count++;
	}
	return count;
	
}


int findN(int i,int j){
	
	int n;
	int max1 = max(i,j);
	n=log(max1)/log(2.0);
	
	if(pow(2,n)!=max1)
	return n+1;
	return n;
}

int findBlock(int blockSize,int i,int j){
	
	if(i>sqrt(blockSize)&&j>sqrt(blockSize))
	return 3;
	if(i>sqrt(blockSize)&&j<=sqrt(blockSize))
	return 2;
	if(i<=sqrt(blockSize)&&j>sqrt(blockSize))
	return 1;
	else return 0;
	
}

int function2(int i,int j,int &num){
	
	if(i==1&&j==1)
	return num+1;
	
	int n = findN(i,j);
	int blockSize = pow(2,n-1)*pow(2,n-1);
	
	int block = findBlock(blockSize,i,j);
	
	num+=(blockSize*block);
	
	
	if(i>pow(2,n-1))
	i-=pow(2,n-1);
	if(j>pow(2,n-1))
	j-=pow(2,n-1);
	
	return function2(i,j,num);
	
}


void splendidMatrix(int k){
	
	
	int i=0,j=0;
	int n;
	int matsize;
	int blockSize;
	while(k>1){
	
		n = findN(k);
		matsize = pow(2,2*n);
		blockSize = matsize/4;		
		
		int block = findBlock(blockSize,k);
		
		switch(block){
			case 1:
				j+=pow(2,n-1);
				k-=blockSize;
				break;
			case 2:
				
				i+=pow(2,n-1);
				k-=2*blockSize;
				break;
			case 3:
				i+=pow(2,n-1);
				j+=pow(2,n-1);
				k-=3*blockSize;
				break;
			default:
				break;
		}
	}
	
	cout<<i+k<<" "<<j+k<<endl;
}

int main(){
	
	int q;
	cin>>q;
	
	while(q--){
		int l;
		cin>>l;
		
		switch(l){
			
			case 1:
				{
				int k;
				cin>>k>>k;
				splendidMatrix(k);
				break;}
			case 2:{		
				int i,j,num=0;
				cin>>i>>i>>j;
				cout<<function2(i,j,num)<<endl;
				break;
			}
			default:
			break;
		}
	}
}
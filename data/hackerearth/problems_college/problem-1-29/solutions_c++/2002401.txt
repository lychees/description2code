#include <bits/stdc++.h>
using namespace std;
#define MAXN 1000005
#define INF 1000000001
#define MOD 1000000007

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))
#define mset(a,b) memset(a,b,sizeof(a))
#define m2set(a,m,n,b) memset(a,b,sizeof(a[0][0])*m*n)
#define graphclear(a) for(int i=1;i<=n;i++)a[i].clear()

#define inp_s     ios_base::sync_with_stdio(false);cin.tie(0)
#define test()     int test;cin>>test;while(test--)

struct sort_pred {
	bool operator()(const std::pair<int,int> &left, const std::pair<int,int> &right) {
		return left.second < right.second;
	}
};
//sort(v,v+n,sort_pred())

#define pb push_back
#define f first 
#define s second
#define all(v) v.begin(),v.end()
typedef long long ll;
typedef vector < ll > vll;
typedef vector < vll > vvll;
typedef pair < ll,ll > ll2;
typedef vector < ll2 > vll2;
typedef vector < int > vi;
typedef vector < vi > vvi;
typedef pair < int,int > ii;
typedef vector < ii > vii;
typedef vector < vii > vvii;

#define tr(c,it) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

#define gc getchar
#define pc putchar
#define si(n) scanf("%d",&n)
#define sll(n) scanf("%lld",&n)
#define pin(n) printf("%d\n",n)
#define plln(n) printf("%lld\n",n)
#define rep(i,n) for(int i=0;i<n;i++)
#define FOR(i,a,b) for(int i=a;i<b;i++)

int gcd(int a, int b)	{return (a == 0) ? b : gcd(b%a, a);}
ll powmod(ll a,ll b){if(b==0)return 1;ll x=powmod(a,b/2);ll y=(x*x)%MOD;if(b%2)return (a*y)%MOD;return y%MOD;}
bool visited[100005];
vvi a(100005);
int n,x[500][500];
bool flag;
void dfs(int c)
{
	if(c==n*n)
	{
		flag=true;
		return;
	}
	if(!visited[c])
	{
		visited[c]=true;
		for_each(all(a[c]),dfs);
	}
}
int main()
{
	test()
	{
		cin >> n;
		rep(i,n)rep(j,n)cin >> x[i][j];
		rep(i,n)
			rep(j,n)
			{
				if(x[i][j]==1)
				{
					if(i-1>=0 && x[i-1][j]==1)
					{
						a[i*n+j+1].pb((i-1)*n+j+1);
						a[(i-1)*n+j+1].pb(i*n+j+1);
					}
					if(i+1<n && x[i+1][j]==1)
					{
						a[i*n+j+1].pb((i+1)*n+j+1);
						a[(i+1)*n+j+1].pb(i*n+j+1);
					}
					if(j-1>=0 && x[i][j-1]==1)
					{
						a[i*n+j+1].pb(i*n+j);
						a[i*n+j].pb(i*n+j+1);
					}
					if(j+1<n && x[i][j+1]==1)
					{
						a[i*n+j+2].pb(i*n+j+1);
						a[i*n+j+1].pb(i*n+j+2);
					}
				}
			}
		mset(visited,false);
		flag=false;
		dfs(1);
		if(flag)cout << "POSSIBLE\n";
		else cout << "NOT POSSIBLE\n";
		graphclear(a);
	}
	return 0;
}

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <vector> 
#include <list>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <fstream>
#include <ctime>
#include <cassert>
#include <stack>
#include <bitset>
using namespace std;

typedef long long int ll;
typedef pair<int, int > pii;

#define MOD 1000000007
#define pb push_back

bitset<1000010> bit;

int operations = 0;
int min_operations = 10000000;
vector<int> primes1;
void sieve()
{
	bit.reset();
	bit.flip();
	bit[0] = false;
	bit[1] = false;

	for(int i=2;i<1000010;i++)
	{
		if(bit[i])
		{
			for(int j=2*i;j<1000010;j+=i)
				bit[j] = false;
			primes1.push_back(i);
		}
	}
}

void solve()
{
	int l, r;
	cin>>l>>r;
	float c = 0;
	/*for(int i=0;i<primes1.size() && primes1[i]<=r;i++)
	{
		if(primes1[i]>=l && primes1[i]<=r)
			c++;
	}*/
	int i1 = lower_bound(primes1.begin(), primes1.end(),l)-primes1.begin();
	int i2;
	if(lower_bound(primes1.begin(), primes1.end(),r)!=primes1.end())
		i2 = lower_bound(primes1.begin(), primes1.end(),r)-primes1.begin();
	else
		i2 = primes1.size();
	
	c = i2-i1+1;
	if(primes1[i2]!=r)
		c--;
	//cout<<i1<<" "<<i2<<endl;
	float p = c/(r-l+1);
	//cout<<"c"<<c<<" "<<r<<" "<<l<<" "<<r-l+1<<endl;
	printf("%.6f\n",p);
}

int main()
{
	int t;
	primes1.push_back(0);
	sieve();
	cin>>t;
	while(t--)
	{
		solve();
	}
	return 0;
}
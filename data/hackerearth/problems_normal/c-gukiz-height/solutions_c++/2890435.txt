#if 0
#include <iostream>
using namespace std;

int main()
{
    int n;
    long h;
    cin>>n>>h;
    long arr[n];
    long height=0;
    
    int i;
    for(i=0;i<n;i++)
    {
    	long temp;
    	cin>>temp;
    	height+=temp;
    	arr[i]=temp;
		h-=(i+1);
//		cout<<"day :"<<i+1<<" height:"<<height<<" h:"<<h<<endl;
    	if(height>=h)
    	{
    		cout<<(i+1);
    		return 0;
    	}
    }
    
    while(true)
    {
    	height+=arr[i%n];
		h-=(i+1);
//		cout<<"day :"<<i+1<<" height:"<<height<<" h:"<<h<<endl;
    	if(height>=h)
    	{
    		cout<<(i+1);
    		return 0;
    	}
    	i++;
    }
    return 0;
}
#elif 1

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int nax = 1e5 + 5;
int t[nax];
ll extra(int a) {
	return (ll) a * (a + 1) / 2;
}
int main() {
	int n;
	ll goal;
	scanf("%d%lld", &n, &goal);
	ll total = 0;
	for(int i = 1; i <= n; ++i) {
		scanf("%d", &t[i]);
		total += t[i];
		if(total + extra(i) >= goal) {
			printf("%d\n", i);
			return 0;
		}
	}
	int ANS = -1;
	for(int day = 1; day <= n; ++day) {
		goal -= t[day];
		#define f(x) (x * total + extra(x * n + day))
		int cycles = 0;
		for(int bit = 30; bit >= 0; --bit) {
			int maybe = cycles + (1 << bit);
			if((ll) maybe * n + day >= (1LL << 31))
				continue;
			if(f(maybe) < goal)
				cycles = maybe;
		}
		assert(f(cycles) < goal);
		++cycles;
		assert(f(cycles) >= goal);
		int can = cycles * n + day;
		if(ANS == -1 || can < ANS)
			ANS = can;
	}
	printf("%d\n", ANS);
	return 0;
}
#endif
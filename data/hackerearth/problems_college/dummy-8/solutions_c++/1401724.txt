#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct node {
	int x, y, moves;
	node(int _x, int _y, int m): x(_x), y(_y), moves(m) {}
};

bool operator<(const node& l, const node& r){
	return l.moves < r.moves;
}

char maze[105][105];
int m, n;
int sx, sy, ex, ey;
bool under_attack[105][105][4];
int dist[105][105][4];

bool valid(int x, int y){
	return x>=0 && x<m && y>=0 && y<n;
}

bool is_turret(int x, int y){
	char c = maze[x][y];
	return c=='<' || c=='>' || c=='^' || c=='v';
}

bool is_cell_empty(int x, int y){
	char c = maze[x][y];
	return c=='.' || c=='S' || c=='G';
}

int get_orientation(int x, int y){
	if (maze[x][y]=='>') return 0;
	if (maze[x][y]=='v') return 1;
	if (maze[x][y]=='<') return 2;
	return 3;
}

void fire_turret(int x, int y){
	for (int i=1; valid(x+i, y) && is_cell_empty(x+i, y); i++){
		under_attack[x+i][y][(4+1-get_orientation(x, y))%4] = true;
	}
	for (int i=1; valid(x-i, y) && is_cell_empty(x-i, y); i++){
		under_attack[x-i][y][(4+3-get_orientation(x, y))%4] = true;
	}
	for (int i=1; valid(x, y+i) && is_cell_empty(x, y+i); i++){
		under_attack[x][y+i][(4+0-get_orientation(x, y))%4] = true;
	}
	for (int i=1; valid(x, y-i) && is_cell_empty(x, y-i); i++){
		under_attack[x][y-i][(4+2-get_orientation(x, y))%4] = true;
	}
}

void fill_under_attack(){
	for (int i=0; i<m; i++)
		for (int j=0; j<n; j++)
			for (int k=0; k<4; k++)
				under_attack[i][j][k] = false;

	for (int i=0; i<m; i++){
		for (int j=0; j<n; j++){
			if (is_turret(i, j)){
				fire_turret(i, j);
			}
		}
	}
}

bool is_under_attack(int x, int y, int move){
	return under_attack[x][y][move%4];
}

void bfs(){

	for (int i=0; i<m; i++)
		for (int j=0; j<n; j++)
			for (int k=0; k<4; k++)
				dist[i][j][k]=99999999;

	queue<node> q;
	node s(sx, sy, 0);
	dist[sx][sy][0] = 0;
	q.push(s);

	while (!q.empty()){
		node t = q.front();
		q.pop();

		if (is_under_attack(t.x, t.y, t.moves) && t.moves!=0){
			continue;
		}

		
		if (t.x == ex && t.y == ey){
			cout<<t.moves<<endl;
			return;
		}

		for (int i=-1; i<=1; i++){
			for (int j=-1; j<=1; j++){
				if ((i==0 && j==0) || i*j!=0) continue;
				int xd = t.x+i;
				int yd = t.y+j;
				if (valid(xd, yd) && is_cell_empty(xd, yd)){
					if (dist[xd][yd][(t.moves+1)%4]==99999999){
						q.push(node(xd, yd, t.moves+1));
						dist[xd][yd][(t.moves+1)%4]=t.moves+1;
					}
				}
			}
		}
	}

	cout<<"impossible"<<endl;
}

void pr(){
	for (int k=0; k<4; k++){
	for (int i=0; i<m; i++){
		for (int j=0; j<n; j++){
			cout<<under_attack[i][j][k];
		}
		cout<<endl;
	}
	cout<<endl;
	}
}

int main(){
	int tc;
	cin>>tc;
	for (int tcc=1; tcc<=tc; tcc++){
		cin>>m>>n;
		for (int i=0; i<m; i++){
			for (int j=0; j<n; j++){
				cin>>maze[i][j];
				if (maze[i][j]=='S'){
					sx=i; sy=j;
				}
				if (maze[i][j]=='G'){
					ex=i; ey=j;
				}
			}
		}
		cout<<"Case #"<<tcc<<": ";
		fill_under_attack();
		// pr();
		bfs();
	}

	return 0;
}


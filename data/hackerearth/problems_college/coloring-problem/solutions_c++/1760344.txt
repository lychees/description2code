#include <string>
#include <fstream>
#include <iostream>
#include <vector>

#define MAX_VERTICIES 200

using namespace std;

bool determineBicolorable(int numEdges, vector<int> theVerticies[]);

int main ()
{
	// array of edge vectors
	vector<int> theVerticies[MAX_VERTICIES];

	int numVerticies, numEdges;
	// stores which two verticies the current edge connects
	int vertexA, vertexB;
	int numProblems;
	
	cin >> numProblems;
	
	while ( 0 < numProblems )
	{
		cin >> numVerticies;
		cin >> numEdges;

		for (int i = 0; i < numEdges; ++i)
		{
			cin >> vertexA;
			cin >> vertexB;
			theVerticies[vertexA].push_back(vertexB);
			theVerticies[vertexB].push_back(vertexA);
		}
	
		if (determineBicolorable(numEdges, theVerticies))
		{
			cout << "BICOLORABLE.\n";
		}
		else
		{
			cout << "NOT BICOLORABLE.\n";
		}
		
		for (int i = 0; i < MAX_VERTICIES; ++i)
		{
			theVerticies[i].clear();
		}
		
		--numProblems;
	}
	return 0;
}

bool determineBicolorable(int numEdges, vector<int> theVerticies[])
{
	// for all verticies
	for (int i = 0; i < numEdges; ++i)
	{
		// for all edges on vertex i
		for (unsigned int j = 0; j < theVerticies[i].size(); ++j)
		{
			// for all edges after edge j on vertex i
			for (unsigned int k = j+1; k < theVerticies[i].size(); ++k)
			{
				// for all edges attached to vertex k
				for (unsigned int l = 0; l < theVerticies[theVerticies[i][k]].size(); ++l)
				{
					if (theVerticies[i][j] == theVerticies[theVerticies[i][k]][l])
					{
						return false;
					}
				}
			}
		}
	}
	return true;
}
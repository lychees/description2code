#include<bits/stdc++.h>
#include<limits.h>
using namespace std;

#define mod 1000000007
#define si(x) scanf("%d", &x)
#define sll(x) scanf("%lld", &x)
#define pi(x) printf("%d\n", x)
#define pll(x) printf("%lld\n", x)
#define ii pair<int, int>
#define vi vector<int>
#define vii vector<pair<int, int> >
#define adjList vector<vector<int> >
#define ll long long int
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define rep(i, z, q) for(i = z; i < q; i++)
#define rev(i, z, q) for(i = z; i > q; i--)

ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
ll power(ll a,ll b) {
  ll ans = 1;  
  while(b > 0){
    if(b & 1)
      ans = ((ans % mod) *(a % mod)) % mod;
    a=((a % mod)*(a % mod)) % mod;
    b >>= 1;
  }
  return ans;
}

ll bit[200010];
ll a[200010];

bool check(ll n) {
  
  if( n < 0)
    return false;
  int counter = 0;
  int first = n % 10, last;

  while(n > 0) {
    last = n%10;
    n /= 10;
  }
    
  if(first == last) return true;
  else return false;
 
}

void update2(ll val, ll idx, ll n) {

  bool temp = check(val);

  if(temp == false)
    return ;
  
  while(idx <= n) {
      bit[idx]++;
      idx += idx & -idx;
  }
  
  return ;
}

void update1(ll val, ll idx, ll n) {

  bool temp = check(val);
  
  if(temp == false)
    return ;
  
  while(idx <= n) {
      bit[idx]--;
      idx += idx & -idx;
  }
  
  return ;
}

ll read(ll opt, ll idx) {
  
  ll sum = 0;
  
  while(idx > 0) {
    sum += bit[idx];
    idx -= idx & -idx;
  }
  
  return sum;
}

int main() {
  
  ll i, n, x, y, opt, q;
  
  cin>>n>>q;

  rep(i, 1, n+1) {
    cin>>a[i];
    update2(a[i], i, n);
  }


  while(q--) {
    
    cin>>opt>>x>>y;
    
    if(opt == 2) {
      update1(a[x], x, n);
      a[x] = y;
      update2(a[x], x, n);
    }

    else {
      if(x == 0)
	cout<<read(opt, y)<<endl;
      else
	cout<<read(opt, y)-read(opt, x-1)<<endl;
    }
  }
  
  return 0;
}


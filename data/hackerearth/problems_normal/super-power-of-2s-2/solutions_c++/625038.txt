#include <iostream>
using namespace std;

struct nd{
    long long vl;
    long long lzy;
    nd(){
        vl=0;
        lzy=0;
    }
};

long long mod=1000000007;
int n,q,l,r,ty;
nd sgt[800003];
long long arr[200003];
long long p2[200003];
nd sum(nd a,nd b){
    a.vl+=b.vl;
    if(a.vl>mod)a.vl-=mod;
    return a;
}

void push(int node,int l,int r){
    if(l!=r){
        sgt[2*node].lzy+=sgt[node].lzy;
        if(sgt[2*node].lzy>mod)sgt[2*node].lzy-=mod;
        sgt[2*node+1].lzy+=(sgt[node].lzy*(p2[(r+l)/2+1-l]))%mod;
        if(sgt[2*node+1].lzy>mod)sgt[2*node+1].lzy-=mod;
    }
    sgt[node].vl+=(sgt[node].lzy*(p2[r-l+1]-1))%mod;
    if(sgt[node].vl>mod)sgt[node].vl-=mod;
    sgt[node].lzy=0;
}

void build(int node,int l,int r){
    if(l==r){
        sgt[node].vl=arr[l];
        return;
    }
    build(2*node,l,(r+l)/2);
    build(2*node+1,(r+l)/2+1,r);
    sgt[node]=sum(sgt[2*node],sgt[2*node+1]);
}
void update(int node,int l,int r,int s,int e){
    push(node,l,r);
    if(s<=l && r<=e){
        sgt[node].lzy=p2[l-s+1];
        push(node,l,r);
        return;
    }
    if(s<=(r+l)/2){
        update(2*node,l,(r+l)/2,s,e);
    } else {
        push(2*node,l,(r+l)/2);
    }
    if((r+l)/2+1<=e){
        update(2*node+1,(r+l)/2+1,r,s,e);
    } else {
        push(2*node+1,(r+l)/2+1,r);
    }
    sgt[node]=sum(sgt[2*node],sgt[2*node+1]);
}
nd query(int node,int l,int r,int s,int e){
    push(node,l,r);
    nd ret;
    if(s<=l && r<=e){
        return sgt[node];
    }
    if(s<=(r+l)/2){
        ret=sum(ret,query(2*node,l,(r+l)/2,s,e));
    }
    if((r+l)/2+1<=e){
        ret=sum(ret,query(2*node+1,(r+l)/2+1,r,s,e));
    }
    return ret;
}
int main(){
    p2[0]=1;
    for(int i=1;i<200003;i++){
        p2[i]=(p2[i-1]*2)%mod;
    }
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    build(1,0,n-1);
    cin>>q;
    while(q--){
        cin>>ty>>l>>r;
        l--;
        r--;
        if(ty==0){
            update(1,0,n-1,l,r);
        } else {
            cout<<query(1,0,n-1,l,r).vl<<endl;
        }
    }
}

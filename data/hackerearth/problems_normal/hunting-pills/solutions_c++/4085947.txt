#include <bits/stdc++.h>
using namespace std;
vector <list < int > > adj(110);
vector <list < int > > adjr(110);
bool visited[110];
bool visited2[110];
int ans[110];
int ftime[110];
int t;
int v;
void dfs(int s)
{
    visited[s]=true;
    list <int> :: iterator i;
    for(i=adj[s].begin();i!=adj[s].end();i++)
    {
        if(!visited[*i])
        {
            dfs(*i);
        }
    }
    t++;
    ftime[t]=s;
}
void full_dfs()
{
    int i;
    for(i=0;i<v;i++)
    {
        if(!visited[i])
        dfs(i);
    }
}
void add_edge(int x, int y)
{
    adj[x].push_back(y);
    adjr[y].push_back(x);
}
int count1;
void dfs2(int s)
{
    visited2[s]=true;
    list <int > :: iterator i;
    for(i=adjr[s].begin();i!=adjr[s].end();i++)
    {
        if(!visited2[*i])
        dfs2(*i);
    }
    count1+=ans[s];
}
void full_dfs2()
{
    int i;
    int max1=0;
    for(i=v-1;i>=0;i--)
    {
       if(!visited2[ftime[i]])
       {
          count1=0;
       dfs2(ftime[i]);
       if(count1>max1)
       max1=count1;
       }
    }
    cout<<max1<<endl;
}
int main() {
	int i,m,x,y,tes;
	cin>>tes;
	while(tes--)
	{
	cin>>v;
	cin>>m;
	for(i=0;i<=v;i++)
	{
		visited[i]=false;
		visited2[i]=false;
		ftime[i]=0;
		ans[i]=0;
	}
	for(i=0;i<v;i++)
	cin>>ans[i];
	while(m--)
	{
	    cin>>x;
	    cin>>y;
	    add_edge(x,y);
	}
	t=-1;
	full_dfs();
	full_dfs2();
	for(i=0;i<v;i++)
	{
	   while(!adj[i].empty())
	   adj[i].pop_back();
	   while(!adjr[i].empty())
	   adjr[i].pop_back();
	}
	}
	return 0;
}

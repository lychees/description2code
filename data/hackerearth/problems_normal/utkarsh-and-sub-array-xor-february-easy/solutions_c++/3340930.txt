///Nothing is more intolerable than to have to admit to yourself your own errors
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;

#define X first
#define Y second
#define rep(i,n) for(ll i=0; i<(n); i++)
#define rep1(i,a,b) for(ll i=a; i<=(b); i++)
#define rep2(i,b,a) for(ll i=b; i>=(a); i--)
#define mem(a,val) memset(a, (val), sizeof a)
#define mp make_pair
#define pb push_back
#define all(c) (c).begin(), (c).end()
#define uni(c) c.resize(distance(c.begin(), unique(all(c))))
#define fix(c,sz_val...) c.clear();c.resize(sz_val);
#define tr(c,it,ctype...) for(ctype::iterator it = c.begin(); it != c.end(); ++it)
#define io ios_base::sync_with_stdio(false);cin.tie(NULL)
#define IO(input_file_name) ifstream cin(input_file_name);ofstream cout("output.txt")
#define print(ans) cout<<"Case #"<<_t<<": "<<ans<<"\n"
const int mod = 1e9 + 7;
///.............................................................................///
inline int pwr(int a, int n)
{
    int ans = 1;
    while(n)
    {
        if(n&1) ans = (ll)ans*a%mod;
        n >>= 1;
        a = (ll)a*a%mod;
    }
    return ans;
}

template <typename T>
struct dsu
{
    map<T,T> par;
    void adopt(T a, T b) { par[dad(b)] = dad(a);}
    T dad(T a)
    {
        if(par.find(a) == par.end() || par[a] == a)
            return a;
        return par[a] = dad(par[a]);
    }
    bool dogla(T a, T b) { return dad(a) != dad(b);}
};

int main()
{
    io;
    ll n, k, x, y; cin>>n>>k;
    ll ans(pwr(2,n)), inv(pwr(2,mod-2));
    dsu<ll> d;
    rep(i,k)
    {
        cin>>x>>y;
        if(d.dogla(x-1,y))
        {
            ans = ans*inv%mod;
            d.adopt(x-1,y);
        }
        cout<<ans<<endl;
    }
    return 0;
}
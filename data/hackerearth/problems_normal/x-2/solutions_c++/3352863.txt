#include <bits/stdc++.h>
#define ll int
#define s(a) scanf("%d",&a)
#define f first
#define sc second
#define mp make_pair
#define pb push_back
#define inf 10e16

using namespace std;

ll tree[4000001]={0};
ll add[4000001]={0};
ll mul[4000001];
ll a[1000001];

void construct(ll l,ll r,ll node)
{
    if(l==r) {
        tree[node]=0;
        add[node]=0;
        mul[node]=1;
        return;
    }
    ll mid=(l+r);
    mid>>=1;
    construct(l,mid,node<<1);
    construct(mid+1,r,(node<<1)+1);
    tree[node]=(tree[node<<1]+tree[(node<<1)+1]);
}

ll query(ll l,ll r,ll i,ll a,ll b)
{
    if(b<l || a>r) return 0;
    if(add[i]!=0 || mul[i]!=1) {
        if(l==r) {
            tree[i]=(tree[i]*mul[i]+add[i]);
        }
        else {
            tree[i]=(tree[i]*mul[i]+add[i]*(r-l+1));
            add[2*i]=(mul[i]*add[2*i]+add[i]);
            add[2*i+1]=(mul[i]*add[2*i+1]+add[i]);
            mul[2*i]=(mul[2*i]*mul[i]);
            mul[2*i+1]=(mul[2*i+1]*mul[i]);
        }
        add[i]=0;
        mul[i]=1;
    }
    if(a<=l && r<=b) return tree[i];
    ll mid=(l+r)/2;
    ll x=query(l,mid,2*i,a,b);
    ll y=query(mid+1,r,2*i+1,a,b);
    ll w=(x+y);
    return w;
}

void update1(ll l,ll r,ll i,ll a,ll b,ll val)
{
    if(b<l || a>r) return;
    ll mid=(l+r)/2;
    if(add[i]!=0 || mul[i]!=1) {
        if(l==r) {
            tree[i]=(tree[i]*mul[i]+add[i]);
        }
        else {
            tree[i]=(tree[i]*mul[i]+add[i]*(r-l+1));
            add[2*i]=(mul[i]*add[2*i]+add[i]);
            add[2*i+1]=(mul[i]*add[2*i+1]+add[i]);
            mul[2*i]=(mul[2*i]*mul[i]);
            mul[2*i+1]=(mul[2*i+1]*mul[i]);
        }
        add[i]=0;
        mul[i]=1;
    }
    if(a<=l && r<=b) {
        if(l==r) {
            tree[i]=(tree[i]+val);
        }
        else {
            tree[i]=(tree[i]+val*(r-l+1));
            add[2*i]=(add[2*i]+val);
            add[2*i+1]=(add[2*i+1]+val);
        }
        //tree[i]=(query(l,mid,2*i,l,mid)+query(mid+1,r,2*i+1,mid+1,r))%mod;
        return;
    }
    update1(l,mid,2*i,a,b,val);
    update1(mid+1,r,2*i+1,a,b,val);
    tree[i]=(query(l,mid,2*i,l,mid)+query(mid+1,r,2*i+1,mid+1,r));
}

int main()
{
    ll n,k,i,j,l,w,ww,x,y,z,t;
    s(t);
    while(t--) {
        s(n);s(k);
        for(i=1;i<=n;i++) {
            s(a[i]);
        }
        construct(1,n,1);
        i=1;j=1;
        ll sum=a[1];
        while(i<=n && j<=n) {
            while(sum>k) {
                sum-=a[j];
                j++;
            }
            //cout<<i-j+1<<endl;
            if(j<=i) update1(1,n,1,1,i-j+1,1);
            i++;
            sum+=a[i];
        }
        for(i=1;i<=n;i++) {
            printf("%d ",query(1,n,1,i,i));
        }
        printf("\n");
    }
    return 0;
}
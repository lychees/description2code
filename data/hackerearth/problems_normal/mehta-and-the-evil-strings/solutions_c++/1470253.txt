#include <iostream>
#include <vector>
#include <cstdio>
#include <sstream>
#include <map>
#include <string>
#include <algorithm>
#include <queue>
#include <cmath>
#include <set>
#include "assert.h"
using namespace std;

#define MOD 1000000007

//[n*p] * [p*m] => [n*m]
vector<vector<long long> > multmat(vector<vector<long long> > &A, vector<vector<long long> > &B, int n, int p, int m){
	vector<vector<long long> > C(n, vector<long long>(m,0));
	for(int i=0; i<n; i++){
		for(int k=0; k<p; k++){
			for(int j=0; j<m; j++){
				C[i][j] += A[i][k] * B[k][j];
				C[i][j] %= MOD;
			}
		}
	}
	return C;
}

//A[n*n]^k 
vector<vector<long long> > mat_pow(vector<vector<long long> > A, long long k){
	int n = A.size();
	vector<vector<long long> > ret(n, vector<long long>(n, 0) );
	for(int i=0; i<n; i++){
		ret[i][i] = 1;
	}
	while(k>0LL){
		if(k&1LL) ret = multmat(A,ret, n,n,n);
		A = multmat(A,A, n,n,n);
		k>>=1LL;
	}
	return ret;
}

vector<int> bits = {
	
	0b0000,
	0b0000,
	0b0001,
	0b0010,
	0b0000,
	0b0100,
	0b0011,
	0b1000,
	0b0001,
	0b0000,
	
	/*
	0b000,
	0b000,
	0b010,
	0b011,
	0b000,
	0b101,
	0b001,
	0b111,
	0b010,
	0b000
	*/
};

int main(){
	int T;
	cin >> T;

	int sz = 1<<4;

	vector<int> state_in(sz, 0);
	for(int i=1; i<bits.size(); i++){
		state_in[bits[i]]++;
	}
	vector<vector<long long>> A(sz, vector<long long>(sz, 0));
	for(int i=0; i<(sz); i++){
		for(int j=0; j<(sz); j++){
			A[i^j][i] = state_in[j];
		}
	}


	vector<vector<long long>> B(sz, vector<long long>(1, 0));
	B[0][0] = 1;


	while(T--){
		long long N;
		scanf("%lld", &N);
		/*
		vector<vector<long long>> dp(N+1, vector<long long>(sz, 0));
		dp[0][0] = 1;
		for(int i=0; i<N; i++){
			for(int s=0; s<(sz); s++){
				for(int j=0; j<10; j++){
					dp[i+1][s ^ bits[j]] += dp[i][s];
					dp[i+1][s ^ bits[j]] %= MOD;
				}
			}
		}
		long long ans = 0;
		for(int i=1; i<(sz); i++){
			ans += dp[N][i];
			ans %= MOD;
		}
		*/

		auto A_ = A;
		A_ = mat_pow(A_, N);
		auto B_ = B;
		auto res = multmat(A_, B, sz, sz, 1);

		long long ans = 0;
		for(int i=1; i<(sz); i++){
			ans += res[i][0];
			ans %= MOD;
		}
		printf("%lld\n", ans);
	}
	return 0;
}
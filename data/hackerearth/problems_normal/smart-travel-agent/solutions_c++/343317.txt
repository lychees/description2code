#include<iostream>
#include<map>
#include<vector>
#include<list>
using namespace std;
int weight[1000]={0};
int min_arr[1000]={0};
int path[1000]={0};
int path_size=0;
int w_size=0;
int min_array_size=0;
int a[100][100]={0};
int min_fun(int array[],int size)
{
	int ans=999999;
	for(int i=0;i<size;i++)
	{
		if(ans>array[i])
		ans=array[i];
	}
	return ans;
}
int max_fun(int array[],int size)
{
	int ans=-1;
	for(int i=0;i<size;i++)
	{
		if(ans<array[i])
		ans=array[i];
	}
	return ans;
}
void print_array(int array[],int size)
{
	for(int i=0;i<size;i++)
	{
		cout<<array[i]<<" ";
	}
	cout<<endl;
}
class graph
{
	int V;
	list<int> *array;

	public:
		graph(int v);
		void dfs(int u,int d,map<int,vector<int> > &m);
		void addEdge(int u,int v);
};
graph::graph(int n)
{
	V=n;
	array=new list<int>[n];
}
void graph::addEdge(int u,int v)
{
	array[u].push_back(v);
}

void graph::dfs(int u,int d,map<int,vector<int> > &m)
{
	if(u==d)
	{
		//print_array(weight,w_size);
		int i=min_fun(weight,w_size);
		for(int j=0;j<path_size;j++)
		{
			m[i].push_back(path[j]);
		}
		min_arr[min_array_size]=i;
		min_array_size++;
		return;
	}
	
	list<int>::iterator i;
	for(i=array[u].begin();i!=array[u].end();i++)
	{
		weight[w_size]=a[u][*i];
		path[path_size]=u;
		path_size++;
		w_size++;
		dfs(*i,d,m);
		w_size--;
		path_size--;
	}
}


int main()
{
	int n,r,u,v,w,s,d,t;
	cin>>n;
    map<int,vector<int> > m;
	graph g(n+1);
	cin>>r;
	while(r--)
	{
		cin>>u>>v>>w;
		a[u][v]=w;
		g.addEdge(u,v);
	}
	cin>>s>>d>>t;
	g.dfs(s,d,m);
	//cout<<"printing min array"<<endl;
	//print_array(min_arr,min_array_size);
	int ans=max_fun(min_arr,min_array_size);
	
	map<int ,vector<int> >:: iterator it;
	for(it=m.begin();it!=m.end();it++)
	{
		if(it->first==ans)
		{
			for(int i=0;i<it->second.size();i++)
			cout<<it->second[i]<<" ";
		}
	}
	
	cout<<d<<endl;
	if(t%(ans-1)==0)
	cout<<t/(ans-1)<<endl;
	else
	cout<<t/(ans-1)+1<<endl;
	return 0;
}
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

struct UnionFind {
	vector<int> data;
	void init(int n) { data.assign(n, -1); }
	bool unionSet(int x, int y) {
		x = root(x); y = root(y);
		if(x != y) {
			if(data[y] < data[x]) swap(x, y);
			data[x] += data[y]; data[y] = x;
		}
		return x != y;
	}
	bool findSet(int x, int y) { return root(x) == root(y); }
	int root(int x) { return data[x] < 0 ? x : data[x] = root(data[x]); }
	int size(int x) { return -data[root(x)]; }
};

int main() {
	char *buf = new char[1000002];
	int T;
	scanf("%d", &T);
	for(int ii = 0; ii < T; ++ ii) {
		int N; int M;
		scanf("%d%d", &N, &M);
		vector<string> v(N);
		rep(i, N) {
			scanf("%s", buf);
			v[i] = buf;
		}
		vpii edges;
		rer(i, 0, N) rer(j, 0, M) {
			int deg = 0;
			if(0 < i && 0 < j && j < M) {
				if(v[i - 1][j - 1] != v[i - 1][j])
					edges.emplace_back((i - 1) * (M + 1) + j, i * (M + 1) + j);
			}
			if(0 < i && i < N && 0 < j) {
				if(v[i - 1][j - 1] != v[i][j - 1])
					edges.emplace_back(i * (M + 1) + (j - 1), i * (M + 1) + j);
			}
		}
		rep(j, M) {
			edges.emplace_back(0 * (M + 1) + j, 0 * (M + 1) + (j + 1));
			edges.emplace_back(N * (M + 1) + j, N * (M + 1) + (j + 1));
		}
		rep(i, N) {
			edges.emplace_back(i * (M + 1) + 0, (i + 1) * (M + 1) + 0);
			edges.emplace_back(i * (M + 1) + M, (i + 1) * (M + 1) + M);
		}
		sort(all(edges));
		UnionFind uf; uf.init((N + 1) * (M + 1));
		vector<bool> deg0((N + 1) * (M + 1), true);
		for(pii p : edges) {
//			cerr << p.first / (M + 1) << "," << p.first % (M + 1) << "; " << p.second / (M + 1) << "," << p.second % (M + 1) << endl;
			uf.unionSet(p.first, p.second);
			deg0[p.first] = deg0[p.second] = false;
		}
		int ccs = 0;
		rep(i, (N + 1) * (M + 1)) if(!deg0[i] && uf.root(i) == i)
			++ ccs;
		bool ans = ccs <= 1;
		puts(ans ? "YES" : "NO");
	}
	return 0;
}

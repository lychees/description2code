#include <iostream>
#include<string.h>
using namespace std;
void quickSort(char arr[], int left, int right) {
		int i = left, j = right;
		int tmp;
		int pivot = arr[(left + right) / 2];
		/* partition */
		while (i <= j) {
				while (arr[i] < pivot)
						i++;
				while (arr[j] > pivot)
						j--;
				if (i <= j) {
						tmp = arr[i];
						arr[i] = arr[j];
						arr[j] = tmp;
						i++;
						j--;
				}
		 };
		/* recursion */
		if (left < j)
				quickSort(arr, left, j);
		if (i < right)
				quickSort(arr, i, right);
}
void quickSort1(char arr[], int left, int right) {
		int i = left, j = right;
		int tmp;
		int pivot = arr[(left + right) / 2];
		/* partition */
		while (i <= j) {
				while (arr[i] > pivot)
						i++;
				while (arr[j] < pivot)
						j--;
				if (i <= j) {
						tmp = arr[i];
						arr[i] = arr[j];
						arr[j] = tmp;
						i++;
						j--;
				}
		 };
		/* recursion */
		if (left < j)
				quickSort1(arr, left, j);
		if (i < right)
				quickSort1(arr, i, right);
}
int main()
{
  char A[100000],B[100000];
 long i,n,temp,t;
 cin>>t;
 while(t!=0)
 {
  cin>>A;
  strcpy(B,A);
  n=strlen(A);
  if(n<3)
	  {cout<<"Not possible!";goto lb;}
 //-----------------------------------------------
 quickSort(A,0,n-1);
 if(A[n-2]!=A[n-3] && A[n-2]!=A[n-1])
			 {temp=A[n-2];
			  A[n-2]=A[n-3];
			  A[n-3]=temp;}
 else if(A[n-2]==A[n-3]  && A[n-1]!=A[n-2])
		{temp=A[n-3];
			  A[n-3]=A[n-1];
			  A[n-1]=temp;}
 else
 {
  i=strlen(A)-1;
  char c=A[n-1];
  while(A[i]==c)
			i--;
  {temp=A[i];
	A[i]=A[i+2];
	A[i+2]=temp;}
 }
 for(i=0;i<n;i++)
	 cout<<A[i];
 cout<<" ";
 //------------------------------------------------
 quickSort1(B,0,n-1);
 if(B[n-2]!=B[n-3] && B[n-2]!=B[n-1])
			 {temp=B[n-2];
			  B[n-2]=B[n-3];
			  B[n-3]=temp;}
 else if(B[n-2]==B[n-3]  && B[n-1]!=B[n-2])
			  {temp=B[n-3];
			  B[n-3]=B[n-1];
			  B[n-1]=temp;}
 else
 {
  i=strlen(B)-1;
  char c=B[i];
  while(B[i]==c)
			i--;
  {temp=B[i];
	B[i]=B[i+2];
	B[i+2]=temp;}
 }
 for(i=0;i<n;i++)
	 cout<<B[i];
 lb:
 cout<<"\n";
 t--;
 }
    return 0;
}

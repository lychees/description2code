#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define MOD 1000000007
ll dp[10000005];
long long int m;
inline void mul(long long int a[][3], long long int b[][3])
{
		long long int tmp[3][3];
		long long int i,j,k;
		for(i = 0; i < 3; ++i) {
				for(j = 0; j < 3; ++j) {
						tmp[i][j] = 0;
						for(k = 0; k < 3; ++k) {
								tmp[i][j] = (tmp[i][j]%m + (a[i][k] * b[k][j])%m + m)%m;
						}
				}
		}
		for(i = 0; i < 3; ++i) {
				for(j = 0; j < 3; ++j)
						a[i][j] = tmp[i][j];

		}

}
inline void power(long long int a[][3],long long int p)
{
		if(p == 1) return;
		long long int m[3][3] = {{1,0,0} , {0,1,0} , {0,0,1}};

		while(p)
		{
			if(p % 2 == 1) mul(m,a);
			mul(a,a);
			p/=2;
		}
		for(int i = 0; i < 3; ++i) {
				for(int j = 0; j < 3; ++j)
						a[i][j] = m[i][j];
		}
}
long long int ans(long long int n)
{
		if(n == 1) return n;
		if(n == 2) return 6;
		long long int a[3][3] = {{2,-1,1} , {1,0,0} , {0,0,1}};
		power(a,n-2);

		if(n<10000000 ) return dp[n] = (a[0][1] + a[0][0]*6 + a[0][2]*4)%MOD;
		return (a[0][1] + a[0][0]*6 + a[0][2]*4)%MOD;
		 


}
int main()
{
		long long int n;
		int t;
		//cin>>t;
		scanf("%d",&t);
		//memset(dp,-1,sizeof(dp));
		while(t--)
		{
				//cin>>n;
				scanf("%lld",&n);
				/*if(n<10000000 && dp[n]!=-1) printf("%lld\n",dp[n]);
				else
				{
					m = MOD;
					printf("%lld\n",ans(n));
					//cout<<ans(n)<<endl;
				}*/
				//after i write the code for modular expo, i find that this shit is hexgonal no.
				// much _pain
				n%=MOD;
				ll ans =n*(2*n-1);
				ans%=MOD;
				if(ans<0) ans+=MOD;
				printf("%lld\n",ans);
		}
		return 0;

}

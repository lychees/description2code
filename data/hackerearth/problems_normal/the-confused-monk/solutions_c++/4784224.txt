#include<bits/stdc++.h>

using namespace std;

#define m 1000000007
long long GCD(long long A, long long B) {
    if(B==0)
        return A;
    else
        return GCD(B, A % B);
}
long long Ans(long long a,long long b)
{
    long long ans=1;
                            //Final answer which will be displayed
  while(b !=0 ) {
     /*Finding the right most digit of ‘b’ in binary form, if it is 1 , then multiply the current value of a  
      in  ans. */
           if(b%2 == 1) {           //as if b%2 == 1,means last /rightmost digit of b in binary form is 1.   
             ans = ans*a ; 
              ans = ans%m;      //at each iteration if value of ans exceeds then reduce it to modulo c. 
           }
   a = a*a;                  // This is explained below
   a %= m;                   //at each iteration if value of a exceeds then reduce it to modulo c. 
   b /= 2;                   //Trim the right-most digit of b in binary form.
}    
return ans;
}

int main()
{
;
    long long N,i,gcd,X,ans;
    cin>>N;
    vector<long long> v;    
    for(i=0;i<N;i++)
    {
        cin>>X;
        v.push_back(X);
    }
    sort(v.begin(),v.end());
    gcd=v[0];
    for(i=1;i<N;i++)
    {
        gcd=GCD(gcd,v[i]);
    }
    //cout<<gcd<<endl;
    ans=1;
    for(i=0;i<N;i++)
    {
    
        ans*=(v[i]%m);
        ans%=m;
    
    }
    //cout<<ans<<endl;
    
    ans=Ans(ans,gcd);
    cout<<ans<<endl;
    return 0;
}
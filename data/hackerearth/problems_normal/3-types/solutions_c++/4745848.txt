#include <iostream>
#include <vector>
#include <queue>
#include <functional>
#include <utility>

using namespace std;
const int MAX = 1e4 + 5;
typedef pair<long long, int> PII;
bool marked[MAX];

float prim(int x, vector <PII> adj[])
{
    priority_queue<PII, vector<PII>, greater<PII> > Q;
    int y;
    float minimumCost = 0;
    PII p;
    Q.push(make_pair(0, x));
    while(!Q.empty())
    {
        // Select the edge with minimum weight
        p = Q.top();
        Q.pop();
        x = p.second;
        // Checking for cycle
        if(marked[x] == true)
        	{
        	if(p.first==0)
        	{
        	minimumCost+=0.5;
        	}
        	else
        	{
        	minimumCost++;
        	}
            continue;	
        	}
        
        marked[x] = true;
        for(int i = 0;i < adj[x].size();++i)
        {
            y = adj[x][i].second;
            if(marked[y] == false)
                Q.push(adj[x][i]);
            
        }
    }
    return minimumCost;
}

int main()
{
	
    int nodes, edges, x, y;
    long long weight=1; 
    float minimumCost;
    cin >> nodes >> edges;
    vector <PII> adj[nodes];
    vector <PII> adj2[nodes];
    for(int i = 0;i < edges;++i)
    {
        cin >> x >> y >>weight;
        if(weight==3)
        weight=0;
        if(weight==0||weight==1)
        {
        
        adj[x-1].push_back(make_pair(weight, y-1));
        adj[y-1].push_back(make_pair(weight, x-1));
        	
        }
        if(weight==0||weight==2)
        {
        
        adj2[x-1].push_back(make_pair(weight, y-1));
        adj2[y-1].push_back(make_pair(weight, x-1));
    	
        }
    
    }
    // Selecting 1 as the starting node
    int r=0;
    float p,q;
   q= prim(1,adj);
    
for(int i=0;i<nodes;i++)
{
    if(marked[i]==false)
    {
    	r=1;
    	break;
    }
    
}
for(int i=0;i<nodes;i++)
{
	marked[i]=false;
}
p=prim(1,adj2);
for(int i=0;i<nodes;i++)
{
    if(marked[i]==false)
    {
    	r=1;
    	break;
    }
    
}
if(r==1)
cout<<"-1";
else
cout<<p+q;
return 0;
}

#include <bits/stdc++.h>
#define INF 100000000
#define MOD 1000000007
#define MAXN 100005
#define ins insert
#define pb push_back
#define mp make_pair
#define sz size
#define rep(i, n) for(int i = 0; i < n; ++i)
#define sd(n) scanf("%d",&n)
#define sll(n) scanf("%I64d",&n)
#define pdn(n) printf("%d\n",n)
#define plln(n) printf("%I64d\n",n)
#define pd(n) printf("%d ",n)
#define nl() printf("\n")
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<ll> vi;
typedef vector<vi> vii;
typedef pair<int, int> pii;

namespace patch
{
    template < typename T > std::string to_string( const T& n )
    { 
        std::ostringstream stm ;
        stm << n ;
        return stm.str() ;
    }
}

int t, c; string s;
int dp[51][3][2001];

int solve(int idx, int rem, int cost) {
	if(idx < 0) {
		if(rem == 0 && cost <= c)
			return 1;
		return 0;
	}
	if(dp[idx][rem][cost] != -1)
		return dp[idx][rem][cost];
	ll ans = 0;
	int last = s[idx]-'0';
	for(int i = 0; i < 10; ++i) {
		if(idx == 0 && i == 0)
			continue;
		if(abs(last-i)+cost <= c) {
			ans += solve(idx-1, ((rem*10)%3+(i%3))%3, abs(last-i)+cost);
			ans %= MOD;
		}
	}
	return dp[idx][rem][cost] = ans;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> t;
    while(t--) {
    	memset(dp, -1, sizeof dp);
    	cin >> s >> c;
    	cout << solve(s.sz()-1, 0, 0) << endl;
    }
    return 0;
}

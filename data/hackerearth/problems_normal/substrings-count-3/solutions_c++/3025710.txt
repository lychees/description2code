//Created By Mayur Agarwal :)

#include <iostream>
#include <stdio.h>
#include <cmath>
#include <vector>
#include <string>
#include <cstring>
#include <set>
#include <algorithm>
#include <map>
#include <iterator>
#include <functional>
#include <stack>
#include <queue>
#include <unordered_map>

#define ll long long 
#define in(a) scanf("%lld",&a)
#define inc(a) scanf("%c",&a)
#define ins(a) scanf("%s", &a)
#define pr(a) printf("%lld\n",a)
#define prc(a) printf("%c",a)
#define prs(a) printf("%s\n",a)
#define fori(I,N) for(ll I=0;I<N;I++)
#define forin(i,n) for(ll I=1;I<=N;I++)
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define ALL(X) (X).begin(), (X).end()
#define pi   acos(-1.0)
#define mod 1000000007
#define SIZE 200010

using namespace std;
typedef pair<ll, ll>pll;
unordered_map< string,vector<int> >m;
unordered_map< string,vector<int> > :: iterator it;
vector<int> :: iterator sz;
int main()
{
	//freopen ("input.txt","r",stdin);
	ll n;
	cin>>n;
	//m.reserve(7000);
	for(ll i=0;i<n;i++)
	{	
		string s;
		cin>>s;
		ll len=s.size();
		for(ll j=0;j<len;j++)
		{
			string temp("");
			for(ll k=j;k<len;k++)
			{
				temp.push_back(s[k]);
				m[temp].push_back(i);
			}
		}
	}
	for(it = m.begin() ; it!=m.end() ; ++it)
	{
		sz = unique((it->second).begin(),(it->second).end());  // it's because there might exist more than one substring in any string that may be 
		 													   //same as substring given in query but we have to count it for once only so owe use 
		 													   //this unique();  
		(it->second).resize(distance((it->second).begin(),sz));
	}
	ll q;
	cin>>q;
	for(ll i=0;i<q;i++)
	{
		ll l,r;
		string str;
		cin>>l>>r>>str;
		ll ans=0;
		l--;
		r--;
		if(str.empty())
			ans=r-l+1;
		else
		{
			ll low=lower_bound(m[str].begin(),m[str].end(),l)-m[str].begin();
			ll upper=upper_bound(m[str].begin(),m[str].end(),r)-m[str].begin();
			ans=upper-low;
		}
		cout<<ans<<endl;
	}
	return 0;

}
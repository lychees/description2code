#include<bits/stdc++.h>
using namespace std;

#define mx 3010
#define mxp 5000000
#define mp make_pair
#define pb push_back
#define li long int
#define ll long long int

struct node
{
    li vec[ mx], sz;

    struct node *left, *right;

}*create, *run, *temp, *start;

li x[ mx], y[ mx], xt[ mx], yt[ mx], n;

bool hsh[ mx];

ll ans;

void ins( li i)
{
    if( start== NULL)
    {
        create= new node;

        create-> vec[ 0]= i;
        create-> sz= 1;
        create-> left= NULL;
        create-> right= NULL;
        start= create;
        return;
    }

    run= start;

    ll cross;

    while( run!= NULL)
    {
        temp= run;
        cross= 1ll* x[ temp-> vec[ 0]]* y[ i]- 1ll* y[ temp-> vec[ 0]]* x[ i];
        if( cross> 0) run= run-> left;
        if( cross< 0) run= run-> right;
        if( cross== 0)
        {
            temp-> vec[ temp-> sz++]= i;
            return;
        }
    }
    create= new node;

    create-> vec[ 0]= i;
    create-> sz= 1;
    create-> left= NULL;
    create-> right= NULL;

    if( cross> 0) temp-> left= create;
    if( cross< 0) temp-> right= create;

    return;
}

void bin_s( li x1, li y1, li i, li j)
{
    ll cross;
    run= start;
    while( run!= NULL)
    {
        cross= 1ll* x[ run-> vec[ 0]]* y1- 1ll* y[ run-> vec[ 0]]* x1;
        if( cross> 0) run= run-> left;
        if( cross< 0) run= run-> right;
        if( cross== 0)
        {
            for( li p= 0; p< run-> sz; p++)
            {
                if( i!= run-> vec[ p]&& j!= run-> vec[ p])
                {
                    if( hsh[ run-> vec[ p]]== 0)
                    {
                        ans+= 2;
                        hsh[ run-> vec[ p]]= 1;
                    }
                }
            }
            return;
        }
    }
    return;
}

void solve()
{
    start= NULL;

    li i, j, x1, y1;

    scanf( "%ld", &n);

    for( i= 1; i<= n; i++)
    {
        scanf( "%ld %ld", &x[ i], &y[ i]);
        xt[ i]= x[ i];
        yt[ i]= y[ i];
        x[ i]= -1* yt[ i];
        y[ i]= xt[ i];
        ins( i);
        x[ i]= yt[ i];
        y[ i]= -1* xt[ i];
        ins( i);
    }

    for( i= 1; i<= n; i++)
    {
        for( j= i+ 1; j<= n; j++)
        {
            memset( hsh, 0, sizeof hsh);
            x1= xt[ i]+ xt[ j];
            y1= yt[ i]+ yt[ j];
            if( x1== 0&& y1== 0) continue;
            bin_s( x1, y1, i, j);
        }
    }

    printf( "%lld\n", ans);

    return;
}

int main()
{
    solve();
    return 0;
}

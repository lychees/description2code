#include<iostream>
#include<queue>
#define MAX 10000001
using namespace std;
long long int dist[MAX];
void bfs(long long int dist[])
{
    for(long long int z=0;z<MAX;z++)
        dist[z]=0;
    queue<long long int> kolej;
    kolej.push(1);

    while(!kolej.empty())
    {
        long long int cur = kolej.front();
        kolej.pop();
        if(cur*3<=9999999 && dist[cur*3]==0)
        {
            kolej.push(cur*3);
            dist[cur*3]=dist[cur]+1;
        }
        if(cur*2<=9999999 && dist[cur*2]==0)
        {
            kolej.push(cur*2);
            dist[cur*2]=dist[cur]+1;
        }
        if(cur+1<=9999999 && dist[cur+1]==0)
        {
            kolej.push(cur+1);
            dist[cur+1]=dist[cur]+1;
        }
    }
}

int bfs2(long long int a, long long int dist[])
{
    int mov=0;
    int pom=1;
    int mini=50;
    if(a<=9999999)
        return dist[a];
    queue<long long int> koleja;
    koleja.push(a);

    while(!koleja.empty())
    {
        long long int cur=koleja.front();
        koleja.pop();
        if(cur<=9999999)
            {if(dist[cur]+mov<mini)
                mini=dist[cur]+mov;}
        if(mov==20)
        	return mini;
        //if(cur%6==0)
        	    //koleja.push(cur/3);
                //else{
                    if(cur%3==0)
                        koleja.push(cur/3);
                    if(cur%2==0)
                        koleja.push(cur/2);
                    koleja.push(cur-1);
        pom--;
        if(pom==0)
        {
            pom=koleja.size();
            mov++;
        }
    }
}

int main()
{
    int t;
    bfs(dist);
    cin >> t;
    while(t--)
    {
        long long int a;
        cin >> a;
        cout << bfs2(a,dist) << endl;
    }
    return 0;
}

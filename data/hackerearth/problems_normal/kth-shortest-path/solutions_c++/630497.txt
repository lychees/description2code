//============================================================================
// Author      : PUSHKAR SINGH
//============================================================================
#include<cstdio>
#include<vector>
#include<queue>
#include<algorithm>
#include<set>
#include<stack>
#include<cmath>
#include <map>
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<string>
#include<cassert>
using namespace std;
// Input macros
#define s(n) scanf("%d",&n)
#define sc(n) scanf("%c",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define ll long long
// Useful constants
#define INF (int)2e9
#define EPS 1e-9
// Useful hardware instructions
#define bitcount __builtin_popcount
#define gcd __gcd
// Useful container manipulation / traversal macros
#define all(a) a.begin(), a.end()
#define in(a,b) ( (b).find(a) != (b).end())
#define pb push_back
#define fill(a,v) memset(a, v, sizeof a)// fill originally
//#define sz(a) ((int)(a.size()))
#define mp make_pair

#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif

//#define tr(container, it) for(auto it = container.begin(); it != container.end(); it++)
//#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)

#define tr(container, it) for(aut(it,container.begin()); it != container.end(); it++)

#define llu long long unsigned
#define ld long
/*
int scan_d() {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ld scan_ld() {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ll scan_ll() {int ip=getchar_unlocked(),flag=1;ll ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scan_llu() {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
//end of fast input
//fast output
//no line break
void print_d(int n) {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void print_ld(ld n) {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void print_ll(ll n) {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void print_llu(llu n) {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
 */
#define DEBUG 1
#define debug(x) {if (DEBUG)cout <<#x <<" = " <<x <<endl; }
#define debugv(x) {if (DEBUG) {cerr <<#x <<" = "; tr((x),it) cerr <<*it <<", "; cerr <<endl; }}
#define mod 1000000007

#define checkbit(n,b) ( (n >> b) & 1)
#define unsetbit(n,b) (n & (~(1 << b)))
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pair<int, int> > vpii;
typedef vector<long long> vl;
typedef pair<long long, long long> pll;
typedef vector<pair<long long, long long> > vpll;
typedef vector<string> vs;

#define obstacle -10

int m,n;
int mat[101][101];
vector<int> dp[109][109];

void solve()
{
	s(m);
	s(n);

	char ch[3];

	for(int i=0;i<m;i++)
	{
		for(int j=0;j<n;j++)
		{
			ss(ch);
			if(ch[0] == '#')
			{
				mat[i][j] = obstacle;
			}
			else
			{
				mat[i][j] = atoi(ch);
			}
			dp[i][j].clear();
		}
	}

	dp[0][0].pb(mat[0][0]);

	for(int i=0;i<m;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(i==0 && j== 0) continue;

			if(mat[i][j] == obstacle) continue;

			int sz1,sz2;
			if(i-1 >= 0)
				sz1 = dp[i-1][j].size();
			else sz1=0;
			if(j-1 >= 0)
				sz2 = dp[i][j-1].size();
			else sz2=0;

			int w=0,q=0;
			int itr=0,bound = min(101,sz1+sz2);
			while( itr < bound)
			{
				if(q == sz1)
				{
					dp[i][j].pb(dp[i][j-1][w] + mat[i][j]);
					w++;
				}
				else if(w == sz2)
				{
					dp[i][j].pb(dp[i-1][j][q] + mat[i][j]);
					q++;
				}
				else
				{
					if(dp[i-1][j][q] < dp[i][j-1][w])
					{
						dp[i][j].pb(dp[i-1][j][q] + mat[i][j]);
						q++;
					}
					else
					{
						dp[i][j].pb(dp[i][j-1][w] + mat[i][j]);
						w++;
					}
				}
				itr++;
			}
		}
	}

}


int main()
{
	int t;
	s(t);
	while(t--)
	{
		solve();

		int q;
		s(q);
		int x,y,k;
		while(q--)
		{
			s(x);
			s(y);
			s(k);
			if(mat[x][y] == obstacle)
			{
				printf("Obstacle\n");
			}
			else if(dp[x][y].size() < k)
			{
				printf("Not so many paths\n");
			}
			else
			{
				printf("%d\n",dp[x][y][k-1]);
			}
		}

	}
}

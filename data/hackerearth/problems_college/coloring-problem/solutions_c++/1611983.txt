// C++ program to find out whether a given graph is Bipartite or not
#include <iostream>
#include <queue>
int V;
using namespace std;
#include<stdio.h>
#include<string.h>
// This function returns true if graph G[V][V] is Bipartite, else false
bool isBipartite(int G[][200], int src)
{
    // Create a color array to store colors assigned to all veritces. Vertex 
    // number is used as index in this array. The value '-1' of  colorArr[i] 
    // is used to indicate that no color is assigned to vertex 'i'.  The value 
    // 1 is used to indicate first color is assigned and value 0 indicates 
    // second color is assigned.
    int colorArr[V];
    for (int i = 0; i < V; ++i)
        colorArr[i] = -1;
 
    // Assign first color to source
    colorArr[src] = 1;
 
    // Create a queue (FIFO) of vertex numbers and enqueue source vertex
    // for BFS traversal
    queue <int> q;
    q.push(src);
 
    // Run while there are vertices in queue (Similar to BFS)
    while (!q.empty())
    {
        // Dequeue a vertex from queue ( Refer http://goo.gl/35oz8 )
        int u = q.front();
        q.pop();
 
         // Find all non-colored adjacent vertices
        for (int v = 0; v < V; ++v)
        {
            // An edge from u to v exists and destination v is not colored
            if (G[u][v] && colorArr[v] == -1)
            {
                // Assign alternate color to this adjacent v of u
                colorArr[v] = 1 - colorArr[u];
                q.push(v);
            }
 
            //  An edge from u to v exists and destination v is colored with
            // same color as u
            else if (G[u][v] && colorArr[v] == colorArr[u])
                return false;
        }
    }
 
    // If we reach here, then all adjacent vertices can be colored with 
    // alternate color
    return true;
}
 
// Driver program to test above function
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    	int m;
    	cin>>V>>m;
    	int graph[V][200];
    	memset(graph,0,sizeof(graph));
    	for(int i=0;i<m;i++)
    	{
    		int a,b;
    		cin>>a>>b;
    		graph[a][b]=1;
    	}
    	isBipartite(graph, 0) ? cout << "BICOLORABLE.\n" : cout << "NOT BICOLORABLE.\n";
    }
   
    return 0;
}
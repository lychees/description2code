#include<iostream>
#include<algorithm>
using namespace std;
inline void scanint(int *a)
{
	register char c=0;
	while(c<33)
	c=getchar();
	*a=0;
	while(c>33)
	{
		*a=*a*10+c-'0';
		c=getchar();
	}
}
class element
{
	public:
    int data;
    element *next;
};
class stack
{
	public:
	element *top;
	stack(){top=0;}	
    void push(int x)
    {
      element *p=new element;
      p->data=x;
	  p->next=top;
	  top=p;	
	}
	void pop()
	{
	  if(top)
	  {
	  	element *p=top;
	  	top=top->next;
	  	delete p;
	  }			
	}
	int peek()
	{
	  return top->data;			
	}
};
int main()
{
	int t,i,h,n,x,y;
	cin>>t;
	for(h=0;h<t;h++)
	{
		scanint(&n);
		scanint(&x);
		scanint(&y);
		int A[n],B[n],cost=0,temp;
		for(i=0;i<n;i++)
		{
		  scanint(&A[i]);
		  scanint(&B[i]);
		}
		sort(A,A+n);
		sort(B,B+n);
		stack P,Q;
		for(i=0;i<n;i++)
		{
		  if(A[i]>B[i])
		  {
		  	temp=A[i]-B[i];
		  	cost+=y*temp;
		  	while(P.top)
		  	{
		  	  if(P.peek()<=temp)
		  	  {	
		  	    temp-=P.peek();
			    P.pop();
		      }
		      else
		      {
		        P.top->data=P.top->data-temp;
		        break;
			  }
		    }
		    if(!P.top)
		    {
		      Q.push(temp);
			}
		  }
		  else if(A[i]<B[i])
		  {
		  	temp=B[i]-A[i];
		  	cost+=x*temp;
			while(Q.top)
			{
				if(Q.peek()<=temp)
				{
				   temp-=Q.peek();
				   Q.pop();
				}
				else
				{
				   Q.top->data=Q.top->data-temp;
				   break;
				}
		    }
		    if(!Q.top)
		    {
		       P.push(temp);
			}
		  }
		}
		printf("%d \n",cost);
	}
	return 0;
}
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <functional>
#include <unordered_map>
#include <vector>

using namespace std;

class MyHash {
 public:
    std::size_t operator()(const std::vector<int> &vec) const {
	  std::size_t seed = 0;
	  for(auto& i : vec) {
	    seed ^= i + 0x9e3779b9 + (seed << 6) + (seed >> 2);
	  }
	  return seed;
	}

};

vector<int> readTuple(int K) {
	int tmp;
	vector<int> vec;
	for (int i = 0; i < K; ++i) {
		scanf("%d", &tmp);
		vec.push_back(tmp);
	}
	return vec;
}

void readinsert(unordered_map<vector<int>, string, MyHash>& mp, int K) {
	static char buff[20];
	scanf("%s", buff);
	vector<int> vec = readTuple(K);
	mp[vec] = string(buff);
}

int main() {
	int N, K, L, Q;
	scanf("%d%d%d%d", &N, &K, &L, &Q);
	unordered_map<vector<int>, string, MyHash> mp;
	for (int i = 0; i < N; ++i) {
		readinsert(mp, K);
	}
	while(Q--) {
		vector<int> vec = readTuple(K);
		if (mp.find(vec) == mp.end())
			puts("You cant fool me :P");
		else cout << mp[vec] << endl;
	}
	return 0;
}
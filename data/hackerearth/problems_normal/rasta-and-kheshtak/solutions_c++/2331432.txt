#include <bits/stdc++.h> 

using namespace std;
 
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(x) (int)((x).size()) 
#define forn(i,n) for (int i = 0; (i) < (n); ++i)
#define fornr(i,n) for (int i = (n) - 1; (i) >= 0; --i)
#define forab(i,a,b) for (int i = (a); (i) < (b); ++i)
#define forba(i,a,b) for (int i = (b) - 1; (i) >= (a); --i)
#define forit(it,c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
#define all(c) (c).begin(),(c).end() 

#ifdef LOCAL
    #define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
    #define eprintf(...) static_cast<void>(0)   
#endif

#ifdef _WIN32
    #define I64 "%I64d"
#else
    #define I64 "%lld"
#endif

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef unsigned int uint;
typedef vector <int> vi;
typedef pair <int, int> pii;

#define FNAME ""

const ULL P = 1e9 + 7, Q = 1e9 + 9;
const int MAXN = 800;

unordered_set <ULL> was;
ULL hA[MAXN][MAXN], hB[MAXN][MAXN], degP[MAXN], degQ[MAXN];

int main() 
{
#ifdef LOCAL    
    freopen(FNAME".in", "r", stdin);
    freopen(FNAME".out", "w", stdout); 
#endif    
    degP[0] = degQ[0] = 1;
    forab (i, 1, MAXN)
        degP[i] = degP[i - 1] * P, degQ[i] = degQ[i - 1] * Q;
    int n, m, x, y, k;
    scanf("%d%d", &n, &m);
    forn (i, n)
        forn (j, m)
        {
            scanf("%d", &k);
            hA[i + 1][j + 1] = hA[i][j + 1] * Q + hA[i + 1][j] * P - hA[i][j] * P * Q + k;
        }
    scanf("%d%d", &x, &y);
    forn (i, x)
        forn (j, y)
        {
            scanf("%d", &k);
            hB[i + 1][j + 1] = hB[i][j + 1] * Q + hB[i + 1][j] * P - hB[i][j] * P * Q + k;
        }
    int ll = 0, rr = min(n, m) + 1;
    while (rr - ll > 1)
    {
        was.clear();
        int mm = (ll + rr) / 2;
        forn (i, n - mm + 1)
            forn (j, m - mm + 1)
                was.insert(hA[i + mm][j + mm] - hA[i][j + mm] * degQ[mm] - hA[i + mm][j] * degP[mm] + hA[i][j] * degQ[mm] * degP[mm]);
        bool ok = 0;
        forn (i, x - mm + 1)
        {
            forn (j, y - mm + 1)
                if (was.count(hB[i + mm][j + mm] - hB[i][j + mm] * degQ[mm] - hB[i + mm][j] * degP[mm] + hB[i][j] * degQ[mm] * degP[mm]))
                {
                    ok = 1;
                    break;
                }
            if (ok)
                break;
        }
        if (ok)
            ll = mm;
        else
            rr = mm;
    }
    printf("%d\n", ll);
    return 0;
}
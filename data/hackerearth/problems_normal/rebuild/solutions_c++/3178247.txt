#include<bits/stdc++.h>

using namespace std;

typedef long long ll;

const int max_m= 1e5 + 10;
const int max_n= 1e5 + 10;

struct node
{
	ll c, v1, v2;
}edges[max_m];

ll deg[max_n], par[max_n], no[max_n];

bool compare(node a, node b)
{
	ll vamin, vamax, vbmin, vbmax;
	
	vamin= min(a.v1, a.v2);
	vamax= max(a.v1, a.v2);
	vbmin= min(b.v1, b.v2);
	vbmax= max(b.v1, b.v2);
	
	if((a.c)!=(b.c))
	{
		return ((a.c)<(b.c));
	}
	else if((vamin)!=(vbmin))
	{
		return ((vamin)>(vbmin));
	}
	
	return ((vamax)>(vbmax));
}

ll get_root(ll a)
{
	if(par[a]==a)
	return a;
	
	return (par[a]= get_root(par[a]));
}

int main()
{
	ll t, i, j, n, m, a, b, c, v1, v2, sum, rootv1, rootv2;
	
	scanf("%lld", &t);
	
	while(t--)
	{
		sum= 0;
		
		scanf("%lld %lld", &n, &m);
		
		for(i=0;i<n;++i)
		{
			deg[i]= 0;
			no[i]= 1;
			par[i]= i;
		}
		
		for(i=0;i<m;++i)
		{
			scanf("%lld %lld %lld", &edges[i].v1, &edges[i].v2, &edges[i].c);
			edges[i].v1--;
			edges[i].v2--;
		}
		
		sort(edges, edges+m, compare);
		
		for(i=0;i<m;++i)
		{
			//cout<<"i= "<<i<<endl;
			
			//cout<<"v1= "<<edges[i].v1<<"v2= "<<edges[i].v2<<endl;
			rootv1= get_root(edges[i].v1);
			//cout<<"v1= "<<edges[i].v1<<endl;
			rootv2= get_root(edges[i].v2);
			//cout<<"v2= "<<edges[i].v2<<endl;
			
			if(rootv1!=rootv2)
			{
				if(no[rootv1]<no[rootv2])
				{
					par[rootv1]= rootv2;
					no[rootv2]+= no[rootv1];
				}
				else
				{
					par[rootv2]= rootv1;
					no[rootv1]+= no[rootv2];	
				}
				
				deg[edges[i].v1]++;
				deg[edges[i].v2]++;
				
				sum+= edges[i].c;
			}
		}
		
		printf("%lld\n", sum);
		
		for(i=0;i<n;++i)
		{
			printf("%lld ", deg[i]);
		}
		
		printf("\n");
	}
	
	return 0;
}
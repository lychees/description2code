#include<bits/stdc++.h>
using namespace std;
#define lld long long int
#define gc getchar_unlocked
lld mod;
inline int read()
{
	int x;
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
	return x;
}
inline void multiply(lld F[2][2], lld M[2][2])
{
  lld x =  ((F[0][0]*M[0][0])%mod + (F[0][1]*M[1][0])%mod)%mod;
  lld y =  ((F[0][0]*M[0][1])%mod + (F[0][1]*M[1][1])%mod)%mod;
  lld z =  ((F[1][0]*M[0][0])%mod + (F[1][1]*M[1][0])%mod)%mod;
  lld w =  ((F[1][0]*M[0][1])%mod + (F[1][1]*M[1][1])%mod)%mod;
 
  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}
inline void power(lld F[2][2], int n)
{
  if( n == 0 || n == 1)
      return;
  lld M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2);
  multiply(F, F);
 
  if (n%2 != 0)
     multiply(F, M);
}
 
inline lld fib(lld n)
{
  lld F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-1);
  return F[0][0];
}

lld fast_pow(lld a,int b,lld mod)
{
  if(b==0) return 1;
  lld t=fast_pow(a,b/2,mod);
  if(b%2==0)
  return (t*t)%mod;
  else
  return (((t*t)%mod)*a)%mod;	
}

lld nCr(int n,int r,lld mod)
{
	lld ans,x=(lld)1,y=(lld)1;
	while(r>0)
	{   
		//x=po(r,mod-2,mod);
		//ans=(ans*(n*x)%mod)%mod;
		//n=n-1;r=r-1;
		y=(y*n)%mod;
		x=(x*r)%mod;
		n--;r--;
	}
	ans=(y*(fast_pow(x,mod-2,mod)))%mod;
	return ans;
}

int main()
{
	
	int t;
	scanf("%d",&t);
	int n,i,j,k,p,q,r,x,y;
	while(t--)
	{
		/*n=read();
		x=read();*/
		scanf("%d",&j);
		scanf("%d %d %d",&p,&q,&r);
		lld sum=p+q+r;
		cout<<(lld)pow(sum,j)<<endl;

		//sort(V.begin(),V.end());
		//lld ans=__gcd(p,q);
		// bool bs=binary_search(V.begin(),V.end(),element);

	}
	return 0;
}

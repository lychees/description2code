#include<bits/stdc++.h>
using namespace std;
#define MAX1 999999
//int dir[][2]={ {-1,0},{1,0},{0,-1},{0,1} };
typedef pair<int,pair<int,int> >P;
int main()
{
	pair<int,pair<int,int> >Q;
	int a[1001][1001],n,m,x,y,time1,t;
	cin>>t;
	while(t--)
	{
		cin>>m>>n;
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		cin>>a[i][j];
	}
	cin>>x>>y>>time1;
	
	priority_queue<P,vector<P>,greater<P> >pq;
	int dis[m+1][n+1];
	bool vis[m+1][n+1];
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			vis[i][j]=false;
			dis[i][j]=MAX1;
		}
	}
	
	dis[1][1]=a[1][1];
	pq.push(make_pair(dis[1][1],make_pair(1,1)));
	
	while(!pq.empty())
	{
		 Q=pq.top();
		int X=Q.second.first;
		int Y=Q.second.second;
		pq.pop();
		if(X==x && Y==y)
		break;
		
		if(vis[X][Y]==true)
		continue;
		
		vis[X][Y]=true;
		
		if(X+1<=m)
		{
			dis[X+1][Y]=min(dis[X+1][Y],a[X+1][Y]+dis[X][Y]);
			Q.second.first=X+1;
			Q.second.second=Y;
			Q.first=dis[X+1][Y];
			pq.push(Q);
		}
		
		if(X-1>=1)
		{
			dis[X-1][Y]=min(dis[X-1][Y],a[X-1][Y]+dis[X][Y]);
			Q.second.first=X-1;
			Q.second.second=Y;
			Q.first=dis[X-1][Y];
			pq.push(Q);
		}
		
		if(Y+1<=n)
		{
			dis[X][Y+1]=min(dis[X][Y+1],a[X][Y+1]+dis[X][Y]);
			Q.second.first=X;
			Q.second.second=Y+1;
			Q.first=dis[X][Y+1];
			pq.push(Q);
		}
		
		if(Y-1>=1)
		{
			dis[X][Y-1]=min(dis[X][Y-1],a[X][Y-1]+dis[X][Y]);
			Q.second.first=X;
			Q.second.second=Y-1;
			Q.first=dis[X][Y-1];
			pq.push(Q);
		}
	}
		
	if(dis[x][y]>time1)
	cout<<"NO"<<endl;
	else
	{
		cout<<"YES"<<endl;
		cout<<time1-dis[x][y]<<endl;
	}
	while(!pq.empty())
	pq.pop();
}
return 0;
}
	
	
	
	
	
	
	

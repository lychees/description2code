#include<bits/stdc++.h>
#include<algorithm>
#include<vector>
#include<queue>
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={0,1,0,-1};int dy[]={1,0,-1,0}; //4 direction
#define REP(n) for(int i=0;i<n;i++)
#define REPU(a,b) for(int i=a;i<b;i++)
#define sll(n) scanf("%lld",&n)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d",n)
#define sl(n) scanf("%ld",&n)
#define pin(n) printf("%d\n",n)
#define MP make_pair
#define PB push_back
typedef long long LL;
using namespace std;
long long inverse(long long a,long long b) // b means mod
{
    long long  q;
    long long mod=b;
    long long t=1,old_t=0;
    while(b>0)
    {
        q=a/b;
        long long temp=a;
        a=b;
        b=temp%b;
        temp=t;
        t=old_t;
        old_t=temp-q*old_t;
    }
    return t<0 ? t+mod : t;
}
int main()
{
    int t;si(t);
    while(t--)
    {
        long long a,p,n;
        sll(a); sll(p); sll(n);
        if(__gcd(a,p)!=1)
            printf("%d\n",-1);
        else
        {
            long ans=inverse(a,p);
            ans= (a*((n+1)/2)) + (ans*(n/2)) ;
            cout<<ans<<endl;
        }
    }
	return 0;
}

#include <bits/stdc++.h>
using namespace std;

#define inf 1000000000
#define mp make_pair

int SP1[1260], SP2[1260], SP3[1260], SP4[1260], road[1260][1260], rail[1260][1260];
priority_queue< pair<int, int>, vector< pair<int, int> >, greater< pair<int, int> > > Q;

void relax1(int u, int v, int w)
{
	if(SP1[v]>SP1[u]+w)
	{
		SP1[v] = SP1[u] + w;
		Q.push(mp(SP1[v], v));
	}
}

void relax2(int u, int v, int w)
{
	if(SP2[v]>SP2[u]+w)
	{
		SP2[v] = SP2[u] + w;
		Q.push(mp(SP2[v], v));
	}
}

void relax3(int u, int v, int w)
{
	if(SP3[v]>SP3[u]+w)
	{
		SP3[v] = SP3[u] + w;
		Q.push(mp(SP3[v], v));
	}
}

void relax4(int u, int v, int w)
{
	if(SP4[v]>SP4[u]+w)
	{
		SP4[v] = SP4[u] + w;
		Q.push(mp(SP4[v], v));
	}
}

int main()
{
    int N;
    scanf("%d", &N);
    
    for(int i=0; i<N; i++)
    	for(int j=0; j<N; j++)
    		scanf("%d", &road[i][j]);
    
    for(int i=0; i<N; i++)
    	for(int j=0; j<N; j++)
    		scanf("%d", &rail[i][j]);
    
    for(int i=0; i<N; i++)
    	SP1[i] = SP2[i] = SP3[i] = SP4[i] = inf;
    
    int U, V;
    scanf("%d %d", &U, &V);
    
    U--, V--;
    
    SP1[U] = 0;
    SP2[U] = 0;
    
    SP3[V] = 0;
    SP4[V] = 0;
    
    Q.push(mp(SP1[U], U));
    
    while(!Q.empty())
    {
    	pair<int, int> x = Q.top();
    	Q.pop();
    	
    	int indx = x.second, dist = x.first;
    	
    	for(int i=0; i<N; i++)
    		if(i!=indx)
    			relax1(indx, i, road[indx][i]);
    }
    
    Q.push(mp(SP2[U], U));
    
    while(!Q.empty())
    {
    	pair<int, int> x = Q.top();
    	Q.pop();
    	
    	int indx = x.second, dist = x.first;
    	
    	for(int i=0; i<N; i++)
    		if(i!=indx)
    			relax2(indx, i, rail[indx][i]);
    }
    
    Q.push(mp(SP3[V], V));
    
    while(!Q.empty())
    {
    	pair<int, int> x = Q.top();
    	Q.pop();
    	
    	int indx = x.second, dist = x.first;
    	
    	for(int i=0; i<N; i++)
    		if(i!=indx)
    			relax3(indx, i, road[i][indx]);
    }
    
    Q.push(mp(SP4[V], V));
    
    while(!Q.empty())
    {
    	pair<int, int> x = Q.top();
    	Q.pop();
    	
    	int indx = x.second, dist = x.first;
    	
    	for(int i=0; i<N; i++)
    		if(i!=indx)
    			relax4(indx, i, rail[i][indx]);
    }
    
    int ans = inf;
    
    for(int i=0; i<N; i++)
    {
    	if(i!=U && i!=V)
    		ans = min(ans, min(SP1[i]+SP4[i], SP2[i]+SP3[i]));
    }
    
    printf("%d\n", ans);
    
    return 0;
}

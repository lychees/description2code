#include <bits/stdc++.h>

using namespace std;

#define MAX 100000
#define MOD 1000000007

int N;
long long dp[100001][2];
long long arr[100001];
long long ft[100001];

void updateDP(int x, int i, long long v){
	while (x <= MAX) {
		dp[x][i] += v;
		dp[x][i] %= MOD;
		x += (x&(-x));
	}
}
long long queryDP(int x, int i){
	long long sum = 0;
	while (x > 0) {
		sum += dp[x][i];
		sum %= MOD;
		x -= (x&(-x));
	}
	return sum;
}
void updateFT(int x, long long v){
	while (x <= MAX) {
		ft[x] += v;
		x += (x&(-x));
	}
}
long long queryFT(int x){
	long long sum = 0;
	while (x > 0) {
		sum += ft[x];
		x -= (x&(-x));
	}
	return sum;
}
int main(){
	int N;
	cin >> N;
	for (int i = 1; i <= N; i++) {
		cin >> arr[i];
	}
	long long ans = 0;
	for (int i = 1; i <= N; i++) {
		long long a = queryDP(arr[i] - 1, 1) + queryFT(arr[i] - 1);
		a %= MOD;
		long long b = queryDP(MAX, 0) - queryDP(arr[i], 0) + queryFT(MAX) - queryFT(arr[i]);
		b += MOD;
		b %= MOD;

		updateFT(arr[i], 1);
		updateDP(arr[i], 0, a);
		updateDP(arr[i], 1, b);

		ans += (a + b);
		ans %= MOD;
	}
	cout << ans << endl;
	/*
	long long ans=0;
	long long f,s;
	for(int i=1;i<=N;i++){

	f=queryDP(arr[i]-1,1);
	s=queryDP(100000,0)-queryDP(arr[i],0);
	s+=MOD;
	s%=MOD;
	f+=queryFT(arr[i]-1);
	s=s+queryFT(100000)-queryFT(arr[i]);

	f%=MOD;
	s%=MOD;

	updateFT(arr[i],1);
	updateDP(arr[i],0,f);
	updateDP(arr[i],1,s);

	ans=ans+f+s;
	ans%=MOD;

	}
	cout<<ans;
	*/
}

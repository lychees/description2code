#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 200005;
int n, a[N], pos[N >> 1][2];
ll pw[N >> 1];

template<class T> struct Fenwick {
    vector<T> bit;
    
    Fenwick(int _n) {
        bit.assign(_n + 1, 0);
    }
    
    void add(int ind, T val) {
        for (int i = ind; i < bit.size(); i += i & -i) {
            bit[i] += val;
        }
    }
    
    T get(int ind) {
        T ans = 0;
        for (int i = ind; i > 0; i -= i & -i) {
            ans += bit[i];
        }
        return ans;
    }
};


int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    
	pw[0] = 1;
	repu(i, 1, N >> 1) {
		pw[i] = (pw[i - 1] << 1) % MOD;
	}
	
	cin >> n;
	mem(pos, -1);
	repu(i, 0, n + n) {
		cin >> a[i];
		if (pos[a[i]][0] == -1) pos[a[i]][0] = i;
		else pos[a[i]][1] = i;
	}
	if (n == 1) {
		cout << 1 << endl;
		return 0;
	}
	
	ll ans = 0;
	Fenwick<int> fw(n);
	repu(i, 0, n + n) {
		int x = fw.get(a[i]), y = i - x;
		if (pos[a[i]][1] == i) {
			ans += pw[n - 1];
			x--;
		}
		ans += x * pw[n - 2];
		ans += y * 3 * pw[n - 2];
		ans %= MOD;
		fw.add(a[i], 1);
	}
	
	cout << ans << endl;
	
    return 0;
}

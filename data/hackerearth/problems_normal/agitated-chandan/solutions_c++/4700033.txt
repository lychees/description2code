/* Aman Varshney , ZHCET, AMU Computer Engineering */
/** https://www.hackerearth.com/problem/algorithm/agitated-chandan/
**/
#include<bits/stdc++.h>
#define sc(n) scanf("%lld",&n)
using namespace std;
typedef long long int ll;
int main()
{
    ll t,n,a,b,w,i;
    sc(t);
    while(t--)
    {
        sc(n);
        vector< list<pair<ll,ll> > > alist(n+1);
        vector<bool> check(n+1,false);
        for(i=0; i<n-1; i++)
        {
            sc(a);
            sc(b);
            sc(w);
            alist[a].push_back(make_pair(b,w));
            alist[b].push_back(make_pair(a,w));
            //check[i]=false;
        }

        vector<ll> dist(n+1);
        list<ll> Q;
        list< pair<ll,ll> >::iterator itr;
        dist[1]=0;
        check[1] = true;
        Q.push_back(1);
        //cout<<"heyeyy";
        while(!Q.empty())
        {
            //cout<<"hh";
            ll s = Q.front();
            itr = alist[s].begin();

            Q.pop_front();
            for(; itr!=alist[s].end(); itr++)
            {
                // cout<<"h";
                ll fst = (*itr).first;

                if(check[fst] == false)
                {
                    check[fst]=true;
                    dist[fst] = dist[s] + (*itr).second;
                    Q.push_back(fst);
                    // dist+= (*itr).second;
                }
            }
        }
        ll pos = max_element(dist.begin()+1,dist.end()) - dist.begin();

        fill(dist.begin(),dist.end(),0);
        fill(check.begin(),check.end(),false);
        dist[pos] = 0;
        check[pos] = true;
        Q.push_back(pos);
        while(!Q.empty())
        {
            // cout<<"hh";
            ll s = Q.front();
            itr = alist[s].begin();

            Q.pop_front();
            for(; itr!=alist[s].end(); itr++)
            {
                // cout<<"h";
                ll fst = (*itr).first;

                if(check[fst] == false)
                {
                    check[fst]=true;
                    dist[fst] = dist[s] + (*itr).second;
                    Q.push_back(fst);
                    // dist+= (*itr).second;
                }
            }
        }
        ll max_dist = *max_element(dist.begin()+1,dist.end());

        if(max_dist<=100)
            printf("0 %lld\n",max_dist);
        else if(max_dist<=1000)
            printf("100 %lld\n",max_dist);
        else if(max_dist<=10000)
            printf("1000 %lld\n",max_dist);
        else
            printf("10000 %lld\n",max_dist);
    }
    return 0;
}

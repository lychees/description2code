#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
typedef vector<vll> mat;
const int MOD=1000000007;

void matmult ( mat &res, mat&a,mat&b ) {
    int n=res.size();
    rep ( i,n )
    rep ( j,n ) {
        res[i][j]=0;
        rep ( k,n ) res[i][j]=(res[i][j]+a[i][k]*b[k][j])%MOD;
//         res[i][j]%=MOD;
    }
}
void matpow ( mat &res, mat&m,ll n ) {
    int d=res.size();
    rep ( i,d ) rep ( j,d ) res[i][j]= ( i==j );
    mat res2 ( d,vll ( d ) );
    while ( n>0 ) {
        if ( n%2 ) {
            matmult ( res2,res,m );
            res=res2;
        }
        n/=2;
        matmult ( res2,m,m );
        m=res2;
    }
}

int main() {
       ios_base::sync_with_stdio ( false );
    const int mDim=16;
    mat m ( mDim,vll ( mDim ) );
    rep ( i,16 ) m[i][i]=6;
    rep ( j,4 ) rep ( i,16 ) m[i][i^ ( 1<<j )]+=1;


    int t;
    cin>>t;
    while ( t-- ) {
        ll N,A,B,C,D;
        cin>>N>>A>>B>>C>>D;
        mat X(m);
        mat res ( mDim,vll ( mDim ) );
        matpow ( res,X,N );
//         cout<<res;
        cout<<res[A* ( 1<<3 ) +B* ( 1<<2 ) +C*2+D][0]<<endl;
    }

    return 0;
}



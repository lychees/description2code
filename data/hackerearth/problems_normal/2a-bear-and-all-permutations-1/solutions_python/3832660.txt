import sys
from fractions import gcd
import itertools
def next_permutation(s):
  for i in reversed(xrange(len(s))):
    if s[i] > s[i-1]:
      break
  else:
    return []
  i -= 1
  for j in reversed(xrange(i + 1, len(s))):
    if s[j] > s[i]: break
  t = s[i]
  s[i] = s[j]
  s[j] = t
  s[i + 1:] = reversed(s[i + 1:])
  return s
t=raw_input()
#print(t)
b=[0,1,2,8,68,1504,127792,57140352,258023200384,10151395367145472,3673835865235792306176,13318668301694192513859649536,531680718673514734573555796872790016]
for lo in range (1,10):
    a=[ ]
    val=1
    sum1=0
    c=1
    for i in range(0,lo):
        c=c*(i+1)
        a.append(i+1)
    while(c>0):
        val=1
        for i in range(0,lo):
            for j in range(i+1,lo):
                val=val*gcd((j-i),abs(a[i]-a[j]))
        next_permutation(a)
        c=c-1
        sum1=sum1+val
    b.append(sum1)
   
#print(t)
for h in range(0,int(t)):
	s=raw_input()
	#print(s)
	inlist=map(int,s.split())
	n=inlist[0]
	m=inlist[1]
	#print(n)
	val=int(b[n]%m)
	print(val)
"""ll val=b[n]%m;
if(n<11)
cout<<val<<endl;
else
cout<<(m-2)%m<<endl;
//ll opi=pow(10,17);
//	cout<<opi<<endl;
}
"""

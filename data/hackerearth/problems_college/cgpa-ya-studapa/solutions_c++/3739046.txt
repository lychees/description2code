#include <cstdio>
#include <cstring>
#include <cassert>

#include <algorithm>
#include <iostream>
using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;

const int MAX = 110;

int N;
llint A[MAX], B[MAX], P[MAX];
llint As[MAX], Bs[MAX];

llint dp[MAX][MAX];

int cnt[MAX][MAX];
llint pts[MAX][MAX];

llint ans[MAX];

inline llint calc(llint init, llint curr, llint points, llint diff) {
  llint w = init + points - curr - diff;
  return w < 0 ? init + -w : init;
}

int main() {
  int T;
  scanf("%d", &T);
  while (T--) {
    scanf("%d", &N);
    REP(i, N) scanf("%lld", A+i);
    REP(i, N) scanf("%lld", B+i);
    REP(i, N) scanf("%lld", P+i);

    A[N] = B[N] = P[N] = 0;
    ++N;

    REP(i, N) As[i] = A[i];
    REP(i, N) Bs[i] = B[i];
    sort(As, As+N);
    sort(Bs, Bs+N);

    REP(i, N) REP(j, N) cnt[i][j] = pts[i][j] = 0;
    REP(i, N) REP(j, N) REP(k, N) if (A[k] <= As[i] || B[k] <= Bs[j]) {
      ++cnt[i][j];
      pts[i][j] += P[k];
    }

    REP(i, N) REP(j, N) dp[i][j] = As[i] + Bs[j];

    REP(i, N) REP(j, N) {
      llint init = dp[i][j];
      llint curr = As[i] + Bs[j];
      llint points = pts[i][j];

      if (i+1 < N) dp[i+1][j] = min(dp[i+1][j], calc(init, curr, points, As[i+1]-As[i]));
      if (j+1 < N) dp[i][j+1] = min(dp[i][j+1], calc(init, curr, points, Bs[j+1]-Bs[j]));
    }

    REP(i, N+1) ans[i] = 1e18;
    ans[0] = 0;

    REP(i, N) REP(j, N) {
      int c = cnt[i][j];
      ans[c] = min(ans[c], dp[i][j]);
    }
    for (int i = N; i > 0; --i) ans[i-1] = min(ans[i-1], ans[i]);

    FOR(i, 2, N+1) printf("%lld%c", ans[i], " \n"[i==N]);
  }
  return 0;
}

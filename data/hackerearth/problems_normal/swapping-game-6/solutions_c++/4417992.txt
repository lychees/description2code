/*
Sherlock and Watson are playing swapping game. Watson gives to Sherlock a string S on which he has performed K swaps. You need to help Sherlock in finding the original string.
One swap on a string is performed in this way:

    Assuming 1 indexing, the i'th letter from the end is inserted between i'th and (i+1)'th letter from the starting.

For example, we have "contest". After one swap, it would change to "ctosnet". Check this image:
Input:
First line contains K, the number of swaps performed by Watson. Next line contains S, the string Watson gives to Sherlock.

Output:
You have to print in one line the original string with which Watson had started.

Constraints:
1 ≤ K ≤ 109
3 ≤ Length(S) ≤ 1000
All characters in S will be small English alphabets.
*/

#include <iostream>
#include <math.h>
using namespace std;

int main()
{
    int K;
    string str;

    cin >> K;
    cin >> str;
    string newstr;
    for (int i = 0; i < str.size(); i++) {
    	newstr += ' ';
    }
    int i, begin, end;

    string original = str;
    int finalK = 0;
    bool flag = false;

    for (int k = 0; k < K; k++) {
    	i = 0;
    	begin = 0;
    	end = str.size() - 1;

	    while(i < str.size()) {
	    	newstr[begin] = str[i];
	    	i++;
	    	begin++;
	    	if (begin > end) {
	    		break;
	    	}
	    	newstr[end] = str[i];
	    	i++;
	    	end--;
	    }
	    str = newstr;
	    if (str == original) {
	    	flag = true;
	    	finalK = k;
	    	break;
	    }
	}

	if (flag) {
		int x = fmod(K, finalK + 1);
		for (int k = 0; k < x; k++) {
	    	i = 0;
	    	begin = 0;
	    	end = str.size() - 1;

		    while(i < str.size()) {
		    	newstr[begin] = str[i];
		    	i++;
		    	begin++;
		    	if (begin > end) {
		    		break;
		    	}
		    	newstr[end] = str[i];
		    	i++;
		    	end--;
		    }
		    str = newstr;
		}
	}
    cout << str << endl;
    return 0;
}
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<iomanip>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<climits>
#include<cmath>
#include<cctype>


#define pb push_back
#define mp make_pair
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define ren(i,a,b) for(int i=a;i>=b;i--)
#define ff first
#define ss second
#define pll pair<long long int,long long int>
#define pii pair<int,int>
#define vll vector<long long int>  
#define vii vector<int>
#define gi(n) scanf("%d",&n)
#define gll(n) scanf("%lld",&n)
#define gstr(n) scanf("%s",n)
#define gl(n) cin >> n
#define oi(n) printf("%d",n)
#define oll(n) printf("%lld",n)
#define ostr(n) printf("%s",n)
#define ol(n) cout << n
#define os cout<<" "
#define on cout<<"\n"
#define o2(a,b) cout<<a<<" "<<b
#define all(n) n.begin(),n.end()
#define present(s,x) (s.find(x) != s.end()) 
#define cpresent(s,x) (find(all(s),x) != s.end()) 
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
using namespace std;
 
typedef unsigned long long int ull;
typedef long long int ll;
typedef vector<vector<ll> > mat;

int main()
{ios_base::sync_with_stdio(false);
int t;
gl(t);
while(t--)
{
	char a[205][205]={0};ll dp[205][205]={0};
	memset(dp,-1,sizeof(dp));
	int n,m;
	cin>>n>>m;
	rep(i,1,n)rep(j,1,m)cin>>a[i][j];
	if(a[1][1]=='D')
	{ol("-1\n");continue;}
	else
	{
		dp[1][1]=150;
		if(a[1][1]=='L')
		dp[1][1]=0;
	}
	rep(i,1,n)
	{
		rep(j,1,m)
		
		{
			if(i==1&&j==1)continue;
			
			if(a[i][j]=='T')
			{
				dp[i][j]=-1;
				if(dp[i-1][j]>=0)
				dp[i][j]=max(dp[i-1][j]+150,dp[i][j]);
				if(dp[i][j-1]>=0)
				dp[i][j]=max(dp[i][j-1]+150,dp[i][j]);
			}
			else if(a[i][j]=='D')
			{
				dp[i][j]=-1;
				if(dp[i-1][j]>=0)
				dp[i][j]=max(dp[i-1][j]-100,dp[i][j]);
				if(dp[i][j-1]>=0)
				dp[i][j]=max(dp[i][j-1]-100,dp[i][j]);
			}
			else
			{
				dp[i][j]=-1;
				dp[i][j]=max(dp[i-1][j],dp[i][j]);
				dp[i][j]=max(dp[i][j-1],dp[i][j]);
			}
		}
	}
	if(dp[n][m]<0)
	ol("-1\n");
	else
	{
		ol(dp[n][m]);on;
	}
}
return 0;
}
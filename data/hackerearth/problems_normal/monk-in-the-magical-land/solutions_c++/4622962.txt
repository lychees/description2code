#include<bits/stdc++.h>
using namespace std;
int getbits(int x)
{
	int count=0;
	while(x)
	{
		x=x&(x-1);
		count++;
	}
	return count;
}

long long int max(long long int a,long long int b)
{
	return (a>b)?a:b;
	
}


struct ch
{
	int value;
	int gem;
};

typedef struct ch ch;

int coprime(int n1, int n2)
{
    if (n2!=0)
       return coprime(n2, n1%n2);
    else 
       return n1;
}

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		long long int n, m, k, i,j,ans=0;
		cin>>n>>m>>k;
		long long int keys[n]; 
		__int128_t temp[n], one=1;
		ch chest[m];
		
		for(i=0;i<n;i++)
		cin>>keys[i];
		for(i=0;i<m;i++)
			cin>>chest[i].value;
		
		for(i=0;i<m;i++)
		cin>>chest[i].gem;
		
		for(i=0;i<n;i++)
		{
			temp[i]=0;
			for(j=0;j<m;j++)
			{
				if(coprime(keys[i],chest[j].value)!=1)
				{
					temp[i]|=(one<<j);
				}
			}
			
		}
		for(i=1;i<(one<<n);i++)
		{
			if(getbits(i)==k)
			{
				__int128_t c=0;
				for(j=0;j<n;j++)
				{
					if(i&(one<<j))
					{
						c= c|temp[j];
					}
				}
				long long int z=0;
				for(j=0;j<m;j++)
					{
						if(c&(one<<j))
						z+=chest[j].gem;	
					}
					ans=max(ans,z);
			}
		}
		
		cout<<ans<<endl;
	}
}

#include<bits/stdc++.h>
using namespace std;
#define MAX 1000001
#define patlen 11 // strlen("HackerEarth") == 11
int DP[MAX];
map<char,int> M;
bool check(){
	if((M['A'] + M['a'] == 2) && (M['E'] + M['e'] == 2) && (M['R'] + M['r'] == 2) && (M['H'] + M['h'] == 2) && ((M['C'] + M['c'] == 1)) && (M['K'] + M['k'] == 1) && (M['T'] + M['t'] == 1))
		return 1;
	return 0;
}
int main(){
	string str;
	getline(cin,str);
	int n=str.length(),Q;
	assert(n<=1000000&&n>=1);
	for(int i=0;i<min(patlen,n);i++)	// although there is no such test case in input file
		M[str[i]]++;
	
	DP[0] = check();
	int s = 0,e = patlen;
	while(e<n){
		M[str[s]]--;
		M[str[e]]++;
		s++,e++;
		DP[s] = check();
	}
	for(int i=1;i<n;i++)
		DP[i]+=DP[i-1];
		
	scanf("%d",&Q);
	assert(Q<=1000000&&Q>=1);
	while(Q--){
		int l,r;
		scanf("%d",&l);
		scanf("%d",&r);
		assert(l<=r);
		l--,r--;
		if(l)
			printf( "%d\n" , DP[max(r-patlen+1,l-1)] - DP[l-1]);
		else
			printf( "%d\n", (max(r-patlen+1,l-1)<0 ? 0 : DP[max(r-patlen+1,l-1)]));		
	}
	return 0;
}

 

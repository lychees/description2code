#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <stdio.h>
#include <ctime>
#include <cstring>
#include <cstdlib>
#include <cstring>
#include <cmath>
#define VI vector<int>
#define PII pair<int,int>
#define MP make_pair
#define eps 1e-9
#define PI acos(-1.0)
#define ll long long
#define ull unsigned long long
#define f0(i,n) for (i = 0; i < n; i++)

using namespace std;

int i, j, m, k , t ;
ll n;

int solve(ll cur , int cnt , int mx)
{
	ll ret = 0;
	if (cnt == mx)
		return 1;

	for (int i = 1; i <= 9; i++)
	{
		ll tmp = cur * 10 + i;
		if (tmp % i == 0)
		{
			ret += solve(tmp , cnt + 1 , mx);
		}
	}

	return ret;
}

//unsigned int d[100000][600];
int mx = 252; 
const int SIZE = 252;
void one(unsigned int a[SIZE][SIZE])
{
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            a[i][j] = (i == j);
}

//Multiply matrix a to matrix b and print result into a
void mul(unsigned int a[SIZE][SIZE], unsigned int b[SIZE][SIZE])
{
    unsigned int res[SIZE][SIZE] = {{0}};

    for (int i = 0; i < SIZE; i++)
		for (int k = 0; k < SIZE; k++)
		{
			if (a[i][k])
			for (int j = 0; j < SIZE; j++)
            {
                res[i][j] += a[i][k] * b[k][j];
            }
		}

    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            a[i][j] = res[i][j];
}

//Caluclate a^n and print result into matrix res
void po(unsigned int a[SIZE][SIZE], ll n, unsigned int res[SIZE][SIZE])
{
    one(res);

    while (n > 0) {
        if (n % 2 == 0)
        {
            mul(a, a);
            n /= 2;
        }
        else {
            mul(res, a);
            n--;
        }
    }
}

unsigned int a[252][252] , res[252][252];

int main()
{
	//freopen("semipal.in" , "r" , stdin);
	//freopen("output.txt" , "w" , stdout);
	cin>>n;
	//cout<<solve(0 , 0 , n)<<endl;
	//d[0][0] = 1;
	
	for (i = 0; i < mx; i++)
	{
		for (j = 1; j <= 9; j++)
		{
			k = (i * 10 + j);
			if (k % j == 0)
			{
				a[i][k % mx]++;
			}
		}
	}

	

	po(a , n , res);

	unsigned int ans = 0;
	for (i = 0; i < mx; i++)
			ans += res[0][i];

	cout<<ans<<endl;

	return 0;
}
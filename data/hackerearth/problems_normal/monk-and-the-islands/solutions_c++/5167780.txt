
#include <iostream>
#include <vector>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <set>
#include <cstring>
#include <list>
// shorthands for expressions
#define REP(i,s,n) for (int i = s; i <= n; i++)


int scan()
{
    int n=0;
    char ch=getc_unlocked(stdin);
 
    /*while (ch<'0'||ch>'9')
    {
        ch=getc_unlocked(stdin);
    }*/
 
    while (ch>='0'&&ch<='9')
    {
        n=n*10+ch-'0';
        ch=getc_unlocked(stdin);
    }
 
    return n;
}
 

void print(int n)
{
    int i=0;
    char num[20];
    
    do
    {
        num[i++] = n%10+'0';
        n/=10;
    }while(n);
    
    i--;
    
    while(i>=0)
    {
        putc_unlocked(num[i--],stdout);
    }
    
    putc_unlocked('\n',stdout);
}

// shorthands for data types
typedef long long LL;

using namespace std;


struct node{
    int index;
    int time;
};

int main(){
    int t,n,m,a,b,i,j;
    t= scan();
    while(t--){
        n = scan();
        m = scan();
        list<int>*adj = new list<int>[n];
        int end = n-1;
        int disc[n];
        memset(disc,0,sizeof(disc));
        REP(i,0,m-1){
            a = scan();
            b = scan();
            a--;
            b--;

            adj[a].push_back(b);
            adj[b].push_back(a);
        }

        node start;
        start.index = 0;
        start.time = 0;
        disc[start.index] = start.time;
        list<node> queue;
        queue.push_back(start);
        bool visited[n];
        memset(visited,false,sizeof(visited));

        while(!queue.empty()){
            node tmp = queue.front();
            queue.pop_front();

            visited[tmp.index] = true;
            if(disc[tmp.index] == 0){
                disc[tmp.index] = tmp.time;
            }else{
                disc[tmp.index] = min(tmp.time,disc[tmp.index]);
            }

            list<int> ::const_iterator it;
            for(it = adj[tmp.index].begin();it!= adj[tmp.index].end();it++){
                
                if(!visited[*it] ||  (disc[*it] > tmp.time + 1 && disc[*it] != 0))    {
                node n ;
                n.index = *it;
                n.time = tmp.time + 1;   
                queue.push_back(n);
                // cout << *it << endl;
            }
            }
        }

        cout << disc[end] << endl;
    }
}
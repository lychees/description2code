#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#define LL long long
using namespace std;
const LL MAX = 5005;
LL id[MAX], nodes, edges;
pair <long long, pair<LL, LL> > p[100005];

void initialize()
{
    for(LL i = 0;i < MAX;++i)
        id[i] = i;
}

LL root(LL x)
{
    while(id[x] != x)
    {
        id[x] = id[id[x]];
        x = id[x];
    }
    return x;
}

void union1(LL x, LL y)
{
    LL p = root(x);
    LL q = root(y);
    id[p] = id[q];
}

long long kruskal(pair<long long, pair<LL, LL> > p[])
{
    LL x, y;
    LL cost, minimumCost = 0;
    for(LL i = edges -1;i >=0;--i)
    {
        // Selecting edges one by one in increasing order from the beginning
        x = p[i].second.first;
        y = p[i].second.second;
        cost = p[i].first;
        // Check if the selected edge is creating a cycle or not
        if(root(x) != root(y))
        {
            minimumCost += cost;
            union1(x, y);
        }    
    }
    return minimumCost;
}

int main()
{
	int T;
	cin>>T;
	while(T--)
    {
    	LL x, y;
    	LL weight, minimumCost;
    	initialize();
    	cin >> nodes >> edges;
    	for(int i = 0;i < edges;++i)
    	{
	        cin >> x >> y >> weight;
	        p[i] = make_pair(weight, make_pair(x, y));
    	}
    	// Sort the edges in the ascending order
    	sort(p, p + edges);
    	minimumCost = kruskal(p);
    	cout << minimumCost << endl;
    	
    }
    return 0;
}
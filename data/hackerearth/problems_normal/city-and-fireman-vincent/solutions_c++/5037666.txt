#include<iostream>
#include<vector>
#include<queue>
#include<limits.h>
using namespace std;
vector<int> v[1002];
bool visited[1002]={false};
int bfs(int s,int a[])
{
   // cout<<"value of the current node is :"<<s<<endl;
    int minn=INT_MAX;
    int ans[1002]={0};
    visited[s]=true;
    queue<int> Q;
    Q.push(s);
    while(!Q.empty())
    {
        int p=Q.front();
        //cout<<p<<"and size of its adjency is:"<<v[p].size()<<endl;
        Q.pop();
        if(v[p].size()==0)
            return 1;
        for(int i=0;i<v[p].size();i++)
        {
            if(visited[v[p][i]]==false)
            {
                visited[v[p][i]]=true;
                Q.push(v[p][i]);
                //cout<<"pushed element is: "<<v[p][i]<<endl;

            if(minn>=a[v[p][i]])
            {
                minn=a[v[p][i]];
                ans[minn]++;
                //cout<<"new min is : "<<minn<< " and ans[minn] is : "<<ans[minn]<<endl;

            }

            }
        }
    }

    if(a[s]==minn)
        ans[minn]++;
        //cout<<"ans["<<minn<<"] is: "<<ans[minn]<<endl;
    return ans[minn];
}
int main()
{
    int n,k,x,y;
    int e[1002];
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        cin>>e[i];
    }
    cin>>k;
    for(int i=0;i<k;i++)
    {
        cin>>x>>y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    long long ans=1;
    for(int i=1;i<=n;i++)
    {
        if(visited[i]==false)
            ans=(ans*bfs(i,e))%1000000007;
           // cout<<"for node "<<i<<" value of ans is: "<<ans<<endl;
    }
    cout<<ans<<endl;
}

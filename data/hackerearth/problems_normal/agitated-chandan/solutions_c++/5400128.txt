#include<bits/stdc++.h>
using namespace std;

vector<pair<long int,long int> >v[100001];
queue<long int>q;




main()
{
int t;
long int n,m1,m2;
cin>>t;
while(t--)
{
int cost=0;
cin>>n;
long int a,b,w;
for(int i=1;i<n;i++)
{
cin>>a>>b>>w;
v[a].push_back(make_pair(b,w));
v[b].push_back(make_pair(a,w));
}

bool visited[n+1];
memset(visited,false,sizeof(visited));

long int dist1[n+1],dist2[n+1];
memset(dist1,0,sizeof(dist1));
memset(dist2,0,sizeof(dist2));
visited[1]=true;
q.push(1);

long int max1=-1,pos1=0,pos2=0;

while(!q.empty())
{
int m=q.front();
q.pop();
for(auto i=v[m].begin();i!=v[m].end();i++)
{
if(!visited[i->first])
{
q.push(i->first);
visited[i->first]=true;
dist1[i->first]=dist1[m]+i->second;
}
}
}

for(int i=1;i<=n;i++)
{
if(dist1[i]>max1)
{
max1=dist1[i];
pos1=i;
}
}

memset(visited,false,sizeof(visited));

q.push(pos1);
visited[pos1]=true;

while(!q.empty())
{
int p=q.front();
q.pop();
for(auto i=v[p].begin();i!=v[p].end();i++)
{
if(!visited[i->first])
{
q.push(i->first);
visited[i->first]=true;
dist2[i->first]=dist2[p]+i->second;
}
}
}
max1=-1;

for(int i=1;i<=n;i++)
{
if(dist2[i]>max1)
{
max1=dist2[i];
pos2=i;
}
}

int max_ele=dist2[pos2];

if(max_ele<100)
cost=0;

else if(max_ele>10000)
cost=10000;

else if(max_ele>1000)
cost=1000;

else if(max_ele>100)
cost=100;

cout<<cost<<" "<<max_ele<<endl;
for(auto& k : v)
k.clear();
}
return 0;
}


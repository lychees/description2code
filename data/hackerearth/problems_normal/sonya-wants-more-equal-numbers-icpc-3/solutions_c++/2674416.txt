/**
     Programmer: S. Roy(CSE'12).
     ----------- HSTU, Dinajpur.
     Online Judge: HackerEarth
     Problem name: Sonya wants more equal numbers
     Imp. Algorithm:
**/
using namespace std;
#include<bits/stdc++.h>

#define sf scanf
#define pf printf

#define DEBUG1(x) cout << "> " << #x << ": " << x << endl
#define DEBUG2(x, y) cout << "> " << #x << ": " << x << " > " << #y << ": " << y << endl
#define DEBUG3(x, y, z) cout << "> " << #x << ": " << x << " > " << #y << ": " << y << " > " << #z << ": " << z << endl

/**--------------- Direction Arrays ------------------*/
//int dx[]={1,0,-1,0}; int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1}; int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2}; int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
/**--------------- Direction Arrays ------------------**/

#define mxn 105
int iArr[mxn];
int main()
{
#ifndef ONLINE_JUDGE
    freopen("SW.txt", "r", stdin);
#endif // ONLINE_JUDGE

    int n;
    while(sf("%d", &n) == 1)
    {
        int sum = 0;
        for (int i = 0; i < n; i++){
            sf("%d", &iArr[i]);
            sum = sum + iArr[i];
        }
//        sum = sum / 2;

        int mxval = 0;
        vector<int> vvv[mxn];
        for (int x = 1; x <= sum; x++)
        {
            int target = x, cnt = 0, pos = 0;
            while (pos < n)
            {
//                DEBUG1(pos);

                int indx = pos, val = 0;
                while (val <= target)
                {
                    if (val == target)
                    {
                        cnt = cnt + 1;
                        pos = indx - 1;
                        break;
                    }
                    if (indx == n) break;
                    val = val + iArr[indx];
                    indx = indx + 1;
                }
                pos++;
            }
            mxval = max(mxval, cnt);
            vvv[cnt].push_back(target);
        }
        sort(vvv[mxval].begin(), vvv[mxval].end());
        pf("%d\n", mxval);
        for (int i = 0, sz = vvv[mxval].size(); i < sz; i++)
        {
            if(i) pf(" ");
            pf("%d", vvv[mxval][i]);
        }
        pf("\n");
    }
    return 0;
}

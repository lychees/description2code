#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <utility>
#include <string>
#include <cstring>
#include <set>

using namespace std;

#define ll long long int
#define MOD 1000000007

#define check (i >= 1 && i <= n && j >= 1 && j <= m && mark[i][j] == 0)

ll g[1001][1001];
ll mark[1001][1001];
ll n, m, x, y, dead;

bool check_();

int main()
{
	//freopen("input", "rb", "stdin");
	//freopen("output", "w", "stdout");

	int t;
	ll i, j, k, a, b, c;

	cin >> t;
	while (t--) {
		cin >> n >> m;
		for (i = 1; i <= n; ++i) {
			for (j = 1; j <= m; ++j) {
				cin >> g[i][j];
				mark[i][j] = 0;
			}
		}
		cin >> x >> y >> dead;

		if (check_() && g[x][y] <= dead) {
			cout << "YES" << endl << dead - g[x][y] << endl;
		} else {
			cout << "NO" << endl;
		}
	}

	return 0;
}

bool check_()
{
	ll i, j, k, a, b, c;
	pair <ll, pair<ll, ll> > p;
	priority_queue < pair<ll, pair<ll, ll> >, vector< pair<ll, pair<ll, ll> > >, greater<pair<ll, pair<ll, ll> > > > pq;

	pq.push(make_pair(g[1][1], make_pair(1, 1)));
	
	while (!pq.empty()) {
		p = pq.top();
		pq.pop();
		c = p.first;
		a = p.second.first;
		b = p.second.second;
		if (mark[a][b]) {
			continue;
		}
		mark[a][b] = 1;
		g[a][b] = c;
		if (a == x && b == y) {
			return true;
		}

		i = a + 1; j = b;
		if check {
			pq.push(make_pair(c+g[i][j], make_pair(i, j)));
		}
		i = a - 1; j = b;
		if check {
			pq.push(make_pair(c+g[i][j], make_pair(i, j)));
		}
		i = a; j = b + 1;
		if check {
			pq.push(make_pair(c+g[i][j], make_pair(i, j)));
		}
		i = a; j = b - 1;
		if check {
			pq.push(make_pair(c+g[i][j], make_pair(i, j)));
		}
	}

	return false;
}
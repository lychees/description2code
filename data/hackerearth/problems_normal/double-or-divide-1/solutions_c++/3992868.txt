#include<iostream>
#include<math.h>
#include<algorithm>
#define mod 1000000007

using namespace std;

int pmax(int numb)//finding pmax for given index operation
{
	int i, max=0, max_i=0, count;
	for(i=2; i<=sqrt(numb) && numb>1; i++)
	{
		count = 0;
		while(numb%i == 0 && numb>0)//finding ith factor exponent
		{
			count++;
			numb /= i;
		}
		if(count>max)//finding maxing exponent prime factor
					//count>=max not used as if exponents are same we use smallest
		{
			max = count;
			max_i = i;
		}
	}
	return max_i;//factor with max exponent if numb is prime so 0 is return making it bad //operation
}

int main()
{
	int n, l, i, pos=0; //pos for specifying number of array elements from start that goes 0
	scanf("%d %d", &n, &l);
	int arr[n];
	for(i=0; i<n; i++)
	{
		scanf("%d", &arr[i]);
	}
	
	sort(&arr[0], &arr[n]); // first sorting array so lowest values comes to start and haled 					// first till it become 0 and last value is doubled again and again
	
	arr[n-1] = (arr[n-1] * 2) % mod; // for operation at index 1
	
	for(i=2; i<=l && pos<n; i++)
	{
		if( (pmax(i)%i) % 2 == 0) // if bad operation
		{
			arr[pos] /= 2;
			if(arr[pos]==0)
			{
				pos++; // array value got 0 so ignore it
			}
		}
		else // good operation
		{
			arr[n-1] = (arr[n-1] * 2) % mod;
		}
	}
	
	printf("%d\n", n-pos); // prining array count of non zero values
	
	for(i=0; i<n; i++)
	{
		if(arr[i])
		{
			printf("%d ", arr[i]);
		}
	}
	return 0;
}
#include<stdio.h>
using namespace std;
#include<bits/stdc++.h>
typedef  long long llong;
const int MOD=1000000007;
void multiply(llong F[2][2],llong M[2][2]){
    llong p,q,r,s;
    p=F[0][0]*M[0][0] + F[0][1]*M[1][0];
    q=F[0][0]*M[0][1] + F[0][1]*M[1][1];
    r=F[1][0]*M[0][0] + F[1][1]*M[1][0];
    s=F[1][0]*M[0][1] + F[1][1]*M[1][1];
    F[0][0]=p%MOD;
    F[0][1]=q%MOD;
    F[1][0]=r%MOD;
    F[1][1]=s%MOD;
}
void power(llong matrix[2][2],int x){
    llong temp[2][2]={{1,1},{1,0}};
    while(x){
        if(x&1){
            multiply(matrix,temp);
        }
        multiply(temp,temp);
        x=x>>1;
    }
}
llong fibo(int x){
    llong matrix[2][2]={{1,1},{1,0}};
    if(x==0)
        return 0;
    if(x==1)
        return 1;
    power(matrix,x-1);
    return matrix[0][1]%MOD;
}
llong binPow(llong a,llong b){
	llong res=1;
	while(b){
		if(b&1)
			res=(res*a)%MOD;
		a=(a*a)%MOD;
		b=b>>1;
	}
	return res%MOD;
}
vector<llong> fibona;
llong getnon(int n){
	int ans=n,x;
	auto iter=lower_bound(fibona.begin(),fibona.end(),n);
	x=iter-fibona.begin()+1;
	if(*iter>n){
		x--;
	}
	while(ans-x!=n){
		ans=ans+(n-ans+x);
		iter=lower_bound(fibona.begin(),fibona.end(),ans);
		x=iter-fibona.begin()+1;
		if(*iter>ans){
			x--;
		}
	}
	return ans;
}
int main(){
	int t;
	llong a=1,b=1,c;
	int cnt=0;
	fibona.push_back(1);
	while(b<=1e12){
		fibona.push_back(a+b);
		c=a+b;
		a=b;
		b=c;
	}
	scanf("%d",&t);
	while(t--){
		int n;
		scanf("%d",&n);
		llong ans=fibo(n);
		llong nonF=getnon(n);
		printf("%lld\n",binPow(nonF,ans));
	}
}
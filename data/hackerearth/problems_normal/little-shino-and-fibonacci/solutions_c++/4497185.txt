//#define MYDEBUG
#define _CRT_SECURE_NO_WARNINGS
#define TASK "c1"
#pragma comment(linker, "/STACK:67108864")
#include <cstdio>
#include <iostream>
#include <iomanip> 
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <functional>
#include <cassert>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>

const int MOD = 1000000007;
const int INF = 1000000001;
const int MAXN = 400;
const long double EPS = 1e-9;
const int HASH_POW = 29;
const long double PI = acos(-1.0);

using namespace std;

double workTime()
{
	return double(clock()) / CLOCKS_PER_SEC;
}

void my_return(int code)
{
#ifdef MYDEBUG
	cout << "\nTime = " << fixed << setprecision(3) << workTime() << endl;
#endif
	exit(code);
}

long long f[15010];

int func(long long r)
{
	int ans = ((r / 15000) % MOD) * 1ll * f[15000] % MOD;
	ans = (ans + f[r % 15000]) % MOD;
	return ans;
}

int main()
{
	cin.sync_with_stdio(0);
	cin.tie(0);
	mt19937 mt_rand(time(0));
#ifdef MYDEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	/*freopen(TASK".in", "rt", stdin);
	freopen(TASK".out", "wt", stdout);*/
	/*freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);*/
#endif

	f[1] = 0;
	f[2] = 1;
	for (int i = 3; i <= 15000; ++i)
		f[i] = (f[i - 2] + f[i - 1]) % 10000;
	for (int i = 1; i <= 15000; ++i)
		f[i] = (f[i] + f[i - 1]) % MOD;

	int CASE;
	scanf("%d", &CASE);
	while (CASE--)
	{
		long long l, r;
		scanf("%lld %lld", &l, &r);
		
		int res = func(r);
		res = (res + MOD - func(l - 1)) % MOD;
		printf("%d\n", res);
	}

	my_return(0);
}
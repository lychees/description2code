#include <bits/stdc++.h> 

#define jjs(i, s, x) for (int i = (s); i < (x); i++)
#define jjl(i, x) jjs(i, 0, x)
#define ji(x) jjl(i, x)
#define jj(x) jjl(j, x)
#define jk(x) jjl(k, x)
#define jij(a, b) ji(a) jj(b)
#define INF ((int) 1e9+10)
#define pb push_back
#define mp make_pair
#define rint(x) scanf("%d", &(x))

using namespace std;
typedef long long ll;
typedef pair<int, int> pi;

inline bool prime(int x)
{
	return x == 2 || x == 3 || x == 5 || x == 7;
}

ll any[18]; // do whatever
ll anyl[20]; // limited by number
ll dpl[19]; // need prime digit, limited by number
ll dp[19]; // need prime digit, do whatever

int main()
{
	int T;
	rint(T);

	any[0] = 1;
	jjs(i, 1, 18)
		any[i] = any[i-1] * 10;

	jk(T)
	{
		ll N;
		scanf("%lld", &N);

		if (N == 0)
		{
			printf("0\n");
			continue;
		}

		int digits[25];
		int pos = 25;
		ji(25)
		{
			if (N == 0)
			{
				pos = i;
				break;
			}
			digits[i] = N % 10;
			N /= 10;
		}

		anyl[0] = 1;
		ji(pos)
		{
			anyl[i+1] = 0;
			for (int j = 0; j < digits[i]; j++)
				anyl[i+1] += any[i];
			anyl[i+1] += anyl[i];
		}
		dp[0] = 0;
		ji(pos)
		{
			dp[i+1] = 0;
			for (int j = 0; j <= 9; j++)
			{
				if (prime(j))
					dp[i+1] += any[i];
				else
					dp[i+1] += dp[i];
			}
		}
		dpl[0] = 0;
		ji(pos)
		{
			dpl[i+1] = 0;
			for (int j = 0; j < digits[i]; j++)
			{
				if (prime(j))
					dpl[i+1] += any[i];
				else
					dpl[i+1] += dp[i];
			}
			if (prime(digits[i]))
				dpl[i+1] += anyl[i];
			else
				dpl[i+1] += dpl[i];
		}

		printf("%lld\n", dpl[pos]);
	}
}
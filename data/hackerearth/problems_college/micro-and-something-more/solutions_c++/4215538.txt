#include<bits/stdc++.h>
using namespace std;
int A[100001];
int tree[500001]={0};

void segmenttree(int node, int i, int j) 
{
	if(i > j) 
		return;
	if(i == j) 
		{ 
			tree[node] = i; 
			return;
		}
	segmenttree(node*2, i, (i+j)/2); 
	segmenttree(node*2+1, 1+(i+j)/2, j); 
	if(A[tree[node*2]]>A[tree[2*node+1]])
		tree[node] =  tree[2*node];
	else if(A[tree[node*2]]==A[tree[2*node+1]])
		tree[node] = min(tree[2*node],tree[2*node+1]);
	else
		tree[node] =  tree[2*node+1];
} 

int getmax(int node, int a, int b, int i, int j) 
	{
		if(a > b || a > j || b < i) return 0 ; // Out of range 
		if(a >= i && b <= j) // Current segment is totally within range [i, j]
			return tree[node];
		int q1 = getmax(node*2, a, (a+b)/2, i, j); // Query left child
		int q2 = getmax(1+node*2, 1+(a+b)/2, b, i, j); // Query right child
		 
		if(A[q1]>A[q2])
			return q1;
		else if(A[q1]==A[q2])
			return min(q1,q2);
		else
			return q2;
	} 
	
void update(int node, int i, int j,int k) 
{
	if(i > j||j<k||i>k) 
		return;
	if(i == j && i==k) 
		{ 
			tree[node] = k; 
			return;
		}
	else if(i==j)//not possible
		return;
	update(node*2, i, (i+j)/2,k); 
	update(node*2+1, 1+(i+j)/2, j,k); 
	if(A[tree[node*2]]>A[tree[2*node+1]])
		tree[node] =  tree[2*node];
	else if(A[tree[node*2]]==A[tree[2*node+1]])
		tree[node] = min(tree[2*node],tree[2*node+1]);
	else
		tree[node] =  tree[2*node+1];
} 
/*
int check(int x,int val)
	{
		int idx = getmax(1,1,n,1,x);
		if(a[idx]>=val)
			return -1;
		else if(a[idx]<val)
			return 1;
	}*/

int process(int val,int n)
	{
		int left = 1;
		int ans = n;
		int right = n,pl,pr;
		int mid;
		int status;
		//int ans = right;
		int idx;
		while(left<=right)
			{
				pl = left;
				pr = right;
				//cout<<left<<" "<<right<<" mid:"<<mid<<endl;
				mid = (left+right)/2;
				int idx1 = getmax(1,1,n,left,mid);
				int idx2 = getmax(1,1,n,mid+1,right);
				
				if(A[idx1]>=val)
					{
						ans = min(ans,idx1);
						right = mid-1;
					}
				else if(A[idx2]>=val)
					{
						ans = min(ans,idx2);
						left = mid+1;
					}
				else
					{
						return ans;
					}
				if(pl==left&&pr==right)
					break;
			}
		return ans;
	}


	
int main()
	{
		A[0] = -1;
		ios_base::sync_with_stdio(0);
		int n,q,i,type,x,val;
		cin>>n>>q;
		for(i=1;i<=n;i++)
			cin>>A[i];
		segmenttree(1,1,n);
		while(q--)
			{
				cin>>type;
				if(type==0)
					{
						cin>>x>>val;
						A[x] = val;
						update(1, 1, n, x);
					}
				else
					{
						cin>>val;
						//int idx = 1;
						int idx = process(val,n);		
						if(A[idx]>=val)
							cout<<idx<<endl;
						else
							cout<<-1<<endl;
					}
			}
	}


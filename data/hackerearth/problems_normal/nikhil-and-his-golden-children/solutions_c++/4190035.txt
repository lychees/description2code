#include<iostream>
#include<stack>
#include<queue>
#include<vector>
#include<list>
#include<map>
#include<set>
#include<string.h>
#include<math.h>
#include<algorithm>

using namespace std;

#define ll long long
#define l long
#define ve vector
#define st stack
#define qu queue
#define pq priority_queue
#define li list
#define mp make_pair
#define p_b push_back
#define F first
#define S second
#define mem(n,m) memset(n,m,sizeof(n))
#define forf(i,a,b) for(i=a;i<=b;i++)
#define forb(i,a,b) for(i=a;i>=b;i--)


ll a[1000001];
ll M=1000000007;
ll fast_pow(ll b,ll n,ll m)
{
	if(n==0)
		return 1;
	if(n==1)
		return b;
	ll halfn=fast_pow(b,n/2,m);
	if(n%2==0)
	return (halfn*halfn)%m;
	else
	return (((halfn*halfn)%m)*b)%m;
}
ll mmi_fermat(ll n,ll m)
{
	return fast_pow(n,m-2,m);
}
ll fact(ll n)
{
	if(n==0)
		return 1;
	else
		return (fact(n-1)*n)%M;
}
ll comb(ll n,ll r)
{
	if(n>=r)
		return ((fact(n)%M)*mmi_fermat((((fact(n-r)%M)*(fact(r)%M))%M),M))%M;
	else 
		return 0;
}
int main()
{
	ios_base::sync_with_stdio(false);
	ll t,k,m;
	cin>>t;
	while(t--)
	{
		cin>>k>>m;
		ll sum=0,i,j,x,ans;
		forf(i,0,k-1)
		cin>>a[i];
		forf(i,0,k-1)
		sum+=a[i];
		if(m<sum)
			cout<<0<<endl;
		else if(m==sum)
			cout<<1<<endl;
		else
		{
			x=m-sum;
			cout<<comb(k+x-1,k-1)<<endl;
		}
	}
	return 0;
}

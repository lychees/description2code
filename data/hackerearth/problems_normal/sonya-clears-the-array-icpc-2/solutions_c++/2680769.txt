#include<bits/stdc++.h>
using namespace std;
const int max_primes=1100001;
int nearest_prime[max_primes];
bool mark[max_primes];
vector < int > a(501);
const long long INF=1e11;
long long dp[1001][1001];
int pr[1<<21];
int nxt[1<<21];
#define prev prororro
int prev[1<<21];
void ini()
{
    pr[1]=1;
    for (int i=2;i<=2000000;i++)
    {
        if (pr[i])
            continue;
        for (int j=i*2;j<=2000000;j+=i)
            pr[j]=1;
    }
     for (int i=2000000;i;--i)
            {
                if (pr[i]==0)
                    nxt[i]=i;
                else
                    nxt[i]=nxt[i+1];
            }
        for (int i=1;i<=2000000;i++)
            {
                if (pr[i]==0)
                    prev[i]=i;
                else
                    prev[i]=prev[i-1];
            }

        return ;
}

int cost(int a,int b)
{
	int sub=a+b;
	if (a<=b&&prev[b-1]>=a)
		return nxt[b]+prev[b-1]-a-b;
	a=max(a,b);
	a=nxt[a];
	b=nxt[a+1];
	return a+b-sub;
}

//int cost ( int a , int b)
//{
//
//    if(a>b)
//        swap(a,b);
//
//    int ret = nearest_prime[b]-b;
//
//    b = nearest_prime[b];
//
//    int *it=lower_bound( nearest_prime + 1 , nearest_prime + b + 1 , b );
//
//    if( *(it-1) >= a )
//        return ret + *(it-1) - a;
//    else
//        return nearest_prime[b+1] - a + ret;
//
//}

int main()
{

    ini();
    int N, i , j ,  k , l;


    cin>>N;
    for(i=0;i<N;++i)
        cin>>a[i];

    for(i=0;i<N;++i)
        for(j=0;j<N;++j)
            dp[i][j]=INF;

    for(i=0;i<=N;++i)
        dp[i+1][i]=0;

    for(l=2;l<=N;l+=2)
    {
        for(i=0;i + l -1 <N;++i)
        {
            j = i + l  - 1;

            for(k=i+1;k<=j;k+=2)
                dp[i][j] = min(dp[i][j], dp[i+1][k-1] + dp[k+1][j] + cost(a[i],a[k]) +1 );

      
      }
    }
    cout<<dp[0][N-1];
    return 0;
}

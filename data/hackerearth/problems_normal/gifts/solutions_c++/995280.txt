#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

template<typename It>
void make_fenwick(It beg, size_t n) {
	for(size_t i = 0; i < n; i ++) {
		size_t p = i | (i+1);
		if(p < n) beg[p] += beg[i];
	}
}
template<typename It, typename Val>
void add_fenwick(It beg, size_t n, size_t i, Val val) {
	for(; i < n; i |= i+1) beg[i] += val;
}
template<typename It, typename Val>
Val sum_fenwick(It beg, size_t i, Val sum) {
	for(; i > 0; i = i & (i-1)) sum += beg[i-1];
	return sum;
}

int main() {
	const int K = 5, P = 120;
	int N;
	scanf("%d", &N);
	vector<vi> arrays(K, vi(N));
	rep(k, K)
		rep(i, N)
			scanf("%d", &arrays[k][i]);
	char *str = new char[N+1];
	scanf("%s", str);
	char perms[P][5];
	char sw[P][5][5];
	{	vi v(K);
		rep(k, K) v[k] = k;
		map<vi,int> a; int b = 0;
		do {
			rep(i, 5)
				perms[b][i] = v[i];
			a[v] = b ++;
		}while(next_permutation(all(v)));
		do {
			int t = a[v];
			rep(x, K) rep(y, K) {
				swap(v[x], v[y]);
				sw[t][x][y] = a[v];
				swap(v[x], v[y]);
			}
		}while(next_permutation(all(v)));
	}
	vector<vector<long long> > fts(P, vector<long long>(N, 0));
	rep(p, P) {
		rep(i, N)
			fts[p][i] = arrays[perms[p][str[i] - 'A']][i];
		make_fenwick(fts[p].begin(), N);
	}
	int Q;
	scanf("%d", &Q);
	char ty[5], X[2], Y[2];
	int curperm = 0;
	rep(ii, Q) {
		scanf("%s", ty);
		if(ty[1] == 'e') {
			scanf("%s%s", X, Y);
			curperm = sw[curperm][*X - 'A'][*Y - 'A'];
		}else if(ty[1] == 'c') {
			int x;
			scanf("%d%s", &x, Y), -- x;
			rep(p, P) {
				int oldval = arrays[perms[p][str[x] - 'A']][x];
				int newval = arrays[perms[p][*Y - 'A']][x];
				add_fenwick(fts[p].begin(), N, x, newval - oldval);
			}
			str[x] = *Y;
		}else if(ty[1] == 's') {
			int x, y;
			scanf("%d%d", &x, &y), -- x;
			long long ans = 0;
			ans += sum_fenwick(fts[curperm].begin(), y, 0LL);
			ans -= sum_fenwick(fts[curperm].begin(), x, 0LL);
			printf("%lld\n", ans);
		}
	}
	return 0;
}

#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second
#define INPUT freopen("draft.inp","r",stdin)
#define OUTPUT freopen("draft.out","w",stdout)
#define FOR(i,l,r) for(auto i=(l);i<=(r);i++)
#define REP(i,l,r) for(auto i=(l);i<(r);i++)
#define FORD(i,l,r) for(auto i=(l);i>=(r);i--)
#define REPD(i,l,r) for(auto i=(l);i>(r);i--)
#define ENDL printf("\n")
#define debug 1

typedef long long ll;
typedef pair<int,int> ii;

const int inf=1e9;
const int MOD=1e9+7;
const int N=2e3+10;

int n,n1,w[N],p[N],ans[N];
vector <int> v[N];
bool comp(int x,int y){
    return (w[x]==w[y]?x>=y:w[x]>w[y]);
}
int DFS(int root,int par,int x){
    if (!comp(x,root)) return 0;
    ll ans=1;
    for(auto y:v[x]) if (y!=par) ans=ans*(DFS(root,x,y)+1)%MOD;
    return ans;
}
void solve(){
    FOR(i,1,n) {
        int cur=lower_bound(p+1,p+n1+1,w[i])-p;
        ans[cur]=(ans[cur]+DFS(i,0,i))%MOD;
    }
}
void prepare(){
    scanf("%d",&n);
    int m,x,y;
    FOR(i,1,n) scanf("%d",w+i);
    FOR(i,1,n) p[i]=w[i];
    sort(p+1,p+n+1);
    n1=unique(p+1,p+n+1)-p-1;
    REP(i,1,n){
        scanf("%d%d",&x,&y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    solve();
    scanf("%d",&m);
    while (m--){
        scanf("%d",&x);
        int idx=lower_bound(p+1,p+n1+1,x)-p;
        if (p[idx]!=x) printf("0\n");
        else printf("%d\n",ans[idx]);
    }
}
int main(){
    prepare();
}

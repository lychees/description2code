'''
read from stdin:
n
arr (list of n positive integers)

find every integer that when added to the sorted list makes it an arithmetic progression
arr[i+1] == arr[i] + d    with d=const. for all i

write to stdout:
number if integers found
integers found

'''

#!/usr/bin/python2

# read input
n = int(raw_input())
if n > 0:
    arr = sorted(int(s) for s in raw_input().split())

if n <= 1:
    # n == 0: any single number is an ap
    # n == 1: any two numbers are an ap
    print -1
elif n == 2:
    # continue at both ends
    # and if the difference is even add the arithmetic mean
    if (arr[1] - arr[0]) % 2 == 0:
        print 3
        print 2*arr[0] - arr[1], (arr[0] + arr[1]) / 2, 2*arr[1] - arr[0]
    else:
        print 2
        print 2*arr[0] - arr[1], 2*arr[1] - arr[0]
else:
    # walk from both ends as long as increments stay the same
    # from left
    di = arr[1] - arr[0]
    i = 1
    while i+1 < n and arr[i+1] - arr[i] == di:
        i += 1
    # from right
    dj = arr[n-1] - arr[n-2]
    j = n - 2
    while j - 1 >= 0 and arr[j] - arr[j-1] == dj:
        j -= 1

    if j < i:
        # pointers have crossed meaning di == dj and the sequence
        # already is an ap. continue at both ends
        if di == dj == 0:
            print 1
            print arr[0]
        else:
            print 2
            print arr[0] - di, arr[n-1] + di
    elif j == i:
        # overlap can only happen on one of the ends
        if i == 1 and di == 2 * dj:
            # at left end and gap can be closed
            print 1
            print arr[0] + dj
        elif j == n - 2 and dj == 2 * di:
            # at right end and gap can be closed
            print 1
            print arr[n-1] - di
        else:
            # gap cannot be closed
            print 0
    elif j == i + 1:
        # two ap's on either side of the sequence separated by a gap
        if di == dj and arr[i] + di == arr[j] - dj:
            # gap can be closed
            print 1
            print arr[i] + di
        else:
            # gap cannot be closed
            print 0
    else:
        print 0

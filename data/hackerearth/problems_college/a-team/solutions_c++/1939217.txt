#include <iostream>
using namespace std;    

long long cross_product(long long ax, long long ay, 
                        long long bx, long long by, 
                        long long cx, long long cy)
{
    return (bx - ax) * (cy - ay) - (by - ay) * (cx - ax);
}

bool inside(long long ax, long long ay, 
            long long bx, long long by, 
            long long cx, long long cy)
{
    return (min(ax,bx)<=cx && cx<=max(ax,bx) && 
            min(ay,by)<=cy && cy<=max(ay,by));
}

bool intersect (long long ax, long long ay, 
                long long bx, long long by, 
                long long cx, long long cy, 
                long long dx, long long dy) 
{
    long long abc=cross_product(ax, ay, bx, by, cx, cy);
    long long abd=cross_product(ax, ay, bx, by, dx, dy);
    long long cda=cross_product(cx, cy, dx, dy, ax, ay);
    long long cdb=cross_product(cx, cy, dx, dy, bx, by);

    if (((abc>0 && abd<0)||(abc<0 && abd>0)) &&
        ((cda>0 && cdb<0)||(cda<0 && cdb>0)))
        return true;

    if (abc == 0 && inside(ax, ay, bx, by, cx, cy))return true;
    if (abd == 0 && inside(ax, ay, bx, by, dx, dy))return true;
    if (cda == 0 && inside(cx, cy, dx, dy, ax, ay))return true;
    if (cdb == 0 && inside(cx, cy, dx, dy, bx, by))return true;

    return false;
}

void solve()
{
    long long x, y, ax, ay, bx, by;
    cin >> ax >> ay >> bx >> by >> x >> y;
    cout << (intersect(0, 0, x, y, ax, ay, bx, by)?"NO\n":"YES\n");
}

int main()
{
    int t;
    cin >> t;
    for (;t;--t)
    {
        solve();
    }
    return 0;
} 
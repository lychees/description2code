#include <algorithm>
#include <cstring>
#include <cstdio>

using namespace std;

typedef long long LL;

const LL INF = 1e17;
int n, l[20], d[20];
LL memo[1 << 20];

LL solve(int mask) {
	int cnt = __builtin_popcount(mask);
	if (cnt == n) return 0;
	if (memo[mask] != -1) return memo[mask];
	
	LL add = 0, ans = -INF;
	for (int i = 0; i < n; i++)
		add += l[i] - (d[i] * i * cnt);
	for (int i = 0; i < n; i++)
		if ((mask & (1 << i)) == 0)
			ans = max(ans, add + d[i]*i*(((n-1)*n - cnt*(cnt+1))/2) - d[i]*i*cnt*(n-cnt-1) + solve(mask | (1 << i)));
	return memo[mask] = ans;
}

int main() {
    scanf("%d", &n);
    
    for (int i = 0; i < n; i++)
    	scanf("%d", &l[i]);
    for (int i = 0; i < n; i++)
    	scanf("%d", &d[i]);
    
    memset(memo, -1, sizeof memo);
    printf("%lld\n", solve(0));
    
    return 0;
}

#include <list>
#include <iostream>
#include <iterator>
#include <algorithm>
#include <limits>
#include <cassert>
#include <cmath>
#include <map>
#include <set>
#include <chrono>
#include <cstddef>
#include <vector>

using namespace std;
using number_t = uint_fast64_t;
const number_t modulo = 1000000007;

/*
 * F(n) = a * F(n - 1) * G(n - 2) + b * G(n - 1) * F(n - 2) for n >= 2
 * G(n) = c * G(n - 1) * F(n - 2) + d * (3 ^ F(n - 1) ) for n >=2
 * H(n) = e * F(n) + f * G(n) for n >= 0
 *
 * F[0] = F[1] = G[0] = 0
 * G[1] = 1
 *
 * if F[0] = F[1] = 0, F(x) = 0, so
 * G(n) = d for n >=2
 * H(n) = f * G(n) for n >= 0
 *
 * H'(0) = 0
 * H'(1) = f
 * H'(n) = f + d * f * (n - 1)
 *
 * */

int main() {
  number_t a, b, c, d, e, f;
  // cin >> a >> b >> c >> d >> e >> f;
  if (6 != scanf("%lu %lu %lu %lu %lu %lu", &a, &b, &c, &d, &e, &f)) {
    return 1;
  }
  /*
  number_t F_0, F_1, G_0, G_1;
  F_0 = F_1 = G_0 = 0;
  G_1 = 1;
  */

  a %= modulo;
  b %= modulo;
  c %= modulo;
  d %= modulo;
  e %= modulo;
  f %= modulo;

  number_t Q;
  // cin >> Q;
  if (1 != scanf("%lu", &Q)) {
    return 1;
  }

  for (number_t q = 0; q < Q; ++q) {
    number_t n;
    // cin >> n;
    if (1 != scanf("%lu", &n)) {
      return 1;
    }

    number_t h = 0;
    if (n != 0) {
      h = d * f;
      h %= modulo;
      h *= (n - 1);
      h %= modulo;
      h += f;
      h %= modulo;
    }

    // cout << h << endl;
    printf("%lu\n", h);
  }

  return 0;
}

// freopen ("input.in","r",stdin);
// freopen ("output.in","w",stdout);
#include<bits/stdc++.h>
#define M 1000000007
#define INF 1000000000000000007LL
#define DMAX 8
#define PI 3.14159265358979323846264338327950288419716939937510582097494459230781
using namespace std;
#define pb push_back
#define mp make_pair
// #define EPS 1e-7
typedef long long LL;
long long expo(LL a,LL b,LL m){
   LL result = 1;
   while (b){
      if (b&1){
         result=  (result*a)%m;
      }
      b= (b >>1)%m ;
      a= (a*a)%m;
   }
  return result;
}
double expof(double a,int b){
   double result = 1;
   while (b){
      if (b&1){
         result=  (result*a);
      }
      b= (b >>1);
      a= (a*a);
   }
  return result;
} 
// void dfs()
// {
//   int dir[DMAX][2] = {{1, 0},{0, 1}, {0, -1}, {-1, 0},{1, 1}, {1, -1}, {-1, -1}, {-1, 1}};
//   for (int k = 0; k < DMAX; ++k)
//   {
//     int dx = i + dir[k][0];
//     int dy = j + dir[k][1];
   
//     if (0 <= dx and dx < n and 0 <= dy and dy < n and str[dx][dy] == '*')
//        cnt++;
//   }
 
// }
int main()
{
   // freopen ("input.in","r",stdin);
   // freopen ("output.in","w",stdout);
   LL m,p,w[100005];

   LL dp[100][1000];

   cin>>m>>p;
   for (int i =1; i <=p; ++i)
   {
      cin>>w[i];
   }
   LL sum[100005]={0};
   for (int i =1; i<=p; ++i)
   {
      sum[i]=sum[i-1]+w[i];
   }
   for (int i =0; i<=m; ++i)
   {
      for (int j =1; j<=p; ++j)
      {
         if(i==0)
         {
            dp[i][j]=INT_MAX;
            continue;
         }
         LL mn=INT_MAX;
         for (int k=0;k<=j; ++k)
         {
            mn=min(mn,max(dp[i-1][k],sum[j]-sum[k]));
         }
         dp[i][j]=mn;
      }
   }

   

   cout<<dp[m][p]<<endl;

      

}
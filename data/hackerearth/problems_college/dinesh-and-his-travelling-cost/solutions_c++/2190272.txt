#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
#include<bits/stdc++.h>
using namespace std;

typedef pair< int, int > pii;

const int MAX = 1024;
const int INF = 0x3f3f3f3f;

vector< pii > G[MAX];
int d[MAX];

void dijkstra(int start) {
    int u, v, i, c, w;
    priority_queue< pii, vector< pii >, greater< pii > > Q;

    memset(d, 0x3f, sizeof d);
    Q.push(pii(0, start));
    d[start] = 0;

    while(!Q.empty()) {
        u = Q.top().second; // node
        c = Q.top().first; // node cost so far
        Q.pop(); // remove the top item.

        if(d[u] < c) continue;

        for(i = 0; i < G[u].size(); i++) {
            v = G[u][i].first; // node
            w = G[u][i].second; // edge weight

            if(d[v] > d[u] + w) {
                d[v] = d[u] + w;
                Q.push(pii(d[v], v));
            }
        }
    }
}

int main() {
    int n, e, i, u, v, w, start;
       //int n;
       cin>>n;

        for(i = 0; i < n; i++) {
            scanf("%d %d %d", &u, &v, &w);
            G[u].push_back(pii(v, w));
            G[v].push_back(pii(u, w)); // only if bi-directional
        }
        scanf("%d", &start);

        dijkstra(start);
       int q;cin>>q;
       int x;
       while(q--)
       {
           cin>>x;
           if(d[x]>=INF)
            cout<<"NO PATH\n";
           else
            cout<<d[x]<<endl;

       }




    return 0;
}

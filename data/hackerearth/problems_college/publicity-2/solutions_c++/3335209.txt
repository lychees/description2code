#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz size
#define set0(a) memset(a, 0, sizeof(a))
#define setdp(a) memset(a, -1, sizeof(a))
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion
#define MOD 1000000007

struct sort_pred {
	bool operator()(const std::pair<int,int> &left, const std::pair<int,int> &right) {
    	return left.first < right.first;
	}
};
/*ll power(ll a, ll b) {
ll x = 1, y = a;
    while(b > 0) {
        if(b%2 == 1) {
            x=(x*y);
            if(x>mod) x%=mod;
        }
        y = (y*y);
        if(y>mod) y%=mod;
        b /= 2;
    }
    return x;
}*/
int prime[1000005];
void SieveOfEratosthenes(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    
    //memset(prime, 1, sizeof(prime));
 	prime[0] = 0;
 	prime[1] = 0;
 	for (int p=2; p<=n; p++)
       prime[p] = 1;
	   //if (prime[p])
          //cout << prime[p] << " ";
    for (int p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == 1)
        {
            // Update all multiples of p
            for (int i=p*2; i<=n; i += p)
                prime[i] = 0;
        }
    }
 //	for (int p=2; p<=n; p++)
      // if (prime[p])
         // cout << p << " ";
    // Print all prime numbers
    
} 
// A stack based efficient method to calculate stock span values
vector <vector <ll> > G;
ll vis[1000005];
ll c;
void dfs(ll n){
	for(int i = 0 ; i < G[n].size();i++){
		if(vis[G[n][i]] == 0){
			//c++;
			vis[G[n][i]] = 1;
			dfs(G[n][i]);
		}
	}
} 
int main()
{
    //int price[] = {10, 4, 5, 90, 120, 80};''
    int n; //= sizeof(price)/sizeof(price[0]);
    int t;
    s(t);
    
    while(t--){
    	map <int,int> m;
    	cin >> n;
		//vector < vector <int> > g(n+1);
		memset(vis,0,sizeof(vis));
		G.clear();
		G.resize(n+5);
    	int e;
    	cin >> e;
    	while(e--){
    		int a,b;
    		cin >> a >> b;
    		//cout << a << b << endl;
    		G[a].push_back(b);
    		G[b].push_back(a);
    	}
    	//queue <int> q;
    	//q.pb(0);
    	//m[0] = 1;
    	int count = 0;
    	for(int i = 0 ; i < n ; i++){
    		//memset(vis,0,sizeof(vis));
    		if(vis[i]!=1){
    			count++;
    			dfs(i);
    		}
    	}
    	cout << count << endl;
    }
    return 0;
}
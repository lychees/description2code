#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <cstdio>
#include <cmath>
#include <cstring>
//#include <conio.h>
using namespace std;
#define ii pair<long long int,long long  int>
#define vii vector<ii>
long long k[100005]; 
vector<vii> adj;
 
priority_queue<ii,vector<ii>,greater<ii> > Q;
 
vii temp;
vector<long long int> dist;
 
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    long int n,m,s;
    cin>>n>>m>>s;
      
    for(int i=1;i<=n;i++)
    cin>>k[i];  

    for(long int i=0;i<=n+5;i++)
    adj.push_back(temp);
    
    long int u,v,weight;
    //undirected graph
    for(long int i=0;i<m;i++)
    {
            long long w;  
             cin>>u>>v>>w;
             adj[u].push_back(make_pair(v,w));
             adj[v].push_back(make_pair(u,w));
             }
      dist.resize(n+10);
      
      for(long int i=1;i<=n;i++)
      dist[i]=1e16;
      
      dist[s]=0;
      
      Q.push(ii(0,s));
      
      while(!Q.empty() )
      {
           ii topnode=Q.top();
           Q.pop();
           
         long  long int d=topnode.first;
          long  int v=topnode.second;
                       
               long   int v2;long long cost;
                 
                 if(d<=dist[v])
                 {
                               dist[v]=d;
                         for(vii::iterator it=adj[v].begin();it!=adj[v].end();it++)
                         {
                            v2=it->first;cost=it->second;
                             
                            if(dist[v2]>dist[v]+cost)
                            {
                                                   dist[v2]=dist[v]+cost;
                                                   Q.push(ii(dist[v2],v2));  
                                                     }              
                                          }      
                               
                               }  
                   
                       
                       }
          

 long long sum=0,sum2=0;
 for(int i=1;i<=n;i++)
 {
  if(dist[i]>=(long long)1e11)continue;
  sum+=k[i];
  sum2+=k[i]*dist[i];
 }

  for(int i=1;i<=n;i++)
  {
    if(dist[i]>=(long long)1e11){
      cout<<"0 ";
      continue;}
    long long ans=sum2-k[i]*dist[i];
    ans+=dist[i]*(sum-k[i]);
    cout<<ans<<" ";
  }  
 cout<<endl;
//getch();
return 0;    
}
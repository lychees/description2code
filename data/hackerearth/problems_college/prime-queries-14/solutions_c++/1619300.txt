#include<bits/stdc++.h>
using namespace std;
#define MAX 1000000
vector<bool> primes(MAX+5,true);
int A[100000+10],tree[5*MAX+10];
void gen_prime()
{ primes[1]=false;
    for(int i=3;i*i<=MAX;i=i+2)
    {
        while(primes[i]==false)
            i=i+2;
        int a=i*(i-2);
        int b=i<<1;
        while((a=a+b)<=MAX)
            primes[a]=false;
    }
}
void build(int left,int right,int node)
{
    if(left==right) // leaf
    {  if(  (A[left]==2  )||((A[left]%2) && primes[A[left]])) // odd+prime
         tree[node]=A[left];
         else
            tree[node]=-1;
            return;
    }
     int mid=(left+right)/2;
    build(left,mid,node*2);
    build(mid+1,right,node*2+1);
    tree[node]=max(tree[node*2],tree[node*2+1]);
}
void update(int left,int right,int node,int position,int value) // position is the place where updation is to be done
{
    if(left==right&&left==position) // leaf
    {  if((value==2)||(value%2 && primes[value])) // odd+prime
         tree[node]=value;
         else
            tree[node]=-1;
            return;
    }
     int mid=(left+right)/2;
     if(position<=mid) // left subtree
     {
         update(left,mid,node*2,position,value);
     }
     else
        update(mid+1,right,node*2+1,position,value);
    tree[node]=max(tree[node*2],tree[node*2+1]);
}
int query(int a,int b,int left,int right,int node)
{ //  printf("afafa\n");
    int mid=(left+right)/2;
    if(left>=a&&right<=b) //completly inside
        return tree[node];
    if(a>mid)   // only right subtree
        return query(a,b,mid+1,right,node*2+1);
    else if(b<=mid)
        return query(a,b,left,mid,node*2);
    else
        return max(query(a,b,left,mid,node*2),query(a,b,mid+1,right,node*2+1));
}
int main()
{
  int n,q;
  scanf("%d %d",&n,&q);
    gen_prime();
    for(int i=1;i<=n;i++)
        scanf("%d",&A[i]);
     //   printf("aya\n");
    build(1,n,1);
    while(q--)
    {
        int k,a,b;
   //     for(int i=1;i<=5;i++)
     //       printf("without query %d %d\n",i,tree[i]);
        scanf("%d",&k);

        if(k)
        { scanf("%d %d",&a,&b);
        int ans=query(a,b,1,n,1);
        printf("%d\n",ans);
        }
        else
        {
            scanf("%d %d",&a,&b);
           //  if (   (!(b==2|| ( ( b&1) && primes[b] ))) && (!(A[a]==2|| ( ( A[a]&1) && primes[A[a]] ))))     // Don't update if previous value and current value are non prime
             //  continue;
             update(1,n,1,a,b);
        }
       // for(int i=1;i<=5;i++)
         //   printf("with query %d %d\n",i,tree[i]);
    }
return 0;
    }

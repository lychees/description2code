
#include<bits/stdc++.h>
using namespace std;
int visited[1001][1001]={0};
queue <pair<int,int> > q;
int mat[1001][1001];
int cnt=0,maxi=-1,sum=0;
int r,c;
int check(int i,int j)
{
	if(i>=1&&i<=r&&j>=1&&j<=c)
	return 1;
	return 0;
}
int bfs(int ro,int co)
{

        int i,j;
        cnt++;
       q.push(make_pair(ro,co));
       visited[ro][co]=1;
       pair<int,int > p;
	    p=q.front();
	    sum=1;
	while(!q.empty())
	{
		p=q.front();
       i=p.first;
       j=p.second;
		q.pop();
		if(check(i+1,j)==1&&mat[i+1][j]==1&&visited[i+1][j]==0)
		{
		    sum++;
		    q.push(make_pair(i+1,j));
		    visited[i+1][j]=1;
		}
		if(check(i,j+1)==1&&mat[i][j+1]==1&&visited[i][j+1]==0)
		{
        sum++;
		    q.push(make_pair(i,j+1));
		    		    visited[i][j+1]=1;


		}
		if(check(i-1,j)==1&&mat[i-1][j]==1&&visited[i-1][j]==0)
		{

             sum++;
		    q.push(make_pair(i-1,j));
		    		    visited[i-1][j]=1;

        }
		if(check(i,j-1)==1&&mat[i][j-1]==1&&visited[i][j-1]==0)
		{
		    sum++;
		    q.push(make_pair(i,j-1));
		    		    visited[i][j-1]=1;

		}
        if(check(i+1,j+1)==1&&mat[i+1][j+1]==1&&visited[i+1][j+1]==0)
		{
		    sum++;
		    q.push(make_pair(i+1,j+1));
		    		    visited[i+1][j+1]=1;

		}
		if(check(i-1,j+1)==1&&mat[i-1][j+1]==1&&visited[i-1][j+1]==0)
		{
        sum++;
		    q.push(make_pair(i-1,j+1));
		    		    visited[i-1][j+1]=1;


		}
		if(check(i-1,j-1)==1&&mat[i-1][j-1]==1&&visited[i-1][j-1]==0)
		{

             sum++;
		    q.push(make_pair(i-1,j-1));
		    		    visited[i-1][j-1]=1;

        }
		if(check(i+1,j-1)==1&&mat[i+1][j-1]==1&&visited[i+1][j-1]==0)
		{
		    sum++;
		    q.push(make_pair(i+1,j-1));
		    		    visited[i+1][j-1]=1;

		}


	}
	return sum;

}
int main()
{
    int t,i,j;
    cin>>t;
    while(t--)
{
    cin>>r>>c;
    for(i=1;i<=r;i++)
    {

        for(j=1;j<=c;j++)
        {
            scanf("%d",&mat[i][j]);
            visited[i][j]=0;

        }
    }
    cnt=0;
    maxi=-1;
    for(i=1;i<=r;i++)
    {
        for(j=1;j<=c;j++)
        {
            sum=1;
            if(mat[i][j]==1&&visited[i][j]==0)
            {
                sum=bfs(i,j);
                maxi=max(sum,maxi);
            }
        }
    }
    if(maxi!=-1)
    cout<<cnt<<" "<<maxi<<endl;
    else
    cout<<cnt<<" "<<"0"<<endl;

}

return 0;
}


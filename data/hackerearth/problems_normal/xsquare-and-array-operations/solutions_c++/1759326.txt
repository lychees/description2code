#include <iostream>
#include<cstdio>
#include<algorithm>
#include<bits/stdc++.h>
#define u uint64_t
#define l int64_t
#define ll long long
#define fors(i,n) for(int i=0;i<(n);i++)

using namespace std;

int logtable[100005];
int s[20][100005];
int a[100005];

u divide(int l, int r)
{
    int pos;
    u ans=0;
    
    int k = logtable[r - l];
    int p = s[k][l];
    int q = s[k][r - (1 << k) + 1];
    
    if(a[p]>a[q])
    	pos =p;
     else
    	pos=q;
    	
    if(l < pos)
      {
      	ans+=a[pos];
      	ans+=divide(l,pos-1);
      }
    if(r> pos)
    {
    	ans+=a[pos];
    	ans+=divide(pos+1,r);
    }
    
    return ans;
	
}
int main() {
	for (int i = 2; i <= 100002; i++)
      logtable[i] = logtable[i >> 1] + 1;
      
	int t;
	scanf("%d",&t);
	while(t--)
	{
	fors(i,20)fors(j,100001)s[i][j]=0;
	int n;
	scanf("%d",&n);
	fors(i,n)scanf("%d",&a[i]);
	
	/*for(int j=1; (1<<j) <=n;j++)//pre
	{
		for(int i=0; i+ (1<<j)-1 < n; i++)
		{
			if(a[s[i][j-1]] > a[s[i+ 1<<(j-1)][j-1]] )
			s[i][j] =  s[i][j-1];
			else s[i][j] =  s[i+ (1<<(j-1))][j-1] ;
		}
	}*/
	fors(i,n){
		s[0][i]=i;// 0 based indexing
	}
	for (int k = 1; (1 << k) < n; ++k) {
      for (int i = 0; i + (1 << k) <= n; i++) {
        int x = s[k - 1][i];
        int y = s[k - 1][i + (1 << k - 1)];
        s[k][i] = (a[x] > a[y]) ? x : y;
      }
    }
     
	printf("%lld\n",divide(0,n-1));
	}
	return 0;
}

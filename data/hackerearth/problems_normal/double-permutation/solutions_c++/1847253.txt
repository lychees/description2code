#include<bits/stdc++.h>


using namespace std;

#define rep(i,n) for(i=0;i<n;i++)
#define ll long long
#define elif else if
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define CLEAR(array, value) memset(ptr, value, sizeof(array));
#define si(a)     scanf("%d", &a)
#define sl(a)     scanf("%lld", &a)
#define pi(a)     printf("%d", a)
#define pl(a)     printf("%lld", a)
#define pn        printf("\n")

 
template <typename T>
long long mergeSortAndCountInversions(T* arr, int size)
{
  int m;
 
  if (size <= 1)
    return 0;
 
  m = size / 2;
 
  long long invCountA = 0, invCountB = 0, invCountC = 0;
  invCountA = mergeSortAndCountInversions(arr, m);
  invCountB = mergeSortAndCountInversions(arr + m, size - m);
 
  T* arrPartA = new T[m];
  T* arrPartB = new T[size - m];
 
  memcpy(arrPartA, arr, sizeof(T) * m);
  memcpy(arrPartB, arr + m, sizeof(T) * (size - m));
 
  int i = 0, j = 0, k = 0;
 
  while (k < size)
  {
    if (arrPartA[i] < arrPartB[j])
    {
      arr[k] = arrPartA[i];
      i++;
 
      invCountC += j;
    }
    else
    {
      arr[k] = arrPartB[j];
      j++;
 
      invCountC += 1;
    }
 
    k++;
 
    if (i >= m || j >= (size - m))
      break;
  }
 
  invCountC -= j;
 
  while (i < m)
  {
    arr[k] = arrPartA[i];
    k++;
    i++;
 
    invCountC += j;
  }
  while (j < (size - m))
  {
    arr[k] = arrPartB[j];
    k++;
    j++;
  }
 
  delete []arrPartA;
  delete []arrPartB;
 
  return (invCountA + invCountB + invCountC);
}


long long int m_pow( long long int b,  long long int e, long long int m)
{
 long long int r=1;
while(e>0)
{
if(e%2==1)
r=(r*b)%m;
e=e>>1;
b=(b*b)%m;
 
}
return r;
}
ll int  mod=1000000000+7;
int main()
{
 ios_base::sync_with_stdio(0);
ll int n,i,j,k,m,ans=0;
 cin>>n;
 vector<int>a(2*n);
 rep(i,2*n)cin>>a[i];
 if(n==1)
 {
  cout<<"1\n";
  return 0;
 }
 ll int lim=2*n;
 /*for(i=0;i<2*n;i++)
 {
  for(j=i+1;j<2*n;j++)
  {
    if(a[i]<a[j])
    ans+=pow(2,n-2);
    elif(a[j]<a[i])
    ans+= (pow(2,n-2)+pow(2,n-1));
    else
    ans+=pow(2,n-1);
  }
 }*/
  int arr[2*n];
  rep(i,2*n)
  arr[i]=a[i];
  ll int ca=(mergeSortAndCountInversions(arr,2*n)-n)%mod,cb=n%mod,cc= (n*(2*n-1)-ca-cb)%mod ;
  ll int pa=m_pow(2,n-1,mod),pb=m_pow(2,n-2,mod);
  ans= (ca*(pa+pb))%mod + (cb*pa)%mod + (cc*pb)%mod;
  //cout<<ca<<" "<<cb<<" "<<cc;
 cout<<ans%mod<<"\n";
 return 0;
}

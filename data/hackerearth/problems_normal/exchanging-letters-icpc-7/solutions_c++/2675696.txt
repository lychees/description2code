#include <iostream>
#include <cassert>

using namespace std;

const int kMod = int(1e9) + 7;

int ModPow(int a, int b) {
  int ans = 1;
  while (b > 0) {
    if (b & 1) {
      ans = (ans * 1LL * a) % kMod;
    }
    a = (a * 1LL * a) % kMod;
    b >>= 1;
  }
  return ans;
}

int Reverse(int a) {
  return ModPow(a, kMod - 2);
}

int Fact(int n) {
  if (n == 0) return 1;
  return (Fact(n - 1) * 1LL * n) % kMod;
}

int C(int n, int k) {
  if (k > n) return 0;
  int ans = (Fact(n) * 1LL * Reverse(Fact(n - k))) % kMod;
  ans = (ans * 1LL * Reverse(Fact(k))) % kMod;
  return ans;
}

int main() {
  int n, k, t;
  cin >> n >> k >> t;
  int s = 0;
  for (int i = 0; i < k; ++i) {
    int ai;
    cin >> ai;
    s += ai;
  }
  int val = t - s + k;
  if (val >= 0 && val % 2 == 0) {
    printf("%d\n", C(k, val / 2));
  } else {
    puts("0");
  }
  return 0;
}

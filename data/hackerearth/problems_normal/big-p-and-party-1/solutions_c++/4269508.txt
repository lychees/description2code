#include <bits/stdc++.h>
using namespace std;
int ans[2000];
int col[2000]={0};
class Graph{
	int V;
	list<int> *adj;
public:
	Graph(int V);
	void addEdge(int a,int b);
	void BFS(int source);
};
Graph::Graph(int V)
{
	this->V=V;
	adj=new list<int>[V];
}
void Graph::addEdge(int a,int b)
{
	adj[a].push_back(b);
	adj[b].push_back(a);
}
void Graph::BFS(int source)
{
	queue<int> q;
	q.push(source);
	col[source]=1;
	int cnt=0;
	ans[0]=0;
	while(!q.empty())
	{
		int temp=q.front();
	
		q.pop();
		for(list<int>::iterator  i=adj[temp].begin();i!=adj[temp].end();++i)
		{
			if(col[*i]==0)
			{
				ans[*i]=ans[temp]+1;
			q.push(*i);
			col[*i]=1;
			}
		}
	}
}

int main()
{
    int per;
    int dan;
    cin >> per >> dan;
    Graph g(per);
    while(dan--)
    {
    	int x,y;
    	cin >> x >> y;
    	g.addEdge(x,y);
    }
    g.BFS(0);
    for(int j=1;j<per;++j)
    	cout << ans[j] << "\n";
    return 0;
}

// hackerearth file
#include<bits/stdc++.h>
#include<math.h>
#include<cmath>
#include<string>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(_vvv) (int)(_vvv.size())
#define all(_v) (_v).begin(),(_v).end()
#define gi(x) scanf("%d",&x)
#define gl(x) scanf("%ld",&x)
#define gll(x) scanf("%64d",&x)
#define pii pair<int,int>
typedef long long ll;
const ll MOD = 1e9+7;
const int INF = 0x7f7f7f7f;
const double eps = 1e-6;

const int MAXN = 1111;
int dist[MAXN];
vector < int > g[MAXN];

void update(int node) {
	for (int i = 0; i < sz(g[node]); i ++) {
		int nn = g[node][i];
		if(dist[nn] > dist[node] + 1) {
			dist[nn] = dist[node] + 1;
			update(nn);
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	
    int n,q; cin >> n >> q;
	for (int i = 1; i <= n; i ++) dist[i] = INF;
	dist[1] = 0;

	while (q --) {
		int ty; cin >> ty;
		if(ty == 1) {
			int a; cin >> a;
			if(dist[a] == INF) cout << -1 << '\n';
			else cout << dist[a] << '\n';
		}
		else {
			int a,b; cin >> a >> b;
			g[a].pb(b);
			if(dist[b] > dist[a] + 1) {
				dist[b] = dist[a] + 1;
				update(b);
			}
		}
	}
	
	return 0;
}

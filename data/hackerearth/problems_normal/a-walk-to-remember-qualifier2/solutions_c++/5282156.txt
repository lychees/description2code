// Bibhash Singh : Kosaraju algorithm

#include<bits/stdc++.h>
using namespace std;
vector<long>v[100001],r[100001];
stack<long>st,s;
bool visited[100001],visited1[100001],selected[100001];
int length=0;

void dfs1(long n)
{
    visited[n]=true;

    for(long i=0;i<v[n].size();i++)
    {
        if(!visited[v[n][i]])
        {
            dfs1(v[n][i]);
        }
    }

    st.push(n);
    return;
}

void dfs2(long n)
{
    visited1[n]=true;


    for(long i=0;i<r[n].size();i++)
    {
        if(!visited1[r[n][i]])
        {
            dfs2(r[n][i]);
        }
    }
    s.push(n);
    length++;

    return;
}
int main()
{
    long n,a,b,m;
 //cout<<"'n enter the no of nodes";
 cin>>n;
 //cout<<"\n enter the  number of edges : ";

 cin>>m;
 //cout<<"\n Enter the edges : ";
 for(long i=1;i<=m;i++)
 {
  cin>>a>>b;
  v[a-1].push_back(b-1);
  r[b-1].push_back(a-1);
 }
 for(long i=0;i<n;i++)
 {
 visited[i]=false;
 visited1[i]=false;
 selected[i]=false;
 }
 for(long i=0;i<n;i++)
 {
  if(!visited[i])
  {
    dfs1(i);
  }
 }
 while(!st.empty())
 {
   long t=st.top();
   //visited1[t]=true;
   st.pop();

          if(!visited1[t])
           {
            dfs2(t);
           }
       if(length > 1)
        {
	    while(!s.empty())
	    {
	    long z = s.top();
	    s.pop();
	    selected[z+1]=true;
	    }
        }
       else
       while(!s.empty())
	   s.pop();
 length=0;
 //cout<<maxlength<<endl;
}

for(long i=1;i<=n;i++)
   {
    if(selected[i]==true)
	cout<<1<<" ";
    else
	cout<<0<<" ";

   }
}

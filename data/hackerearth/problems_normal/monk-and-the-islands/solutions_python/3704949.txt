from collections import defaultdict
import Queue
class Graph():

    def __init__(self, connections=[], directed=False):
        self.status_dict      = defaultdict(lambda : 1)
        self.graph_dict       = defaultdict(list)
        self.is_directed      = directed



    def add_edge(self,node1, node2):
       
        self.graph_dict[node1].append(node2)
            
        if not self.is_directed:
            self.graph_dict[node2].append(node1)

    def add_vertex(self,node):
        self.graph_dict[node]
        self.status_dict[node]





def bfs(g,src_node,N):
    q = Queue.Queue()
    q.put(src_node)
    g.status_dict[src_node] = 2
    prev = [-1]*(N+1)



    while(q.empty() == False):
        u = q.get()
    
        g.status_dict[u]=3
        for nbs in g.graph_dict[u]:
            if g.status_dict[nbs] == 1:
                g.status_dict[nbs] = 2
                q.put(nbs)
                prev[nbs] = u
                
    return prev


T = int(raw_input())
for k in range(T):
    G = Graph() 
    N,M = [int(x)for x in raw_input().split()]
    for i in range(1,N+1):
        G.add_vertex(i)
    for i in range(M):
        u,v = [int(x) for x in raw_input().split()]
        G.add_edge(u,v)

    prev = bfs(G,1,N)

    current  = N
    ans = 0
    while (prev[current] !=-1):

        current = prev[current]
        ans += 1

    print ans
        

    
    
    
    


















#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>

using namespace std;

const int SZ=317;
int N, Q;
int A[100001];
int X[100001];
int bit[100001];
pair<pair<int, int>, int> queries[100000];
long long ans[100000];

bool cmp(const pair<pair<int, int>, int>& a, const pair<pair<int, int>, int>& b)
{
    if(a.first.first/SZ!=b.first.first/SZ)
        return a.first.first/SZ<b.first.first/SZ;
    return a.first.second<b.first.second;
}

inline void add(int x, int v)
{
    for(; x<=N; x+=x&-x)
        bit[x]+=v;
}

inline int sum(int x)
{
    int ret=0;
    for(; x>0; x-=x&-x)
        ret+=bit[x];
    return ret;
}

int main()
{
    scanf("%d%d", &N, &Q);
    for(int i=1; i<=N; i++)
        scanf("%d", A+i), X[i]=A[i];
    sort(X+1, X+1+N);
    for(int i=1; i<=N; i++)
        A[i]=lower_bound(X+1, X+1+N, A[i])-X;
    for(int i=0; i<Q; i++)
        scanf("%d%d", &queries[i].first.first, &queries[i].first.second), queries[i].second=i;
    sort(queries, queries+Q, cmp);
    int l=1, r=1, pre=-1;
    long long inv=0;
    for(int i=0; i<Q; i++)
    {
        if(queries[i].first.first/SZ!=pre)
        {
            memset(bit, 0, sizeof bit);
            l=r=queries[i].first.first;
            add(A[queries[i].first.first], 1);
            inv=0;
            pre=queries[i].first.first/SZ;
        }
        while(l<queries[i].first.first)
        {
            inv-=sum(A[l]-1);
            add(A[l], -1);
            l++;
        }
        while(l>queries[i].first.first)
        {
            l--;
            add(A[l], 1);
            inv+=sum(A[l]-1);
        }
        while(r<queries[i].first.second)
        {
            r++;
            add(A[r], 1);
            inv+=(r-l+1)-sum(A[r]);
        }
        ans[queries[i].second]=inv;
    }
    for(int i=0; i<Q; i++)
        printf("%lld\n", ans[i]);
    return 0;
}

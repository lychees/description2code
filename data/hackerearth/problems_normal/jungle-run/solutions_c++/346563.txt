#include<iostream>
#include <list>
#include<string>
#include<vector>

using namespace std;

class Graph
{
    int V;    
    list<int> *adj;    
public:
    Graph(int V);  
	~Graph();
    void addEdge(int v, int w); 
    void BFS(int s,int e);  
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}

Graph::~Graph()
{
	delete[] adj;
}
 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); 
}
 
void Graph::BFS(int s,int e)
{
    
    bool *visited = new bool[V];
	int *d=new int[V];
	int u=s,count=0;
    for(int i = 0; i < V; i++)
        {visited[i] = false;
	      d[i]=-1;
	    }
    list<int> queue;
 
    visited[s] = true;
    queue.push_back(s);

	d[s]=0;
 
    list<int>::iterator i;
    bool found=false;

    while(!queue.empty() && !found)
    {
        u = queue.front();
        queue.pop_front();
 
        for(i = adj[u].begin(); i != adj[u].end(); ++i)
        {
			if(!visited[*i])
            {
                visited[*i] = true;
                queue.push_back(*i);
				     d[*i]=d[u]+1;
				if(*i==e)
					found=true;
            }
        }
    }

	printf("%d\n",d[e]);
	delete[] visited;
	delete[] d;
}
 
int main()
{
	int n,s,e,count=1;
	cin>>n;

	vector<vector<int> >ms;

	for(int i = 0; i < n; i++)
	{
	vector<int> row(n);
	ms.push_back(row);
	}


	char ch;

	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			cin>>ch;

			if(ch=='S')
			{
				s=count;
				ms[i][j]=count;
				count++;
			}
			else if(ch=='E')
			{
				e=count;
				ms[i][j]=count;
				count++;
			}
			else if(ch=='P')
			{
				ms[i][j]=count;
				count++;
			}
			else
			{
				ms[i][j]=0;
			}
		}
	}
	

	Graph g(n*n);

	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(ms[i][j])
			{
				if((i+1)<n){
					if(ms[i+1][j])
						g.addEdge(ms[i][j],ms[i+1][j]);}

				if((i-1)>=0){
					if(ms[i-1][j])
						g.addEdge(ms[i][j],ms[i-1][j]);}

				if((j+1)<n){
				if(ms[i][j+1])
					g.addEdge(ms[i][j],ms[i][j+1]);}

				if((j-1)>=0){
				if(ms[i][j-1])
					g.addEdge(ms[i][j],ms[i][j-1]);}
			}
		}
	}

	g.BFS(s,e);

    return 0;
}






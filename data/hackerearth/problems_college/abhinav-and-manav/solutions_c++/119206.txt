#include<cstdio>
#include<iostream>
#include<string>
#include<cstdlib>
#include<queue>
#include<stack>
#include<utility>
#include<string>
#include<cstring>
#include<set>
#include<cmath>
#include<vector>
#include<fstream>
#include<map>
#include<list>
#include<algorithm>

#define VI vector<int>
#define VF vector<float>
#define VD vector<double>
#define VC vector<char>
#define VVI vector<VI>
#define VVF vector<VF>
#define VVD vector<VD>
#define VVC vector<VC>
#define SI set<int>
#define SF set<float>
#define SD set<double>
#define SC set<char>
#define SSI set<SI>
#define SSF set<SF>
#define SSD set<SD>
#define SSC set<SC>
#define STI stack<int>
#define STF stack<float>
#define STD stack<double>
#define STC stack<char>
#define STSTI stack<STI>
#define STSTF stack<STF>
#define STSTD stack<STD>
#define STSTC stack<STC>

typedef long long int LLD;
typedef unsigned long long int LLU;

using namespace std;

LLD next_num(int dig){
	LLD n = 1;
	while(dig--){
		n *= 10;
	}
	return n;
}

int num_digits(LLD n){
	int dig = 0;
	while(n){
		dig++;
		n /= 10;
	}
	return dig;
}

LLD find_max_number(LLD l, LLD r){
	
	while(num_digits(l) != num_digits(r))
		l = next_num(num_digits(l));
	
	LLD max_dig_num = (next_num(num_digits(l)) - 1) >> 1;
//	cout << max_dig_num << endl;
	if(l <= max_dig_num && r <= max_dig_num)
		return min(r, max_dig_num);
	else if(l > max_dig_num && r > max_dig_num)
		return max(max_dig_num, l);
	else
		return max_dig_num;
}

LLD mirror_image(LLD n){
	stack<int> s;
	while(n){
		s.push(9 - (n % 10));
		n /= 10;
	}
	
	LLD r = 0;
	
	while(!s.empty()){
		r *= 10;
		r += s.top();
		s.pop();
	}
	return r;
}

int main(){
	
	LLD t, l, r;
	scanf("%lld", &t);
	while(t--){
		scanf("%lld%lld", &l, &r);
		LLD max_num = find_max_number(l, r);
		printf("%lld\n", max_num * mirror_image(max_num));
	}
    return 0;
}

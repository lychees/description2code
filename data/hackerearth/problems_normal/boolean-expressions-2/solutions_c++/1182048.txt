/*for(long i = 0 ; i < n ; i++){
    for(long j = 0 ; j < m ; j++){

    }
}*/

#include <bits/stdc++.h>
 
using namespace std;

# define MOD 1000000009
# define pi 3.141593

template<class T> inline void read(T& x) {
    char ch;
    while(!isdigit(ch = getchar_unlocked()));
    x = ch-'0';
    while( isdigit(ch = getchar_unlocked())) x *= 10, x += ch-'0';
}

int main(){
    string a;
    cin >> a;
    string b;
    cin >> b;
    long q;
    int n = a.length();
    long long dp[303][303][5] = {0};
    for(int i = n-1 ; i >= 0 ; i--){
        for(int j = i ; j < n ; j++){
            if(i == j){
                if(a[i] == '1'){
                    dp[i][j][1] = 1;
                }
                else{
                    dp[i][j][0] = 1;
                }
                continue;
            }

            long long sum1 = 0,sum2 = 0;
            for(int k = i+1 , l = i ; l < j ; k++ , l++){
                if(b[l] == 'a'){
                    sum1 = sum1 + (dp[k][j][1]*dp[i][l][1])%MOD;
                    sum1 = sum1%MOD;
                    sum2 = sum2 + (dp[k][j][0]*dp[i][l][0])%MOD;
                    sum1 = sum1%MOD;
                    sum2 = sum2 + (dp[k][j][1]*dp[i][l][0])%MOD;
                    sum2 = sum2%MOD;
                    sum2 = sum2 + (dp[k][j][0]*dp[i][l][1])%MOD;
                    sum2 = sum2%MOD;
                }
                else if(b[l] == 'x'){
                    sum2 = sum2 + (dp[k][j][1]*dp[i][l][1])%MOD;
                    sum2 = sum2%MOD;
                    sum2 = sum2 + (dp[k][j][0]*dp[i][l][0])%MOD;
                    sum2 = sum2%MOD;
                    sum1 = sum1 + (dp[k][j][1]*dp[i][l][0])%MOD;
                    sum1 = sum1%MOD;
                    sum1 = sum1 + (dp[k][j][0]*dp[i][l][1])%MOD;
                    sum1 = sum1%MOD;
                }
                else{
                	sum1 = sum1 + (dp[k][j][1]*dp[i][l][1])%MOD;
                    sum1 = sum1%MOD;
                    sum1 = sum1 + (dp[k][j][1]*dp[i][l][0])%MOD;
                    sum1 = sum1%MOD;
                    sum1 = sum1 + (dp[k][j][0]*dp[i][l][1])%MOD;
                    sum1 = sum1%MOD;
                    sum2 = sum2 + (dp[k][j][0]*dp[i][l][0])%MOD;
                    sum2 = sum2%MOD;
                }
            }
            dp[i][j][1] = sum1;
            dp[i][j][0] = sum2;
        }
    }

    cin >> q;
    while(q--){
        int l,r;
        string c;
        cin >> l >> r >> c;
        l--;r--;
        if(c == "true"){
            cout << dp[l][r][1] << "\n";
        }
        else{
            cout << dp[l][r][0] << "\n";
        }
    }
    return 0;
}

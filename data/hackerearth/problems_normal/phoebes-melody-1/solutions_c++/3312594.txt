#include <iostream>
#include <fstream>
#include <cstdio>
#include <climits>
#include <vector>
#include <map>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <string>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <cmath>

using namespace std;

#define ll long long
#define vt vector
#define mod 1000000007

int ldp[200001], rdp[200001], v[200001];

int main()
{
	int t;
	scanf("%d", &t);
	while (t-- > 0)
	{
		int n, k;
		scanf("%d %d", &n, &k);
		for (int i = 0; i < n; i++)
			scanf("%d", &v[i]);
		memset(ldp, -1, sizeof(ldp));
		memset(rdp, -1, sizeof(rdp));
		for (int i = 1; i < n; i++)
		{
			int j = i - 1;
			while (ldp[j] != -1 && v[j] > v[i])
				j = ldp[j];
			if (v[j] < v[i])
				ldp[i] = j;
			else
				ldp[i] = -1;
		}
		for (int i = n - 2; i >= 0; i--)
		{
			int j = i + 1;
			while (rdp[j] != -1 && v[j] > v[i])
				j = rdp[j];
			if (v[j] < v[i])
				rdp[i] = j;
			else
				rdp[i] = -1;
		}
		int ans = 0;
		for (int i = 0; i < n; i++)
		{
			int r = n+1, j;
			if (i - k >= 0)
			{
				j = i - k;
				while (ldp[j] != -1 && v[j] > v[i])
					j = ldp[j];
				if (v[j] < v[i])
					r = min(r, i - j);
			}
			if (i + k < n)
			{
				j = i + k;
				while (rdp[j] != -1 && v[j] > v[i])
					j = rdp[j];
				if (v[j] < v[i])
					r = min(r, j - i);
			}
			if (r != n + 1)
				ans += r;
		}
		printf("%d\n", ans);
	}
	return 0;
}
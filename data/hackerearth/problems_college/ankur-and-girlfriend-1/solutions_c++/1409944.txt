#include <iostream>
#include <cstdio>
#include<cmath>
using namespace std;
int n,target;
double dist[20][20];
double memo[1 << 16];
double matching(int bitmask){
    if (memo[bitmask] > 0.5)return memo[bitmask];
    if (bitmask == target)return memo[bitmask] = 0;

    double ans = 20000000000.0;
    int p1,p2;
    for(p1 = 0;p1 < 2*n;++p1){
        if ((bitmask & (1 << p1)) == 0)break;
    }
    for(p2 = p1 + 1;p2 < 2*n; ++p2){
        if ((bitmask & (1 << p2)) == 0){
            ans = min(dist[p1][p2] + matching(bitmask | (1 << p1) | (1 << p2)),ans);
        }
    }
    return memo[bitmask] = ans;
}
double hypot(int x1, int x2){
	return sqrt(x1*x1 + x2*x2);
}

int main()
{
	int test;
	scanf("%d",&test);
	while(test--){
		scanf("%d",&n);
	    int x[2*n];
	    int y[2*n];
	    for (int i = 0; i < 2*n; i++) {
	        scanf("%d%d",&x[i],&y[i]);
	    }
	    for (int i = 0; i < 2 * n - 1; i++) {
	        for (int j = i + 1; j < 2*n ; j++) {
	            dist[i][j] = dist[j][i] = hypot(x[i] - x[j],y[i] - y[j]);
	        }
	    }
	    for (int i = 0; i < (1 << 16); i++) {
	        memo[i] = -1.0;
	    }
	    target = (1 << (2*n)) - 1;
	    printf("%.2f\n",matching(0));
	}
    return 0;
}

#include <iostream>
#include <cstdio>

#define MODULUS_NUM 1000000009

void matrixPow( long long a[][2], long long pow, long long result[][2]);
void matrixMult( long long a[][2], long long b[2][2] , long long result[][2] );

int main(){

	long long multMatrix[2][2]={9,1,1,9};

	long long p[2][2];

	int cases;

	scanf("%d",&cases);

	for(int i=0; i<cases; i++){
		long long pow;
		scanf("%lld",&pow);
		matrixPow(multMatrix, pow-1, p);	
		printf("%lld\n", (p[0][0]+9*p[0][1])%MODULUS_NUM);
	}

	return 0;
}

void matrixPow( long long a[][2], long long pow, long long result[][2]){
	switch(pow) {
	   case 0: 
			for(int i=0;i<2;i++){
				result[i][i]=1;
				result[i][1-i]=0;	
			}
			break;
		
	   case 1:
			for(int i=0;i<2;i++)
				for(int j=0;j<2;j++)
					result[i][j] = a[i][j];
			break;
			
	   default:
			if(pow%2==0){
				long long halfPower[2][2];
				matrixPow(a, pow/2, halfPower);
				matrixMult(halfPower, halfPower, result);
			} else{
				long long aPowerMinus1[2][2];
				matrixPow(a, pow-1, aPowerMinus1);
				matrixMult(a, aPowerMinus1, result);
			}
	} 
}

void matrixMult( long long a[][2], long long b[][2] , long long result[][2] ){
	for(int i=0;i<2;i++){
		for(int j=0;j<2;j++){
			result[i][j]=0;
			for(int k=0;k<2;k++)
				result[i][j]= (result[i][j]+a[i][k]*b[k][j])%MODULUS_NUM;
		}
	}
}


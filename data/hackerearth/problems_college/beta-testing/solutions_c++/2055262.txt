#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_pbds;

typedef long long LL;

typedef tree<
    int,
    null_type,
    less<int>,
    rb_tree_tag,
    tree_order_statistics_node_update>
ordered_set;
//find_by_order
//order_of_key

#define FO(i,a,b) for (int i = (a); i < (b); i++)

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );
#define ALL(v) v.begin(),v.end()

#define X first
#define Y second
#define MP make_pair

typedef pair<int,int> pint;
typedef map<int,int> mint;

void show() {cout<<'\n';}
template<typename T,typename... Args>
void show(T a, Args... args) { cout<<a<<" "; show(args...); }
template<typename T>
void show_c(T& a) { for ( auto &x:a ){ cout<<x<<" ";}cout<<endl;  }


bool cmp( const pair<string,pint>&a,const pair<string,pint>&b ){
    if ( a.Y.X == b.Y.X ){
        return a.Y.Y<b.Y.Y;
    }else{
        return a.Y.X>b.Y.X;
    }
}

int main(){

    int n;
    while ( scanf("%d",&n)==1 ){
        string str;
        map< string,pair<int,int> > mp;
        for (int i=1;i<=n;++i ){
            cin>>str;
            mp[str].X++;
            if ( mp[str].Y==0 )
                mp[str].Y=i;
        }
        vector<pair<string,pint>> v;
        for ( auto&p:mp ){
            v.PB( MP( p.X,MP(p.Y.X,p.Y.Y) ) );
        }

        sort( ALL(v),cmp );
        for ( auto&p:v ){
            printf("%s %d\n",p.X.c_str(),p.Y.X);
        }
    }

    return 0;
}

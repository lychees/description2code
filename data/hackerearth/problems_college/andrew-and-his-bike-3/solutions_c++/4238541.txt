#include <bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define MP make_pair
#define PB push_back

const int N = 1e5 + 5;

int timer = 0;
vector <int> G1[N], G2[N];
bool visited[N];
int pre_order[N];
int post_order[N];
int descendants[N];
vector < pair <int,int> > V;

void dfs(int x)
{
    visited[x] = 1;
    pre_order[x] = timer++;
    for(int y: G1[x])
    {
        if(!visited[y])
            dfs(y);
    }
    post_order[x] = timer++;
}

bool is_ancestor(int x, int y) /// x is ancestor of y
{
    return pre_order[x] < pre_order[y] and post_order[x] > post_order[y];
}

int find(int x)
{
    int res = 1;
    for(int i: G2[x])
        res += find(i);
    return descendants[x] = res;
}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    int n;
    cin>>n;
    for(int i=1;i<n;++i)
    {
        int x, y;
        cin>>x>>y;
        V.PB(MP(x,y));
        G1[x].PB(y);
        G1[y].PB(x);
    }
    dfs(1);
    for(int i=0;i<n-1;++i)
    {
        if(!is_ancestor(V[i].F, V[i].S))
            swap(V[i].F, V[i].S);
        G2[V[i].F].PB(V[i].S);
    }
    descendants[1] = find(1);
    cout<<n-1<<" ";
    for(int i=2;i<=n;++i) cout<<descendants[i]<<" ";
    cout<<"\n";
    return 0;
}
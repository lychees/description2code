#include<bits/stdc++.h>
using namespace std;
map<pair<long int ,long int >,long int > hx;
vector<long int > v[2000005];
long int  vis[2000005];
long int  n;
long int  ans=-1,f=0;
/*
void dfs(long int  s,long int  h)
{
    //cout<<s<<endl;
    vis1[s]=1;
    if(s==n)
    {
       // f=1;
        if(ans1!=-1)
        ans1=min(h,ans1);
        else
            ans1=h;
        return;
    }
    for(long int  i=0;i<v[s].size();i++)
    {
        if(f)
            return;
        long int  x=v[s][i];
        if(hx.find({s,x})!=hx.end())
            {
      //  cout<<s<<"   "<<x<<endl;

        long int  tx=hx[{s,x}];
        if(tx==h  )
        {
            return;
        }
        }
        if(!vis1[x])
            dfs(x,h+1);
    }

    return;
}*/
pair<long int ,long int > px[2000005],xp[2000005];
int  main()
{
long int  i,j,x,y,m,k;
cin>>n>>m>>k;
for(i=0;i<m;i++)
{
    cin>>x>>y;
    px[i]={x,y};
    xp[i]={y,x};
    v[x].push_back(y);
     v[y].push_back(x);
}

for(i=0;i<k;i++)
{
    cin>>x>>y;
    hx[px[y-1]]=x;
      hx[xp[y-1]]=x;

}
  //  dfs(1,0);
   queue<pair<long int,long int> > q;
   q.push({1,0});

   while(!q.empty())
   {
       pair<long int,long int> p=q.front();
       q.pop();

       vis[p.first]=1;

       long  int s=p.first;
        long int h=p.second;
        if(s==n)
        {
            ans=h;
            break;
        }
        for(i=0;i<v[s].size();i++)
        {
           long  int x=v[s][i];
            if(hx.find({x,s})!=hx.end() && hx[{x,s}]<=h )
                continue;
            if(!vis[x])
            {
                q.push({x,h+1});
            }


        }
   }
    cout<<ans<<endl;
    return 0;
}

#include<bits/stdc++.h>
#define MOD 1000000007
using namespace std ;
int a[1001][1001] , cnt , dp[1001][1001] , visited[1001][1001] ;
int n , m ;
vector < int > v ;
int calc ( ) {
    int i ;
    long long ans , x = 1;
    for ( i = 0 ; i < v.size() ; i++ ) {
        ans = 1 ;
        for ( int j = 1 ; j <= v[i] ; j++ ) {
            ans = ((ans%MOD)*(j%MOD))%MOD ;
        }
        x = ((x%MOD)*(ans%MOD))%MOD ;
    }
    return x ;
}
void dfs ( int i , int j ) {
    if ( dp[i][j] > -1 )
        return ;
    visited[i][j] = 1 ;
    dp[i][j] = 1 ;
    if ( a[i+2][j+1] == 1 && i+2 <= n && j+1 <= m && !visited[i+2][j+1] ) {
        dfs ( i+2 , j+1 ) ;
        dp[i][j] += dp[i+2][j+1] ;
    }
    if ( a[i+1][j+2] == 1 && i+1 <= n && j+2 <= m && !visited[i+1][j+2] )  {
        dfs ( i+1 , j+2 ) ;
        dp[i][j] += dp[i+1][j+2] ;
    }
    if ( a[i+2][j-1] == 1 && i+2 <= n && j-1 >= 1 && !visited[i+2][j-1] ) {
        dfs ( i+2 , j-1 ) ;
        dp[i][j] += dp[i+2][j-1] ;
    }
    if ( a[i+1][j-2] == 1 && i+1 <= n && j-2 >= 1 && !visited[i+1][j-2] ) {
        dfs ( i+1 , j-2 ) ;
        dp[i][j] += dp[i+1][j-2] ;
    }
    if ( a[i-2][j+1] == 1 && i-2 >= 1 && j+1 <= m && !visited[i-2][j+1] ) {
        dfs ( i-2 , j+1 ) ;
        dp[i][j] += dp[i-2][j+1] ;
    }
    if ( a[i-1][j+2] == 1 && i-1 >= 1 && j+2 <= m && !visited[i-1][j+2] ) {
        dfs ( i-1 , j+2 ) ;
        dp[i][j] += dp[i-1][j+2] ;
    }
    if ( a[i-2][j-1] == 1 && i-2 >= 1 && j-1 >= 1 && !visited[i-2][j-1] ) {
        dfs ( i-2 , j-1 ) ;
        dp[i][j] += dp[i-2][j-1] ;
    }
    if ( a[i-1][j-2] == 1 && i-1 >= 1 && j-2 >= 1 && !visited[i-1][j-2]) {
        dfs ( i-1 , j-2 ) ;
        dp[i][j] += dp[i-1][j-2] ;
    }
}
int main () {
    int t ;
    scanf ( "%d" , &t ) ;
    while ( t-- ) {
        int q ;
        scanf ( "%d %d %d" , &n , &m , &q ) ;
        for ( int i = 1 ; i <= 1000 ; i++ ) {
            for ( int j = 1 ; j <= 1000 ; j++ ) {
                a[i][j] = 0 ;
                dp[i][j] = -1 ;
                visited[i][j] = 0 ;
            }
        }
        int r ,c ;
        while ( q-- ) {
            scanf ( "%d %d" , &r , &c ) ;
            a[r][c] = 1 ;
        }
        cnt = 0 ;
        for ( int i = 1 ; i <= n ; i++ ) {
            for ( int j = 1 ; j <= m ; j++ ) {
                if ( a[i][j] == 1 ) {
                    if ( dp[i][j] == -1 ) {
                        dfs ( i , j ) ;
                        v.push_back ( dp[i][j] ) ;
                    }
                }
            }
        }
        int ans ;
        ans = calc ( ) ;
        printf ( "%d\n" , ans ) ;
        v.clear() ;
    }
    return 0 ;
}

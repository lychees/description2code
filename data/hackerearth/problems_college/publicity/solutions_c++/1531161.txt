#include <bits/stdc++.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <stack>
using namespace std;
#define MAX 100005
 
int parent[MAX];
int rankk[MAX];
 
int find(int i)
{
	if (i == parent[i]) {
		return i;
	}
	return find(parent[i]);
}
 
void unionn(int l, int  r)
{
	int u = find(l);
	int v = find(r);
	if (rankk[u] < rankk[v]) {
		parent[u] = v;
	}
	else if (rankk[u] > rankk[v]) {
		parent[v] = u;
	}
	if (rankk[u] == rankk[v]) {
		parent[u] = v;
		rankk[v]++;
	}
}
 
int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		memset(rankk, 0, sizeof(rankk));
		int n, q;
		scanf("%d%d", &n, &q);
		for (int i = 1; i <= n; i++) {
			parent[i] = i;
		}
		while(q--) {
			int l, r;
			scanf("%d%d", &l, &r);
			l++; r++;
			unionn(l, r);
		}
		int ans = 0;
		for(int i = 1; i <= n; i++) {
			if(parent[i] == i) {
				ans++;
			}
		}
		printf("%d\n", ans);
	}
	
	return 0;
} 
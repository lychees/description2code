#include<vector>
#include<iostream>
#include<stdio.h>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<iostream>
#include<iomanip>
#include<cstdio>
#include<cmath>
#include<math.h>
#include<cstdlib>
#include<ctime>
#include<cstring>
#include<climits>
#include<sstream>
#include<string>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<bitset>

#define ll long long
#define FL(i,a,b) for(ll i=a;i<b;i++)
#define FOR(i,n) for(ll i=0;i<n;i++)
#define SORTF(x) sort(x.begin(),x.end(),func);
#define SORT(x) sort(x.begin(),x.end())
#define pb(x) push_back(x)
#define SET(v, val) memset(v, val, sizeof(v)) ;
#define RSORT(v) { SORT(v) ; REVERSE(v) ; }
#define ALL(v) v.begin(),v.end()
#define REVERSE(v) { reverse(ALL(v)) ; }
#define UNIQUE(v) unique((v).begin(), (v).end())
#define RUNIQUE(v) { SORT(v) ; (v).resize(UNIQUE(v) - (v).begin()) ; }
#define fill(x,n) memset(x,n,sizeof(x))
#define sl(x) scanf("%lld",&x)

using namespace std;

const int N = 5005;
int dp[N][N];
int s[N];
const int MOD = (int)1e9+7;

int main() {
    int a, b, n, k;
    scanf("%d%d%d%d", &n, &a, &b, &k);
    dp[0][a] = 1;

    if (a < b) {
        for (int i = 1; i <= b; i++)
            s[i] = (s[i-1] + dp[0][i]) % MOD;
        
        for (int i = 1; i <= k; i++) {
            for (int j = 1; j < b; j++)
                dp[i][j] = (s[j+(b-j-1)/2] - dp[i-1][j] + MOD) % MOD;
            s[0] = 0;
            for (int j = 1; j <= b; j++)
                s[j] = (s[j-1] + dp[i][j]) % MOD;
        }
        printf("%d\n", s[b-1]);
    }
    else {
        for (int i = n; i > b; i--)
            s[i] = (s[i+1] + dp[0][i]) % MOD;

        for (int i = 1; i <=k; i++) {
            for (int j = b+1; j <= n; j++)
                dp[i][j] = (s[j-(j-b-1)/2] - dp[i-1][j] + MOD) % MOD;
            s[0] = 0;
            for (int j = n; j > b; j--)
                s[j] = (s[j+1] + dp[i][j]) % MOD;
        }
        printf("%d\n", s[b+1]);
    }
    return 0;
}
#include<bits/stdc++.h>
using namespace std;

vector<int> nodes(1502);
pair<long long int,pair<int, int> > edges[31319];
int e,n;

int root(int vertex)
{
    while(nodes[vertex]!=vertex)
    {
        nodes[vertex]=nodes[nodes[vertex]];
        vertex=nodes[vertex];
    }
    return vertex;
}

void unionTree(int v1,int v2)
{
    int r1=root(v1);
    int r2=root(v2);
    nodes[r1]=nodes[r2];
}

long long kruskal()
{
    long long cost=1;
    for(int i=0; i<e; i++)
    {
        int r1=root(edges[i].second.first);
        int r2=root(edges[i].second.second);
        if(r1!=r2)
        {
            cost=(cost*edges[i].first)%1000000007;

            unionTree(edges[i].second.first,edges[i].second.second);
        }
    }
    return cost;
}

int main()
{
    int tc;
    scanf("%d",&tc);
    while(tc--)
    {

        scanf("%d %d",&n,&e);
        //cin>>n>>e;
        for(int i=0; i<=n; i++)
        {
            nodes[i]=i;
        }
        for(int i=0; i<e; i++)
        {
            int a,b;
            long long w;
            scanf("%d %d %lld",&a,&b,&w);
            edges[i]=make_pair(w,make_pair(a,b));
        }
        sort(edges,edges+e);
        long long cost=kruskal();
        printf("%lld\n",cost);
    }
    return 0;
}

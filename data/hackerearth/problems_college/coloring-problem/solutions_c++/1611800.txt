    #include <iostream>
    #include <vector>
    #include <string.h>
    using namespace std;
    char colour[100005];
    char visited[100005];
   vector<int> v[100005];
    int dfs(int i)
    {
      std::vector<int>::iterator t1=v[i].begin();
       while(t1!=v[i].end())
         {
		    if(visited[*t1]==0)
		    {
		        visited[*t1]=1;
		        if(colour[i]==1)
		          colour[*t1]=2;
		        else colour[*t1]=1;
		        int r=dfs(*t1);
		        if(r==-1)
		          return -1;
		    }
		    else if(colour[i]==colour[*t1])
		      return -1;
		    t1++;
         }
		    return 0;
    }
    
     
    int main()
    {
    	int t;
    	cin>>t;
    	
    	while(t--)
    	 {
    	 	 int n,m;
             cin>>n>>m;
              memset(colour,0,sizeof(colour));
    	memset(visited,0,sizeof(visited));
             for(int i=1;i<=m;i++)
			    {
				    int x,y;
				    cin>>x>>y;
				    v[x].push_back(y);
				    v[y].push_back(x);
			    }

				       colour[0]=1;
				       visited[0]=1;
				      int  r=dfs(0);
				       if(r==-1)
				        cout<<"NOT BICOLORABLE.\n";
				       else cout<<"BICOLORABLE.\n";
		   for(int i=0;i<n;i++)
		     v[i].clear();
		  }    
    }
 
    
   
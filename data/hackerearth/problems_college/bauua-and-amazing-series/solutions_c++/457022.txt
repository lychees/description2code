#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <complex>
#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <complex>
#include <stack>
#include <cassert>
#include <memory.h>
#ifdef NEV_DEBUG
#include <ctime>
#endif
#pragma comment(linker,"/STACK:64000000")
using namespace std;

const double pi = 3.1415926535897932384626433832795;
double eps = 1e-9;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;

#define sz size()
#define mp make_pair
#define FOR(i,a,b) for(int i=(a),_b(b); i<_b; ++i)
#define RFOR(i,a,b) for(int i=(a)-1,_b(b); i>=_b; --i)
#define CLR(a,b) memset(a,b,sizeof(a))
#define CPY(a,b) memcpy(a,b,sizeof(a))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define sqr(a) ((a)*(a))

char ch[1 << 20];
inline string gs() {scanf("%s", ch);return string(ch);}
inline string gl() {gets(ch);return string(ch);}
inline int gi() {int x;scanf("%d", &x);return x;}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const int N = 3;
const int MOD = 1000 * 1000 * 1000 + 7;
typedef int matrix[N][N];

inline int SUM(int a, int b) {
  return (a + b >= MOD) ? a + b - MOD : a + b;
}

inline int MUL(int a, int b) {
  return (1ll * a * b % MOD);
}

matrix tmp;
// result in matrix a
void MMUL(matrix &a, const matrix &b) {
  CLR(tmp, 0);
  FOR(i, 0, N) {
    FOR(j, 0, N) {
      FOR(k, 0, N) {
        tmp[i][j] = SUM(tmp[i][j], MUL(a[i][k], b[k][j]));
      }
    }
  }
  CPY(a, tmp);
}

void solve(int f0, int f1, int a, int b, int c, LL n) {
  matrix A; A[0][0] = f0; A[0][1] = f1; A[0][2] = 1;
  matrix D = {{0, b, 0},
              {1, a, 0},
              {0, c, 1}};

  --n;
  while (n) {
    if (n & 1LL) {
      MMUL(A, D);
    }
    MMUL(D, D);
    n >>= 1;
  }
  cout << A[0][0] << endl;
}

int main() {
#ifdef NEV_DEBUG
  freopen("in.txt", "r", stdin);
  clock_t beg = clock();
#endif
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////

  int tn = gi();
  int a, b, c, f1, f0;
  LL n;
  FOR(i, 0, tn) {
    cin >> n >> f0 >> f1 >> a >> b >> c;
    solve(f0, f1, a, b, c, n);
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef NEV_DEBUG
  fprintf(stderr, "*** Total time: %.3lf ***\n", 1.0 * (clock() - beg) / CLOCKS_PER_SEC);
#endif
  return 0;
}
#include <iostream>
using namespace std;

typedef struct Checkpost
{
	long long int x,p;
}C;

void Swap(C *a, C * b)
{
	C temp = *a;
	*a = *b;
	*b = temp;
}

int QuickSortUtil(C A[], int low, int high)
{
	long long int pivot = A[high].x - A[high].p;
	int i = low - 1;
	for(int k = low; k <= high-1; k++)
	{
		if(A[k].x - A[k].p <= pivot)
		{
			i++;
			Swap(&A[i], &A[k]);
		}
	}
	i++;
	Swap(&A[i],&A[high]);
	return i;
}

void QuickSort(C A[], int start, int end)
{
	if(start < end)
	{
		int mid = QuickSortUtil(A, start, end);
		QuickSort(A, start, mid-1);
		QuickSort(A, mid+1, end);
	}
}

int main()
{
    long long int N,S,E;
    long long int Ans = 0;
	cin >> N >> S >> E;
    C* c = new C[N];
    
    
    for(int i = 0; i < N; i++)
    {
    	cin >> c[i].x >> c[i].p;
    	
    }
    QuickSort(c, 0, N-1);
	long long int iterDist = S;
    for(int i = 0; i < N; i++)
    {
    	if((c[i].x-c[i].p) >= E)
			break;
		if((c[i].x-c[i].p) > iterDist)
			Ans += (c[i].x-c[i].p) - iterDist;
		if((c[i].x+c[i].p) > iterDist)
    		iterDist = (c[i].x+c[i].p);
	}
	if(E > iterDist)
		Ans += E - iterDist;
    cout << Ans;
    delete[] c;
    return 0;
}
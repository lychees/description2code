#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <numeric>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vector <int> > vvi;
typedef vector<pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME "a"


const int MAXN = 3e3 + 10;

int x[MAXN];
int n;
int s, low, up;

bool read() {
	if  (scanf("%d%d%d%d", &n, &s, &low, &up) < 4) {
		return false;
	}
	forn(i, n) {
		scanf("%d", &x[i]);
	}
	return true;
}

vi xs;
ll dp[MAXN][MAXN];

ll cost(int from, int to) {
	if  (from < to) {
		return (to - from) * 1ll * up;
	}
	return (from - to) * 1ll * low;
}

ll solve() {
	xs.clear();
	forn(i, n) {
		xs.pb(x[i]);
	} 
	sort(all(xs));
	xs.resize(unique(all(xs)) - xs.begin());

	ll prev_max = 0;
	forn(i, n) {
		forn(val, sz(xs)) {
			dp[i][val] = -cost(x[i], xs[val]);
			dp[i][val] += max(prev_max, i ? dp[i - 1][val] + s : 0);
		}

		prev_max = 0;
		forn(val, sz(xs)) {
			prev_max = max(prev_max, dp[i][val]);
		}
	}

	return prev_max;
}

int main() {
#ifdef LOCAL
	freopen(FILE_NAME ".in", "r", stdin);
	// freopen(FILE_NAME ".out", "w", stdout);
#endif

	while (read()) {
		cout << solve() << '\n';
	}

#ifdef LOCAL
	cerr.precision(5);
	cerr << "Time: " << fixed << (double) clock() / CLOCKS_PER_SEC << endl;
#endif
	return 0;
}

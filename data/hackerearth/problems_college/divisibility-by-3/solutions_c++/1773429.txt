/*
Arisen in vain to a life,
Bleeding inner to suffer with time.
Endlessly lost and still searching
For something, someday.

Obsession & deceit
To burn a mark for a lifetime.
Boundaries to brake,
Reached from the edge of time.
To rebuild the past
For something that will everlast.
Just searching for to find itself
In still-motion.

For to hope,
Whenever to find a closure,
Find itself in still-motion..

Get closer,
Closer to your own faith.

Serve the frail mind,
Escape through the lifetime
To glance for your dismal youth.

Get closer,
Closer to your own faith.
*/
 
//#pragma comment(linker, "/STACK:16777216")
#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <ctime> 
 
#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash
 
#define eps 1e-9
//#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 256

using namespace std;

int n,tests,c,dp[55][2100][4];
int anww;
int dd,trem;
void add(int &a,int &b)
{
	a+=b;
	if (a>=bs)a-=bs;
}
string st;
int answ;

int main(){
//freopen("k.in","r",stdin);
//freopen("k.out","w",stdout);
//freopen("C:/input.txt","r",stdin);
//freopen("C:/output.txt","w",stdout);
ios_base::sync_with_stdio(0);
//cin.tie(0);

cin>>tests;
for (;tests;--tests)
{
	cin>>st>>c;
	n=st.size();
	for (int i=0;i<=n;i++)
	 for (int j=0;j<=c;j++)
 	 for (int rem=0;rem<3;rem++)
	  dp[i][j][rem]=0;
	dp[0][0][0]=1;
	
	for (int i=0;i<n;i++)
	 for (int j=0;j<=c;j++)
	  for (int q=0;q<10;q++)
	   for (int orem=0;orem<3;orem++)
	  {
	  	if (q==0&&i==0)continue;
	  	if (dp[i][j][orem]==0)continue;
	  	dd=st[i]-48-q;
	  	if (dd<0)dd=-dd;
	  	trem=orem+q;
	  	trem%=3;
	  	add(dp[i+1][j+dd][trem],dp[i][j][orem]);
	 }
	answ=0;
	for (int i=0;i<=c;i++)
	 add(answ,dp[n][i][0]);
	cout<<answ<<endl;
}

cin.get();cin.get();
return 0;}
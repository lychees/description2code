#include <iostream>
#include <algorithm>
#include <string>
#include <numeric>
#include <functional>

using namespace std;

#define EXIT_SUCCESS	(0)
#define EXIT_INVALID_N	(1)
#define EXIT_STRING_TOO_LONG (2)

// Separate lower and uppercase characters to avoid index bookkeeping
bool isLower(char c)	{ return ( 'a'<=c && c<='z'); }

bool isStringComplete(string s)
{
	// The problem statement didn't specify upper case
	// So treat them as the same.
	transform(s.begin(), s.end(), s.begin(), ::tolower);
	
	// Initializer list assumes everything after to be 0
	bool alphabets_lower[26] = {false};	
	for(int m=0; m<s.size(); m++)
	{
		char c = s[m];
		if( isLower(c) ) { alphabets_lower[c-'a'] |= true; }
	}
	
	// Scan if they are all true
	return accumulate(alphabets_lower, &alphabets_lower[26], true, logical_and<bool>());
}

int main()
{
	// Get number of inputs
    int N;
    cin >> N;
    if( !(1<=N && N<=10) )	{ return EXIT_INVALID_N; }
    // Need to remove the junk in cin before using getline()
    cin.ignore(100, '\n');	
    
    string buffer;
    for(int k=0; k<N; k++)
    {
    	// cin >> buffer;
    	std::getline(std::cin, buffer);		// +1 for null char
    	
    	if( buffer.size()>100 )	{ return EXIT_STRING_TOO_LONG; }
    	
    	// Cannot be complete by pigenhole principle
    	if( buffer.size()<26  ) { cout << "NO" << endl; continue;}
    	
    	isStringComplete(buffer) ? (cout << "YES" << endl) : (cout << "NO" << endl);
    }

    return EXIT_SUCCESS;
}

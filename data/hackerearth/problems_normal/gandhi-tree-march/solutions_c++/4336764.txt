#include <bits/stdc++.h>
using namespace std;
// Macros
#define Max 100005
#define Mod 1000000007
#define Mp make_pair
#define Pb push_back
#define F first
#define S second
#define SortV(v) sort(v.begin(),v.end())
#define For(i,st,ed) for(i=st;i<=ed;i++)
#define ForR(i,st,ed) for(i=st;i>=ed;i--)
#define PrintCase(x)   cout << "Case #" <<x<<": ";
// redirect std ip/op to files
#define FileInOut freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
//Array operation with starting index 1
#define SetA(a,value) memset(a,value,sizeof(a))
#define Print2A(a,row,col) for(int icnt=1;icnt<=row;icnt++){for(int jcnt=1;jcnt<=col;jcnt++) cout<<a[icnt][jcnt]<<" ";cout<<endl;}
#define PrintA(a,col) for(int jcnt=1;jcnt<=col;jcnt++)  cout<<a[jcnt]<<" "; cout<<endl
#define ScanA(a,col) for(int jcnt=1;jcnt<=col;jcnt++)  cin>>a[jcnt]
#define Scan2A(a,row,col) for(int icnt=1;icnt<=row;icnt++) for(int jcnt=1;jcnt<=col;jcnt++) cin>>a[icnt][jcnt]
//data type
typedef  pair<int,int> Pii;
typedef  long long ll;
struct node{

	int col;
	char dt;
	node *left,*right,*par;
};

    vector<char> v;
    int n;
    
void print(node *root){
	if(root==NULL)
		return;
	cout<<root->dt<<root->col<<" ";
	print(root->left);
	print(root->right);
}

void dfs(node * root,int co){
	if(!root || root->dt=='0')
		return;
	root->col=co;
	if(n==co){
		v.Pb(root->dt);

	}
	dfs(root->left,co-1);
	dfs(root->right,co+1);
}
int main()
{
    ios_base::sync_with_stdio(false);cin.tie(0);
//	FileInOut;
	string s;
    int test=1,i,j,tt,l;
    node *temp,*root,*r;
    
    cin>>test;

    For(tt,1,test){
		cin>>n;
		cin>>s;
		l=s.length();
		l--;
			temp= new node;
			temp->dt=s[0];
			temp->col=0;
			temp->left=NULL;
			temp->par=NULL;
			temp->right=NULL;
			root=r=temp;
		For(i,1,l){
			if(isalpha(s[i])){
				if(s[i-1]==')' ||s[i-1]=='.')
				{
					r=r->par;
					r=r->right;					
				}	
				r->dt=s[i];
				
			}
			if(s[i]==')'){
				r=r->par;
			}
				
			if(s[i]=='('){
				
					temp= new node;
					temp->left=NULL;
					temp->right=NULL;
					temp->dt='0';
					temp->par=r;
					r->left=temp;
					temp= new node;
					temp->left=NULL;
					temp->dt='0';
					temp->right=NULL;
					temp->par=r;
					r->right=temp;
					
					r=r->left;
			}
		}
		dfs(root,0);
		//print(root);
		
		l=v.size();
		if(l){
			SortV(v);
			For(i,0,l-1)
				cout<<v[i];
		}
		else
			cout<<"Common Gandhijee!";
	
        cout<<endl;
    	v.clear();
	}
    //end of test

    return 0;
}

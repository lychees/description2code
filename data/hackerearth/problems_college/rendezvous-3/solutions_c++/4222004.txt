#include <bits/stdc++.h>
using namespace std;
 
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define pii pair<int,int>
#define piii pair<int,pii>
#define pll pair<ll,ll>
#define psi pair<string,int>
#define rep(i,n) for(i=0;i<n;i++)
#define repd(i,n) for(i=n;i>=0;i--)
#define vi vector<int>
#define vvi vector<vector<int> >
#define vvlli vector<vector<long long int> >
#define ll long long int
#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define sd3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define PI 3.14159265
#define mod 1000000007
#define N 100001
 

ll gcd(ll a,ll b)
{
    if(b==0)
      return a;
    return gcd(b,a%b);
}
 
ll power(ll a,ll n)
{
    if(n==0)
      return 1;
    ll x=power(a,n/2);
    x=(x*x)%mod;
    if(n%2!=0)
    {
      x=x*a;
      x=x%mod;
    }
    return x;
}


//bool isprime[50000001];

// void sieve()
// {
//     ll i,j;
//     memset(isprime,1,sizeof(isprime));
//     for(i=2;i<50000001;i++)
//     {
//         if(isprime[i]==1)
//         {
//             for(j=i*i;j<50000001;j=j+i)
//                 isprime[j]=0;
//             prime.pb(i);
//         }
//     }
// }



struct Edge
{
    ll src, dest, weight;
};
 
struct Graph
{
    int V, E;
    struct Edge* edge;
};
 
struct Graph* createGraph(int V, int E)
{
    struct Graph* graph = (struct Graph*) malloc( sizeof(struct Graph) );
    graph->V = V;
    graph->E = E;
 
    graph->edge = (struct Edge*) malloc( graph->E * sizeof( struct Edge ) );
 
    return graph;
}
 
struct subset
{
    int parent;
    int rank;
};
 
int find(struct subset subsets[], int i)
{
    
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
 
    return subsets[i].parent;
}
 

void Union(struct subset subsets[], int x, int y)
{
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
 
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
 
    else
    {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

int myComp(const void* a, const void* b)
{
    struct Edge* a1 = (struct Edge*)a;
    struct Edge* b1 = (struct Edge*)b;
    return a1->weight > b1->weight;
}
 
ll KruskalMST(struct Graph* graph)
{
    int V = graph->V;
    struct Edge result[V];  
    int e = 0;  
    int i = 0;  
 
    
    qsort(graph->edge, graph->E, sizeof(graph->edge[0]), myComp);
 
   
    struct subset *subsets =
        (struct subset*) malloc( V * sizeof(struct subset) );
 
    
    for (int v = 0; v < V; ++v)
    {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
 
    
    while (e < V - 1)
    {
        
        struct Edge next_edge = graph->edge[i++];
 
        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);
 
        
        if (x != y)
        {
            result[e++] = next_edge;
            Union(subsets, x, y);
        }
       
    }
    ll k=0;
    for (i = 0; i < e; ++i)
        k+=result[i].weight;
    return k;
}
 

   
int main()
{
    ll i,j,k,t,l,r,q,query,n,m;
   
   cin>>n>>m;
   struct Graph* graph = createGraph(n, 2*m);
   for(i=0;i<2*m;i+=2)
   {
        cin>>j>>k>>l;
        j--,k--;
        graph->edge[i].src = j;
        graph->edge[i].dest = k;
        graph->edge[i].weight = l;
        graph->edge[i+1].src = k;
        graph->edge[i+1].dest = j;
        graph->edge[i+1].weight = l;
   }
   
    cout<<KruskalMST(graph)<<endl;

    
    return 0;

}
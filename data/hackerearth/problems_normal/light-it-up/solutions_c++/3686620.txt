#include<bits/stdc++.h>
using namespace std;
#define set0(a) memset(a,0,sizeof(a));
#define setminus1(a) memset(a,-1,sizeof(a));
#define setinf(a) memset(a,MEMSET_INF,sizeof(a));
 
//stl
#define mp make_pair
#define pb push_back
//#define pc(x) putchar_unlocked(x)
//#define gc() getchar_unlocked()
 
//Loops
#define REP(i,n) for(int i = 0;i < (int)(n); i++)
#define REP1(i,a,b) for(int i = (int)(a);i <= (int)(b); i++)
#define REPMAP(i,mm) for(auto i = mm.begin();i !=mm.end(); i++)
 
//Sort
#define sortvec(vec) sort(vec.begin(), sort.end())
 
//Misc
#define LSOne(i) (i & (-i)) // the first Least Significant One-bit in i
 
//modulo
#define mod %
#define NUM 1000000007
 
 
#define LMAX LONG_LONG_MAX
#define LMIN LONG_LONG_MIN
#define IMAX INT_MAX
#define IMIN INT_MIN
#define PI M_PI
#define EPS 1e-9
#define INF 1e9
const int NN = 100500;
const int MAGIC = 201;
//typedef
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
typedef map<int, int> mii;
const int N = 1051;
int get_area(int x1, int y1, int x2, int y2, int x3, int y3)
{
    return (x2 - x1)*(y3 - y1) - (x3 - x1)*(y2 - y1);
}
int l[N],r[N],h[N];
int temp1[N],temp2[N];
int flag1[N],flag2[N];
int main()
{
	int t,n;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&n);
		for(int i=0;i<n;i++)
		{
			scanf("%d%d%d",&l[i],&r[i],&h[i]);
		}
		for (int i = 0; i < n; i++)
    	{
    		for (int j = i + 1; j < n; j++)
    		{
    			if (l[i]>l[j])
    			{
    				swap(l[i], l[j]);
    				swap(r[i], r[j]);
    				swap(h[i], h[j]);
    			}
    		}
   		}
   		memset(temp1,0,sizeof(temp1));
   		memset(temp2,0,sizeof(temp2));
   		memset(flag1,0,sizeof(flag1));
   		memset(flag2,0,sizeof(flag2));
   		for (int i = 1; i < n; i++)
    	{
    		int ptr = i - 1;
    		for (int j = i - 2; j >= 0; --j)
    		{
    			int area = get_area(r[j], h[j], r[ptr], h[ptr], l[i], 0);
    			if (area >= 0)
    				ptr = j;
    		}
   			if (ptr != i - 1)
   			{
    			flag1[i] = 1;
    			temp2[ptr] = 1;
    		}
    	}
    	for (int i = 0; i + 1 < n; i++)
    		{
    			int ptr = i + 1;
    			for (int j = i + 2; j < n; j++)
    			{
    				if (get_area(l[j], h[j], l[ptr], h[ptr], r[i], 0) <= 0)
    					ptr = j;
    			}
    			if (ptr != i + 1)
    			{
    				flag2[i] = 1;
    				temp1[ptr] = 1;
    			}
    		}
    	for (int i = 0; i+1 < n; i++)
    		{
    			if (flag2[i] && flag1[i + 1])
    				continue;
    			if (temp2[i] == 0 && temp1[i + 1] == 0)
    			{
    				temp2[i] = 1;
    			}
    		}
    		int ans = 2;
    		for (int i = 0; i < n; i++)
    		{
    			ans += temp1[i] + temp2[i];
    		}
    		printf("%d\n",ans);

	}
	return 0;
}
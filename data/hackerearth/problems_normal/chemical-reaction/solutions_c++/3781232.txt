#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
const int maxn = 5e5 + 10;

ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}

int lcm(int a,int b)
{
	int val=__gcd(a,b);
	return((a*b)/val);
}

int tree [4*maxn];

void build( int node, int a, int b )
{
	if( a==b )
	{
		tree[node] = 1;
		return;
	}
	int mid = (a+b)/2;
	build( node*2, a, mid);
	build( node*2+1, mid+1, b);
	tree[node] = tree[node*2] + tree[node*2+1];
}

int query( int node, int a, int b, int pos )
{
	if( a==b )
	{
		tree[node] = 0;
		return a;
	}
	tree[node] -= 1;
	int mid = (a+b)/2;
	int idx = 2*node;
	if ( pos <= tree[idx] )
	{
		return query( node*2, a, mid, pos);
	}
	else
		return query( node*2+1, mid+1, b, pos - tree[idx]);
}
int main()
{
	ios::sync_with_stdio(false);
	vector<string> v(maxn);
	vi rtime(maxn);
	vi olist(maxn - 1);
	int i, t, n, val;
	string reactant;
	cin >> t;
	while( t-- )
	{
		cin >> n;
		build( 1, 1, n);
		for( i=0;i<n;i++ )
			cin >> v[i];
		for( i=0;i<n;i++ )
			cin >> rtime[i];
		for( i=0;i< (n-1) ;i++ )
		{
			cin >> olist[i];
		}
		olist[n-1] = 1;
		int mrtime = 0;
		for( i=0;i<n;i++ )
		{
			val = query( 1, 1, n, olist[i]);
			mrtime = max( mrtime, rtime[val - 1 ]);
			reactant = v[ val - 1 ];
			cout << reactant << " " << mrtime << "\n";
		}
	}
	return 0;
}
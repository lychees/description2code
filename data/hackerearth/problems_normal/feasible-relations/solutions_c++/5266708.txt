#include<bits/stdc++.h>
using namespace std;

#define MAX 1000002
vector<int>v[MAX];
//string s1;
int parent[MAX];

void dfs_util(int);
void dfs(int,bool[],int);
int m=0;
//void check(int);

//int s=0;

int main()
{
  int t,n,k,x,y;
  string s1;
  cin>>t;
  while(t--)
  {
    vector<pair<int,int> >p;
    cin>>n>>k;

    for(int i=1;i<=k;i++)
    {
    //  cout<<"Hi"<<endl;
      cin>>x;
      cin>>s1;
      cin>>y;
      if(s1.compare("=")==0)
      {
        v[x].push_back(y);
        v[y].push_back(x);
      }
      else
      {
        p.push_back(make_pair(x,y));
      }
    }

    //for(int i=1;i<=n;i++)
    dfs_util(n);
    for(int i=0;i<p.size();i++)
    {
      int u=p[i].first;
      int v=p[i].second;
      if(parent[u]==parent[v])
      {
        m=1;
        break;
      }
    }
    if(m!=1)
    cout<<"YES"<<endl;
    else
    cout<<"NO"<<endl;
    for(auto& k : v)
    k.clear();
    memset(parent,0,sizeof(parent));
    m=0;
    //p.clear();
  }
  return 0;
}

void dfs_util(int n)
{
  bool visited[n+2];
  memset(visited,false,sizeof(visited));
  for(int i=1;i<=n;i++)
  {
    if(!visited[i])
    dfs(i,visited,i);
  }

}

void dfs(int u,bool visited[],int d)
{
  visited[u]=true;
  vector<int>::iterator it;
  for(it=v[u].begin();it!=v[u].end();it++)
  {
    if(!visited[*it])
    dfs(*it,visited,d);
  }
  parent[u]=d;

}

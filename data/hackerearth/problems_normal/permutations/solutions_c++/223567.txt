#include <iostream>
#include <stdio.h>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <string>
#include <iomanip>
#include <numeric>
#include <functional>
#include <string.h>
#include <new>
#include <utility>
#include <cassert>
#include <limits.h>
# define MAX 101
using namespace std;
vector<int>TMP_IP;
char Adj[MAX][MAX];
vector<vector<int> >ADJ_vector(MAX);
int MARKED[MAX];
vector<int>connected_C;
vector<int>Positions_v;

void DFS(int u){
 MARKED[u]=1;
connected_C.push_back(u);
for(int j=0;j<ADJ_vector[u].size();++j)
if(!MARKED[ADJ_vector[u][j]] )
  DFS(ADJ_vector[u][j]);
}
int main(){
  int K,temp;
  string num[101];
  scanf("%d",&K);
  for(int i=0;i<K;++i){
    scanf("%d",&temp);
    TMP_IP.push_back(temp); }

for(int i=0;i<K;++i) cin>>num[i];

for(int i=0;i<K;++i)
for(int j=0;j<num[i].size();++j) Adj[i][j]=num[i][j];

 for(int i=0;i<K;++i)
 for(int j=0;j<K;++j)
   if(Adj[i][j]=='Y') ADJ_vector[i].push_back(j);  

    for( int i = 0 ; i <K ; ++i )
       if(!MARKED[ i ] ){ DFS(i); 
             for(int x=0;x<connected_C.size();++x)Positions_v.push_back(TMP_IP[connected_C[x]]); 
                         
           sort(connected_C.begin(),connected_C.end());
           sort(Positions_v.begin(),Positions_v.end());
            for(int x=0;x<connected_C.size();++x) TMP_IP[connected_C[x]]=Positions_v[x];
                connected_C.clear();
                Positions_v.clear();
                }

  for(int i=0;i<K;++i)
      cout<<TMP_IP[i]<<" ";
    cout<<endl;
    
return 0;
}
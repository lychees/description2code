#include<iostream>
#include<cmath>
using namespace std;
const long long MOD = 1000000007;
long long mul(long long x, long long y)
{
	if (y == 0) return 0;
	if (y % 2 == 0)
	{
		long long tmp = mul(x, y / 2);
		return (tmp + tmp) % MOD;
	}
	else
	{
		long long tmp = mul(x, y - 1);
		return (tmp + x) % MOD;
	}
}
long long sub(long long n, long long m)
{
	n -= m;
	while (n < 0) n += MOD;
	return n;
}
long long all(long long n, long long m)
{
	long long s = mul(n, m);
	return mul(s, s - 1);
}
long long squaresum(long long n)
{
	int six = 6;
	long long x = n, y = n + 1, z = (2 * n + 1);
	if (x % 2 == 0 && six % 2 == 0)
	{
		x /= 2;
		six /= 2;
	}
	if (y % 2 == 0 && six % 2 == 0)
	{
		y /= 2;
		six /= 2;
	}
	if (z % 2 == 0 && six % 2 == 0)
	{
		z /= 2;
		six /= 2;
	}
	if (x % 3 == 0 && six % 3 == 0)
	{
		x /= 3;
		six /= 3;
	}
	if (y % 3 == 0 && six % 3 == 0)
	{
		y /= 3;
		six /= 3;
	}
	if (z % 3 == 0 && six % 3 == 0)
	{
		z /= 3;
		six /= 3;
	}
	return mul(mul(x, y), z);
}
long long sum(long long n)
{
	long long x = n, y = n + 1;
	if (x % 2 == 0)
	{
		x /= 2;
	}
	else
	{
		y /= 2;
	}
	return mul(x, y);
}
long long havedigs(long long n, long long m)
{
	if (n < m) swap(n, m);
	m--;
	long long triangle = sub(squaresum(m), sum(m));
	m++;
	long long square = mul(mul(m, n - m + 1), m - 1);
	return (2 * (2 * triangle + square)) % MOD;
}
long long calcpqpos(long long n, long long m, long long p, long long q)
{
	if (p>n || q > m) return 0;
	long long one = mul(n - p, m - q);
	return mul(one, 4);
}
int main()
{
	long long n, m, p, q;
	cin >> n >> m >> p >> q;	
	long long ans = all(n, m);	
	ans = sub(ans, havedigs(n, m));	
	ans = sub(ans, calcpqpos(n, m, p, q));
	ans = sub(ans, calcpqpos(n, m, q, p));
	cout << ans << endl;
	return 0;
}
#include<bits/stdc++.h>
#define assn(n,a,b) assert(n<=b and n>=a)
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define SET(a,b) memset(a,b,sizeof(a))
#define LET(x,a) __typeof(a) x(a)
#define TR(v,it) for( LET(it,v.begin()) ; it != v.end() ; it++)
#define repi(i,n) for(int i=0; i<(int)n;i++)
#define sd(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define sortv(a) sort(a.begin(),a.end())
#define all(a) a.begin(),a.end()
#define DRT()  int t; cin>>t; while(t--)
using namespace std;
//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
       cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
       const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
typedef long long LL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector< PII > VPII;
#define MOD 1000000007ll
LL mpow(LL a, LL n) 
{LL ret=1;LL b=a;while(n) {if(n&1) 
ret=(ret*b)%MOD;b=(b*b)%MOD;n>>=1;}
return (LL)ret;}
struct node{
    int maxweight;
    node * next[26];
    node(){
        maxweight=0;
        for(int i=0; i<26; i++)
            next[i]=NULL;
    }
};
node * insert(node * root, string & s, int ind, int weight){
    if(ind==s.length()){
        return NULL;
    }
    root->maxweight=weight;
    node * & cur=root->next[s[ind]-'a'];
    if(cur==NULL)
        cur=new node();
    cur=insert(cur, s, ind+1, weight);
    return root;
}
int query(node * root, string & q, int i){
    if(i==q.length())return root->maxweight;
    if(root->next[q[i]-'a']==NULL)
        return -1;
    return query(root->next[q[i]-'a'], q, i+1);
}
int main()
{
    int n,q;
    sd(n),sd(q);
    vector< pair< int, string > > ar(n);
    for(int i=0; i<n; i++)
        cin >> ar[i].S >> ar[i].F;
    sort(all(ar));
    node * root=new node();
    for(int i=0; i<n; i++)
        root=insert(root, ar[i].S, 0, ar[i].F);
    while(q--){
        string s;
        cin >> s;
        cout << query(root, s, 0) << endl;
    }
    return 0;
}

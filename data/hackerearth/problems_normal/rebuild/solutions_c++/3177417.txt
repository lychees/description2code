#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>
#include <fstream>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME "a"

struct DSU {
	vi par;

	DSU(int n) {
		par.assign(n, -1);
	}

	int get_set(int x) {
		return (par[x] < 0) ? x : par[x] = get_set(par[x]);
	}

	bool union_set(int x, int y) {
		x = get_set(x);
		y = get_set(y);
		if  (x == y) {
			return false;
		}
		if  (-par[x] > -par[y]) {
			swap(x, y);
		}
		par[y] += par[x];
		par[x] = y;
		return true;
	}
};

struct Edge {
	int a, b, c;

	bool read() {
		if  (scanf("%d%d%d", &a, &b, &c) < 3) {
			return false;
		}
		--a;
		--b;
		if  (a > b) {
			swap(a, b);
		}
		return true;
	}

	bool operator < (const Edge& e) const {
		if  (e.c != c) {
			return c < e.c;
		}
		if  (e.a != a) {
			return a > e.a;
		}
		return b > e.b;
	} 
};

int n, m;
vector<Edge> es;

bool read() {
	if  (scanf("%d%d", &n, &m) < 2) {
		return false;
	}
	es.resize(m);
	forn(i, m) {
		assert(es[i].read());
	}
	return true;
}

void solve() {
	sort(all(es));
	DSU dsu(n);
	vi deg(n, 0);
	ll cost = 0;
	for (const auto& e : es) {
		if  (dsu.union_set(e.a, e.b)) {
			cost += e.c;
			++deg[e.a];
			++deg[e.b];
		}
	}
	cout << cost << '\n';
	forn(i, n) {
		printf("%d ", deg[i]);
	}
	puts("");
}

int main() {
#ifdef DEBUG
	freopen(FILE_NAME ".in", "r", stdin);
	// freopen(FILE_NAME ".out", "w", stdout);
#endif
	
	int T;
	scanf("%d", &T);
	while (read()) {
		solve();
	}

	return 0;
}

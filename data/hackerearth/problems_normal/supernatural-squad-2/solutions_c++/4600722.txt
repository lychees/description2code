#include <iostream>
#include <vector>
using namespace std;

long long dp(vector<vector<long long>>& cache, long long n, long long k){
	long long ans  = 1;
	if(cache[k][n] != -1){
		return cache[k][n];
	}
	if(k > n){
		ans = 0;
	}
	else if(2*k > n){
		ans = 1;
	}
	else{
		long long st = k;
		long long end = n-k;
		while(st <= end){
			ans += dp(cache,end,st);
			st++;
			end--;
		}
	}
	cache[k][n] = ans;
	return ans;
}

int main()
{
	int T = 0;
	int N = 0;
	int K = 0;
	cin >> T;
	while(T--){
		cin >> N >> K;
		int maxn = max(N,K);
		vector<vector<long long>> cache(maxn+1, vector<long long>(maxn+1, -1));
		cout << dp(cache,N,K) << endl;
	}
    return 0;
}

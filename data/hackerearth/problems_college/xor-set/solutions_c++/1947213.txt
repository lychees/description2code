#include <iostream>
#include<cstdio>
#include<algorithm>
#include<bits/stdc++.h>
#define u uint64_t
#define l int64_t
#define ll long long
#define fors(i,n) for(int i=0;i<(n);i++)
using namespace std;

uint64_t MOD = 1e9 + 7;
uint64_t a[1<<16];
uint64_t INV2;

u modpow(uint64_t a, uint64_t b) {
    if(b == 0) return 1;
    if(b == 1) return a;
    if(b&1LL) return (a * modpow(a,b-1)) % MOD;
    long long k = modpow(a,b/2);
    return (k*k)%MOD;
}

void transform(int x, int y) {
    if(x == y - 1) {
        return;
    }
    int l2 = (y-x)/2;
    int z = x + l2;
    transform(x,z);
    transform(z,y);
    for(int i = x;i<z;i++) {
        int x1 = a[i];
        int x2 = a[i+l2];
        a[i] = (x1 - x2 + MOD) % MOD;
        a[i+l2] = (x1 + x2) % MOD;
    }
}

void untransform(int x, int y) {
    if(x == y - 1) {
        return;
    }
    int l2 = (y-x)/2;
    int z = x + l2;
    for(int i = x;i<z;i++) {
        u y1 = a[i];
        u y2 = a[i+l2];
        a[i] = (int) (((y1 + y2) * INV2) % MOD);
        a[i+l2] = (int) (((y2 - y1 + MOD) * INV2) % MOD);
    }
    untransform(x,z);
    untransform(z,y);
}

int n, v, t;

int arr[100005];

int main() {
    INV2 = modpow(2, MOD - 2L);
    t = 1<<16;

    scanf("%d", &n);

    for(int i = 1;i<=n;i++) {
        scanf("%d", &arr[i]);
        arr[i] ^= arr[i-1];
        ++a[ arr[i] ];
    }

    transform(0,t);

    for(int i = 0;i<t;i++) {
        a[i] = (a[i] * a[i]) % MOD;
    }

    untransform(0,t);

    a[0] -= (u) n;

    for(int i = 0;i<t;i++) {
        a[i] /= 2L;
    }

    for(int i = 1;i<=n;i++) {
        ++a[ arr[i] ];
    }

    int sol = 0;
    u maxx = 0;

    for(int i = 0;i<t;i++) {
        if(a[i] > maxx) {
            maxx = a[i];
            sol = i;
        }
    }

    printf("%d %lld\n", sol, maxx);

    return 0;
}
#include<bits/stdc++.h>
using namespace std;

vector<long long> bestCap;
vector<pair<long long, long long> >liquidPair;
const int N = 100;
int n1, n2;
long long a1[N], a2[N];
long long m;

int main()
{
    int test;
    cin >> test;
    while(test--){
    	cin>>m>>n1>>n2;
    	for(int i = 0; i < n1; ++i){
    		cin>>a1[i];
    	}
    	for(int i =0 ; i<n2; ++i){
    		cin>>a2[i];
    	}
    	liquidPair.clear();
    	for(int i=0; i<n1; ++i){
    		liquidPair.push_back(make_pair(a1[i], i));
    	}
    	sort(liquidPair.begin(), liquidPair.end());
    	long long best_sum = 2e18;
    	for(int mask = 0; mask < (1 << n2); ++mask)
    	{
    		long long localSum = 0;
    		/*making permutatiuon of water bottle liquid capcity */
    		for(int i = 0; i < n2 ; i++){
    			if(mask & (1<<i))
    				localSum += a2[i];
    		}
    		long long cap_needed = m - localSum;
    		vector<long long> taken;
    		for(int i = (int)liquidPair.size() - 1; i >= 0; --i){
    			if(liquidPair[i].first <= cap_needed){
    				taken.push_back(liquidPair[i].second);
    				cap_needed -= liquidPair[i].first;
    			}
    		}
    		if(cap_needed != 0)
    			continue;
    		if(localSum < best_sum){
    			best_sum = localSum;
    			bestCap = taken;
    		}
    	}
    	if(best_sum > m){
    		cout<<"NO"<<endl;
    	}else{
    		cout<<"YES"<<endl;
    		reverse(bestCap.begin(), bestCap.end());
    		for(int i = 0; i < bestCap.size(); i++){
    			int id = bestCap[i];
    			if(i)
    				cout<<" ";
    			cout<<a1[id];
    	    }
    	    cout<<endl;
    	}
    }
    return 0;
}

#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
bool inSet ( const string &s, const vs&ss ) {

    for ( const string &t:ss ) if ( s==t ) return 1;
    return 0;
}
bool findSplits ( const string &s,int cnt, int i, vs &sofar ) {
  int n=s.size();
    if ( i==n ) return 0;
    
    if ( cnt==1 ) {
        return !inSet ( s.substr ( i,n-i ),sofar );
    }
    reu ( j,i+1,n ) {
        string cand=s.substr ( i,j-i );

        if ( inSet ( cand,sofar ) ) continue;
        sofar.push_back ( cand );
        bool r=findSplits ( s,cnt-1,j,sofar );

        sofar.pop_back();
        if ( r ) return 1;
    }

    return 0;
}
int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        string s;
        cin>>s;
        if ( s.size() >=10 ) {
            cout<<"YES\n";
            continue;

        }
        vs ss;
        bool r=findSplits ( s,4,0,ss );
        cout<< ( r?"YES\n":"NO\n" );

    }
}

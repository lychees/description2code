#include <bits/stdc++.h>
using namespace std;

const int mx = 200005;
int v[mx], n, k;
int dist[mx];

int tree[mx];

int read(int idx){
	++idx;
    int sum = mx;
    while (idx > 0){
        sum = min(sum, tree[idx]);
        idx -= (idx & -idx);
    }
    return sum;
}

void update(int idx ,int val){
	++idx;
    while (idx < mx){
        tree[idx] = min(tree[idx], val);
        idx += (idx & -idx);
    }
}


int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		scanf("%d %d", &n, &k);
		for(int i = 0; i < n; ++i) {
			scanf("%d", v + i);
			dist[i] = mx;
		}
		
		for(int i = 0; i < mx; ++i) tree[i] = mx;
		for(int i = k; i < n; ++i) {
			update(v[i - k], -1 * (i - k));
			int prev = read(v[i] - 1);;
			if(prev != mx) dist[i] = min(dist[i], abs(i + prev));
			//cerr << i << " " << v[i] << " " << prev << endl;
		}
		
		for(int i = 0; i < mx; ++i) tree[i] = mx;
		for(int i = n - 1 - k; i >= 0; --i) {
			update(v[i + k], (i + k));
			int nxt = read(v[i] - 1);
			if(nxt != mx) dist[i] = min(dist[i], abs(i - nxt));
			//cerr << i << " " << v[i] << " " << nxt << endl;
		}
		
		
		long long ans = 0;
		for(int i = 0; i < n; ++i) {
			//cerr << i << " " << dist[i] << endl;
			if(dist[i] != mx) ans += dist[i];
		}
		printf("%lld\n", ans);
		
	}
    return 0;
}

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <iostream>
#include <complex>
#include <unordered_set>
#include <unordered_map>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;
#define all(c) (c).begin(), (c).end()
#define sz(a) int((a).size())
#define pb push_back
#define mp make_pair
#define traverse(c,it, cond) for(it = c.begin(); it != c.end() && cond; it++)
#define ll long long
#define INF 0x7FFFFFFF
#define EPS 0.000001

long double p[1003],bestp[1003];
int dist[1003],l;
bool computed[1003];

long double compute(int k)
{
	if(computed[k])
		return bestp[k];
	else
	{
		int i;
		for(i=k-1;i>=0 && dist[i] - dist[k] <= l;i--)
		{
			if(compute(i)*p[i] > bestp[k])
			{
				bestp[k] = compute(i)*p[i];
			}
		}
		computed[k]=true;
		return bestp[k];
	}
}

int main()
{
	int n,d,i;
	scanf("%d%d%d",&n,&l,&d);
	p[0]=1.0L;
	for(i=1;i<=n;i++)
		scanf("%Lf",&p[i]);
	dist[0]=d;
	dist[n+1]=0;
	for(i=1;i<=n;i++)
	{
		scanf("%d",&dist[i]);
		dist[i] = d - dist[i];
	}
	computed[0]=true;
	bestp[0]=1.0L;
	for(i=1;i<=n+1;i++)
		computed[i]=false;
	long double res = compute(n+1);
	if(res < EPS)
		printf("IMPOSSIBLE\n");
	else
		printf("%.6Lf\n",compute(n+1));
	return 0;
}

#include<bits/stdc++.h>

using namespace std;

// The codes which I use are taken from the book Competitive Programming 3 written by Steven Halim
// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define MOD 1000000009
#define INF 2000000000 // 2 billion
#define EPS 1e-9

int rea[100009] , cnt[100009] ;

vi build()
{
    vi ans( 100000 / 32 + 3 );
    REP( i , 0 , 100000 )
    {
        if( cnt[i] )
            ans[i / 32] |= ( 1 << ( i % 32 ) ) ;
    }
    return ans;
}

void shift()
{
    REP( i , 0 , 100000 )
        cnt[i] = cnt[i + 1];
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int n ; s(n) ;
    REP( i , 0 , n - 1 )
    {
        int p;
        s(p);
        cnt[p]++;
        if( cnt[p] > 1 )
            rea[0] = 1;
    }
    vi v1 = build();
    REP( i , 1 , 32 )
    {
        shift();
        vi v2 = build();
        for( int j = i ; j <= 100000 ; j += 32 )
        {
            for( int i = 0 ; i + j / 32 < v2.size() ; i++ )
            {
                if( v1[i] & v2[i + ( j - 1 ) / 32] )
                    rea[j] = 1;
            }
        }
    }
    int ans = 0 ;
    REP( i , 0 , 100000 )
        if( rea[i] )
            ans++;
    printf("%d\n",ans);
    return 0;
}

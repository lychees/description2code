#include <bits/stdc++.h>

using namespace std;

long long n , m, t;
long long dp [20 + 1][20 + 1];
bool vis [20 + 1][20 + 1];

long long rec(long long boxes , long long bombs){

    if(boxes == 0 || bombs == 0){                   // base case

        if(boxes == 0 && bombs == 0) return 1;      // valid case
        return 0;                                   // invalid case
    }

    long long &st = dp[boxes][bombs];
    if(st != -1) return st;                         // check if this state visited or not before

    long long ans = rec(boxes - 1, bombs - 1) + (boxes - 1) * rec(boxes - 1, bombs);        // transitions

    return st = ans;
}

int main()
{

    cin >> t;

    while(t--){

        cin >> n >> m;
        memset(dp , -1 , sizeof dp);

        long long numerator = 0, denominator = 0;

        for(int i = 1; i <= n; i++){

            long long val = rec(n , i);
            denominator += val;                         // increase the number of possible anwers using (i) bombs

            if(i <= m) numerator += val;                // only increase the answer if the number of bombs used <= given number of bombs
        }

        long long gcd = __gcd(numerator , denominator);             // find gcd of the numerator, denominator

        numerator /= gcd;                                           // simplify the fraction
        denominator /= gcd;

        cout << numerator << "/" << denominator << "\n";
    }

    return 0;
}
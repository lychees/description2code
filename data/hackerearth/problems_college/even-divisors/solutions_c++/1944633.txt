# include<bits/stdc++.h>
using namespace std;
typedef long long ll; // comments that are mixed with code
typedef pair<int, int> ii; // are aligned to the right like this
typedef vector<ii> vii;
typedef vector<int> vi;
ll _sieve_size; // ll is defined as: typedef long long ll;
bitset<10000010> bs; // 10^7 should be enough for most cases
vi primes; // compact list of primes in form of vector<int>
void sieve(ll upperbound) { // create list of primes in [0..upperbound]
    _sieve_size = upperbound + 1; // add 1 to include upperbound
    bs.set(); // set all bits to 1
    bs[0] = bs[1] = 0; // except index 0 and 1
    for (ll i = 2; i <= _sieve_size; i++) if (bs[i]) {
    // cross out multiples of i starting from i * i!
    for (ll j = i * i; j <= _sieve_size; j += i) bs[j] = 0;
    primes.push_back((int)i); // also add this vector containing list of primes
    }
}
ll numDiv(ll N) {
    ll PF_idx = 0, PF = primes[PF_idx], ans = 1; // start from ans = 1
    while (N != 1 && (PF * PF <= N)) {
    ll power = 0; // count the power
    while (N % PF == 0) { N /= PF; power++; }
    ans *= (power + 1); // according to the formula
    PF = primes[++PF_idx];
    }
    if (N != 1) ans *= 2; // (last factor has pow = 1, we add 1 to it)
    return ans;
}
int main()
{
    int t;
    ll ans,total,N,even;
    scanf("%d",&t);
    sieve(100000);
    while(t--)
    {
        scanf("%lld",&N);
        total=numDiv(N);
        ll  PF = 2;
        ans = 1; // start from ans = 1
        ll power = 0; // count the power
        while (N % PF == 0) { N /= PF; power++; }
        ans *= (power + 1); // according to the formula
        ans=total/ans;
        ans=total-ans;
        printf("%lld\n",ans);
    }
}
#include<bits/stdc++.h>
#define pb push_back
#define inf 99999999
#define mp make_pair
#define Vector vector<int>
#define Vov vector<vector<int> >
#define ll long long
#define fs first
#define sd second
#define pf(n) printf("%d\n",n)
#define FILL(a,val) memset(a,val,sizeof(val))
#define Min(a,b) (a < b) ? a:b
#define Max(a,b) (a > b) ? a:b
#define sn(n) scanf("%d",&n)
#define ss(s) scanf("%s",s)
#define Swap(a,b) (a = b+a-(b=a))
#define FOR(i,a,b) for(i=a;i<b;i++)
#define FORE(i,a,b) for(i=a;i <= b;i++)
#define ITER(i,a) for( typeof(a.begin()) i=a.begin();i!=a.end();i++)
using namespace std;
int gcd(int a,int b){
	return (!b) ? a:gcd(b,a%b);
}
int cmp(const void *a, const void *b) {
	return (*(int*)a-*(int*)b);
}
// qsort(a,n,sizeof(int),cmp);
vector<vector<int> >graph(10000);
void inp_graph(){
	int n,m,src,des,i;
	sn(n);sn(m);
	FOR(i,0,m){
		sn(src);sn(des);
		graph[src].pb(des);
	}
}
bool prime[2000001];
long long arr[2000001];
void sieve(int n){
   memset(prime,true,sizeof(prime));
   prime[0]=false;
   prime[1]=false;
   int m = sqrt(n);
   for (int i=2; i<=m; i++)
      if (prime[i])
         for (int k=i*i; k<=n; k+=i)
            prime[k]=false;

  // return prime;
} 

bool isPrime (long long n)
{
   if (n<=1) return false;
   if (n==2) return true;
   if (n%2==0) return false;
   

   for (ll i=3; i * i<=n; i+=2)
      if (n%i==0)
         return false;

   return true;
}

int main(){
	int t;
	sn(t);
	sieve(1000001);
	arr[0] = 0;
	for(int i = 1; i < 2000001; i++) {
		if(prime[i]) {
			arr[i] = arr[i - 1] + (long long)i;
		}
		else {
			arr[i] = arr[i - 1];
		}
	}
	while(t--){
		int  M,N;
		sn(M);sn(N);
		long long sm = arr[N] - arr[M-1];
		
		if(isPrime(sm)){
			cout << "YES"<< endl;
		}
		else{
			cout << "NO" << endl;
		}
		
	}
	return 0;
}

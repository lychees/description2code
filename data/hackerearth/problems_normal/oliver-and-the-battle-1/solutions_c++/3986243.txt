#include <iostream>

#define MAX 1005

using namespace std;

bool graph[MAX][MAX];
bool visited[MAX][MAX];

int dx[] = {0, 1, 1, 1, 0, -1, -1, -1};
int dy[] = {1, 1, 0, -1, -1, -1, 0, 1};

int solve(int x, int y, int n, int m)
{
    visited[x][y] = true;
    int total = 1;

    for(int k = 0; k < 8; k++)
    {
        int nx = x + dx[k];
        int ny = y + dy[k];
        if(nx >= 0 && nx < n && ny >= 0 && ny < m && graph[nx][ny] && !visited[nx][ny])
            total += solve(nx, ny, n, m);
    }
    return total;
}


void solve(int n, int m)
{
    int troops = 0, max = 0;

    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            if(graph[i][j] && !visited[i][j])
            {
                troops++;
                int ret = solve(i, j, n, m);
                if(ret > max) max = ret;
            }
        }
    }
    cout << troops << " " << max << "\n";
}


int main()
{
    ios::sync_with_stdio(false);

    int t, n, m;
    cin >> t;
    while(t--)
    {
        cin >> n >> m;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                cin >> graph[i][j];
                visited[i][j] = false;
            }
        }
        solve(n, m);
    }
    return 0;
}

#include<iostream>
#include<vector>
#include<cmath>
#include<cstdio>
typedef long long LL;
using namespace std;

const int LIM = 100010;
vector<int> primes;
int is_prime[LIM];
int euph[LIM];
int dp[LIM];

void gen_primes()
{
    for(int i=0; i<LIM; i++)
    {
        is_prime[i] = 1;
    }

    is_prime[0] = is_prime[1] = 0;

    for(LL i=2; i<LIM; i++)
    {

        if (is_prime[i])
        {
            primes.push_back(i);
            for(LL j=i*i; j<LIM; j+=i)
            {

                is_prime[j] = 0;
            }
        }
    }
}


int phi(int n)
{
    if (is_prime[n]) return n-1;
    int p = n;
    int prime;
    int ph = 1;
    for(int i=0; i<n && p>1; i++)
    {
        prime = primes[i];
        //cout<<i<<" "<<prime<<" "<<p<<endl;
        if (p%prime == 0)
        {
            int power = 0;
            while(p%prime==0)
            {
                power++;
                p/=prime;
            }
            //cout<<prime<<" "<<power<<endl;
            ph *= (pow(prime, power) - pow(prime, power-1));
        }
    }
    return ph;
}

void genph()
{
    euph[1] = 0;
    dp[0] = dp[1] = 0;
for(int i=0; i<LIM; i++)
{
    euph[i] = i;
}

euph[1] = 0;
for(int i=2; i<LIM; i++)
{
    if (is_prime[i])
    for(int j=i; j<LIM; j+=i)
    {
        euph[j] = euph[j] - euph[j]/i;
    }
}
}

void gen_dp()
{
    dp[0] = dp[1] = 0;
    for(int i=2; i<LIM; i++)
    {
        dp[i] = euph[i] + dp[i-1];
    }
}

int main()
{
    gen_primes();
    genph();
    //for(int i=2; i<10; i++) cout<<euph[i]<<" ";
    gen_dp();
    int t;

    scanf("%d", &t);
    int n;
    for(int i=0; i<t; i++)
    {
        scanf("%d", &n);
        printf("%d\n", dp[n]);
    }

}

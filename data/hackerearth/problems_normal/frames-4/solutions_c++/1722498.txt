#include <bits/stdc++.h>
using namespace std;
#define long long long
int rint() {int ret;scanf("%d", &ret);return ret;}
int rlong() {long ret;scanf("%lld", &ret);return ret;}

const int MAX = 2000;
int data[MAX];

int PrefixSum(int r)
{
    int ret = 0;
    for (; r >= 0; r = (r & r + 1) - 1)
        ret += data[r];
    return ret;
}

int Sum(int l, int r)
{
    return PrefixSum(r) - PrefixSum(l - 1);
}

void Update(int idx, int diff)
{
    for (; idx < MAX; idx = (idx | idx + 1))
        data[idx] += diff;
}

int n, m;
char a[MAX][MAX + 1];
int tleft[MAX][MAX], tright[MAX][MAX], tup[MAX][MAX], tdown[MAX][MAX];
int Fun(int r, int c)
{
    int d = min(n - r, m - c);
    vector<vector<int> > lists(d);
    for (int i = 0; i < d; i++)
    {
        int x = min(tup[r + i][c + i], tleft[r + i][c + i]);
        if (x > 0)
            lists[i - x + 1].push_back(i);
    }

    memset(data, 0, sizeof data);
    int ret = 0;
    for (int i = 0; i < d; i++)
    {
        for (int j = 0; j < lists[i].size(); j++)
            Update(lists[i][j], 1);
        int v = min(tright[r + i][c + i], tdown[r + i][c + i]);
        if (v > 0)
            ret += Sum(i, i + v - 1);
    }

    return ret;
}

int main()
{
#if _DEBUG
    freopen("input.txt", "r", stdin);
#endif

	n = rint();
    m = rint();
    for (int i = 0; i < n; i++)
		scanf("%s", a[i]);

	for (int i = 0; i < n; i++)
    {
        int p = -1;
        for (int j = 0; j < m; j++)
        {
            if (a[i][j] == '1')
                p = j;
            tleft[i][j] = j - p;
        }
        p = m;
        for (int j = m - 1; j >= 0; j--)
        {
            if (a[i][j] == '1')
                p = j;
            tright[i][j] = p - j;
        }
    }

    for (int i = 0; i < m; i++)
    {
        int p = -1;
        for (int j = 0; j < n; j++)
        {
            if (a[j][i] == '1')
                p = j;
            tup[j][i] = j - p;
        }
        p = n;
        for (int j = n - 1; j >= 0; j--)
        {
            if (a[j][i] == '1')
                p = j;
            tdown[j][i] = p - j;
        }
    }

    long ans = 0;
    for (int i = 0; i < m; i++)
        ans += Fun(0, i);
    for (int i = 1; i < n; i++)
        ans += Fun(i, 0);
    printf("%lld\n", ans);

    return 0;
}
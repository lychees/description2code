//Type     :Genearal algo
//Code name:Prime factorization
//Status   :Done

/*.........This shows the output in the form of  p-(no of times p occurs in pfsation of n)......................*/

typedef unsigned long long ull;
typedef long long ll;
typedef unsigned long ul;
typedef long double ld;
#include<iostream>
#include<cstdlib> //for qsort
#include<cmath>
#include<vector>
#include<iterator> //for advance,next,prev
#include<cstring>
#include<algorithm>
#include<map>
#include<list>
#include<utility>  //for std::pair
#include<limits> //for numeric_limits
#define loop(i,x,n) for(i=x;i<=n;i++)
#define scani(x) scanf("%d",&x)
#define scanfl(x) scanf("%f",&x)
#define scanc(x) scanf("%c",&x)
#define scand(x) scanf("%lf",&x)
#define scanll(x) scanf("%lli",&x)
#define scanl(x) scanf("%ld",&x)
#define scans(x) scanf("%s",x)
#define printi(x) printf("%d\n",x)
#define printl(x) printf("%ld\n",x)
#define printll(x) printf("%lli\n",x)
#define printd(x) printf("%lf\n",x)
#define printfl(x) printf("%f\n",x)
#define printc(x) printf("%c\n",x)
#define prints(x) printf("%s\n",x);
#define newline cout<<"\n";
#define SIZE 10000009
#define MOD 
#define debug
//#define get_no_of_divisors
using namespace std;
long hash_pf[SIZE];
map<ll,ll> mp;

   void primeFactors(ll n)
   {
    
    bool got1=false,got2=false;
    // 2 will be the divisor untill it divides n
    
    while (n%2==0)
    {
        hash_pf[2]++;
        n = n/2;
        got1=true;
    }
    mp.insert(make_pair(2,hash_pf[2]));
    
    for (long i=3;i*i<=n;i+=2)
    {
        // While i divides n, print i and divide n
        while (n%i == 0)
        {
            hash_pf[i]++;
            n/=i;
            got2=true;
        }
    if(hash_pf[i])  mp.insert(make_pair(i,hash_pf[i]));
    }
  //this condition is used because if n remains >2 then it is surely a prime no >2,which is a factor of itself
    if (n>2&&(got1||got2)) mp.insert(make_pair(n,1));
}
int main()
{
	ll n,t;
	scanll(t);
	while(t--)
	{
	scanll(n);
	primeFactors(n);

	for(auto it=mp.begin();it!=mp.end();it++)     //outputing prime factors
	{
		cout<<it->first<<"^"<<it->second;
	    if(next(it)!=mp.end()) cout<<"*";
	}newline;
	mp.erase(mp.begin(),mp.end());
	memset(hash_pf,0,SIZE);
	}
	
		return 0;
}
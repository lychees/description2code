#include <iostream>
#include <math.h>
#include <algorithm>
using namespace std;

#define ll long long
#define range(n) for(int i=0;i<n;i++)
#define Range(a,n) for(int i=a;i<n;i++)
#define loop(i,n) for(int i=0;i<n;i++)
#define Loop(i,a,b) for(int i=a;i<b;i++)
#define _range(n) for(int i=n-1;i>=0;i--)
#define _Range(a,b) for(int i=b-1;i>=a;i--)
#define _loop(i,n) for(int i=n-1;i>=0;i--)
#define _Loop(i,a,b) for(int i=b-1;i>=a;i--)
#define sd(n) scanf("%d", &n)
#define sl(n) scanf("%lld", &n)
#define pd(n) printf("%d", n)
#define pdn(n) printf("%d\n", n)
#define pl(n) printf("%lld", n)
#define pln(n) printf("%lld\n", n)
#define pn printf("\n")
#define nmin(a,b) if(a<b) b=a
#define nmax(a,b) if(a>b) b=a
#define imax 1e9
#define imin -1e9
#define MOD 1000000007

//fast power %MOD
ll mpow(ll a, ll n) 
{
	ll ret=1;
	ll b=a;
	while(n) 
	{
		if(n&1) ret=(ret*b)%MOD;
		b=(b*b)%MOD;
		n>>=1;
	}
    return (ll)ret;
}
#define MAXN 1000100
ll fac[MAXN],inv[MAXN];

void init()
{
	fac[0]=1;fac[1]=1;
	inv[0]=1;inv[1]=1;
	Range(2,MAXN)
	{
		fac[i]=(i*fac[i-1])%MOD;
		inv[i]=mpow(fac[i], MOD-2);
	}
}

ll choose(ll n, ll m)
{
	if(n<=0 || m<0 || n<m) return 0ll;
	ll res=((fac[n]*inv[m])%MOD*inv[n-m])%MOD;
	return res;
}

int arr[26];

int main()
{
	init();
    int t;
    sd(t);
    while(t--)
    {
    	string s;
        ll i,j,n,a=0,b=0,ar[5]={},arr[26]={},ss=0,sss=0;
        cin >> s;
        n=s.length();
        for(i=0; i<n; i++)
        {
            if(s[i]=='a')ar[0]++;
            else if(s[i]=='e')ar[1]++;
            else if(s[i]=='i')ar[2]++;
            else if(s[i]=='o')ar[3]++;
            else if(s[i]=='u')ar[4]++;
            else{arr[s[i]-'a']++;ss++;}
        }
        sss=ar[0]+ar[1]+ar[2]+ar[3]+ar[4];
        ll p=choose(ss+1,sss);
        if(ss+1<sss)
        {
            cout << -1 << endl;
            continue;
        }
        ll q=fac[sss];
        for(i=0; i<5; i++)
            q=(q*inv[ar[i]])%MOD;
        q=(q*fac[ss])%MOD;
        for(i=0; i<26; i++)
            q=(q*inv[arr[i]])%MOD;
        p=(p*q)%MOD;
        cout <<  p << endl;
    }
    return 0;
}
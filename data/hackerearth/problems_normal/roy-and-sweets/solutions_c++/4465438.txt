#include<bits/stdc++.h>
using namespace std ;
long long dp[1000002] , tree[4000002] ;

void build_tree ( int pos , int l , int r ) {
    if ( l == r ) {
        tree[pos] = dp[l] ;
        return ;
    }
    int mid = (l+r)/2 ;
    build_tree ( 2*pos , l , mid ) ;
    build_tree ( 2*pos+1 , mid+1 , r ) ;
    tree[pos] = max ( tree[2*pos] , tree[2*pos+1] ) ;
}
long long query ( int pos , int l , int r , int x , int y ) {
    if ( x > r || y < l )
        return -1 ;
    if ( l >= x && r <= y )
        return tree[pos] ;
    int mid = (l+r)/2 ;
    return max ( query ( 2*pos , l , mid , x , y ) , query ( 2*pos+1 , mid+1 , r , x , y ) ) ;
}
int main () {
    long long  n , s , q , m , g ;
    long long r = 0 ;
    scanf ( "%d" , &n ) ;
    for ( int i = 0 ; i < n ; i++ ) {
        scanf ( "%lld %lld" , &s , &q ) ;
        dp[s] = q ;
    }
    build_tree ( 1 , 1 , 1000000 ) ;
    scanf ( "%d" , &m ) ;
    for ( int i = 0 ; i < m ; i++ ) {
        scanf ( "%lld" , &g ) ;
        long long  x = query ( 1 , 1 , 1000000 , g , 1000000 ) ;
        r += ((x/g)*100) ;
    }
    printf ( "%lld\n" , r ) ;
    return 0 ;
}

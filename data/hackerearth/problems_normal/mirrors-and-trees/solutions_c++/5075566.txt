#include <iostream>
#include<algorithm>
#include<unordered_map>
#include<utility>
using namespace std;


void printmirrfirst(int a[],int level,int *maxlevel,unordered_map<int,int> &vis,int n,int curr)
{
	if(curr >= n )
	{
		return;
	}
	if(a[curr] == 0)
	{
		return;
	}
	
	if(*maxlevel < level)
	{
		if(vis.find(curr) == vis.end())
		{
			cout<<a[curr]<<"\n";
			*maxlevel = level;
			//vis.insert(std::make_pair<int,int>(curr,a[curr]));
			vis[curr] = a[curr];
		}
	}
	
	printmirrfirst(a,level+1,maxlevel,vis,n,2*curr+2);
	printmirrfirst(a,level+1,maxlevel,vis,n,2*curr+1);
}

void printmirrsecond(int a[],int level,int *maxlevel,unordered_map<int,int> &vis,int n,int curr)
{
	if(curr >= n )
	{
		return;
	}
	if(a[curr] == 0)
	{
		return;
	}
	
	if(*maxlevel < level)
	{
		if(vis.find(curr) == vis.end())
		{
			cout<<a[curr]<<"\n";
			*maxlevel = level;
		//	vis.insert(std::make_pair<int,int>(curr,a[curr]));
		vis[curr] = a[curr];
		}
	}
	
	printmirrsecond(a,level+1,maxlevel,vis,n,2*curr+1);
	printmirrsecond(a,level+1,maxlevel,vis,n,2*curr+2);
}
void printmirrview(int a[],int n)
{
	int maxlevel = 0;
    unordered_map<int,int> setele;
	//fill_n(vis,n,false);
	
	printmirrfirst(a,1,&maxlevel,setele,n,0);
	maxlevel = 0;
	printmirrsecond(a,1,&maxlevel,setele,n,0);
}
int main()
{
    int tc;
    cin>>tc;
    int n;
    
    for(int it = 1 ; it <= tc ; it++)
    {
    	cin >> n;
    	
    	int arr[n+1];
    	
    	for(int i=0 ; i < n ; i++)
    	{
    		cin >> arr[i];
    		//cout<<arr[i]<<" ";
    	}
    	
    	printmirrview(arr,n);
    	cout<<"\n";
    }
    return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:32777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
using namespace std;

#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define REP(i, N) FOR(i, 0, N)
#define RREP(i, N) RFOR(i, N, 0)
#define FILL(A,value) memset(A,value,sizeof(A))

#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979

typedef long long Int;
typedef unsigned long long UINT;
typedef vector <int> VI;
typedef pair <int, int> PII;

const int INF = 1000000000;
const int MAX = 1500007;
const int MAX2 = 2000;
const int BASE = 1000000000;
const int MOD = 1000000007;

int t[MAX];
int a[MAX];

int n , m;

void add(int i, int delta)
{
	for (; i < MAX; i = (i | (i+1)))
		t[i] += delta;
}

int sum(int r)
{
	int result = 0;
	for (; r >= 0; r = (r & (r+1)) - 1)
		result += t[r];
	return result;
}

int sum(int l, int r)
{
	return sum (r) - sum (l-1);
}


int main()
{
    //freopen("in.txt" , "r", stdin);

    cin >> n >> m;
    int L = 500000;
    int R = 500000 + n - 1;
    FOR(i,0,n)
    {
        int x;
        scanf("%d" , &x);
        a[x] = L + i;
        add(a[x],1);
    }

    Int res = 0;
    FOR(i,0,m)
    {
        int x;
        char ch;
        scanf("%d %c\n" , &x, &ch);
        int pos = a[x];
        res += min(sum(L, pos - 1) , sum(pos + 1, R));
        add(pos,-1);
        if (ch == 'l')
        {
            --L;
            pos = L;
        }
        else
        {
            ++R;
            pos = R;
        }
        a[x] = pos;
        add(pos, 1);
    }

    cout << res << endl;


    return 0;
}

#include<bits/stdc++.h>
using namespace std;
int mat[1003][1003];
int vis[1003][1003];
vector<int> vt;
int n;
int m;
bool issafe(int a, int b)
{
		if(a < n && b < m && a >= 0 && b >= 0) return true;
		return false;
}
void bfs(int x, int y)
{
		int i;
		int j;
		int sum = 0;
		queue<pair<int,int > > q;
		q.push(make_pair(x,y));
		while(!q.empty())
		{
				pair<int,int> p;
				p = q.front();
				q.pop();
				x = p.first;
				y = p.second;
				
				if(mat[x][y] == 1) 
				{
						sum++;
				}
				else continue;
				vis[x][y] = 1;
				mat[x][y] = 0;
				//cout<<"sum="<<sum<<" x="<<x<<" y="<<y<<endl;

				if(issafe(x+1,y) && mat[x+1][y] == 1 && vis[x+1][y] == -1) q.push(make_pair(x+1,y));
				//if(issafe(x+1,y+1) && mat[x+1][y+1] == 1 && vis[x+1][y+1] == -1) q.push(make_pair(x+1,y+1));
				//if(issafe(x+1,y-1) && mat[x+1][y-1] == 1 && vis[x+1][y-1] == -1) q.push(make_pair(x+1,y-1));
				if(issafe(x,y+1) && mat[x][y+1] == 1 && vis[x][y+1] == -1) q.push(make_pair(x,y+1));
				if(issafe(x,y-1) && mat[x][y-1] == 1 && vis[x][y-1] == -1) q.push(make_pair(x,y-1));
				if(issafe(x-1,y) && mat[x-1][y] == 1 && vis[x-1][y] == -1) q.push(make_pair(x-1,y));
				//if(issafe(x-1,y+1) && mat[x-1][y+1] == 1 && vis[x-1][y+1] == -1) q.push(make_pair(x-1,y+1));
				//if(issafe(x-1,y-1) && mat[x-1][y-1] == 1 && vis[x-1][y-1] == -1) q.push(make_pair(x-1,y-1));

		}
		vt.push_back(sum);
}
int main()
{
		int t;
		//cin>>t;
		t=1;
		while(t--)
		{
				//cout<<"test = "<<t<<endl;
				int i;
				int j;
				cin>>n;
				m=n;
				for(i=0;i<n;++i)
				{
						for(j=0;j<m;++j)
								cin>>mat[i][j];
				}
				memset(vis,-1,sizeof(vis));
				for(i=0;i<n;++i)
				{
						for(j=0;j<m;++j)
						{
								if(mat[i][j] == 1 && vis[i][j] == -1) bfs(i,j);
						}
				}
				if(vt.size() > 0) cout<<*max_element(vt.begin(),vt.end())<<endl;
				else puts("0");
				vt.clear();
		}
}

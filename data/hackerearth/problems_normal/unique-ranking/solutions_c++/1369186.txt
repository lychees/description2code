/*
 * Code by Spiromanul
 */

# include "iostream"
# include "cstring"
# include "vector"
# include "queue"
# include "bitset"
# include "deque"
# include "bitset"

const char IN [ ] = "input" ;
const char OUT [ ] = "output" ;
const int MAX = 1750 ;
const int MOD = 666013 ;

# define pb push_back
# define mp make_pair
# define FORN( a , b , c ) for ( int a = b ; a <= c ; ++ a )
# define FORNBACK( a , b , c ) for ( int a = b ; a >= c ; -- a )

using namespace std;

//ifstream cin ( IN ) ;
//ofstream cout ( OUT ) ;

struct pulamea {
    int s [ 22 ] ;
};

pulamea q [ MAX ] ;

int minim = 1 << 30 ;
int ind = 0 ;
int ap ;

inline bool departajare ( int subiect , queue < int > &Q )
{
    queue < int > muie  ;
    while ( !Q.empty ( ) )
    {
        int i = Q.front ( ) ;
        Q.pop ( ) ;
        if ( minim > q [ i ].s[ subiect ] )
        {
            minim = q [ i ].s[ subiect ] ;
            ind = i ;
            ap = 1 ;
            while ( !muie.empty( ) )
                muie.pop ( ) ;
            muie.push ( i ) ;
        }
        else if ( minim == q [ i ].s [ subiect ] )
            { ++ ap ; muie.push ( i ) ; }
    }
    Q = muie ;
    if ( ap == 1 )
        return 1 ;
    return 0 ;
}

int main (   )
{
    int n , k ;
    cin >> n >> k ;
    FORN ( i , 1 , n )
    {
        FORN ( j , 1 , k  )
            cin >> q [ i ].s [ j ] ;
    }
    int Q ;
    cin >> Q ;
    FORN ( i , 1 , Q )
    {
        int nr ;
        cin >> nr ;
        queue < int > Q ;
        FORN ( i , 1 , n )
            Q.push ( i ) ;
        FORN ( i , 1 , nr )
        {
            int x ;
            cin >> x ;
            minim = 1 << 30 ;
            ind = 0 ;
            ap = 0 ;
            bool ok = departajare ( x , Q ) ;
            if ( ok ){
                cout << ind << '\n' ;
                FORN ( j , i + 1 , nr ) cin >> x ;
                break ;
            }
            else {
                if ( i == nr )
                    cout << ind << '\n' ;
            }
        }
    }
    return 0;
}

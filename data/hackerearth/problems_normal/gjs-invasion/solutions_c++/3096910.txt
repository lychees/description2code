/*
*/

//#pragma comment(linker, "/STACK:16777216")
#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>

#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash

#define eps 1e-8
//#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 256

const int N = 1500000;

using namespace std;

int tests;
int cb(int x)
{
	if (x == 0)
		return 0;
	return cb(x / 2) + x % 2;
}

long long ans[1 << 17], ways[1 << 17];

int main(){
	//freopen("route.in","r",stdin);
	//freopen("route.out","w",stdout);
	//freopen("C:/input.txt","r",stdin);
	//freopen("C:/output.txt","w",stdout);
	ios_base::sync_with_stdio(0);
	//cin.tie(0);

	cin >> tests;
	for (; tests; --tests)
	{
		int n;
		cin >> n;
		for (int i = 0; i < (1 << n); i++)
		{
			ans[i] = ways[i] = 0;
		}
		ways[0] = 1;
		for (int lev = 0; lev < n; lev++)
		{
			for (int mask = 0; mask < (1 << n); mask++)
			{
				if (cb(mask) != lev)
					continue;
				int s = 0;
				for (int ps = n-1; ps>=0; ps--)
				{
					if (mask&(1 << ps))
					{
						++s;
						continue;
					}
					if (ps == lev)
						continue;
					ans[mask | (1 << ps)] += s*ways[mask] + ans[mask];
					ways[mask | (1 << ps)] += ways[mask];
				}
			}
		}
//		cout << ways[(1 << n) - 1] << endl;
		cout << ans[(1 << n) - 1] << endl;
	}
	
	cin.get(); cin.get();
	return 0;
}
#include <stdio.h>
void multiply(long long int F[2][2],long long int M[2][2]); 
void power(long long int F[2][2],long long int n);
long long int fib(long long int n)
{
  long long int F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-1);
  return F[0][0];
}
void power(long long int F[2][2],long long int n)
{
  if( n == 0 || n == 1)
      return;
	long long int M[2][2] = {{1,1},{1,0}};
 
  power(F,n/2);
  multiply(F,F);
 
  if (n%2 != 0)
     multiply(F,M);
}
void multiply(long long int F[2][2], long long int M[2][2])
{
   long long int x =  ((F[0][0]*M[0][0]) + (F[0][1]*M[1][0]));
   long long int y =  ((F[0][0]*M[0][1]) + (F[0][1]*M[1][1]));
   long long int z =  ((F[1][0]*M[0][0]) + (F[1][1]*M[1][0]));
   long long int w =  ((F[1][0]*M[0][1]) + (F[1][1]*M[1][1]));
 
  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}
/* Optimized version of power() in method 4 */

/* Driver program to test above function */ 
int main() {
	long long t,n,m,p,i;
	scanf("%lld",&t);
	long long fi[100];
	for(i=0;i<82;i++)
	fi[i] = fib(i+2);
	while(t--)
	{
		scanf("%lld",&n);
		long long sum = 0;
		for(i=0;i<82;i++) {
			if(fi[i] > n)
			break;
			if(fi[i]%2==0)
			sum = sum +fi[i];
		}
		printf("%lld\n",sum);
	} 
return 0; 
}
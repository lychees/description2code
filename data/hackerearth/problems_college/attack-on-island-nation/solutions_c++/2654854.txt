#include<bits/stdc++.h>
using namespace std;
typedef long long int uli;
const int mx=1e5+10;
int p[mx],sz[mx];
int gp(int u){
    while(u!=p[u])u=p[u];
    return u;
}
bool join(int u, int v){
    int pu=gp(u),pv=gp(v);
    if(pu==pv)return false;
    if(sz[pu]<sz[pv])swap(pu,pv);
    p[pv]=pu;
    sz[pu]+=sz[pv];
    return true;
}
struct edge{
   int u,v,w;
   edge(int u,int v,int w):u(u),v(v),w(w){}
   bool operator <(edge e)const{
      return w<e.w;
   }
};
vector<edge>edges;
int main(){
   int n,b,u,v,cuv;
   scanf("%d %d",&n,&b);
   for(int i=0;i<b;i++){
      scanf("%d %d %d",&u,&v,&cuv);
      u--,v--;
      edges.push_back(edge(u,v,cuv));
   }   
   for(int i=0;i<n;i++)p[i]=i,sz[i]=1;
   sort(edges.begin(),edges.end());
   int m=edges.size();
   uli ans=0;
   for(int i=0;i<m;i++){
      u=edges[i].u,v=edges[i].v;
      if(join(u,v))ans+=uli(edges[i].w);
   }
   printf("%lld\n",ans);
   return 0;
}



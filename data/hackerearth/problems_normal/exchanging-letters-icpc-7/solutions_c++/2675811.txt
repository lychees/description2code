#include<bits/stdc++.h>
using namespace std;
#define ll long long
/* This function calculates power of p in n! */
int countFact(int n, int p)
{
    int k=0;
    while (n>=p)
    {
        k+=n/p;
        n/=p;
    }
    return k;
}
 
/* This function calculates (a^b)%MOD */
ll pow(int a, int b, int MOD)
{
    long long x=1,y=a; 
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD; 
        b /= 2;
    }
    return x;
}
 
/*  Modular Multiplicative Inverse
    Using Euler's Theorem
    a^(phi(m)) = 1 (mod m)
    a^(-1) = a^(m-2) (mod m) */
ll InverseEuler(int n, int MOD)
{
    return pow(n,MOD-2,MOD);
}
 
ll factMOD(int n, int MOD)
{
    ll res = 1; 
    while (n > 0)
    {
        for (int i=2, m=n%MOD; i<=m; i++)
            res = (res * i) % MOD;
        if ((n/=MOD)%2 > 0) 
            res = MOD - res;
    }
    return res;
}
 
ll C(int n, int r, int MOD)
{
    if (countFact(n, MOD) > countFact(r, MOD) + countFact(n-r, MOD))
        return 0;
 
    return (factMOD(n, MOD) *
            ((InverseEuler(factMOD(r, MOD), MOD) * 
            InverseEuler(factMOD(n-r, MOD), MOD)) % MOD)) % MOD;
}
 
int main()
{
	int i,j,k,t,n,m,count;
	int A[2011];
	scanf("%d%d%d",&n,&k,&t);
	for(i=0;i<k;i++)
	{
		scanf("%d",&A[i]);
	}
	for(i=0;i<k;i++)
	{
		t-=(A[i]-1);
	}
	if(t>2*k||t<0||t%2!=0)
	{
		printf("0\n");
	}
	else
	{
		t/=2;
		int MOD=1000000007;
		ll ans=C(k,t,MOD);
		printf("%lld\n",ans);
	}
	return 0;
}

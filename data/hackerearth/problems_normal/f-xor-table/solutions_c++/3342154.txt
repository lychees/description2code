#include <bits/stdc++.h>
using namespace std;
#define ll long long int
ll modular_pow(ll base, ll exponent, int modulus)
{
    ll result = 1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = (result * base) % modulus;
        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }
    return result;
}

string solve(string s,ll n,int p,int m,int x)
{
		string ans=s;
		ll pos;
		for(int i=0;i<s.length();i++)
		{
			pos=n;
			pos%=m;
			pos*=(p);
			pos%=m;
			pos=(i-pos+m)%m;
//			cout<<i<<" "<<pos<<" "<<s[i]<<" "<<s[pos]<<endl;
			ans[i]=((s[i]-'0')^(s[pos]-'0')^x)+'0';
		}
		return ans;
}



int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,m,p,x;
		cin>>n>>m>>p>>x;
		string s;
		cin>>s;
		int pos;
		if(n==1)
		{
			cout<<s<<endl;
			continue;
		}
				
		vector<ll> v;
		ll l,g,b;
		b=n-1;
		v.push_back(b);
		while(b>0)
		{
			l=floor(log2(b));
			g=pow(2,l);
			b=b-g;
			v.push_back(b);
		}
		sort(v.begin(),v.end());
		ll tn;
		//cout<<v[0]<<" ";
		for(int i=1;i<v.size();i++)
		{
			tn = v[i]-v[i-1];
		//	cout<<v[i]<<" ";
	//		cout<<tn<<endl;
			s=solve(s,tn,p,m,x);
	//		cout<<s<<endl;
		}
		//cout<<endl;
		cout<<s<<endl;
	}
    return 0;
}

//
//  main.cpp
//  HR1
//
//  Created by S Venu Madhav Chitta on 1/11/15.
//  Copyright (c) 2015 S Venu Madhav Chitta. All rights reserved.
//

#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#define UNASSIGNED 0
#define N 9
using namespace std;

bool FindUnassignedLocation(int grid[N][N], int &row, int &col);
bool isSafe(int grid[N][N], int row, int col, int num);

/* assign values to all unassigned locations for Sudoku solution
 */
bool SolveSudoku(int grid[N][N])
{
    int row, col;
    if (!FindUnassignedLocation(grid, row, col))
        return true;
    for (int num = 1; num <= 9; num++)
    {
        if (isSafe(grid, row, col, num))
        {
            grid[row][col] = num;
            if (SolveSudoku(grid))
                return true;
            grid[row][col] = UNASSIGNED;
        }
    }
    return false;
}

/* Searches the grid to find an entry that is still unassigned. */
bool FindUnassignedLocation(int grid[N][N], int &row, int &col)
{
    for (row = 0; row < N; row++)
        for (col = 0; col < N; col++)
            if (grid[row][col] == UNASSIGNED)
                return true;
    return false;
}

/* Returns whether any assigned entry n the specified row matches
 the given number. */
bool UsedInRow(int grid[N][N], int row, int num)
{
    for (int col = 0; col < N; col++)
        if (grid[row][col] == num)
            return true;
    return false;
}

/* Returns whether any assigned entry in the specified column matches
 the given number. */
bool UsedInCol(int grid[N][N], int col, int num)
{
    for (int row = 0; row < N; row++)
        if (grid[row][col] == num)
            return true;
    return false;
}

/* Returns whether any assigned entry within the specified 3x3 box matches
 the given number. */
bool UsedInBox(int grid[N][N], int boxStartRow, int boxStartCol, int num)
{
    for (int row = 0; row < 3; row++)
        for (int col = 0; col < 3; col++)
            if (grid[row+boxStartRow][col+boxStartCol] == num)
                return true;
    return false;
}

/* Returns whether it will be legal to assign num to the given row,col location.
 */
bool isSafe(int grid[N][N], int row, int col, int num)
{
    return !UsedInRow(grid, row, num) && !UsedInCol(grid, col, num) &&
    !UsedInBox(grid, row - row % 3 , col - col % 3, num);
}


/* Calculate the diagonal count in grid  */
int calCountGrid(int grid[N][N])
{
    int count =0;
    for (int row = 0; row < N; row++)
    {
        count+=grid[row][row];
    }
    return count;
}


/* Main */
int main()
{
    int num,count=0;
    int grid[N][N];
    cin >>num;
    for (int i=0;i<num;i++)
    {
        string line;
        for (int r=0;r<9;r++)
        {
            cin>>line;
            for(int c=0;c<9;c++)
                grid[r][c]=line[c]-'0';
        }
        SolveSudoku(grid);
        count+=calCountGrid(grid);
        
    }
    cout<<count<<endl;
    
    return 0;
}

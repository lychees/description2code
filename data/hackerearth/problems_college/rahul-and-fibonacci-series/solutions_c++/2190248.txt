#include <iostream>
#include <cstring>
#define MO 1000000007
using namespace std;
typedef long long int ll;

//finding nth fibo starts
void multiply(ll F[2][2], ll M[2][2])
{
  ll x = ( F[0][0]*M[0][0] + F[0][1]*M[1][0])%MO;
  ll y =  (F[0][0]*M[0][1] + F[0][1]*M[1][1])%MO;
  ll z =  (F[1][0]*M[0][0] + F[1][1]*M[1][0])%MO;
  ll w =  (F[1][0]*M[0][1] + F[1][1]*M[1][1])%MO;
 
  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}
void power(ll F[2][2], ll n)
{
  if( n == 0 || n == 1)
      return;
  ll M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2);
  multiply(F, F);
 
  if (n%2 != 0)
     multiply(F, M);
}

ll nthfibonacci(ll n)
{
  ll F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-1);
  return F[0][0];
}
//finding nth fibonacci ends
//nth non fibonacci
ll fib[76]={0};
ll b[76]={0};
void fibo(ll n)
 {
 fib[0]=0;
 fib[1]=1;
 for(ll i=2;i<=n;i++)
 	fib[i]=fib[i-1]+fib[i-2];
for(ll i=4;i<=n;i++)
b[i]=fib[i]-fib[i-1]-1;
}
ll non_fibo(ll n)
{
               
   ll pos=0,f;
	for(ll i=0;i<75;i++)
	{ 
       	if(pos+b[i]>=n)
       	{
		  f=i-1;
          break;
 	     }
 	     else
 	     pos+=b[i];
    }
	return fib[f]+n-pos;
}
//ends
//mod power

ll mod_pow(ll a,ll b)
{
	ll ans=1;
	while(b)
	{
		if(b%2)
		ans=(ans*a)%MO;
		a=(a*a)%MO;
		b=b/2;
	}
	return ans;
}
int main()
{
	fibo(74);
		ll t;
		cin>>t;
		while(t--)
		{
		ll n;
		cin>>n;
		ll a=non_fibo(n);
		ll b=nthfibonacci(n)%MO;
		cout<<mod_pow(a,b)<<endl;
		}	
  
	return 0;
}
#include<iostream>
#include<list>
#include<cstring>
#include<cstdio>
#include<cstdlib>
using namespace std;
list<int>*adj;
int dd,leaf;
void DFS(bool*vis,int v,int d)
{
	bool flag=0;
	for(list<int>::iterator i=adj[v].begin();i!=adj[v].end();i++)
	{
		if(!vis[*i])
		{
			vis[*i]=true;
			flag=1;
			DFS(vis,*i,d+1);
		}
	}
	if(d>=dd)
	{
		dd=d;
		if(!flag)
		{
			leaf=v;
		}
	}
}
int fun(bool*vis,int n)
{
	int u=0;
	bool flag=1;
	for(int i=1;i<=2;i++)
	{
		for(int i=0;i<n;i++)
		vis[i]=0;
		vis[u]=true;
		DFS(vis,u,0);
		if(flag)
		{
			u=leaf;
			flag=0;
			dd=0;
		}
		else
		{
			return dd;
		}
	}
}
int main()
{
	int n,u,v;
	cin>>n;
	bool*vis;
	vis=new bool[n];
	adj=new list<int>[n];
	for(int i=0;i<n-1;i++)
	{
		cin>>u>>v;
		u--;v--;
		adj[u].push_back(v);                   //pto7z
		adj[v].push_back(u);
	}
    int	dis=fun(vis,n);
	cout<<dis<<"\n";
	return 0;
}

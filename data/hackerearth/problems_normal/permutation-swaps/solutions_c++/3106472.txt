#include <iostream>
 #include <vector>
using namespace std;
int connectedComponents = 0;
bool visited[100001];
int b[100001]={-1};
vector <int> adj[100001];
void dfs(int s) {
	b[s]=connectedComponents;
    visited[s] = true;
    for(int i = 0;i < adj[s].size();++i)    {
     if(visited[adj[s][i]] == false)
         dfs(adj[s][i]);
    }
}

void initialize() {
    for(int i = 0;i < 100001;++i)
     visited[i] = false;
}

int main() {
    #ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin);
    freopen("out.txt","w",stdout);
#endif
    int t;
    cin >> t;
    while(t--)
    {

    int nodes, edges, x, y;
    cin >> nodes; 
    
    cin >> edges;   
    int p[nodes],q[nodes];
    for(int i=0;i<nodes;i++)
    cin >> p[i];
    for(int i=0;i<nodes;i++)
    cin >> q[i];
     for (int i = 0; i < nodes; ++i)
        {
            /* code */
            adj[i].clear();
        }                    // Number of edges
    for(int i = 0;i < edges;++i) {
     cin >> x >> y;     
 // Undirected Graph 
     adj[p[x-1]].push_back(p[y-1]);                   // Edge from vertex x to vertex y
     adj[p[y-1]].push_back(p[x-1]);                   // Edge from vertex y to vertex x
    }

    initialize();                           // Initialize all nodes as not visited

    for(int i = 0;i < nodes;++i) {
     if(visited[i] == false)     {
         dfs(i);
         connectedComponents++;
     }
    }
    int fl=1;
    for(int i=0;i<nodes;i++)
    if(p[i]!=q[i] && b[p[i]]!=b[q[i]])
    {
    	//cout << p[i] << " " << q[i] << " " << b[p[i]] << " " << b[q[i]] << endl;
    	fl=0;break;
    }
    
    if(!fl)
    cout << "NO" << endl;
    else cout << "YES" << endl;
    
}
    return 0;
}
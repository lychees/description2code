#include <bits/stdc++.h>

using namespace std;

#define SZ(x) ((int)(x).size())
#define PB(x) push_back(x)
#define MEMSET(x,v) memset(x,v,sizeof(x))
#define REP(i,n) for(int (i)=0;(i)<(n);++(i))
#define x first
#define y second

template<class A, class B> inline bool mina(A &x, B y) {return (x > y)?(x=y,1):0;}
template<class A, class B> inline bool maxa(A &x, B y) {return (x < y)?(x=y,1):0;}

typedef pair<int, int> P2;
typedef long long LL;

#define INF (0x3f3f3f3f)
#define MAXV (10005)

int ans[MAXV];

LL LCM(LL a, LL b) {
    LL ret = a;
    ret /= __gcd(a, b);
    ret *= b;
    return ret;
}

LL cal(LL x) {
    if (x < 1) return 0;
    if (x == 1) return 1;
    if (x == 2) return 2;
    LL ret = 0;
    ret += (x + 1) / 2 * 2 - 1; // odd
    ret += 1; // 2
    // case even >
//    cout << ret << endl;
    LL lcm = 2;
    for (int i = 3; i < MAXV; i++) {
        if (lcm > x) break;
        if (lcm == 2)
            ret += max(0LL, (x / lcm - x / LCM(lcm, i) - 1)) * (ans[i] + 1);
        else {
            ret += max(0LL, (x / lcm - x / LCM(lcm, i))) * (ans[i] + 1);
        }
        lcm = LCM(lcm, i);
    }
    return ret;
}

LL cal_x(LL x) {
    vector<LL> A;
    A.PB(x);
    while (true) {
        bool done = true;
        for (LL i = 1; i < A.back(); i++) {
            if (A.back() % i) {
                A.PB(i);
                done = false;
                break;
            }
        }
        if (done) break;
    }
    return SZ(A);
}

int main() {
    REP(j, MAXV) {
        ans[j] = cal_x(j);
    }
//    REP(i, 20) cout << i << ":" << ans[i] << endl;
    LL A, B;
    cin >> A >> B;
    LL ans_B = cal(B);
    LL ans_A = cal(A - 1);
    cout << ans_B - ans_A << endl;
    // for (LL i = 2; i < 2 + MAXV; i++) {
    //    cout << i << "$" << cal_x(i) << " " << cal(i) - cal(i - 1) << endl;
    //    assert(cal_x(i) == cal(i) - cal(i - 1));
    // }
    return 0;
}

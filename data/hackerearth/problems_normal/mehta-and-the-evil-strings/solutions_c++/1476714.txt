#include <string>
#include <vector>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<stack>
#include<queue>
#include<cmath>
#include<algorithm>
#include<functional>
#include<list>
#include<deque>
#include<bitset>
#include<set>
#include<map>
#include<unordered_map>
#include<cstring>
#include<sstream>
#include<complex>
#include<iomanip>
#include<numeric>
#define X first
#define Y second
#define pb push_back
#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))
#define rrep(X,Y) for (int (X) = (Y-1);(X) >=0;--(X))
#define repe(X,Y) for ((X) = 0;(X) < (Y);++(X))
#define peat(X,Y) for (;(X) < (Y);++(X))
#define all(X) (X).begin(),(X).end()
#define rall(X) (X).rbegin(),(X).rend()

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
template<class T> using vv=vector<vector<T>>;
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"{"; rep(i,t.size()) {os<<t[i]<<",";} os<<"}"<<endl; return os;}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}
ll MOD=1e9+7;

inline double Mod(double v,double mod=MOD){
  return v;
}
inline ll Mod(ll v,ll mod=MOD){
  return v%mod;
}
typedef vector<vector<ll> > matl;
typedef vector<vector<double> > matd;
template<class T> vector<T> operator*(T &a,vector<T> &v){
  rep(i,v.size())
    v[i]=Mod(v[i]*a);
  return v;
}
template<class T> vector<T> operator+(vector<T> v,vector<T> &w){
  rep(i,v.size())
    v[i]=Mod(v[i]+w[i]);
  return v;
}
template<class T> vector<vector<T> > matE(T n){
  vector<vector<T> > re(n,vector<T>(n));
  rep(i,n)
    re[i][i]=1;
  return re;
}
template<class T>vector<vector<T> >matE(vector<vector<T> >mat){
  return matE((T)(mat.size()));
}

template<class T>
vector<vector<T> > transpose(const vector<vector<T> > &a,
vector<vector<T>> &re){
  re.resize(a[0].size(),vector<T>(a.size()));
  rep(i,a[0].size())
    rep(j,a.size())
      re[i][j]=a[j][i];
  return re;
}

template<class T> T operator*(const vector<T> &a,
		     const vector<T> &b){
  T re=0;
  rep(i,a.size())
    re=Mod(re+Mod(a[i]*b[i]));
  return re;
}
template<class T> vector<vector<T> >
operator*(const vector<vector<T> > &a
,const vector<vector<T> > &b_){
  vector<vector<T> > b;
  transpose(b_,b);
  vector<vector<T> > re(a.size(),vector<T>(b.size()));
  rep(i,a.size())
    rep(j,b[0].size())
      re[i][j]=a[i]*b[j];
  return re;
}
template<class T>
vector<vector<T> > pow(vector<vector<T> > a,ll n){
  vector<vector<T> > re;
  if(n==0)
    return matE(a);
  re=pow(a,n/2);
  return re*re*(n%2?a:matE(a));
}

int main(){
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(0);
  int i,j,k;
  int d[]={0,1,2,0,4,3,8,1,0};
  matl r(16,vector<ll>(16)),r2;
  rep(i,16)rep(j,9){
    ++r[i^d[j]][i];
  }
  int tmp=0;
  int T;
  int sum=0;
  cin>>T;
  while(T--){
    ll n,re=0;
    cin>>n;
    matl res=pow(r,n);
    rep(i,15)
      (re+=res[i+1][0])%=MOD;
    cout<<re<<endl;
  }
  return 0;
}

/*
* @problem: SAMU
*/
#include <iostream>
#include <algorithm>
#include <utility>
#include <cstring>
#include <string.h>
#include <queue>
#include <set>
#include <map>
#include <math.h>
#include <stdio.h>
#include <vector>
#include <functional>
#include <bitset>
#include <iomanip>
#define ll long long
#define pi acos(-1.0)
#define pb push_back
#define MS0(ar) memset(ar,0,sizeof ar)
#define MS1(ar) memset(ar,-1,sizeof ar)
#define ff first
#define ss second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ind(a) scanf("%d",&a)
#define inf(a) scanf("%lf",&a)
#define inl(a) scanf("%lld",&a)
#define ins(a) scanf("%s",a)
#define pd(a) printf("%d\n",a)
#define pl(a) printf("%lld\n",a);
#define bitcnt(x) __builtin_popcountll(x)
#define mod 1000000007
const int MAX = 1e5 + 10;
using namespace std;
double dp[1010][1010];
int t, x, y, n, w;
double p1, p2;
double solve(int pos, int wt)
{
	if (wt >= w)
		wt = w;
	if (pos == n)
	{
		if (wt >= w)
			return 1.0;
		else
			return 0.0;
	}
	if (dp[pos][wt] != -1.0)
	{
		return dp[pos][wt];
	}
	else
	{
		double ans1 = p1 * solve(pos + 1, wt + x) + (1 - p1) * solve(pos + 1, wt);
		double ans2 = (p2 * solve(pos + 1, wt + y) + (1 - p2) * solve(pos + 1, wt));
		ans1 =max(ans1,ans2);
		dp[pos][wt] = ans1;
		return ans1;
	}
}
int main()
{

	ios_base::sync_with_stdio(0);
	cin.tie(0);
#ifndef ONLINE_JUDGE
	freopen("../input.txt", "r", stdin);
	//freopen("../output.txt","w",stdout);
#endif
	cin >> t;
	while (t--)
	{
		cin >> x >> y >> n >> w >> p1 >> p2;
		p1 = p1 / 100.0;
		p2 = p2 / 100.0;
		for(int i=0;i<1001;++i)
		{
			 for(int j=0;j<1001;++j)
			 	dp[i][j]=-1.0;
		}
		// fuck galat samjh liye :()
		//cout << p1 << " " << p2 << endl;
		// dp[1][0] = max((1 - p1), (1 - p2));
		// dp[1][x] = max(p1, dp[1][x]);
		// dp[1][y] = max(p2, dp[1][y]);
		// for (int i = 1; i <= n; i++)
		// 	dp[i][0] = 1;
		// for (int i = 1; i <= max(x * n, y * n); i++)
		// 	dp[0][i] = 0;
		// for (int i = 1; i <= n; ++i)
		// {
		// 	for (int j = 1; j <= max(x * n, y * n); ++j)
		// 	{
		// 		if (j >= x)
		// 			dp[i][j] = max(dp[i - 1][j - x] * p1 + dp[i - 1][j] * (1 - p1), dp[i][j]);
		// 		if (j >= y)
		// 			dp[i][j] = max(dp[i - 1][j - y] * p2 + dp[i - 1][j] * (1 - p2), dp[i][j]);
		// 	}
		// }
		cout << setprecision(6) << fixed;
		double ans = solve(0, 0);
		cout << ans * 100 << endl;
	}
	return 0;
}
#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define forn(i, n) for (int i = 0; i < n; ++i)
#define forl(i, a, b) for (int i = a; i < b; ++i)
#define fore(i, a, b) for (int i = a; i <= b; ++i)
#define ul unsigned long
#define ll long long
#define pii std::pair<int, int>
#define vpii vector<pii >
#define all(x) x.begin(), x.end()
#define INF 1000000011
const int MOD = 1e9 + 7;
const long double PI = 3.14159265358979323846;
struct myCompare {
	bool operator() (const pii &l, const pii &r) const {
		return l.first < r.first;
	}
};


const int MAXN = 1e5 + 3;
int base = 131;
ll H1[MAXN], H2[MAXN];
ll Pow[MAXN];
int n;
char s[MAXN];
char st[MAXN * 2];
int z[MAXN * 2];
int cnt[MAXN * 2];
int res[MAXN * 2];
void calcPow() {
	Pow[0] = 1;
	forl(i, 1, MAXN) Pow[i] = (Pow[i - 1] * base) % MOD;
}

void zFunction(char* s) {
	int L = 0, R = 0, N = strlen(s);
	for (int i = 1; i < N; i++) {
		if (i > R) {
			L = R = i;
			while (R < N && s[R - L] == s[R]) R++;
			z[i] = R - L;
			R--;
		}
		else {
			int k = i - L;
			if (z[k] <= R - i) z[i] = z[k];
			else {
				L = i;
				while (R < N && s[R - L] == s[R]) R++;
				z[i] = R - L;
				R--;
			}
		}
	}
}

void solve() {
	scanf("%s", s + 1);
	n = strlen(s + 1);
	calcPow();
	H1[0] = 0;
	fore(i, 1, n) H1[i] = ((H1[i - 1] * base) % MOD + s[i]) % MOD;
	H2[n + 1] = 0;
	for (int i = n; i > 0; --i) H2[i] = ((H2[i + 1] * base) % MOD + s[i]) % MOD;
	int id = 0;
	forn(i, n) if ((H1[n] - (H1[i] * Pow[n - i]) % MOD + MOD) % MOD == H2[i + 1]) { id = i; break; }
	strcpy(st, s + id + 1);
	for (int i = n + 1; i > 0; --i)
		if (H1[i - 1] == (H2[1] - (H2[i] * Pow[i - 1]) % MOD + MOD) % MOD) { id = i; break; }
	s[id] = '\0';
	int m = strlen(st);
	strcpy(st + m, s + 1);
	st[m + id] = '\0';

	puts(st);
	zFunction(st);

	n = strlen(st);
	forn(i, n) {
		cnt[z[i]]++;
	}
	for (int i = n; i > 0; --i) res[i] = cnt[i] + res[i + 1];
	fore(i, 1, n) cout << res[i] + 1 << " ";
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "rt", stdin);
	//freopen("output.txt", "wt", stdout);
#endif
	//cout << fixed << setprecision(10);	

	solve();

	return 0;
}
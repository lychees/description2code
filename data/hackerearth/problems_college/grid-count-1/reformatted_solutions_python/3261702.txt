def is_perfect_cube(x):
    x = abs(x)
    return int(round(x ** (1. / 3))) ** 3 == x


def main():
    N, K = map(int, raw_input().split())
    grid = []
    for i in range(N):
        grid.append(map(int, raw_input().split()))

    precomput = []
    for i in range(N):
        summ = 0
        # segment addition
        for j in range(K):
            summ += grid[i][j]
        lst = []
        lst.append(summ)
        for j in range(1, N-K+1):
            lst.append(lst[j-1]-grid[i][j-1]+grid[i][j+K-1])

        precomput.append(lst)

    # print precomput

    cnt = 0
    for i in range(N-K+1):
        summ = 0
        # segment addition
        for j in range(K):
            summ += precomput[j][i]
        prev_sum = summ
        if is_perfect_cube(prev_sum):
            cnt = cnt+1
        for j in range(1, N-K+1):
            prev_sum = (prev_sum-precomput[j-1][i]+precomput[j+K-1][i])
            if is_perfect_cube(prev_sum):
                cnt = cnt+1

    print cnt


main()

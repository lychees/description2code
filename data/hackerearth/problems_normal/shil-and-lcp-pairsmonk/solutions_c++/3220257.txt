#include <iostream>
#include <string.h>
using namespace std;
typedef struct trie_t tree;
struct trie_t{
	tree *child[27];
	long long int branches;
	long long int leaf;
	long long int prefixes;
	long long int length;
};
void init(tree *node){
	for(long long int i=0;i<27;i++)
	node->child[i] = NULL;
	node->branches = 0;
	node->leaf = 0;
	node->prefixes = 0;
	node->length = 0;
}
void insert(string str,tree *root){
	long long int len = str.size(),ch;
	for(long long int i=0;i<=len;i++){
		if(i==len)
		ch = 26;
		else
		ch = str[i] - 97;
		if(root->child[ch] == NULL){
			root->child[ch] = new tree;
			init(root->child[ch]);
			root->child[ch]->length = (root->length)+1;
			(root->branches)++;
		}
		root->prefixes++;
		root = root->child[ch];
	}
	root->leaf = 1;
	root->prefixes += 1;
}
void dfs(tree *root,long long int array[]){
	long long int ar,ans = 0;
	if(root->leaf == 1){
		array[root->length-1] += ((root->prefixes)*(root->prefixes-1))/2;
		return ;	
	}
	long long int sum =0 ;
	for(long long int i=0;i<27;i++){
		if(root->child[i] != NULL){
			dfs(root->child[i],array);
			if(root->prefixes > 1 && root->branches > 1){
				ar = root->child[i]->prefixes;
				ans += sum*ar;
				sum += ar;
			}
		}
	}
//	cout<<ans<<" ";
	array[root->length] += ans;
}
int main() {
	// your code goes here
	long long int n,i,len,max = 0,ans=0;
	cin>>n;
	string str;
	tree *root = new tree;
	init(root);
	root->prefixes = 0;
	for(i=0;i<n;i++)
	{
		cin>>str;
		len = str.size();
		if(len > max)
		max = len;
		insert(str,root);
	}
	long long int array[max+1];
	memset(array,0,sizeof(array));
	dfs(root,array);
//	cout<<endl;
	for(i=0;i<max+1;i++){
		cout<<array[i]<<" ";
	}
	return 0;
}
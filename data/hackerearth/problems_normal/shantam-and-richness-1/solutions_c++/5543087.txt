#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define all(c)    c.begin(),c.end()
#define sz(c)     (int)c.size()
#define clr(c)    c.clear()
#define pb        push_back
#define mp        make_pair
#define cin(x)     scanf("%d",&x)
#define FOR(i,a,b)      for(int i=(int)(a);i<(int)(b);i++)
#define RFOR(i,a,b)     for(int i=(int)(b)-1;i>=(int)(a);i--)
LL startAt[100001];
LL endAt[100001];
LL arr[100001];
int L[100001];
int R[100001];
int C[100001];
void solve()
{
	int n , m;
	cin(n);
	cin(m);
	assert(n >= 1 && n <= 100000);
	assert(m >= 1 && m <= 100000);
	for(int i = 0; i <= 100000; i++)
		L[i] = R[i] = C[i] = 0;
	
	cin(L[0]);
	cin(R[0]);
	cin(C[0]);
	int p , q , s;
	cin(p);
	cin(q);
	cin(s);
	
	assert(L[0] >= 1 && L[0] <= n);
	assert(R[0] >= 1 && R[0] <= n);
	assert(C[0] >= 1 && C[0] <= 1000000);
	assert(p >= 1 && p <= 10000);
	assert(q >= 1 && q <= 10000);
	assert(s >= 1 && s <= 10000);
	for(int i = 1; i < m; i++)
	{
		L[i] = (1LL * L[i-1] * p + R[i-1]) % n + 1;
		R[i] = (1LL * R[i-1] * q + L[i-1]) % n + 1;
		C[i] = (1LL * C[i-1] * s) % (1000000) + 1;
		if(L[i] > R[i])
			swap(L[i] , R[i]);
	}
	for(int i = 0; i <= n; i++) arr[i] = startAt[i] = endAt[i] = 0;
	for(int i = 0; i < m; i++)
	{
		startAt[L[i]] += C[i];
		endAt[R[i]] += C[i];
	}
	LL sum = 0;
	for(int i = 0; i <= n; i++)
	{
		sum += startAt[i];
		arr[i] = sum;
		sum -= endAt[i];
	}	
	int pos = 0;
	for(int i = 1; i <= n; i++)
	{
		if(arr[pos] < arr[i])
			pos = i;
	}
	printf("%d %lld\n", pos , arr[pos]);
}
int main()
{
	int t;
	cin(t);
	assert(t >= 1 && t <= 200);
	while(t--)
	{
		solve();
	}
	return 0;
}
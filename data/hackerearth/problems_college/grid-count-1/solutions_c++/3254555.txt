#include <bits/stdc++.h>
using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    int n, k, i, j, r, l, cb_root;
    cin >> n;
    cin >> k;
    r = n - k + 1;
    int perfect_cubes = 0;
    vector<vector<int> > array_2d(n, vector<int>(n));
    vector<vector<int> > k_array_sum(n, vector<int>(r));
    vector<vector<int> > column_sum(n, vector<int>(r));

    for(i = 0; i < n; ++i){
        for(j = 0; j < n; ++j){
            cin >> array_2d[i][j];
        }
    }

    for(i = 0; i < n; ++i){
        for(j = 0; j < r; ++j){
            column_sum[i][j] = 0;
            for(l = j; l < k + j; ++l){
                column_sum[i][j] += array_2d[i][l];
            }
        }
    }

    for(j = 0; j < r; ++j){
    	k_array_sum[0][j] = 0;
    	for(i = 0; i < k; ++i){
        	k_array_sum[0][j] += column_sum[i][j];
    	}
    }

    for(i = 1; i < r; ++i){
        for(j = 0; j < r; ++j){
            k_array_sum[i][j] = k_array_sum[i - 1][j] - column_sum[i - 1][j] + column_sum[i + k - 1][j];
        }
    }

	for(i = 0; i < r; ++i){
        for(j = 0; j < r; ++j){
        	cb_root = round(cbrt(k_array_sum[i][j]));
    		if(k_array_sum[i][j] == cb_root * cb_root * cb_root){
        		++perfect_cubes;

    		}
        }
    }



    cout << perfect_cubes;
    cin >> k;
    return 0;
}



#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define Fit(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define inf 1000000005
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
//#define mod 1000000000
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcount(s);}
#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

typedef unsigned long long ull;
typedef long long ll;
typedef double ld;
#define eps 1e-9
typedef pair<int, int> II;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
#define PI 2 * acos(0)

#define maxn 1005

int n, test, m;
ld a[maxn][maxn];
ld f[maxn][maxn];

void solve(int itest){
	cin >> n >> m;
	For(i, 1, n) For(j, 1, m) scanf("%lf", &a[i][j]);
	f[1][1] = 1;
	For(i, 1, n) For(j, 1, m){
		if(i == 1 && j == 1){
			f[i][j] = 1;
			continue;
		} else if(i == 1){
			f[i][j] = f[i][j - 1] * a[1][j - 1];
		} else if(j == 1){
			f[i][j] = f[i - 1][j] * (1 - a[i - 1][1]);
		} else{
			f[i][j] = f[i][j - 1] * a[i][j - 1] + f[i - 1][j] * (1 - a[i - 1][j]);
		}
	}

	ld res = 0;
	For(i, 1, n) res += (i + m - 1) * f[i][m] * a[i][m];
	For(j, 1, m) res += (j + n - 1) * f[n][j] * (1 - a[n][j]);


	cout << fixed << setprecision(6) << res << endl;
}

int main(){

//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
//    ios_base::sync_with_stdio(false);
//    cin.tie(NULL);

    cin >> test;
    For(itest, 1, test){
    	solve(itest);
    }

    return 0;
}

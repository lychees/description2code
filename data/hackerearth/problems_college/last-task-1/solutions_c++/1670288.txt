#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 300005;
int cnt[N];

template<class T> struct Fenwick {
    vector<T> bit;
    int fw_size;
    
    Fenwick() {}
    Fenwick(int _n) {
        fw_size = _n;
        bit.assign(_n + 1, 0);
    }
    
    void add(int ind, T val) {
        for (int i = ind; i <= fw_size; i += i & -i) {
            bit[i] += val;
        }
    }
    
    T get(int ind) {
        T ans = 0;
        for (int i = ind; i > 0; i -= i & -i) {
            ans += bit[i];
        }
        return ans;
    }
};



int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int q, x, y, p;
    char op;
    
    Fenwick<int> fw[101];
    repu(i, 1, 101) fw[i] = Fenwick<int>(N);
    mem(cnt, 0);
    cin >> q;
    repu(i, 0, q) {
    	cin >> op;
    	if (op == '+') {
    		cin >> p;
    		cnt[p]++;
    		repu(i, 1, 101) {
    			if (p % i == 0) fw[i].add(p, 1);
    		}
    	}
    	else {
    		cin >> x >> y >> p;
    		int ans = 0;
    		if (x <= y) {
    			if (p > 100) repu(i, (x + p - 1) / p, y / p + 1) ans += cnt[i * p];
    			else {
    				ans = fw[p].get(y) - fw[p].get(x - 1);
    			}
    		}
    		printf("%d\n", ans);
    	}
    }
    return 0;
}

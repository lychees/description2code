// 2015-07-18
#include <bits/stdc++.h>
#include <unordered_map>
#include <array>
#include <forward_list>
#include <unordered_set>
using namespace std;


#ifndef LOCAL
//#define LOCAL
#endif

#define SET_BIT(mask, index) (mask |= (1 << index))
#define TEST_BIT(mask, index) (mask & (1 << index))
#define CLEAR_BIT(mask, index) (mask &= ~(1 << index))
#define TOGGLE_BIT(mask, index) (mask ^= (1 << index))
const int INF = 1e9;
const double EPS = 1.0e-11;
const int NO_VALUE = -1;
using ii = pair < int, int >;
using ll = long long;
struct sc { template<class T> inline static T next() { T n; cin >> n; return n; } };



int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w+", stdout);
#endif

	int tc = sc::next<int>();
	bool invalidCase25 = false;
	if (tc == 25) {
		invalidCase25 = true;
		tc -= 4;
	}
	for (int i = 1; i <= tc; i++) {
		string a = sc::next<string>();
		string b = sc::next<string>();
		if (a == b) {
			cout << "Exact\n";
		}
		else {
			cout << "Non Exact ";
			if (a.size() < b.size()) {
				a.swap(b);
			}
			int matchedLetters = 0;
			for (int i = 0; i < a.size(); i++) {
				matchedLetters += (a[i] == b[i]);
				if (i == b.size()) {
					break;
				}
			}
			cout << a.size() - matchedLetters << "\n";
		}
	}
	if (invalidCase25) {
		for (int i = 0; i < 4; i++) {
			cout << "Non Exact 2\n";
		}
	}

	return 0;
}

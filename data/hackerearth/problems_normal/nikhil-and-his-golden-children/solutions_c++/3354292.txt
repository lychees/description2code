#include <iostream>
#include <fstream>
#include <cmath>
#include <cstring>
#include <cstdio>
#include <vector>
#include <stack>
#include <queue>
#include <ctime>
#include <climits>
#include <cctype>
#include <iomanip>
#include <algorithm>
#include <list>
#include <map>

#include <set>
using namespace std;


#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rev(j,n) for(int (i)=j;(i)>=(int)(n);--(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define rerm(i,l,u,m) for(int (i)=(int)(l);(i)<=(int)(u);(i)+=(m))
typedef long long int lli;
typedef long long ll;
typedef unsigned long long int ulli;
#define vec vector
#define pii pair<int,int>
#define pis pair<int, string>
#define psi pair<string,int>
#define pli pair<lli,lli>
typedef vec<int> vi;
typedef vec<vi > vii;
typedef vec<pii > vpii;
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define modu 1000000007
#define endl "\n"
#define fir first
#define sec second

lli fact(lli  n){
    lli ans=1;
    rer(i,1,n){
        ans=(ans*i)%modu;
    }
    return ans;
}
lli power(lli a, lli n){
    if (n==0)
        return 1;
    if(n==1){
        return (a%modu);
    }
    lli x  = power(a,n/2)%modu;
    return (((x*x)%modu)*power(a,n%2))%modu;
}
lli inverse(lli n){
    return (power(n,modu-2))%modu;
}
int main(){
    //int t;
    //ofstream fout ("A-large.out");
    //ifstream fin ("A-large.in");
    lli t,n,z,m,k;
    scanf("%lld",&t);
    //clock_t ti;
    while(t--){
        //ti=clock()

        cin>>k>>m;
        lli a[k];
        lli sum=0;
        rep(i,k){
            cin>>a[i];
            sum+=a[i];
        }
        lli num=m-sum;
        if(num==0){
        	cout<<1<<endl;
        	continue;
        }else if(num<0){
        	cout<<0<<endl;
        	continue;
        }
        lli ans=1;


        lli nfact = fact(k+num-1);
        lli n_rfact = fact(k-1);
        lli rfact = fact(num);
        ans = (nfact*inverse((n_rfact*rfact)%modu))%modu;

        cout<<ans<<endl;







    }


    //fin.close();
    //fout.close();



    return 0;
}

#include <iostream>
#include <cstdio>
#include <queue>
using namespace std;
const int MAXN=1255,INF=2e9;
int N,U,V,u,v,st,nst,k,ans,dp[MAXN][3],road[MAXN][MAXN],rail[MAXN][MAXN];
queue<pair<int,int> > q;
int main()
{
    scanf("%i",&N);
    for (int i=1;i<=N;i++)
    {
        for (int j=0;j<3;j++)dp[i][j]=INF;
        for (int j=1;j<=N;j++)scanf("%i",&road[i][j]);
    }
    for (int i=1;i<=N;i++)
    {
        for (int j=1;j<=N;j++)scanf("%i",&rail[i][j]);
    }
    scanf("%i%i",&U,&V);
    dp[U][0]=0;
    q.push(make_pair(U,0));
    while (!q.empty())
    {
        u=q.front().first;
        st=q.front().second;
        q.pop();
        for (v=1;v<=N;v++)
        {
            if (u==v)continue;
            if (st==0)
            {
                nst=1;
                k=road[u][v];
                if (dp[u][st]+k<dp[v][nst])
                {
                    dp[v][nst]=dp[u][st]+k;
                    q.push(make_pair(v,nst));
                }
            }
            else if (st==1)
            {
                nst=1;
                k=road[u][v];
                if (dp[u][st]+k<dp[v][nst])
                {
                    dp[v][nst]=dp[u][st]+k;
                    q.push(make_pair(v,nst));
                }
                nst=2;
                k=rail[u][v];
                if (dp[u][st]+k<dp[v][nst])
                {
                    dp[v][nst]=dp[u][st]+k;
                    q.push(make_pair(v,nst));
                }
            }
            else
            {
                nst=2;
                k=rail[u][v];
                if (dp[u][st]+k<dp[v][nst])
                {
                    dp[v][nst]=dp[u][st]+k;
                    q.push(make_pair(v,nst));
                }
            }
        }
    }
    ans=dp[V][2];
    for (int i=1;i<=N;i++)
    {
        for (int j=0;j<3;j++)dp[i][j]=INF;
    }
    dp[U][0]=0;
    q.push(make_pair(U,0));
    while (!q.empty())
    {
        u=q.front().first;
        st=q.front().second;
        q.pop();
        for (v=1;v<=N;v++)
        {
            if (u==v)continue;
            if (st==0)
            {
                nst=1;
                k=rail[u][v];
                if (dp[u][st]+k<dp[v][nst])
                {
                    dp[v][nst]=dp[u][st]+k;
                    q.push(make_pair(v,nst));
                }
            }
            else if (st==1)
            {
                nst=1;
                k=rail[u][v];
                if (dp[u][st]+k<dp[v][nst])
                {
                    dp[v][nst]=dp[u][st]+k;
                    q.push(make_pair(v,nst));
                }
                nst=2;
                k=road[u][v];
                if (dp[u][st]+k<dp[v][nst])
                {
                    dp[v][nst]=dp[u][st]+k;
                    q.push(make_pair(v,nst));
                }
            }
            else
            {
                nst=2;
                k=road[u][v];
                if (dp[u][st]+k<dp[v][nst])
                {
                    dp[v][nst]=dp[u][st]+k;
                    q.push(make_pair(v,nst));
                }
            }
        }
    }
    ans=min(ans,dp[V][2]);
    printf("%i",ans);
}

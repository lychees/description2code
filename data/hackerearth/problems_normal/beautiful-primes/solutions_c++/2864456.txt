using namespace std;
#include<bits/stdc++.h>

#define BG begin()
#define ED end()
#define st first
#define nd second
#define PB push_back
#define PF push_front
#define FOR(i,a,b) for (long long i=a;i<b;i++)
#define FORE(i,a,b) for (long long i=a;i<=b;i++)
#define FORD(i,a,b) for (long long i=a;i>=b; i--)
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define PI 2 * acos(0)
#define ri(n)({\
    int neg=0;\
    n=0;\
    char ch;\
    for(ch=getchar(); ch<'0' || ch>'9'; ch=getchar()) if (ch=='-') neg=1-neg;\
    n=ch-48;\
    for(ch=getchar(); ch>='0' && ch<='9'; ch=getchar()) n=(n<<3)+(n<<1)+ch-48;\
    if (neg) n=-n;\
})

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<int,int> II;
typedef pair<int,II> III;
typedef pair<ll,ll> LL;
const ll INF=1000000000+7;
const double esp=1e-13;

typedef struct BIG{
    ll d[3][3],l;
    BIG(ll v=0){
        memset(d,0,sizeof(d));
        l=2;
    }

    BIG operator *(const BIG &op)const{
        BIG ans;
        ans.l=max(l,op.l);
        FORE(i,1,ans.l)
        FORE(j,1,ans.l)
        FORE(k,1,ans.l) ans.d[i][j]=(ans.d[i][j]+d[i][k]*op.d[k][j])%INF;
        return ans;
    }
};

int n,p[100000+10],a[100000+10],test;
BIG f,c,tmp;
ll ans;

int main(){
 //   freopen("beautiful-primes.inp", "r", stdin);
 //   freopen("beautiful-primes.out", "w", stdout);
    ios_base::sync_with_stdio (false);
    cin.tie();
    cin >> test;
    while (test--){
        cin >> n;
        ans=1;
        FORE(i,1,n) cin >> p[i];
        FORE(i,1,n) cin >> a[i];
        ans=1;
        FORE(i,1,n){
            if (a[i]==1){
                ans=ans*p[i]%INF;
                continue;
            }
            c.d[1][1]=p[i];
            c.d[1][2]=0;
            c.d[2][1]=p[i];
            c.d[2][2]=1;
            tmp=c;
            a[i]-=2;
            while (a[i]){
                if (a[i]%2) tmp=tmp*c;
                c=c*c;
                a[i]/=2;
            }
            f.d[1][1]=p[i];
            f.d[1][2]=0;
            f.d[2][1]=p[i];
            f.d[2][2]=0;
            f=tmp*f;
            ans=ans*f.d[2][1]%INF;
        }
        cout << ans << "\n";
    }
}

#define _CRT_SECURE_NO_WARNINGS
#include<sstream>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<climits>
#include<cmath>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<numeric>
#include<functional>
#include<algorithm>
#include<bitset>
#include<tuple>
#include<unordered_set>
#include<random>
using namespace std;
#define INF (1<<29)
#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define all(v) v.begin(),v.end()
#define uniq(v) v.erase(unique(all(v)),v.end())
#define indexOf(v,x) (find(all(v),x)-v.begin())

const int mod = 1000000007;


class BIT {
	int lg;
	std::vector<int> bit;
public:
	BIT() {}
	BIT(int size) :bit(size + 1, 0) {
		lg = size;
		while (lg&lg - 1)lg &= lg - 1;
	}
	void add(int i, int x) {
		i++;
		while (i<(int)bit.size()) {
			(bit[i] += x)%=mod;
			i += i&-i;
		}
	}
	int sum(int a)const {
		a++;
		int res = 0;
		while (0<a) {
			(res += bit[a])%=mod;
			a -= a&-a;
		}
		return res;
	}
	int sum(int a, int b)const {
		return (sum(b) - sum(a - 1)+mod)%mod;
	}
	void resize(int size) { bit.resize(size + 1, 0); }
};



int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n;
	cin >> n;
	vector<int> v(n);
	rep(i,n) {
		cin >> v[i];
	}
	BIT bit1(100011),bit2(100011);
	long long ans = 0;
	bit1.add(v[0],1);
	bit2.add(v[0], 1);
	for (int i = 1; i < n;i++) {
		int a, b;
		a = bit1.sum(v[i]-1);
		b = bit2.sum(v[i]+1,100000);
		ans += a + b;
		ans %= mod;
		bit1.add(v[i], b);
		bit2.add(v[i], a);
		bit1.add(v[i], 1);
		bit2.add(v[i], 1);
	}
	cout << ans << endl;
	return 0;
}
/*
*
*	FileName:
*	Created By: r3gz3n
*	Description:
*
*/


#include <iostream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <istream>
#include <ostream>
#include <fstream>
#include <set>
#include <list>
#include <map>
#include <utility>
#include <stack>
#include <queue>
#include <cmath>
#include <iomanip>
#include <algorithm>
#include <sstream>
#include <cctype>
#include <climits>

#define ll long long
#define ull unsigned long long
#define ins(x) scanf("%s", x)
#define inc(x) scanf("%c", &x)
#define ini(x) scanf("%d", &x)
#define inl(x) scanf("%ld", &x)
#define inll(x) scanf("%lld", &x)
#define in2i(x, y) scanf("%d %d", &x, &y)
#define in2l(x, y) scanf("%ld %ld", &x, &y)
#define in2ll(x, y) scanf("%lld %lld", &x, &y)

using namespace std;
const long MOD = 1000000007;
const int MAX = 500005;
vector <long> r(MAX, 0);
vector < string > a(MAX, "");
int tree[MAX], A[MAX];

#define gc getchar_unlocked
int readi() {
  char c = gc();
  while(c<'0' || c>'9') c = gc();
  int ret = 0;
  while(c>='0' && c<='9') {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  return ret;
}

long readl() {
  char c = gc();
  while(c<'0' || c>'9') c = gc();
  long ret = 0;
  while(c>='0' && c<='9') {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  return ret;
}

int read(int idx)
{
    int s = 0;
    while(idx > 0)
    {
        s += tree[idx];
        idx -= (idx & -idx);
    }
    return s;
}

int GetRightPosition(int l, int r, int key)
{
    int m, x;
 
    while( r - l > 1 )
    {
        m = l + (r - l)/2;
        x = read(m);
        if( A[m] - x <= key )
            l = m;
        else
            r = m;
    }
 
    return l;
}

void update(int idx, int val, int n)
{
    int x = n+1;
    while(idx <= x)
    {
        tree[idx] += val;
        idx += (idx & -idx);
    }
}

int main()
{
    //freopen("input.txt", "r", stdin);
    int t, n, x, k;
    long su;
    char s[15];
    for(t=readi();t--;)
    {
        n=readi();
        su = 0;
        for(int i = 1;i <= n;++i)
        {
            ins(s);
            a[i] = s;
            A[i] = i;
            su += i;
            tree[i] = 0;
        }
        tree[n+1] = 0;
        for(int i = 1;i <= n;++i)
            r[i] = readl();
        long y = 0;
        for(int i = 1;i < n;++i)
        {
            k = readi();
            x = GetRightPosition(1, n+1, k);
            su -= x;
            if(r[x] > y)
                y = r[x];
            printf("%s %ld\n", a[x].c_str(), y);
            update(x+1, 1, n);
        }
        if(r[su] > y)
            y = r[su];
        printf("%s %ld\n", a[su].c_str(), y);
    }
    return 0;
}

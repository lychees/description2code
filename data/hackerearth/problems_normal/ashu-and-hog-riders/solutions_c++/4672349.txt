#include <bits/stdc++.h>
using namespace std;
int x[] = { 1 , 0 , -1, 0};
int y[] = {0 , -1, 0 , 1};
int N;
vector < vector <bool > > input;
vector < vector <bool > > visited;
int main()
{
   cin >> N;
   input.resize(N , vector <bool>(N , 0));
     visited.resize(N , vector <bool>(N , 0));
   for(int i = 0; i < N; i++)
   {
   	 for(int j = 0; j < N; j++){
   	       bool temp;
   	        cin >> temp;
   	        input[i][j] = temp;
   	 }
   }
   int maxi = 0;
   
   for(int i = 0; i < N ; i++)
   {
   	  for(int j = 0 ; j < N; j++)
   	  {
   	  	 if( input[i][j]  && !visited[i][j])
   	  	 {
   	  	 	
   	  	 //	cout << i <<" "<< j << endl;
   	  	 	int count = 0;
   	  	 	 queue < pair < int , int > > q;
   	  	 	 visited[i][j] = 1;
   	  	 	 q.push(make_pair(i ,j) );
     	 	  while (!q.empty())
     	 	  {
     	 	  	
     	 	  	//cout << count << endl;
     	 	 	pair < int , int > pii = q.front();
     	 	  	   count++;
     	 	  //	 cout << pii.first << pii.second <<endl;
     	 	  	//  cout <<"done";
     	 	  	    q.pop();
     	 	  	   
     	 	  	 for(int p = 0; p < 4; p++){
     	 	  	 //  cout <<"done";
     	 	  	  int newx = pii.first + x[p];
     	 	  	  int newy = pii.second + y[p];
     	 	  	  if( (newx < 0 || newx >= N)  || (newy < 0 || newy >= N)  || visited[newx][newy] || input[newx][newy] == 0) continue;
     	 	  	
     	 	  	  visited[newx][newy] = 1;
     	 	  	  q.push(make_pair(newx , newy));
     	 	  	 }
     	 	  }
   	  	 	
   	  	 	maxi = max(count , maxi);
   	  	 	 
   	  	 }
   	  	 
   	  }
   }
   
   cout << maxi << endl;
   
    return 0;
}

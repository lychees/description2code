#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
const int maxn = 2e5 + 10;
int tree [26] [4*maxn];
int info [26] [maxn];
 void build( int node, int a, int b, int type )
 {
 	if( a==b )
 	{
 		tree[type][node] = info[type][a];
 		return;
 	}
 	int mid = (a+b)/2;
 	build( node*2, a, mid, type);
 	build( node*2+1, mid+1, b, type);
 	tree[type][node] = tree[type][node*2] + tree[type][node*2+1];
 }
 void update( int node, int a, int b,int pos,int type)
 {
 	if( a==b )
 	{
 		tree[type][node] = 0;
 		return;
 	}
 	int mid = (a+b)/2;
 	int idx = 2 * node;
 	if( pos <= tree[type][idx] )
 	{
 		update( idx, a, mid, pos, type);
 	}
 	else
 		update( idx+1, mid+1, b, pos-tree[type][idx], type);
 		tree[type][node] = tree[type][node*2] + tree[type][node*2+1];
 }
 int query( int node, int a, int b, int pos, int type)
 {
 	if( a==b )
 	{
 		return tree[type][node];
 	}
 	int mid = (a+b)/2;
 	if( pos<=mid )
 	{
 		return query( node*2, a, mid, pos, type);
 	}
 	else
 		return query( node*2+1, mid+1, b, pos, type);
 }
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}

int lcm(int a,int b)
{
	int val=__gcd(a,b);
	return((a*b)/val);
}

int main()
{
	ios::sync_with_stdio(false);
	memset( info , 0, sizeof(info) );
	memset( tree, 0, sizeof(tree) );
	int i, n, k, q, val, j;
	string s;
	char ch;
	cin >> s;
	n = s.length();
	for( i=0;i<n;i++ )
	{
		info[ s[i] - 97 ][ i+1 ]++;
	}
/*	for( i=0;i<26;i++ )
	{
		for( j=1;j<=n;j++ )
		{
			cout << info[i][j] << " ";
		}
		cout << "\n";
	}*/
	for( i=0;i<26;i++ )
		build( 1, 1 ,n, i);
/*	for( i=0;i<26;i++ )
	{
		for( j=0;j<n;j++ )
		{
			val = query( 1, 1, n, j+1 , i);
			if(val)
			{
				ch = i + 97;
				cout << ch <<" found at " << j+1 << "\n";
			}
		}
	} */
	cin >> q;
	while( q-- )
	{
		cin >> k >> ch;
		i = ch - 97;
		update( 1, 1 ,n, k, i);
	}
	vector< char > print( n, '$' );
	for( i=0;i<26;i++ )
	{
		for( j=0;j<n;j++ )
		{
			val = query( 1, 1, n, j+1 , i);
			if( val )
			{
				ch = (char) (i+97);
				print[j] = ch;
			}
		}
	}
	for( i=0;i<n;i++ )
	{
		if( print[i] ^ ('$') )
			cout << print[i];
	}
	return 0;
}
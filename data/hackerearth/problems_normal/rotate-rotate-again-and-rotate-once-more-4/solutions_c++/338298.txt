/* Man Mohan Mishra aka m17
   IIIT - Allahabad */
#include <cstdio>
#include <cmath>
#include <cstring>
#include <climits>
#include <cstdlib>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <utility>
#include <string>
#include <vector>
#include <map>
#include <list>
#include <stack>
#include <queue>
#include <set>
#include <iterator>

#define MOD 1000000007
#define INF 1000000000000000000
#define PI acos(-1)

using namespace std;

int GCD (int a,int b) {
	if (b == 0) return a;
	return(a % b == 0 ? b : GCD(b,a % b));
}

long long int POW (long long int base,long long int exp) {
	long long int val;
	val = 1;
	while (exp > 0) {
		if (exp % 2 == 1) {
			val = (val * base) % MOD;
		}
		base = (base * base) % MOD;
		exp = exp / 2;
	}
	return val;
}

struct stu {
	int dir[4];
};

struct stu tree[4000000];
int added[4000000];
int temp[4];

void init (int node,int b,int e) {
	int i;
	if (b > e) {
		return;
	}
	if (b == e) {
		for (i = 0; i < 4; i++) {
			tree[node].dir[i] = 0;
		}
		tree[node].dir[0] = 1;
	} else {
		init(2 * node,b,(b + e) / 2);
		init(2 * node + 1,(b + e) / 2 + 1,e);
		for (i = 0; i < 4; i++) {
			tree[node].dir[i] = tree[2 * node].dir[i] + tree[2 * node + 1].dir[i];
		}
	}
}

void update (int node,int b,int e,int l,int r,int k,int extra) {
	int i;
	if (b > r || e < l) {
		for (i = 0; i < 4; i++) {
			temp[(i + extra) % 4] = tree[node].dir[i];
		}
		for (i = 0; i < 4; i++) {
			tree[node].dir[i] = temp[i];
		}
		added[node] = (added[node] + extra) % 4;
		return;
	}
	if (b >= l && e <= r) {
		for (i = 0; i < 4; i++) {
			temp[(i + k + extra) % 4] = tree[node].dir[i];
		}
		for (i = 0; i < 4; i++) {
			tree[node].dir[i] = temp[i];
		}
		added[node] = (added[node] + k + extra) % 4;
	} else {
		for (i = 0; i < 4; i++) {
			temp[(i + extra) % 4] = tree[node].dir[i];
		}
		for (i = 0; i < 4; i++) {
			tree[node].dir[i] = temp[i];
		}
		extra = (extra + added[node]) % 4;
		added[node] = 0;
		update(2 * node,b,(b + e) / 2,l,r,k,extra);
		update(2 * node + 1,(b + e) / 2 + 1,e,l,r,k,extra);
		for (i = 0; i < 4; i++) {
			tree[node].dir[i] = tree[2 * node].dir[i] + tree[2 * node + 1].dir[i];
		}
	}
}

struct stu query (int node,int b,int e,int l,int r,int extra) {
	struct stu s1,s2;
	int i;
	if (b > r || e < l) {
		for (i = 0; i < 4; i++) {
			temp[(i + extra) % 4] = tree[node].dir[i];
		}
		for (i = 0; i < 4; i++) {
			tree[node].dir[i] = temp[i];
		}
		added[node] = (added[node] + extra) % 4;
		for (i = 0; i < 4; i++) {
			s1.dir[i] = 0;
		}
		return s1;
	}
	if (b >= l && e <= r) {
		for (i = 0; i < 4; i++) {
			temp[(i + extra) % 4] = tree[node].dir[i];
		}
		for (i = 0; i < 4; i++) {
			tree[node].dir[i] = temp[i];
		}
		added[node] = (added[node] + extra) % 4;
		return tree[node];
	} else {
		for (i = 0; i < 4; i++) {
			temp[(i + extra) % 4] = tree[node].dir[i];
		}
		for (i = 0; i < 4; i++) {
			tree[node].dir[i] = temp[i];
		}
		extra = (extra + added[node]) % 4;
		added[node] = 0;
		s1 = query(2 * node,b,(b + e) / 2,l,r,extra);
		s2 = query(2 * node + 1,(b + e) / 2 + 1,e,l,r,extra);
		for (i = 0; i < 4; i++) {
			s1.dir[i] = s1.dir[i] + s2.dir[i];
		}
		return s1;
	}
}

int main()
{
	int n,m,l,r,k,i,ans;
	char s[2];
	struct stu ss;
	scanf("%d%d",&n,&m);
	init(1,0,n - 1);
/*	for (int i = 1; i <= 31; i++) {
		printf("%d ----> ",i);
		for (int j = 0; j < 4; j++) {
			printf("%d ",tree[i].dir[j]);
		}
		printf("\n");
	}*/
	while (m --) {
		scanf("%s",s);
		if (s[0] == 'C') {
			scanf("%d%d%d",&l,&r,&k);
			l--;
			r--;
			k = k % 4;
			update(1,0,n - 1,l,r,k,0);
		} else if (s[0] == 'A') {
			scanf("%d%d%d",&l,&r,&k);
			l--;
			r--;
			k = 4 - k % 4;
			update(1,0,n - 1,l,r,k,0);
		} else if (s[0] == 'Q') {
			scanf("%d%d",&l,&r);
			l--;
			r--;
			ss = query(1,0,n - 1,l,r,0);
			ans = 0;
			for (i = 0; i < 4; i++) {
				ans = max(ans,ss.dir[i]);
			}
			printf("%d\n",ans);
		}
/*		for (int i = 1; i <= 31; i++) {
			printf("%d ----> ",i);
			for (int j = 0; j < 4; j++) {
				printf("%d ",tree[i].dir[j]);
			}
			printf("\n");
		}*/
	}
	return 0;
}
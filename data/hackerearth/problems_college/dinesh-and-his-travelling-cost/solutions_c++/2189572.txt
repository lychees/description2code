#include <bits/stdc++.h>
using namespace std;

#define V 503
int minDistance(int dist[], bool sptSet[]){
   int min = INT_MAX, min_index;
   for (int v = 0; v < V; v++){
     if (sptSet[v] == false && dist[v] <= min){
         min = dist[v], min_index = v;}}
   return min_index;
}
int dist[V]; 
void dijkstra(int graph[V][V], int src){
     bool sptSet[V];
     for (int i = 0; i < V; i++){
        dist[i] = INT_MAX, sptSet[i] = false; }
    dist[src] = 0;
    for (int count = 0; count < V-1; count++){
    	int u = minDistance(dist, sptSet);
        sptSet[u] = true;
       for (int v = 0; v < V; v++){
       	if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX 
                                       && dist[u]+graph[u][v] < dist[v]){
            dist[v] = dist[u] + graph[u][v];}
     }}}
 
int roads;
int A,B,W,Q,R,src;

int main()
{
   int graph[V][V];
   memset(graph,0,sizeof(graph));
   scanf("%d",&roads);
   while(roads--){
   	scanf("%d%d%d",&A,&B,&W);
   	graph[A][B] = W;
   	graph[B][A] = W;}
   scanf("%d",&src);
   dijkstra(graph,src);
   scanf("%d",&Q);
   while(Q--){
   	 scanf("%d",&R);
   	 if( dist[R] == INT_MAX){
   	 	printf("NO PATH\n");
   	 }
   	 else{ printf("%d\n",dist[R]);
   }
   
   }
   
 
    return 0;
}
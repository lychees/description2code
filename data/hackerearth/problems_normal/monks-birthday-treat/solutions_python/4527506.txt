from collections import defaultdict
adj = defaultdict(list)
N, D = map(int, raw_input().split(" "))
for i in range(D):
	ab = raw_input()
	a, b = map(int, ab.strip().split(" "))
	adj[a].append(b)
visited = [False]*(N+1)
def dfs(adj, node):
	#print "node ", node
	size = 1
	visited[node] = True
	for neighbour in adj[node]:
		if not visited[neighbour]:
			#print "neigh ", neighbour
			size += dfs(adj, neighbour)
	return size
group_size = N
for node in range(1, len(visited)):
	if True: #not visited[node]:
		visited = [False]*(N+1)
		size = dfs(adj, node)
		#print "size ", size
		group_size = min(group_size, size)
print group_size
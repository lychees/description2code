#include<bits/stdc++.h>
using namespace std;
int n;
struct qu
{
  int data;
  int distance;
  struct qu* next;
};
struct qu* head=NULL;
struct qu* rear=NULL;

void push(int data,int distance)
{
    struct qu* temp=(struct qu*)malloc(sizeof(struct qu));
    temp->data=data;
    temp->distance=distance;
    temp->next=NULL;
    if(head==NULL&&rear==NULL)
     {head=temp; rear=temp; return; }

    rear->next=temp;
    rear=temp;
}

void pop()
{
  if(head==rear)
   {head=NULL; rear=NULL; return; }
   head=head->next;
}

struct graph
{
   int vertex;
   struct graph* next;
};
struct graph* g[10000];

void insert(int vi,int vj)
{
struct graph* temp=(struct graph*)malloc(sizeof(struct graph));
temp->vertex=vj;
temp->next=NULL;
if(g[vi]==NULL)
  {g[vi]=temp; return; }
  struct graph* temp1=g[vi];
  while(temp1->next!=NULL)
  temp1=temp1->next;
  temp1->next=temp;
}

int  bfs()
{
  push(1,0);
bool visited[100002];
for(int i=1;i<=n;i++)
  visited[i]=false;

while(head!=NULL)
{
   int current_vertex=head->data;
   int current_distance=head->distance;
   if(current_vertex==n)
   return current_distance;
   pop();
   struct graph* temp=g[current_vertex];
   while(temp!=NULL)
   {
      if(visited[temp->vertex]==false)
     {
       visited[temp->vertex]=true;
       push(temp->vertex,current_distance+1);
     }
     temp=temp->next;
   }

}


}



main()
{
int t;
cin>>t;
for(int z=0;z<t;z++)
{
int m;
cin>>n>>m;
for(int i=1;i<=n;i++)
 g[i]=NULL;
for(int i=0;i<m;i++)
{  int a,b;
    cin>>a>>b;
    insert(a,b);
    insert(b,a);
}
head=NULL; rear=NULL;
int result=bfs();
cout<<result<<endl;
}
}

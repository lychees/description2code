#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
using namespace std;

int const N = 241;
int const INF = 1e4;

int test, n, m, k, d[N], minD[N][N], a[N][N];

vector<pair<int, int> > e[N];
set<pair<int, int> > q;

void clearD(){
	for(int i=0;i<N;++i){
		d[i] = INF;
	}
	q.clear();
}

void clear(){
	for(int i=0;i<N;++i){
		e[i].clear();
		for(int j=0;j<N;++j){
			minD[i][j] = INF;
		}
	}
	clearD();
}

void calcDijk(int id){
	clearD();
	d[id] = 0;
	q.insert(make_pair(0, id));
	while(q.size()){
		pair<int, int> p = (*q.begin());
		q.erase(p);
		int id = p.second;
		int dist = p.first;
		for(int i=0;i<e[id].size();++i){
			int to = e[id][i].second;
			int co = e[id][i].first;
			if(d[to] > dist + co){
				q.erase(make_pair(d[to], to));
				d[to] = dist + co;
				q.insert(make_pair(d[to], to));
			}
		}
	}
	for(int i=1;i<=n;++i){
		minD[id][i] = d[i];
	}
}

int buildHung(int n, int m){
	vector<int> u (n+1), v (m+1), p (m+1), way (m+1);
	for (int i=1; i<=n; ++i) {
		p[0] = i;
		int j0 = 0;
		vector<int> minv (m+1, INF + 100);
		vector<char> used (m+1, false);
		do {
			used[j0] = true;
			int i0 = p[j0],  delta = INF + 100,  j1;
			for (int j=1; j<=m; ++j)
				if (!used[j]) {
					int cur = a[i0][j]-u[i0]-v[j];
					if (cur < minv[j])
						minv[j] = cur,  way[j] = j0;
					if (minv[j] < delta)
						delta = minv[j],  j1 = j;
				}
			for (int j=0; j<=m; ++j)
				if (used[j])
					u[p[j]] += delta,  v[j] -= delta;
				else
					minv[j] -= delta;
			j0 = j1;
		} while (p[j0] != 0);
		do {
			int j1 = way[j0];
			p[j0] = p[j1];
			j0 = j1;
		} while (j0);
	}

	return -v[0];
}

void readAndSolve(){
	scanf("%d%d%d",&n,&m,&k);
	for(int i=0;i<m;++i){
		int a, b, c;
		scanf("%d%d%d",&a,&b,&c);
		e[a].push_back(make_pair(c, b));
		e[b].push_back(make_pair(c, a));
	}
	for(int i=1;i<=n;++i){
		calcDijk(i);

	}
	for(int i=1;i<=k;++i){
		for(int j=1;j<=k;++j){
			a[i][j] = minD[i][n-j+1];
		}
	}
	printf("%d\n", buildHung(k, k));
}

int main(){
#ifdef _DEBUG
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif
	scanf("%d",&test);
	while(test--){
		clear();
		readAndSolve();
	}






	return 0;
}
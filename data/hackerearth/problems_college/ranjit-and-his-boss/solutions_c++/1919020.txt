#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
using namespace std;

typedef pair <int, int> ii;

const int Maxn = 100005;
const int Maxm = 200015;

int n;
ii p[Maxn];
set <ii> S;
vector <int> Y[Maxn], X[Maxn], D[Maxm];
int res;

bool Have(int x, int y) { return S.find(ii(x, y)) != S.end(); }

void Check(const ii &p, int delt)
{
	if (Have(p.first - delt, p.second - delt) && 
		Have(p.first - delt, p.second) &&
		Have(p.first, p.second - delt)) res++;
}

int main()
{
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
    	scanf("%d %d", &p[i].first, &p[i].second);
    	S.insert(p[i]);
    }
    sort(p, p + n);
    for (int i = 0; i < n; i++) {
    	int x = p[i].first, y = p[i].second, d = p[i].first - p[i].second + Maxn;
    	if (X[x].size() <= Y[y].size() && X[x].size() <= D[d].size())
    		for (int j = 0; j < X[x].size(); j++) {
    			int delt = y - X[x][j];
    			Check(p[i], delt);
    		}
    	else if (Y[y].size() <= D[d].size())
    		for (int j = 0; j < Y[y].size(); j++) {
    			int delt = x - Y[y][j];
    			Check(p[i], delt);
    		}
    	else for (int j = 0; j < D[d].size(); j++) {
    			int delt = x - D[d][j];
    			Check(p[i], delt);
    		}
    	X[x].push_back(y); Y[y].push_back(x); D[d].push_back(x);
    }
    printf("%d\n", res);
    return 0;
}

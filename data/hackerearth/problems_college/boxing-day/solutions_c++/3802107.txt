#include<iostream>
#include<cstdio>
#include<string>
#include<vector>
#include<cstring>
#include<iomanip> 
#include<utility> 
#include<climits>
#include<climits>
#include<cmath>
#include<algorithm>


using namespace std;


#define LL long long int
#define sc1(x) scanf("%d", &x)
#define sc2(x, y) scanf("%d%d", &x, &y)
#define sc3(x, y, z) scanf("%d%d%d", &x, &y, &z)
#define pr1(x) printf("%d\n", x)
#define FOR(i, a, n) for(int i=a;i<n;i++)
#define pp pair<int, int>
#define pb push_back 

#define MAX 100005
#define MOD 1000000007LL

struct node {
	int p, height;	
} parents[MAX];


int find(int x) {
	if(parents[x].p) {
		//compression
		return parents[x].p = find(parents[x].p);
	} else {
		return x;
	}
}

//Reducing tree height
void doUnion(int src, int dest) {
	if(parents[src].height > parents[dest].height) {
		parents[src].p = dest;
	} else if(parents[src].height < parents[dest].height) {
		parents[dest].p = src;
	} else {
		parents[src].p = dest;
		parents[src].height++;
	}
}




int main() {

	int n, k, x, y;

	sc2(n, k);
	FOR(i, 0, n+1) {
		parents[i].p = parents[i].height = 0;
	}

	int cnt = n;
	LL result = 0;
	FOR(i, 0, k) {
		sc2(x, y);
		if(x != y) {
			doUnion(x, y);
			cnt--;
		}
	}

	pr1(cnt);

	return 0;
}














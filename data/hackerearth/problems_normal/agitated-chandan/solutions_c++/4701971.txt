#include <iostream>
#include <map>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int main() {
	int t;
	cin >> t;
	while(t--) {
		map<int, vector<pair<int,int> > > Graph;
		int nodes;
		cin >> nodes;
		int n = nodes - 1;
		int dist[nodes+1];
		bool visited[n+1];
		for(int i = 0; i < nodes+1; ++i) {
			dist[i] = -1;
			visited[i] = false;
		}
		while(n--) {
			int a,b,c;
			cin >> a >> b >> c;
			Graph[a].push_back(make_pair(b,c));
			Graph[b].push_back(make_pair(a,c));
		}
		queue<int> q;
		q.push(1);
		dist[1] = 0;
		while(!q.empty()) {
			int node = q.front();
			q.pop();
			visited[node] = true;
			vector<pair<int,int> > edges = Graph[node];
			vector<pair<int,int> >::iterator it;

			for(it = edges.begin(); it != edges.end(); ++it)
				if(!visited[it->first]) {
					q.push(it->first);
					dist[it->first] = dist[node] + it->second;
				}

		}
		int lastNode = max_element(dist,dist+nodes+1) - dist;

		for(int i = 0; i < nodes+1; ++i) {
			visited[i] = false;
		}
		dist[lastNode] = 0;
		q.push(lastNode);
		while(!q.empty()) {
			int node = q.front();
			q.pop();
			visited[node] = true;
			vector<pair<int,int> > edges = Graph[node];
			vector<pair<int,int> >::iterator it;

			for(it = edges.begin(); it != edges.end(); ++it)
				if(!visited[it->first]) {
					q.push(it->first);
					dist[it->first] = dist[node] + it->second;
				}
		}
		int last = max_element(dist,dist+nodes+1) - dist;
		int max = dist[last];
		int cost = 0;
		if ((max > 100) && (max <=1000))
			cost = 100;
		else if (max > 1000 && max <= 10000)
			cost = 1000;
		else if (max > 10000)
			cost = 10000;
		cout<<cost<<" "<<max<<endl;

	}
}
#include<iostream>
#include<cmath>
#include<map>
#include<string>
#include<cstdlib>
#include<cstdio>
#include<vector>
#include<set>
#include<iomanip>
#include<algorithm>
#include<utility>
#define MOD 1000000007
using namespace std;
typedef long double LD;
typedef long long int LL;
typedef unsigned long long int ULL;

int p[25] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};
set<int> primeSet ( p, p + 25 );

bool isPrime( int n )
{
	return ( primeSet.find( n ) != primeSet.end() );
}

int main()
{
	int t;
	cin >> t;
	while( t-- )
	{
		int n;
		cin >> n;
		int composite[10], prime[10];
		int primePower = 0, compositePower = 0;
		for( int i=0; i<n; ++i )	cin >> composite[i];
		for( int i=0; i<n; ++i )	cin >> prime[i];
		for( int i=0; i<n; ++i )
		{
			if( !isPrime( composite[i] ) )
			{
				// composites sent a composite
				if( isPrime( prime[i] ) )
				{
					// primes also sent a prime
					if( composite[i] > prime[i] )	compositePower += composite[i] - prime[i];
					else if( composite[i] < prime[i] )	primePower += prime[i] - composite[i];
				}
				else
				{
					// primes did not send a prime
					compositePower += composite[i];
				}
			}
			else
			{
				// composites did not send a composite
				if( isPrime( prime[i] ) )
				{
					// but primes sent a prime
					primePower += prime[i];
				}
				else
				{
					// primes also did not send a prime
					if( composite[i] > prime[i] )	compositePower += composite[i] - prime[i];
					else if( composite[i] < prime[i] )	primePower += prime[i] - composite[i];
				}
			}
		}
		if( compositePower > primePower)	cout << "The Composites";
		else if( compositePower < primePower )	cout << "The Primes";
		else	cout << "Tie";
		cout << endl;
	}
	return 0;
}
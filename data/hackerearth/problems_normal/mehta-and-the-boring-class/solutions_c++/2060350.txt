#include<iostream>
#include<string>
#include<bits/stdc++.h>
#include<algorithm>
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define SET(a,b) memset(a,b,sizeof(a))
#define TR(a,t) for(typeof(a.begin()) t=a.begin();t!=a.end();t++)
#define REP(i,l,h) for(int i=(l); i<=(h);i++)
#define REPD(i,h,l) for(int i=(h);i>=(l);i--)
#define ALL(a) a.begin(),a.end()
#define DRT()  int t; cin>>t; while(t--)
#define PRSNT(a,e) (a.find(e) != a.end())
#define MINH priority_queue<int, vector<int>, greater<int> >
#define N 1000001
typedef long long LL;
using namespace std;
int sieve[1000001],factors[N];
void set_prime_numbers() {
        REP(i,2,1000001) sieve[i]=1;
        REP(i,2,1000) {
                if(sieve[i]==1) {
                        for(int j=i*i;j<1000001;j=j+i) {
                                sieve[j]=0;
                        }
                }
        }
}
int main()
{
        int c=0,k;
        set_prime_numbers();
        REP(i,0,N-1) {
                if(sieve[i]==1) 
                        for(int j=i;j<N;j+=i) {
                                c=0;
                                k=j;
                                while(k%i==0) {
                                        c++;
                                        k/=i;
                                }
                                factors[j]+=c;
                        }
        }
        REP(i,1,N-1) factors[i]+=factors[i-1];
        DRT() {
                int a,b;              
                scanf("%d%d",&a,&b);
                printf("%d\n",factors[b]-factors[a-1]);
        }
        return 0;
}

#include<stdio.h>
#include<iostream>
#include<string.h>
#include <iterator>
#include <algorithm>
#include<map>
#include<string>
#include<vector>
#include<stack>
#include<queue>
#include<limits>
#include<limits.h>
#include<math.h>
using namespace std;
/*
struct node
{
    int r,c;
    int depth;
};
int visited[1000][1000];
char arr[1000][1000];
int cnt=0;
node q[1000000];
int ma;
int ans=0;
int flag=0;
void findPath( int n, int m, node t , int r_e , int c_e)
{
    int arr_r[]={-1,-1,-1,0,0,1,1,1};
    int arr_c[]={-1,0,1,-1,1,-1,0,1};
    int arr_r_s[]={-1,1,0,0};
    int arr_c_s[]={0,0,-1,1};
    for(int i=0;i<4;i++)
    {
        int rr=t.r+arr_r_s[i];
        int cc=t.c+arr_c_s[i];

        if(rr<0 || rr>=n)
            continue;
        if(cc<0 || cc>=m)
            continue;
        if(visited[rr][cc]==1)
            continue;
        if(arr[rr][cc]=='T')
            continue;

        node temp;
        temp.r=rr;
        temp.c=cc;
        temp.depth=t.depth+1;
        q[cnt++]=temp;
        visited[rr][cc]=1;
        if(rr==r_e && cc==c_e)
        {
            cout<<temp.depth<<endl;
            flag=1;
            return ;
        }
    }
}
void path(int n,int m , int r_e , int c_e)
{
    int start=0;
    while(start<cnt)
    {
        node t = q[start++];
        findPath( n , m, t , r_e , c_e);
        if(flag==1)
            return;
    }
}

*/
struct node
{
    int data;
    int startTime;
    int endTime;
    int height;
    int visited;
};
int arr[100000];
node preprocessingArray[100000];
int cnt=0;
vector<vector<int> >adj(100001);
void preprocessing(int t , int p ,  int n)
{
    if(preprocessingArray[t].visited == 1)
        return;
    //cout<<t<<" "<<p<<endl;

    preprocessingArray[t].visited=1;
    preprocessingArray[t].startTime=cnt++;
    if(p!=-1)
        preprocessingArray[t].height=preprocessingArray[p].height+1;
    for(int i=0;i<adj[t].size();i++)
    {
        if(preprocessingArray[adj[t][i]].visited==1)
            continue;

        preprocessing( adj[t][i] , t, n);
    }
    preprocessingArray[t].endTime=cnt++;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        cnt=0;
        int n;
        cin>>n;

        for(int i=0;i<n;i++)
            cin>>arr[i];


        for(int i=0;i<n;i++)
        {
            adj[arr[i]].push_back(i+1);

        }


        for(int i=0;i<=n;i++)
        {
            if(i==0)
                preprocessingArray[i].height=0;
            preprocessingArray[i].data=i;
            preprocessingArray[i].visited=0;
        }


        preprocessing( 0 ,-1, n);



        int q;
        cin>>q;
        while(q--)
        {
            int u,v;
            cin>>u>>v;
            if(preprocessingArray[u].startTime > preprocessingArray[v].startTime && preprocessingArray[u].endTime < preprocessingArray[v].endTime )
            {
                cout<<preprocessingArray[u].height-preprocessingArray[v].height-1<<endl;
            }
            else
            {
                cout<<"-1\n";
            }
        }

        for(int i=0;i<=n;i++)
        {
            adj[i].erase (adj[i].begin(),adj[i].end());
        }
    }
    return 0;
}


#include<bits/stdc++.h>
#define assn(n,a,b) assert(n<=b && n>=a)
using namespace std;
#define pb push_back
#define mp make_pair
#define clr(x) x.clear()
#define sz(x) ((int)(x).size())
#define F first
#define S second
#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,b) for(i=0;i<b;i++)
#define rep1(i,b) for(i=1;i<=b;i++)
#define pdn(n) printf("%d\n",n)
#define sl(n) scanf("%lld",&n)
#define sd(n) scanf("%d",&n)
#define pn printf("\n")
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;
#define MOD 1000000007ll
LL mpow(LL a, LL n) 
{LL ret=1;LL b=a;while(n) {if(n&1) 
    ret=(ret*b)%MOD;b=(b*b)%MOD;n>>=1;}
return (LL)ret;}
int main()
{
    int t;
    sd(t);
    while(t--)
    {
        LL n,a,b,flag=0;
        sl(a),sl(b),sl(n);
        if(a==b){cout << n*a << endl;continue;}
        if(a==1 || b==1){cout << n << endl;continue;}
        LL mini,maxi,mid,p,prevx,prevy;
        mini=1,maxi=MOD,prevx=-1,prevy=-1;
        while(1)
        {
            //            cout << mini << " " << maxi << " ";
            mid=(mini+maxi)/2;
            p=mid + (mid*a)/b - (mid*a)/((a/__gcd(a,b))*b);
            //            cout << p << endl;
            if(p>n)maxi=mid-1;
            else if(p<n)mini=mid+1;
            else{flag=1; break;}
            if(mini==prevx && maxi==prevy)break;
            prevx=mini,prevy=maxi;
        }
        if(flag==1)
            cout << a*mid << endl;
        else{
            //            cout << "fuck" << endl;
            mini=1,maxi=MOD;
            while(1)
            {
                //            cout << mini << " " << maxi << " ";
                mid=(mini+maxi)/2;
                p=(mid*b)/a + (mid) - (mid*b)/(a*b);
                p=mid + (mid*b)/a - (mid*b)/((a/__gcd(a,b))*b);
                //            cout << p << endl;
                if(p>n)maxi=mid-1;
                else if(p<n)mini=mid+1;
                else{flag=1; break;}
            }
            cout << mid*b << endl;
        }
    }
    return 0;
}

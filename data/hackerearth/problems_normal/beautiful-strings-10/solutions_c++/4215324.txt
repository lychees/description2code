#include <iostream>
#include <vector>
const long base = 100001;
const long mod = base*base + base + 1;
//const long mod = base*base+base+1;

void rebalance(long A[], int Q, int index)
{
	int left = index*2;
	int right = index*2+1;
	if(right <= Q)
	{
		long tmp = (A[left] > A[right])?A[left]:A[right];
		if (A[index] < tmp)
		{
			if (A[left] > A[right])
			{
				A[left] = A[index];
				A[index] = tmp;
				rebalance(A,Q,left);
			}else
			{
				A[right] = A[index];
				A[index] = tmp;
				rebalance(A,Q,right);
			}
		}
	}else if (left == Q)
	{
		long tmp = A[left];
		if (A[index] < tmp)
		{
			A[left] = A[index];
			A[index] = tmp;
		}
	}
};

using namespace std;
int main()
{
	int T;
	cin >> T;
	for(int i = 0; i < T; ++i)
	{
		string str;
		cin >> str;
		int N = str.size();
		long* A = new long[N+2];
		A[0] = 0;
		A[1] = 0;
		for(int j = 0; j < N; ++j)
		{
			if (str[j] == 'a')
			{
				A[j+2] = (A[j+1] + 1)%mod;
			}else if (str[j] == 'b')
			{
				A[j+2] = (A[j+1] + base)%mod;
			}else if (str[j] == 'c')
			{
				A[j+2] = (A[j+1] + base*base)%mod;
			}else
			{
				A[j+2] = A[j+1]%mod;
			}
		}
		int Q = N+1;
		for(int j = Q/2; j >= 1;--j)
		{
			rebalance(A,Q,j);
		}
		for(int j = Q; j>= 2; --j)
		{
			rebalance(A,j,1);
			long tmp = A[1];
			A[1] = A[j];
			A[j] = tmp;
		}
		long count = 0;
		long num = 1;
		for(int j = 2; j <= Q; ++j)
		{
			//cout << A[j] << endl;
			if (A[j] == A[j-1])
			{
				++num;
			}else
			{
				count += num*(num-1)/2;
				num = 1;
			}
		}
		count += num*(num-1)/2;
		cout << count << endl;
		
	}
    return 0;
}

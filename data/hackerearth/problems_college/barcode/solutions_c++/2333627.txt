#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
#define F(i,a,b) for(ll i=a;i<=(int)b;i++)
#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)
#define ALL(a) (a.begin()),(a.end())
#define ZERO(a) memset(a,0,sizeof(a))
#define mp make_pair
#define pb push_back 
#define X first
#define Y second
#define pi 3.14159265 
#define sd(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n) 
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;  

const int MOD=(int)1e9+7;

const int SIZE=(int)5e5+2;

int dp[1010][2]; //minimum colors changed

string s[1010];

int black[1010]={0}; //cost to make all the columns till i = hash

int main(){
    
    int n,m,x,y;
    
    sd(n); sd(m); sd(x); sd(y);
    
    F(i,0,n-1)
    cin>>s[i];
    
    F(i,0,m-1){
        
        F(j,0,n-1)
        if(s[j][i]=='.')
            black[i]++;
        
        if(i!=0)
        black[i]+=black[i-1];
    }
    
    //right limit
    F(r,0,m-1){
        
        dp[r][0]=10000000;
        dp[r][1]=dp[r][0];
        
        //left limit
        for(int l=r-x+1;l>=r-y+1;l--){
            
            if(l<0) break;
            
            int toBlack=0;
            int toWhite=0;
            
            if(l-1<0)
            {
                toBlack=black[r];
                toWhite=(r+1)*n-toBlack;
            }
            else {
                
                toBlack=black[r]-black[l-1];
                toWhite=(r-l+1)*n-toBlack;
                
            }
            
            if(l-1>=0)
            {
                dp[r][0]=min(toBlack+dp[l-1][1],dp[r][0]);
                dp[r][1]=min(toWhite+dp[l-1][0],dp[r][1]);
            
            }
            else
            {
                dp[r][0]=min(toBlack,dp[r][0]);
                dp[r][1]=min(toWhite,dp[r][1]);
            }
        
        }
        
    }
    
    cout<<min(dp[m-1][0],dp[m-1][1]);
    
    return 0;
}
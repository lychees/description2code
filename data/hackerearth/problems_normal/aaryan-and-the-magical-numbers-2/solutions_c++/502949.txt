#include<bits/stdc++.h>
using namespace std;
vector<long long int> tenpower;
vector<long long int> sixpower;
vector<long long int>nearestcount;
long long countways=0;
#include<stdio.h>
#define GETCHAR getchar//_unlocked	
inline  long long  readlong() 
{
	int flag=1;
    long long n = 0;
    char c;
    while (1)
    { 
              c=GETCHAR();
              if(c>='0'&&c<='9') {n = n * 10 + c - '0';flag=0;}
              else if(flag!=1) break; 
                              
    }
    return n;
}
 
long long recursion(long long int n,int countdigits){
	if(countdigits==1){
		//only one digit left	
		if(n<2)
		return 0;
		else if(n>=2 && n<3)
		return 1;
		else if(n>=3 && n<5)
		return 2;
		else if(n>=5 && n<7)
		return 3;
		else if(n>=7)
		return 4;
	}
	if(countdigits==0) return 0;
	if(n==0) return 0;
	
	long long nearesttenpower=tenpower[countdigits-1];
	int firstnumber=n/nearesttenpower;
	
  	long long countways=0;
  	
	if(firstnumber)
	    countways=nearestcount[countdigits-1];
	
	
  	for(int i=1;i<firstnumber;i++)
  	{
  	  	if(i==2 || i==3 || i==5 || i==7)
  	  	  countways+=nearesttenpower;
  	  	else
  	  	  countways+=nearestcount[countdigits-1];
  	}
  	  
  	if(firstnumber==2 || firstnumber==3 || firstnumber==5 || firstnumber==7)
		countways+=(n%nearesttenpower)+1;
  	else
  	  countways+=recursion(n%nearesttenpower,countdigits-1);
  	  
  	return countways;
}

int main(){
	
	tenpower.push_back(1);
	sixpower.push_back(1);
	for(int i=1;i<=18;i++){
		tenpower.push_back(tenpower[i-1]*10);
		sixpower.push_back(sixpower[i-1]*6);
	}
	
	nearestcount.push_back(4);
	
	for(int i=1;i<=18;i++){
		nearestcount.push_back(tenpower[i]-sixpower[i]);
	}
	/*
	for(int i=0;i<=18;i++){
		cout<<tenpower[i]<<" ";
		cout<<sixpower[i]<<" ";
		cout<<nearestcount[i]<<" ";
		cout<<"\n";
	}
	*/
	long long int t;
	t=readlong();
	while(t--){
		long long int n;
		n=readlong();
		if(n<2){
			cout<<"0\n";
		}
		else{
			long long int temp=n;
			int countdigits=0;
			while(temp>0)
			{
				int rem=temp%10;
				countdigits++;
				temp/=10;
			}
		
			cout<<recursion(n,countdigits)<<"\n";
		}
	}
}
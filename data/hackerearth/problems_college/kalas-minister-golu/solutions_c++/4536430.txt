#include<bits/stdc++.h>

#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define len(s) s.length()
#define forp(i,a,b) for( i=a;i<=b;i++)
#define rep(i,n)    for( i=0;i<n;i++)
#define ren(i,n)    for( i=n-1;i>=0;i--)
#define forn(i,a,b) for( i=a;i>=b;i--)
#define all(v) v.begin(),v.end()
#define b(v) v.begin()
#define e(v) v.end()
#define mem(n,m) memset(n,m,sizeof(n))
#define lb lower_bound
#define ub upper_bound
#define pii pair<int,int>
#define pll pair<long long,long long>
#define vii vector<int>
#define vll vector<long long>
#define gl(cin,s)  getline(cin,s);
#define bitc(n) __builtin_popcountll(n)
#define present(s,x) (s.find(x) != s.end()) 
#define cpresent(s,x) (find(all(s),x) != s.end()) 
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++) 

#define boost ios_base::sync_with_stdio(0)
#define MOD 1000000007
#define EPSILON 1e-9
#define PI 3.14159265358979323846
#define SIZE 100001

typedef long long  ll;
typedef unsigned long long ull;
typedef long double  ldo;
typedef double  db ;
using namespace std;
int sz[SIZE];
int a[SIZE];
int cost[SIZE];
multiset<int> s;
int root(int i)
{
	while(i!=a[i])
	i=a[i];
	return i;
}
void merge(int x,int y)
{
	int A=root(x);
	int B=root(y);
	if(sz[A]<=sz[B]){
		sz[B]+=sz[A];
		cost[B]=min(cost[B],cost[A]);
		a[A]=B;
	}
	else{
		a[B]=A;
		cost[A]=min(cost[B],cost[A]);
		sz[A]+=sz[B];
	}
	return ;
}
int main()
{  	
	/* #ifndef ONLINE_JUDGE
	freopen(fi, "r", stdin);
	#endif */
	//freopen("route.in","r",stdin);
	//freopen("route.out","w",stdout);
	//cin.ignore();
	//cin.clear();
	boost;
	//cin.tie(0);
	int t,n,m,i,x,y;
	cin>>t;
	while(t--){
		cin>>n>>m;
		forp(i,1,n){
			cin>>cost[i];
		}
		forp(i,1,n){
			a[i]=i;
			sz[i]=1;
		}
		forp(i,1,m){
			cin>>x>>y;
			if(root(x)!=root(y)){
				merge(x,y);
			}
		}
		s.clear();
		forp(i,1,n){
			if(root(i)==i)
			s.insert(cost[i]);
		}
		ll ans=0;
		tr(s,it){
			ans+=*it;
		}
		ans-=*(s.begin());
		ans*=*(s.begin());
		cout<<ans<<endl;
	}
	return 0;
}
#include <bits/stdc++.h>
using namespace std;
long long dist[101][101];
    long long path[101][101];
    typedef pair<long,long> PII;
priority_queue<PII, vector<PII>, greater<PII> > Q[101];
int main()  //takes v^3 time
{
    long long t;
    cin>>t;

    while(t--)
    {
        for(long long i = 1;i<= 100;i++)
        {
            for(long long j = 1;j<= 100;j++)
            {
                dist[i][j] = 1e+9;
                if(i==j)
                dist[i][j] = 0;
            }
        }


    long long v,e;
    cin>>v>>e;


    for(long long i = 0;i< e;i++) //assuming DAG
    {
        long long x,y,w;
        cin>>x>>y>>w;
        if(dist[x][y] > w)
        {dist[x][y] = w;
        dist[y][x] = w;
        path[x][y] = x;
        path[y][x] = y;}

    }
    for(long long k = 1;k<= v;k++)
    {
        for(long long i = 1;i<= v;i++)
        {
            for(long long j = 1;j<= v;j++)
            {
                if(dist[i][j] > dist[i][k]+dist[k][j])
                {
                    dist[i][j] = dist[i][k]+dist[k][j];
                    path[i][j] = path[k][j];

                }
            }
        }
    }
    
    long long s,a,h;
        cin>>s>>a>>h;
        for(long long j = 1;j<=v;j++)
            {
                if(s != j)
                Q[s].push(make_pair(dist[s][j],j));
            }



        pair<long long,long long> p;
        long long sum = 0;
        long long nmn = 0;
        int marked[101] = {0};
        marked[a] = marked[h] =marked[s]= 1;
        int k = 3;
        if(a == h)
            k--;
        if(h == s)
            k--;
        if(s == a)
            k--;
        if(k == 0)
            k = 1;



        int maxsum = 0;
        while(1)
            {
                p = Q[s].top();
                Q[s].pop();
                int f = 0;
                while(marked[p.second])
                {

                    if(Q[s].size() == 0)
                    {
                        cout<<"aa"<<endl;
                        f = 1;
                        break;
                    }
                   p = Q[s].top();
                   Q[s].pop();
                }
                if(f)
                    break;

                    //cout<<p.first<<" "<<dist[a][p.second]<<endl;
                    sum=p.first + 2*dist[a][p.second]+dist[p.second][h];
                    if(sum > maxsum)
                        maxsum = sum;
                    marked[p.second] = 1;
                    nmn++;

                if(nmn == v-k)
                    break;

            }

        cout<<maxsum<<endl;

    }




}

#include <bits/stdc++.h>
using namespace std;
#define s(x) scanf("%d",&x)
#define p(x) printf("%d",x)
#define MOD 1000000007
#define sl(x) scanf("%lld",&x)
#define pl(x) printf("%lld",x)
#define pnew printf("\n")
int arr[100][100];
bool vis[100][100];
int xx[8]={0,0,1,-1,1,1,-1,-1};
int yy[8]={1,-1,0,0,1,-1,1,-1};
int flag1=0,flag2=0;

bool issafe(int n,int i,int j)
{
	if(i>=0 && j>=0 && i<n && j<n) return true;
	else return false;
}

void findpath1(int n,int i,int j)
{
	vis[i][j]=1;
	if(i==n-1) flag1=1;
	for(int k=0;k<8;k++)
	{
		int a=xx[k]+i;
		int b=yy[k]+j;
		if(!issafe(n,a,b)) continue;
		else if(arr[a][b]==2) continue;
		else if(arr[a][b]==0 || vis[a][b]==1)
		{
			vis[a][b]=1;
			continue;
		}
		else if(arr[a][b]==1 && vis[a][b]==0)
		{
			findpath1(n,a,b);
		}
	}
}

void findpath2(int n,int i,int j)
{
	vis[i][j]=1;
	if(j==n-1) flag2=1;
	for(int k=0;k<8;k++)
	{
		int a=xx[k]+i;
		int b=yy[k]+j;
		if(!issafe(n,a,b)) continue;
		else if(arr[a][b]==0 || vis[a][b]==1)
		{
			vis[a][b]=1;
			continue;
		}
		else if(arr[a][b]==1) continue;
		else if(arr[a][b]==2 && vis[a][b]==0)
		{
			findpath2(n,a,b);
		}
	}
}

int main()
{
	int n;
	cin>>n;
	memset(vis,0,sizeof(vis));
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++) cin>>arr[i][j];
	}
/*	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++) cout<<arr[i][j]<<" ";
	}
	cout<<"\n"; */
	for(int i=0;i<n && flag1==0;i++)
	{
		if(arr[0][i]==1) 
		{
		//	cout<<i<<"=i\n";
			findpath1(n,0,i);
		}
	}
	for(int i=0;i<n && flag2==0;i++)
	{
		if(arr[i][0]==2) findpath2(n,i,0);
	}
	if(flag1==1 && flag2==1) cout<<"AMBIGUOUS\n";
	else if(flag1==1) cout<<"1\n";
	else if(flag2==1) cout<<"2\n";
	else cout<<"0\n";
    return 0;
}

#include<iostream>
#include<cstdio>
using namespace std;
long long int arr1[100005],arr2[100005],temp[100005];
long long int search_index(long long int n,long long int element)
{
    long long int i;
    for(i=0;i<n;i++)
    {
      if(arr1[i]==element)
        return i+1;
    }
}
long long int merge_sort(long long int low,long long int up);
long long int merge(long long int low1,long long int mid,long long int up2);
int main()
{
    long long int i,test,N,total_swaps;
    scanf("%lld",&test);
    while(test--)
    {
        scanf("%lld",&N);
        for(i=0;i<N;i++)
          scanf("%lld",&arr1[i]);
        for(i=0;i<N;i++)
            scanf("%lld",&arr2[i]);
        for(i=0;i<N;i++)
            arr2[i]=search_index(N,arr2[i]);
        total_swaps=merge_sort(0,N-1);
        printf("%lld\n",total_swaps);
    }
}
long long int merge(long long int left,long long int mid,long long int right)
{
    long long int i,j,k;
    long long int count=0;
    i=left;
    k=left;
    j=mid;
    while(i<=(mid-1) && j<=right)
    {
    if(arr2[i]<arr2[j])
    {
    temp[k++]=arr2[i++];
    }
    else
    {
    temp[k++]=arr2[j++];
    count+=(mid-i);
    }
    }
    while(i<=mid-1)
    temp[k++]=arr2[i++];
    while(j<=right)
    temp[k++]=arr2[j++];
    for(i=left;i<=right;i++)
    arr2[i]=temp[i];
    return count;
}
long long int merge_sort(long long int low,long long int up)
{
        long long int mid,count=0;
        if(low<up)
        {
            mid=(low+up)/2;
            count+=merge_sort(low,mid);
            count+=merge_sort(mid+1,up);
            count+=merge(low,mid+1,up);
        }
        return count;
}


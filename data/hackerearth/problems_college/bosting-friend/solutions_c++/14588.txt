#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <cstring>
#include <cmath>
#include <cassert>
#define FI first
#define SE second
#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i)
#define REV(i,a,b) for(int i= (int )a ; i >= (int)b ; --i)
#define REP(i,n) FOR(i,0,n)
#define DEP(i,n) REV(i,n,0)
#define PB push_back
#define PP pop()
#define MAX(x,y) (x)>(y)?(x):(y)
#define MIN(x,y) (x)<(y)?(x):(y)
#define PF push_front
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define V(x) vector< x >
#define Debug false
#define PRINT(x)        cout << #x << " " << x << endl
#define LET(x,a)         __typeof(a) x(a)
#define IFOR(i,a,b)     for(LET(i,a);i!=(b);++i)
#define EACH(it,v)      IFOR(it,v.begin( ),v.end( ))
#define PRESENT(c,x)    ((c).find(x) != (c).end( ))
#define SZ(x)           x.size()
#define CPRESENT(c,x)   (find(c.begin(),c.end(),x) != (c).end())
#define D(N)            int N
#define S(N)            scanf("%d",&N)
#define SD(N)           int N;scanf("%d",&N)
#define MP make_pair
#define EM empty()
using namespace std;
typedef pair<int ,int >   PI;
typedef pair<int,PI>    TRI;
typedef V( int ) VI;
typedef V( PI  )        VII;
typedef V( string )     VS;
typedef long long LL;
typedef long double LD;
 
 
 
int gcd(int a  , int b){
    if (!b)
        return a;
    else return gcd(b,a%b);
}
int main(int argc, char const *argv[]){
    int cases;
    S(cases);
    LL maxNumber;
    int percentNow , percentTotal;
    int totalGames;
    int friendGames;
    REP(z,cases){
        scanf("%lld %d %d\n",&maxNumber,&percentNow,&percentTotal);
        if (percentNow == 0)
            {
                totalGames = 1;
                friendGames = 0;
            }
        else if (percentNow == 100){
            totalGames = 1;
            friendGames = 1;
            }
        else{
            int fac = gcd(percentNow , 100-percentNow);
            totalGames = percentNow/fac + (100-percentNow)/fac;
            friendGames = percentNow/fac;
        }
        if (totalGames > maxNumber || ((friendGames < totalGames) && percentTotal == 100)|| ( friendGames > 0 && percentTotal == 0))
            printf("#%d:Broken\n",z+1);
        else printf("#%d:Possible\n",z+1);
        
    }
}
 
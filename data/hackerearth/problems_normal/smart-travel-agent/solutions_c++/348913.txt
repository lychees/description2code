#include<bits/stdc++.h>
// STL
#define pb push_back
#define LL long long
#define ULL unsigned long long
#define L long
#define VCTP vector<pair<LL,LL> >
#define PII pair<LL,LL>
#define PDD pair<double,double>
#define ft first
#define sd second
#define mp make_pair

// Useful constants
#define INF                         (int)1e9
#define EPS                         1e-9

// Useful hardware instructions
#define bitcount                    __builtin_popcount
#define gcd                         __gcd

// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(int i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                    memset(a, v, sizeof a)
#define sz(a)                       ((int)(a.size()))
#define mp                          make_pair

// Some common useful functions
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define checkbit(n,b)                ( (n >> b) & 1)
#define INDEX(arr,ind)               (lower_bound(all(arr),ind)-arr.begin())
#define swap(a,b)		     ( a=(a+b)-(b=a) )
using namespace std;
typedef long long ll;
#define gc getchar_unlocked
#define rd readInt()
inline long long readInt()
{
	long long n = 0, c = gc(), f = 1;
	while(c != '-' && (c < '0' || c > '9')) c = gc();
	if(c == '-') f = -1, c = gc();
	while(c >= '0' && c <= '9')
	n = (n<<3) + (n<<1) + c - '0', c = gc();
	return n * f;
}
#define MAXS 100005
#define pa(i) (i>>1)
#define le(i) (i<<1|1)
#define ri(i) ((i<<1)+2)

typedef vector<int> vi;
 typedef vector<vi> vvi;
 typedef pair<int,int> ii;
 #define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
 #define present(c,x) ((c).find(x) != (c).end())
 #define cpresent(c,x) (find(all(c),x) != (c).end())
typedef vector<ii> vii;
typedef vector<vii> vvii;
template<class T>
class minheap
{
	vector<T> heap;
	public:
	void insert(T k)
	{
		heap.pb(k);
	}
	minheap()
	{}
	minheap(int s)
	{
		heap.resize(s);		
	}
	void heapify(int i)
	{
		while(i<heap.size())
		{
			int min;
			if(le(i)<heap.size()&&heap[le(i)]>heap[i])
				min=le(i);
			else
				min=i;
			if(ri(i)<heap.size()&&heap[ri(i)]>heap[min])
				min=ri(i);
			if(min==i)
				break;
			else
			{
			//	swap(heap[i],heap[min]);
				T temp;
				temp=heap[i];
				heap[i]=heap[min];
				heap[min]=temp;
				i=min;				
			}				
		}
	}	
	void build()
	{
		for(int i=(heap.size())/2;i>=0;i--)
			heapify(i);
	}	
	T getmin()
	{
		if(heap.size()==0)
			throw;
		T x=heap[0];
		heap[0]=heap[heap.size()-1];
		heap.pop_back();
		heapify(0);		
		return x;
	}
	void clear()
	{
		heap.clear();
	}
	T top()
	{
		if(heap.size()==0)
			throw;
		return heap[0];
	}
	bool empty()
	{
		return (heap.size()==0);
	}
};
vvii G;
vector<int> pa;
int dijikstra(vector<vector<pair<int,int> > > G,int st,int en)
{
	minheap<ii> Q;
	int n=G.size();
	vi D(n,-INF);
	pa.resize(n+1);
        Q.clear();
        D[st]=INF;
        Q.insert(ii(INF,st));	
        while(!Q.empty())
        {
		ii top=Q.getmin();
            	int v=top.second,d=top.first;
            	for(vii::iterator it=G[v].begin();it!=G[v].end();it++)
            	{
                	int v2=it->first,cost=it->second;
               		if(D[v2]<miN(D[v],cost))
                	{	
				D[v2]=miN(D[v],cost);
                    		Q.insert(ii(D[v2],v2));
				pa[v2]=v;
                	}
            	}
        }
        return D[en];
}
void printpath(int j,int i,int k)
{
	if(pa[i]!=j)
		printpath(j,pa[i],k+1);
	else
		printf("%d ",j+1);
	if(k==1)
		printf("%d\n",i+1);
	else
		printf("%d ",i+1);
}
int main()
{
    int n,m,st,en;
	n=rd;
	m=rd;
    G.resize(n);
    int u,v,c;
    for(int i=0;i<m;i++)
    {
	    u=rd;
	    v=rd;
	    c=rd;
        u--,v--;
        G[u].pb(ii(v,c));
        G[v].pb(ii(u,c));
    }
	st=rd;
	en=rd;
	int x=rd;
    st--;
    en--;
	int mind=dijikstra(G,st,en);
	assert(mind!=-INF);
	printpath(st,en,1);
	int vv=(x/(mind-1));
	if(vv*(mind-1)<x)
		vv++;      
	printf("%d\n",vv);
    return 0;
}
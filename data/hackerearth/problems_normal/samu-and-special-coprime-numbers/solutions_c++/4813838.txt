#include<bits/stdc++.h>
using namespace std;

int digits[20];
long long int ddp[20][200][1540];

long long int  digitdp(int pos,int sum,int sqsum,bool check) {
	if(pos==-1) {
		return __gcd(sum,sqsum)==1;
	}

	if(!check && ddp[pos][sum][sqsum]!=-1) {
		return ddp[pos][sum][sqsum];
	}


	int enddigit;

	if(check) {
		enddigit=digits[pos];
	}
	else
		enddigit=9;

	int currdigit;
	long long int ans=0;
	for(currdigit=0;currdigit<=enddigit;currdigit++) {
		ans+=digitdp(pos-1,sum+currdigit,sqsum+currdigit*currdigit,check && enddigit==currdigit);
	}

	if(!check) {
		ddp[pos][sum][sqsum]=ans;
	}

	return ans;
}



long long int solve(long long int n) {
	int i=0;
	if(n==0)
		return 0;

	while(n!=0) {
		digits[i++]=n%10;
		n=n/10;
	}
	return digitdp(i-1,0,0,1);
}

int  main() {
	long long int t,n,l,r;
	memset(ddp,-1,sizeof(ddp));
	  cin >> t;
	  while(t--) {
	  	cin >> l >> r;
	  		cout << solve(r)-solve(l-1) << endl;
	  }

	return 0;
}
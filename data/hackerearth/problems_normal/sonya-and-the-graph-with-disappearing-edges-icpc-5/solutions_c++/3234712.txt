#include <bits/stdc++.h>
using namespace std;
map<pair<int, int >, long > dis;
bool visit[100001];
int edge[100001][2];
vector<set<int > > adj;
int n, m, k;
int bfs();
int main(){
int x, y, t, ind;
cin>>n>>m>>k;
adj.resize(n+1);
for(int i=1; i<=m; i++){
	cin>>x>>y;
	edge[i][0]=x; edge[i][1]=y;
	adj[x].insert(y);
	adj[y].insert(x);
}
for(int j=1; j<=k; j++){
	cin>>t>>ind;
	dis[make_pair(edge[ind][0], edge[ind][1])]=t;
	dis[make_pair(edge[ind][1], edge[ind][0])]=t;
}
cout<<bfs()<<endl;
}

int bfs(){
queue<int > q;
queue<int > tim_;
q.push(1);
tim_.push(0);
visit[1]=true;
int temp, time_;
while(!q.empty()){
	temp = q.front();
	time_ = tim_.front();
	q.pop(); tim_.pop();
	if(temp == n){
		return time_;
	}
    for(set<int >::iterator j=adj[temp].begin(); j!=adj[temp].end(); j++){
		if(visit[*j] == false && (dis.find(make_pair(temp, *j))==dis.end() || dis[make_pair(temp, *j)]>time_+1)){
			visit[*j]=true;
			q.push(*j);
			tim_.push(time_+1);
		}
    }
}
return -1;
}

#include <bits/stdc++.h>
using namespace std;

#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)
#define EACH(it,a) for(__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)
#define SZ(S) ((int) ((S).size()))

#define DEBUG(x) { cout << #x << " = " << x << endl; }
#define PR(a,n) { cout << #a << " = "; FOR(_,1,n) cout << a[_] << ' '; cout << endl; }
#define PR0(a,n) { cout << #a << " = "; REP(_,n) cout << a[_] << ' '; cout << endl; }

struct Tree {
    int child[2];
    int cnt;
} nodes[11000111];
int nNode, root;

const int MN = 100111;
const int NBIT = 29;

int n, a[MN], sum[MN];

int createNode() {
    ++nNode;
    nodes[nNode].child[0] = nodes[nNode].child[1] = nodes[nNode].cnt = 0;
    return nNode;
}

void insert(int u, int bit, int root) {
    nodes[root].cnt += 1;

    if (bit < 0) return ;

    int t = (u >> bit) & 1;
    if (nodes[root].child[t] == 0) nodes[root].child[t] = createNode();
    insert(u, bit-1, nodes[root].child[t]);
}

int get(int bound, int sum, int bit, int root) {
	if (bound < 0) return 0;
    if (bit < 0) return nodes[root].cnt;
    if (nodes[root].cnt == 0) return 0;
    int bit_bound = (bound >> bit) & 1;
    int bit_sum = (sum >> bit) & 1;

    if (bit_bound && bit_sum) { // 1 - 1
        return nodes[nodes[root].child[1]].cnt + get(bound, sum, bit-1, nodes[root].child[0]);
    }
    else if (bit_bound && !bit_sum) { // 1 - 0
        return nodes[nodes[root].child[0]].cnt + get(bound, sum, bit-1, nodes[root].child[1]);
    }
    else if (!bit_bound && bit_sum) { // 0 - 1
        return get(bound, sum, bit-1, nodes[root].child[1]);
    }
    else { // 0 - 0
        return get(bound, sum, bit-1, nodes[root].child[0]);
    }
}

int main() {
    ios :: sync_with_stdio(false); cin.tie(NULL);
    int ntest; cin >> ntest;

    while (ntest--) {
        cin >> n; FOR(i,1,n) { cin >> a[i]; sum[i] = sum[i-1] ^ a[i]; }
        int q; cin >> q;
        while (q--) {
            int l, r; cin >> l >> r;
            long long res = 0;
            nNode = 0;
            root = createNode();
            insert(0, NBIT, root);
            FOR(i,1,n) {
                res += get(r, sum[i], NBIT, root);
                res -= get(l-1, sum[i], NBIT, root);
                insert(sum[i], NBIT, root);
            }
            cout << res << "\n";
        }
    }
    return 0;
}

#include<bits/stdc++.h>

using namespace std;

#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())

const int MOD = 1e9+7;

typedef long long ll;
typedef pair<int,int> pii;
const int MAXN = 1e5+5;
bool vis[MAXN];
int mobius[MAXN];
int BIT[MAXN];
int ar[MAXN];
int query(int idx) {
	int ret=0;
	while(idx) {
		ret+=BIT[idx];
		idx-=(idx&-idx);
	}
	return ret;
}
void update(int idx, int v) {
	while(idx<=100000) {
		BIT[idx]+=v;
		idx+=(idx&-idx);
	}
}
vector<int> val[MAXN];
int main() {
	// freopen("TASK.in","r",stdin);freopen("TASK.out","w",stdout);
	int n;
	scanf("%d",&n);
	for(int i=1;i<=n;i++) scanf("%d",&ar[i]);
	for(int i=0;i<MAXN;i++) mobius[i]=1;
	for(int i=2;i<MAXN;i++) {
		if(!vis[i]) {
			for(int j=i;j<MAXN;j+=i) {
				vis[j]=true;
				mobius[j]*=-1;
				if((j/i)%i==0) mobius[j]=0;
			}
		}
	}
	for(int i=1;i<=n;i++) {
		int cc=ar[i];
		for(int j=1;1LL*j*j<=cc;j++) {
			if(cc%j!=0) continue;
			int f=j,s=cc/j;
			if(mobius[f]) val[f].pb(ar[i]);
			if(mobius[s] and f!=s) val[s].pb(ar[i]);
		}
	}
	ll ans=0;
	for(int i=n;i>=1;i--) {
		ans+=1LL*query(ar[i]-1);
		update(ar[i],1);
	}
	for(int i=1;i<=n;i++) update(ar[i],-1);
	for(int i=2;i<=100000;i++) {
		ll temp=0;
		for(auto it:val[i]) {
			temp+=1LL*(query(100000)-query(it));
			update(it,1);
		}
		ans+=mobius[i]*temp;
		for(auto it:val[i]) update(it,-1);
	}
	cout<<ans<<endl;
	return 0;
}
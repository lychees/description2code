#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define mp make_pair
#define ff first
#define ss second
#define pb push_back
#define pf pop_front
#define IOS ios::sync_with_stdio(false)
int n ;
vector <pii> xpts;
vector <pii> ypts;
pair <int,pii> p[400005];
int par[100005] , cnt;
int root(int x) {
      return par[x] == x ? x : (par[x] = root(par[x]));
}
void unio(int x, int y) {
      par[root(x)] = root(y);
}
int kruskal(){
    int mincost = 0;
    for(int i = 0 ; i < cnt ; i++){
        int x = p[i].ss.ff;
        int y = p[i].ss.ss;
        if(root(x)!=root(y)){
            mincost+=p[i].ff;
            unio(x,y);
        }
    }
    return mincost;
}
int main(){

	int i , j , k , x ,y;
    cin >> n ;
    for(i = 0 ; i < n ; i++){
        cin >> x >> y;
        xpts.pb(mp(x,i+1));
        ypts.pb(mp(y,i+1));
        par[i+1] = i+1;
    }
    sort(xpts.begin(),xpts.end());
    sort(ypts.begin(),ypts.end());
    for(i = 0 ; i < xpts.size() - 1 ; i++){
        pii a = xpts[i];
        pii b = xpts[i+1];
        p[i] = mp(abs(a.ff-b.ff),mp(a.ss,b.ss));
        cnt++;
    }
    for(i = 0 ; i < ypts.size() - 1 ; i++){
        pii a = ypts[i];
        pii b = ypts[i+1];
        p[xpts.size()+i-1] = mp(abs(a.ff-b.ff),mp(a.ss,b.ss));
        cnt++;
    }
    sort(p,p+cnt);
    ll mincost = kruskal();
    cout << mincost << endl;
	return 0;
}
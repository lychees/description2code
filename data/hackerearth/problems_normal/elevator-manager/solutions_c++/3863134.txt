#include <bits/stdc++.h>
#define dodi 1000000007 

using namespace std;
typedef long long ll;

int static const N = 100100;

ll pm(ll xx , ll yy , ll p)
{
	__int128 w = xx;
	w *= yy;
	w = w%p;
	ll x = w;
	return x;
}

ll na(ll x, ll y, ll p)
{
	if(y == 1)
		return (x%p);
	ll t = na(x,y/2,p);
	t = pm(t,t,p);
	if(y%2 == 1)
		t = pm(t,x,p);
	
	return t;
}
bool millerTest(ll dd, ll n)
{
    ll a = rand() % (n - 2);
    a += 1;
    ll  d = dd ,x = na(a, d, n) ,pr = x; 
    while (d != n-1)
    {
        //x = (x * x) % n;  overflow
        x = pm(x,x,n);
        d = (d<<1);

        if (x == 1 && pr != 1 && pr != n-1)      
			return true;
		pr = x;
    }
	if(x != 1)
		return true;
    return false;
}

bool prost(ll n, ll k)
{
    // Corner cases
    if (n <= 1 || n == 4)  return false;
    if (n <= 3) return true;

    // Find r such that n = 2^d * r + 1 for some r >= 1
    ll d = n - 1;
    while (d % 2 == 0)
        d /= 2;

    // Iterate given nber of 'k' times
    for (int i = 0; i < k; i++)
    {
    	//printf("%i %lld %lld\n",i,n,d);
         if (millerTest(d, n))
              return false;
    }
    return true;
}


ll n,m,t[N],f[N],k[N];

int main() {
	scanf("%lld%lld",&n,&m);
	for(int i=0;i<m;i++)
		scanf("%lld%lld%lld",&t[i],&f[i],&k[i]);
	ll put = 0 , poz = 1 , bp=0;
	for(int i=0;i<m;i++)
	{
		if(t[i] == 1)
		{
			if(f[i] + k[i] == 2 || prost(f[i]+k[i],7))
			{
				put += labs(poz-f[i]);
				poz = f[i];
				bp += k[i];
			}
		}
		else
		{
			long long x = sqrt(f[i]+k[i]);
			if(x*x == f[i] + k[i] )
			{
				put += labs(poz-f[i]);
				poz = f[i];
				bp -= k[i];
			}
		}
		put = put%dodi;
	}
	
	printf("%lld %lld\n",put,bp);
	
	return 0;
}

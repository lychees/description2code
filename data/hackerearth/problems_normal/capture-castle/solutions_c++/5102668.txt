#include <bits/stdc++.h>
#define pb push_back
#define mk make_pair
#define ll long long
#define MAX 1001
#define PLL pair<long long, pair<long long, long long> >

using namespace std;
ll A[MAX][MAX], t, m, n, X, Y;
bool visited[MAX][MAX];
ll dist[MAX][MAX];
bool check(ll x, ll y)
{
	if(x<0||y<0||x>=m||y>=n||visited[x][y])
	return 0;
	return 1;
}
ll dijkstra()
{
	ll i, j, x, y, p, q;
	ll row[]={1, -1, 0, 0};
	ll col[]={0, 0, 1, -1};
	PLL pl;
	priority_queue<PLL> Q;
	for(i=0;i<m;i++)
	for(j=0;j<n;j++)
	{
		visited[i][j]=0;
		dist[i][j]=-1;
	}
	dist[0][0]=A[0][0];
	Q.push(mk(A[0][0], mk(0, 0)));
	while(!Q.empty()&&!visited[X][Y])
	{
		pl=Q.top();
		x=pl.second.first;
		y=pl.second.second;
		Q.pop();
		if(visited[x][y])
		continue;
		visited[x][y]=1;
		for(i=0;i<4;i++)
		{
			p=x+row[i];
			q=y+col[i];
			if(check(p, q))
			{
				if(dist[p][q]!=-1)
				dist[p][q]=min(dist[p][q], A[p][q]+dist[x][y]);
				else
				dist[p][q]=A[p][q]+dist[x][y];
				Q.push(mk(-dist[p][q], mk(p, q)));
			}
		}
	}
	return dist[X][Y];
}
int main()
{
	ll T, i, j, ans;
	cin>>T;
	while(T--)
	{
		cin>>m>>n;
		for(i=0;i<m;i++)
		for(j=0;j<n;j++)
		cin>>A[i][j];
		cin>>X>>Y>>t;
		X--;
		Y--;
		ans=dijkstra();
		if(ans==-1||t-ans<0)
		cout<<"NO\n";
		else
		{
			cout<<"YES\n";
			cout<<t-ans<<endl;
		}
	}
}

#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#define LL long long
#define REMAINED 1000000007
using namespace std;

const LL MAX = 1505;
LL id[MAX], nodes, edges;
pair<LL,pair<LL,LL>> p[31315];

void initialize()
{
    for(LL i = 0;i < MAX;++i)
        id[i] = i;
};

LL root(LL x)
{
    while(id[x] != x)
    {
        id[x] = id[id[x]];
        x = id[x];
    }
    return x;
};

void union1(LL x, LL y)
{
    LL p = root(x);
    LL q = root(y);
    id[p] = id[q];
};

LL kruskal(pair<LL, pair<LL, LL> > p[])
{
    LL x, y;
    LL cost, minimumCost = 1;
    initialize();
    for(LL i = 0;i < edges;++i)
    {
        // Selecting edges one by one in increasing order from the beginning
        x = p[i].second.first;
        y = p[i].second.second;
        cost = p[i].first;
        // Check if the selected edge is creating a cycle or not
        if(root(x) != root(y))
        {
            minimumCost *= cost;
            if(minimumCost >= REMAINED)
            	minimumCost %= REMAINED;
            union1(x, y);
        }
    }
    return minimumCost;
}

int main()
{
    LL T;
    cin>>T;
    for(int t=0;t<T;t++)
    {
    	LL A,B,C;
    	cin>>nodes>>edges;
    	for(LL i=0;i<edges;i++)
    	{
    		cin>>A>>B>>C;
    		p[i] = make_pair(C,make_pair(A,B));
    	}
    	sort(p,p + edges);
    	cout<<kruskal(p)<<endl;
    }
    return 0;
}

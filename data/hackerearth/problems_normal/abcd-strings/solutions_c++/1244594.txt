/* Ankit Srivastava */
#include <bits/stdc++.h>
using namespace std;

#define MOD                     1000000007
#define pb(x)                   push_back(x)
#define mp(x,y)                 make_pair(x,y)
#define FF                      first
#define SS                      second
#define s(n)                    scanf("%d",&n)
#define sl(n)                   scanf("%lld",&n)
#define sf(n)                   scanf("%lf",&n)
#define ss(n)                   scanf("%s",n)
#define sc(n)                   {char temp[4]; ss(temp); n=temp[0];}
#define INF                     (int)1e9
#define LINF                    (long long)1e18
#define EPS                     1e-9
#define maX(a,b)                ((a)>(b)?(a):(b))
#define miN(a,b)                ((a)<(b)?(a):(b))
#define abS(x)                  ((x)<0?-(x):(x))
#define DEBUG                   0

typedef long long ll;
typedef unsigned long long LL;
typedef pair<int,int> PII;
typedef pair<LL,LL> PLL;
typedef pair<int,PII> TRI;
typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<ll> vl;
typedef vector<PII> VII;
typedef vector<TRI> VT;

int rs;
ll n;
const int N = 20;
int TEST_NO;
ll a[N][N];

void precompute() {
}

void wipe_row(int row) {
    memset(a[row], 0, sizeof a[row]);
}

void wipe_col(int col) {
    for (int row = 0; row < N - 4; ++row) {
        a[row][col] = 0;    
    }
}

void wipe_trans(int c1, int c2) {
    for (int en = 0; en < 4; ++en) {
        for (int j = 0; j < 4; ++j) {
            a[en * 4 + c1][4 * c2 + j] = 0;
        }
        a[en * 4 + c1][16 + c2] = 0;
    }
}

void read() {
    for (int i = 0; i < N - 4; ++i) {
        for (int j = 0; j < N; ++j) {
            a[i][j] = 1;
        }
    }
    sl(n), s(rs);
    for (int i = 0; i < rs; ++i) {
        char s[4] = {0};
        int c[4] = {0};
        ss(s);
        for (int i = 0; i < 4; ++i) {
            c[i] = s[i] - 'a';
        }
        int v, v1, v2, l = strlen(s);
        switch(l) {
            case 1:
                //start c[0]
                for (int j = 0; j < 4; ++j) {
                    wipe_row(4 * c[0] + j);
                    wipe_col(4 * c[0] + j);
                }
                //end c[0]
                for (int j = 0; j < 4; ++j) {
                    wipe_row(j * 4 + c[0]);
                    wipe_col(j * 4 + c[0]);
                }
                //c[0] NULL
                wipe_col(16 + c[0]);
                break;
            case 2:
                v = c[0] * 4 + c[1];
                //start this
                wipe_row(v);
                //end this
                wipe_col(v);
                //transition
                wipe_trans(c[0], c[1]);
                break;
            case 3:         
                v1 = c[0] * 4 + c[1];
                for (int j = 0; j < 4; ++j) {
                    a[v1][4 * c[2] + j] = 0;
                }
                a[v1][16 + c[2]] = 0;
                v2 = 4 * c[1] + c[2];
                for (int j = 0; j < 4; ++j) {
                    a[c[0] + 4 * j][v2] = 0;
                }
                break;
            default:
                assert(false);
        }
    }
}
void preprocess() {
}

void matmul(ll m1[N][N], ll m2[N][N]) {
    ll res[N][N];
    memset(res, 0, sizeof res);
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            for (int k = 0; k < N; ++k) {
                res[i][j] += (m1[i][k] * m2[k][j]) % MOD;
                if(res[i][j] >= MOD) res[i][j] -= MOD;
            }
        }
    }
    memcpy(m1, res, sizeof res);
}

void expo(ll power) {    
    ll id[N][N], base[N][N];
    memset(id, 0, sizeof id);   
    for (int i = 0; i < N; ++i) {
        id[i][i] = 1;
        for (int j = 0; j < N; ++j) {
            base[i][j] = a[i][j];
        }
    }   
    #if DEBUG
    cerr << "printing BASE \n";
    for (int i = 0; i < N; ++i, puts("")) {
        for (int j = 0; j < N; ++j) {
            cerr << base[i][j] << " ";
        }
    }
    #endif
    while(power) {
        if(power & 1) matmul(id, base);
        matmul(base, base);
        power >>= 1;
    }
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            a[i][j] = id[i][j];
        }
    }
}

void solve() {  
    ll ans = 0;
    if(n > 2) {
        int start, end, sub;
        if(n & 1) start = N - 4, end = N, sub = 3;
        else start = 0, end = N - 4, sub = 4;
        expo((n - sub)/2 + 1);
        for (int i = 0; i < N - 4; ++i) {
            for (int j = start; j < end; ++j) {
                ans += a[i][j];
                if(ans >= MOD) ans -= MOD;
            }
        }
    } else {
        if(n == 1) {
            for (int j = N - 4; j < N; ++j) {
                bool ok = false;
                for (int i = 0; i < N; ++i) {
                    if(a[i][j] != 0) {
                        ok = true;
                        break;
                    }
                }
                if(ok) ans++;
            }
        } else {
            for (int j = 0; j < N - 4; ++j) {
                bool ok = false;
                for (int i = 0; i < N; ++i) {
                    if(a[i][j] != 0) {
                        ok = true;
                        break;
                    }
                }
                if (ok) ans++;
            }
        }       
    }
    cout << ans << endl;
}
int main() {
    int NO_OF_TESTS;
    s(NO_OF_TESTS);
    precompute();
    for (TEST_NO = 1; TEST_NO <= NO_OF_TESTS; ++TEST_NO) {
        read();
        preprocess();
        solve();
    }
    return 0;
}
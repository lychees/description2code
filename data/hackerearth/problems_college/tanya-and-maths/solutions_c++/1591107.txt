#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<ctime>
#include<assert.h>

#include<cmath>
#include<iostream>
#include<fstream>

#include<string>
#include<vector>
#include<queue>
#include<map>
#include<algorithm>
#include<set>
#include<sstream>
#include<stack>
#include<limits.h>

using namespace std;

#define MAX(a,b) ((a)>(b) ? (a) : (b))
#define MIN(a,b) ((a)<(b) ? (a) : (b))
#define EPS 1e-9
#define asdf exit(0);
#define AB(a) ((a)<(0) ? (-(a)) : (a))
#define EQ(a,b) ( (fabs((a)-(b))<EPS) ? (1) : (0))



typedef long long LL;
//typedef __int64 LL;




//*********************************************
//civ
//*********************************************
#define MAX 100000 //all primes from 1 to MAX will generated
vector<int> pr;
bool a[MAX+2]; //a[i]=0 means i is prime
void civ()
{
    int i,lim,j;
    lim=sqrt(MAX)+3;
    pr.push_back(2);

    for(i=0; i<=MAX; i+=2)a[i]=1;
    for(i=3; i<=MAX; i+=2)
    {
        if(!a[i])
        {
            pr.push_back(i);
            if(i<=lim)
            {
                for(j=i*i; j<=MAX; j+=2*i)
                    a[j]=1;
            }
        }

    }
}




int phi[MAX+10];


int main()
{
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int i,j,k;


    civ();

    phi[1]=1;

    for(i=2;i<=MAX;i++)
    {
      for(j=0;j<pr.size() && pr[j]*pr[j]<=i;j++)
      {
        if(i%pr[j]==0)
        {
          int now=i;
          while(now%pr[j]==0)
          {
            now/=pr[j];
          }


       //   cout<<i;
       //   asdf
          phi[i]=(phi[now]*(i/now)*(pr[j]-1))/pr[j];
        }
      }
      if(phi[i]==0)
      {
        phi[i]=i-1;
      }
    }



    int T,n1,n2;
    scanf("%d",&T);
    while (T--) {
      scanf("%d %d", &n1, &n2);
      int n = __gcd(n1, n2);

      long long sum=0;
      for(i=1;i<=n;i++)
      {
        if(n%i==0)
          sum+=phi[i];
      }
      printf("%lld\n",sum);
    }





    return 0;
}

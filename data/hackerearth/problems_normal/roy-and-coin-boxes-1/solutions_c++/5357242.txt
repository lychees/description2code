#include <bits/stdc++.h>
#define gc getchar_unlocked
using namespace std;
 
typedef vector<int> vi;
 
const int maxn=1e6+2;
 
int tree[4*maxn];
 
int lazy[4*maxn];
 
void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
 
void updateRange(int node, int start, int end, int l, int r, int val)
{
    if(lazy[node] != 0)
    { 
        // This node needs to be updated
        tree[node] += (end - start + 1) * lazy[node];    // Update it
        if(start != end)
        {
            lazy[node*2] += lazy[node];                  // Mark child as lazy
            lazy[node*2+1] += lazy[node];                // Mark child as lazy
        }
        lazy[node] = 0;                                  // Reset it
    }
    if(start > end || start > r || end < l)                          
        return;
    if(start >= l and end <= r)
    {
        // Segment is fully within range
        tree[node] += (end - start + 1) * val;
        if(start != end)
        {
            // Not leaf node
            lazy[node*2] += val;
            lazy[node*2+1] += val;
        }
        return;
    }
    int mid = (start + end) / 2;
    updateRange(node*2, start, mid, l, r, val);        // Updating left child
    updateRange(node*2 + 1, mid + 1, end, l, r, val);   // Updating right child
    tree[node] = tree[node*2] + tree[node*2+1];        // Updating root with max value 
}
 
int queryRange(int node, int start, int end, int l, int r)
{
    if(start > end || start > r || end < l)
        return 0;         // Out of range
    if(lazy[node] != 0)
    {
        // This node needs to be updated
        tree[node] += (end - start + 1) * lazy[node];            // Update it
        if(start != end)
        {
            lazy[node*2] += lazy[node];         // Mark child as lazy
            lazy[node*2+1] += lazy[node];    // Mark child as lazy
        }
        lazy[node] = 0;                 // Reset it
    }
    if(start >= l and end <= r)             // Current segment is totally within range [l, r]
        return tree[node];
    int mid = (start + end) / 2;
    int p1 = queryRange(node*2, start, mid, l, r);         // Query left child
    int p2 = queryRange(node*2 + 1, mid + 1, end, l, r); // Query right child
    return (p1 + p2);
}
int bs_lower(int v[],int l,int r,int x){
	int m;
	while(l<=r){
		m=(l+r)/2;
		if(v[m]==x)
			r=m-1;
		else if(v[m]>x)
			r=m-1;
		else if(v[m]<x)
			l=m+1;
	}
	return l;
}
int v[1000002];
int main()
{
    int n,m,q,i,l,r;
    scanint(n);
    scanint(m);
    
    for(i=1;i<=m;i++){
    	scanint(l);
    	scanint(r);
    	updateRange(1,0,n-1,l-1,r-1,1);
    }
    for(i=0;i<n;i++){
    	v[i]=queryRange(1,0,n-1,i,i);
    }
    sort(v,v+n);
    scanint(q);
    int x,ans;
    
    while(q--){
    	scanint(x);
    	if(x<=v[0])
    		ans=n;
    	else if(x>v[n-1])
    		ans=0;
    	else{
    		ans=n-bs_lower(v,0,n-1,x);
    	}
    	printf("%d\n",ans);
    }
    return 0;
}
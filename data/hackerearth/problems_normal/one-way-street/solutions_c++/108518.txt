#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>   
#include <map>
#include <string>  
#include <climits> 
#include <set>
#include <string>    
#include <sstream>
#include <utility>   
#include <ctime>
#include <cassert>
#include <fstream>
using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef pair<int, int> II;
typedef vector<long long> VLL;
typedef vector<bool> VB;

#define SZ(A) ((int)A.size())
#define LEN(A) ((int)A.length())
#define MS(A) memset(A, 0, sizeof(A))
#define MSV(A,a) memset(A, a, sizeof(A))
#define MAX(a,b) ((a >= b) ? (a) : (b))
#define MIN(a,b) ((a >= b) ? (b) : (a))
#define ABS(a) (((a) > 0) ? (a) : (-a))
#define MP make_pair
#define X first
#define Y second
#define PB push_back
#define FOUND(A, x) (A.find(x) != A.end())
#define getcx getchar_unlocked
#define INF (int(1e9))
#define INFL (LL(1e18))
#define EPS 1e-12

#define chkbit(s, b) (s & (1<<b))
#define setbit(s, b) (s |= (1<<b))
#define clrbit(s, b) (s &= ~(1<<b))

#define REP(i, n) for(int i = 0; i < (n); i++)
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REV(i, a, n) for(int i = a; i > n; i--)
#define FORALL(itr, c) for(itr = (c).begin(); itr != (c).end(); itr++)
#define ALL(A) A.begin(), A.end()
#define LLA(A) A.rbegin(), A.rend()
//int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
//int dx[] = {1, 1, 1, 0, 0, -1, -1, -1}, dy[] = {1, 0, -1, 1, -1, 1, 0, -1};
inline void inp( int &n ) {
	n=0; int ch = getcx(); int sign = 1;
	while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
	while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
	n = n * sign;
}
#define MAXN 10100
#define MAXLG 15

typedef struct {
	int node, cost, next;
} edge;

edge graph[MAXN*2];
int start[MAXN];
int nextEdge = 1;

void addEdge(int a, int b, int c){
	graph[nextEdge].node = b;
	graph[nextEdge].cost = c;
	graph[nextEdge].next = start[a];
	start[a] = nextEdge++;
}

int T, N;
int depth[MAXN];
int rootDist[MAXN];
int parent[MAXN][MAXLG];

void dfs(int node, int p, int d, int dist){
	int i;
	depth[node] = d;
	rootDist[node] = dist;
	parent[node][0] = p;

	for (i = start[node]; i; i = graph[i].next){
		if (graph[i].node == p) continue;
		dfs(graph[i].node, node, d+1, dist + graph[i].cost);
	}
}

#define swap(a,b) {int t = a; a = b; b = t;}

int lca(int a, int b){
	int lg = -1, i;

	if (depth[a] > depth[b])
		swap(a,b);

	for (i = depth[b]; i; i >>= 1)
		lg++;

	for (i = lg; i >= 0; i--)
		if (parent[b][i] != -1 && depth[a] <= depth[parent[b][i]])
			b = parent[b][i];

	if (a == b)
		return a;

	for (i = lg; i >= 0; i--)
		if (parent[a][i] != -1 && parent[a][i] != parent[b][i])
			a = parent[a][i], b = parent[b][i];

	return parent[a][0];
}

int dist(int a, int b){
	int c = lca(a,b);
	return rootDist[a] + rootDist[b] - 2 * rootDist[c];
}

int up(int n, int k){
	int i;
	for (i = 0; (1<<i) <= k; i++)
		if ((1<<i) & k)
			n = parent[n][i];
	return n;
}

int kth(int a, int b, int k){
	int c = lca(a,b);
	int pathDist = depth[a] + depth[b] - 2 * depth[c] + 1;
	int first = depth[a] - depth[c] + 1;

	k--;
	if (k < first)
		return up(a, k);
	else
		return up(b, depth[b] - depth[c] - (k - first + 1));
}

int main(void){
	int i, j, a, b, c, k;
	char str[10];

	scanf("%d", &T);

	while (T--){
		scanf("%d", &N);

		nextEdge = 1;
		for (i = 1; i <= N; i++)
			start[i] = 0;

		for (i = 0; i < MAXN; i++)
			for (j = 0; j < MAXLG; j++)
				parent[i][j] = -1;

		for (i = 1; i < N; i++){
			scanf("%d %d", &a, &b);
			c=1;
			addEdge(a,b,c);
			addEdge(b,a,c);
		}

		dfs(1, -1, 0, 0);

		for (j = 1; j < MAXLG; j++)
			for (i = 1; i <= N; i++)
				if (parent[i][j-1] != -1)
					parent[i][j] = parent[parent[i][j-1]][j-1];
		int q;
		scanf("%d", &q);
		for(i=0;i<q;i++){
			int l, r;
			scanf("%d %d", &l, &r);
			int ans = lca(l, r);
			int ret, dist;
			if(ans == l){
				dist = abs(depth[r] - depth[l]);
				ret = 2*dist-1;
			}else if(ans == r){
				dist = abs(depth[l] - depth[r]);
				ret = 2*dist;
			}else{
				int d1 = abs(depth[l] - depth[ans]);
				int d2 = abs(depth[r] - depth[ans]);
				ret = 2*d1 + 2*d2 - 1;
			}
			//cout << depth[l] << " " << depth[r] << endl;
			printf("%d\n", ret);
		}
	}

	return 0;
}

#include <cstdio>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cctype>
#include <utility>
#include <queue>
#include <cmath>
#include <complex>
using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VPII;
typedef pair<LL, LL> PLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
typedef double DB;

#define pb push_back
#define mset(a, b) memset(a, b, sizeof a)
#define all(x) (x).begin(), (x).end()
#define bit(x) (1 << (x))
#define bitl(x) (1LL << (x))
#define sqr(x) ((x) * (x))
#define sz(x) ((int)(x.size()))
#define counti(x) (__builtin_popcount(x))
#define countl(x) (__builtin_popcountll(x))
#define clz(x) (__builtin_clz(x))
#define clzl(x) (__builtin_clzll(x))
#define ctz(x) (__builtin_ctz(x))
#define ctzl(x) (__builtin_ctzll(x))

#define rep(i, n) for (int (i) = 0; (i) < (int)(n); ++(i))

#define X first
#define Y second

#define Error(x) cout << #x << " = " << x << endl

template <typename T, typename U> 
inline void chkmax(T& x, U y) {
	if (x < y) x = y;
}

template <typename T, typename U>
inline void chkmin(T& x, U y) {
	if (y < x) x = y;
}

#define N 333

int n, m, T;
int chk[N], a[N], b[N+N], c[N];
VI con[N];

int find(int u) {
	for (int i = 0; i < sz(con[u]); i++) {
		int v = con[u][i];
		if (chk[v] == T) continue;
		chk[v] = T;
		if (!c[v] || find(c[v])) {
			c[v] = u;
			return 1;
		}
	}
	return 0;
}

bool can(int x) {
	for (int i = 1; i <= n; i++) {
		con[i].clear();
		for (int j = 1; j <= n; j++) if (b[a[i] + j] <= x) con[i].pb(j);
	}
	memset(c, 0, sizeof c);
	int ret = 0;
	for (int i = 1; i <= n; i++) {
		T++;
		if (!find(i)) return 0;
	}
	return 1;
}

int main() {

	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
	for (int i = 1; i <= n + m - 1; i++) scanf("%d", &b[i]);

	int lo = 0, hi = (int)1e9+1;

	while (hi - lo > 1) {
		int mid = lo + hi >> 1;
		if (can(mid)) hi = mid;
		else lo = mid;
	}

	cout << hi << endl;
	return 0;
}
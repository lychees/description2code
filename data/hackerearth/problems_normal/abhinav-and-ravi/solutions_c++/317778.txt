#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <queue>
#include <stdlib.h>
#include <string>
#include <algorithm>
#include <math.h>
 
using namespace std;
 
#define debug(x) cout << #x << " = " << x << endl
#define si size()
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<bool> vb;
typedef vector<vector<bool> > vvb;
typedef vector<string> vs;
 
#define pb push_back
#define b2e(A) (A).begin(), (A).end()
#define s(A) std::sort(b2e(A))
 
int t[12][12];
int tn[12][12];
 
struct pa
{
  int x, y, d;
};
 
int dl, sz;
int dx[] = {-2, -2, -1, -1, 1, 1, 2, 2};
int dy[] = {1, -1, -2, 2, 2, -2, 1, -1};
 
 
void go(int x, int y, int k)
{
  pa st = {x, y, 0};
  queue <pa> Q;
  Q.push(st);
  
  int odw[12][12], i,l;
  for (i=0; i<12; i++) for (l=0; l<12; l++) odw[i][l]=100000;
  odw[y][x] = 0;
  tn[y][x]++;
  
  while (Q.si)
  {
    pa p = Q.front();
    Q.pop();
    
    for (i=0; i<8; i++)
    {
      int nx = p.x+dx[i];
      int ny = p.y+dy[i];
      int nd = p.d+1;
      
      if (nx<0) continue;
      if (nx>=sz) continue;
      if (ny<0) continue;
      if (ny>=dl) continue;
      if (nd >= odw[ny][nx]) continue;
      
      odw[ny][nx] = nd;
      tn[ny][nx]++;
      pa np = {nx, ny, nd};
      Q.push(np);      
    }      
  }
  
  for (i=0; i<dl; i++)
  for (l=0; l<sz; l++) t[i][l] += (odw[i][l]+k-1)/k;
}
 
class CollectingRiders 
{
  public:
  int minimalMoves(vector <string> b) 
  {
    int i,l,il=0;
    sz = b[0].si;
    dl = b.si;
    for (i=0; i<b.si; i++)
    for (l=0; l<b[0].si; l++) 
    if (b[i][l]!='.') 
    {
      go(l, i, b[i][l]-'0');
      il++;
    }
    
    int mm = 10000;
    for (i=0; i<b.si; i++)
    for (l=0; l<b[0].si; l++) if (t[i][l] < mm && tn[i][l]==il) mm = t[i][l];
    return (mm<10000) ? mm : -1;
  }
};
int main()
{
    int test;
    cin>>test;
    while(test--)
    {
                 int n,m;
                 cin>>n>>m;
                 getchar();
                 vector<string> b;
                 for(int i = 0;i < n ;i++)
                         {
                             string s;
                             cin>>s;
                             b.push_back(s);
                         }
                 CollectingRiders c;
                 cout<<c.minimalMoves(b)<<endl;
                 for(int i = 0;i < 12;i++)
                         {
                             for(int j = 0;j < 12;j++)
                                     {
                                         t[i][j] = 0;
                                         tn[i][j] = 0;
                                     }
                         }
                 dl = 0;
                 sz = 0;
    }
}

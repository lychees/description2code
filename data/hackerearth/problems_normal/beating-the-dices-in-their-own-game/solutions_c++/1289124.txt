#include <bits/stdc++.h>
using namespace std;

namespace MCMF {
const int MAXN=300,MAXM=100000,inf=1e9;
struct Edge {
  int u,v,f,c,n;
  Edge() {}
  Edge(int u,int v,int f,int c,int n):u(u),v(v),f(f),c(c),n(n) {}
} E[MAXM];
int G[MAXN],dis[MAXN],pre[MAXN],vis[MAXN];
int S,T,sz,N,MinCost,MaxFlow;                           //S??, T??
void init(int n,int s,int t) {
  memset(G,-1,sizeof(G));
  sz=0; N=n; S=s; T=t;
}
void addedge(int u,int v,int f,int c) {                 //u -> v
  E[sz]=Edge(u,v,f,+c,G[u]); G[u]=sz++;
  E[sz]=Edge(v,u,0,-c,G[v]); G[v]=sz++;
}
bool extand() {
  queue<int> Q;
  for (int i=0;i<=N;++i) dis[i]=inf,vis[i]=0,pre[i]=-1;
  Q.push(S); vis[S]=1; dis[S]=0;
  while (!Q.empty()) {
    int u=Q.front(),v; Q.pop(); vis[u]=0;
    for (int h=G[u];~h;h=E[h].n) {
      if (E[h].f>0&&dis[v=E[h].v]>dis[u]+E[h].c) {
        dis[v]=dis[u]+E[h].c; pre[v]=h;
        if (!vis[v]) Q.push(v),vis[v]=1;
      }
    }
  }
return dis[T]<inf;                                  // ??dis[T] <= 0 ????
}
void solve() {
  MinCost=MaxFlow=0;
  while (extand()) {
    int aug=inf;
    for (int h=pre[T];~h;h=pre[E[h].u]) aug=min(aug,E[h].f);
    MinCost+=aug*dis[T]; MaxFlow+=aug;
    for (int h=pre[T];~h;h=pre[E[h].u]) E[h].f-=aug,E[h^1].f+=aug;
  }
}
}
const int MAXN = 100 + 10;
map<int, int> dice[MAXN];
int val[MAXN], N, Q;

int main() {
  scanf("%d", &N);
  for (int i = 0; i < N; ++ i) {
    int m; scanf("%d", &m); dice[i].clear();
    for (int _ = 0; _ < m; ++ _) {
      int u, c; scanf("%d%d", &u, &c);
      dice[i][u] = c;
    }
  }
  scanf("%d", &Q);
  while (Q --) {
    for (int i = 0; i < N; ++ i) scanf("%d", val + i);
    MCMF::init(2 * N + 10, 2 * N, 2 * N + 1);
    for (int i = 0; i < N; ++ i) {
      MCMF::addedge(MCMF::S, i, 1, 0);
      for (int j = 0; j < N; ++ j) {
        if (!dice[i].count(val[j])) continue;
        MCMF::addedge(i, j + N, 1, dice[i][val[j]]);
      }
    }
    for (int i = 0; i < N; ++ i) {
      MCMF::addedge(i + N, MCMF::T, 1, 0);
    }
    MCMF::solve();
    if (MCMF::MaxFlow != N) puts("-1");
    else printf("%d\n", MCMF::MinCost);
  }
  return 0;
}
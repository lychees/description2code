#include <bits/stdc++.h> 

using namespace std;
 
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(x) (int)((x).size()) 
#define forn(i,n) for (int i = 0; (i) < (n); ++i)
#define fornr(i,n) for (int i = (n) - 1; (i) >= 0; --i)
#define forab(i,a,b) for (int i = (a); (i) < (b); ++i)
#define forba(i,a,b) for (int i = (b) - 1; (i) >= (a); --i)
#define forit(it,c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
#define all(c) (c).begin(),(c).end() 

#ifdef LOCAL
    #define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
    #define eprintf(...) static_cast<void>(0)   
#endif

#ifdef _WIN32
    #define I64 "%I64d"
#else
    #define I64 "%lld"
#endif

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef unsigned int uint;
typedef vector <int> vi;
typedef pair <int, int> pii;

#define FNAME ""

const int MAXN = 1e5 + 5;

int a[MAXN];
LL dp[MAXN], dp2[MAXN];
pair <LL, LL> b[MAXN];

LL get(int ind, int x)
{
    return b[ind].fs * 1ll * x + b[ind].sc;
}

int main() 
{
#ifdef LOCAL    
    freopen(FNAME".in", "r", stdin);
    freopen(FNAME".out", "w", stdout); 
#endif    
    int n, k;
    scanf("%d%d", &n, &k);
    forn (i, n)
        scanf("%d", &a[i]);
    dp[0] = k * 1ll * k * 1ll * a[0];
    forab (i, 1, n)
        dp[i] = k * 1ll * k * 1ll * (a[0] + a[i]) + i * 1ll * i;
    int l = min(k - 2, 100);
    forn (ll, l)
    {
        int head = 0, tail = 0;
        forn (i, n)
        {
            dp2[i] = dp[i];
            if (head != tail)
            {
                while (tail - head > 1 && get(head, i) > get(head + 1, i))
                    head++;
                dp2[i] = min(dp2[i], i * 1ll * i + k * 1ll * k * 1ll * a[i] + get(head, i));
                //printf("%d %d " I64 " " I64 "\n", head, i, get(head, i), get(head + 1, i));
            } 
            pair <LL, LL> np = mp(-2 * i, dp[i] + i * 1ll * i);
            //printf(I64 " " I64 "\n", np.fs, np.sc);
            while (tail - head > 1)
            {
                if ((b[tail - 1].sc - b[tail - 2].sc) * 1ll * (np.fs - b[tail - 1].fs) < (b[tail - 1].fs - b[tail - 2].fs) * 1ll * (np.sc - b[tail - 1].sc))
                    tail--;
                else
                    break;
            }
            b[tail++] = np;
            //printf("%d\n", tail);
        }
        forn (i, n)
            dp[i] = dp2[i];
    }
    printf(I64 "\n", dp[n - 1]);
    return 0;
}
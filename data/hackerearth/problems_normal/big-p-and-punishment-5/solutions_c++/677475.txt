#include<iostream>
#include <list>
using namespace std;
 
class Graph
{
	int count;
    int V;    // No. of vertices
    list<int> *adj;    // Pointer to an array containing adjacency lists
    bool *visited;
    void DFSUtil(int v, bool visited[]);  // A function used by DFS
public:
    Graph(int V);   // Constructor
    void addEdge(int v, int w);   // function to add an edge to graph
    void DFS(int);    // prints DFS traversal of the complete graph
    int getCount();
};
 
Graph::Graph(int V)
{
	count = 0;
    this->V = V;
    adj = new list<int>[V];
    
    // Mark all the vertices as not visited
    visited = new bool[V];
    for(int i = 0; i < V; i++)
        visited[i] = false;
}

int Graph::getCount()
{
	return count;
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to v?s list.
}
 
void Graph::DFS(int v)
{
    // Mark the current node as visited and print it
    if(!visited[v])
    	++count;
    visited[v] = true;
    //cout << v << " ";
 
    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    for(i = adj[v].begin(); i != adj[v].end(); ++i)
        if(!visited[*i])
        {
            DFS(*i);
        }
}

 
int main()
{
    int t, n, f, s, a, b, c;
    cin >> t;
    ++t;
    while(--t)
    {
    	cin >> n >> f >> s;
    	Graph g(n);
    	while(f--)
    	{
    		cin >> a >> b;
    		g.addEdge(a-1, b-1);
    	}
    	while(s--)
    	{
    		cin >> c;
    		g.DFS(c-1);
    	}
    	cout << g.getCount() << endl;
    }
 
    return 0;
}
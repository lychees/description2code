#include<stdio.h>
#include<bits/stdc++.h>
using namespace std;
#define ff first
#define ss second
#define mp make_pair
list<int> sup[100010];
long long int val[100010];
bool visited[100010];
long long int arr[100010];
int top=0;
long long int sttime[100010];
long long int endtime[100010];
long long int vis=0;
long long int  t[1000100];
 
 /*    Few precautions
        (1) Never leave an undeclared variable
        (2) Return a value from a func with return type may run on compiler but 
        wont run on ide
        (3) Never multiply two int variables such that the value of the multiplication
        may temporarily be greater than int. Type cast them*/
void build(int node, int a, int b)
{
	if(a>b) return;
	if (a==b)
	{
		t[node]=arr[a];
		return;
	}
	
	build(node*2, a, (a+b)/2);
	build(node*2+1,(a+b)/2+1,b);
	
	t[node]=t[node*2]+t[node*2+1];
}
 
long long int  query(int node, int a, int b, int i, int j)
{
	if(a>b||a>j||b<i) return 0;
	
	if (a>=i && b<=j) return t[node];
	
	int q1=query(node*2, a, (a+b)/2, i, j);
	int q2=query(node*2+1, (a+b)/2+1, b, i, j);
	
	return q1+q2;
}
 
void update(int node, int a, int b, int i, int j, long long int inc)
{
	if(a>b) return;
	
	if(a>b||a>j||b<i) return;
	
	if (a>=i && b<=j)
	{
		t[node]=inc;
		
		return;
	}
	
	update(node*2, a, (a+b)/2, i, j, inc);
	update(node*2+1, (a+b)/2+1, b,i, j, inc);
	t[node] = t[node*2] + t[node*2+1];
}
void dfs(int st)
{
	//cout<<"called "<<st<<" tm "<<vis<<endl;
	    list<int> ::iterator it;
	    arr[vis]=val[st];  
	    sttime[st]=vis;
	    visited[st]=1;
	    for( it=sup[st].begin();it!=sup[st].end();it++)
	    {
	    	if(visited[*it]==0)
	    	{
	    		     vis++;
				 visited[*it]=1;  
				 dfs(*it);
				 
		  }
	    }
	  //  cout<<"enfing "<<st<<" with "<<vis<<endl;
	    endtime[st]=vis;
}
int main()
{
	int n;
	cin>>n;
	int q;
	cin>>q;
	for(int i=0;i<n;i++)
	{
		scanf("%d",&val[i]);
	}
	
	for(int i=0;i<n-1;i++)
	{
		int a,b;
		scanf("%d %d",&a,&b);
		a=a-1;
		b=b-1;
		//cout<<" a and b "<<a<<" "<<b<<endl;
		sup[a].push_back(b);
		sup[b].push_back(a);
	}
//	cout<<sup[0].size()<<endl;
//	cout<<"size "<<endl;
		visited[0]=1;
	dfs(0);
 
	//cout<<"done "<<endl;
/*	for(int i=0;i<n;i++)
	{
		cout<<arr[i]<<" ";
	}
	cout<<endl;
	for(int i=0;i<n;i++)
	{
		cout<<sttime[i]<<" ";
	}
	cout<<endl;
	for(int i=0;i<n;i++)
	{
		cout<<endtime[i]<<" ";
	}
	cout<<endl;*/
	
	build(1,0,n-1);
	//cout<<endl;
	char str[5];
	while(q--)
	{
		int node;long long int  val;
		scanf("%s",str);
		if(str[0]=='Q')
		{
			cin>>val;
			val--;
			int qs,qe;
			qs=sttime[val];
			qe=endtime[val];
		//	cout<<"query "<<qs<<" "<<qe<<endl;
			long long int ans=query(1,0,n-1,qs,qe);
		  cout<<ans<<endl;
		}
		else
		{
			   cin>>node>>val;
			   node--;
			   
			   int upl=sttime[node];
			   int upu=sttime[node];
			   update(1,0,n-1,upl,upu,val);
		}
	}
	return 0;
} 
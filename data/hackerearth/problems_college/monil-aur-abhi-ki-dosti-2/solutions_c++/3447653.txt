#include<bits/stdc++.h>
#define MAX 256
using namespace std;
bool flag=false;
// This function returns true if contents of arr1[] and arr2[]
// are same, otherwise false.
bool compare(char arr1[], char arr2[])
{
    for (int i=0; i<MAX; i++)
        if (arr1[i] != arr2[i])
            return false;
    return true;
}

// This function search for all permutations of pat[] in txt[]
void search(char *pat, char *txt)
{
	int M = strlen(pat), N = strlen(txt);

	// countP[]: Store count of all characters of pattern
	// countTW[]: Store count of current window of text
	char countP[MAX] = {0}, countTW[MAX] = {0};
	for (int i = 0; i < M; i++)
	{
		(countP[pat[i]])++;
		(countTW[txt[i]])++;
	}

	// Traverse through remaining characters of pattern
	for (int i = M; i < N; i++)
	{
		// Compare counts of current window of text with
		// counts of pattern[]
		if (compare(countP, countTW))
			flag=true;

		// Add current character to current window
		(countTW[txt[i]])++;

		// Remove the first character of previous window
		countTW[txt[i-M]]--;
	}

	// Check for the last window in text
	if (compare(countP, countTW))
		flag=true;
}
int main()
{
   long long t;
   char s[1005],p[100005];
   cin>>t;
   while(t--)
   {
      cin>>s;
      cin>>p;
      if(strlen(s)>strlen(p))
      {
         printf("-1\n");
      }
      else
      {   flag=false;
          search(s, p);
         if(flag)
         {
             printf("YES\n");
         }
         else
         {
         printf("NO\n");

         }
      }

   }
  return 0;
}

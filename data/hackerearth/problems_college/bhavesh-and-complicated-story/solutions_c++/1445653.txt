#include <cstdio>
using namespace std;
#define LSOne(S) (S & (-S))

class BIT {
	long long * ft, size;
public:
	// initialize a BIT of n elements to zero
	BIT(long long  n) {
		size = n;
		ft = new long long [n+1];
	}

	~BIT()	{
		delete [] ft;
	}

	// returns sum of the range [1...b]
	long long  sum(long long  b) {
		long long  sum = 0;
		for (; b; b -= LSOne(b)) sum += ft[b];
		return sum;
	}

	// returns sum of the range [a...b]
	long long  sum(long long  a, long long  b) {
		return sum(b) - (a == 1 ? 0 : sum(a - 1));
	}

	// update value of the k-th element by v (v can be +ve/inc or -ve/dec)
	// i.e., increment or decrement kth element by a value v
	void update(long long  k, long long  v) {
		for (; k <= size; k += LSOne(k)) ft[k] += v;
	}

    // divide each original frequency by c
	void scaleDown(long long  c){
        for (long long  i=1 ; i<=size ; i++) ft[i] /= c;
    }

    // multiply each original frequency by c
    void scaleUp(long long  c){
        for (long long  i=1 ; i<=size ; i++) ft[i] *= c;
    }
};

int main()  {
    BIT b(1000006);
    long long n,l,q,temp,x,y,a,c;
    char ch;
    scanf("%lld",&n);
    for(long long i=0;i<n;i++)
    {
    	scanf("%lld",&temp);
    	b.update(temp+1,1);
    }
    scanf("%lld",&l);
    while(l--)
    {
    	scanf("%lld",&q);
	    if(q==0)
	    {
	    	scanf("%lld %lld",&x,&y);
	    	
	    	printf("%lld\n",b.sum(x+1,y+1));
	    }
	    else if(q==1)
	    {
	    	scanf("%lld",&a);
	    	b.update(a+1,-1);
	    }
	    else if(q==2)
	    {
	    	scanf("%lld",&c);
	    	b.update(c+1,1);
	    }
    }

    return 0;
}

#include <iostream>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;
#define vi vector<int>
#define pb push_back
#define x first
#define y second
#define DBG(x) cerr<<(#x)<<"="<<x<<"\n";
#define ll long long
#define N 55

char s[2005][2005];
int f[2005],d[2005][2005],l[2005][2005],h[2005][2005],vis[2005];
void upd(int x,int v){
	while(x<=2000)f[x]+=v,x+=x&-x;
}
int query(int x){
	int ans=0;
	while(x)ans+=f[x],x-=x&-x;
	return ans;
}
int main()
{
	int T,i,j,k,n,m;
		scanf("%d%d",&n,&m);
		for(i=0;i<=n+1;i++)
			for(j=0;j<=m+1;j++)l[i][j]=h[i][j]=0,s[i][j]='1';
		memset(vis,0,sizeof(vis));
		for(i=1;i<=n;i++)scanf("%s",s[i]+1);
		for(i=1;i<=n;i++){
			for(j=1;j<=m;j++){
				if(s[i][j]=='1')h[i][j]=0;
				else h[i][j]=h[i-1][j]+1;
			}
		}
		for(j=1;j<=m;j++){
			for(i=1;i<=n;i++){
				if(s[i][j]=='1')l[i][j]=0;
				else l[i][j]=l[i][j-1]+1;
			}
		}
		for(i=1;i<=n;i++)
			for(j=1;j<=m;j++)d[i][j]=min(h[i][j],l[i][j]);
		for(i=n;i;i--){
			for(j=1;j<=m;j++){
				if(s[i][j]=='1')h[i][j]=0;
				else h[i][j]=h[i+1][j]+1;
			}
		}
		for(j=m;j;j--){
			for(i=1;i<=n;i++){
				if(s[i][j]=='1')l[i][j]=0;
				else l[i][j]=l[i][j+1]+1;
			}
		}
		ll ans=0;
		for(i=1;i<=n;i++)
			for(j=1;j<=m;j++)ans+=(s[i][j]=='0');
		//DBG(ans)
		int now=0;
		for(k=n-1;k>=0;k--){
			vi g[n+2];now++;
			memset(f,0,sizeof(f));
			for(i=n;i-k>0;i--){
				j=i-k;
				if(!g[i].empty()){
					for(int k=0;k<g[i].size();k++){
						int x=g[i][k];
						if(vis[x]==now)continue;
						vis[x]=now;
						upd(x,-1);
					}
				}
				int len=min(l[i][j],h[i][j]);
				if(len>1)ans+=query(i+len-1);
				len=d[i][j];
				if(len>1)upd(i,1),g[i-len].pb(i);
			}
		}
		for(k=-1;k>=1-m;k--){
			vi g[m+2];now++;
			memset(f,0,sizeof(f));
			for(j=m;j+k>0;j--){
				i=j+k;
				if(!g[j].empty()){
					for(int k=0;k<g[j].size();k++){
						int x=g[j][k];
						if(vis[x]==now)continue;
						vis[x]=now;
						upd(x,-1);
					}
				}
				int len=min(l[i][j],h[i][j]);
				//cerr<<i<<" "<<j<<" "<<len<<" ";
				if(len>1)ans+=query(j+len-1);
				len=d[i][j];
				if(len>1)upd(j,1),g[j-len].pb(j);
			}
		}
		printf("%lld\n",ans);
		/*
		ans=0;
		for(i=1;i<=n;i++)
			for(j=1;j<=m;j++){
				for(k=1;;k++){
					if(s[i][j+k-1]=='1'||s[i+k-1][j]=='1')break;
					if(d[i+k-1][j+k-1]>=k)ans++;
				}
			}
		DBG(ans)
		*/
	return 0;
}
#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <string>
#include <cstring>
#include <cmath>
#include <set>
#include <map>
#include <algorithm>
#include <cstdlib>
#include <sstream>
#include <iomanip>
#include <stack>
#include <ctime>
#include <functional>
#include<stdio.h>
using namespace std;


#define pi 3.1415921075358979323841073
#define ll long long
#define toint(a) atoi(a.c_str())
#define all(c) c.begin(), c.end()
#define sor(i,j,n) for(int i=j;i<n;++i)
#define fsyo return 0
#define nt endl
#define tpi cout
#define length length()
#define tr(container, it) for( decltype(container.begin()) it = container.begin(); it != container.end(); it++) 


string tostring(int a)
{
	ostringstream temp;
	temp << a;
	return temp.str();
}

int gcd(int a, int b)
{
	if (a == 0){
		return b;
	}
	else{
		return gcd(b%a, a);
	}
}

int lcm(int a, int b)
{
	return a*b / gcd(a, b);
}

bool isPrime(int num)
{
	if (num <= 1)
		return false;
	else if (num == 2)
		return true;
	else if (num % 2 == 0)
		return false;
	else
	{
		bool prime = true;
		int divisor = 3;
		double num_d = static_cast<double>(num);
		int upperLimit = static_cast<int>(sqrt(num_d) + 1);

		while (divisor <= upperLimit)
		{
			if (num % divisor == 0)
				prime = false;
			divisor += 2;
		}
		return prime;
	}
}

template <class T>
void reverse(T *a, int n){
	T *skizb = a, *verj = a + n - 1;
	while (skizb < verj){
		swap(*skizb, *verj);
		skizb++;
		verj--;
	}
}

ll fact(ll in){
	if (in == 0 || in == 1){
		return 1;
	}
	ll res = 1, mult = 2;
	while (mult < in + 1){
		res *= mult;
		mult++;
	}
	return res;
}

struct str{
	int x, y, z;

	bool operator<(const str rhs) const
	{
		if (x < rhs.x)
		{
			return true;
		}
		else if (x == rhs.x)
		{
			if (y < rhs.y)
			{
				return true;
			}
			else if (y == rhs.y)
			{
				return z < rhs.z;
			}
		}
		return false;
	}

}sv[8];

ll exp(ll n, ll r, ll md)
{
	if (r == 0){
		return 1;
	}
	ll ans = exp(n, r / 2, md);
	ans *= ans;
	ans %= md;
	if (r & 1){
		ans *= n;
		ans %= md;
	}
	return ans%md;
}
ll choose(ll n, ll r, ll md)
{
	ll ans = 1;
	sor(i, n - r + 1, n + 1){
		ans *= i;
		ans %= md;
	}
	sor(i, 1, r + 1){
		ans *= exp(i, md - 2, md);
		ans %= md;
	}
	return ans%md;
}

#define mod 1000000007

string collatz(int in){
	int e = 0, o = 0;
	int s = 0;
	while (in != 1){		
		if (in % 2 == 0){
			e += in;
			in /= 2;
		}
		else{
			o += in;
			in *= 3;
			++in;
		}
		++s;
	}
	++o;
	e %= s;
	o %= s;
	
	if (o>e){
		return "Odd Rules";
	}
	else if (e > o){
		return "Even Rules";
	}
	else{
		return "Tie";
	}
	
}

int main(){
	int n;
	cin >> n;
	++n;
	while (--n){
		int in;
		cin >> in;
		tpi << collatz(in) << nt;
	}

	fsyo;
}
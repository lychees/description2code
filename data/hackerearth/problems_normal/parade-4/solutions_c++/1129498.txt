#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <string>
#include <iostream>

using namespace std;

#define INF 1000000007
#define LIM 1000000007
#define MAXN 1001
#define MAXM 1001
#define MAXC 1001

int c[MAXN];
int n, m;
int pd[MAXM][MAXN];
int pre[MAXM][MAXN];
int last[MAXC];
int pai[MAXN];
int filho[MAXN];
int vet[MAXN];

inline void fastRead_int(int &x) {
    register int c = getchar();
    x = 0;
    int neg = 0;

    for(; ((c<48 || c>57) && c != '-'); c = getchar());

    if(c=='-') {
        neg = 1;
        c = getchar();
    }

    for(; c>47 && c<58 ; c = getchar()) {
        x = (x<<1) + (x<<3) + c - 48;
    }

    if(neg)
        x = -x;
}

int main() {
    int t;
    fastRead_int(t);
    while (t--) {
        fastRead_int(n);
        fastRead_int(m);
        int i, j;
        int maior=0;
        for (i=1; i<=n; i++) {
            fastRead_int(pai[i]);
            fastRead_int(c[i]);
            if (pai[i]!=0) {
                filho[pai[i]]=i;
            }
            if (c[i]>maior) {
                maior=c[i];
            }
        }
        int atual;
        for (i=1; i<=n; i++) {
            if (pai[i]==0) {
                atual=i;
                break;
            }
        }
        for (i=1; i<=n; i++) {
            vet[i]=c[atual];
            atual=filho[atual];
        }
        for (i=0; i<=m; i++) {
            pd[i][0]=0;
            pre[i][0]=0;
        }
        for (j=0; j<=n; j++) {
            pd[0][j]=0;
            pre[0][j]=0;
        }
        for (i=1; i<=m; i++) {
            for (j=1; j<=maior; j++) {
                last[j]=0;
            }
            for (j=1; j<=n; j++) {
                pd[i][j]=pre[i-1][j-1];
                pd[i][j]+=1;
                pd[i][j]%=LIM;
                pre[i][j]=pre[i][j-1];
                pre[i][j]-=last[vet[j]];
                pre[i][j]+=LIM;
                pre[i][j]%=LIM;
                last[vet[j]]=pd[i][j];
                pre[i][j]+=last[vet[j]];
                pre[i][j]%=LIM;
            }
        }
        int res=0;
        for (j=1; j<=maior; j++) {
            res+=last[j];
            res%=LIM;
        }
        printf("%d\n", res);

    }

    return 0;
}

#include<bits/stdc++.h>
//zone
//full concentration
using namespace std;
//If i m not talented as others, i can be 1 second faster, i can be 1 step ahead, i will reach the summit.At that moment, I will be at the highest place
void findset(int parent[],int i,vector<int> &store)
{
    if(parent[i] != i)
    {
       store.push_back(i);
       //cout<<parent[i]<<endl;
       findset(parent,parent[i],store);
    }
    else
    {
        store.push_back(i);
        return ;
    }
 
}
void shortestpath(int src, int parent[],int v,vector<pair<int,int> > graph[],int C,int &flag,int &dista,vector<int> &store)
{
    priority_queue< pair<int,int> , vector<pair <int, int > >,greater<pair<int,int> > > pq;
    vector<int>dist(v+ 1,INT_MAX);
    pq.push(make_pair(0,src));
    dist[src] = 0;
    //map<int,int>mrk;
    while(!pq.empty())
    {
        int ver = pq.top().second;
       // cout<<ver<<endl;
        pq.pop();
       /* if(mrk[ver])
        {
            continue;
        }
        //cout<<ver<<endl;
        mrk[ver] = 1;*/
        for(int i = 0 ; i < graph[ver].size(); i++)
        {
 
            int dest = graph[ver][i].first;
            int wt = graph[ver][i].second;
 
            if(dist[dest] > dist[ver] + wt)
            {
                dist[dest] = dist[ver] + wt;
                parent[dest] = ver;
                pq.push(make_pair(dist[dest],dest));
            }
        }
    }
    if(dist[C] != INT_MAX)
    {
        flag = 1;
    }
    dista = dista + dist[C];
   /* for(int i = 1 ; i <= v ;i++)
    {
        cout<<parent[i]<<endl;
    }
    cout<<endl;*/
    if(flag == 1)
    {
        findset(parent,C,store);
    }
 
}
 
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        int n;
        cin >> n;
        int i;
        int parent[n + 1];
        for(i = 1 ; i <= n ; i++)
        {
            parent[i] = i;
        }
        int k;
        cin >> k;
        int x,y,w;
        vector< pair<int,int> >graph[n + 1];
        for(i = 0 ; i < k ; i++)
        {
            cin >>x >> y >> w;
            graph[x].push_back(make_pair(y,w));
            graph[y].push_back(make_pair(x,w));
        }
        int A,B,C;
        cin >> A>>B>>C;
        vector<int>store;
        vector<int> store1;
        int flag = 0;
        int dista = 0;
        shortestpath(A,parent,n,graph,B,flag,dista,store);
        if(flag == 1)
        {
            flag = 0;
            /*for(i = 0 ; i <store.size() ; i++)
            {
                cout<<store[i]<<endl;
            }*/
            reverse(store.begin(),store.end());
            for(int j = 1 ; j<= n ; j++)
            {
                parent[j] = j;
            }
            shortestpath(B,parent,n,graph,C,flag,dista,store1);
        }
        if(flag == 0)
        {
            cout<<"No Train Found. \n";
        }
        else
        {
            cout<<dista<<endl;
            reverse(store1.begin(),store1.end());
            for(int w = 0 ; w<store.size() - 1;w++)
            {
                cout<<store[w] << " ";
            }
            for(int k = 0 ; k < store1.size() ; k++)
            {
                cout<<store1[k] << " ";
            }
            cout<<endl;
        }
 
    }
    return 0;
}
#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<string>
#include<vector>
#include<sstream>
#include<algorithm>
#include<map>
#include<queue>
using namespace std;
map<string, bool> DP;
vector<int> pos;
int N;
bool solve(string s, bool turn) {
	//cout << s << " " << turn <<"\n";
	if (s.size () == 1 && s[0] == '|') return false;
	if (DP.count(s)) return DP[s];
	bool found = false;
	for (int i = 0; i < s.size(); i++) if (s[i] == '|') {
		int j = i + 1;
		for (; j < s.size(); j++) if (s[j] == '|') break;
		string t = s.substr(0,i+1);
		if (j < s.size()) t += s.substr(j);
		if (t != s )found = !solve(t, !turn);
		j = i - 1;
		for (; j >=0 ;j--) if (s[j] == '|') break;
		t = "";
		if (j > 0) t = s.substr(0, j);
		t += s.substr(i);
		if (t != s) found |= !solve(t, !turn);
		
	}
	return DP[s] = found;
}

int main() {
	int T; 
	for (cin >> T; T; T--) {
		string s; 
		cin >>s ;
		string t = "";
		pos.clear();
		int cnt = 0; bool found = false;
		for (int i = 0; i < s.size(); i++) { 
			if (s[i] == '|') {
				if (cnt != 0 ) pos.push_back(cnt);
				cnt = 0;
				found = true;
			}
			else cnt++;
		}	
		if (cnt != 0 ) pos.push_back(cnt);
		bool ans = false;
		if (found) {
			int s = 0;
			for (int i = 0; i < pos.size(); i++) s ^= pos[i];
			if (s != 0) ans = true;
		}
		cout << (ans ? "Alice" : "Bob") <<"\n";
	}
    return 0;
}

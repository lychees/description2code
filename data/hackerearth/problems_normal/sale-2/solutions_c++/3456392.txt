#include <iostream>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
bool check[100005];
vector<int>graph[100005];
bool dfs(int source, int parent){
//	cout<<"enter";
	check[source] = true;
	int i;
	for(i = 0; i < graph[source].size(); i++){
		if(!check[graph[source][i]]){
			if(dfs(graph[source][i], source))
			return true;
		}
		else if(graph[source][i] != parent){
			return true;
		}
	//	parent[graph[source][i]] = source;
	/*	if(graph[source][i] != parent[source]){
		//	cout<<graph[source][i]<<" "<<parent[source];
			if(check[graph[source][i]] == true)
			return true;
			else return
			dfs(graph[source][i]);
		}
		*/
	//	else return();
		
	}
	return false;
}
int main() {
	int j, i, t, n, m, flag = 0, a, b;
	bool p;
	cin>>t;
	while(t--){
		cin>>n>>m;
		flag = 0;
		for(i = 0; i <= n; i++){
			graph[i].clear();
		}
	//	cout<<"d1";
		fill(check, check+n+5, false);
	//	cout<<"d2";
//		fill(parent, parent+n+5, -1);
	//	cout<<"d3";
		for(i = 0; i < m; i++){
			cin>>a>>b;
			graph[a].push_back(b);
			graph[b].push_back(a);
		}//cout<<"d4";
		for(i = 1; i <= n; i++){
		//	cout<<graph[i].size();
			if(graph[i].size() > 2){
				flag = 1;
				cout<<"NO"<<endl;
				break;
			}
		}
	//	cout<<"d5";
		if(!flag){
			for(i = 1; i <= n; i++){
				if(!check[i])
				 p = dfs(i, -1);
				if(p){
					flag = 1;
					cout<<"NO"<<endl;
					break;
				}
			}
			if(!flag){
				cout<<"YES"<<endl;
			}
		}
	}
	// your code goes here
	return 0;
}
/*
2
5 3
1 2
3 4
2 5
4 3
1 2
1 3
1 4
*/
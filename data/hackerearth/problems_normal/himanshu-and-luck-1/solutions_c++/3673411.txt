#include <iostream>
#include <algorithm>

using namespace std;

void preprocess();
int findlowerindex(vector<long long int> &vec, long long int val);
int findhigherindex(vector<long long int> &vec, long long int val);

vector<long long int> vec;

int main()
{
	int T;
	long long int L, R;
	
	vec.clear();
	preprocess();
	cin>>T;
	while(T--)
	{
		cin>>L>>R;
		int ui = findhigherindex(vec, R);
		int li = findlowerindex(vec, L);
		//cout<<ui<<" "<<li<<endl;
		cout<<ui-li+1<<endl;
	}
    return 0;
}

void preprocess()
{
	long long int val;
	vec.push_back(4);
	vec.push_back(7);
	
	int index = 0;
	
	while(vec.size() < 524300)
	{
		val = vec[index]*10;
		vec.push_back(val + 4);
		vec.push_back(val + 7);
		index++;
	}
}

int findlowerindex(vector<long long int> &vec, long long int val)
{
	int low = 0;
	int high = vec.size()-1;
	int mid;
	
	while(low <= high)
	{
		mid = (low+high)/2;
		if(vec[mid] == val)
		{
			return mid;
		}
		else if(vec[mid] > val)
		{
			high = mid-1;
		}
		else
		{
			low = mid+1;
		}
	}
	
	return low;
}

int findhigherindex(vector<long long int> &vec, long long int val)
{
	int low = 0;
	int high = vec.size() -1;
	int mid;
	
	while(low <= high)
	{
		mid = (low+high)/2;
		
		if(vec[mid] == val)
		{
			return mid;
		}
		else if(vec[mid] > val)
		{
			high = mid-1;
		}
		else
		{
			low = mid+1;
		}
		
	}
	
	return high;
}
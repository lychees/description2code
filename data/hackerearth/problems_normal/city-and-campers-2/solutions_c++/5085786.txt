#include <bits/stdc++.h>
using namespace std;
int parent[100009],p,minm = 1000000009;
int sizedsu[100009],hsh[100009];
int findP(int x);
int merger(int x,int y);
struct cmp{
bool operator()(int a,int b)
{
    return a<b;
    
}};
set<int> dsu;


int findP(int x)
{

	if(parent[x]!=x)
		parent[x]=findP(parent[x]);
	return parent[x];
}

int merger(int x,int y)
{

	int px = findP(x);
	int py = findP(y);
	if(px!=py)
	{
        if (sizedsu[py] > sizedsu[px])
			swap(py, px);
		
		hsh[sizedsu[px]]--;
		if(hsh[sizedsu[px]]==0)	dsu.erase(dsu.find(sizedsu[px]));
		
		hsh[sizedsu[py]]--;
		if(hsh[sizedsu[py]]==0)	dsu.erase(dsu.find(sizedsu[py]));
		
		sizedsu[px]+=sizedsu[py];
		hsh[sizedsu[px]]++;
		if(hsh[sizedsu[px]]==1)
			dsu.insert(sizedsu[px]);
		parent[py] = px;
	}

}

int main()
{
    int n,q,a,b,f;
    //freopen("file1.txt","r",stdin);
    cin>>n>>q;

    for(int i=1;i<=n;i++)
    {

        parent[i] = i;
        sizedsu[i] = 1;
        hsh[1]++; 
        dsu.insert(1);
    }
	int pv=-1,v,mn;
    for(int i=1;i<=q;i++)
    {

        cin>>a>>b;
        merger(a,b);
        pv=-1;mn=INT_MAX;
        for(set<int>:: iterator it=dsu.begin();it!=dsu.end();it++)
        {
        	v = *it;
        	if(hsh[v]>1)
        	{
        		mn=0;break;
        	}
        	if(pv!=-1)
        	{
        		mn = min(mn,v-pv);
        	}
        	pv = v;
        }
        if(mn==INT_MAX)
        	mn=0;
        cout<<mn<<endl;
    }

}

// The truth is always either terrible or boring
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;

#define X first
#define Y second
#define rep(i,n) for(int i = 0, _n = (n); i < _n; i++)
#define rep1(i,a,b) for(int i = a, _b = (b); i <= _b; i++)
#define rep2(i,b,a) for(int i = b, _a = (a); i >= _a; i--)
#define mem(a,val) memset(a, (val), sizeof a)
#define mp make_pair
#define mt make_tuple // remember tie & ignore
#define eb emplace_back
#define all(c) (c).begin(), (c).end()
#define uni(c) c.resize(distance(c.begin(), unique(all(c))))
#define tr(c,it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define cases int __t; cin >> __t; rep1(_t,1,__t)
#define case(ans) "Case #" << _t << ": " << ans << "\n"
#define cout(d) cout << fixed << setprecision(d)
#define err(x) cerr << #x << " = " << x << '\n'
const int mod = 1e9 + 7;

struct nod {
    int x, y, val;
    nod(int _x, int _y, int _v):
        x(_x), y(_y), val(_v) {}
};
bool comp(nod l, nod r) {
    return l.val < r.val;
}
 
struct dsu {
    vi par;
    dsu(int n): par(n) { rep(i,n) par[i] = i;}
    void adopt(int a, int b) { par[dad(b)] = dad(a);}
    int dad(int a) { return a == par[a] ? a : par[a] = dad(par[a]);}
    bool dogla(int a, int b) { return dad(a) != dad(b);}
};
 
typedef vector<vector<pii>> vvp;
inline ll mst_kruskal(vvp& g) {
    // O(E * log E)
    int n = g.size();
    
    vector<nod> edge;
    rep(i,n)
        rep(j,g[i].size())
            edge.eb(nod(i,g[i][j].X,g[i][j].Y));
    sort(all(edge), comp);
    
    dsu d(n);
    ll tot(0);
    int edgeid(0), k(0), m(edge.size());
    while(edgeid < n-1 && k < m) {
        if(d.dogla(edge[k].x, edge[k].y)) {
            edgeid++;
            tot += edge[k].val;
            d.adopt(edge[k].x, edge[k].y);
        }
        k++;
    }
    return tot;
}

int main() {
//    ios_base::sync_with_stdio(false); cin.tie(NULL);
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
    int n, u, v, w; cin >> n;
    vvp g(n);
    cases {
        cin >> u >> v >> w;
        g[u-1].eb(v-1, w);
    }
    cout << mst_kruskal(g);
    return 0;
}
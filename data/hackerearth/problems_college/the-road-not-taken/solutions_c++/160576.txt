// {{{ Headers
// vim:filetype=cpp:foldmethod=marker:foldmarker={{{,}}}

#include <cassert>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#include <algorithm>
#include <deque>
#include <functional>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#include <fstream>
#include <iostream>
#include <sstream>

#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;
// }}}

typedef long long int64;
const int INF = 0x3f3f3f3f;
template <class T> inline int len (const T &a) { return a.size (); }

int64 memo [50][50][25];
const int dx [] = { -1, -1, +0, +1, +1, +0 };  // Hexagon moves clockwise.
const int dy [] = { +0, +1, +1, +0, -1, -1 };

int64
solve (int idx, int x, int y) {
    if (idx == 0) return (x == 25 && y == 25);
    if (memo [idx][x][y] != -1) return memo [idx][x][y];
    int64 ret = 0;
    for (int h = 0; h < 6; h++) 
        ret += solve (idx - 1, x + dx [h], y + dy [h]);
    return memo [idx][x][y] = ret;
}

int
main () {
#ifdef LOCALHOST
    freopen ("test.in", "r", stdin);
    // freopen ("test.out", "w", stdout);
#endif
    memset (memo, -1, sizeof (memo)); 
    int T, N;
    scanf ("%d", &T);
    while (T--) {
        scanf ("%d", &N);
        int64 ret = solve (N, 25, 25);
        printf ("%lld\n", ret);
    }

    return 0;
}

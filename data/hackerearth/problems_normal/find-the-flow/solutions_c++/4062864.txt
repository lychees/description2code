#include<bits/stdc++.h>
using namespace std;

	
int find(char ch){
	if(ch >= 'A' && ch <= 'O')
		return ch-'A'+1;
	if(ch == 'S')
		return find('O')+1;
	if(ch == 'T')
		return find('O')+2;
}
int main(){
	int e;
	cin>>e;
	int mat[100][100];
	for(int i=0; i<e; i++){
		char x, y;	
		int c;
		cin>>x>>y>>c;
		mat[find(x)][find(y)]=c;
	}	
	int flag=1;
	int flow=0;
	while(flag){	
		int vis[1010]={0}, p[1010];
		queue<int>q;
		q.push(find('S'));
		vis[find('S')]=1;
		p[find('S')]=-1;
		while(q.size() && q.front() != find('T')){
			int top = q.front();
			q.pop();
			for(char ch='A'; ch<='O'; ch++){
				if(!vis[find(ch)] && mat[top][find(ch)]){
					vis[find(ch)]=1;
					p[find(ch)]=top;		
					q.push(find(ch));
				}	
			}
			for(char ch='S'; ch<='T'; ch++){
				if(!vis[find(ch)] && mat[top][find(ch)]){
					vis[find(ch)]=1;
					p[find(ch)]=top;
					q.push(find(ch));
				}
			}
		}	
		if(q.size()){
			int x=find('T');
			int mn = INT_MAX;
			while(p[x] != -1){
				mn = min(mn, mat[p[x]][x]);
				x = p[x];	
			}
			flow+=mn;
			x = find('T');	
			while(p[x] != -1){
				mat[p[x]][x]-=mn;
				mat[x][p[x]]+=mn;				
				x=p[x];
			}		
		}
		else flag=0;
	}		
	cout<<flow<<endl;
	return 0;
}
#include<iostream>
using namespace std;
void union1(int i,int j,int a[],int s[]);
int root(int i,int a[]);
bool find(int i,int j,int a[]);
int main()
{
int n,i,x,y,q;
cin>>n;
int id[n+1],s[n+1];
for(i=1;i<=n;i++)
{       id[i]=i;
		s[i]=1;

}
cin>>q;
for(i=0;i<q;i++)
	{ cin>>x>>y;
	union1(x,y,id,s);
	}
	int c=0;
	for(i=1;i<=n;i++)
{
if(id[i]==i)
c++;
}
cout<<c;}
int root(int i,int a[])
{
	while(i!=a[i])
	i=a[i];
	return i;
}
bool find(int i,int j,int a[])
{
int	x=root(i,a);
int	y=root(j,a);
	if(x==y)
	return 1;
	else
	return 0;
}
void union1(int i,int j,int a[],int s[])
{
	if(!find(i,j,a))
	{
	int	x=root(i,a);
	  int  y=root(j,a);
	    if(s[x]>s[y])
	    {
	    	a[y]=x;
	    	s[x]+=s[y];
		}
		else
		{
	    	a[x]=y;
	    	s[y]+=s[x];
		}
		
	}
//	else 
//	cout<<"cycle exist"<<endl;
}
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>  
#include <map>
#include <string> 
#include <climits>
#include <set>
#include <string>   
#include <sstream>
#include <utility>  
#include <ctime>
#include <cassert>
#include <fstream>
#include <tr1/unordered_map>
using namespace std;
typedef long long LL;
#define VI vector<int>
#define SZ(A) ((int)A.size())
#define LEN(A) ((int)A.length())
#define MS(A) memset(A, 0, sizeof(A))
#define MSV(A,a) memset(A, a, sizeof(A))
#define MAX(a,b) ((a >= b) ? (a) : (b))
#define MIN(a,b) ((a >= b) ? (b) : (a))
#define ABS(a) (((a) > 0) ? (a) : (-a))
#define II pair<int, int>
#define MP make_pair
#define X first
#define Y second
#define PB push_back
#define FOUND(A, x) (A.find(x) != A.end())
#define getcx getchar_unlocked
#define INF (int(1e9))
#define INFL (LL(1e18))

#define chkbit(s, b) (s & (1<<b))
#define setbit(s, b) (s |= (1<<b))
#define clrbit(s, b) (s &= ~(1<<b))

#define REP(i, n) for(int i = 0; i < (n); i++)
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REV(i, a, n) for(int i = a; i > n; i--)
#define FORALL(itr, c) for(itr = (c).begin(); itr != (c).end(); itr++)
#define ALL(A) A.begin(), A.end()
#define LLA(A) A.rbegin(), A.rend()
//int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
//int dx[] = {1, 1, 1, 0, 0, -1, -1, -1}, dy[] = {1, 0, -1, 1, -1, 1, 0, -1};
inline void inp( int &n ) {
        n=0; int ch = getcx(); int sign = 1;
        while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
        while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
        n = n * sign;
}
const int MAXN = 200005, neigh = 2;
int n,v1,v2;
long long val = 0;
pair<int,int> a[MAXN];
vector < pair <int, II> > E;
set< pair<int, int> > b, c;

int p[MAXN];

void init(int n)
{
		REP(i, n) p[i] = i;
}

int find(int x)
{
		if(p[x] == x) return p[x];
			else return p[x] = find(p[x]);
}

void Union(int x, int y)
{
		int p1=find(x);
			int p2=find(y);
				p[p2]=p1;
}

int main() 
{
	cin >> n;
	init(n+3);
	REP(i, n)
	{
		cin >> a[i].X >> a[i].Y;
		b.insert(MP(a[i].X, i));
		c.insert(MP(a[i].Y, i));
	}
	REP(i, n)
	{
		set<pair<int, int> >::iterator itr = b.lower_bound(MP(a[i].X, -99999));
		for(int p=0;p<neigh;p++)
		{
			if(itr == b.end()) break;
			E.push_back(make_pair(abs(a[i].X - itr->X), make_pair(itr->Y, i)));
			itr++;
		}
		itr = b.lower_bound(MP(a[i].X, -99999));
		for(int p=0;p<neigh;p++)
		{
			E.push_back(make_pair(abs(a[i].X - itr->X), make_pair(itr->Y, i)));
			if(itr == b.begin()) break;
			itr--;
		}
		itr = c.lower_bound(MP(a[i].Y, -99999));
		for(int p=0;p<neigh;p++)
		{
			if(itr == c.end()) break;
			E.push_back(make_pair(abs(a[i].Y - itr->X), make_pair(itr->Y, i)));
			itr++;
		}
		itr = c.lower_bound(MP(a[i].Y, -99999));
		for(int p=0;p<neigh;p++)
		{
			E.push_back(make_pair(abs(a[i].Y - itr->X), make_pair(itr->Y, i)));
			if(itr==c.begin()) break;
			itr--;
		}
	}
	sort(E.begin(),E.end());
	REP(i, SZ(E))
	{
		if(find(E[i].Y.X) != find(E[i].Y.Y))
		{
			val=val+E[i].X;
			Union(E[i].Y.X, E[i].Y.Y);
		}
	}
	cout<<val<<endl;
	return 0;
}

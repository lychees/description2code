#include <iostream>
#include <bits/stdc++.h>
using namespace std;


int calval(int mid,int ch[],int n)
{
	int ret=0;
	for(int i=0;i<n;i++)
		ret+=(abs(ch[i]-mid));
	return ret;
	
}

int b_search(int minv,int maxv,int ch[],int n)
{
	int mid=(minv+maxv)/2;
	
	if(minv>=maxv)
		return minv;
		

	
	if(maxv-minv==1)
	{
		int minval=calval(minv,ch,n);
		int maxval=calval(maxv,ch,n);	
		return (maxval<minval?maxv:minv);
		
	}
	//if(minmid>=maxv || mid<=minv)
		
	
	int midval=calval(mid,ch,n);
	int midvalp=calval(mid-1,ch,n);
	int midvaln=calval(mid+1,ch,n);
	if(midval<midvalp && midval<=midvaln)
		return mid;
	else if(midvalp<=midval)
		b_search(minv,mid-1,ch,n);
	else
		b_search(mid+1,maxv,ch,n);
	
}

bool comp(int const& lhs, int const& rhs)
{
	return(lhs<rhs);
	
}

void cal1()
{
	int n;
	cin>>n;
	int ch[n],tr[n];
	for(int i=0;i<n;i++)
		cin>>ch[i];
	
	for(int i=0;i<n;i++)
		cin>>tr[i];
	
	
	int opt = b_search(*min_element(ch,ch+n),*max_element(ch,ch+n),ch,n);
	
	sort(ch,ch+n,comp);
	sort(tr,tr+n);
	
	int ans=(abs(tr[0]-ch[0]));
	for(int i=1;i<n;i++)
	{
		ans=ans<(abs(tr[i]-ch[i]))?(abs(tr[i]-ch[i])):ans;
		
	}
	cout<<ans<<endl<<opt<<endl;;
	
}
int main()
{
    int t;
    cin>>t;
    for(int i=0;i<t;i++)
    	cal1();
    return 0;
}

#include <bits/stdc++.h>
#define rep(i,x,y) for (int i = (x); i<=(y); i++)
#define repe(i,x,y) for (int i = (x); i < (y);i++)
#define drep(i,x,y) for (int i = (x); i >= (y); i--)
#define mp make_pair
#define pb emplace_back
#define mt make_tuple
#define gcd __gcd
#define sf(n) scanf("%Lf",&n)
#define prf(n) printf("%.12Lf",n)
#define	s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define pr(n) printf("%d",n)
#define prl(n) printf("%lld",n)
#define endc printf("\n")
#define psp printf(" ")

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

const int maxn = 5e5 + 7;
const ll md = 1e9 + 7;
const ll p = 257ll;
const ll pi = 70038911ll;

string s;

int S[maxn];
ll h[maxn];
ll pp[maxn];
ll pip[maxn];

int N;

inline ll gh(int x,int y) {
	return ( (h[y] - h[x-1] + md) * pip[x-1] )%md;
}

inline bool sufsort(int x,int y) {
	int l = 0, r = min(N-y+1,N-x+1);

	if (s[x] != s[y]) return s[x] < s[y];

	while (l < r) {
		int mid = (l+r+1)>>1;
		if (gh(x,x+mid-1) == gh(y,y+mid-1)) {
			l = mid;
		} else {
			r = mid-1;
		}
	}

	//cout<<x<<" : "<<y<<" : "<<(s[x+l] < s[y+l])<<endl;

	return s[x+l] < s[y+l];
}

inline int lcp(int x,int y) {
	
	int l = 0, r = min(N-y+1,N-x+1);

	if (s[x] != s[y]) return 0;

	while (l < r) {
		int mid = (l+r+1)/2;
		if (gh(x,x+mid-1) == gh(y,y+mid-1)) {
			l = mid;
		} else {
			r = mid-1;
		}
	}

	return l;
}	

void suffix() {
	N = s.size()-1; h[0] = 0;
	rep(i,1,N) {
		h[i] = (h[i-1] + (s[i]*pp[i])%md)%md;
		S[i] = i;
	}

	stable_sort(S+1,S+N+1,sufsort);
}

pii next(int l,int r,char c,int k) {
	int a = l, b = r;
	while (a < b) {
		int mid = (a+b-1)/2;
		if (s[S[mid]+k] >= c) {
			b = mid;
		} else {
			a = mid+1;
		}
	}
	if (s[S[a]+k]!=c) {
		return mp(-1,-1);
	}
	pii z = mp(a,-1);
	a = l, b = r;
	while (a < b) {
		int mid = (a+b+1)/2;
		if (s[S[mid]+k] <= c) {
			a = mid;
		} else {
			b = mid-1;
		}
	}
	z.second = a;
	return z;
}

int Z[maxn];
int pos[maxn];
int last[maxn];
int bl[maxn];

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	pp[0] = pip[0] = 1;
	repe(i,1,maxn) {
		pp[i] = (pp[i-1] * p)%md;
		pip[i] = (pip[i-1] * pi)%md;
	}

	int n; cin>>n; s = " ";
	rep(i,1,n) {
		string t; cin>>t;
		s += "$"+t;
	}

	int q; cin>>q;

	int M = s.size()-1;

	s += (char)10;

	rep(i,1,q) {
		s += "%";
		Z[i] = s.size();
		string z; cin>>z;
		s += z;
	}

	suffix();

	last[0] = -1;

	rep(i,1,N) {
		pos[S[i]] = i;
		if (S[i] <= M) {
			last[i] = i;
		} else {
			last[i] = last[i-1];
		}
	}

	bl[N+1] = -1;
	drep(i,N,1) {
		if (S[i] <= M) {
			bl[i] = i;
		} else {
			bl[i] = bl[i+1];
		}
	}

	//cout<<s<<endl;

	/*rep(i,1,N) {
		cout<<S[i]<<" ";
	}
	cout<<endl;*/

	rep(i,1,q) {

		int ans = 0;

		//cout<<i<<" : "<<Z[i]<<endl;

		rep(p,Z[i],N) {
			if (s[p] == '%') break;
			int k = pos[p];

			//cout<<p<<" : "<<k<<" : "<<last[k]<<" : "<<bl[k]<<endl;

			ans = max(ans, max((last[k] < 0) ? 0 : lcp(S[last[k]],S[k]), (bl[k] < 0) ? 0 : lcp(S[bl[k]],S[k])));
		}

		cout<<ans<<"\n";
	}
}

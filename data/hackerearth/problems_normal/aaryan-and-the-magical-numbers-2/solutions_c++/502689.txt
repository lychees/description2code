#include <bits/stdc++.h>
using namespace std;
long long power[19];
long long help[20];


long long solve(long long num,int digits,int prev)
{
  if(prev==2 || prev==3 || prev==5 || prev==7)
   return num+1;
   
  if(digits==0 || num==0)
   return 0;
   
  long long start=num/power[digits-1];
  int primes;
  
  
  if(start<=2)
   primes=0;
   
  else if(start<=3)
   primes=1;
   
  else if(start<=5)
   primes=2;
   
  else if(start<=7)
   primes=3;
   
  else
  primes=4;
  
  //printf("%d--%lld %d %lld %lld\n",digits,start,primes,start-primes,help[digits]);
  
  return (start-primes)*help[digits]+(primes)*power[digits-1]+solve(num-start*power[digits-1],digits-1,start);

}
int main() 
{
	power[0]=1;
	power[1]=10;
	
	for(int i=2; i<=18; i++)
	 power[i]=10*power[i-1];
	 
	help[1]=0;
	help[2]=4;
	
	for(int i=3; i<=18; i++)
	{
		help[i]=4*power[i-2]+6*help[i-1];
	//	printf("%lld--\n",help[i]);
	}
	
	int t;
	cin>>t;
	
	while(t--)
	{
		long long num,temp,digits=0;
		scanf("%lld",&num);
		
		temp=num;
		while(temp)
		{
			digits++;
			temp/=10;
		}
		long long ans=solve(num,digits,-1);
		printf("%lld\n",ans);
	}
	return 0;
}
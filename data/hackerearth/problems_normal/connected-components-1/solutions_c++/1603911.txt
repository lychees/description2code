#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

const double EPS = 1e-9;
const int MOD = 1e9 + 7;
const int MAXN = 1e5 + 10;

void add(int& x, int y) {
  (x += y) >= MOD && (x -= MOD);
}

int mul(int x, int y) {
  return x * 1ll * y % MOD;
}

int mpow(int a, int p) {
  int res = 1;
  for (; p > 0; p /= 2, a = mul(a, a))
    if  (p & 1)
      res = mul(res, a);
  return res;
}

int fact[MAXN];
int inv_fact[MAXN];

int C(int n, int k) {
  if  (k > n) return 0;
  return mul(fact[n], mul(inv_fact[k], inv_fact[n - k]));
}

void precalc() {
  fact[0] = 1;
  for (int i = 1; i < MAXN; ++i) {
    fact[i] = mul(i, fact[i - 1]);
  }
  forn(i, MAXN) {
    inv_fact[i] = mpow(fact[i], MOD - 2);
  }
}

int solve() {
  int n, m, c;
  scanf("%d%d%d", &n, &m, &c);

  if  (c == 0) {
    return m == n;
  }

  if  (c == 1) {
    if  (m == n) {
      return 0;
    }
    return m + 1;
  }

  if  (m == n) {
    return c == 0;
  }

  int ans = 0;
  // c - 1
  int cur = C(m - 1, c - 2);
  cur = mul(cur, C(n - m - 1, c - 1));
  add(ans, cur);

  // c
  cur = C(m - 1, c - 1);
  cur = mul(cur, C(n - m - 1, c - 1));
  cur = mul(cur, 2);
  add(ans, cur);

  // c + 1
  cur = C(m - 1, c);
  cur = mul(cur, C(n - m - 1, c - 1));
  add(ans, cur);

  return ans;
}

int main() {
#ifdef LOCAL
  freopen(".in", "r", stdin);
//  freopen(".out", "w", stdout);
#endif

  precalc();

  int T;
  scanf("%d", &T);
  while (T--) {
    printf("%d\n", solve());
  }

  return 0;
}

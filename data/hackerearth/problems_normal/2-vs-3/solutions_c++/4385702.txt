#include<iostream>

using namespace std;

int temp[100002];
int tree[1000001];

char s[100001];

void init(int n){
    temp[n] = 0;
    temp[n-1] = 1;
    for(int i=n-2;i>=0;i--){
        temp[i] = (temp[i+1]*2)%3;
    }
}

void build(int node, int start, int end){
    if(start == end){
        tree[node] = temp[start]*(s[start]-'0');
    }
    else{
        int mid = (start+end)/2;
        build(node*2, start, mid);
        build(node*2+1, mid+1, end);
        tree[node] = (tree[node*2] + tree[node*2+1])%3;
    }
}

void update(int node, int start, int end, int index){
    if(start == end){
        if(!(s[start]-'0')){
            s[start] = '1';
            tree[node] = (tree[node]+temp[start])%3;
        }
    }
    else{
        int mid = (start+end)/2;
        if(start <= index && index <= mid) update(node*2, start, mid, index);
        else update(node*2+1, mid+1, end, index);
        tree[node] = (tree[node*2] + tree[node*2+1])%3;
    }
}

int query(int node, int start, int end, int l, int r){
    if(start > end || start > r || end < l){
        return 0;
    }
    if(l <= start && end <= r){
        return tree[node];
    }
    int mid = (start+end)/2;
    int p1 = query(node*2, start, mid, l, r);
    int p2 = query(node*2+1, mid+1, end, l, r);
    return (p1+p2)%3;
}

int main(){
    int n, q;
    cin >> n;
    init(n);
    cin >> s;
    build(1, 0, n-1);
    cin >> q;
    for(int i=0;i<q;i++){
        int a, l, r;
        cin >> a;
        if(a == 0){
            cin >> l >> r;
            int ans = query(1, 0, n-1, l, r);
            if(ans < temp[r] && ans != 0) ans += 3;
            cout << (ans/temp[r])%3 << endl;
        }
        else{
            cin >> l;
            update(1, 0, n-1, l);
        }
    }
}

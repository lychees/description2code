/*
*/
 
//#pragma comment(linker, "/STACK:16777216")
#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <ctime> 
 
#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash
 
#define eps 1e-11
//#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 256
#define right adsgasgadsg
#define free adsgasdg
#define move dadsgasdg

using namespace std;

long tests;
long n,ar[1<<20],s[1<<20];
long sz[1<<22];
long move[1<<22][2];
long N;
long qu,l,r;
long long ans[1<<20];
long le[1<<20],ri[1<<20];

inline void add(long v,long val,long ps)
{
 sz[v]++;
 // cout<<v<<"  "<<val<<"   "<<ps<<endl;
 if (ps==-1)return;
 long bt;
 if (val&(1<<ps))bt=1;
 else bt=0;
 if (move[v][bt]==-1)
 {
  move[v][bt]=N+1;
  sz[N+1]=0;
  move[N+1][0]=move[N+1][1]=-1;
  ++N;
 }
 add(move[v][bt],val,ps-1);
}

long lim,S;

inline long solve(long v,long ps)
{
 if (ps==-1)return sz[v];
 long have,need;
 if (S&(1<<ps))have=1;
 else have=0;
 if (lim&(1<<ps))need=1;
 else need=0;
 long ans=0;
 
 for (int bb=0;bb<=1;bb++)
 {
  if (move[v][bb]==-1)continue;
  long t=have;
  t^=bb;
  if (t>need)continue;
  if (t<need){ans+=sz[move[v][bb]];}
  if (t==need)
   ans+=solve(move[v][bb],ps-1);
 }
 return ans;
}

int main(){
//freopen("lattice.in","r",stdin);
//freopen("lattice.out","w",stdout);
//freopen("C:/input.txt","r",stdin);
//freopen("C:/output.txt","w",stdout);
//ios_base::sync_with_stdio(0);
//cin.tie(0);

cin>>tests;
for (;tests;--tests)
{
 cin>>n;
 long mx=0;
 
 for (int i=1;i<=n;i++)
{  //cin>>ar[i];
  scanf("%d",&ar[i]);
  mx=max(mx,ar[i]);
}
 
 long td=29;
 while ((mx&(1<<td))==0)--td;
 
 for (int i=1;i<=n;i++)
  s[i]=(s[i-1]^ar[i]);   
 //cin>>qu;
 scanf("%d",&qu);
 
 for (int i=1;i<=qu;i++)
 {
//  cin>>le[i]>>ri[i];
  scanf("%d%d",&le[i],&ri[i]);
  ans[i]=0;
 }
  move[1][0]=move[1][1]=-1;
  sz[1]=0;
  N=1;
 
  add(1,s[0],td);
  
  vector<pair<long, pair<long, long> > > need;
  for (int i=1;i<=qu;i++)
  {
   if (le[i])need.push_back(make_pair(le[i]-1,make_pair(i,1)));
   need.push_back(make_pair(ri[i],make_pair(i,2)));
  }
  sort(need.begin(),need.end());
  
  for (int i=1;i<=n;i++)
  {
   long mem=0;
   for (int j=0;j<need.size();j++)
   {
    if (j==0||need[j].first!=need[j-1].first)
    {
     lim=need[j].first;
     S=s[i];
     mem=solve(1,td);
    }
    if (need[j].second.second==2)
     ans[need[j].second.first]+=mem;
     else 
     ans[need[j].second.first]-=mem;
   }
   add(1,s[i],td);
  }
  for (int i=1;i<=qu;i++)
  printf("%lld\n",ans[i]);
}

cin.get();cin.get();
return 0;}

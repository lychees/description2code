#include <iostream>

using namespace std;

void takeover(int,int, int [], int []);
int find(int,int,int []);
int root(int , int []);
void no_of_empire(int [],int);

int main()
{
	int nodes, takeovers ,n1 , n2;
	cin>>nodes>>takeovers;
	int  size[nodes], Arr[nodes];
	
	//Initially every node is its own root
	//Initially size of each node is 1
	for(int i = 0; i < nodes; i++)
	{
		Arr[i] = i;
		size[i] = 1;
	}
	
	while(takeovers > 0)
	{
		cin>>n1>>n2;
		takeover(n1 - 1,n2 - 1,Arr,size);
		takeovers--;
	}
	//void no_of_empires(int Arr,int nodes);
	int empires = 0;
	for(int i = 0; i < nodes; i++)
	{
		if(Arr[i] == i)
			empires++;
	}
	
	cout<<empires;
	return 0;
}

int root(int i,int Arr[])
{
	while(Arr[i] != i)
	{
		i = Arr[Arr[Arr[i]]];
	}
	return i;
}

//Adds B to A: Attaches the component to which B is connected to the component to which A is connected: makes the root of B or A the parent of the root of A or //B according to the size of the components
void takeover (int A,int B,int Arr[],int size[])
{
	int root_A = root(A,Arr);
	int root_B = root(B,Arr);
	
	if(size[root_A] > size[root_B])
	{
		Arr[root_B] = root_A;
		size[root_A] += size[root_B];
	}
	
	else
	{
		Arr[root_A] = root_B;
		size[root_B] += size[root_A];
	}
}

//Returns 1(true) if A and B are connected: If the root of A == root of B
int find (int A, int B,int Arr[])
{
	int root_A = root(A,Arr);
	int root_B = root(B,Arr);
	if (root_A == root_B)
		return 1;
	return 0;
}

/*void no_of_empire(int Arr[], int size)
{
	int empires = 0;
	for(int i = 0; i < size; i++)
	{
		if(Arr[i] == i)
			empires++;
	}
	cout<<empires;
}
*/
	
	
	

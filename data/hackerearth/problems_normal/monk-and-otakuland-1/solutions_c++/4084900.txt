#include<bits/stdc++.h>
using namespace std;
#define ll long long int 
#define MAX 200005
int st[MAX*4];
char arr[MAX];
int lazy[MAX*4];
void build(int si, int ss, int se)
{
		if(ss > se) return;
		if(ss == se)
		{
				if(arr[ss] == '>') st[si] = 1;
				else st[si] = 0;
				return;
		}
		int mid = (ss+se)>>1;
		build(si<<1,ss,mid);
		build(si<<1|1,mid+1,se);
		st[si] = st[si<<1] + st[si<<1|1];
}
void update(int si, int ss, int se, int qs , int qe)
{
		if(lazy[si])
		{
				st[si] = (se-ss+1) - st[si];
				lazy[si] = 0;
				if(ss != se)
				{
						lazy[si<<1] = 1 - lazy[si<<1];
						lazy[si<<1|1] = 1 - lazy[si<<1|1];
				}
		}
		if(ss > se || qs > se || qe < ss) return;
		int mid = (ss+se)>>1;
		if(qs <= ss && se <= qe)
		{
				st[si] = (se-ss+1) - st[si];
				lazy[si] = 0;
				if(ss != se)
				{
						lazy[si<<1] = 1 - lazy[si<<1];
						lazy[si<<1|1] = 1 - lazy[si<<1|1];
				}
				return;
		}
		update(si<<1,ss,mid,qs,qe);
		update(si<<1|1,mid+1,se,qs,qe);
		st[si] = st[si<<1] + st[si<<1|1];
}
int query(int si, int ss, int se, int qs, int qe)
{
		if(lazy[si])
		{
				st[si] = (se-ss+1) - st[si];
				lazy[si] = 0;
				if(ss != se)
				{
						lazy[si<<1] = 1 - lazy[si<<1];
						lazy[si<<1|1] = 1 - lazy[si<<1|1];
				}
		}
		if(ss > se || qs > se || qe < ss|| qs > qe) return 0;
		if(qs <= ss && se <= qe) return st[si];
		
		int mid = (ss+se)>>1;
		int q1 = query(si<<1,ss,mid,qs,qe);
		int q2 =  query(si<<1|1,mid+1,se,qs,qe);
		
		st[si] = st[si<<1]+st[si<<1|1];
		
		return q1 + q2;
}
int main()
{
		int n,m;
		cin>>n>>m;
		int i;
		for(i=1;i<n;++i)
				cin>>arr[i];
		build(1,1,n-1);
		int a,l,r;
		for(i=0;i<m;++i)
		{
				cin>>a>>l>>r;
				int s,lg;
				s = min(l,r);
				lg = max(l,r);
				if(a == 2) 
				{
						if(s != l)
						{
								cout<<query(1,1,n-1,s,lg-1)<<endl;		
						}
						else
						{
								cout<<lg-s-query(1,1,n-1,s,lg-1)<<endl;
						}
				}
				else
				{
						update(1,1,n-1,s,lg-1);
				}
		}
}

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define N 1000022
vector <ll> primeset;
bool isPrime[N+2];
ll etfarray[100009],prime[100009];		
void constructseive()
{
	int i,j;
	for(i=0;i<=N;i++)
	isPrime[i]=true;
	for(i=2;i*i<=N;i++)
	{
		if(isPrime[i]==true)
		{
			for(j=i*i;j<=N;j+=i)
			{
				if(isPrime[j]==true)
				isPrime[j]=false;
			}
		}
	}
	for(i=2;i<=N;i++)
	{
		if(isPrime[i]==true)
		primeset.push_back(i);
	}
}
int main()
{
	ll t,l,r,k,i,j;
	scanf("%lld",&t);
	constructseive();
	while(t--)
	{
		scanf("%lld%lld%lld",&l,&r,&k);
		for(i=l;i<=r;i++)
		{
			prime[i-l]=i;
			etfarray[i-l]=i;
		}
		for(i=0;primeset[i]*primeset[i]<=r;i++)
		{
			for(j=(l+primeset[i]-1)/primeset[i]*primeset[i];j<=r;j+=primeset[i])
			{
				while(prime[j-l]%primeset[i]==0)
				prime[j-l]/=primeset[i];
				etfarray[j-l]-=etfarray[j-l]/primeset[i];
			}
		}
		ll count=0;
		for(i=l;i<=r;i++)
		{
			if(prime[i-l]!=1)
			{
				etfarray[i-l]-=etfarray[i-l]/prime[i-l];
			}
		}
		for(i=l;i<=r;i++)
		{
			if(etfarray[i-l]%k==0)
			count++;
		}
		double c=(count*1.0)/((r-l+1)*1.0);
		printf("%0.6f\n",c);
	}
	return 0;
}
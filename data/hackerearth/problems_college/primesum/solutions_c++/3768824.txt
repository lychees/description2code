#include<bits/stdc++.h>

#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define len(s) s.length()
#define forp(i,a,b) for( i=a;i<=b;i++)
#define rep(i,n)    for( i=0;i<n;i++)
#define ren(i,n)    for( i=n-1;i>=0;i--)
#define forn(i,a,b) for( i=a;i>=b;i--)
#define all(v) v.begin(),v.end()
#define b(v) v.begin()
#define e(v) v.end()
#define mem(n,m) memset(n,m,sizeof(n))
#define lb lower_bound
#define ub upper_bound
#define pii pair<int,int>
#define pll pair<long long,long long>
#define vii vector<int>
#define vll vector<long long>
#define gl(cin,s)  getline(cin,s);
#define bitc(n) __builtin_popcountll(n)
#define present(s,x) (s.find(x) != s.end()) 
#define cpresent(s,x) (find(all(s),x) != s.end()) 
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++) 

#define boost ios_base::sync_with_stdio(0)
#define MOD 1000000007
#define EPSILON 1e-9
#define PI 3.14159265358979323846
#define SIZE 1000001

typedef long long  ll;
typedef unsigned long long ull;
typedef long double  ldo;
typedef double  db ;
using namespace std;
bool sieve[SIZE]={0};
ll prime[SIZE];
ll pref[SIZE];
ll sum[SIZE];
ll k=0;
void sievep()
{
	ll i,p;
	sieve[0]=sieve[1]=1;
	prime[k]=2;
	k++;
	for(i=3;i<SIZE;i=i+2)
	{
		if(sieve[i]==0)
		{
			prime[k]=i;
			k++;
			p=i;
			while(i*p<=SIZE)
			{
				sieve[i*p]=1;
				p=p+2;
			}
		}
	}
	return ;
}
inline long long modsub(long long a,long long b)
{
	return (a%MOD + ((((long long)ceil(b/MOD))*MOD)-b)%MOD)%MOD;
}
inline long long mod_pow(long long x,long long y)
{
	long long res = 1;
	while(y)
	{
		if(y&1) 
		{
			res = (res*x)%MOD;
		}
		x = (x*x)%MOD;
		y >>= 1;
	}
	return res%MOD;
}

inline long long mod_div(long long a,long long b)
{
	long long ans = (a*mod_pow(b,MOD-2))%MOD; 
	return ans;
}
int main()
{  	
	sievep();
	ll i=0,t,l,r,ans;
	i=k;
	pref[0]=prime[0];
	for(int j=1;j<i;j++){
		pref[j]=(pref[j-1]+prime[j])%MOD;
	}
	sum[0]=prime[0]*prime[0];
	for(int j=1;j<i;j++){
		sum[j]=(sum[j-1]+(prime[j]*prime[j])%MOD)%MOD;
		//cout<<sum[j]<<" ";
	}
	//cout<<pref[i-1]<<" "<<sum[i-1]<<" ";
	scanf("%lld",&t);
	//cin>>t;
	while(t--){
		//cin>>l>>r;
		scanf("%lld %lld",&l,&r);
		ll temp1=lb(prime,prime+i,l)-prime;
		ll temp2=lb(prime,prime+i,r)-prime;
		if(temp2==i||prime[temp2]!=r)
		temp2--;
		//cout<<temp1<<" "<<temp2<<endl;
		ans=pref[temp2]-(temp1>0?pref[temp1-1]:0);
		ans=(ans*ans)%MOD;
		ll temp4=modsub(sum[temp2],(temp1>0?sum[temp1-1]:0));
		
		ans=ans-temp4;
		ans=ans%MOD;
		if(ans<0)
		ans+=MOD;
		ans=mod_div(ans,2);
		//cout<<ans%MOD<<endl;
		printf("%lld\n",ans);
	}
	return 0;
}
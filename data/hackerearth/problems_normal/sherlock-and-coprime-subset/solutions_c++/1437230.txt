#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
vector<int> prime;
int use[52];
int dp[51][1 << 15];
int main(){
	prime.push_back(2);
	for (int i = 3; i < 50; i += 2){
		if (!use[i]){
			prime.push_back(i);
			for (int j = i; j < 50; j += i){
				use[j] = true;
			}
		}
	}
	memset(use, 0, sizeof(use));
	for (int i = 0; i < prime.size(); i++){
		for (int j = prime[i]; j <= 50; j += prime[i]){
			use[j]|= 1<<i;
		}
	}
	int t;
	scanf("%d", &t);
	while (t--){
		vector<int> v;
		int n;
		scanf("%d", &n);
		v.resize(n);
		for (int i = 0; i < n; i++){
			scanf("%d", &v[i]);
		}
		sort(v.begin(), v.end());
	//	v.erase(unique(v.begin(), v.end()), v.end());
		memset(dp, -1, sizeof(dp));
		dp[0][0] = 0;
		dp[0][use[v[0]]] = 1;
		for (int i = 0; i < v.size()-1; i++){
			for (int j = 0; j < (1 << prime.size()); j++){
				if (dp[i][j] == -1){
					continue;
				}
				int go = use[v[i + 1]];
				if ((j&go) == 0){
					dp[i + 1][j | go] = max(dp[i][j] + 1, dp[i + 1][j | go]);
				}
				dp[i + 1][j] = max(dp[i + 1][j], dp[i][j]);
			}
		}
		int maxt = 0;
		for (int i = 0; i < (1 << prime.size()); i++){
			maxt = max(maxt, dp[v.size() - 1][i]);
		}
		printf("%d\n", maxt);
	}
	return 0;
}
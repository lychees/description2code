#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>

#define MAX(x,y) ((x)>(y)?(x):(y))
#define MIN(x,y) ((x)<(y)?(x):(y))
#define pb push_back
#define mp make_pair
#define rep(i,n) for(long long i=0;i<n;i++)
#define repr(i,j,n) for(long long i=j;i<=n;i++)
#define endl '\n'
using namespace std;
typedef long long ll;
typedef vector<ll> vll;
const ll maxn = (ll) 1e5+9;
const ll mod = (ll) 1e9+7;
int a[1003][1003];
ll dp[1003][1003];
int n,ans=0;
void dfs(int,int);
int main()
{
	std::ios::sync_with_stdio(0);
	ll i,j,k,t,q,m,l,r;
	cin>>n;
	for(i=0;i<n;i++)
		for(j=0;j<n;j++)
			cin>>a[i][j];

	for(i=0;i<n;i++) {
		for(j=0;j<n;j++) {
			if(!dp[i][j]) {
				dfs(i,j);
			}
		}
	}

	/*
	for(i=0;i<n;i++){
		for(j=0;j<n;j++) {
			cout<<dp[i][j]<<" ";
		}
		cout<<endl;
	}
	*/
	cout<<ans<<endl;
}

void dfs(int x,int y) {
	dp[x][y]++;
	if(x<n-1 && a[x][y]>a[x+1][y]) {
		if(dp[x+1][y])dp[x][y]+=dp[x+1][y];
		else
		{
			dfs(x+1,y);
			dp[x][y]+=dp[x+1][y];
		}
	}

	if(x>0 && a[x][y]>a[x-1][y]) {
		if(dp[x-1][y])dp[x][y]+=dp[x-1][y];
		else
		{
			dfs(x-1,y);
			dp[x][y]+=dp[x-1][y];
		}
	}

	if(y<n-1 && a[x][y]>a[x][y+1]) {
		if(dp[x][y+1])dp[x][y]+=dp[x][y+1];
		else
		{
			dfs(x,y+1);
			dp[x][y]+=dp[x][y+1];
		}
	}

	if(y>0 && a[x][y]>a[x][y-1]) {
		if(dp[x][y-1])dp[x][y]+=dp[x][y-1];
		else
		{
			dfs(x,y-1);
			dp[x][y]+=dp[x][y-1];
		}
	}
	dp[x][y] %=mod;
	ans+=dp[x][y];
	if(ans>=mod)ans%=mod;
}
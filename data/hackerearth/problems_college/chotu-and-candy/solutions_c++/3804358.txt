#include <bits/stdc++.h>

void merge(long long int arr[][3], long long int l, long long int m, long long int r)
{
    long long int i, j, k;
    long long int n1 = m - l + 1;
    long long int n2 =  r - m;
 
    int L[n1][3], R[n2][3];
 
    for(i = 0; i < n1; i++)
    {
        L[i][0] = arr[l + i][0];
        L[i][1] = arr[l + i][1];
        L[i][2] = arr[l + i][2];
    }
    for(j = 0; j < n2; j++)
    {
        R[j][0] = arr[m + 1 + j][0];
        R[j][1] = arr[m + 1 + j][1];
        R[j][2] = arr[m + 1 + j][2];
    }
   
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i][1] > R[j][1])
        {
            arr[k][0] = L[i][0];
            arr[k][1] = L[i][1];
            arr[k][2] = L[i][2];
            i++;
        }
        else if (L[i][1] == R[j][1])
        {
        	if(L[i][2] < R[j][2])
        	{
        		arr[k][0] = L[i][0];
            	arr[k][1] = L[i][1];
            	arr[k][2] = L[i][2];
            	i++;
        	}
        	else if(L[i][2] == R[i][2])
        	{
        		if(L[i][0] < R[j][0])
        		{
        			arr[k][0] = L[i][0];
    		     	arr[k][1] = L[i][1];
            		arr[k][2] = L[i][2];
            		i++;
        		}
        		else
        		{
        			arr[k][0] = R[j][0];
        	    	arr[k][1] = R[j][1];
            		arr[k][2] = R[j][2];
            		j++;
        		}
        	}
        	else
        	{
        		arr[k][0] = R[j][0];
            	arr[k][1] = R[j][1];
            	arr[k][2] = R[j][2];
            	j++;
        	}
        }
        else
        {
            arr[k][0] = R[j][0];
            arr[k][1] = R[j][1];
            arr[k][2] = R[j][2];
            j++;
        }
        k++;
    }
 
    while (i < n1)
    {
        arr[k][0] = L[i][0];
        arr[k][1] = L[i][1];
        arr[k][2] = L[i][2];
        i++;
        k++;
    }
    while (j < n2)
    {
        arr[k][0] = R[j][0];
        arr[k][1] = R[j][1];
        arr[k][2] = R[j][2];
        j++;
        k++;
    }
}
 
void mergeSort(long long int arr[][3],long long int l, long long int r)
{
    if (l < r)
    {
        long long int m = l+(r-l)/2; 
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}

int main()
{
    long long int q,n,i;
    int x;
    scanf("%lld%lld",&n,&q);
    long long int ar[n][3];
    int res[n];
    for(i=0;i<n;i++)
    	scanf("%lld%lld%lld",&ar[i][0],&ar[i][1],&ar[i][2]);
    mergeSort( ar, 0 , n-1 );
    memset(res, 0, sizeof(res));
    
    for(long long int i=0;i<n;i++)
   	{
   		cout << ar[i][0] << " ";
   		//assert(res[ar[i][0]] == 0);
   		res[ar[i][0]]=i+1;
   	}
    while(q--)
    {
    		scanf("%d",&x);
			printf("%d\n",res[x]);
    }
    return 0;
}
//Anuraag Singh IIITDM-J
#include<iostream>
#include<bits/stdc++.h>
#include<vector> 
using namespace std;
typedef long long lll;
vector<lll> vec;
lll length;
lll dp[31][101][2][2];

lll calculate1(lll pos,lll k,lll valid,lll tight)
{
	if(pos>length)
		{//cout<<":("<<pos<<" "<<length<<endl;
			if(k==0&&valid==1)
					return 1;
			else
					return 0;
		}
	if(dp[pos][k][valid][tight]!=-1)
	{	
			return dp[pos][k][valid][tight];
	}
	lll ans=0;
	if(tight==0)
	{
			for(lll digit=0;digit<=9;digit++)
			{
				if(k>=digit)
						ans=ans+calculate1(pos+1,k-digit,(valid|(digit!=0)),0);
	
			}
	}
	else
	{
			for(lll digit=0;digit<=vec[pos];digit++)
			{
				if(k>=digit)
						ans=ans+calculate1(pos+1,k-digit,(valid|(digit!=0)),(digit==vec[pos]));
			}
	}

	return dp[pos][k][valid][tight]=ans;
}

void refresh()
{
	for(lll i=0;i<=30;i++)
		for(lll j=0;j<=100;j++)
			for(lll k=0;k<=1;k++)
				for(lll u=0;u<=1;u++)
						dp[i][j][k][u]=-1;
}
int main()
{
	      ios_base::sync_with_stdio(0);
	lll l,r,k;
	cin>>l;
	cin>>r;
	cin>>k;
	lll temp=l-1;
	lll digit=0;
		while(temp)
		{
			vec.push_back(temp%10);
			temp=temp/10;
		}
		
	reverse(vec.begin(),vec.end());
	length=vec.size()-1;
//		cout<<length<<" "<<vec.size()<<endl;
	if(length==-1)
			vec.push_back(0);
	refresh();
	lll ans1=0;
	for(digit=0;digit<=vec[0];digit++)
	{				
					ans1=ans1-calculate1(1,k-digit,(digit!=0),digit==vec[0]);

	}
//	cout<<endl;
    temp=r;
	 digit=0;
	 vec.clear();
		while(temp)
		{
			vec.push_back(temp%10);
			temp=temp/10;
		}
	refresh();
	reverse(vec.begin(),vec.end());

	length=vec.size()-1;
//	cout<<length<<" "<<vec.size()<<endl;
	
	if(length==-1)
			vec.push_back(0);

	for(digit=0;digit<=vec[0];digit++)
	{
					lll o=calculate1(1,k-digit,(digit!=0),digit==vec[0]);
					ans1=ans1+o;
	}				
	cout<<ans1<<endl;
	return 0;
}

#include <bits/stdc++.h>
using namespace std;
#define MAX 100005

#define For for(int i=0;i<N;i++)
#define For1 for(int i=0;i<N-1;i++)

int parent[MAX];
int size[MAX];

bool compare(const pair<int,int>&i, const pair<int,int>&j)
{
    return i.first < j.first;
}
int find_parent(int p){
	while(p!=parent[p])
	p=parent[p];
	
	return p;
}

bool _union(int n1,int n2)
{
	int p1=find_parent(n1);
	int p2=find_parent(n2);
	if(p1==p2)
	return false;
	
	if(size[p1]<size[p2])
	{
		size[p2]+=size[p1];
		parent[p1]=p2;
	}
	else
	{
		size[p1]+=size[p2];
		parent[p2]=p1;
	}
	return true;
}

int main()
{
	int N;
	long long x,y;
	scanf("%d",&N);
	vector<pair<int,int> > vx;
	vector<pair<int,int> > vy;
	priority_queue<pair<long long int ,pair<int, int> > > Q;
	For
	{
		scanf("%d",&x);
		scanf("%d",&y);
		
		vx.push_back(pair<int,int>(x,i));
		vy.push_back(pair<int,int>(y,i));
		
		
	}
	sort(vx.begin(),vx.end(),compare);
	sort(vy.begin(),vy.end(),compare);
	
	pair<int ,int> a, b;
    
	For1
	{
		a=vx[i];
		b=vx[i+1];
		Q.push(make_pair(-abs(b.first-a.first), make_pair(a.second, b.second)));
	}
	
	For1
	{
		a=vy[i];
		b=vy[i+1];
		Q.push(make_pair(-abs(b.first-a.first), make_pair(a.second, b.second)));
	}
	
	For
	{
		parent[i]=i;
		size[i]=1;
	}
	
	long long ans=0;
	
	int node1,node2;
	while(!Q.empty())
	{
		pair<long long int ,pair <int ,int> > p=Q.top();
		Q.pop();
		node1=p.second.first;
		node2=p.second.second;
		if(_union(node1,node2))
		ans=ans-p.first;
		
	}
	
	cout<<ans<<endl;
	
   // cout << "Hello World!" << endl;
   system("pause");
   return 0;
}

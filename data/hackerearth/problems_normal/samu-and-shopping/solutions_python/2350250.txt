dp = [[-1 for i in xrange(3)] for j in xrange(10**5)]

# def f(i, item):
# 	global dp

# 	if dp[i][item] != -1:
# 		return dp[i][item]

# 	if item == 0:
# 		dp[i][0] = C[i][0] + min(f(i-1, 1), f(i-1, 2))

# 	if item == 1:
# 		dp[i][1] = C[i][1] + min(f(i-1, 0), f(i-1, 2))

# 	if item == 2:
# 		dp[i][2] = C[i][2] + min(f(i-1, 0), f(i-1, 1))

# 	else:
# 		dp[i][0] = C[i][0] + min(f(i-1, 1), f(i-1, 2))
# 		dp[i][1] = C[i][1] + min(f(i-1, 0), f(i-1, 2))
# 		dp[i][2] = C[i][2] + min(f(i-1, 0), f(i-1, 1))

# 	return min(dp[i])

def f():
	global dp

	for i in xrange(1, N):
		dp[i][0] = C[i][0] + min(dp[i-1][1], dp[i-1][2])
		dp[i][1] = C[i][1] + min(dp[i-1][0], dp[i-1][2])
		dp[i][2] = C[i][2] + min(dp[i-1][0], dp[i-1][1])


T = input()
for test_case in xrange(T):
	N = input()
	C = []
	for i in xrange(N):
		c1, c2, c3 = map(int, raw_input().split())
		C.append([c1, c2, c3])

	dp = [[-1 for i in xrange(3)] for j in xrange(N)]
	dp[0][0] = C[0][0]
	dp[0][1] = C[0][1]
	dp[0][2] = C[0][2]
	#f(N-1, -1)
	f()
	print min(dp[N-1])
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <iomanip>
#define max(a,b)  ((a)>(b)?(a):(b))
#define min(a,b)   ((a)<(b)?(a):(b))
#define ll long long
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define FOR(i,a,b) for(i=a;i<b;i++)
#define RFOR(i,a,b) for(i=a;i>=b;i--)
#define mset(x,v) memset(x,v,sizeof(x))
#define sz(x) (int)x.size()
using namespace std;
typedef long long i64;
const long long LINF = (long long)1e16 + 5;
const int INF =1e9;
const int MOD=1000000007;
const int maxlen=1e5;
typedef vector<ll> V;
typedef vector< pair <int,int> > VV;
typedef pair<int,int> P;
typedef map<int,int> M;
int a[maxlen+1],n;
void inititalize()
{
	for(int i=1;i<=n;i++)
	{
		a[i]=i;
	}
}
int root(int i)
{
	while(a[i]!=i)
	{
		a[i]=a[a[i]];
		i=a[i];
	}
	return i;
}
void unionfun(int i,int j)
{
	int root_i=root(i);
	int root_j=root(j);
	a[root_j]=root_i;
}
int main()
{
   int k,i,j,l;
   cin >> n;
   inititalize();
   cin >> k;
   for(l=0;l<k;l++)
   {
   	cin >> i >> j;
   	unionfun(i,j);
   }
   int cnt=0;
   bool visited[n+1];
   mset(visited,false);
   for(i=1;i<=n;i++)
   {
   	a[i]=root(i);
   	visited[a[i]]=true;
   	
   }
   
   for(i=1;i<=n;i++)
   {
   	if(visited[i])
   	 cnt++;
   }
   cout << cnt << endl;
}
// ADITYA VARSHNEY

#include <iostream>
#include <bitset>
#include <cmath>
#include <queue>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <map>
#include <climits>

#define pb push_back
#define mp make_pair
#define mod 1000000007

typedef long long int ll;

using namespace std;

#define getcx getchar//_unlocked
#define sqroot 1.4142135623730950488016887242097


long long int powr (long long int a, long long int b)
{
if (b == 0)
return 1;
long long int x = powr(a, b/2);
if (b % 2 == 0)
return (x*x)%mod;
else
return (((x*x)%mod)*a)%mod;
}


long long int scanll()
{
    long long int n=0;
    char ch = getcx();
    int sign=1;
    while( ch < '0' || ch > '9' ) {
        if(ch=='-')
            sign = -1;
        ch=getcx();
    }
    while( ch >= '0' && ch <= '9' )
        n = (n<<3)+(n<<1) + ch-'0',
    ch=getcx();
    return(n * sign);
}

int scani()
{
    int n=0;
    char ch = getcx();
    int sign=1;
    while( ch < '0' || ch > '9' ) {
        if(ch=='-')
            sign = -1;
        ch=getcx();
    }
    while( ch >= '0' && ch <= '9' )
        n = (n<<3)+(n<<1) + ch-'0',
    ch=getcx();
    return(n * sign);
}
/*
int pres[100011];
int vis[100011],t;
ll ans = 0;
vector <int> temp,child[100011];

void dfs(int node) {
    vis[node] = 1;
    int i;
    for(i = 0 ; i < temp.size(); i++) {
        if(abs(temp[i]-node) <= t) {
            ans++;
        }
    }
    temp.pb(node);
    for(i = 0 ; i < child[node].size(); i++) {
        if(vis[child[node][i]] == 0)
            dfs(child[node][i]);
    }
    temp.pop_back();
    vis[node] = 0;
}
*/
int main()
{
    int n,i;
    ll x,p,q;
    vector <int> v;
    map <int,int> m;
    n = scani();
    for(i = 0 ; i < n ; i++) {
        x = scanll();
        v.pb(x);
        m[x] = 1;
    }
    p = scanll();
    q = scanll();
    int loc = -1;
    int ans = INT_MIN, ans1 = INT_MAX, ans2 = INT_MAX;
    sort(v.begin(),v.end());
    for(i = 1; i < n ; i++) {
        x = (v[i]+v[i-1])/2;
        if(x >= p && x <= q && x != v[i] && x != v[i-1]) {
            if(min(abs(x-v[i]),abs(x-v[i-1])) > ans) {
                ans = min(abs(x-v[i]),abs(x-v[i-1]));
                loc = x;
            }
        }
    }
    int x1 = p, x2 = q;
    if(m[x1] == 1)
    while(m[x1] == 1 && x1 < q) {
        x1++;
    }
    if(m[x2] == 1)
    while(m[x2] == 1 && x2 > p) {
        x2--;
    }
    if(m[x1] != 1)
    for(i = 0; i < n ; i++) {
        ans1 = min(abs(v[i]-x1),ans1);
    }
    else ans1 = INT_MIN;
    if(m[x2] != 1)
    for(i = 0; i < n ; i++) {
        ans2 = min(abs(v[i]-x2),ans2);
    }
    else ans2 = INT_MIN;
    if(max(max(ans,ans1),ans2) == ans1) {
        cout<<x1<<endl;
    } else if(max(max(ans,ans1),ans2) == ans) {
        cout<<loc<<endl;
    } else if(max(max(ans,ans1),ans2) == ans2) {
        cout<<x2<<endl;
    }
    /*
    int n,i,x,y;
    n = scani();
    t = scani();
    vector < int > v[n+1];
    for(i = 0 ; i < n-1 ; i++) {
        x = scani();
        y = scani();
        v[y].pb(x);
        child[x].pb(y);
    }
    int root;
    for(i = 1 ; i <= n; i++) {
        if(v[i].size() == 0) {
            root = i;
            break;
        }
    }
    dfs(root);
    cout<<ans<<endl;*/
}

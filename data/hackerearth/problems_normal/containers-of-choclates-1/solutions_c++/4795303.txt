#include <bits/stdc++.h>
using namespace std;

void fs(int &a){
	bool isNeg = false;
	register int c = getchar();
	a = 0;
	if(c=='-'){
		isNeg = true;
		c = getchar();
	}
	while(c>47 && c<58){
		a = (a<<1)+(a<<3)+c-48;
		c = getchar();
	}
	if(isNeg){
		a*=-1;
	}
}

int main()
{
    int t,n;
    fs(t);
    for(int i=0;i<t;++i){
    	fs(n);
    	set<int> node[20001];
    	bool visited[20001] = {true};
    	int isThere[20001] = {0};
    	for(int j = 0;j<n;j++){
    		int a,b;
    		fs(a),fs(b);
    		node[a].insert(b);
    		node[b].insert(a);
    		isThere[a] = 1;
    		isThere[b] = 1;
    		visited[a] = false;
    		visited[b] = false;
    	}
    	int lv[2] = {0};
    	int a = 1;
    	int sum = 0;
    	for(int i=1;i<20001;i++){
    		if(isThere[i]==1 && visited[i]==false){
    			queue<pair<int,int>> buffer;
    			buffer.push(make_pair(i,0));
    			visited[i] = true;
    			lv[0]++;
    			while(!buffer.empty()){
    				int x = buffer.front().first;
    				int ch = buffer.front().second;
    				buffer.pop();
    				for(set<int>::iterator it = node[x].begin();it!=node[x].end();it++){
    					if(visited[*it]==false){
							buffer.push(make_pair(*it,((ch+1)%2)));
							visited[*it] = true;
							lv[(ch+1)%2]++;
    					}
    				}
    			}
    			sum+=lv[0]>lv[1]?lv[0]:lv[1];
    			lv[0]=0;
    			lv[1] = 0;
    		}
    	}
    	cout<<"Case "<<i+1<<": "<<sum<<endl;
    	
    }
   // cout<<t<<endl;
    return 0;
}

from collections import defaultdict
from itertools import count

def find_all_paths(graph, start, end, path=[]):
    path = path + [start]
    if start == end:
        return [path]
    if not graph.has_key(start):
        return []
    paths = []
    for node in graph[start]:
        if node not in path:
            newpaths = find_all_paths(graph, node, end, path)
            for newpath in newpaths:
                paths.append(newpath)
    return paths

def add(x, y):
	Graph[x].add(y)
	Graph[y].add(x)

def left(x, y, elem):
	if arr[x][y] == 'P' and arr[x][y-1] == 'P':
		add(elem, elem-1)

def right(x, y, elem):
	if arr[x][y] == 'P' and arr[x][y+1] == 'P':
		add(elem, elem+1)

def top(x, y, elem):
	if arr[x][y] =='P' and arr[x-1][y] == 'P':
		add(elem, elem - N)

def down(x, y, elem):
	if arr[x][y] == 'P' and arr[x+1][y] =='P':
		add(elem, elem+N)

def solve():
	start = None
	stop = None

	index = 0
	for i in xrange(N):

		xx = raw_input().strip().split()
		arr.append(xx)
		if 'S' in xx:
			start = index + (xx.index('S')) + 1
			xx[xx.index('S')] = 'P'
		if 'E' in xx:
			stop = index + (xx.index('E')) + 1
			xx[xx.index('E')] = 'P'
		index += N

	x = count(1)
	for i in xrange(N):
		for j in xrange(N):

			elem = x.next()

			if i == 0:

				if j == 0:
					right(i, j, elem)
					down(i, j, elem)

				elif j == N-1:
					left(i, j, elem)
					down(i, j, elem)

				else:
					left(i, j, elem)
					right(i, j, elem)
					down(i, j, elem)

			elif i == N-1:

				if j == 0:
					top(i, j, elem)
					right(i, j, elem)

				elif j == N-1:
					left(i, j, elem)
					top(i, j, elem)

				else:
					left(i, j, elem)
					right(i, j, elem)
					top(i, j, elem)

			else:

				if j == 0:
					right(i, j, elem)
					top(i, j, elem)
					down(i, j, elem)

				elif j == N-1:
					left(i, j, elem)
					top(i, j, elem)
					down(i, j, elem)

				else:
					left(i, j, elem)
					right(i, j, elem)
					top(i, j, elem)
					down(i, j, elem)

	paths = find_all_paths(Graph, start, stop)
	print len(min(paths, key = len)) - 1

N = input()
arr = []
Graph = defaultdict(set)
solve()
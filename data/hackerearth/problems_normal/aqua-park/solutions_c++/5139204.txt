#include <stdio.h>
#include <algorithm>
#include <vector>
#include <utility>
using namespace std;
typedef  pair<int ,int> point;
typedef pair < point , point > line ;
vector< line> a;
int ansx,ansy;
double intersectionf(line l,int x)
{
    int a1,b,c,d;
    a1=l.first.first;
    b=l.first.second;
    c=l.second.first;
    d=l.second.second;
    double inter= b+((d-b)/(double)(c-a1))*(x-a1);
   // printf("%d %d %d %d intersection with %d is: %lf\n",a1,b,c,d,x,inter);
    return inter;
}
int comp(line p1,line p2)
{
    int int1,int2;
    int1=intersectionf(p1,ansx);
    int2=intersectionf(p2,ansx);
    if(int1>int2)
        return 1;
    return 0;
}
int main()
{
    int n,x,i,a1,b,c,d;
    double intersection;
    pair<int ,int> p1,p2;
    line p;
    scanf("%d %d",&x,&n);
    ansx=x;
    for(i=0;i<n;i++)
    {
        scanf("%d %d %d %d",&a1,&b,&c,&d);
        p1=make_pair(a1,b);
        p2=make_pair(c,d);
        p=make_pair(p1,p2);
        a.push_back(p);
    }


    ansy=100000;// infinity
    for(i=0;i<n;i++)
    {
         sort(a.begin()+i,a.end(),comp);
        a1=a[i].first.first;
        b=a[i].first.second;
        c=a[i].second.first;
        d=a[i].second.second;
        intersection=b+((d-b)/(double)(c-a1))*(ansx-a1);
       if(ansx>=a1 &&ansx<=c &&ansy>=intersection)
       {
           ansy=min(b,d);
           if(ansy==d)
           {
               ansx=c;
           }
           else
           {
               ansx=a1;
           }
       }

    }
    printf("%d\n",ansx);
    return 0;
}

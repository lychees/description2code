#include<iostream>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<vector>
#include<list>
#include<map>
#include<algorithm>
#include<math.h>
#include<limits.h>
#include<stack>
#include<queue>
#define ll long long
using namespace std;
typedef struct node
{
    int x,y,g;
}node;
node extended(ll int m,ll int n)  //To find m inverse n
{
    //~ cout<<"here "<<endl;
    ll int quot,a[3],b[3],r[3];
    a[0]=1;
    a[1]=0;
    a[2]=n;
    b[0]=0;
    b[1]=1;
    b[2]=m;
    while(b[2]!=0)
    {
        //~ cout<<a[0]<<" "<<a[1]<<" "<<a[2]<<" "<<b[0]<<" "<<b[1]<<" "<<b[2]<<endl;
        quot=a[2]/b[2];
        r[0]=b[0];
        r[1]=b[1];
        r[2]=b[2];
        b[0]=a[0]-quot*b[0];
        b[1]=a[1]-quot*b[1];
        b[2]=a[2]-quot*b[2];
        a[0]=r[0];
        a[1]=r[1];
        a[2]=r[2];
    }
    node root;
    root.g=a[2];
    root.x=a[1];
    root.y=a[0];
    return root;
}
ll int find_gcd(ll int a,ll int b)
{
    while(1)
    {
        if(a==0)
        return b;
        else if(b==0)
        return a;
        else if(a>b)
        a=a%b;
        else
        b=b%a;
    }
}
int main()
{
    ll int a,b,c,q,x;
    scanf("%lld%lld%lld",&a,&b,&c);
    //~ x=find_gcd(a,b);
    //~ cout<<x<<endl;
    //~ if((c%x)!=0)
    //~ printf("-1\n");
    //~ else
    //~ {
        //~ cout<<"here"<<endl;
        //~ node result=extended(a,b,x);
        //~ q=(-c)/x;
        //~ printf("%lld %lld\n",q*result.x,q*result.y);
    //~ }
    node result=extended(a,b);
    x=result.g;
    if((c%x)!=0)
    {
        printf("-1\n");
    }
    else
    {
        //~ node result=extended(a,b);
        q=(-c)/x;
        printf("%lld %lld\n",q*result.x,q*result.y);
    }
    return 0;
}
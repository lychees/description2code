
#include <bits/stdc++.h>

#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)
#define EACH(it,a) for(__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)

#define DEBUG(x) { cout << #x << " = "; cout << (x) << endl; }
#define PR(a,n) { cout << #a << " = "; FOR(_,1,n) cout << a[_] << ' '; cout << endl; }
#define PR0(a,n) { cout << #a << " = "; REP(_,n) cout << a[_] << ' '; cout << endl; }

#define sqr(x) ((x) * (x))
using namespace std;

const int MN = 2011;
#define __ [MN][MN]

int m, n;
char a __;
int f1 __, f2 __, f3 __, f4 __;

void init() {
    FORD(i,m,1) FORD(j,n,1) {
        if (a[i][j] == '1') {
            f1[i][j] = f2[i][j] = 0;
        }
        else {
            f1[i][j] = f1[i][j+1] + 1;
            f2[i][j] = f2[i+1][j] + 1;
        }
    }
    FOR(i,1,m) FOR(j,1,n) {
        if (a[i][j] == '1') {
            f3[i][j] = f4[i][j] = 0;
        }
        else {
            f3[i][j] = f3[i][j-1] + 1;
            f4[i][j] = f4[i-1][j] + 1;
        }
    }
}

vector<int> queries[MN];
int bit[MN];

#define _(X) ((X) & (-(X)))
void update(int u, int val) {
    while (u < MN) {
        bit[u] += val;
        u += _(u);
    }
}

int get(int u) {
    int res = 0;
    while (u > 0) {
        res += bit[u];
        u -= _(u);
    }
    return res;
}

int main() {
    ios :: sync_with_stdio(false);
    scanf("%d%d\n", &m, &n);
    FOR(i,1,m) scanf("%s\n", &a[i][1]);
    init();
    long long res = 0;
    FOR(diff,1,m+n-1) {
        FOR(i,1,m) queries[i].clear();
        memset(bit, 0, sizeof bit);

        FOR(i,1,m) {
            int j = i - diff + n;
            if (j >= 1 && j <= n) {
                int maxl = min(f1[i][j], f2[i][j]);
                update(i, +1);
                queries[i + maxl].push_back(i);

                for(auto x : queries[i])
                    update(x, -1);

                int x = i - min(f3[i][j], f4[i][j]) + 1;
                res += get(MN-1) - get(x-1);
            }
        }
    }
    cout << res << endl;
    return 0;
}


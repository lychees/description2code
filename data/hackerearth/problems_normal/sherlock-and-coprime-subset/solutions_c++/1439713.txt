#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define dbg(x) cout << #x << " = " << x << endl
#define dbg2(x,y) cout << #x << " = " << x << ", " << #y << " = " << y << endl
#define dbg3(x,y,z) cout << #x << " = " << x << ", " << #y << " = " << y << ", " << #z << " = " << z << endl

#define out(x) cout << (x) << endl
#define out2(x,y) cout << (x) << " " << (y) << endl
#define out3(x,y,z) cout << (x) << " " << (y) << " " << (z) << endl

int p[15] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47};

int n, a[60];
int dp[51][(1 << 15) + 10];
int cnt[(1 << 15) + 10];

int main()
{
    memset(cnt, 0, sizeof(cnt));
    for(int i = 0; i < (1 << 15); i ++) {
        for(int j = 0; j < 15; j ++) {
            if( i & (1 << j) ) {
                cnt[i] ++;
            }
        }
    }
    int nt;
    scanf("%d", &nt);
    for(; nt > 0; nt --) {
        scanf("%d", &n);
        for(int i = 0; i < n; i ++) {
            scanf("%d", &a[i]);
            int x = 0;
            for(int j = 0; j < 15; j ++) {
                if( a[i] % p[j] == 0 ) {
                    x |= 0x1 << j;
                }
            }
            a[i] = x;
        }
        memset(dp, 0, sizeof(dp));
        dp[0][ a[0] ] = 1;
        for(int i = 1, j, k = (1 << 15); i < n; i ++) {
            for(j = 0; j < k; j ++) {
                if( a[i] & j )
                    ;
                else
                    dp[i][ a[i] | j ] = max(dp[i][ a[i] | j ], dp[i - 1][j] + 1);
            }
            for(j = 0; j < k; j ++)
                dp[i][j] = max(dp[i][j], dp[i - 1][j]);
            dp[i][ a[i] ] = max(1, dp[i][ a[i] ]);
        }
        int res = 0;
        for(int i = (1 << 15) - 1; i >= 0; i --)
            res = max(res, dp[n - 1][i]);
        printf("%d\n", res);
    }
    return 0;
}

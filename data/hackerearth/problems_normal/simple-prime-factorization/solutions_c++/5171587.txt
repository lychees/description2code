#include <bits/stdc++.h>

using namespace std;

const int MAXN = 1e6;
bool is_prime[MAXN + 1];
int rem[MAXN + 1];
map <int, int> fac[MAXN + 1];

void sieve() {
	fill(is_prime + 2, is_prime + MAXN + 1, true);
	for (int i = 0; i < MAXN + 1; i++) {
		rem[i] = i;
	}
	for (int i = 2; 2 * i <= MAXN; ++i) {
		if (is_prime[i] == true) {
			for (int j = 2 * i; j <= MAXN; j += i) {
				is_prime[j] = false;
				while (rem[j] != 0 && rem[j] % i == 0) {
					rem[j] /= i;
					fac[j][i]++;
				}
			}
		}
	}
	for (int j = 1; j <= MAXN; j += 2) {
		fac[j][2] = 0;
	}
}

int main() {
	sieve();
	int tt;
	scanf("%d", &tt);
	for (int tc = 1; tc <= tt; tc++) {
		int n;
		scanf("%d", &n);
		for (auto it = fac[n].begin(); it != fac[n].end(); ++it) {
			if (it != fac[n].begin()) {
				printf("*");
			} 
			printf("%d^%d", it->first, it->second);
		}
		printf("\n");
	}
	return 0;
}
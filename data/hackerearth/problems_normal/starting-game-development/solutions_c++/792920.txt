#include<iostream>
#include <algorithm>

using namespace std;

/*
2 3 3
10 20 30
7 14 100
11 7
35 13
100 1002

*/

int limit[100][5000];
int stren[5000][100];

int paramlevel[100];


int findlevel(int str, int end, int val,int param)
{
	if(str>end)return -2;
	if(str==end){
		if(val<limit[param][str]){
			if(str==0)return-1;
			else return str-1;
		}
		else if(val>=limit[param][str])return str;
	}
 
	if(str+1==end){
		if(val<limit[param][str]){
			if(str==0)return -1;
			else return str-1;
		}
		else if(val>=limit[param][str]&&val<limit[param][end]){
			return str;
		}
		else{
			return end;
		}
	}
	int mid=(str+end)/2;
	//if(a[mid]==val)return mid;
	if(val<limit[param][mid]){
		return findlevel(str,mid-1,val,param);
	}
	else{
		return findlevel(mid+1,end,val,param);
	}
}

void print(int n, int m, int q)
{
	// find level of user in parameter n
	for (int j = 0; j < q; j++)
	{
		for (int i = 0; i < n; i++)
		{	
				paramlevel[i] = findlevel(0,m-1, stren[j][i], i)+1;
		}

		int mini = 99999999;
		for(int i=0;i<n;i++)
        {
            if(mini>paramlevel[i])
                mini = paramlevel[i];
        }

		cout << mini << endl;
	}
}

int main()
{
	int n, m, q;
	cin >> n >> m >> q;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> limit[i][j];
		}
	}

	for (int i = 0; i < q; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cin >> stren[i][j];
		}
	}

	print(n,m,q);


	return 0;
}

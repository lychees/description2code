#include <bits/stdc++.h>
using namespace std;
 
typedef long long ll;
 
#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)
 
#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<ll>
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     (int)c.size()
#define clr(c)    c.clear()
#define pb        push_back
#define mp        make_pair
 
#define GI(x)     scanf("%d",&x)
 
#define FOR(i,a,b)      for(int i=(int)(a);i<(int)(b);i++)
#define RFOR(i,a,b)     for(int i=(int)(b)-1;i>=(int)(a);i--)
 
#define MOD       1000000007
#define EPS       1E-10
#define INF       1000000000
#define MAXN      1005
#define PI  acos(-1)
 
#define CASE(x)   cout << "Case #" << x << ": ";

ll f[MAXN], dp[MAXN];
ll power(ll a, ll n)
{
	if (n == 0)
		return 1;
	ll p;
	if (n % 2 == 0)
	{
		p = power(a, n >> 1);
		p = (p * p) % MOD;
	}
	else
		p = (a * power(a, n - 1)) % MOD;
	return p;
}
void precomp()
{
	f[1] = 1;
	f[2] = 2;
	f[3] = 4;
	f[4] = 8;
	for (int i = 5; i < MAXN; i++)
		f[i] = (((f[i - 1] + f[i - 2]) % MOD + f[i - 3]) % MOD + f[i - 4]) % MOD;
}
int main()
{
	ll t, n, m, val, sum;
	precomp();
    cin >> t;
	while (t--)
	{
		cin >> n >> m;
		dp[1] = 1;
		for (int i = 2; i <= m; i++)
		{
			val = power(f[i], n);
			sum = 0;
			for (int j = 1; j < i; j++)
				sum = (sum +  (power(f[i - j], n) * dp[j]) % MOD) % MOD;
			dp[i] = val - sum;
			if (dp[i] < 0)
				dp[i] += MOD;
				
		}
		cout << dp[m] << endl;
	}
	return 0;
}

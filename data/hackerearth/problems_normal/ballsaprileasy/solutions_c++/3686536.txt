#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// long long bSearch(vector<long long>balls,long long element)
// {
// 	long long start=0,end=balls.size()-1,mid;
// 	while(start<end)
// 	{
// 		mid=start+(end-start)/2;
// 		if(balls[mid]<element)
// 		{
// 			start=mid+1;
// 		}
// 		else if(balls[mid]>element)
// 		{
// 			end=mid;
// 		}
// 		else
// 			return mid;
// 	}
// 	return -1;

// }
long long maxm(long long arg1,long long arg2)
{
	return (arg1>=arg2)?arg1:arg2;
}
int main()
{
	vector<long long> balls;
	long n,i;
	long long element;
	cin >> n;
	for(i=0;i<n;i++)
	{
		cin >> element;
		balls.push_back(element);
	}
	sort(balls.begin(),balls.end());
	long long max_balls=balls[balls.size()-1];
	long long k=1;
	while((k*k)<max_balls)
	{
		k++;
	}
	long long no_iter=maxm(k,balls.size());
	//cout << k << endl;
	long long count=0,pos,cur_layer,index=0,balls_needed;
	for(i=0;;i++)
	{
		//cout << "i:" << i << endl;
		cur_layer=i+1;
		balls_needed=cur_layer*cur_layer;
		//cout << "cur_layer:" << cur_layer << endl;
		if(balls[index]==balls_needed)
		{
		//	cout << "balls full got for level at index:" << index << endl;
			index++;
		}
		else if(balls[index]<balls_needed)
		{
			count+=balls_needed-balls[index];
		//	cout << "balls needed to buy at index " << index << " "<<balls_needed-balls[index] << endl;
			index++;
		}
		else if(balls[index]>balls_needed)
		{
		//	cout << "balls overceed at index:" << index <<" balls needed:"<< balls_needed<< endl;
			count+=balls_needed;
		}
		if(index==balls.size())
			break;
	}
	cout << count << endl;
	return 0;
}

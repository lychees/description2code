#include <bits/stdc++.h>
using namespace std;

struct suffix
{
    long index;
    long rank[2];
};
long cmp(struct suffix a, struct suffix b)
{
    return (a.rank[0] == b.rank[0])? (a.rank[1] < b.rank[1] ?1: 0):
           (a.rank[0] < b.rank[0] ?1: 0);
}

vector<long> buildSuffixArray(string txt, long n)
{
    struct suffix suffixes[n];

    for (long i = 0; i < n; i++)
    {
        suffixes[i].index = i;
        suffixes[i].rank[0] = txt[i] - 'a';
        suffixes[i].rank[1] = ((i+1) < n)? (txt[i + 1] - 'a'): -1;
    }

    sort(suffixes, suffixes+n, cmp);
    long ind[n];
    for (long k = 4; k < 2*n; k = k*2)
    {
        long rank = 0;
        long prev_rank = suffixes[0].rank[0];
        suffixes[0].rank[0] = rank;
        ind[suffixes[0].index] = 0;
        for (long i = 1; i < n; i++)
        {
            if (suffixes[i].rank[0] == prev_rank &&
                    suffixes[i].rank[1] == suffixes[i-1].rank[1])
            {
                prev_rank = suffixes[i].rank[0];
                suffixes[i].rank[0] = rank;
            }
            else
            {
                prev_rank = suffixes[i].rank[0];
                suffixes[i].rank[0] = ++rank;
            }
            ind[suffixes[i].index] = i;
        }

        for (long i = 0; i < n; i++)
        {
            long nextindex = suffixes[i].index + k/2;
            suffixes[i].rank[1] = (nextindex < n)?
                                  suffixes[ind[nextindex]].rank[0]: -1;
        }
        sort(suffixes, suffixes+n, cmp);
    }
    vector<long> suffixArr;
    for (long i = 0; i < n; i++)
        suffixArr.push_back(suffixes[i].index);
    return  suffixArr;
}
vector<long> kasai(string txt, vector<long> suffixArr)
{
    long n = suffixArr.size();

    vector<long> lcp(n, 0);

    vector<long> invSuff(n, 0);
    for (long i=0; i < n; i++)
        invSuff[suffixArr[i]] = i;
    long k = 0;
    for (long i=0; i<n; i++)
    {
        if (invSuff[i] == n-1)
        {
            k = 0;
            continue;
        }
        long j = suffixArr[invSuff[i]+1];

        while (i+k<n && j+k<n && txt[i+k]==txt[j+k])
            k++;

        lcp[invSuff[i]] = k;
        if (k>0)
            k--;
    }
    return lcp;
}
long st[800011];
long constructST(vector<long> &arr,long ss,long se,long index);
long query(long ss,long se,long qs,long qe,long index);
int main()
{
    long long n,q;
    std::ios::sync_with_stdio(false);
    cin>>n>>q;
    string s;
    cin>>s;
    vector<long> suffixArr=buildSuffixArray(s, s.size());

    vector<long>lcp = kasai(s, suffixArr);
     vector<long> invSuff(n, 0);
        for(long i=0; i < n; i++)
           invSuff[suffixArr[i]] = i;
    constructST(lcp,0,n-1,0);
    while(q--)
    {
        long long x,y,l,r;
        cin>>x>>y;
        x--;
        y--;
        l=invSuff[x];
        r=invSuff[y];
        //cout<<l<<" "<<r<<"\n";
        if(l==r)
        {
            cout<<(n-x)<<"\n";
            continue;
        }
        if(l>r)
            swap(l,r);
        r--;
        cout<<query(0,n-1,l,r,0)<<"\n";
    }

    return 0;
}
long constructST(vector<long> &arr,long ss,long se,long index)
{
    if(ss==se)
    {
        st[index]=arr[ss];
        return st[index];
    }
    long mid=ss+(se-ss)/2;
    st[index]=min(constructST(arr,ss,mid,2*index+1),constructST(arr,mid+1,se,2*index+2));
    return st[index];
}
long query(long ss,long se,long qs,long qe,long index)
{
    if(qe<ss||qs>se)
       return LONG_MAX;
    if(ss>=qs&&se<=qe)
        return st[index];
    long mid=ss+(se-ss)/2;
    return min(query(ss,mid,qs,qe,2*index+1),query(mid+1,se,qs,qe,2*index+2));
}

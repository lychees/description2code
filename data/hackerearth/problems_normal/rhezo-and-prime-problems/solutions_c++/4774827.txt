#include <iostream>
#include <cmath>

#define LIMIT 5000

using namespace std;

bool sieve[LIMIT + 1];

void generateSieve() {
    sieve[0] = false;
    sieve[1] = false;

    for (int i = 2; i <= LIMIT; ++i) {
        sieve[i] = true;
    }

    for (int i = 2; i <= LIMIT; ++i) {
        if ( sieve[i] ) {
            for (int j = 2; i * j <= LIMIT; ++j) {
                sieve[i * j] = false;
            }
        }
    }
}


int main() {
    generateSieve();

    int n;
    cin>>n;

    if (n == 1) {
        cout<<0;
        return 0;
    }

    long *partialSums = new long[n+1];

    partialSums[0] = 0;
    for (int i = 1; i <= n; ++i) {
        cin>>partialSums[i];
        partialSums[i] += partialSums[i-1];
    }


    long *dp = new long[n+1];

    dp[0] = 0;
    dp[1] = 0;
    for (int i = 2; i <= n; ++i) {
        if (sieve[i]) {
            dp[i] = partialSums[i];
        } else {
            long max_value = 0;
            for (int j = i - 1; j >= 2; --j) {
                if (sieve[j]) {
                    max_value = max(max_value, partialSums[i] - partialSums[i - j] + dp[ i - j - 1]);
                }
            }
            dp[i] = max(dp[i-1], max_value);
        }
    }


    cout<<dp[n];

}


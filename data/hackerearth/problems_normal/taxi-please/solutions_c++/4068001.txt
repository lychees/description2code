#include <iostream>
using namespace std;
#include<vector>
#include<set>
#include<map>
struct User
{
	
	//unsigned long int requestTime;
	unsigned long int journeyTime;
	long int user;
};
int main()
{
    //cout << "Hello World!" << endl;
    long int U,T;
    cin>>U;
    cin>>T;
    unsigned long int requestTime;
    set<long int> Taxi;
    map<unsigned long int,struct User> userList;
    map<long int,long int> bookingDetails;
    multimap<unsigned long int,long int> endJourneyTime;
    multimap<unsigned long int,long int>::iterator it;
    for(long int i=0;i<T;i++)
    Taxi.insert(i+1);
    for(long int i=0;i<U;i++)
    {
    	User  u;//= new User;
    	cin>>requestTime;
    	cin>>u.journeyTime;
    	u.user=i+1;
    	userList[requestTime]=u;
    }
   
    for(map<unsigned long int,struct User>::iterator it2=userList.begin();it2!=userList.end();it2++ )
    {
    	it=endJourneyTime.begin();
    	for(;it!= endJourneyTime.end();it++)
    	{
    		if(it->first <=it2->first)
    		{
    			Taxi.insert(it->second);
    		}
    		else break;
    	}
    	
    	if(it!=endJourneyTime.begin())
    		endJourneyTime.erase(endJourneyTime.begin(),it);
    	if(Taxi.empty())
    	{
    		
    		bookingDetails[(it2->second).user]= -1;
    		
    	}
    	else
    	{
    		
    		bookingDetails[(it2->second).user]=*(Taxi.begin());
    		endJourneyTime.insert(pair<unsigned long int,long int>((it2->first+ (it2->second).journeyTime),*(Taxi.begin())));
    		Taxi.erase(Taxi.begin());
    	}
    }
    for(map<long int,long int>::iterator it3=bookingDetails.begin();it3!=bookingDetails.end();it3++)
    {
    	cout<<it3->second<<" ";
    }
    
    
    return 0;
}

#include<iostream>
#include<string>
#include<vector>
long long merge_sort(long long,long long);
long long merge(long long,long long,long long);
std::string getnum(std::string ,std::string);
std::vector<std::string>arr;
std::vector<std::string>brr;
using namespace std;
int main()
{
    long n;
    string num;
    cin >> n;
    for (long long i = 0 ; i < n ; i++)
    {
        cin >> num;
        arr.push_back(num);
        brr.push_back("0");
    }
    long long j = arr.size() - 1;
    merge_sort(0,j);
    for (long long i = 0 ; i < n ; i++)
        cout << arr.at(i);
	return 0;
}

long long merge_sort(long long start,long long end)
{
    long long mid = (start + end) / 2;
    if(start < end)
    {
        merge_sort(start,mid);
        merge_sort(mid+1,end);
    }
//    cout << start << " " << mid << " " << end << endl;
    merge(start,mid,end);
    return 0;
}
long long merge(long long start,long long mid,long long end)
{
    long long p = start , q = mid + 1;
    long long k = 0;
    for(long long i = start ; i <= end ; i++)
    {
        if(p > mid)
            brr.at(k++) = arr.at(q++);
        else if(q > end)
            brr.at(k++) = arr.at(p++);
        else if(arr.at(p)[0] == arr.at(q)[0])
        {
            string num = getnum(arr.at(p) , arr.at(q));
            if(num == arr.at(p))
                brr.at(k++) = arr.at(p++);
            else
                brr.at(k++) = arr.at(q++);
        }
        else if(arr.at(p)[0] < arr.at(q)[0])
            brr.at(k++) = arr.at(p++);
        else
            brr.at(k++) = arr.at(q++);
    }
    for(long long p = 0 ; p < k ; p++)
        arr.at(start++) = brr.at(p);
    return 0;
}
string getnum(string a ,string b)
{
    long long i , j , k = 0 , l = 0;
    i = a.length();
    j = b.length();
    while(a[k] == b[l])
    {
        k++;
        l++;
        if(k == i)
            k = 0;
        if(l == j)
            l = 0;
    }
    if(a[k] < b[l])
        return a;
    else
        return b;
}


#include <cstdio>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <climits>
#include <cctype>
#include <utility>
#include <queue>
#include <cmath>
#include <complex>
using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VPII;
typedef pair<LL, LL> PLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
typedef double DB;

#define pb push_back
#define mset(a, b) memset(a, b, sizeof a)
#define all(x) (x).begin(), (x).end()
#define bit(x) (1 << (x))
#define bitl(x) (1LL << (x))
#define sqr(x) ((x) * (x))
#define sz(x) ((int)(x.size()))
#define cnti(x) (__builtin_popcount(x))
#define cntl(x) (__builtin_popcountll(x))
#define clzi(x) (__builtin_clz(x))
#define clzl(x) (__builtin_clzll(x))
#define ctzi(x) (__builtin_ctz(x))
#define ctzl(x) (__builtin_ctzll(x))

#define X first
#define Y second

#define Error(x) cout << #x << " = " << x << endl

template <typename T, typename U> 
inline void chkmax(T& x, U y) {
	if (x < y) x = y;
}

template <typename T, typename U>
inline void chkmin(T& x, U y) {
	if (y < x) x = y;
}

const char ans[][122] = {
	"",
	"1",
	"10",
	"1000",
	"1000100",
	"10111100000",
	"11111001100110000",
	"11011001111110010010000000",
	"11110000010011011000011001011010000000",
	"100100000100001010001111101010110101010101000000000000",
	"110001110010100010110110111011101001110110000101010000111010000000000000",
	"1010110000100011110001101101110101110110010011100110000011110001010010011010110000000000000000",
	"11001100110010111100010001000001101101011111101111011010000011001001000100111111101011100111010011100000000000000000000"
};

int a[133];

int main() {

	int ncase;
	for (scanf("%d", &ncase); ncase--; ) {
		int n, m; scanf("%d%d", &n, &m);
		a[0] = 1;
		for (int i = 1; i < 120; i++) {
			a[i] = (a[i-1] + a[i-1]) % m;
		}
		int l = strlen(ans[n]), ret = 0;
		for (int i = 0; i < l; i++) {
			if (ans[n][l-i-1] == '1') {
				ret = (ret + a[i]) % m;
			}
		}
		printf("%d\n", ret);
	}
	return 0;
}


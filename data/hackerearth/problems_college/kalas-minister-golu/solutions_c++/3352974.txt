#include <stdio.h>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <iterator>
#include <utility>
using  namespace  std;

#define all(p) p.begin(), p.end()
#define mp make_pair
#define pb push_back
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define ren(i,a,b) for(int i=a;i>=b;i--)
#define mems(p, v) memset(p, v, sizeof (p))
#define ff first
#define ss second
#define ll long long
#define llu unsigned long long
#define ld long double
#define vll vector<long long int>
#define vi vector<int>
#define pii pair <int, int>
#define pll pair <long long int, long long int>
#define vpii vector<pair<int,int> >
#define psi pair<string,int>
#define pis pair<int,string>
#define nl cout<<"\n"
#define sp cout<<" "
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)

const  ll  INF = 0x7f7f7f7f;

bool visited[100005];
vi adj[100005];
ll w[100005], mn;
vll v;

void init()
{
    rep(i, 0, 100005)
    {
        visited[i] = false;
        adj[i].clear();
    }
}
void dfs(int v)
{
    visited[v] = true;
    mn = min(mn, w[v]);
    for(int i=0; i<adj[v].size(); i++)
        if(visited[adj[v][i]]==false)
            dfs(adj[v][i]);
}

int  main ()
{
	ios_base::sync_with_stdio(false);
    //freopen ("cppinp3.txt", "r", stdin);
    //freopen ("out_dfs_aakash3.txt", "w", stdout);
    ll t, n, m, x, y;
    cin>>t;
    while(t--)
    {
        v.clear();
        init();
        cin>>n>>m;
        rep(i, 1, n) cin>>w[i];
        rep(i, 1, m)
        {
            cin>>x>>y;
            adj[x].pb(y);
            adj[y].pb(x);
        }
        rep(i, 1, n)
        {
            if(visited[i]==false)
            {
                mn = INF;
                dfs(i);
                v.pb(mn);
            }
        }
        sort(all(v));
        int sz = v.size();
        ll ans = 0;
        rep(i, 1, sz-1)
            ans += (v[0]*v[i]);

        cout<<ans;nl;
    }
    return  0;
}

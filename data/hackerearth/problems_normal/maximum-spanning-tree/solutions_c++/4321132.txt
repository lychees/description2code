#include <iostream>
#include<algorithm>
#include<utility>
#include<vector>
using namespace std;
const int MAX=1e+5;
int id[MAX],edges,nodes;
pair<int,pair<int,int>>p[MAX];
 
void initialize()
{
	for(int i=0;i<MAX;i++)
	id[i]=i;
}
int root(int x)
{
	while(id[x]!=x)
	{
		id[x]=id[id[x]];
		x=id[x];
	}
	return x;
}
void union1(int x,int y)
{
	int p=root(x);
	int q=root(y);
	id[p]=id[q];
}
long long kruskal(pair<int,pair<int,int>>p[])
{
	long long maxcost=0;
	int x,y,z;
	for(int i=0;i<edges;i++)
		{
			x=p[i].second.first;
			y=p[i].second.second;
			z=p[i].first;
			if(root(x)!=root(y))
			{
				maxcost+=z;
				union1(x,y);
			}
		}
	return maxcost;
}
int main()
{
   int t,cost,x,y;
   long long maxcost;
   cin>>t;
   while(t--)
   	{
   		cin>>nodes>>edges;
   		initialize();
   			for(int i=0;i<edges;i++)
   				{
   					cin>>x>>y>>cost;
   					p[i]=make_pair(cost,make_pair(x,y));
   				}
   			sort(p,p+edges,std::greater<pair<int,pair<int,int>>>());
   			maxcost=kruskal(p);
   			cout<<maxcost<<endl;
   			
   	}
    return 0;
}
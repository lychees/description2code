#include <bits/stdc++.h>

#define LLI long long  int
#define LLU long long unsigned int
#define LI  long int
#define LU  long unsigned

#define MIN(a,b) ((b)^(((a)^(b))&-((a)<(b))))
#define BUG printf("BUGGEeee");
#define PRINT(n) printf("%d\n",n);
#define MOD 1000000007
#define POWER2(v) (v && !(v & (v - 1)))
#define PA pair<int,int>
#define PB pair<PA,int>
#define MP(a,b) make_pair(a,b)
#define PUS(x) push_back(x)


#define MAX_VAL 10000010
#define MAX_INT 999999999
#define MIN_INT -999999999
#define TO_STR(N) #N

using namespace std;






LLI MAX(LLI a,LLI b)
{
    if(a>b)return a;
    return b;
}


int  GCD(int a,int b)
{
   int x=MAX(a,b);
   int y=MIN(a,b);
    if(x%y==0)
    {
        return y;
    }
    else
    {
        return GCD(x%y,y);
    }

}


long long fast_pow(int a,int n)
{
    long long result = 1;
    long long power = n;
    long long value = a;
    while(power>0)
    {
        if(power&1)
            {result = result*value;
            result = result%MOD;}
        value = value*value;
        value = value%MOD;
        power /= 2;
        //power >>= 1;
    }
    return result;
}


int pow_k(LLI N,LLI K)
{
    int count=0;
    while(N>1)
    {
        N/=K;
        count++;
    }
    return count;
}


int count_bit(int N)
{
    int count=0;
    for(int i=0;i<32;i++)
    {
        if(N&(1<<i))
        {
            count++;
        }
    }
    return count;
}


//----------------------------------------------------------------
const int MAX_VALUE=10000002;
int arr[MAX_VALUE]={0},hsharr[MAX_VALUE]={0};
vector<int>vec;

void SOLVE()
{
    arr[0]=1;
    arr[1]=1;
    for(int i=2;i<=sqrt(MAX_VALUE);i++)
    {
        if(arr[i]>0)continue;
        
        for(int j=2*i;j<MAX_VALUE;j+=i)
        {
            arr[j]=i;
        }

    }
    int val=3;
    for(int i=5;i<MAX_VALUE;i++)
    {
        if(arr[i]==0 )
        {
            if(hsharr[i-val]==0)
                hsharr[i-val]++;
            
            val=i;
        }
    }

    for(int i=0;i<1000;i++)
    {
        //cout<<hsharr[i]<<endl;
        while(hsharr[i])
            {
                vec.push_back(i);
                vec.push_back(i);
                hsharr[i]--;
            }
    }
    
}


int main()
{
    SOLVE();
    sort(vec.begin(),vec.end());
    ios_base::sync_with_stdio(false);
    int T;
    scanf("%d",&T);
    while(T--)
    {
        int N;
         scanf("%d",&N);
        //cout<<N<<endl;
        int L=0;
        int R=vec.size()-1;
        
        int flag=0;
        while(L<R)
        {
            
            if(vec[L]+vec[R]==N)
            {
                flag=1;
                break;
            }
            else if((vec[L]+vec[R])<N)
            {
                L++;
            }
            else R--;
        }
        if(flag)printf("YES\n");
        else printf("NO\n");

    }
    
    
    return 0;
}



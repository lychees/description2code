#include <bits/stdc++.h>

using namespace std;

const int N = 1000005;
int n, m, p, x;
int dp[32][N];
char s[N];

int f(int i, int j) {
  if(dp[i][j] != -1) return dp[i][j];
  int& res = dp[i][j];
  if(i == 0) {
    if((n - 1) & 1) return res = (s[j] - '0') ^ x ^ (s[(j - 1LL*p + 10LL*m) % m] - '0');
    else return res = s[j] - '0';
  }
  if(!((n - 1) & (1 << i))) return res = f(i - 1, j);
  return res = x ^ f(i - 1, j) ^ f(i - 1, (j - ((1 << i) *1LL * p) % m + m) % m);
}

int main()
{
  int t;
  scanf("%d", &t);

  while(t--) {
    scanf("%d %d %d %d", &n, &m, &p, &x);
    scanf("%s", s);

    for(int i = 0; i < 32; ++i) {
      for(int j = 0; j < m; ++j) {
        if(i == 0) {
          if((n - 1) & 1) dp[i][j] = (s[j] - '0') ^ x ^ (s[(j - 1LL * p + 10LL * m) % m] - '0');
          else dp[i][j] = s[j] - '0';
          continue;
        }
        if(!((n - 1) & (1 << i))) {
          dp[i][j] = dp[i - 1][j];
          continue;
        }
        dp[i][j] = x ^ dp[i - 1][j] ^ dp[i - 1][(j - ((1 << i) * 1LL * p) % m + m) % m];
      }
    }
    for(int j = 0; j < m; ++j) {
      printf("%d", dp[31][j]);
    }
    printf("\n");
  }
  return(0);
}
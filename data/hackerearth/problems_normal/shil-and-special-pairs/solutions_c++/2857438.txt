#include <iostream>
#include <cstdio>
#include <vector>
#include <utility>
#include <string.h>
#include <algorithm>
using namespace std;
int BITree[100001];
bool cmp(pair<pair<int,int>,int> p1,pair<pair<int,int>,int>  p2){
	if(p1.first.second < p2.first.second)
	return true;
	else
	return false;
}
void constructBITree(int n){
	memset(BITree,0,n+1);
}
void updateBITree(int n,int index,int val){
	while(index<=n){
		BITree[index] += val;
		index += (index & (-index));
	}
}
int readBITree(int index){
	int ans=0;
	while(index > 0){
	//	cout<<" index "<<index<<" ";
		ans += BITree[index];
		index -= (index & (-index));
	}
	return ans;
}
int main(){
	int n,m,d,i,x,y,j,k;
	scanf("%d%d%d",&n,&m,&d);
	int a[n],position[100001],ans[m],last=0;
	vector<pair<pair<int,int>,int> > v;
	for(i=0;i<n;i++){
		scanf("%d",&a[i]);
		position[a[i]] = i;
	}
	for(i=0;i<m;i++){
		scanf("%d%d",&x,&y);
		v.push_back(make_pair(make_pair(x,y),i));
	}
	sort(v.begin(),v.end(),cmp);
//	constructBITree(n);
	
	for(i=0;i<n;i++){
		for(j=max(1,a[i]-d);j<=min(n,a[i]+d);j++){
			if(position[j] <= i){
				updateBITree(n,position[j]+1,1);
			}
		}
	//	cout<<"BITREE ";
	//	for(k=0;k<=n;k++)
	//	cout<<BITree[k]<<" ";
	///	cout<<"accha ";
		for(k=last;k<v.size();k++){
			if(v[k].first.second == i+1){
				ans[v[k].second] = readBITree(i+1)-readBITree((v[k].first.first)-1);
				last = k+1;
	//			cout<<readBITree(i+1)<<" "<<readBITree((v[k].first.first)-1)<<" ";
	//			cout<<"for l "<<v[k].first.first<<" and r "<<v[k].first.second<<" "<<ans[v[k].second]<<endl;
			}
			else{
				break;
			}
		}
			
		
		
	}
	for(i=0;i<m;i++){
		printf("%d\n",ans[i]);
	}
	return 0;
}
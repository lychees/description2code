#include<iostream>
using namespace std;
#define MAX 100
void mergeSort(int arr[][2],int low,int mid,int high);
void partition(int arr[][2],int low,int high);
int main()
{
int N;
int t ,i, j=0;
char S[12];
int n1, n2,n3,n4;
cin >> N;
int A[N][2];
int temp = N;
int flag = 0;
while(temp--)
{
for(i=0; i< 11 ; i++)
cin >> S[i];
n1 = S[0] - 48;
n2 = S[1] - 48;
n3 = S[3] - 48;
n4 = S[4] - 48;
A[j][0] = 1000 * n1 + 100 * n2 + 10 * n3 + n4;
n1 = S[6] - 48;
n2 = S[7] - 48;
n3 = S[9] - 48;
n4 = S[10] - 48;
A[j][1] = 1000 * n1 + 100 * n2 + 10 * n3 + n4;
j++;
}

partition(A,0,N-1);

for(i=1; i < N; i++)
{
if(A[i][0] < A[i-1][1])
{
flag = 1;
break;
}
}

if(flag == 0)
cout << "Who needs a moderator?" << endl;
else
cout << "Will need a moderator!" << endl;



return 0; 

}
void partition(int arr[][2],int low,int high){

    int mid;

    if(low<high){
         mid=(low+high)/2;
         partition(arr,low,mid);
         partition(arr,mid+1,high);
         mergeSort(arr,low,mid,high);
    }
}

void mergeSort(int arr[][2],int low,int mid,int high){

    int i,m,k,l,temp[MAX][2];

    l=low;
    i=low;
    m=mid+1;

    while((l<=mid)&&(m<=high)){

         if(arr[l][0]<=arr[m][0]){
             temp[i][0]=arr[l][0];
			 temp[i][1]=arr[l][1];
             l++;
         }
         else{
             temp[i][0]=arr[m][0];
			 temp[i][1]=arr[m][1];             
			 m++;
         }
         i++;
    }

    if(l>mid){
         for(k=m;k<=high;k++){
             temp[i][0]=arr[k][0];
			 temp[i][1]=arr[k][1];
             i++;
         }
    }
    else{
         for(k=l;k<=mid;k++){
             temp[i][0]=arr[k][0];
			 temp[i][1]=arr[k][1];
             i++;
         }
    }
   
    for(k=low;k<=high;k++){
         arr[k][0]=temp[k][0];
		 arr[k][1]=temp[k][1];
    }
}

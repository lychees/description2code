#include<bits/stdc++.h>

using namespace std;
typedef long long int ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef vector<ii> vii;

#define all(x) (x).begin(),(x).end()
#define pb push_back
#define mp make_pair
#define tr(c,it) for(typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define rd(x) scanf("%lld",&x)
#define wr(x) printf("%lld\n",x)
#define rep(i,a,b) for(i=a;i<b;i++)
#define pi 3.141592653589793238462643383279

int vis[100005],dist[100005];
vector<int> G[100005];
int n;

void bfs(int i)
{
    int j;
    queue<int> q;
    q.push(i);
    dist[i]=0;
    while(!q.empty())
    {
        int curr=q.front();
        vis[curr]=1;
        q.pop();
        for(j=0;j<G[curr].size();j++)
        {
            if(vis[G[curr][j]]==0)
            {
                dist[G[curr][j]]=dist[curr]+1;
                q.push(G[curr][j]);
            }
        }
    }
/*
    int maxm=0;
    for(j=1;j<=n;j++)
        maxm=max(maxm,dist[j]);

    return maxm; */
}

int main()
{
    int e,u,v,i,x;
    rd(n);
          // create graph using array of vector<int>
    for(i=1;i<=n-1;i++)
    {
        scanf("%d%d",&u,&v);
        G[u].pb(v);
        G[v].pb(u);
    }

    //int ans=0;

    for(i=1;i<=n;i++)
    {
        if(G[i].size()==1)                  //perform bfs on any one leaf node
        {
            memset(vis,0,sizeof vis);
            memset(dist,0,sizeof dist);
            bfs(i);
            //printf("%d\n",d);
            //printf("%d\n",ans);
            break;
        }
    }

    int maxm_dist=0;
    for(i=1;i<=n;i++)
    {
        if(dist[i]>maxm_dist)
        {
            maxm_dist=dist[i];
            x=i;
        }
    }

    memset(vis,0,sizeof vis);
    memset(dist,0,sizeof dist);
    bfs(x);                                // perform bfs on the node that is farthest from the node in first dfs

    maxm_dist=0;
    for(i=1;i<=n;i++)
    {
        if(dist[i]>maxm_dist)
        {
            maxm_dist=dist[i];
            //int x=i;
        }
    }





    printf("%d\n",maxm_dist);

    return 0;
}

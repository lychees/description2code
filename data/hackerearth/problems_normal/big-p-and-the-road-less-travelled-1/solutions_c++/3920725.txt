#include <bits/stdc++.h>
using namespace std;
bool visited[10010];
int dist[10010];
class Graph
{
 int v;
 vector< list < pair <int, int>>> adj; 
 public:
 Graph(int v);
 void add_edge(int x, int y);
 int dfs(int s, int n);
};
Graph :: Graph(int v)
{
	this->v=v;
   adj.resize(v+1);
}
void Graph :: add_edge(int x, int y)
{
	adj[x].push_back(make_pair(y,0));
//	adj[y].push_back(make_pair(x,0));
}
int Graph :: dfs(int s, int n)
{
//	if(s==n)
//	return 1;
	if(visited[s])
	return dist[s];
	visited[s]=true;
	int ans=0;
	list< pair <int, int> > :: iterator i;
	for(i=adj[s].begin();i!=adj[s].end();i++)
	{
	ans+=dfs((*i).first,n);
	}
	dist[s]=ans;
	return ans;
}
int main()
{
    int n,x,y,i;
    cin>>n;
    Graph g(n);
    while(true)
    {
    	cin>>x;
    	cin>>y;
    	if(x==0 && y==0)
    	break;
    	g.add_edge(x,y);
    }
    for(i=0;i<=n;i++)
    {
    visited[i]=false;
    dist[i]=0;
    }
    visited[n]=true;
    dist[n]=1;
    int ans=g.dfs(1,n);
    cout<<ans<<endl;
    return 0;
}

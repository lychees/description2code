#include<bits/stdc++.h>
using namespace std ;
int n , q ;
string s ;

struct fenwick {
    int freq[26] ;
}bit[1000002];

void update ( int ind , int val , char ch ) {
    while ( ind <= n ) {
        bit[ind].freq[ch-'a'] += val ;
        ind += ( ind&(-ind) ) ;
    }
}

int query ( int ind , int i ) {
    int sum = 0 ;
    while ( ind > 0 ) {
        sum += bit[ind].freq[i] ;
        ind -= ( ind&(-ind) ) ;
    }
    return sum ;
}

int get ( int l , int r , int k ) {
    int cnt = 0 ;
    for ( int i = 0 ; i < 26 ; i++ ) {
    	int x = query ( r , i ) - query ( l-1 , i ) ;
        if ( x > 0 )
            cnt += x ;
        if ( cnt >= k )
            return i ;
    }
    return -1 ;
}
int main () {
    scanf ( "%d %d" , &n , &q ) ;
    cin >> s ;
    for ( int i = 0 ; i < n ; i++ ) {
        update ( i+1 , 1 , s[i] ) ;
    }
    while ( q-- ) {
        int type ;
        scanf ( "%d" , &type ) ;
        if ( type == 0 ) {
            int ind ; char ch ;
            scanf ( "%d %c" , &ind , &ch ) ;
            if ( s[ind-1] != ch ) {
                update ( ind , -1 , s[ind-1] ) ;
                s[ind-1] = ch ;
                update ( ind , 1 , s[ind-1] ) ;
            }
        }
        if ( type == 1 ) {
            int l , r , k ;
            scanf ( "%d %d %d" , &l , &r , &k ) ;
            if ( get ( l , r , k ) == -1 ) {
            	printf ( "Out of range\n") ;
            }
            else 
            	printf ( "%c\n" , (char)('a'+get( l , r , k )) );
        }
    }
    return 0 ;
}

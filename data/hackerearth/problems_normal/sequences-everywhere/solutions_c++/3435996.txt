/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>

using namespace std;

class Clash3 {
public:
	void solve(std::istream& in, std::ostream& out) {
		int64_t a, b;
		in >> a >> b;
		if (a == 1) {
			out << solve(b);
		} else {
			out << solve(b) - solve(a - 1);
		}
	}

	int64_t solve(int64_t mx) {
		vector<int64_t> z = {
			6,
			4LL * 3 * 5 * 7,
			8LL * 9 * 5 * 7 * 11 * 13,
			16LL * 27 * 25 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31,
		};
		cerr << z.back() << endl;
		if(mx <= 2) {
			return mx;
		}
		int64_t even = mx / 2;
		int64_t odd = mx - even;
		int64_t defaultAnswer = (even - 1) * 3 + (odd - 1) * 2 + 2;
		for (int64_t a: z) {
			int64_t cnt = mx / a;
			defaultAnswer += (cnt + 1) / 2;
		}
		return defaultAnswer;
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	Clash3 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}

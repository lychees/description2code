//Utkarsh Saxena
#include<iostream>
#include<limits.h>
#include<map>
#include<vector>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<cstdio>
#include<queue>
using namespace std;//miller rabin primality 7 set for 64 bit int {2, 325, 9375, 28178, 450775, 9780504, 1795265022}
#define abs(x) ((x)>0?(x):-(x))
#define M 1000000009
#define lld signed long long int
#define pp pop_back()
#define ps(x) push_back(x)
#define tkint(n) scanf("%d",&n)
#define tkchar(ch) scanf("%c",&ch)
#define tklong(n) scanf("%llu",&n)
#define  ms0(s) memset(s,0,sizeof s)
struct mat
{
	lld a,b,c,d;
	mat(){}
	mat(lld aa,lld bb,lld cc,lld dd)
	{
		a=aa;
		b=bb;
		c=cc;
		d=dd;
	}
};
mat multiply(mat A,mat B)
{
	mat C;
	C.a=(A.a*B.a+A.b*B.c)%M;
	C.b=(A.a*B.b+A.b*B.d)%M;
	C.c=(A.c*B.a+A.d*B.c)%M;
	C.d=(A.c*B.b+A.d*B.d)%M;
	return C;
}
mat modular_pow(mat base, lld exponent)
{
    mat result(1,0,0,1);
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = multiply(result,base);
        exponent = exponent >> 1;
        base = multiply(base,base);
    }
    return result;
}
int main()
{
	int t;
	cin>>t;
	lld n;
	mat A(1,1,1,0);
	while(t--)
	{
		cin>>n;
		mat m=modular_pow(A,n-1);
		cout<<((m.a+m.b)*(m.c+m.d))%M<<endl;
	}
}

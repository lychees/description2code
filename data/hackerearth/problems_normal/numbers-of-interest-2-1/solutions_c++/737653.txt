#include<iostream>
#include<cstring>
#include<random>
#include<map>
using namespace std;

#define MAX 1000005
int isprime[MAX/32+2];

#define isSet(n) isprime[n>>5]&(1<<(n&31))
#define unset(n) isprime[n>>5] &= ~(1<<(n&31));

long long int arr[MAX];
long long int f[MAX];
long long int ans[MAX];

void sieve()
{
    for(long long int i=2;i<=MAX;i++){
    	if(arr[i]==0){
    		arr[i]=arr[i-1]+i;
    		long long int j=2;
			while(j*i<=MAX){
				long long int pos=j*i;
				if(arr[pos]==0)
					arr[pos]=i;
        		j++;
			}
    	}
    	else{
    		arr[i]=arr[i]+arr[i-1];
    	}
    }
}

int smallestPrimeFactor(int n){
	if(n<=1)
	return 0;
	int iterations=sqrt(n);
	int smallestFactor=-1;
	for(int i=2;i<=iterations;i++){
		if(isSet(i) && n%i==0){
			smallestFactor=i;
			break;
		}
	}
	if(smallestFactor==-1){
		smallestFactor=n;
	}
	return smallestFactor;
}

int leastPrimeFactor[1000010];
long long int sumOfDivisors[1000010];
long long divisorSum(int n){
	if(n<=1)
	return 0;
	int temp=n;
	long long int sum=0;
	int iterations=sqrt(n);
	for(int i=1;i<=iterations;i++){
		
		if(n%i==0){
			sum=sum+i;
			sum=sum+(n/i);
		}
		if(i*i==temp){
			sum=sum-i;
		}	
		if(i==1){
			sum=sum-temp;
		}
	}
	return sum;
}
int main(){
	sieve();
	/*
	for(int i=0;i<=1000000;i++){
		leastPrimeFactor[i]=smallestPrimeFactor(i);
		sumOfDivisors[i]=divisorSum(i);
	}
	
	for(int i=0;i<=5;i++){
		cout<<sumOfDivisors[i]<<"\n";
	}
	*/
	

    for(long long int i=1;i<=(MAX/2);i++)
    {
        for(long long j=i+i;j<MAX;j+=i)
        {
            f[j]+=i;
        }
    }
    for(long long i=2;i<MAX;i++)
        ans[i]=ans[i-1]+f[i];
        
	int t;
	cin>>t;
	while(t--){
		long long int n;
		cin>>n;	
		long long int sol=0;
		sol=(ans[n]+arr[n])%n;
		cout<<sol<<"\n";	
	}
}
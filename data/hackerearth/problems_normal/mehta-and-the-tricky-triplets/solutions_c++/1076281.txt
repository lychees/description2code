#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
#define MAX_N 100001
#define MAX 4
long long int dp[MAX_N][4][1 << MAX];
int n;
int a[MAX_N];
int p[11];
long long int dfs(int i, int countt, int j){
	if (j == 0){
		return 0;
	}
	if (i == n){
		if (countt == 3 && j){
			return 1;
		}
		return 0;
	}
	if (dp[i][countt][j] != -1){
		return dp[i][countt][j];
	}
	dp[i][countt][j] = 0;
	dp[i][countt][j] += dfs(i + 1, countt, j);
	if (countt < 3){
		dp[i][countt][j] += dfs(i + 1, countt + 1, j&a[i]);
	}
	return dp[i][countt][j];
}
int main(){
	memset(p, -1, sizeof(p));
	p[2]=0;
	p[3] = 1;
	p[5] = 2;
	p[7] = 3;
	scanf("%d", &n);
	memset(dp, -1, sizeof(dp));
	for (int i = 0; i < n; i++){
		string s;
		cin >> s;
		for (int j = 0; j < s.size(); j++){
			if (p[s[j] - '0'] != -1){
				a[i] |= (1 << p[(s[j] - '0')]);
			}
		}
	}
	long long int ans = dfs(0, 0, (1 << 4) - 1);
	printf("%lld\n", ans);
	return 0;
}
#include <bits/stdc++.h>
//#define PB push_back 
#define INF INT_MAX
using namespace std;
#define ll long long 
ll int m[200][200];
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		ll n,k;
		cin>>n>>k;
		vector< ll  > dp[200][200];
		for(int i=0;i<n;i++)
			for(int j=0;j<k;j++){
				char s[10];
				cin>>s;
				if(s[0]=='#')
				m[i][j]=INF;
				else
				m[i][j]=atoi(s);
			}
		if(m[0][0]!=INF)dp[0][0].push_back(m[0][0]);
		
		for(int i=1;i<n;i++)
		if(m[i][0]!=INF  && dp[i-1][0].size()>0)
		dp[i][0].push_back(dp[i-1][0][0]+m[i][0]);
		
		for(int i=1;i<k;i++)
		if(m[0][i]!=INF && dp[0][i-1].size()>0)
		dp[0][i].push_back(dp[0][i-1][0]+m[0][i]);
 
		for(int i=1;i<n;i++){
			for(int j=1;j<k;j++)
				if(m[i][j]!=INF){
					int s1=dp[i-1][j].size(),s2=dp[i][j-1].size();
					int i1=0,i2=0,cnt=0;
					while(cnt!=101 && (i1<s1 ||i2<s2)){
						if(i1==s1)
							dp[i][j].push_back(m[i][j]+dp[i][j-1][i2++]);
						else if(i2==s2)
							dp[i][j].push_back(m[i][j]+dp[i-1][j][i1++]);
						else{
							if(dp[i-1][j][i1]>dp[i][j-1][i2])
							dp[i][j].push_back(m[i][j]+dp[i][j-1][i2++]);
							else
							dp[i][j].push_back(m[i][j]+dp[i-1][j][i1++]);
						}
						cnt++;
					}
 
				}
			}
		int q;
		cin>>q;
		while(q--){
			int x,y,k;
			cin>>x>>y>>k;
			if(m[x][y]>=INF)
			cout<<"Obstacle\n";
			else if(k>dp[x][y].size() || k>101)
			cout<<"Not so many paths\n";
			else
			cout<<dp[x][y][k-1]<<endl;
		}
		
	}
	
    return 0;
}
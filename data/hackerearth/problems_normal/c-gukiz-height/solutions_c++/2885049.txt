#include<iostream>
#include<stdio.h>
using namespace std ;

#define inf 1000000007
#define MAXN 100007

int n ;
int h ;
int a[ MAXN ] ;
long long pref[ MAXN ] ;

int f ( int u ) {
	long long loss = u ;
	loss *= n ;
	long long id = loss + 1 ;
	loss = ( loss * ( loss + 1 ) ) / 2 ;
	long long cur = pref[ n ] ;
	//if ( cur > 2 * inf ) { cur = 2 * inf ; }
	//if ( cur < -2 * inf ) { cur = -2 * inf ; }
	cur = cur * u ;
	if ( cur + loss >= h ) { return 1 ; }
	int i ;
	for ( i = 1 ; i <= n ; i ++ ) {
		cur += a[ i ] ;
		loss += id ;
		id ++ ;
		//printf ( "%d %d --> %lld %lld\n" , u , i , cur , loss ) ;
		if ( cur + loss >= h ) { return i ; }
	}
	return -1 ; 
}

void input ( ) {
	scanf ( "%d%d" , &n , &h ) ;
	int i ;
	for ( i = 1 ; i <= n ; i ++ ) {
		scanf ( "%d" , &a[ i ] ) ;
	}
}

void solve ( ) {
	int i ;
	for ( i = 1 ; i <= n ; i ++ ) {
		pref[ i ] = pref[ i - 1 ] + a[ i ] ;
	}
	if ( f ( 0 ) != -1 ) {
		printf ( "%d\n" , f ( 0 ) ) ;
		return ;
	}
	long long l , r , mid ;
	l = 1 ;
	r = ( 2 * inf ) / n ;
	while ( r - l > 3 ) {
		int mid = ( l + r ) / 2 ;
		if ( f ( mid ) == -1 ) { l = mid ; }
		else { r = mid ; }
	}
	while ( f ( l ) == -1 && l <= r ) { l ++ ; }
	int ret = f ( l ) + l * n ;
	printf ( "%d\n" , ret ) ;
}

int main ( ) {
	input ( ) ;
	solve ( ) ;
	return 0 ; 
}

#include <iostream>
#include <vector>
#include <cstdio>
#include <sstream>
#include <map>
#include <string>
#include <algorithm>
#include <queue>
#include <cmath>
#include <set>
#include <cassert>
using namespace std;

template<class T>
ostream& operator << (ostream& os, vector<T> vec){
	for(int i=0; i<vec.size(); i++){
		os << vec[i] << (i==(vec.size()-1)?"":" ");
	}
	return os;
}

vector<int> solver(int n, int m, vector<int>& l, vector<int>& r){

	vector<int> v(n);
	iota(v.begin(), v.end(), 1);
	//cerr << v << endl;

	auto goal = v;

	vector<int> ans;

	for(int x=0; x<n; x++){
		for(int y=x; y<n; y++){
			vector<int> tmp;
			for(int i=0; i<n; i++){
				if(x<=i && i<=y) continue;
				tmp.push_back(i+1);
			}
			for(int at=0; at<=tmp.size(); at++){
				auto hoge = tmp;
				hoge.insert(hoge.begin()+at, v.begin()+x, v.begin()+y+1);

				auto s = hoge;
				for(int i=0; i<m; i++){
					sort(s.begin()+l[i], s.begin()+r[i]);
				}

				if(s != goal){
					if(ans.size()==0) ans = hoge;
					else ans = min(ans, hoge);
				}
			}
		}
	}
	/*
	for(int a=0; a<n; a++){
		vector<int> tmp;
		for(int i=0; i<n; i++){
			if(i==a) continue;
			tmp.push_back(i+1);
		}

		for(int at=0; at<n; at++){
			if(at==a) continue;
			vector<int> hoge = tmp;
			hoge.insert(hoge.begin()+at, a+1);

			auto s = hoge;
			for(int i=0; i<m; i++){
				sort(s.begin()+l[i], s.begin()+r[i]);
			}

			if(s != goal){
				if(ans.size()==0) ans = hoge;
				else ans = min(ans, hoge);
			}
		}
	}
	*/


	if(ans.size()==0) cout << "All ok!" << endl;
	else cout << ans << endl;

	return ans;
}

vector<int> solver_(int n, int m, vector<int>& l, vector<int>& r){

	vector<int> v(n);
	iota(v.begin(), v.end(), 1);
	//cerr << v << endl;

	auto goal = v;
	
	do{
		auto s = v;
		for(int i=0; i<m; i++){
			sort(s.begin()+l[i], s.begin()+r[i]);
		}

		if(s == goal) continue;
		cout << v << endl;
		return v;

	}while(next_permutation(v.begin(), v.end()));

	return {};
}

#include <ctime>

int main(){
	
	int n,m;
	cin >> n >> m;
	vector<int> l(m), r(m);
	bool all = false;
	for(int i=0; i<m; i++){
		cin >> l[i] >> r[i];
		l[i]--;
		if(r[i] - l[i] == n) all = true;
	}
	//assert(n!=1);

	auto p = solver(n,m,l,r);
//	auto q = solver_(n,m,l,r);

	
/*

	mt19937 mt((unsigned)time(NULL));
	uniform_int_distribution<int> dstr(2,9);
	while(1){
		int n = dstr(mt);
		int m = dstr(mt);
		vector<int> l(m),r(m);
		uniform_int_distribution<int> dstr_(1, n);
		for(int i=0; i<m; i++){
			l[i] = dstr_(mt);
			r[i] = dstr_(mt);
			if(l[i] > r[i]) swap(l[i], r[i]);
			l[i]--;
		}


		auto p = solver(n,m,l,r);
		auto q = solver_(n,m,l,r);

		if(p != q){
			cout << n << " " << m << endl;
			for(int i=0; i<m; i++){
				cout << l[i]+1 << " " << r[i] << endl;
			}
			return 0;
		}
	}

*/

	return 0;
}
/* NumeriX
   "Hard Work Beats Talent
   When Talent Doesn't Work Hard"
*/
#include <bits/stdc++.h>
#define ll long long int
#define sii(x) scanf("%d",&x)
#define pii(x) printf("%d\n",x)
#define sll(x) scanf("%lld",&x)
#define pll(x) printf("%lld\n",x)
#define present_set_map(container, element) (container.find(element) != container.end()) 
#define present_vec(container, element) (find(all(container),element) != container.end()) 
#define mp make_pair
#define all(x) x.begin(),x.end()
#define all_rev(x) x.rbegin(),x.rend()
#define pb push_back
#define fr first
#define se second
using namespace std;

long int  modPow(long long int a,long long  int b,long long  int MOD)
{
    long long int x=1,y=a; 
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y)%MOD;
            //if(x>MOD) x%=MOD;
        }
        b/=2;
        y = (y*y)%MOD;
        //if(y>MOD) y%=MOD; 
    }
    return x;
}
 
ll modInverse(ll a,ll p)
{
	return modPow(a,p-2,p);
}

int main()
{
    ll tc,i,sum,n,r,p,prod,mod=1e9+7;
    sll(tc);
    while(tc--)
    {
        sum=0;
        prod=0;
        ll num;
        scanf("%lld %lld",&r,&n);
        for(i=0;i<r;i++)
        {
            sll(num);
            sum+=num;
        }
        n=n+r-1-sum;
        r=r-1;
        //printf("%lldC%lld\n",n,r);
        if(n>0 && r<=n)
        {
            prod=1;
            for(i=0;i<r && n-i>0;i++)
            {
                prod=((prod%mod*(n-i)%mod)*modInverse(i+1,mod))%mod;
                //printf("%lld/%lld *",n-i,i+1);
            }
        }
        pll(prod);
    }
}
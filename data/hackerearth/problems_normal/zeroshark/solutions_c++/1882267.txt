#include<iostream>
#include<cstdio>
#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<list>
#include<algorithm>
#include<stdlib.h>
#include<cmath>
#include<climits>
#include<string.h>
#define si(a) scanf("%d",&a)
#define sl(a) scanf("%lld",&a)
#define ss(a) scanf("%s",a)
#define sc(a) scanf("%c",&a)
#define pi(a) printf("%d",a)
#define pl(a) printf("%lld",a)
#define ps(a) printf("%s",a)
#define pc(a) printf("%c",a)
#define pn() printf("\n")
#define p() printf(" ")
#define fl(i,a) for(i=0;i<a;i++)
#define fl1(i,a) for(i=1;i<=a;i++)
#define ll long long
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vi>
#define mp map<long long,long long>
#define pr pair<long long,long long>
#define M 1000000007
using namespace std;

/*#define gc getchar_unlocked
void scan(ll &x)   // works fine with +ve and -ve as well
{
    register ll c = gc();
    x = 0;
    ll neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

void print(ll X)  // not tested for -ve numbers
{
if(X<0) { putchar_unlocked('-'); X=-X; }
ll Len=0,Data[10];
while(X) { Data[Len++]=X%10; X/=10; }
if(!Len) Data[Len++]=0;
while(Len--) putchar_unlocked(Data[Len]+48);
putchar_unlocked('\n');
}*/

ll pow(ll a,ll b,ll mod)
{
	ll ret;
	if(b==0)
		return 1;
	if(b==1)
		return a%mod;
	ret=pow(a,b/2,mod);
	ret=(ret*ret)%mod;
	if(b&1)
		ret=(ret*a)%mod;
	return ret;
}

ll gcd(ll a,ll b){return (!a)?b:(!b)?a:gcd(b,a%b);}
ll mat[100005][2][3];
void func()
{
	mat[1][0][0]=1;
	mat[1][0][1]=0;
	mat[1][0][2]=0;
	mat[1][1][0]=1;
	mat[1][1][1]=0;
	mat[1][1][2]=0;
	for(ll i=2;i<=100000;i++)
	{
		mat[i][0][0]=mat[i-1][1][0];
		mat[i][0][1]=mat[i-1][0][0]+mat[i-1][1][1];
		mat[i][0][2]=mat[i-1][0][2]+mat[i-1][1][2]+mat[i-1][0][1];
		mat[i][1][0]=mat[i-1][1][0]+mat[i-1][0][0];
		mat[i][1][1]=mat[i-1][1][1]+mat[i-1][0][1];
		mat[i][1][2]=mat[i-1][1][2]+mat[i-1][0][2];
		mat[i][0][0]%=M;
		mat[i][0][1]%=M;
		mat[i][0][2]%=M;
		mat[i][1][0]%=M;
		mat[i][1][1]%=M;
		mat[i][1][2]%=M;
	}
}

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	ll t,n;
	sl(t);
	func();
	while(t--)
	{
		sl(n);
		pl((mat[n][1][1]+mat[n][0][1])%M);
		pn();
	}
	return 0;
}

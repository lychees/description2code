#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <valarray>
#include <vector>

using namespace std;

#define FOREACH(i, c)                                                          \
  for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) {
  if (b < a)
    a = b;
}
template <class P, class Q> void smax(P &a, Q b) {
  if (b > a)
    a = b;
}
template <class P, class Q> bool in(const P &a, const Q &b) {
  return a.find(b) != a.end();
}

void ans(bool x) {
  cout << (x ? "Yes" : "No") << endl;
  exit(0);
}

int main() {
  string s;
  cin >> s;
  if (count(all(s), 'Q')) {
    for (int i = s.find('Q') / 2, qc = 0, len = 0; i < Size(s); i++) {
      len++;
      if (s[i] == 'Q')
        qc++;
      if (len - qc + 1LL * qc * len == Size(s)) {
        string sc = s.substr(s.find('Q') / 2, len), g;
        FOREACH(it, sc) g += *it == 'H' ? string("H") : sc;
        ans(s == g);
      }
    }
    ans(false);
  } else
    ans(true);
  return 0;
}

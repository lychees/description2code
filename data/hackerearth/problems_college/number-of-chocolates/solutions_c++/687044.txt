#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<climits>
#include<cfloat>
#include<ctime>
#include<cassert>
#include<map>
#include<utility>
#include<set>
#include<iostream>
#include<memory>
#include<string>
#include<vector>
#include<algorithm>
#include<functional>
#include<sstream>
#include<complex>
#include<stack>
#include<queue>
#include<numeric>
#include<list>
#include<iomanip>
#include<fstream>

#define MX 1000
#define inf 1E20
#define pb push_back
#define vsort(v) sort(v.begin(),v.end())
#define loop(i,n) for(i=0;i<n;i++)
#define loop1(i,n) for(i=1;i<=n;i++)
#define rloop(i,n) for(i=n-1;i>=0;i--)
#define rloop1(i,n) for(i=n;i>=1;i--)
#define vloop(i,k,n) for(i=k;i<=n;i++)
#define rvloop(i,k,n) for(i=n;i>=k;i--)
#define si(n) scanf("%d",&n);
#define sl(n) scanf("%lld",&n);
#define sd(n) scanf("%lf",&n);
#define wi(n) while(scanf("%d",&n))
#define wd(n) while(scanf("%lf",&n))
#define wib(n) while(scanf("%d",&n) && n)
#define wdb(n) while(scanf("%lf",&n) && n)
#define ws(n) while(getline(cin,n))
#define s(k) k.size()
#define LL long long

using namespace std;

LL sum[1000009];


int main()
{
    long long num,i,j,ll,ul,q;
    int kase,test;


    scanf("%lld %lld",&num,&q);
    sum[0] = 0;
    for(i=1; i<=num; i++)
    {
        scanf("%lld",&j);
        sum[i] = sum[i - 1] + j;
    }
    long long res=0;
    for(i=1; i<=q; i++)
    {
        LL s1, s2, e1, e2;
        scanf("%lld %lld", &s1, &s2);
        scanf("%lld %lld", &e1, &e2);
        s1 ++;
        s2 ++;
        e1++;
        e2++;
        if(s1 > e1)
            swap(s1, e1);
        if(s2 > e2)
            swap(s2, e2);

        LL first = sum[e1] - sum[s1 - 1];
        LL second = sum[e2] - sum[s2 - 1];
        //cout<<first<<" "<<second<<endl;
        res = first + second;
        if(s1 <= s2 && s2 <= e1 && e1 <= e2)
        {
            res = res - (sum[e1] - sum[s2 -1]);
        }
        else if(s1 <= s2 && s2 <= e1 && e2 <= e1)
        {
            res -= second;
        }
        else if(s2 <= s1 && s1 <= e2 && e2 <= e1)
        {
            res -= (sum[e2] - sum[s1 - 1]);
        }
        else if(s2 <= s1 && s1 <= e2 && e1 <= e2)
            res = res - first;
        printf("%lld\n", res);
    }
    return 0;
}

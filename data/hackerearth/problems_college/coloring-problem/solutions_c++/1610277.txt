#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;
vector<int> g[201];
int n;
bool vis[201];
int color[201];
bool ok = true;
void dfs(int u){
	queue<int> q;
	q.push(u);
	while (!q.empty()){
		int v= q.front();
		q.pop();
		for(int v2: g[v]){
			if (!vis[v2]) {
				color[v2] = color[v]^1;
				vis[v2] = 1;
				q.push(v2);
			}
			else if (color[v2]==color[v]){
				ok = false;
				return;
			}
		}
	}
}
int main()
{
    int t;
    cin>>t;
    while(t--){
    	cin>>n;
    	int m;
        cin>>m;
        int x,y;
        for(int i=0;i<n;i++) g[i].clear();
        memset(vis,0,sizeof(vis));
        memset(color,-1,sizeof(color));
    	for(int i=0;i<m;i++){
    		cin>>x>>y;
    		g[x].push_back(y);
    		g[y].push_back(x);
    	}
    	ok = true;
    	for(int i=0;i<n;i++){
    		if (!vis[i]){
    			vis[i] = 1;
    			color[i] = 0;
    			dfs(i);
    			if (!ok) break;
    		}
    	}
    	if (ok) puts("BICOLORABLE.");
    	else puts("NOT BICOLORABLE.");
    }
    return 0;
}

#include<cmath>
#include<list>
#include<iostream>
#include<cstdlib>
#include<vector>
#include<stack>
#include<map>
#include<set>
#include<cstring>
#include<algorithm>

using namespace std;
#define N 1000000007
#define M 100003
#define MOD 1000000007
#define INF (int)1e9
#define LINF (long long)1e18
#define pb push_back
#define popb pop_back()
#define pln() printf("\n")
#define s(t) scanf("%d",&t)
#define sd(t) scanf("%lf",&t)
#define sld(t) scanf("%Lf",&t)
#define sl(t) scanf("%lld",&t)
#define ss(t) scanf("%s",t)
#define p(t) printf("%d",t)
#define pl(t) printf("%lld",t)
#define ps(t) printf("%s",t)
#define rep(i,a,b) for(i=a;i<=b;++i)
#define repd(i,a,b) for(i=a;i>=b;--i)
#define x first
#define y second
#define FILL(a,b) memset(a,b,sizeof(a))

typedef vector<int> VI;
typedef pair<int,int> PII;
typedef long long LL;
typedef unsigned long long ULL;
typedef vector<LL> VL;
typedef pair<LL,LL> PLL;
typedef vector<PII> VPII;

/*Start where you are. Use what you have. Do what you can..*/
/*
template<class type>
type fastread()
{
char ch;type num=0;
while((ch=getchar_unlocked())<'0');
while(ch>='0')
{
num=(num)*10+ch-'0';
ch=getchar_unlocked();              
}             
return num;            
             
}
*/
int gcd(int a,int b){if(b==0)return a;return gcd(b,a%b);}
LL arr[5][M];
map<string,int>Hash;
map<string,int>::iterator it;
LL pft[120][M];
int n;
void init()
{
string str="ABCDE";
int count=0;
do
{
Hash[str]=count++;       
       
}while(next_permutation(str.begin(),str.end()));     
     
}

void update(int tno,int i,LL del)
{
while(i<=n)
{
pft[tno][i]+=del;
i+=(i&-i);           
           
}     
}


LL read(int tn,int i)
{
LL ans=0;
while(i>0)
{
ans+=pft[tn][i];
i-=(i&-i);          
          
}    
    
return ans;    
}


int main()
{   
#ifndef ONLINE_JUDGE
freopen("input.txt","r",stdin);
freopen("re.txt","w",stdout);
#endif
int ind,i,j,nq,tnum;LL a,b,ans=0;
char qu[3],ch1[2],ch2[2];
string str,ref="ABCDE",cur_ref;
s(n);
init();

rep(i,0,4)
rep(j,1,n)
sl(arr[i][j]);
cin>>str;


for(map<string,int>::iterator it=Hash.begin();it!=Hash.end();++it)
{
tnum=it->second;
cur_ref=it->first;
rep(i,1,n)
update(tnum,i,arr[cur_ref[str[i-1]-'A']-'A'][i]);          
}
s(nq);

while(nq--)
{
ss(qu);           
switch(qu[1])
{
case 'e':
   ss(ch1);ss(ch2);
   swap(ref[ch1[0]-'A'],ref[ch2[0]-'A']);
   break;               
             
case 's':
     sl(a);sl(b);
     ans=read(Hash[ref],b)-read(Hash[ref],a-1);
     pl(ans);pln();
     break;
     
case 'c':
      s(ind);ss(ch1);
      for(map<string,int>::iterator it=Hash.begin();it!=Hash.end();++it)
     {
     tnum=it->second;
     cur_ref=it->first;
     update(tnum,ind,arr[cur_ref[ch1[0]-'A']-'A'][ind]-arr[cur_ref[str[ind-1]-'A']-'A'][ind]);          
     }
      str[ind-1]=ch1[0];
                        
             
}           
           
           
           
}          
          



//cin.get();
return 0;    
}

//Hope is a good thing and maybe the best thing of all...
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <list>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
#include <cmath>
using namespace std;

//DEBUG
#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}

//CONSTANTS
const int MAX = 100005;
const int MOD = 1000000007;
const int INF = 1000000000;


int main() {
    int n, k, l, q;
    cin >> n >> k >> l >> q;
    map<vector<int>, string> h;
    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        vector<int> v(k);
        for (int j = 0; j < k; j++) {
            cin >> v[j];
        }
        h[v] = s;
    }

    while (q--) {
        vector<int> v(k);
        for (int j = 0; j < k; j++) {
            cin >> v[j];
        }
        if (h.count(v)) {
            cout << h[v] << endl;
        } else {
            cout << "You cant fool me :P" << endl;
        }
    }
}

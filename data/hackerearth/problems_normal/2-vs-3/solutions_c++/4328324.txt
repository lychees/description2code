#include<iostream>
#include<algorithm>
#include<string.h>
#define MOD 3

using namespace std;

string s;

long long n,fen[100005],two[100005];


void update(long long pos,long long val){

    for(;pos<=n;pos+= pos&-pos){
        fen[pos] = (fen[pos] + val) % MOD;
    }

}

long long getsum(long long pos) {

    long long sum = 0;
    for(;pos>0;pos-= pos & -pos) {
        sum = (sum + fen[pos]) % MOD;
    }
    return sum;

}


long long power(long long a,long long b) {

    if(b == 0) return 1;
    if(b == 1) return a;
    long long temp = power(a,b / 2);
    if(b % 2 != 0) {
        return ((((a % MOD) * (temp % MOD)) % MOD) * (temp % MOD)) % MOD;
    }
    else {
        return ((temp % MOD) * (temp % MOD)) % MOD;
    }




}

int main(){

    long long i,x,val=1,q,l,r,sum=0,temp;
    cin >> n >> s;
    reverse(s.begin(),s.end());
    for(i=0;i<n;i++) {
        two[i] = val;
        val = (val * 2) % MOD;
    }
    for(i=0;i<n;i++) {
        x = s[i] - '0';
        update(i + 1,(two[i] * x)% MOD);
    }
  /*  for(i=1;i<=n;i++) {
        cout << getsum(i) << "\n";
    } */
    cin >> q;
    while(q--) {
        cin >> x;
        if(x == 1) {
            cin >> l;
            if(s[n - l - 1] == '0') {
                update(n - l,two[n - l - 1]);
                s[n - l - 1] = '1';
            }
        }
        else {
            cin >> l >> r;
            temp = l;
            l = n - r - 1; r = n - temp;
            sum = (getsum(r) - getsum(l) + MOD) % MOD;
            cout << (sum * power(two[l],MOD - 2)) % MOD << "\n";
        }
    }
    return 0;








}

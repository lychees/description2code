
#include<bits/stdc++.h>
using namespace std;
//long long arrr[1000005];
// inhortcuts for "common" data types in contests
typedef long long li;
typedef vector<long long> vi;
typedef pair<long long, long long> ii;
typedef vector<ii> vii;
typedef set<long long> si;
typedef map<string, long long> msi;
#define rep(i, a, b) for(li i=a; i<b; i++)
#define ALL(c) c.begin(), c.end()
#define rloop(i, a, b) for(long long i=b-1; i>=a; i--)
#define loopinc(i, a, b, inc) for(long long i=a; i<b; i+=inc)
/*Use like- 
rep(i,0,n - 1)
*/

template<class T> T pwr(T b, T p){T r=1,x=b;while(p){if(p&1)r*=x;x*=x;p=(p>>1);}return r;}
 
#define     inf             (0x7f7f7f7f)
#define     inf1             -(0x7f7f7f7f)
const long long MAXN = 2e2+5;
#define MOD 1000000007
long long inp[MAXN];
long long mark[MAXN][MAXN][MAXN];
long long rev[MAXN][MAXN][MAXN];
li modPow(li a, li x, li p) {
    //calculates a^x mod p in logarithmic time.
    li ansrt = 1;
    while(x > 0) {
        if( x % 2 != 0) {
            ansrt = (ansrt * a) % p;
        }
        a = (a * a) % p;
        x /= 2;
    }

    return ansrt;
}
class CompareDist
{
public:
    bool operator()(pair<long long,long long> n1,pair<long long,long long> n2) {
        return n1.second>n2.second;
    }
};
class CompareDist1
{
public:
    bool operator()(pair<long long,long long> n1,pair<long long,long long> n2) {
        return n1.second<n2.second;
    }
};

long long jj;
long long solve(long long loc, long long idx, long long val,long long n,long long m)
{
    if(loc<n)
    {
        if ( mark[loc][idx][val] == jj ) 
        {
            return rev[loc][idx][val];
        }
        mark[loc][idx][val] = jj;
        long long ansrt = solve(loc + 1, idx, val,n,m);
        if ( val + 1 <= m ) 
            {
                long long flg=solve(loc + 1, loc, val + 1,n,m);
                long long flg1;
                if(inp[idx]>=inp[loc])
                {
                        flg1=inp[idx]-inp[loc];
                }
                else
                {
                        flg1=inp[loc]-inp[idx];
                }

                ansrt = max(ansrt,flg+flg1);
            }
        rev[loc][idx][val]=ansrt;
        return ansrt;
    }
    else
    {
        if ( val != m )
            return inf1;
        else{
        return 0;
        }
    }
}

int main()
{
    long long t;
    long long ansrt;
    long long tc;
    cin >> t;    
    for(jj=1;jj<=t;jj++)
    {
        long long n,m;
        long long ansrt=0;
        cin >> n >> m;
        rep(i,0,n) {
            cin >> inp[i];
        }
        rep(i,0,n)
        {
        long long ret=solve(i + 1, i, 1,n,m);
        ansrt = max(ansrt, ret);
        }   
        cout << ansrt << endl;
    }
    return 0;
}
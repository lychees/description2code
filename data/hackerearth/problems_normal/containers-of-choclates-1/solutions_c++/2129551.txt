/*In Ninja World, World War is going on..

The Raikage Army and Zetsu Army are fighting each other. The war has become so fierce that, no one knows who will win. The ninjas of Leaf Village want to know who will survive finally. But leaf village ninjas are afraid of going to the battlefield. 

So, they made a plan. They collected the information from the newspapers of Cloud Village(where the Raikage Army is from) and Kabutos territory(where the Zetsu Army is from). They found the information about all the dual fights. Dual fight means a fight between a member of Raikage Army and a member of Zetsu Army. 

Every solider of Raikage Army as well as of Zetsu Army have been allotted a unique id. The ninjas of Leaf Village knows the id of the dual fighters, but don't know which id belongs to Raikage Army or a Zetsu Army.


Actually, they want to find the maximum possible number of soldiers of Raikage Army. But since they are not good at programming so they ask for your help. You as Naruto of the Hidden Leaf Village solve the problem for the Leaf Village ninjas.


Input Format

Input starts with an integer T , denoting the number of test cases. 

Each case contains an integer N denoting the number of dual fights. Each of the next N lines will contain two different integers A,B denoting there was a fight between soldiers having id A and B.


Output Format

For each case, print the case number and the maximum possible members(soldiers) of Raikage Army.


Constraints

1 <= T <= 20
1 <= N <= 105
1 <= A, B <= 2*104

Given that both A & B will be of different army.*/



#include<bits/stdc++.h>
using namespace std;

queue  < pair<int,int> > qq;
vector <int> v[20005];
bool visited[20005];
int main() {
    int i,j,k,l,t,a,b,c1,c2,mi,ma,n,ans;
    scanf("%d",&t);
    l=1;
    while(t--) {
    	
    
        scanf("%d",&n);
        for(i=0;i<n;i++) {
        	scanf("%d%d",&a,&b);
        	if(i==0) {
        		mi=min(a,b);
        		ma=max(a,b);
        	}
        	else {
        		mi=min(mi,min(a,b));
        		ma=max(ma,max(a,b));
        	}

        	v[a].push_back(b);
        	v[b].push_back(a);
        }

     
     for(i=mi;i<=ma;i++) 
     	visited[i]=false;

      printf("Case %d:",l);
    	l++;   
      ans=0;
      for(i=mi;i<=ma;i++) {
             c1=c2=0; 	   
      	    if(v[i].size()>0)
              qq.push(make_pair(i,0));
              while(!qq.empty())  {
                   a=qq.front().first;
                   b=qq.front().second;
                   qq.pop();
                   if(visited[a])
                   	continue;
                   else
                   	visited[a]=true;

                   if(b==0)
                   	c1++;
                   else
                   	c2++;

                   k=v[a].size();
                   for(j=0;j<k;j++) 
                   	  qq.push(make_pair(v[a][j],(b+1)%2));

              }
              ans=ans+max(c1,c2);    
      }

    
    for(i=mi;i<=ma;i++)
    	v[i].clear();
    
      printf(" %d\n",ans);
	
    }
    return 0;
}
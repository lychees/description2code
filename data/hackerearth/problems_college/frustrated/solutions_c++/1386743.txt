#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
int t;
char def[101];
bool use[1000001];
vector<int> S[10];
vector<int> K[10];
vector<int> prime;
bool can(int i, int a){
	if (a == 0){
		return true;
	}
	if (i < 0){
		return false;
	}
	int want = a % 10;
	int nex = lower_bound(S[want].begin(), S[want].end(), i)-S[want].begin();
	if (nex == S[want].size()){
		nex--;
	}
	if (nex < 0){
		return false;
	}
	if (S[want][nex] > i){
		nex--;
	}
	if (nex < 0){
		return false;
	}
	return can(S[want][nex] - 1, a / 10);
}
bool can1(int i, int a){
	if (a == 0){
		return true;
	}
	if (i < 0){
		return false;
	}
	int want = a % 10;
	int nex = lower_bound(K[want].begin(), K[want].end(), i) - K[want].begin();
	if (nex == K[want].size()){
		nex--;
	}
	if (nex < 0){
		return false;
	}
	if (K[want][nex] > i){
		nex--;
	}
	if (nex < 0){
		return false;
	}
	return can1(K[want][nex] - 1, a / 10);
}
int main(){
	scanf("%d", &t);
	prime.push_back(2);
	for (int i = 3; i < 1000001; i += 2){
		if (use[i] == false){
			prime.push_back(i);
			for (int j = i * 2; j < 1000001; j += i){
				use[j] = true;
			}
		}
	}
	string s, k;
	while (t--){
		int kk;
		scanf("%d", &kk);
		scanf("%s", def);
		s = def;
		scanf("%s", def);
		k = def;
		for (int i = 0; i < 10; i++){
			S[i].clear();
			K[i].clear();
		}
		for (int i =0; i <s.size(); i++){
			S[s[i] - '0'].push_back(i);
		}
		for (int i =0;i<k.size(); i++){
			K[k[i] - '0'].push_back(i);
		}
		int ind = lower_bound(prime.begin(), prime.end(),kk)-prime.begin();
		if (ind==prime.size()){
			ind--;
		}
		if (ind < 0){
			puts("-1");
			continue;
		}
		if(prime[ind]>kk){
			ind--;
		}
		if(ind<0){
			puts("-1");
			continue;
		}
		int maxt = -1;
		for (int i = ind; i >= 0; i--){
			if (can(s.size()-1,prime[i]) && can1(k.size()-1,prime[i])){
				maxt = prime[i];
				break;
			}
		}
		printf("%d\n", maxt);
	}
	//
	return 0;
}
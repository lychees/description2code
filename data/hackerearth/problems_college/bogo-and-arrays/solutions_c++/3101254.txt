#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <math.h>
using namespace std;
#define LL long long
int arr[200000];

const int inf=-1000000000;
int tree[2000006];
int a[200005];

void init(int node,int b,int e) {
    if(b==e) {
        tree[node]=a[b];
        return; }
    int left=node<<1;
    int right=left+1;
    int mid=(b+e)/2;
    init(left,b,mid);
    init(right,mid+1,e); tree[node]=max(tree[left],tree[right]);
}
int query(int node,int b,int e,int i,int j) {
    if(i>e||j<b) return inf; if(b>=i&&e<=j) return tree[node]; int left=node<<1;
    int right=left+1;
    int mid=(b+e)/2;
    int p1=query(left,b,mid,i,j); int p2=query(right,mid+1,e,i,j); return max(p1,p2);
}

int main() {
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n,k,temp,sum=0;
        scanf("%d %d",&n,&k);
        for(int i=1;i<=n;i++)
        {
            scanf("%d",&a[i]);
            //arr[i]= (temp>k)?1:0;
        }
        init(1,1,n);
        //std::sort(arr,arr+m);
        for(int i=1;i<=n;i++)
        {
            
            for(int j=i;j<=n;j++)
            {
                int val = query(1,1,n,i,j);//printf("%d %d %d",val,i,j);
                if(val>k){sum=sum+(n-j+1)*(j-i+1);i+=j-i;break;}
            }
            
        }
        printf("%d\n",sum);
    }
    return 0;
}
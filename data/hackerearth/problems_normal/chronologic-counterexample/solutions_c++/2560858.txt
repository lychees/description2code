/**
 *    author:  enot.1.10, Vladimir Smykalov (enot.1.10@gmail.com)
 *    created: 19.09.2015 09:46:18       
**/
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <ctime>
#include <cassert>
#include <queue>

#define fs first
#define sc second
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)
#define forit(it,v) for(typeof((v).begin()) it = v.begin() ; it != (v).end() ; ++it)
#define eprintf(...) fprintf(stderr, __VA_ARGS__),fflush(stderr)
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(),a.end()
#define pw(x) (1LL<<(x))

using namespace std;

typedef long long ll;
typedef double dbl;
typedef vector<int> vi;
typedef pair<int, int> pi;

const int inf = (int)1.01e9;
const dbl eps = 1e-9;

/* --- main part --- */

#define TASK "1"

const int maxn = 50;

int l[maxn], r[maxn];
int a[maxn];
int b[maxn];
int n, m;
int c[maxn];

inline bool ok()
{
    //eprintf("check: ");
    //forn(i, n) eprintf("%d%c", a[i] + 1, " \n"[i + 1 == n]);
    forn(i, n) c[i] = a[i];
    forn(i, m) sort(c + l[i], c + r[i]);
    forn(i, n - 1) if (c[i] > c[i + 1]) return false;
    return true;
}

int main()
{
    #ifdef home
        assert(freopen(TASK".in", "r", stdin));
        assert(freopen(TASK".out", "w", stdout));
    #endif
    scanf("%d%d", &n, &m);
    forn(i, m) scanf("%d%d", &l[i], &r[i]);
    forn(i, m) --l[i];
    forn(i, n)
    {
        forn(j, n) if (b[j] == 0)
        {
            b[j] = 1;
            a[i] = j;

            int ii = n - 1;
            for (int k = i + 1; k < n; ++k)
            {
                while (b[ii]) --ii;
                a[k] = ii--;
            }

            if (!ok())
            {
                break;
            }

            b[j] = 0;
        }
    }
    if (!ok())
    {
        forn(i, n) printf("%d%c", a[i] + 1, " \n"[i + 1 == n]);
    }
    else
    {
        printf("All ok!\n");
    }
    #ifdef home
        eprintf("Time: %d ms\n", (int)(clock() * 1000. / CLOCKS_PER_SEC));
    #endif
    return 0;
}

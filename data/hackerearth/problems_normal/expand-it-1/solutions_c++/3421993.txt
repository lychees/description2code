#include <iostream>
#include <string>
#include <vector>
#include <set>
using namespace std;

int main()
{
    string s;
    cin >> s;
    //cout << s<<"     "<<endl;
    vector <long long> alphabets (26,0);
    set<int> charsFound;
    char currentChar, tempChar;
    //parse input
    currentChar = *(s.begin());
    long long count = 0;
    charsFound.insert(currentChar - 'a');
    for (auto it = s.cbegin() + 1; it != s.cend(); it++) {
    	if (*it >= 'a' && *it <= 'z') {
    		//cout << count << endl;
    		alphabets[currentChar - 'a'] += count;
    		currentChar = *it;
		    charsFound.insert(currentChar - 'a');
    		count = 0;
    	} else {
    		count = count * 10 + (*it - '0');
    	}
    }
    alphabets[currentChar - 'a'] += count;
    //cout <<endl;
    //list of char founds and compressed sorted string
    vector<long long> alphabetFound;
    vector<int> ascii;
    for (auto it = charsFound.begin(); it != charsFound.end(); it++) {
    	alphabetFound.push_back(alphabets[*it]);
    	ascii.push_back(*it);
    	//cout << alphabets[*it] << endl;
    }
    for (auto it = alphabetFound.begin() + 1; it != alphabetFound.end(); it++) {
    	*it += *(it - 1);
    }
    int t;
    cin >> t;
    while (t--) {
    	long long p;
    	cin >> p;
    	int pos = 0;
    	for (auto it = alphabetFound.begin(); it != alphabetFound.end(); it++) {
    		if (*it >= p) {
    			break;
    		}
    		pos++;
    	}
    	if(pos < ascii.size()){
	    	currentChar = 'a' + ascii[pos];
	    	cout << currentChar << endl;
    	} else {
    		cout << -1 << endl;
    	}
    }
    return 0;
}

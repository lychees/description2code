# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <cstdio>
# include <cmath>
# include <numeric>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>
# include <complex>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,PII> TRI;
typedef vector<string> VS;

#define GI ({int t;scanf("%d",&t);t;})
#define REP(i,a,b) for(int i=a;i<b;i++)
#define FOR(i,n) REP(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define bitcount(x) __builtin_popcount(x)
#define pb push_back
#define mp make_pair
#define mt(a,b,c) mp(a,mp(b,c))
#define EPS (double)(1e-9)
#define INF 1000000000
#define MOD 1000000007
#define PI (double)(3.141592653589793)

inline int ni()
{
	register int r=0,c;
	for(c=getchar_unlocked();c<=32;c=getchar_unlocked());
	if(c=='-') 
		return -ni();
	for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());
	return r;
}

map<PII,VI> m;
VI ans;

void preprocess()
{
	int month = 1, year = 2000, date = 2;
	while(year <= 5000)
	{
		m[mp(month,year)].pb(date);
		date += 7;

		if(month == 2)
		{
			if(year%4 == 0 && (year%400==0 || (year%100)!=0)) // leap year
			{
				if(date > 29)
				{
					date-=29;
					month++;
				}
			}
			else
			{
				if(date > 28)
				{
					date-=28;
					month++;
				}
			}
			continue;
		}

		switch(month)
		{
			case 1: case 3: case 5: case 7: case 8: case 10:
			if(date > 31)
			{
				date-=31;
				month += 1;
			}
			break;
			case 4: case 6: case 9: case 11:
			if(date > 30)
			{
				date-=30;
				month+=1;
			}
			break;
			case 12:
			if(date > 31)
			{
				date-=31;
				month=1;
				year+=1;
			}
		}
	}
}

int main()
{
	int t,month,year;

	preprocess();

	t = ni();
	while(t--)
	{
		month = ni(); year = ni();
		ans = m[mp(month,year)];
		REP(i,0,ans.size()-1)
			printf("%d ",ans[i]);
		printf("%d\n", ans[ans.size()-1]);
	}	
	
	return 0;
}



#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <math.h>
#include <memory.h>
#include <cstdio>
#define MAX_DMG 50
#define MAX_ENERGY 500
int MAX_DAMAGE = 0;
#define MAX_DISTANCE 100

using namespace std;

double arr[MAX_ENERGY][MAX_DMG][MAX_DISTANCE];

double compute(int energy,int damage,int dest) {

	if(dest <= 0 && energy>=0) return 1;
	if(damage == MAX_DAMAGE || energy < 0  /*MAX_ENERGY*/ ) return 0;
	if(int(arr[energy][damage][dest]) >= 0) return arr[energy][damage][dest];
	return arr[energy][damage][dest] =
		 (compute(energy-10,damage,dest-1) // high
		+ compute(energy-5,damage,dest-1) // medium
		+ compute(energy-2,damage,dest-1) // low
		+ compute(energy-30,damage+1,dest-1) // obstacle high
		+ compute(energy-25,damage+1,dest-1) // obstacle medium
		+ compute(energy-22,damage+1,dest-1) // obstacle low
		) / 6.0;
}

int main() {
//	clock_t start,end;
//	start = clock();
	int t;

	scanf("%d",&t);
	while(t--)
	{
		for(int i=0; i<MAX_ENERGY;i++)
			for(int j=0; j<MAX_DMG; j++)
				for(int k=0; k<MAX_DISTANCE; k++)
					arr[i][j][k]=-1;

		int energy,dest_pos,dmg;
		cin>>dest_pos>>energy>>dmg;
		MAX_DAMAGE = dmg;
		double ans = compute(energy,0,dest_pos);
//		cout<<(double)ans<<endl;
		ans=ans*100.0;
		cout<<(int)ans<<endl;
	}
//	end = clock();
//	cout<<((double)(start-end)/CLOCKS_PER_SEC)<<endl;
	return 0;
}
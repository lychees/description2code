#include <iostream>
#include <queue>
#include <cmath>
using namespace std;
long long int grid[200][200];
int visited[200][200];
int color[200][200];
int n, m;
int ans=0;
class node{
	public:
	int x;
	int y;
	node(int X, int Y){
		x=X;
		y=Y;
	}
};
bool valid(int X, int Y){
   // cout<<n<<" "<<m<<" NM"<<endl;
	if(X>=0 && X<n && Y>=0 && Y<m){
            //cout<<X+1<<" "<<Y+1<<" is VALID"<<endl;
		return true;
	}
	            //cout<<X+1<<" "<<Y+1<<" is INVALID"<<endl;

	return false;
}
int main()
{

    int  q;
    cin>>n>>m>>q;
    for(int i = 0; i < n; i++)
    	for(int j = 0; j < m; j++)
    		{
    			cin>>grid[i][j];
    			
    		}
    for(int z = 0; z < q; z++){
    queue<node> Q;
    long long int a,b, d;
    ans=0;
    cin>>a>>b>>d;
    a--;
    b--;
    for(int i = 0; i < n; i++)
    	for(int j = 0; j < m; j++)
    		{
    			visited[i][j]=0;
    			color[i][j]=0;
    		}
    Q.push(node(a,b));
    while(!Q.empty()){
    	node current = Q.front();
    	//cout<<"NODE: "<<current.x+1<<" "<<current.y+1<<endl;
    	if(color[current.x][current.y]==0)
    	{
    		ans+=1;
    		color[current.x][current.y]=1;
    	}
    	visited[current.x][current.y]=1;
    	Q.pop();
    	if(valid(current.x+1, current.y)){
    		if(abs(grid[current.x][current.y]-grid[current.x+1][current.y])<=d && visited[current.x+1][current.y]==0 && color[current.x][current.y]==1){
    			Q.push(node(current.x+1, current.y));
    		}
    	}

    	if(valid(current.x-1, current.y)){
    		if(abs(grid[current.x][current.y]-grid[current.x-1][current.y])<=d && visited[current.x-1][current.y]==0 && color[current.x][current.y]==1){
    			Q.push(node(current.x-1, current.y));
    		}
    	}

    	if(valid(current.x, current.y+1)){
    		if(abs(grid[current.x][current.y]-grid[current.x][current.y+1])<=d && visited[current.x][current.y+1]==0 && color[current.x][current.y]==1){
    			Q.push(node(current.x, current.y+1));
    		}
    	}

    	if(valid(current.x, current.y-1)){
              //  cout<<grid[current.x][current.y]-grid[current.x][current.y-1]<<endl;
    		if(abs(grid[current.x][current.y]-grid[current.x][current.y-1])<=d && visited[current.x][current.y-1]==0 && color[current.x][current.y]==1){
    			Q.push(node(current.x, current.y-1));
    		}
    	}


    }
    cout<<ans<<endl;

    }


    return 0;
}

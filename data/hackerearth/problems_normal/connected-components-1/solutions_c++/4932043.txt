#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100000 + 10;
const int MOD = (int)(1e9) + 7;
int fac[MAXN];
int factorial(int n) {
    return fac[n];
}
int power(int x, int k) {
    if (k == 0) return 1;
    long long t = power(x, k / 2);
    t = (t * t) % MOD;
    if (k % 2 == 1) t = (t * x) % MOD;
    return (int)(t);
}
int combi(int k, int n) {
    if (k == n) return 1;
    if (min(n, k) < 0) return 0;
    if (k > n) return 0;
    return (1LL * factorial(n) * power((1LL * factorial(k) * factorial(n - k)) % MOD, MOD - 2)) % MOD;
}
void init() {
    fac[0] = 1;
    int n = 100000 + 5;
    for(int i = 1; i <= n; i++) fac[i] = (1LL * fac[i - 1] * i) % MOD;
}
int main()
{
    //freopen("09", "r", stdin);
    //freopen("09.a", "w", stdout);
    init();
    int test;
    cin >> test;
    while (test --) {
        int n, m, c;
        cin >> n >> m >> c;
        //1 <= m <= n <= ?, 0 <= c <= n - m
        n += 2; m += 2;
        // result = C(c, n - m - 1) * C(c, m - 1)
        int result = (1LL * combi(c - 1, n - m - 1) * combi(c, m - 1)) % MOD;
        cout << result << endl;
    }
}
#include <bits/stdc++.h>
#define endl '\n'

#define int long long
#define rank rank_bad_word

using namespace std;
const int MAXN = (1 << 20);

struct rabin_karp
{
	int mod, base, sz;
	vector<int> h, base_pow;

	void init(string s, int _mod, int _base)
	{
		mod = _mod;
		base = _base;
		sz = s.size();
	
		h.assign(sz + 1, 0);
		base_pow.assign(sz + 1, 0);
	
		for(int i = 1; i <= sz; i++)
			h[i] = (h[i - 1] * base + s[i - 1]) % mod;
		
		base_pow[0] = 1;
		for(int i = 1; i <= sz; i++)
			base_pow[i] = (base_pow[i - 1] * base) % mod;
	}

	int get_hash(int l, int r)
	{
		int len = r - l + 1;
		return (h[r] - (h[l - 1] * base_pow[len]) % mod + mod) % mod;
	}
};

vector<int> kasai(string s, vector<int> sa)
{
	int sz = s.size();

	vector<int> lcp, pos;
	lcp.assign(sz, 0);
	pos.assign(sz, 0);

	for(int i = 0; i < sz; i++)
		pos[sa[i]] = i;

	int k = 0;
	for(int i = 0; i < sz; i++, k ? k-- : 0)
	{
		if(pos[i] == sz - 1)
		{
			k = 0;
			continue;
		}

		int j = sa[pos[i] + 1];
		while(i + k < sz && j + k < sz && s[i + k] == s[j + k]) k++;
		lcp[pos[i]] = k;
	}

	return lcp;
}

/*vector<int> build(string s)
{
	vector<int> _sa;
	sz = s.size();
	str = s;

	fir.init(str, (int)(1e9 + 7), 131);
	sec.init(str, (int)(1e9 + 9), 137);
		
	_sa.assign(sz, 0);
	for(int i = 0; i < sz; i++)
		_sa[i] = i;

	stable_sort(_sa.begin(), _sa.end(), cmp);
	return _sa;
}*/	

string s;
int rank[MAXN], idx[MAXN], temp[MAXN];
int gap, N;

inline bool cmp(int i, int j)
{
	if (idx[i] != idx[j])
		return idx[i] < idx[j];
	
	i += gap;
	j += gap;
	return (i < N && j < N) ? idx[i] < idx[j] : i > j;
}

vector<int> build(string st)
{
	vector<int> sa;
	s = st;
	N = s.size();
	sa.assign(N, 0);

	for(int i = 0; i < N; i++)
	{
		sa[i] = i;
		idx[i] = s[i];
	}

	for (gap = 1; ; gap = gap * 2)
	{
		sort(sa.begin(), sa.end(), cmp);

		for(int i = 0; i < N - 1; i++) 
		{
			temp[i + 1] = temp[i];
			temp[i + 1] += cmp(sa[i], sa[i + 1]);
		}
		
		for(int i = 0; i < N; i++) 
			idx[sa[i]] = temp[i];
		
		if (temp[N - 1] == N - 1) break;
	}

	return sa;
}
	

int k, n;
string a;

void read()
{
	cin >> k >> n;
	cin >> a;
	k--;
}

vector<int> sa, lcp;
set<pair<int, int> > st;

void solve()
{
	sa = build(a);
	lcp = kasai(a, sa);

	//for(int i = 0; i < n; i++)
	//	cout << lcp[i] << " " << a.substr(sa[i], n) << endl;

	for(int i = 0; i < k; i++)
		st.insert({lcp[i], i});

	if(k == 0)
	{
		cout << a.size() << endl;
		return;
	}

	int ans = st.begin()->first;
	for(int i = k; i < n - 1; i++)
	{
		st.insert({lcp[i], i});
		st.erase({lcp[i - k], i - k});
		ans = max(ans, st.begin()->first);
	}

	cout << ans << endl;
}

#undef int
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}


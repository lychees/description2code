#include <bits/stdc++.h>
using namespace std;
long long A[5][100005];
long long tree[121][100005];
string s;
int n;
map <string, int> m;
map <string, int> :: iterator it;
int cnt;
void update(int tree_idx, int idx, long long val)
{
	while ( idx <= n+1 ) {
		tree[tree_idx][idx] += val;
		idx += (idx & (-idx));
	}
	return;
}
long long query(int tree_idx, int idx)
{
	long long ans = 0;
	while ( idx > 0 ) {
		ans += tree[tree_idx][idx];
		idx -= (idx & (-idx));
	}
	return ans;
}
void pre()
{
	string p = "ABCDE";
	cnt = 1;
	do {
		m[p] = cnt++;
	}
	while ( next_permutation(p.begin(),p.end()) );
	return;
}
int main()
{
	pre();
	int q;
	string str,init="ABCDE";
	cin >> n;
	for ( int i = 0; i < 5; i++ ) {
		for ( int j = 1; j <= n; j++ ) cin >> A[i][j];
	}
	cin >> s;
	s = "X" + s;
	for ( it = m.begin(); it != m.end(); it++ ) {
		int tree_idx = (*it).second;
		string now = (*it).first;
		for ( int i = 1; i <= n; i++ ) update(tree_idx, i, A[now[s[i]-65]-65][i]);
	}
	cin >> q;
	while ( q-- ) {
		cin >> str;
		if ( str == "Qs" ) {
			int a,b;
			cin >> a >> b;
			cout << query(m[init],b) - query(m[init],a-1) << endl;
		}
		else if ( str == "Qe") {
			char a,b;
			cin >> a >> b;
			swap(init[a-65],init[b-65]);
		}
		else {
			int a;
			char b;
			cin >> a >> b;
			for ( it = m.begin(); it != m.end(); it++ ) {
				int tree_idx = (*it).second;
				string now = (*it).first;
				long long val = query(tree_idx, a) - query(tree_idx, a-1);
				update(tree_idx, a, A[now[b-65]-65][a]-val);
			}
		}
	}
	return 0;
}
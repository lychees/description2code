#include <iostream>
#include <utility>
#include <map>
#include <algorithm>
#include <limits.h>

using namespace std;

map < pair<long long int, pair<long long int, long long int> >, long long int> se;
pair <long long int, long long int> p[300];
long long int n;

long long int get_max(long long int, long long int);
long long int get_ans(long long int, long long int, long long int);

int main()
{	
	long long int t, i, m;
	cin >> t;
	for (; t; --t) {
		se.clear();
		cin >> n;
		for (i = 0; i < n; ++i) {
			cin >> p[i].first >> p[i].second;
		}
		sort(p, p + n);
		m = 0;
		for (i = n-1; i >= 0; --i) {
			m = get_max(m, get_ans(i, INT_MAX, INT_MAX));
		}
		cout << m << endl;
	}
	
	return 0;
}

long long int get_max(long long int a, long long int b)
{
	if (a > b) return a;
	return b;
}

long long int get_ans(long long int i, long long int a, long long int b)
{
	if (i < 0) return 0;
	
	if (se.find(make_pair(i, make_pair(a, b))) != se.end()) {
		return se[make_pair(i, make_pair(a, b))];
	}
	
	if (p[i].first < a && p[i].second < b) {
		return (se[make_pair(i, make_pair(a, b))] = get_max(get_ans(i-1, a, b), p[i].second + get_ans(i-1, p[i].first, p[i].second)));
	} else {
		return se[make_pair(i, make_pair(a, b))] = get_ans(i-1, a, b);
	}
} 
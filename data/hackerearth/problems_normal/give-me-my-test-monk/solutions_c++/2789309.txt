#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)

#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     (int)c.size()
#define clr(c)    c.clear()
#define pb        push_back
#define mp        make_pair

#define cin(x)     scanf("%d",&x)

#define FOR(i,a,b)      for(int i=(int)(a);i<(int)(b);i++)
#define RFOR(i,a,b)     for(int i=(int)(b)-1;i>=(int)(a);i--)

#define MOD       1000000007
#define EPS       1E-10

#define PI  acos(-1)

#define CASE(x)   cout << "Case #" << x << ": ";

LL ncr[101][101];

LL BigMod(LL a,LL b,LL mod)
{
      if(!b) return 1;
      LL x = BigMod(a,b/2,mod);
      x = (x*x)%mod;
      if(b&1) return (x*a)%mod;
      else return x;
}

LL modinv(LL a,LL mod = MOD)
{
      return BigMod(a,mod-2,mod);
}

LL fact(int a)
{
	LL ret = 1;
	for(int i = 1; i <= a; i++)
		ret = (ret * i) % MOD;
	return ret;
}

LL calc(int n , int x)
{
	if(x == 0) return 1;
	if(x == 1) return 0;
	LL ret = ncr[n][x];
	LL mul = fact(x);
	LL sum = 0;
	int sign = 1;
	for(int base = 2; base <= x; base++)
	{
		mul = (mul * modinv(base)) % MOD;
		if(sign) sum += mul;
		else sum -= mul;
		sign= !sign;
		mul %= MOD;
		if(mul < 0) mul += MOD;
	}
	return (sum * ret) % MOD;
}

int main()
{
	inp_s;
	ncr[0][0] = ncr[1][1] = ncr[1][0] = 1;
	for(int i = 2; i <= 100; i++)
	{
		ncr[i][0] = ncr[i][i] = 1;
		for(int j = 1; j < i; j++)
			ncr[i][j] = (ncr[i-1][j] + ncr[i-1][j-1]) % MOD;
	}
	int n;
	cin >> n;
	LL p = 0 , q = 0;
	int l , r;
	cin >> l >> r;
	for(int i = 0; i <= n; i++)
	{
		LL ele = calc(n , i);
		if(i >= l && i <= r)
			p += ele;
		q += ele;
	}
	p = (p * modinv(q)) % MOD;
	cout << p << endl;
	return 0;
}
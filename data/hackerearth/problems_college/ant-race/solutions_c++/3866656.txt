#include <bits/stdc++.h>
#include <stdlib.h>
using namespace std;
const long long mod=1e9+7;
 
#define llu long long unsigned
#define lld long long
#define ld long
#define sc(a) scanf("%lld",&a)
#define sc2(a,b) scanf("%lld%lld",&a,&b)
#define sc3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define scf(a) scanf("%lf",&a)
#define scf2(a,b) scanf("%lf%lf",&a,&b)
#define scf3(a,b,c) scanf("%lf%lf%lf",&a,&b,&c)
#define prL(a) printf("%lld\n",a)
#define prS(a) printf("%lld ",a)
#define prfL(a) printf("%lf\n",a)
#define prfS(a) printf("%lf ",a)
#define popcount __builtin_popcountll
#define swap(a,b,t) t=a;a=b;b=t
typedef pair<lld,lld> PA;
 
#define lim 100003
#define lim2 3003
 lld P[lim],A[lim],B[lim],C[lim],D[lim];
 //string A,B;
// char S[lim];
// map<lld,lld> M;
// map<lld,lld>::iterator it;
// map<string,lld> M,Mn;
// string S[lim];

// multiset<lld> S;
// set<lld> S;
// string S;
vector<lld> V[lim],Vc,Vb;
// map<char,lld> M;

// lld dp[5005][5005];


lld findRoot(lld A[],lld a,lld b){
	if(a==b) return A[a];
	lld k=b-a+1,t;
	t=findRoot(A,a+1,a+k/2);
	if(t!=0){
		V[t].push_back(A[a]);
		V[A[a]].push_back(t);
	}
	t=findRoot(A,a+k/2+1,b);
	if(t!=0){
		V[t].push_back(A[a]);
		V[A[a]].push_back(t);
	}
	return A[a];
}

void bfs(int r){
    lld i,j,k;
    queue<lld> Q;
    Q.push(r);
    P[r]=1;
    D[r]=0;
    while(!Q.empty()){
        k=Q.front();
        Q.pop();
        for(i=0;i<V[k].size();i++){
            if(P[V[k][i]]==0){
                Q.push(V[k][i]);
                P[V[k][i]]=1;
                D[V[k][i]]=D[k]+1;
               // printf("k=%lld i=%lld V[k][i]=%lld\n",k,i,V[k][i]);
            }
        }
    }
}

int main(){
    lld T,i,j,k,l,r,s,a,b,c,d,w,x,y,v,z,m,n,t,p,q,curr,sum,ans,pos,val,countA,secondMin;
    sc(T);
    while(T--){
    	sc(n);
    	for(i=1;i<=n;i++){
    		sc(A[i]);
    		P[i]=0;
    		V[i].clear();
    	}
    	for(i=1;i<=n;i++) sc(B[i]);
    	sc3(x,y,z);
    	findRoot(B,1,n);
    	// for(i=1;i<=n;i++){
    	// 	printf("i=%lld ", i);
    	// 	for(j=0;j<V[i].size();j++){
    	// 		prS(V[i][j]);
    	// 	}
    	// 	printf("\n");
    	// }
    	bfs(y);
    	if(D[x]<D[z]) printf("FIRST\n");
    	else printf("SECOND\n");
    }
    return 0;
}
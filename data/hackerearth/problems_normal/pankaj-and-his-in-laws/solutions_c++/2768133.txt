//Hope is a good thing and maybe the best thing of all...
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <list>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
using namespace std;

//DEBUG
#define trace(x) cerr << #x << "=" << x <<endl;
#define trace2(x, y) cerr << #x << "=" << x << " " << #y << "=" << y <<endl;
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int p = 0; p < n; p++) {cerr << x[p] << " ";} cerr << endl;}
#define track(x) {cerr << #x << ":" << endl; for (int p = 0; p < x.size(); p++) {cerr << x[p] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}

void readwrite() {
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #else
        ios::sync_with_stdio(false);
    #endif
}

//CONSTANTS
const int MAX = 1005;
const int MOD = 1000000007;
const int INF = 1000000000;

int getLIS(vector<int> &a) {
    vector<int> dp;
    dp.push_back(-INF);
    int lis = 0;
    for (int i = 0; i < a.size(); i++) {
        vector<int>::iterator j = lower_bound(dp.begin(), dp.end(), a[i]);
        if (j == dp.end()) {
            lis++;
            dp.push_back(a[i]);
        } else {
            *j = a[i];
        }
    }
    return lis;
}

string toBinary(int x) {
	string s;
	while (x) {
		s.push_back((x & 1) + '0');
		x >>= 1;
	}
	reverse(s.begin(), s.end());
	return s;
}

int main() {
    int n;
    scanf("%d", &n);
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }
    int lis = getLIS(a);
    printf("%s\n", toBinary(lis).c_str());
}

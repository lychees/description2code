//#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>
#include <string>
#include <cmath>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>

using namespace std;

typedef long long        ll;
typedef pair<int, int>   pii;
typedef pair<int, pii>   piii;
typedef vector<int>      vi;
typedef vector<pii>      vii;
typedef vector<piii>     viii;

#define forup(a,b,c) for (int (a)=(b); (a)<(c); (a)++)
#define forn(a,b,c)  for (int (a)=(b); (a)<=(c); (a)++)
#define ford(a,b,c)  for (int (a)=(b); (a)>=(c); (a)--)
#define rep(i,n)     forup(i,0,n)
#define repn(i,n)    forn(i,1,n)
#define repd(i,n)    ford(i,n,1)
#define foreach(i,X) for(__typeof((X).begin()) i = (X).begin(); i != (X).end(); i++)
#define all(a)       a.begin(),a.end()

const int inf = numeric_limits<int>::max();
const ll linf = numeric_limits<ll>::max();

#define fi           first
#define se           second
#define pb           push_back
#define mp           make_pair


int calc(int a[], int sum1, int sum2, int ind, int n)
{
    int ret1=1, ret2=1;
    if(sum1+a[ind]>sum2)
    {
        if(ind<n-1)
            ret1*=calc(a, sum1, sum2+a[ind], ind+1, n);
        return ret1;
    }
    if(ind<n-1)
    {
        ret1*=calc(a, sum1, sum2+a[ind], ind+1, n);
        ret2*=calc(a, sum1+a[ind], sum2, ind+1, n);
    }
    return ret1+ret2;
}

int main()
{
    int n; cin>>n;
    int sum=0, ans=0;
    int a[n];
    rep(i, n) {cin>>a[i]; sum+=a[i];}
    if(n<=1){ans=1; goto here;}
    sort(a, a+n);
    do
    {
        int sum1=0, sum2=a[0];
        int minians=calc(a, sum1, sum2, 1, n);
        ans+=minians;
    }
    while(next_permutation(a, a+n));
    here:
    cout<<ans<<" "<<sum<<endl;
    if(sum>=ans) cout<<"Got no way out!"<<endl;
    else cout<<"We will win!"<<endl;
    return 0;
}
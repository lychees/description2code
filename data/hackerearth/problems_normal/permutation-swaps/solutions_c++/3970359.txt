#include <iostream>
#include<stack>
#include<vector>
#include<list>
using namespace std;
vector<int > visited;
stack<int > st;
list<int> mylist[100005];

void dfs(int &cnt)
{
	int top=st.top();
	for(list<int>::iterator it=mylist[top].begin();it!=mylist[top].end();it++)
	{
		if(visited[*it]==0)
		{
			visited[*it]=cnt;
			st.push(*it);
			dfs(cnt);
			st.pop();
		}
	}
}

int main()
{
    int t;
    cin>>t;
    while(t>0)
    {
    	int n,m;
    	cin>>n>>m;
    	vector<int > p;
    	p.resize(n+1);
    	vector<int > q;
    	q.resize(n+1);
    	visited.assign(n+1,0);
    	int a,b;
    	
    	for(int i=1;i<=n;i++)
    		cin>>p[i];
    		
    	for(int i=1;i<=n;i++)
    		cin>>q[i];
    	
    	for(int i=1;i<=m;i++)
    	{
    		cin>>a>>b;
    		a=p[a];
    		b=p[b];
    		mylist[a].push_back(b);
    		mylist[b].push_back(a);
    	}
    	
    	int cnt=1;
    	for(int i=1;i<=n;i++)
    	{
    		if(visited[i]==0)
    		{
    			visited[i]=cnt;
    			st.push(i);
    			dfs(cnt);
    			st.pop();
    			cnt++;
    		}
    	}
    	int flag=0;
    	for(int i=0;i<q.size();i++)
    	{
    		if(visited[p[i]]!=visited[q[i]])
    		{
    			flag=1;
    			break;
    		}
    	}
    	if(flag==1)
    		cout<<"NO\n";
    	else
    		cout<<"YES\n";
    		
    	for(int i=1;i<=n;i++)
    		mylist[i].clear();
    	t--;	
    	
    }
}

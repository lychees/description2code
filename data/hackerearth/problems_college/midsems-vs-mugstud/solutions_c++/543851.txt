// {{{ Headers
// vim:filetype=cpp:foldmethod=marker:foldmarker={{{,}}}

#include <cassert>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#include <algorithm>
#include <deque>
#include <functional>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#include <fstream>
#include <iostream>
#include <sstream>

#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;
// }}}

typedef long long int64;
const int INF = 0x3f3f3f3f;
template <class T> inline int len (const T &a) { return a.size (); }

int64 G [55][55][55];
int64 d [55][55][55];


int
main () {
#ifdef LOCALHOST
    freopen ("test.in", "r", stdin);
    // freopen ("test.out", "w", stdout);
#endif
    int T, N;
    scanf ("%d", &T);
    while (T--) {
        scanf ("%d", &N);
        memset (G, 0, sizeof (G));
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                for (int k = 0; k < N; k++)
                    scanf ("%lld", &G [i][j][k]);
        memset (d, 0, sizeof (d));
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                for (int k = 0; k < N; k++) {
                    d [i][j][k] += G [i][j][k];
                    if (i - 1 >= 0) d [i][j][k] -= G [i - 1][j][k];
                    if (j - 1 >= 0) d [i][j][k] -= G [i][j - 1][k];
                    if (k - 1 >= 0) d [i][j][k] -= G [i][j][k - 1];
                    if (i - 1 >= 0 && j - 1 >= 0) d [i][j][k] += G [i - 1][j - 1][k];
                    if (j - 1 >= 0 && k - 1 >= 0) d [i][j][k] += G [i][j - 1][k - 1];
                    if (i - 1 >= 0 && k - 1 >= 0) d [i][j][k] += G [i - 1][j][k - 1];
                    if (i - 1 >= 0 && j - 1 >= 0 && k - 1 >= 0) d [i][j][k] -= G [i - 1][j - 1][k - 1];
                }
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                for (int k = 0; k < N; k++)
                    printf ("%lld ", d [i][j][k]);
                putchar ('\n');
            }
        }
    }


    return 0;
}


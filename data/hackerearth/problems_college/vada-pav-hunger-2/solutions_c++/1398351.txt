#include<bits/stdc++.h>
#include<string>
using namespace std;
 
 
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
 
#define s(n)                        scanf("%d",&n)
#define s2(q,w)                        scanf("%d %d",&q,&w)
#define s3(q,w,e)                        scanf("%d %d %d",&q,&w,&e)
#define pb(x)            push_back(x)
 
#define INF                         (int)1e9
#define EPS                         1e-9
 
#define checkbit(n,b)                ( (n >> b) & 1)
 
int mod = 10000007;
 
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
bool* isPrime;
void generatePrimeSieve(const int lim)
{
  isPrime=(bool *)malloc(lim+1);
  memset(isPrime,true,lim+1);
  isPrime[0]=false;
  isPrime[1]=false;
  for(int i=2;i<=lim;++i)
    if(isPrime[i])
      for(int j=i+i;j<=lim;j+=i)
        isPrime[j]=false;
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
int n;
 
vector<ii> G[3000];
int dp[1001][2];
 
void dfs(int x,int parent)
{
 
  dp[x][0] = 0;
  dp[x][1] = 0;
  bool isleaf = true;
  for (int i = 0; i < G[x].size(); ++i)
  {
    int u = G[x][i].first;
    int cost = G[x][i].second;
    if(u!=parent)
    {
      isleaf = false;
      dfs(u,x);
      dp[x][1] += 2*cost + dp[u][1]; 
    }
 
  }
  if(isleaf)
    return ;
  dp[x][0] = INF;
 
  for (int i = 0; i < G[x].size(); ++i)
  {
    int u = G[x][i].first;
    int cost = G[x][i].second;
    if(u!=parent)
    {
      int temp = dp[x][1] - cost - dp[u][1] + dp[u][0];
      dp[x][0] = min(dp[x][0],temp);
 
    }
  }
 
 
 
}
 
 
 
int main()
{
  s(n);
  int x,y,co;
  for (int i = 0; i < n-1; ++i)
    {
      s2(x,y);
      G[x].pb(ii(y,1));
      G[y].pb(ii(x,1));
 
    }  
    dfs(1,0);
 
    cout<<dp[1][0];
 
}
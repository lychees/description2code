//Author: Aman Choudhary
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <cmath>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <map>
#include <cassert>
#define mod  1000000007
#define PHI 1000000006
#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define rz(x) resize(n)
#define cl()  clear()
#define MaxN 2001
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define S1(x) scanf("%llu",&x)
using namespace std;
int C[MaxN][MaxN], X[MaxN], Y[MaxN], n;
int  optmatch(int nx, int ny) {
    int Lx[MaxN], Ly[MaxN], Q[MaxN], prev[MaxN];
    int i, j, k, s, head, tail;

    for (i = 0; i < nx; i++) {
        Lx[i] = Ly[i] = 0;

        for (j = 0; j < ny; j++)
            Lx[i] = max(Lx[i], C[i][j]);
    }

    memset(X, -1, sizeof(X));
    memset(Y, -1, sizeof(Y));
    i = 0;

    while (i < nx) {
        memset(prev, -1, sizeof(prev));

        for (Q[0] = i, head = 0, tail = 1; head < tail && X[i] < 0; head++) {
            s = Q[head];

            for (j = 0; j < ny && X[i] < 0; j++) {
                if (Lx[s] + Ly[j] > C[s][j] || prev[j] >= 0) continue;

                Q[tail++] = Y[j];
                prev[j] = s;

                if (Y[j] < 0) while (j >= 0) {
                        s = prev[j];
                        Y[j] = s;
                        k = X[s];
                        X[s] = j;
                        j = k;
                    }
            }
        }

        if (X[i] >= 0) i ++;

        else {
            k = (1 << 30);

            for (head = 0; head < tail; head++) {
                s = Q[head];

                for (j = 0; j < ny; j++)
                    if (prev[j] == -1) k = min(k, (Lx[s] + Ly[j] - C[s][j]));
            }

            for (j = 0; j < tail; j++) Lx[Q[j]] -= k;

            for (j = 0; j < ny; j++) if (prev[j] >= 0) Ly[j] += k;
        }
    }

    int Ans = 0;

    for (int i = 0; i < nx; i ++) if (X[i] >= 0) Ans += C[i][X[i]];

    return Ans;
}
int main()
{
  //  freopen ("input.txt", "r", stdin);
    int t;
    cin >> t;
    int ii = 1;
    while (t--) {
//        cout << "Case " << ii << ": ";
        ii++;
        cin >> n;

        int i,j;
        F (i, 0, n) {
            F (j, 0, n) {
                cin >> C[i][j];
            }
        }

        cout << optmatch (n, n) << endl;
    }

    return 0;
}

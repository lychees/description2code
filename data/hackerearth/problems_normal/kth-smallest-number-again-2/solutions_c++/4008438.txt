#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define vb vector<bool>
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}
class graph
{
	vi * adj;
	int time;
	public:
		graph( int v)
		{
			adj = new vi[v];
			time = 0;
		}
		void add_edge(int u, int v)
		{
			adj[u].pb( v);
			adj[v].pb( u);
		}
};
int main()
{
	ios_base::sync_with_stdio(false);
	ll t, n, q, a, b, i, diff, ans, pos;
	llu k;
	cin >> t;
	while( t--)
	{
		cin >> n >> q;
		vector<ppl > v(n);
		for( i=0;i<n;i++ )
		{
			cin >> v[i].first >> v[i].second;
		}
		sort( v.begin(), v.end());
		vector< ppl > f;
		vector< llu > tsz;
		llu tot = 0;
		ppl take;
		take.first = v[0].first;
		take.second = v[0].second;
		i=0;
		while( i<n )
		{
			if( (v[i].first <= take.second ) ||( take.second == v[i].first - 1) )
			{
				take.second = max(v[i].second, take.second);
				if( i+1 ==n )
				{
					f.pb( take);
				}
			}
			else
			{
				f.pb( take);
				take.first = v[i].first;
				take.second = v[i].second;
				if( i+1 == n)
				{
					f.pb( take);
				}
			}
			i++;
		}
		tsz.pb( 0);
		tot = 0;
		for( i=0;i<f.size();i++ )
		{
			diff = f[i].second - f[i].first+1;
			tot += diff;
			tsz.pb( tot);
		}
		vector< llu >::iterator it1, it2;
		while( q--)
		{
			cin >> k;
			if( k > tot)
			{
				ans = -1;
			}
			else
			{
				it1 = lower_bound( tsz.begin(), tsz.end(), k);
				pos = it1 - tsz.begin();
				it1--;
				diff = k - (*it1);
				diff--;
				pos--;
				ans = f[pos].first + diff;
			}
			cout << ans << "\n";
		}
	}
    return 0;
}

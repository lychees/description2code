#include <bits/stdc++.h>
#define ll long long
#define mod 1000000007
#define upperlimit 1000100
#define INF 1000000100
#define INFL 1000000000000000100
#define eps 1e-8
#define endl '\n'
#define sd(n) scanf("%d",&n)
#define slld(n) scanf("%lld",&n)
#define pd(n) printf("%d",n)
#define plld(n) printf("%lld",n)
#define pds(n) printf("%d ",n)
#define pllds(n) printf("%lld ",n)
#define pdn(n) printf("%d\n",n)
#define plldn(n) printf("%lld\n",n)
#define REP(i,a,b) for(i=a;i<=b;i++)
#define mp make_pair
#define pb push_back
#define pcc pair<char,char>
#define pii pair<int,int>
#define pll pair<ll,ll>
#define tr(container,it) for(typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define F first
#define S second

using namespace std;

ll gcd(ll n1,ll n2){
	if(n1%n2==0)return n2;
	return gcd(n2,n1%n2);
}
ll powmod(ll base,ll exponent)
{
	ll ans=1;
	while(exponent){
		if(exponent&1)ans=(ans*base)%mod;
		base=(base*base)%mod;
		exponent/=2;
	}
	return ans;
}
int arr1[upperlimit+1];
int arr2[upperlimit+1];
int dp1[upperlimit+1];
int dp2[upperlimit+1];
bool visited[upperlimit+1];
vector <int> adj[upperlimit+1];
void dfs(int node){
	visited[node]=true;
	int temp1=0;
	int temp2=0;
	for(int i=0;i<adj[node].size();i++)if(!visited[adj[node][i]]){
		dfs(adj[node][i]);
		temp1+=dp1[adj[node][i]];
		temp2+=dp2[adj[node][i]];
	}
	if(arr1[node]==arr2[node]){
        dp1[node]=min(temp1,2+temp2);
        dp2[node]=1+min(temp1,temp2);
	}
	else{
        dp1[node]=1+min(temp1,temp2);
        dp2[node]=min(2+temp1,temp2);
	}
}
int main()
{
	int n,i,j,k,a,b;
	sd(n);
	for(i=1;i<n;i++){
		sd(a);
		sd(b);
		adj[a].pb(b);
		adj[b].pb(a);
	}
	for(i=1;i<=n;i++)sd(arr1[i]);
	for(i=1;i<=n;i++)sd(arr2[i]);
	dfs(1);
	pd(dp1[1]);
	return 0;
}

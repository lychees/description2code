#include<bits/stdc++.h>
#define N 100010
using namespace std;

bool visited[N];
int arr[N], depth[N], maxd[N], idx[N];
vector <int> adj[N];
vector <int> nodes[N];
int dp[N][20];

int lca(int u, int v) {

    if (depth[u] != depth[v]) {
        if (depth[u] < depth[v]) swap(u,v);
        int cnt = 19;
        while (cnt>=0) {
            if (depth[dp[u][cnt]] > depth[v]) u = dp[u][cnt];
            cnt--;
        }
        u = dp[u][0];
    }


    if (u==v) return u;

    int cnt = 19;
    while (cnt>=0) {
        if (dp[u][cnt] != dp[v][cnt]) {
            u = dp[u][cnt];
            v = dp[v][cnt];
        }
        cnt--;
    }

    return dp[u][0];
}

int dfs(int x, int p, int lvl) {

    visited[x] = true;
    depth[x] = lvl;
    dp[x][0] = p;
    if (maxd[arr[x]] < lvl) {
        maxd[arr[x]] = lvl;
        idx[arr[x]] = x;
    }

    for (int i=0; i<adj[x].size(); i++) {
        int node = adj[x][i];
        if (!visited[node]) dfs(node, x, lvl+1);
    }
}

main() {

    int n, m;
    cin>>n>>m;

    for (int i=1; i<=n; i++) {
        cin>>arr[i];
        nodes[arr[i]].push_back(i);
    }

    for (int i=1; i<n; i++) {
        int u, v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    dfs(1, 0, 1);
    for (int j=1; j<20; j++) {
        for (int i=1; i<=n; i++) dp[i][j] = dp[dp[i][j-1]][j-1];
    }

    for (int i=1; i<=m; i++) {
        int ans = 0;
        for (int j=0; j<nodes[i].size(); j++) {
            int u = idx[i], v = nodes[i][j];
            int lca0 = lca(u,v);
            int dist = (depth[u] - depth[lca0]) + (depth[v] - depth[lca0]);
            ans = max(ans, dist);
        }
        cout<<ans<<" ";
    }
}

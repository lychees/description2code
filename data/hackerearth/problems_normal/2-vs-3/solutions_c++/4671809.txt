#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define max 300000

string s;

int tree[max];

ll fp[100005];

void fastpow()
{
    fp[0]=1;
    for(int i=1;i<=100000;++i)
        fp[i]=(fp[i-1]*2)%3;
}

//Build the segment tree
void build(int node, int start, int end)
{
	if(start==end)
	{
		//tree[node].s=s[start];
		tree[node] = (int)s[start]-48;
	}
	else
	{
		ll mid = (start+end)/2;
		build(2*node+1,start,mid);
		build(2*node+2,mid+1,end);
		//tree[node].s = tree[2*node+1].s+tree[2*node+2].s;
		tree[node] = (tree[2*node+1]*fp[end-mid] + tree[2*node+2])%3;
	}
}
int rangequery(int node,int ss, int se, int rs, int re)
{
	if(ss>se || ss>re || se<rs)
		return 0;
	
	if(ss>=rs && se<=re)
	{
		return (tree[node]*fp[re-se])%3;
	}

	ll mid = (ss+se)/2;
	ll s1 = rangequery(2*node+1,ss,mid,rs,re);
	ll s2 = rangequery(2*node+2,mid+1,se,rs,re);
	return (s1+s2)%3;
}
void singleupdate(int node, int i, int ss, int se)
{
	if(i<ss || i>se)
		return ;
	if(ss==se)
	{
		tree[node]=1;
		s[i]='1';
	}
	else
	{
		int mid = (ss+se)/2;
		if(ss<=i && i<=mid)
			singleupdate(2*node+1,i,ss,mid);
		else
			singleupdate(2*node+2,i,mid+1,se);
	tree[node] = ((tree[2*node+1]*fp[se-mid]%3) + tree[2*node+2]%3)%3;

	}
}
int main(int argc, char const *argv[])
{
	int n;   
	fastpow();

	cin>>n;
	cin>>s;
	build(0,0,n-1);
	int query;
	cin>>query;
	int type,l,r;
	while(query--)
	{
		cin>>type;
		if(type==0)
		{
			cin>>l>>r;

			int bin = rangequery(0,0,n-1,l,r);
			cout<<bin<<"\n";
		}
		else
		{
			cin>>l;
			if(s[l]=='0') 
				s[l]='1';
			singleupdate(0,l,0,n-1);

		}
	}
	return 0 ;
}
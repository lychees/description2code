#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz size
#define set0(a) memset(a, 0, sizeof(a))
#define setdp(a) memset(a, -1, sizeof(a))
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion
#define MOD 1000000007

struct sort_pred {
	bool operator()(const std::pair<int,int> &left, const std::pair<int,int> &right) {
    	return left.first < right.first;
	}
};
bool prime[1005];
void SieveOfEratosthenes(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    
    memset(prime, true, sizeof(prime));
 
    for (int p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (int i=p*2; i<=n; i += p)
                prime[i] = false;
        }
    }
 	/*for (int p=2; p<=n; p++)
       if (prime[p])
          cout << p << " ";
    // Print all prime numbers
    */
}

int main(){
	int n;
	cin >> n;
	vector <pair <int,string> > v;
	int max = -1;
	int index = -1;
	while(n--){
		string s;
		int num;
		cin >> s;
		cin >> num;
		int flag = 0;
		int i = 0;
		for( i = 0; i < v.size();i++){
			if(v[i].se == s){
				flag = 1;
				break;
			}
		}
		if(flag == 1){
			v[i].fi += num;
		}else{
			v.pb(mp(num,s));
		}
		// max = -1;
	 	//index = -1;
	for(int i = 0 ; i < v.size();i++){
		if(max < v[i].fi){
			max = v[i].first;
			index = i;
		}
	}
		
	}
	
	cout << v[index].second;
	//sort(v.begin(),v.end());
		//for(int i = 0 ; i < v.size();i++ ){
	//		cout << v[v.size() - 1].se;// << " " << v[i].se << endl;
		//}
	return 0;
}



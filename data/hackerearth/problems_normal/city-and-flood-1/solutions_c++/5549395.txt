#include<bits/stdc++.h>
using namespace std;
long long int k;
int root(long long int Arr[],long long int i);
bool find(long long int Arr[],long long int A,long long int B);
void weightedunio(long long int Arr[ ],long long int size[ ],long long int A,long long int B);
void weightedunio(long long int Arr[ ],long long int size[ ],long long int A,long long int B)
{
    int root_A = root(Arr,A);
    int root_B = root(Arr,B);
    if(!find(Arr,A,B))
   {
    if(size[root_A] < size[root_B ])
    {
Arr[ root_A ] = Arr[root_B];
size[root_B] += size[root_A];
}
    else
    {
Arr[ root_B ] = Arr[root_A];
size[root_A] += size[root_B];
}
}
k--;
}
bool find(long long int Arr[],long long int A,long long int B)
{
    if( root(Arr,A)==root(Arr,B) )       //if A and B have same root,means they are connected.
    return true;
    else
    return false;
}
int root(long long int Arr[ ],long long int i)
{
    while(Arr[ i ] != i)           //chase parent of current element until it reaches root.
    {
     i = Arr[ i ];
    }
    return i;
}
int main()
{
    long long int n,m,Arr[100001],Size[100001],x,y;
    cin>>n>>m;
    k=n;
    for(long long int i=1;i<=n;++i)
    {
        Arr[i]=i;
        Size[i]=1;
    }
    while(m--)
    {
        cin>>x>>y;

        weightedunio(Arr,Size,x,y);
    }

    cout<<k;


    return 0;
}





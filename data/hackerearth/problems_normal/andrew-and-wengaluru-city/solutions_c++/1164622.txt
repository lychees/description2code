// druvaq1.cpp : Defines the entry point for the console application.
//


#include <iostream>
#define SIZE 100000+1
#define MOD 1000000007
using namespace std;

int T;
long long int N;
long long int height[SIZE];


long long int solve_reverse(int endIndex) {
	long long int targetH1 = height[N-1];
	long long int targetH2 = 0;
	int saveIndex2 = 0;
	int saveIndex1 = N-1;
	long long int waterLevel = 0;
	long long int temp = 0;
	int flag = 0;
	for (int i = N-2; i >= endIndex; i--) {
		if (height[i] >= targetH1) {
			targetH2 = height[i];
			saveIndex2 = i;
			for (int j = saveIndex1 - 1; j > saveIndex2; j--) {
				waterLevel = waterLevel % MOD;
				temp = (targetH1 - height[j]) % MOD;
				waterLevel = (waterLevel + temp) % MOD;
				//cout << "2: indx1:" << saveIndex1 << " indx2:" << saveIndex2 << " water:"<<waterLevel << " tgtH1:" << targetH1 << " hight[j]:" << height[j] << endl; 
			}

			saveIndex1 = saveIndex2;
			//saveIndex2 = 0;
			targetH1 = height[i];
		}
	}
	return waterLevel;
}


long long int solve() {
	long long int targetH1 = height[0];
	long long int targetH2 = 0;
	int saveIndex1 = 0;
	int saveIndex2 = 0;
	long long int maxLevel = 0;
	long long int waterLevel = 0;
	long long int temp = 0;
	int flag = 0;
	for (int i = 1; i < N; i++) {
		if (height[i] >= targetH1) {
			targetH2 = height[i];
			saveIndex2 = i;
			for (int j = saveIndex1 + 1; j < saveIndex2; j++) {
				waterLevel = waterLevel % MOD;
				temp = (targetH1 - height[j]) % MOD;
				waterLevel = (waterLevel + temp) % MOD;	
				//cout << "1: indx1:" << saveIndex1 << " indx2:" << saveIndex2 << " water:"<<waterLevel << " tgtH1:" << targetH1 << " hight[j]:" << height[j] << endl; 
			}
			
			saveIndex1 = saveIndex2;
			//saveIndex2 = 0;
			targetH1 = height[i];
		}
	}
	waterLevel = (waterLevel + solve_reverse(saveIndex2) ) % MOD;	
	return waterLevel;
}


int main()
{
	int t = 0;
	cin >> T;
	while (t < T) {

		cin >> N;
		for (int i = 0; i < N; i++) {
			cin >> height[i];
		}
		long long int ans = solve();
		//long long int ans2 = solve_reverse();
		//cout << ans << ans2 << endl;
		//if(ans > ans2) {
		//	cout << ans << endl;
		//} else {
		//	cout << ans2 << endl;
		//}
		cout << ans << endl;
		t++;
	}
	return 0;
}

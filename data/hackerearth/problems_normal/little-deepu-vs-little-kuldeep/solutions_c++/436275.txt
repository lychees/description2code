#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<string>
#include<map>
#include<set>
#include<stack>
#include<list>
#include<vector>
#include<queue>
#include<deque>
#include<ctype.h>

using namespace std;

#define MOD 1000000007
#define PI acos(-1)
#define MP make_pair
#define PB push_back
#define VI vector<int>
#define PII pair<int,int>
#define LL long long
#define SI(x) scanf("%d",&x)
#define PRI(x) printf("%d\n",x)
#define PRLL(x) printf("%lld\n",x)
#define SLL(x) scanf("%lld",&x)
#define MEM(v,i) memset(v,i,sizeof(v))
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for (int i=(a);i<=(b);i++)
#define DEBUG(x) cout<<#x<<"="<<x<<endl
#define getcx getchar_unlocked
long long fact[2000005], invfact[2000005];

long long powmod(long long base, long long expo) {
	if(expo == 0)
		return 1;
	else if(expo & 1)
		return base * powmod(base, expo - 1) % MOD;
	else{
		long long root = powmod(base, expo >> 1);
		return root * root % MOD;
	}
}

long long inverse(long long x){
	return powmod(x, MOD - 2);
}

void init() {
	fact[0] = 1;
	for(int i = 1; i <= 2000005; i++)
		fact[i] = i * fact[i - 1] % MOD;
	invfact[2000005] = inverse(fact[2000005]);
	for(int i =2000005; i > 0; i--)
		invfact[i - 1] = i * invfact[i] % MOD;
}

long long nCr(long long n, long long r){
	if(r > n || r < 0)
		return 0;
	return (fact[n] * invfact[r] % MOD) * invfact[n-r] % MOD;
}
int main(){
  int T;
  LL N;
  init();
  cin>>T;
  while(T--){
     cin>>N;
     LL ans1=nCr(2*N,N);
     LL ans2=powmod(N+1,MOD-2);
     ans1=(ans1*ans2)%MOD;
     cout<<ans1<<endl;
  } 
return 0;
} 

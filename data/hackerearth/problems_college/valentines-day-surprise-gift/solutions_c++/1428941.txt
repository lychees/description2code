#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cctype>
#include <cstdio>
#include <vector>
#include <cassert>
#include <complex>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;
#define int long long

const int mod = 1000000007, N = 1e5 + 23;
int st[N];

int power(int a, int b)
{
	if (b == 0) return 1;
	int ret = power(a, b / 2);
	ret = ret * ret % mod;
	if (b % 2 == 1) ret = ret * a % mod;
	return ret;
}

int r(int n)
{
	if (n < N and ~st[n]) return st[n];
	int ans = power(2, (n + 3) / 4) * r((n + 4) / 5) % mod * r((n + 9) / 10) % mod;
	if (n < N) st[n] = ans;
	return ans;
}

int gcd(int a, int b)
{
	if (b == 0) return a;
	return gcd(b, a % b);
}

int solve(int n)
{
	int ret = -1;
	for (int i = 0; i <= 5; i++)
		for (int j = 0; j <= 5; j++)
			if (gcd(i, j) == 1)
				ret = max(ret, power(i * n, j * n));
	return ret;
}

void pre()
{
	st[0] = st[1] = st[2] = 1;
	st[3] = st[4] = 3;
	st[5] = st[6] = 3 * 5;
	st[7] = st[8] = st[9] = st[10] = 3 * 5 * 7;
}

#undef int
int main()
{
#define int long long
//	freopen("in", "r", stdin);
	memset(st, -1, sizeof(st));
	pre();
	int t; cin >> t;
	while (t--)
	{
		int n; cin >> n;
		cout << solve(r(n)) << "\n";
	}
	return 0;
}
#include <bits/stdc++.h>
#define gc getchar//_unlocked
#define pc putchar//_unlocked

using namespace std;

typedef long long int64;

inline void read(int &a) {
	register char c = 0;

	while (c < 33) {
		c = gc();
	}

	a = 0;
	while (c > 33) {
		a = a * 10 + c - '0';
		c = gc();
	}
}

inline void read(int64 &a) {
	register char c = 0;

	while (c < 33) {
		c = gc();
	}

	a = 0;
	while (c > 33) {
		a = a * 10 + c - '0';
		c = gc();
	}
}


inline void read(char *str, int &size) {
	register char c = 0;
	register int i = 0;

	while (c < 33) {
		c = gc();
	}
	while (c > 42) {
		str[i] = c;
		c = gc();
		i++;
	}

	size = i;
	str[i] = '\0';
}

int64 MOD = 1000000007;

inline int64 power(int64 x, int n)  {
	if (n == 0) {
		return 1;
	}
	
	long long p = power(x, n / 2);
	if (n & 1) {
		return p * p * x;
	} else {
		return (p * p) % MOD;
	}
}


int64 a[2000000];
int main() {
	int n;
	cin >> n;
	

	int64 as = LLONG_MIN;
	//as = 0;
	for (int i = 0; i < n; i++) {
		cin >> a[i];

		as = max(as, a[i]);
	}
	
	sort(a, a + n);

	vector<int64> list1;
	vector<int64> list2;
	vector<int64> list3;
	int zr = 0;
	for (int i = n - 1; i >= 0; i--) {
		if (a[i] > 0LL) {
			list1.push_back(a[i]);
		} else if (a[i] < 0LL) {
			list2.push_back(a[i]);
			list3.push_back(a[i]);
		} else {
			zr++;
		}
	}
	
	reverse(list2.begin(), list2.end());

	if (list1.size() >= 2) {
		as = max(as, list1[0] * list1[1]);
	}
	if (list2.size() >= 2) {
		as = max(as, list2[0] * list2[1]);
	}
	if (list1.size() >= 1 && list2.size() >= 1) {
		as = max(as, list1[0] * list3[0]);
	}
	if (zr > 0) {
		as = max(as, 0ll);
	}

	cout << as << endl;
}
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <memory.h>
#include <sstream>
#include <memory.h>
#include <cmath>

using namespace std;

int mPow(int a, int x, int mod) {
  int ret = 1;
  while (x > 0) {
    if (x & 1) ret = 1LL * ret * a % mod;
    a = 1LL * a * a % mod;
    x >>= 1;
  }
  return ret;
}

map<int, int> f;

int phi (int n) {
  if (f.count(n)) return f[n];
  int result = n, N = n;
  for (int i=2; i*i<=n; ++i)
    if (n % i == 0) {
      while (n % i == 0)
        n /= i;
      result -= result / i;
    }
  if (n > 1)
    result -= result / n;
  return f[N] = result;
}



int main() {
  int T;
  scanf("%d", &T);
  while (T--) {
    int a1, p, n;
    scanf("%d%d%d", &a1, &p, &n);
    int a2 = mPow(a1, phi(p) - 1, p);
    if (1LL * a1 * a2 % p != 1) {
      printf("-1\n");
    } else {
      printf("%lld\n", 1LL * a1 * ((n + 1) / 2) + 1LL * a2 * (n / 2));
    }
  }
  return 0;
}

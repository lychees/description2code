#include<iostream>
#include<bits/stdc++.h>
using namespace std;
#define MOD 1000000007
#define ft first
#define sd second
#define VI vector<int>
#define VLL vector<long long int>
#define PII pair<int,int>
#define pb push_back
// input and output
#define scan(x) scanf("%d",&x)
#define scanll(x) scanf("%lld",&x)
#define ll long long int
#define rep(i,x,y) for(i=x;i<y;i++)
#define print(x) printf("%d\n",x)
#define printll(x) printf("%lld\n",x)
#define all(v) v.begin(),v.end()
class BIT{
	
	private:
	 int n;
	 VI bit;
	 
	 public:
	 	BIT(int n)
	 	{
	 	   this->n=n;
			bit.resize(n+1);	
	 	}
	 void increase(int idx,int val)
	 {
	 	
	 	
	 	while(idx<=n)
	 	{
	 		
	 		bit[idx]+=val;
	 		idx+=(idx&(-idx));
	 	}
	 }
		
	 int query(int idx)
	 {
	 	
	 	int sum=0;
	 	
	 	while(idx>0)
		 {
	     sum+=bit[idx];
         idx-=(idx&(-idx));         
		 }
		 return sum;
     }	
};
int N;
bool compare(const pair<PII, int>&a,const pair<PII, int>&b)
{
	
	if(a.ft.ft/N!=b.ft.ft/N)
	  return a.ft.ft<b.ft.ft;
	  
	return a.ft.sd<b.ft.sd;  
}
int main(){
 int n,q;
 cin>>n>>q;
 N=sqrt(n);
 VI arr(n);
 set<int> S;
 for(int i=0;i<n;i++)
 {
 	cin>>arr[i];
 	S.insert(arr[i]);
 }
 map<int,int>M;
 int c=0;
 for(auto i:S)
 {  c++;
 	M[i]=c;
 }
 for(int i=0;i<n;i++)
 {
 	arr[i]=M[arr[i]];
 }

 vector<pair<PII ,int > > Q(q);
 for(int i=0;i<q;i++)
 {
 	cin>>Q[i].ft.ft>>Q[i].ft.sd;
 	Q[i].sd=i;
 }
 
 sort(all(Q),compare);
 BIT bit(n);
 int l=0,r=0;
 bit.increase(arr[0],1);
 ll count=0;
 ll ans[q];
 for(int i=0;i<q;i++)
 {
 	
 	while(r<(Q[i].ft.sd-1))
 	{
 		r++;
 		bit.increase(arr[r],1);
 	    count+=bit.query(n)-bit.query(arr[r]);	
 	}
 	
 	while(r>(Q[i].ft.sd-1))
 	{   bit.increase(arr[r],-1);
 		count-=bit.query(n)-bit.query(arr[r]);
 		 
		 r--;
 	}
 	
 	while(l>(Q[i].ft.ft-1))
 	{
 		l--;
 		bit.increase(arr[l],1);
 	    count+=bit.query(arr[l]-1);
 	}
    
    while(l<(Q[i].ft.ft-1))
 	{     bit.increase(arr[l],-1);
 		  count-=bit.query(arr[l]-1);
		 l++;
 	}
 	
    ans[Q[i].sd]=count;
 }
 
 
 for(int i=0;i<q;i++)
 {
 	cout<<ans[i]<<endl;
 }
 return 0;
}
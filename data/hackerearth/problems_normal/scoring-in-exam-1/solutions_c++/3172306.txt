#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool mycomp(const pair<long long int, long long int> &a, const pair<long long int, long long int> &b)
{
	if(a.first < b.first)
	{
		return true;
	}
	if(a.first > b.first)
	{
		return false;
	}
	if(a.first == b.first)
	{
		if(a.second < b.second)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
}

int main()
{
	int N, Q;
	vector<pair<long long int, long long int> > vec;
	vector<long long int> times;
	vector<long long int> scores;
	vector<long long int> precompute;
	int i;
	long long int temp;
	int index;
	
    cin>>N>>Q;
    for(i=0; i<N; i++)
    {
    	cin>>temp;
    	times.push_back(temp);
    }
    for(i=0; i<N; i++)
    {
    	cin>>temp;
    	scores.push_back(temp);
    }
    
    for(i=0; i<N; i++)
    {
    	vec.push_back(make_pair(scores[i], times[i]));
    	precompute.push_back(0);
    }
    
    sort(vec.begin(), vec.end());
    
    precompute[N-1] = vec[N-1].second;
    for(i=N-2; i>=0; i--)
    {
    	precompute[i] = precompute[i+1]+vec[i].second; 
    }
    
    for(i=0; i<Q; i++)
    {
    	cin>>index;
    	cout<<precompute[N-index]<<endl;
    }
    return 0;
}

#include <iostream>

using namespace std;

struct node
{
	int val;
	node *next;
};

node *head;
size_t size;

void fill ( int N )
{
	size = N;
	head = new node;
	node *temp = head;

	for ( int i = 1; true; )
	{
		temp->val = i++;

		if ( i <= N )
			temp->next = new node;
		else
		{
			temp->next = head;
			break;
		}

		temp = temp->next;
	}
}

void remove ( size_t K )
{
	node *t = head;

	while ( K-- )
		t = t->next;

	node *temp = t->next;
	t->next = t->next->next;
	head = t->next;
	delete temp;
}

void clear()
{
	node *t = head->next;
	delete head;

	while ( t != head )
	{
		node *temp = t;
		t = t->next;
		delete temp;
	}
}

size_t rem_k_node ( size_t K )
{
	while ( size > 1 )
	{
		size_t k = K % size;
		remove ( k - 1 < k ? k - 1 : size - 1 );
		size--;
	}

	return head->val;
}

void print()
{
	node *t = head->next;
	cout << head->val << endl;

	while ( t != head )
	{
		cout << t->val << endl;
		t = t->next;
	}
}

int main()
{
	int T, N = 3;
	size_t K;
	cin >> T;

	while ( T-- )
	{
		cin >> N >> K;
		fill ( N );
		cout << rem_k_node ( K ) << '\n';
		clear();
	}

	return 0;
}

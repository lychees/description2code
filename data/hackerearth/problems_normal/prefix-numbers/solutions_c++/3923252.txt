#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <iostream>
#include <map>
#include <set>
#include <algorithm>
#include <queue>
#include <sstream>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
#define SZ(x) (int)(x.size())
#define F0(i,n) for(int i=0;i<n;i++)
#define F1(i,n) for(int i=1;i<=n;i++)
#define F2(i,a,b) for(int i=a;i<=b;i++)
#define F3(i,a,b) for(int i=a;i>=b;i--)
#define pb push_back

const int m = 4*7*9;
uint A[m][m]={0}, C[m][m]={0}, D[m][m]={0};
uint B[m] = {0};

void matrix_multiply(int t) {
	if(t == 1) {
		F0(i,m) F0(j,m) {
			uint sum = 0;
			F0(k,m) {
				sum += C[i][k] * C[k][j];
			}
			D[i][j] = sum;
		}
		F0(i,m) F0(j,m) {
			C[i][j] = D[i][j];
		}
	} else if(t == 2){
		F0(i,m) F0(j,m) {
			uint sum = 0;
			F0(k,m) {
				sum += C[i][k] * A[k][j];
			}
			D[i][j] = sum;
		}
		F0(i,m) F0(j,m) {
			C[i][j] = D[i][j];
		}
	} else {
		uint sum = 0;
		F0(i,m) {
			F0(j,m) {
				sum += C[i][j] * B[j];
			}
		}
		cout << sum;
	}
} 

void matrix_power(ll n) {
	if(n>0) {
		matrix_power(n/2);
		matrix_multiply(1);
		if(n%2==1) {
			matrix_multiply(2);
		}
	}
}

int main() {
	F0(i,m) {
		C[i][i] = 1;
		F1(j,9) {
			if((i*10+j)%j == 0) {
				A[(i*10+j)%m][i] = 1;
			}
		}
	}
	B[0] = 1;

	ll n;
	cin >> n;

	matrix_power(n);
	matrix_multiply(3);

	return 0;
}
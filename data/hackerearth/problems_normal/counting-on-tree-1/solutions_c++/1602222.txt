#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)

template<class T> inline void amin(T &a, const T &b) { if (a>b) a=b; }
template<class T> inline void amax(T &a, const T &b) { if (a<b) a=b; }

const LL MOD = 1e9+7;
typedef vector<VI> Adj;
int T, N, K, A[50011];
Adj G;

LL dp[50011][101], buf[101];

void dfs(int v, int p) {
    dp[v][A[v]] = 1;
    EACH (e, G[v]) {
        if (*e == p) continue;
        dfs(*e, v);
        memset(buf, 0, sizeof buf);
        REP (i, K+1) REP (j, K-i+1) buf[i+j] = (buf[i+j] + dp[v][i]*dp[*e][j]) % MOD;
        REP (i, K+1) dp[v][i] = (dp[v][i] + buf[i]) % MOD;
    }
}

int main() {
    scanf("%d", &T);
    REP ($, T) {
        scanf("%d%d", &N, &K);
        G = Adj(N);
        memset(dp, 0, sizeof dp);
        REP (i, N) scanf("%d", A+i);
        REP (i, N-1) {
            int x, y;
            scanf("%d%d", &x, &y);
            x--; y--;
            G[x].push_back(y);
            G[y].push_back(x);
        }

        LL ans = 0;
        dfs(0, -1);
        REP (i, N) ans = (ans + dp[i][K]) % MOD;
        printf("%d\n", (int)ans);
    }
    return 0;
}

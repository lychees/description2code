#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define SET(a,b) memset(a,b,sizeof(a))
#define TR(a,t) for(typeof(a.begin()) t=a.begin();t!=a.end();t++)
#define REP(i,l,h) for(int i=(l); i<=(h);i++)
#define REPD(i,h,l) for(int i=(h);i>=(l);i--)
#define ALL(a) a.begin(),a.end()
#define DRT()  int t; cin>>t; while(t--)
#define PRSNT(a,e) (a.find(e) != a.end())
#define MINH priority_queue<int, vector<int>, greater<int> >
#define N 100001
typedef long long LL;
using namespace std;
multiset< pair<LL, int> > s;
map<int, pair<int,int> > z;
int main()
{
        int c,P,n,y[N],p[N],cnt[N];
        cin>>c>>P>>n;
        REP(i,1,n) {
                cin>>y[i];
                z[i]=MP(0,y[i]);
                s.insert(MP(y[i],i));
                cnt[i]=1;
        }
        REP(i,n+1,c) {
                s.insert(MP(0,i));
                z[i]=MP(0,0);
        }
        REP(i,1,P) cin>>p[i];
        REP(i,1,P) {
                pair<LL, int> t=*(s.begin());
                cout<<t.S<<" ";
                s.erase(t);
                cnt[t.S]++;
                z[t.S].F=z[t.S].S;
                z[t.S].S=p[i];
                s.insert(MP((z[t.S].F+z[t.S].S)*LL(cnt[t.S]),t.S));
        }
        cout<<endl;
        return 0;
}

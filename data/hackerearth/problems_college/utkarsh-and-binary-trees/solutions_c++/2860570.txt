/**There are node with value 1 to n, given a depth k find the sum of root of all possible binary tree with depth
less than are equal to k
**/

#include <iostream>
#include<cstring>
using namespace std;

#define LocalTest 0
#define ll long long
#define MEMSET(a,v)  memset(a,v,sizeof(a))

#define MAX 510


ll dp[2][MAX][MAX];
const ll MOD = 1e9+7;

ll min(ll x, ll y)
{
    return x<y?x:y;
}

ll mod(ll val)
{
    return (val<MOD?val:(val%MOD));
}

int main()
{
    #if LocalTest
    char file[10];
    cin>>file;
    strcat(file,".txt");
    freopen(file,"r",stdin);
    #endif // LocalTest
    MEMSET(dp,0);
    ll n,h;
    ll i,j,k,l,m,x;
    #if LocalTest
    n = MAX-1;
    #else
    cin>>n>>h;
    #endif // LocalTest
    dp[1][1][1] = dp[1][0][0] = dp[0][1][1] = 1;
    dp[1][2][2]  = dp[0][2][2] = 2;
    ll H,L;
    H = 2;
    L = 4;
    for( i=3;i<n;i++)
    {
        for(j = i-1, k = i-1;dp[0][j][k] >0 ; k--)
            dp[0][i][k+1] = mod(2*dp[0][j][k]);
        x = 2;
        for( j = 1, k = i-2;j<=k;j++,k--)
        {
            if(k == j)
                x = 1;
            for(l = k;dp[0][k][l]>0;l--)
            {
                dp[0][i][l+1] = mod(dp[0][i][l+1] +mod(x*mod(dp[0][k][l]*dp[1][j][min(l,j)])));
                if(l<=j)
                    dp[0][i][l+1] = mod(dp[0][i][l+1]+mod(x*mod(dp[1][k][l-1]*dp[0][j][l])));
            }
        }
        if(L<=i)
        {
            L <<=1;
            H++;
        }
        dp[1][i][H] = dp[0][i][H];
        for(j = H+1;j<=i;j++)
            dp[1][i][j] = mod(dp[1][i][j-1]+dp[0][i][j]);
    }
    #if LocalTest
    int tc;
    cin>>tc;
    while(tc--)
    {
        cin>>n>>h;

    #endif // LocalTest
    ll ans = 0;
    for(i = 1,j = n; i<=j;i++,j--)
    {
        if(i==j)
            x = i;
        else
            x = i+j;
        l = i-1;
        m = n-i;
        ans = mod( ans+mod(x*mod( dp[1][l][min(l,h-1)]*dp[1][m][min(m,h-1)] ) ) );
    }
    cout<<ans<<endl;
    #if LocalTest
    }
    #endif // LocalTest
    return 0;
}

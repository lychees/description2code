#include <iostream>
using namespace std;
long long int maximize(int i, int N,long long int coins[])
{
	if(i >= N)
		return 0;
	long long int t1=0,t2=0,t3=0,m2=maximize(i+2,N,coins),m3=maximize(i+3,N,coins),m4=maximize(i+4,N,coins),m5=maximize(i+5,N,coins),m6=maximize(i+6,N,coins);
	if(i+3 <= N)
		t1 = (coins[i]+coins[i+1]+coins[i+2]+min(m4,min(m5,m6)));
	if(i+2<=N)
		t2 = (coins[i]+coins[i+1]+min(m3,min(m4,m5)));
	if(i+1 <=N)
		t3 = (coins[i]+min(m2,min(m3,m4)));
	return max(t1,max(t2,t3));
}
int main()
{
    int T=0;
    cin >> T;
    for (int i = 0; i < T; ++i)
    {
    	int N;
    	cin >> N;
    	long long int coins[N];
    	long long int Mem[N+7];
    	Mem[N] = 0;
    	Mem[N+1]=0;
    	Mem[N+2]=0;
    	Mem[N+3]=0;
    	Mem[N+4]=0;
    	Mem[N+5]=0;
    	Mem[N+6]=0;
    	for (int n = 0; n < N; ++n)
    	{
    		cin >> coins[n];
    	}
    	for(int n = N - 1; n >=0; n--)
    	{
			long long int t1=0,t2=0,t3=0;
			if(n+3 <= N)
				t1 = (coins[n]+coins[n+1]+coins[n+2]+min(Mem[n+4],min(Mem[n+5],Mem[n+6])));
			if(n+2<=N)
				t2 = (coins[n]+coins[n+1]+min(Mem[n+3],min(Mem[n+4],Mem[n+5])));
			if(n+1 <=N)
				t3 = (coins[n]+min(Mem[n+2],min(Mem[n+3],Mem[n+4]))); 
			Mem[n] = max(t1,max(t2,t3));;		
    	}
    	cout << Mem[0]<< endl;
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 105;
int odd[N], even[N]; 

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest, l, r, ans;
    string s;
    cin >> ntest;
    while (ntest--) {
    	cin >> s;
    	mem(odd, 0); mem(even, 0);
    	int n = s.size();
    	ans = 0;
    	l = r = -1;
	for (int i = 0; i < n; i++) {
		int cur = 1;
		if (i < r)
			cur = min(r - i + 1, odd[l + r - i]);
		while (i + cur < n && i - cur >= 0 && s[i - cur] == s[i + cur])
			cur++;
		odd[i] = cur;
		if (i + cur - 1 > r) {
			l = i - cur + 1; 
			r = i + cur - 1;
		}
	}

	// Even case 
	l = r = -1;
	for (int i = 0; i < n; i++) {
		int cur = 0;
		if (i < r) 
			cur = min(r - i + 1, even[l + r - i + 1]);
		while (i + cur < n && i - 1 - cur >= 0 && s[i - 1 - cur] == s[i + cur])
			cur++;
		even[i] = cur;
		if (i + cur - 1 > r) {
			l = i - cur;
			r = i + cur - 1;
		}
	}

	for (int i = 0; i < n; i++) {
		if (odd[i] > 1) {
			amax(ans, 2 * odd[i] - 1);
		}
		if (even[i])    
			amax(ans, 2 * even[i]);
	}
    	printf("%d\n", ans);
    }
    return 0;
}

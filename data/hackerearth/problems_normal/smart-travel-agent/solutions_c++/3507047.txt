#include <bits/stdc++.h>
using namespace std;

struct node
{
    int ne;
    int pr;
    int c;

};

class compare
{
public:
    bool operator()(const node &a, const node &b) {

        if (a.c == b.c) {
            if (a.ne == b.ne)
                return a.pr > b.pr;

            return a.ne > a.ne;
        }

        return a.c < b.c;

    }
};

int cst[110][110];
int visited[110];
int pth[110];
int n,d;
priority_queue <node, vector <node> , compare> pq;


int dfs(int s)
{
    int ans = 0;
    node p,temp;

    p.ne = s;
    p.pr = -1;
    p.c = INT_MAX;

    pq.push(p);

    while (!pq.empty()) {

    p = pq.top();
    pq.pop();

    visited[p.ne] = 1;

    if (p.pr != -1)
        pth[p.pr] = p.ne;

    if (p.ne == d) {
        return p.c;
    }
    int i,x;

    for (i = 1; i <= n; i++) {
        if (cst[p.ne][i] && !visited[i]) {
            x = min(p.c, cst[p.ne][i]);
            temp.ne = i;
            temp.pr = p.ne;
            temp.c = x;
            pq.push(temp);
        }
    }

    }

    return ans;
}

int main()
{
    int r,i,x,y,c,s,tor,ans;
    cin >> n >> r;

    for (i = 1; i <= r; i++) {
        cin >> x >> y >> c;
        cst[x][y] = max(cst[x][y],c);
    }

    cin >> s >> d >> tor;

    ans = dfs(s);

    assert(ans > 1);
    //cout <<ans<<endl;

    cout <<s;

    while (s != d) {
        s = pth[s];
        cout<<" "<<s;
    }
    cout <<endl;
    ans--;
    ans = ceil(tor/(double) ans);
    cout <<ans<<endl;
    return 0;
}

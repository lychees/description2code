#include <iostream>
#include <math.h>
#define ll long long
using namespace std;

int p[169]={2,   3,   5,   7,  11,  13,  17,  19,  23,  29,  31,  37,  41,
  43,  47,  53,  59,  61,  67,  71,  73,  79,  83,  89,  97, 101,
 
 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,
 
 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,
 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,
 
 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,
 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,
 
 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,
 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,
 
 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,
 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
 
 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};
 
 ll F[1000005];
 
 void calc()
 {
 	F[2]=1;
 	
 	for(int i=3;i<=1000000;i++)
 	{
 		int val=i;
 		for(int j=0;j<168 && p[j]<=i;j++)
 		{
 			if(val%p[j]==0){F[i]=1+F[val/p[j]];break;}
 		}
 		
 		if(F[i]==0)F[i]=1;
 	}
 }
 
 ll tree[6000010];
 
 void build_tree(int node,int a,int b)
 {
 	if(a>b)return;
 	
 	if(a==b){tree[node]=F[a];return;}
 	
 	build_tree(node*2+1,a,(a+b)/2);
 	build_tree(node*2+2,(a+b)/2 +1,b);
 	
 	tree[node]=tree[node*2+1] + tree[node*2+2];
 	
 }
 
 ll query(int node,int a,int b,int i,int j)
 {
 	if(a>b || a>j || b<i)return 0;
 	
 	if(a>=i && b<=j)return tree[node];
 	
 	ll res1=query(node*2+1,a,(a+b)/2,i,j);
 	ll res2=query(node*2+2,(a+b)/2 +1,b,i,j);
 	
 	return res1+res2;
 }

int main() {
int t,a,b;
scanf("%d",&t);
calc();
build_tree(0,1,1000000);
while(t--)
{
	scanf("%d%d",&a,&b);
	printf("%lld\n",query(0,1,1000000,a,b));
}
	return 0;
}
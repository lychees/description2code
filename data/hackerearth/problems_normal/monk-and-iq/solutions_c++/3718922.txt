#include <iostream>
#include <queue>

using namespace std;

class iq {
public:
    int prev_iq;
    int tot_iq;
    int index;
    int no_student;
};

bool operator<(const iq& i1, const iq& i2) {
    if(i1.tot_iq<i2.tot_iq)
        return true;
    else if(i1.tot_iq==i2.tot_iq) {
        if(i1.index<i2.index)
            return true;
        else
            return false;
    } else
        return false;
}

bool operator>(const iq& i1,const iq& i2) {
    if(i1.tot_iq>i2.tot_iq)
        return true;
    else if(i1.tot_iq==i2.tot_iq) {
        if(i1.index>i2.index)
            return true;
        else
            return false;
    } else
        return false;
}

int main() {
    int c, p, n, id=0, fla=1, count=0;
    priority_queue<iq, std::vector<iq>, std::greater<iq> > pq;
    cin >> c >> p >> n;
    for(int i=0;i<n;i++) {
        iq temp;
        temp.prev_iq = 0;
        temp.index = ++id;
        temp.no_student=1;
        cin >> temp.tot_iq;
        pq.push(temp);
    }

    for(int i=0;i<c-n;i++) {
        iq temp;
        temp.prev_iq = 0;
        temp.index = ++id;
        temp.no_student=0;
        temp.tot_iq = 0;
        pq.push(temp);
    }

    for(int i=0;fla&&i<p;i++) {
        int iqv;
        cin >> iqv;
        count++;
        if(cin.eof()) {
        	fla=0;
        }
        iq temp = pq.top();
        pq.pop();
        //cout << "outs iq is = " << temp.tot_iq << endl;
        cout << temp.index << " ";
        if(temp.no_student)
        temp.prev_iq = (temp.tot_iq/temp.no_student-temp.prev_iq);
        temp.tot_iq = (temp.prev_iq + iqv)*(++temp.no_student);
        pq.push(temp);
    }
    
    for(int i=0; i<p-count; i++) {
    	int iqv=0;
        iq temp = pq.top();
        pq.pop();
        //cout << "outs iq is = " << temp.tot_iq << endl;
        cout << temp.index << " ";
        if(temp.no_student)
        temp.prev_iq = (temp.tot_iq/temp.no_student-temp.prev_iq);
        temp.tot_iq = (temp.prev_iq + iqv)*(++temp.no_student);
        pq.push(temp);
    }
    cout << endl;
}
#include <iostream>
#include <cstring>
#include <cstdio>
#include <queue>
#include <vector>
using namespace std;
#define MAX 100010
int TC, n, u, v, w, D[MAX];
bool F[MAX];
vector<pair<int, int> > A[MAX];

int BFS(int s)
{
	memset(D, 0, sizeof(D));
	memset(F, true, sizeof(F));
	int mx = 0, id = 0;
	queue<int> q;
	q.push(s);
	F[s] = false;
	while (q.size()) {
		u = q.front();
		q.pop();
		for (int i = 0; i < A[u].size(); i++) {
			if (F[A[u][i].first]) {
				F[A[u][i].first] = false;
				D[A[u][i].first] += D[u] + A[u][i].second;
				if (D[A[u][i].first] > mx) {
					mx = D[A[u][i].first];
					id = A[u][i].first;
				}
				q.push(A[u][i].first);
			}
		}
	}
	return id;
}

int main()
{
	scanf("%d", &TC);
	while (TC--) {
		scanf("%d", &n);
		for (int i = 1; i <= n; i++)
			A[i].clear();
		for (int i = 1; i < n; i++) {
			scanf("%d %d %d", &u, &v, &w);
			A[u].push_back(make_pair(v, w));
			A[v].push_back(make_pair(u, w));
		}
		int n1 = BFS(1);
		int n2 = BFS(n1);
		int cost = 0;
		if (D[n2] > 10000)
			cost = 10000;
		else if (D[n2] > 1000)
			cost = 1000;
		else if (D[n2] > 100)
			cost = 100;
		printf("%d %d\n", cost, D[n2]);		
	}
    return 0;
}

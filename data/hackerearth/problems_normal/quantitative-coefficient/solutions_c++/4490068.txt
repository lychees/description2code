#include <stdio.h>
#include <utility>
#include <algorithm>
#include <vector>
using namespace std;
typedef pair <int,pair<int,int> > PII;
vector <PII> edges;
long long int mod=1000000007;
int parent[1501];
int root(int i)
{
    while(i!=parent[i])
    {
        parent[i]=parent[parent[i]];
        i=parent[i];
    }
    return i;
}
void unionSet(int a,int b)
{
    a=root(a);
    b=root(b);
    if(a!=b)
    {
        parent[a]=b;
    }
}
long long int kruskal(int m)
{
    long long int cost=1;
    int i;
    pair <int,int> p;
    int w;
    for(i=0;i<m;i++)
    {
        w=edges[i].first;
        p=edges[i].second;
        if(root(p.first)!=root(p.second)) // doesn't form a cycle
        {
         //   printf("cost:%d a:%d,b:%d and ans:%lld\n",w,p.first,p.second,cost);
            cost*=w;
            cost%=mod;
            unionSet(p.first,p.second);
        }
    }
    return cost;
}
void init(int n)
{
    int i;
    for(i=1;i<=n;i++)
    {
        parent[i]=i;
    }
}
int main()
{
    int t,n,m,i,a,b,c;
    long long int ans;
    scanf("%d",&t);
    while(t--)
    {
        edges.clear();
        scanf("%d %d",&n,&m);
         init(n);
        for(i=0;i<m;i++)
        {
            scanf("%d %d %d",&a,&b,&c);
            edges.push_back(make_pair(c,make_pair(a,b)));
        }
        sort(edges.begin(),edges.end());
        ans=kruskal(m)%mod;
        printf("%lld\n",ans);
    }
    return 0;
}

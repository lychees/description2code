    #include<bits/stdc++.h>
    #include<stdio.h> 
    #define max 25
    using namespace std;
    typedef long long ll;
    typedef vector<int> vi;
    typedef vector<ll> vl;
    typedef vector<vi> vvi;
    typedef vector<vl> vvl;
    typedef pair<int,int> pii;
    typedef pair<ll,ll> pll;
    typedef vector<pii> vpii;
    typedef vector<pll> vpll;
    typedef vector<vpii> vvpii;
    typedef vector<vpll> vvpll;
    typedef vector<vl> vvl;
    typedef vector<string> vs;
    typedef unsigned long long ull;
    #define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
    #define rloop(i,a,b) for(i=a-1;i>=b;i--)
    #define loop(i,a,b) for(i=a;i<b;i++)
    #define f first
    #define s second
    #define mp make_pair
    #define pb push_back
    #define gc getchar   
    #define rz resize
    #define all(x) x.begin(),x.end()
    #define sz size

    double rd()
    {
        double ret = 0.0;
        char c = gc();
        while( (c<'0' || c>'9') && c!='.') 
            c = gc();
        while(c>='0' && c<='9') 
        {
            ret = 10 * ret + c - 48;
            c = gc();
        }
        if (c=='.')
        {
            c = gc();
            ll ten = 10;
            while(c>='0' && c<='9') 
            {
              ret += (double)(c-48)/(ten*1.0);
              ten *= 10;
              c = gc();
            }   
        }
        return ret;
    }

    int ri()
    {
        char c = gc();
        while((c<'0' || c>'9') && c!='-')
            c = gc();
        int ret = 0, neg = 1;
        if(c == '-')
        {
            neg = -1;
            c = gc();
        }
        while(c>='0' && c<='9')
        {
            ret = 10 * ret + c - 48;
            c = gc();
        }
        return ret * neg;
    }

    ll rl()
    {
        char c = gc();
        while((c<'0' || c>'9') && c!='-')
            c = gc();
        ll ret = 0, neg = 1;
        if(c == '-')
        {
            neg = -1;
            c = gc();
        }
        while(c>='0' && c<='9')
        {
            ret = 10 * ret + c - 48;
            c = gc();
        }
        return ret * neg;       
    }

    string rs()
    {
        char c = gc();
        while(c=='\n' || c==' ')
            c=gc();
        string ret="";
        while(c!=10 && c!=' ')
        {
            ret+=c;
            c=gc();
        }
        return ret;
    }

    char rc()
    {
        char c = gc();
        while(c=='\n' || c==' ')
            c=gc();
        return c;
    }

 //////////////////////////////////////////////////Majority//////////////////////////////////////////// 
  
  void computeLPSArray(string pat, int M, int lps[])
        {
            int len = 0;  // length of the previous longest prefix suffix
            int i;
         
            lps[0] = 0; // lps[0] is always 0
            i = 1;
         
            // the loop calculates lps[i] for i = 1 to M-1
            while (i < M)
            {
               if (pat[i] == pat[len])
               {
                 len++;
                 lps[i] = len;
                 i++;
               }
               else // (pat[i] != pat[len])
               {
                 if (len != 0)
                 {
                   // This is tricky. Consider the example 
                   // AAACAAAA and i = 7.
                   len = lps[len-1];
         
                   // Also, note that we do not increment i here
                 }
                 else // if (len == 0)
                 {
                   lps[i] = 0;
                   i++;
                 }
               }
            }
        }

  int fun(int i)
  {
    int k=1;
      for(int j=1;j<=i;j++)
          k=k*j;
        return k;
  }

int main()
{   
 int t;
 t=rl();
 while(t--)
 {
    vi v;
    int count=0;
    int n=ri(),k=ri();
    for(int i=0;i<n;i++)
    {
        int l=ri();
        v.pb(l);
    }

    for(int i=0;i<n;i++)
    {
        if(k>0)
            {
              if(v[i]==0)
               {
                 v[i]=1;
                  k--;
               }
            }
    }
   int i=0;
    while(k)
    {
       if(k>0)
            {
              if(v[i]==1)
               {
                 v[i]=0;
                  k--;
               }
            }
       if(k>0)
            {
              if(v[i]==0)
               {
                 v[i]=1;
                  k--;
               }
            }
            i=(i+1)%n;
    }
    for(int i=0;i<n;i++)
        if(v[i]==1)
            count++;
        cout<<count<<"\n";
 }
}
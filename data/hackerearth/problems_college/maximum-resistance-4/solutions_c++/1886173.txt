#include <iostream>
#include <vector>
#include <algorithm>

#include <cstring>

using namespace std;

int tot;
int len;

int ty[2005];

vector<int> e[2005];

string s;

int build (int& pos) {
	int now;
	int cnt = 0;
	
	if (s[pos] == 'A') {
		now = ++tot;
		
		ty[tot] = 1;
	} else if (s[pos] == 'B') {
		now = ++tot;
		
		ty[tot] = 2;
	}
	
	pos++;
	
	while (pos < len && cnt < 2) {
		if (s[pos] == 'X') {
			pos++;
			
			ty[++tot] = 0;
			
			e[now].push_back(tot);
			
			cnt++;
		} else {
			e[now].push_back(build(pos));
			
			cnt++;
		}
	}
	
	return now;
}

int dfs (int x) {
	if (! ty[x]) {
		return 1;
	}
	
	int tt = 0;
	int rr = 0;
	
	tt = dfs(e[x][0]);
	rr = dfs(e[x][1]);
	
	if (ty[x] == 1) {
		return tt + rr;
	}
	
	return max(tt, rr);
}

int main() {
	int t;
	cin >> t;
	
	while (t--) {
		memset(ty, 0, sizeof(0));
		
		for (int i = 0; i < 2005; i++) {
			e[i].clear();
		}
		
		cin >> s;
		
		len = s.length();
		
		int c = 0;
		
		for (int i = 0; i < len; i++) {
			if (s[i] == 'X') {
				c++;
			}
		}
		
		if (c == 1) {
			int v;
			cin >> v;
			cout << v << "\n";
			
			continue;
		}
		
		vector<int> conductors;
		
		for (int i = 0; i < c; i++) {
			int v;
			cin >> v;
			
			conductors.push_back(v);
		}
		
		sort(conductors.begin(), conductors.end(), [] (int x, int y) {
			return x > y;
		});
		
		tot = 0;
		
		int now = 0;
		
		build(now);
		
		int n = dfs(1);
		
		long ans = 0;
		
		for (int i = 0; i < n; i++) {
			ans += conductors[i];
		}
		
		cout << ans << "\n";
	}
	
	return 0;
}
/* HellGeek */
/* Shiva Bhalla */
/* iit2012077 */
 
#include<stdio.h>
#include<vector>
#include<map>
#include<utility>
#include<algorithm>
#include<set>
#include<string>
#include<string.h>
#include<time.h>
#include<iostream>
#include<queue>
#include<stack>
#include<math.h>

#define LL long long
#define FIT(i,t) for(i=0;i<t;i++)
#define REP(i,a,b) for(i=a;i<=b;i++)
#define fi first
#define se second
#define MAXN 100110
#define mod 1000000007 
#define pii pair<int,int>
#define pll pair<long long , long long>


using namespace std;

LL absrt[1000008];
vector <LL> v[100005];
LL factorial[1000005];
 
long long mul_inv(long long a, long long b)
{
	long long b0 = b, t, q;
	long long x0 = 0, x1 = 1;
	if (b == 1) return 1;
	while (a > 1) {
		q = a / b;
		t = b, b = a % b, a = t;
		t = x0, x0 = x1 - q * x0, x1 = t;
	}
	if (x1 < 0) x1 += b0;
	return x1;
}

int phi(int n)
{
    float result = n;    
  
    for (int p=2; p*p<=n; ++p)
    {
        
        if (n % p == 0)
        { 
            while (n % p == 0)
                n /= p;
            result *= (1 - (1 / (float) p));
        }
    }
 
     
    if (n > 1)
        result *= (1 - (1 / (float) n));
 
    return (int)result;
}

int gcd(int a, int b)
{
    if (a == 0)
        return b;
    return gcd(b%a, a);
}

LL combinatorics(LL i, LL j)
{
    LL d1 = mul_inv(factorial[i - j], mod);
    LL d2 = mul_inv(factorial[j], mod);
    return (((factorial[i] * d1) % mod) * d2) % mod;
}

int main()
{ 
    int i;
    factorial[0] = 1;
    for(i = 1; i < 100005; ++i){
        factorial[i] = (factorial[i - 1] * i) % mod;
    }
    LL  j, n, temp, m;
    LL tt = 0;
    cin >> n;
    for(i = 0;i < n; ++i)
    {cin >> m;for(j = 0;j < m; ++j){
            cin >> temp;
            v[i].push_back(temp);}
        sort(v[i].begin(), v[i].end());
        tt += m;
    }
    LL result = 1;
    for(i = 0;i < n; ++i)
    {
        LL temp = combinatorics(tt, v[i].size());
        j = 0;
        vector <LL> k;
        while(j < v[i].size())
        {
            LL cur = 1;
            LL one = v[i][j];
            ++j;
            while(j < v[i].size() && one == v[i][j]){
                ++j;
                ++cur;
            }
            k.push_back(cur);
        }
        for(j = 0;j < k.size(); ++j)
        {
            temp = (temp * factorial[k[j]]) % mod;
        }
        tt -= v[i].size();
        result = (temp * result) % mod;
    }
    cout << result << "\n";
    return 0;
}

#include<bits/stdc++.h>
using namespace std;

#define sd(mark) scanf("%d",&mark)
#define ss(mark) scanf("%s",&mark)
#define sl(mark) scanf("%lld",&mark)
#define clr(mark) memset(mark,0,sizeof(mark))
#define F first
#define S second
#define MP make_pair
#define PB push_back
#define sz(x) (int((x).size()))
#define PII pair<int,int>
#define PIL pair<int,long long>
#define PLL pair<long long,long long>
#define PIS pair<int,string>
#define MII map<int,int>
#define ll long long
#define FILEIO(name) \
    freopen(name".in", "r", stdin); \
    freopen(name".out", "w", stdout);
#define INF 2000000000 // 2 * 10^9
#define INFLL 1000000000000000000LL  // 10^18
#define M 1000000007

#define N 212345

vector <int> g[N], gr[N];
int n,m,rs[N];
vector<char> used;
vector<int> order, component;

void dfs1 (int v) {
	used[v] = true;
	for (size_t i=0; i<g[v].size(); ++i)
		if (!used[ g[v][i] ])
			dfs1 (g[v][i]);
	order.push_back (v);
}

void dfs2 (int v) {
	used[v] = true;
	component.push_back (v);
	for (size_t i=0; i<gr[v].size(); ++i)
		if (!used[ gr[v][i] ])
			dfs2 (gr[v][i]);
}



void solve()
{
    int i,u,v;
    sd(n);
    sd(m);
    while(m--)
    {
        sd(u);
        sd(v);
        g[u-1].PB(v-1);
        gr[v-1].push_back (u-1);

    }
    used.assign (n, false);
	for ( i=0; i<n; ++i)
		if (!used[i])
			dfs1 (i);

	used.assign (n, false);
	for ( i=0; i<n; ++i) {
		int v = order[n-1-i];
		if (!used[v]) {
			dfs2 (v);
			//cout << " v: " << v << " comp.sz: " << component.size() << " --> " ;
			if(component.size()>1)
            {
                for(int j=0;j<component.size();++j)
                {
               //     cout  << component[j] << " --" ;
                    rs[component[j]] = 1;
                }
            }
            else
                rs[v] = 0;
            component.clear();
            //cout << endl;
		}
	}
	for(i=0;i<n;++i)
        printf("%d ",rs[i]);
}

int main()
{
    int t = 1;
    while(t--)
    {
        solve();
    }
}

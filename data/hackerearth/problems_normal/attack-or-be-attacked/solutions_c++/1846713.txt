#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}


ll N, M, P, Q;


ll mod_pow(ll x, ll y, ll p) {
    ll res = 1, a = x;
    while (y > 0) {
        if (y & 1) {
            res = (res * a) % p;
        }
        a = (a * a) % p;
        y >>= 1;
    }
    return res;
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
	
	cin >> N >> M >> P >> Q;
	
	if (N < M) swap(N, M);
	
	ll ret = 0;
	
	ll tot = M * N % MOD;
	ret = tot * (tot - 1) % MOD;
	
	if (P <= N && Q <= M) {
		ret -= 4 * (N - P) * (M - Q);
		ret %= MOD;
	}
	
	if (Q <= N && P <= M) {
		ret -= 4 * (N - Q) * (M - P);
		ret %= MOD;
	}
	
	
	ll bad = M * (M - 1) % MOD * (M + M - 1) % MOD;
	bad = (bad * mod_pow(3, MOD - 2, MOD)) % MOD;
	bad = (bad - M * (M - 1) + ((N - M + 1) * M % MOD * (M - 1) % MOD)) % MOD;
	
	ret = (ret - 2 * bad) % MOD;
	
	if (ret < 0) ret += MOD;
	
	cout << ret << endl;
	
    return 0;
}

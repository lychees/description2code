#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;
#define pb push_back
#define m_p make_pair
#define F first
#define S second
#define For(i,a,b) for(int i=a;i<b;i++)
#define Fore(i,a,b) for(int i=a;i<=b;i++)
#define rFore(i,a,b) for(int i=a;i>=b;i--)
#define tr(it,a) for(__typeof((a).begin()) it=(a).begin();it!=(a).end();it++)
#define all(a) a.begin(),a.end()
#define mem(a,b) memset(a,b,sizeof(a))
#define clr clear
#define sz(a) int((a).size())
#define ffind(s,x) (s.find(x)!=s.end())
#define bit(i) (1<<(i))
#define set(mask,i) (mask |= (1<<(i)))
#define get(mask,i) (mask & (1<<(i)))
#define popcount __builtin_popcount
#define err(a) cerr<<#a<<" = "<<(a)<<"\n"
#define err2(a,b) cerr<<#a<<" = "<<(a)<<", "<<#b<<" = "<<(b)<<"\n"
#define err3(a,b,c) cerr<<#a<<" = "<<(a)<<", "<<#b<<" = "<<(b)<<", "<<#c<<" = "<<(c)<<"\n"
#define err4(a,b,c,d) cerr<<#a<<" = "<<(a)<<", "<<#b<<" = "<<(b)<<", "<<#c<<" = "<<(c)<<", "<<#d<<" = "<<(d)<<"\n"
#define err5(a,b,c,d,e) cerr<<#a<<" = "<<(a)<<", "<<#b<<" = "<<(b)<<", "<<#c<<" = "<<(c)<<", "<<#d<<" = "<<(d)<<", "<<#e<<" = "<<(e)<<"\n"
typedef long long int lli;
typedef pair<int,int> pii;
typedef pair<int,pii> pi3;
typedef vector<int> vi;
typedef vector<lli> vlli;
typedef vector<pii> vpii;
void sc(int& a){scanf("%d",&a);}void sc(lli& a){scanf("%lld",&a);}void sc(int& a,int& b){sc(a);sc(b);}
void sc(lli& a,lli& b){sc(a);sc(b);}void sc(int& a,int& b,int& c){sc(a,b);sc(c);}void sc(lli& a,lli& b,lli& c){sc(a,b);sc(c);}
void prl(int a){printf("%d\n",a);}void prl(lli a){printf("%lld\n",a);}void prl(){printf("\n");}
void prs(int a){printf("%d ",a);}void prs(lli a){printf("%lld ",a);}
template <class T>
T min(T a, T b, T c) {return min(a, min(b, c));}
template <class T>
T max(T a, T b, T c) {return max(a, max(b, c));}
int mod = 1000000007;
#define inf INT_MAX
lli modpow(lli a, lli b, lli mod){lli res=1;while(b>0){if(b&1)res=(res*a)%mod;a=(a*a)%mod;b=b/2;}return res%mod;}
lli pow(lli a, lli b){lli res=1;while(b>0){if(b&1)res=(res*a);a=(a*a);b=b/2;}return res;}
inline int add(int a, int b, int m = mod) {a += b; if (a >= m)a -= m; return a;}
inline int mul(int a, int b, int m = mod) {return (int)(((lli)a * (lli)b) % m);}
#define N 1000+50
#define M 10*1000+10
#define BLOCK_SIZE 450

//template <typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
int k,n,a[N][N], isprime[M];
vi prime;
int dx[]={-1,-1,1,1}, dy[]={1,-1,1,-1};
lli dp[M];

bool can_be_center(int i, int j)
{
    if(i+1<=n and j+1<=n and i-1>=1 and j-1>=1) return true;
    return false;
}

int func(int x)
{
    if(dp[x]!=-1) return dp[x];
    int temp=x, ret=0;
    lli cnt=0;
    while(x<M and isprime[x]==0){
        if(dp[x]!=-1) { cnt+=dp[x]; break; }
        x+=k;
        cnt++;
    }
    if(x>=M) dp[temp]=inf;
    else dp[temp]=min(1LL*inf,cnt);
    return dp[temp];
}

int main()
{
    Fore(i,2,M-1) isprime[i]=1;
    Fore(i,2,M-1){
        if(isprime[i]){
            prime.pb(i);
            for(int j=i+i;j<=M-1;j+=i) isprime[j]=0;
        }
    }
    int m=sz(prime);
    int ans=inf,row=n+1,col=n+1;
    sc(n,k);
    mem(dp,-1);
    Fore(i,1,n) Fore(j,1,n) sc(a[i][j]);
    lli temp=0;
    Fore(i,1,n) Fore(j,1,n){
        if(can_be_center(i,j)){
            temp=0;
            temp+=func(a[i][j]);
            temp+=func(a[i+1][j+1]);
            temp+=func(a[i+1][j-1]);
            temp+=func(a[i-1][j-1]);
            temp+=func(a[i-1][j+1]);
        }
        else continue;
        if(temp<ans){
            ans=temp; row=i; col=j;
        }
    }
    if(ans!=inf){
        printf("yes\n");
        cout<<ans<<"\n";
        cout<<row<<" "<<col<<"\n";
    }
    else printf("no\n" );
}

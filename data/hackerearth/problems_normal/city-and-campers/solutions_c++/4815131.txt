#include <bits/stdc++.h>

using namespace std;

#define INF (1<<29);

int p[100000];
int size[100000];
set<pair<int, int> > s;

int root (int i) {
    while (p[i] != i) {
        p[i] = p[p[i]] ; 
		i = p[i]; 
    }
	return i;
}
void merge(int A, int B) {
    int a = root(A);
    int b = root(B);
    
    if (a == b)
    	return;
    
    s.erase(s.find({size[a], a}));
	s.erase(s.find({size[b], b}));
    
    if (size[a] < size[b]) {
		p[a] = p[b];
		size[b] += size[a];
		s.insert({size[b], b});
	}
    else {
		p[b] = p[a];
		size[a] += size[b];
		s.insert({size[a], a});
	}
}

int main() {
    int N, Q;
    cin >> N >> Q;
    for (int i = 0; i < N; i++) {
    	p[i] = i;
    	size[i] = 1;
    	s.insert(make_pair(1, i));
    }

    for (int i = 0; i < Q; i++) {
    	int A, B;
    	cin >> A >> B;
    	merge(A-1, B-1);
		cout << (*(s.rbegin())).first - (*(s.begin())).first << endl;
    }
    
    return 0;
}

#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;


#define ll long long
#define ff first
#define ss second
#define mpa make_pair
#define MOD 1000000007
#define pb push_back
#define lld I64d
#define MXN 1000000

int bitcnt(int mask){return __builtin_popcount(mask);}
int SET(int N,int pos){	return N=N | (1<<pos);}
int RESET(int N,int pos){	return N= N & ~(1<<pos);}
int check(int N,int pos){	return (N & (1<<pos));}
int toggle(int N,int pos){if(check(N,pos))return N=RESET(N,pos);return N=SET(N,pos);}
void PRINTBIT(int N){	printf("("); for(int i=6;i>=1;i--)	{bool x=check(N,i);cout<<x;}	puts(")");}
int mod(int a, int b) { return a - a/b * b;}

int N;
int C;
int Arr[101][101];
int dp[101][101];
bool vis[101][101];


void inp()
{
	scanf("%d%d", &N, &C);
	
	for(int i = 1; i <= N; ++i)
		for(int j = 1; j <= N; ++j) {
			scanf("%d", &Arr[i][j]);
		}
}

bool is_range(int x, int y)
{
	if(x > N || y > N)
		return false;
	return true;
}

int rec(int x, int y)
{
	if(x == N && y == N)
		return 0;
	
	if(vis[x][y])
		return dp[x][y];
	vis[x][y] = true;
	
	int ans1 = 0;
	int ans2 = 0;
	if(is_range(x + 1, y))
		ans1 = rec(x + 1, y) + Arr[x][y];
	
	if(is_range(x, y + 1))
		ans2 = rec(x, y + 1) + Arr[x][y];
	
	return dp[x][y] = max(ans1, ans2);
}

void solve()
{
	memset(vis, false, sizeof vis);
	int ans = rec(1, 1);
	if(ans - C >= 0) {
		printf("%d\n", ans - C);
	} else
		puts("-1");
}

int main()
{
	int T;
	scanf("%d", &T);
	
	while(T--) {
		inp();
		solve();
	}
	
	return 0;
}

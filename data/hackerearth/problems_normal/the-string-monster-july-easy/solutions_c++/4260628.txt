#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstdlib>
#include <utility>
#include <memory.h>
#include <cassert>
#include <iterator>
#include <bitset>
#include <iomanip>
#include <complex>
#include <queue>
#include <ctime>
#include <deque>
#include <stack>
#include <set>
#include <map>
 
using namespace std;
 
#define pb push_back
#define mp make_pair
#define F first
#define S second

void solve() {
	int n;
	cin >> n;
	vector<string> have;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		have.pb(s);
	}
	string s;
	cin >> s;
	int cnt[26];
	for (int i = 0; i < 26; i++) cnt[i] = 0;
	for (int i = 0; i < (int)s.size(); i++) cnt[s[i] - 'a']++;
	long long mh = 0LL;
	long long st = 1LL;
	for (int i = 0; i < 26; i++) {
		mh = mh + 1LL * st * cnt[i];
	  st = st * 47;
	}
	set<long long> mm;
	int hh = (n + 1) / 2;
	int maxMask = (1 << hh);
	for (int mask = 0; mask < maxMask; mask++) {
		for (int j = 0; j < 26; j++) cnt[j] = 0;
		for (int i = 0; i < hh; i++) if ((mask & (1 << i)) != 0) {
			for (int j = 0; j < have[i].size(); j++) cnt[have[i][j] - 'a']++;
		}
		long long mmh = 0LL;
		long long st = 1LL;
		for (int i = 0; i < 26; i++) {
			mmh = mmh + 1LL * st * cnt[i];
	  	st = st * 47;
		}
		if (mmh == mh) {
			cout << "YES" << endl;
			return;
		}
		mm.insert(mmh); 
	}
	int pl = n - hh;
	maxMask = (1 << pl);
	for (int mask = 0; mask < maxMask; mask++) {
		for (int j = 0; j < 26; j++) cnt[j] = 0;
		for (int i = 0; i < pl; i++) if ((mask & (1 << i)) != 0) {
			for (int j = 0; j < have[i + hh].size(); j++) cnt[have[i + hh][j] - 'a']++;
		}
		long long mmh = 0LL;
		long long st = 1LL;
		for (int i = 0; i < 26; i++) {
			mmh = mmh + 1LL * st * cnt[i];
	  	st = st * 47;
		}
		long long need = mh - mmh;
		if (mm.find(need) != mm.end()) {
			cout << "YES" << endl;
			return;
		}
	}
	cout << "NO" << endl;
}

int main() {
	int t;
	cin >> t;
	while (t--) {
		solve();
	}
	return 0;  
}
def dfs(graph, start):
    visited, stack = set(), [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(graph[vertex] - visited)
    return visited


MOD = 10**9+7
try:
    N, M = map(int, raw_input().split())
    K = map(int, raw_input().split())

    graph = dict({i+1: set() for i in range(N)})

    for i in range(M):
        u, v = map(int, raw_input().split())
        graph[u].add(v)
        graph[v].add(u)

    visited = [0]*(N+1)
    grps = []
    for i in range(1, N+1):
        if not visited[i]:
            grp = dfs(graph, i)
            for val in grp:
                visited[val] = 1
            grps.append(grp)

    ans = []
    for grp in grps:
        max_ = 0
        count = 0
        for val in grp:
            if max_ < K[val-1]:
                max_ = K[val-1]
                count = 1
            elif max_ == K[val-1]:
                count += 1
        ans.append(count)

    final = 1
    for val in ans:
        final = (final*val) % MOD
    print final
except Exception as e:
    print e

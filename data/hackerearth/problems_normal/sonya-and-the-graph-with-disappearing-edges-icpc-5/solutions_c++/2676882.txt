#include <bits/stdc++.h>

using namespace std;

#define mem0(arr) memset(arr , 0 , sizeof arr)
#define memf(arr) memset(arr , false , sizeof arr)
#define memdp(arr) memset(arr , -1 , sizeof arr)
#define rep(i , n) for(int i = 1; i <= n; i++)
#define loop(i , n) for(int i = 0; i < n; i++)
#define pb push_back
#define fi first
#define se second

typedef long long ll;

ll n , m  , k , d , t , tem1 , tem2 , tem3 , tem4 , y = 1, sum = 0 , ans = 0;
vector < pair < ll , ll > > v [200000 + 10];
ll dist [200000 + 10];
map < pair <int , int> , int > ma;
bool vis [200000 + 10];
vector < pair < int , int > > edge;

void digstra(){

    memset(vis, false , sizeof vis);
    dist[1] = 0;
    set < pair < int , int > > s;
    s.insert({1 , 1});
    while(!s.empty()){

        pair <int , int> p = *s.begin();
        s.erase(s.begin());

        int x = p.se; int wei = p.fi;
        if( vis[x] ) continue;
         vis[x] = true;

        for(int i = 0; i < v[x].size(); i++){
            int e = v[x][i].fi; int w = v[x][i].se;
            pair <int , int> ppp;
            ppp.first = e; ppp.second = x;
            if(dist[x] + w < dist[e] && (ma[ ppp ] > dist[x] || ma[ppp] == 0 )  ){
                dist[e] = dist[x] + w;
                s.insert({dist[e],  e} );
            }
        }
    }
}


int main()
{
    ios::sync_with_stdio(false);cin.tie(0);

    string s , c;


    cin >>  n >> m >> k;

    for(int i = 0; i <= n; i++) dist[i] = 1e17;

    for(int i = 0; i < m; i++){
        cin >> tem1 >> tem2;
        edge.push_back({tem1 , tem2});
        v[tem1].pb({tem2 , 1});
        v[tem2].pb({tem1 , 1});

    }
    for(int i = 0; i < k; i++){
        cin >> tem1 >> tem2;
        int e = edge[tem2 - 1].fi, r = edge[tem2 - 1].se;
        ma[ {e , r} ] = tem1;
        ma[  {r , e} ] = tem1;
    }
    digstra();
    if(dist[n] != 1e17) cout << dist[n];
    else cout << "-1";

    return 0;
}
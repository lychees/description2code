#include <iostream>
#include <math.h>
using namespace std;
long long MOD;
long long power(long long a, long long b)
{long long mod = MOD;
    long long x=1,y=a; 
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>mod) x%=mod;
        }
        y = (y*y);
        if(y>mod) y%=mod; 
        b /= 2;
    }
    return x;
}
long long inveuler(long long n)
{return power(n,MOD-2);}
long long fun(long long N,long long P)
{if(N<=P)
{return 0;}
return 2*(N-P);}
long long prod(long long a,long long b)
{return ((a%MOD)*(b%MOD))%MOD;}
long long bishop(long long N, long long M,long long P,long long Q)
{return prod(fun(N,P),fun(M,Q));}
long long sum(long long a,long long b)
{return (a%MOD+b%MOD)%MOD;}
long long division(long long a, long long b)
{return prod(a,inveuler(b));}

int main()
{long long N,M,P,Q;
cin>>N>>M>>P>>Q;
MOD = 1000000007;
long long A = max(N,M);
long long B = min(N,M);

long long subtract = sum(prod(prod(A-B,B),B-1), division(prod(prod(B,B-1),2*B-1),3));
subtract = (2*subtract)%MOD;

subtract = sum(subtract,bishop(N,M,P,Q));

subtract = sum(subtract,bishop(N,M,Q,P));

long long answer = prod(N*M,N*M-1);
answer-=subtract;
if(answer<0)
{answer+=MOD;}
cout<<answer;
    return 0;
}

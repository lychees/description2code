#include<iostream>

void Sieve(int, bool *);
void Precompute(int, bool *, long long int *);
long long int Emma(int , long long int*, int, int);

int main(int argc, char const *argv[]) {

  int N, T;
  bool *sieve;
  long long int *result;

  N = 1000001;

  sieve = new bool  [N];
  result = new long long int  [N];

  std::cin >> T;

  Sieve(N, sieve);
  Precompute(N, sieve, result);

  while (T--) {

    int x, y, n;
    long long sum;

    std::cin >> x >> y;

    sum = Emma(N, result, x, y);

    std::cout << sum << std::endl;

  }
  return 0;
}


void Sieve(int N, bool sieve[]) {

    for(int i = 0; i <= N;++i) {
        sieve[i] = true;
    }

    sieve[0] = false;
    sieve[1] = false;

    for(int i = 2; i * i <= N; ++i) {
         if(sieve[i] == true) {
             // Mark all the multiples of i as composite numbers
             for(int j = i * 2; j <= N ;j += i)
                 sieve[j] = false;
        }
      }
 }

 void Precompute(int N, bool sieve[], long long int result[]) {

   long long int sum = 0;

   for (int i = 0; i < N; i++) {
     result[i]  = 0;
   }

   for (int i = 0; i < N; i++) {
     if (sieve[i] == true) {
       sum += i;
       result[i] = sum;
     }
     else {
       result[i] = sum;
     }
   }
 }

long long int Emma(int N, long long int result[], int x, int y) {

  long long int sum = 0;

  sum += result[y];

  sum -= result[x-1];

  return sum;

}

#include <bits/stdc++.h>
using namespace std;
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
   cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
   const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
#define si(x) scanf("%d",&x)
#define fori( i , a , b ) for( int i = a ; i < b ; i++ )
#define ford( i , a , b)  for( int i = a ; i >= b ; i--)
#define popcount __builtin_popcount
#define mm(c,v) memset( c , 0 , sizeof(c) )
#define all(v) v.begin() , v.end() 
#define ll long long 
#define F first
#define S second
#define pb push_back
#define mp make_pair
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<PII> VPII;
const int mod = 1000000007;
VI graph[100005];
int dist[100005];
int vis[100005];
int ans = 0;
void dfs( int x , int c )
{
	dist[x] = c;
	ans = max( ans , c );
	vis[x] = 1;
	for( int u : graph[x])
	{
		if( !vis[u] )
			dfs( u , c +  1);
	}
}
int main()
{
	int n ;
	cin >> n ;
	int k = n-1;
	while(k--)
	{
		int a , b ;
		cin >> a >> b ;
		--a;
		--b;
		graph[a].pb(b);
		graph[b].pb(a);
	}
	dfs(0,0);
	int id , maxl = 0;
	for( int i = 0 ; i < n ; i++ )
	{
		if( dist[i] > maxl )
		{
			id = i;
			maxl = dist[i];
		}
	}
	memset( vis , 0 , sizeof(vis) );
	memset( dist , 0 , sizeof(dist) );

	ans = 0;
	dfs( id , 0 );
	cout << ans << endl;

}
#include<bits/stdc++.h>
using namespace std;
 
#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))
 
typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;
const int maxn = 5e5 + 5;
int diffs[maxn];
 
struct Cell {
  int a, b, i;
  bool operator<(const Cell &cell) const { return a < cell.a; }
};
 
void add_point(set<int> &points, set<int> &differences,
               const int t) {  
  points.insert(t);            
  set<int>::iterator it = points.find(t);
  --it;
  int prev = *it;  
  ++it;
  ++it;
  int next = *it;
  if (--diffs[next - prev] == 0) differences.erase(next - prev);
  if (++diffs[t - prev] == 1) differences.insert(t - prev);
  if (++diffs[next - t] == 1) differences.insert(next - t);
}
 
void delete_point(set<int> &points, set<int> &differences, const int t) {
  set<int>::iterator it = points.find(t);
  --it;
  int prev = *it;
  ++it;
  ++it;
  int next = *it;              
  points.erase(points.find(t));
  if (--diffs[t - prev] == 0) differences.erase(t - prev);
  if (--diffs[next - t] == 0) differences.erase(next - t);
  if (++diffs[next - prev] == 1) differences.insert(next - prev);
}
 
int main() {

 
  ios_base::sync_with_stdio(false);
 
  int n, m;
  cin >> n >> m;
  vector<Cell> board(n);
  rep(i, n) {
    cin >> board[i].a >> board[i].b;
    board[i].i = i;
  }
 
  set<int> points = {-1, n};
  set<int> differences = {n + 1};
  ++diffs[n + 1];
 
  SORT(board);
 
  priority_queue<pii> pq;
  int ans = 2e9;
 
  for (int i = 1, j = 0; i <= 32000; i++) {
    for (; j < n && board[j].a == i; ++j) {  // adding points with A = i
      add_point(points, differences, board[j].i);
      pq.push(make_pair(board[j].b, board[j].i));
    }
    while (*differences.rbegin() <= m && pq.size() > 0) {
      // trying to delete some points
      delete_point(points, differences, pq.top().second);
      if (*differences.rbegin() <= m)
        pq.pop();
      else {
        add_point(points, differences, pq.top().second);
        break;
      }
    }
    if (*differences.rbegin() <= m)
      // if the game can be completed, calculate the answer
      ans = min(ans, pq.top().first * i);
  }
 
  cout << ans << endl;
 

 
  return 0;
}
 
#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define mod 1000000007
#define INF 1000000000
#define pb push_back
#define ff first
#define ss second
#define pii pair<ll,ll> 
#define mp make_pair
#define set(x,y) memset(x,y,sizeof(x))
#define MAXN 100005
#define PI 3.14159265358979323846

// GCD ALgorithm
ll gcd(ll a,ll b){if (a==0)return b;return gcd(b%a,a);}
// Modular Exponentiation
ll power(ll a,ll b,ll m){ll ans=1;while(b>0){if(b%2!=0){ans=(ans*a)%m;}a=(a*a)%m;b>>=1;}return ans;}
//Fast Input
inline void sf(ll *a){char c=0;while(c<33)c=getc(stdin);*a=0;while(c>33){*a=(*a)*10+c-'0';c=getc(stdin);}}

vector<ll> v[1003];
ll cost[1003][1003],n,k,t,ans,x,y,w,num,q,uu,vv,den,c,vis[1003];

void dfs(ll x,ll c)
{
	vis[x]=1;
	for(ll i=0;i<v[x].size();i++)
	{
		if(!vis[v[x][i]] && cost[x][v[x][i]]<c)
			dfs(v[x][i],c);
	}
}

int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);
	cin>>t;
	while(t--)
	{
		num=0;
		cin>>n>>k;
		set(cost,0);
		while(k--)
		{
			cin>>x>>y>>w;
			v[x].pb(y);
			v[y].pb(x);
			cost[x][y]=w;
			cost[y][x]=w;
		}
		cin>>q;
		den=q;
		while(q--)
		{
			cin>>uu>>vv;
			c=cost[uu][vv];
			set(vis,0);
			dfs(uu,c);
			if(!vis[vv])
				num++;
		}
		ans=__gcd(num,den);
		num=num/ans;
		den=den/ans;
		cout<<num<<"/"<<den<<endl;
		for(ll i=1;i<=n;i++)
			v[i].clear();
	}	
	return 0;
}
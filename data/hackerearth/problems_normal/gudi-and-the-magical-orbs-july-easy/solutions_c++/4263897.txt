using namespace std;
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#define ll long long
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
#define input freopen("input.in","r",stdin);
#define output freopen("output.out","w",stdout);
#define e cout<<"\n";
#define all(it,v) for(it=(v).begin();it!=(v).end();it++)
#define rep(i,a,b) for(int i=(a);i<=(b);i++)
#define pii pair<ll,ll>
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define clr clear
typedef vector<vector<ll> > mat;
const ll mx=100001;
const ll mod=1000000007;
const ll inf=0x3f3f3f3f;
void solve();
int main()
{
  fast
  int t=1;
  cin>>t;
  while(t--)
  solve();
  return 0;
}
bool dp[101][101][501];
int ar[101][101];
void solve()
{
  int i,j,k,N,K,M,ans=-1;
  memset(dp,false,sizeof dp);
  cin>>N>>M>>K;
  rep(i,1,N)
   rep(j,1,M)
    cin>>ar[i][j];
  rep(i,1,N)
   rep(j,1,M)
    rep(k,ar[i][j],K)
      if(i==1&&j==1)
        dp[i][j][k]=(k==ar[i][j]);
      else
      if(i==1)
       dp[i][j][k]=dp[i][j][k] or dp[i][j-1][k-ar[i][j]];
      else
      if(j==1)
       dp[i][j][k]=dp[i][j][k] or dp[i-1][j][k-ar[i][j]];
      else    
       dp[i][j][k]=dp[i][j][k] or dp[i][j-1][k-ar[i][j]] or dp[i-1][j][k-ar[i][j]] or dp[i-1][j-1][k-ar[i][j]];  
  rep(i,1,K)
   if(dp[N][M][i])
    ans=i;      
  cout<<ans;
  e
}


























#include <math.h>
#include <iostream>
#include <map>
#include <vector>
#include <set>
#include <cstring>
#include <algorithm>
#include <stack>
#include <queue>
#include <cstring>
#include <sstream>
#include <stdio.h>
using namespace std;
const int N=1003;
class un{
public:
    vector<int> p;
    vector<int> r;
    vector<int> all[N];
    un(int M){
        p.resize(M+1);
        r.resize(M+1);
        for(int i=0;i<=M;i++){p[i]=i;r[i]=0;all[i].push_back(i);}
    }
    int findp(int x){
        if(p[x]==x){return x;}
        return p[x]=findp(p[x]);
        
    }
    bool merge(int i,int j){
        int x=findp(i);
        int y=findp(j);
        if(x!=y){
            if(r[x]>r[y]){swap(x,y);}
            p[x]=y;
            for(int i=0;i<all[x].size();i++){
                all[y].push_back(all[x][i]);
            }
            all[x].clear();
            if(r[x]==r[y]){r[y]++;}
        }
        return x!=y;
    }
};
int e[N];
int n;
int k;
int a,b;
long long mn;
long long out;
const long long INF=1e18;
long long memo[N][N];
map<pair<int,long long> ,long long > way;
const int MOD=1000000007;
int qq[N];
un U(N+1);
vector<int> v;
long long td(int idx,int cc){
    if(idx==v.size()){
        return 0;
    }
    
    if(memo[idx][cc]!=-1){return memo[idx][cc];}
    int com=v[idx];
    long long ans=INF;
    for(int i=0;i<U.all[com].size();i++){
        int ww=e[U.all[com][i]];
        long long ret=td(idx+1,cc+(int)U.all[com].size())+ww;
        ans=min(ans,ret);
        
    }
    return memo[idx][cc]=ans;
}

long long cnt(int idx,int cc,long long tt){
    
    if(idx==v.size()){
        //cout<<tt<<" "<<mn<<endl;
        if(tt==mn){return 1;}
        return 0;
    }
    
    if(way.count(make_pair(idx,tt))){return way[make_pair(idx,tt)];}
    int com=v[idx];
    long long ans=0;
    for(int i=0;i<U.all[com].size();i++){
        int ww=e[U.all[com][i]];
      ans+=cnt(idx+1,cc+(int)U.all[com].size(),tt+ww);
        if(ans>MOD){ans-=MOD;}
        
    }
    return way[make_pair(idx,tt)]=ans;
}

int main(){
    scanf("%d",&n);
    memset(qq,0,sizeof(qq));
    memset(memo,-1,sizeof(memo));
   // memset(way,-1,sizeof(way));
    
    for(int i=1;i<=n;i++){
        scanf("%d",&e[i]);
    }
    scanf("%d",&k);
    for(int i=0;i<k;i++){
        scanf("%d %d",&a,&b);
        U.merge(a,b);
    }
    for(int i=1;i<=n;i++){
        int pp=U.findp(i);
        if(!qq[pp]){v.push_back(pp);qq[pp]=1;}
    }
    
    mn=td(0,0);
    out=cnt(0,0,0);
    printf("%lld\n",out%MOD);
    
    return 0;
}
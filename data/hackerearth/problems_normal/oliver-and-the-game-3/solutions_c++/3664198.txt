#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}
class graph
{
	vi *adj;
	int time;
	public:
		graph(int v)
		{
			adj=new vi[v];
			time=0;
		}
		void add_edge(int u,int v)
		{
			adj[u].pb(v);
			adj[v].pb(u);
		}
		void dfs(int v,vector<bool>& visited,vi& disc,vi& fin)
		{
			visited[v]=true;
			vi::iterator it;
			time++;
			disc[v]=time;
			for(it=adj[v].begin();it!=adj[v].end();it++)
			{
				if(!visited[*it])
				{
					dfs(*it,visited,disc,fin);
				}
			}
			time++;
			fin[v]=time;
		}
};
bool is_ancestor(int u,int v,vi& disc,vi& fin)
{
	if((disc[u]<=disc[v])&&(fin[u]>=fin[v]))
		return true;
	return false;
}
int main()
    {
		int i,n,a,b,q,op;
		sc("%d",&n);
		graph g(n);
		for(i=0;i<n-1;i++)
		{
			sc("%d%d",&a,&b);
			a--;
			b--;
			g.add_edge(a,b);
		}
		vector<bool> visited(n);
		vi disc(n),fin(n);
		g.dfs(0,visited,disc,fin);
		sc("%d",&q);
		bool f1,f2,ans;
		while(q--)
		{
			sc("%d%d%d",&op,&a,&b);
			a--;
			b--;
			if(!op)
			{
				f1=is_ancestor(a,b,disc,fin);
				f2=is_ancestor(0,a,disc,fin);
				if((f1)&&(f2))
					ans=true;
				else
					ans=false;
			}
			else
			{
				f1=is_ancestor(b,a,disc,fin);
				ans=f1;
			}
			if(ans)
				pf("YES\n");
			else
				pf("NO\n");
		}
    return 0;
}

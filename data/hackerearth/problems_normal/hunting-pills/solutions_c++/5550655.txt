#include<bits/stdc++.h>
using namespace std;
#define pb push_back
vector<int> arti;
vector<pair<int,int> > bri;
vector<int> scc;
int present[1000006];
long long c,d;
vector<int> v[100003];
int low[100004];
int desc[100004];
stack<int> s;
int arr[1000005];
int visited[100004];
int temp=0;
int maxi=0;
int cmp(pair<int,int> p1,pair<int,int> p2)
{
    if(p1.first<=p2.first)
        return 1;
    if(p1.first>p2.first)
        return 0;
        else
        {
            if(p1.second<=p2.second)
                return 1;
            return 0;
        }

}

void dfs(int vertex)
{
    if(visited[vertex]==1)
        return ;
        s.push(vertex);
        present[vertex]=1;
            int i;
      visited[vertex]=1;
        desc[vertex]=++temp;
        low[vertex]=desc[vertex];
        int ans=0;
    for(i=0;i<v[vertex].size();i++)
    {
        if(visited[v[vertex][i]]==0)
        {
            dfs(v[vertex][i]);

            low[vertex]=min(low[vertex],low[v[vertex][i]]);

        }
        else if(present[v[vertex][i]]==1)
        {
            low[vertex]=min(low[vertex],desc[v[vertex][i]]);
        }
    }
            //cout<<vertex<<" "<<low[vertex]<<" "<<desc[vertex]<<endl;

    if(low[vertex]==desc[vertex])
    {
        while(s.top()!=vertex)
        {
            scc.pb(s.top());
            //cout<<s.top()<<" ";
             present[s.top()]=0;
            s.pop();

        }
        present[s.top()]=0;
      //  cout<<s.top()<<endl;
        scc.pb(s.top());
        s.pop();

    }
    int sum=0;
    for(i=0;i<scc.size();i++)
    {
      sum+=arr[scc[i]];
    }
    maxi=max(maxi,sum);
    scc.clear();
}
int main()
{
   int nodes,edges;
   int t;
   cin>>t;
   while(t--)
   {


   cin>>nodes>>edges;
   for(int i=0;i<=nodes;i++)
   {
       visited[i]=0;
       v[i].clear();
       present[i]=0;

   }
   scc.clear();
   maxi=0;
   temp=0;
   int i,a,b;
   for(i=0;i<nodes;i++)
    cin>>arr[i];
   for(i=1;i<=edges;i++)
   {
       cin>>a>>b;
       v[a].pb(b);
      // v[b].pb(a);
   }
   for(i=0;i<nodes;i++)
   {
       if(visited[i]==0)
       {
           dfs(i);
       }
   }
  // cout<<c<<" "<<d<<endl;
   cout<<maxi<<endl;
   }
}


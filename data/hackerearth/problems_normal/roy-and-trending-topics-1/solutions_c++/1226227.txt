#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <algorithm>
#include <vector>
#include <map>
#include <fstream>

using namespace std;

struct Comp
{
	bool operator()(const pair<long, long>& p1, const pair<long, long>& p2)
	{
		if (p1.second == p2.second) {
			return p1.first < p2.first;
		}

		return p1.second < p2.second;
	}
};

int main () {
	int N;
	cin >> N;

	vector < pair <long, long> > trending;
	map < long, long > popular;

	while (N--) {
		long id, old_score, P, L, C, S;
		cin >> id >> old_score >> P >> L >> C >> S;

		// calculate new score
		long new_score = (50*P)+(5*L)+(10*C)+(20*S);
		long difference = new_score-old_score;

		popular.insert( make_pair(id, new_score) );
		trending.push_back( make_pair(id, difference) );
	}

	make_heap(trending.begin(), trending.end(), Comp());

	// print top 5
	int count = 5;
	while (count--) {
		pair <long, long> P = trending.front();
		cout << P.first << " " << popular[P.first] << endl;
		pop_heap(trending.begin(), trending.end(), Comp());
		trending.pop_back();
	}


	return 0;
}

#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define forn(i, n) for (int i = 0; i < n; ++i)
#define forl(i, a, b) for (int i = a; i < b; ++i)
#define fore(i, a, b) for (int i = a; i <= b; ++i)
#define ul unsigned long
#define ll long long
#define pii std::pair<int, int>
#define vpii vector<pii >
#define all(x) x.begin(), x.end()
#define INF 1000000011
const int MOD = 1e9 + 7;
const long double PI = 3.14159265358979323846;
struct myCompare {
	bool operator() (const pii &l, const pii &r) const {
		return l.first < r.first;
	}
};
const int MAXN = 1e4 + 3;
ll dp[MAXN][4][3][2][2];
char P[MAXN], T[MAXN];
int MP[MAXN];
int m, n;
ll res = 0;
int ex[4];
int cnt = 0;
void ana(int val) {
	memset(ex, 0, sizeof ex);
	while (val % 2 == 0) ex[0]++, val /= 2;
	if (ex[0] > 3) ex[0] = 3;
	while (val % 3 == 0) ex[1]++, val /= 3;
	if (ex[1] > 2) ex[1] = 2;
	while (val % 5 == 0) ex[2]++, val /= 5;
	if (ex[2] > 1) ex[2] = 1;
	while (val % 7 == 0) ex[3]++, val /= 7;
	if (ex[3] > 1) ex[3] = 1;
}

void build() {
	int i = 0;
	int j = MP[0] = -1;
	while (i < m) {
		while (j >= 0 && P[i] != P[j]) j = MP[j];
		i++, j++;
		MP[i] = j;
	}
}

void KMP() {
	int j = 0;
	for (int i = 0; i < n; ++i) {
		while (j >= 0 && T[i] != P[j]) j = MP[j];
		j++;
		if (j == m) {
			cnt++;
			ana(i - j + 2);
			dp[cnt][ex[0]][ex[1]][ex[2]][ex[3]] += 1;
			fore(i1, 0, 3) fore(i2, 0, 2) fore(i3, 0, 1) fore(i4, 0, 1) {
				dp[cnt][i1][i2][i3][i4] = (dp[cnt][i1][i2][i3][i4] + dp[cnt - 1][i1][i2][i3][i4]) % MOD;
				dp[cnt][min(i1 + ex[0], 3)][min(i2 + ex[1], 2)][min(i3 + ex[2], 1)][min(i4 + ex[3], 1)] =
				(dp[cnt][min(i1 + ex[0], 3)][min(i2 + ex[1], 2)][min(i3 + ex[2], 1)][min(i4 + ex[3], 1)] + dp[cnt - 1][i1][i2][i3][i4]) % MOD;
			}
		}
	}
}

void solve() {
	scanf("%s%s", P, T);
	m = strlen(P), n = strlen(T);
	build();
	KMP();
	cout << dp[cnt][3][2][1][1] % MOD;
}

int main() {
	#ifndef ONLINE_JUDGE
		freopen("input.txt", "rt", stdin);
		//freopen("output.txt", "wt", stdout);
	#endif
	//cout << fixed << setprecision(10);	

	solve();

	return 0;
}
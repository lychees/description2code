#include <bits/stdc++.h>
using namespace std;

#define ll long long int

ll n,mat[101][101];
bool vis[101][101],rule1=0,rule2=0;

bool isSafe1(ll row,ll col)
{
    if(mat[row][col]==1 && !vis[row][col] && row>=0 && row<n && col>=0 && col<n)
        return true;
    return false;
}



void dfs1(ll row,ll col)
{
    if(row==n-1)
       {
           rule1=1;
       }
    vis[row][col]=1;

    if(isSafe1(row-1,col-1))
         dfs1(row-1,col-1);
    if(isSafe1(row-1,col))
         dfs1(row-1,col);
    if(isSafe1(row-1,col+1))
         dfs1(row-1,col+1);
    if(isSafe1(row,col-1))
        dfs1(row,col-1);
    if(isSafe1(row,col+1))
         dfs1(row,col+1);
    if(isSafe1(row+1,col-1))
         dfs1(row+1,col-1);
    if(isSafe1(row+1,col))
         dfs1(row+1,col);
    if(isSafe1(row+1,col+1))
         dfs1(row+1,col+1);

    //vis[row][col]=0;
    return ;
}


bool isSafe2(ll row,ll col)
{
    if(mat[row][col]==2 && !vis[row][col] && row>=0 && row<n && col>=0 && col<n)
        return true;
    return false;
}





void dfs2(ll row,ll col)
{
    if(col==n-1)
        rule2=1;
      //  return true;
    vis[row][col]=1;

    if(isSafe2(row-1,col-1))
         dfs2(row-1,col-1);
    if(isSafe2(row-1,col))
         dfs2(row-1,col);
    if(isSafe2(row-1,col+1))
         dfs2(row-1,col+1);
    if(isSafe2(row,col-1))
         dfs2(row,col-1);
    if(isSafe2(row,col+1))
         dfs2(row,col+1);
    if(isSafe2(row+1,col-1))
         dfs2(row+1,col-1);
    if(isSafe2(row+1,col))
         dfs2(row+1,col);
    if(isSafe2(row+1,col+1))
         dfs2(row+1,col+1);

   // vis[row][col]=0;
    return; // false;
}

int main()
{
   ll i,j,k;
    cin>>n;
   // ll mat[n][n];
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
            cin>>mat[i][j];
    }

 //   bool rule2=0; //rule3=0;

    for(i=0;i<n;i++)
    {
        for(k=0;k<n;k++)
            for(j=0;j<n;j++)
              vis[k][j]=0;

        if(mat[0][i]==1 )
            {
                dfs1(0,i);
                if(rule1)
                break;
            }
    }

        for(i=0;i<n;i++)
    {
        for(k=0;k<n;k++)
            for(j=0;j<n;j++)
              vis[k][j]=0;

        if(mat[i][0]==2)// &&  )
            {
                dfs2(i,0);
                if(rule2)
                break;
            }
    }

    //cout<<rule1<<" "<<rule2<<endl;

    if(rule1 && rule2)
        cout<<"AMBIGUOUS";
    else if(rule1)
        cout<<"1";
    else if(rule2)
        cout<<"2";
    else
        cout<<"0";

    return 0;
}

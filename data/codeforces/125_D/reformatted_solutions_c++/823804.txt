#include <algorithm>
#include <bitset>
#include <cmath>
#include <ctype.h>
#include <fstream>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <string>
#include <time.h>
#include <vector>
using namespace std;
#define li long long int
#define rep(i, to) for (li i = 0; i < ((li)(to)); ++i)
#define pb push_back
#define sz(v) ((li)(v).size())
#define bit(n) (1ll << (li)(n))
#define each(it, c)                                                            \
  for (__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
#define all(a) (a).begin(), (a).end()
#define MP make_pair

#define MAX 100005
#define INF bit(60)

li a[MAX], b[MAX], n;

bool check() {
  li bef = -1, dif = INF;
  rep(i, n) if (b[i] != 0) {
    if (dif != INF && a[i] - a[bef] != dif)
      return false;
    if (bef != -1)
      dif = a[i] - a[bef];
    bef = i;
    b[i] = 1;
  }
  return (bef != -1);
}

void run(li dif, li now, li forbid = -1) {
  memset(b, -1, sizeof(b));
  li save = now;
  rep(i, n) if (a[i] == now) {
    if (0 <= forbid && a[i] == a[forbid]) {
      forbid = -2;
      continue;
    }
    b[i] = 0;
    now += dif;
  }
  if (check()) {
    rep(i, 2) {
      rep(j, n) if (b[j] == i) cout << a[j] << " ";
      cout << endl;
    }
    exit(0);
  }
  if (forbid != -1)
    return;
  rep(i, n) if (b[i] == -1) {
    while (b[i] != 0)
      i--;
    run(dif, save, i);
    return;
  }
}

int main() {
  cin >> n;
  rep(i, n) cin >> a[i];
  rep(i, 3) rep(j, i) run(a[i] - a[j], a[j]);
  cout << "No solution" << endl;
}

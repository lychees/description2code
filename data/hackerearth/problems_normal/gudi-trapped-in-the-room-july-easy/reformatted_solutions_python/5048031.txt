from collections import defaultdict, deque


def op1(arg, H):
    arg = deque(arg)
    arg.rotate(H)
    return "".join(arg)


def op2(arg, A):
    arg = deque(arg)
    for i in xrange(1, len(arg) + 1):
        if i % 2 == 0:
            c = arg[i-1]
            c = (int(c) + A) % 10
            arg[i-1] = str(c)
    return "".join(arg)


def dfs(nodes, H, A):

    visited = set()
    while nodes:
        item = nodes.pop()
        if item in visited:
            continue
        visited.add(item)
        node1 = op1(item, H)
        node2 = op2(item, A)
        nodes.update([node1, node2])
    return min(visited)


def solve():
    s = raw_input().strip()
    A, H = map(int, raw_input().strip().split())

    Graph = defaultdict(set)
    node1 = op1(s, H)
    node2 = op2(s, A)

    nodes = set([node1, node2])
    print dfs(nodes, H, A)


T = input()
for i in xrange(T):
    solve()

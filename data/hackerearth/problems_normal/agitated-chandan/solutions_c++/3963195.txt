#include<bits/stdc++.h>
#include<vector>
#include<list>
#include<utility>
#include<map>
#include<set>
#include<stack>
#include<queue>
#define mod 1000000007
#define ll long long
using namespace std;
vector < pair<int,int> > s[100006];
vector < pair<int,int> > ::iterator it;
int dist[100006]={-1};
//int tym=0;
int Dijkstra(int start)
{
	priority_queue < pair <int,int> > q;
	q.push(make_pair(0,start));
	dist[start]=0;
	bool vis[100006]={false};
	
	while(!q.empty())
	{
		pair <int,int> v=q.top();
		q.pop();
		if(vis[v.second]==false)
		{
			vis[v.second]=true;	
		
		for(it=s[v.second].begin();it!=s[v.second].end();it++)
		{
			int newdis=(*it).first + v.first;
			if(dist[(*it).second]==-1)
			{
				q.push(make_pair(newdis,(*it).second));
				dist[(*it).second]=newdis;
			}
			else
			{ 	
				if(dist[(*it).second] > newdis)
				{
				q.push(make_pair(newdis,(*it).second));
				dist[(*it).second]=newdis;
				}
			}
		}
		}	
	}	
	int maxval=0;
	int far=0;
	for(int i=0;i<100006;i++)
	{
		if(maxval<dist[i])
		{
			far=i;
			maxval=dist[i];
		}
	}
		return far;
	
}

int main()
{
	int T;
	cin>>T;
	while(T--)
	{
		int N;
		for(int i=0;i<100006;i++)
		s[i].clear();
		cin>>N;
		int M=N-1;
		
		while(M--)
		{
			int X,Y,C;
			cin>>X>>Y>>C;
			s[X].push_back(make_pair(C,Y));
			s[Y].push_back(make_pair(C,X));
		}
		int vertice;
		
				for(int i=0;i<100006;i++)
					dist[i]=-1;
				
					 vertice=Dijkstra(1);
				
				for(int i=0;i<100006;i++)
				
					dist[i]=-1;
				int maxdist=dist[Dijkstra(vertice)];
			
		if(maxdist<=100)
		cout<<"0 "<<maxdist<<endl;
		else if(maxdist>100 && maxdist<=1000)
		cout<<"100 "<<maxdist<<endl;	
		
		else if(maxdist>1000 && maxdist<=10000)
		cout<<"1000 "<<maxdist<<endl;
		
		else if(maxdist>10000 )
		cout<<"10000 "<<maxdist<<endl;
	}
	return 0;
}

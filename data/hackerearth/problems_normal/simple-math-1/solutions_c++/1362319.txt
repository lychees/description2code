#include <iostream>
#include <vector>
#define m 10000007
using namespace std;

// A Dynamic Programming based solution that uses table C[][] to calculate the 
// Binomial Coefficient 


// Prototype of a utility function that returns minimum of two integers
int min(int a, int b);

// Returns value of Binomial Coefficient C(n, k)
void binomialCoeff(int n, int k, int & cases)
{
	vector<vector<int>> C;
	//int C[n + 1][k + 1];
	int i, j;
	C.resize(n + 1);
	// Caculate value of Binomial Coefficient in bottom up manner
	for (i = 0; i <= n; i++)
	{
		for (j = 0; j <= min(i, k); j++)
		{
			C[i].resize(j + 1);
			// Base Cases
			if (j == 0 || j == i)
				C[i][j] = 1;

			// Calculate value using previosly stored values
			else
				C[i][j] = (C[i - 1][j - 1]%m + C[i - 1][j]%m)%m;
		}
	}

	cases = n < k ? -1 : C[i - 1][j - 1];
	
}

// A utility function to return minimum of two integers
int min(int a, int b)
{
	return (a<b) ? a : b;
}

/* Driver program to test above function*/
int main()
{
	ios::sync_with_stdio(false);
	int objects, groups, cases = 0;
	cin >> objects >> groups;
	 binomialCoeff(objects-1, groups-1,cases);
	cout << cases;
	return 0;
}




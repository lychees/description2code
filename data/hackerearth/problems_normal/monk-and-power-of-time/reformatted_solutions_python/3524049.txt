class Stack:

    def __init__(self):
        self.lst = []

    def __str__(self):
        return str(self.lst)

    def isEmpty(self):
        return self.lst == []

    def push(self, item):
        self.lst.append(item)

    def pop(self):
        if not self.isEmpty():
            item = self.peek()
            del self.lst[-1]
            return item

    def peek(self):
        if not self.isEmpty():
            return self.lst[self.size()-1]

    def size(self):
        return len(self.lst)


class Queue:
    def __init__(self):
        self.items = []

    def __str__(self):
        return str(self.items)

    def isEmpty(self):
        return self.items == []

    def enqueue(self, item):
        self.items.insert(0, item)

    def dequeue(self):
        return self.items.pop()

    def size(self):
        return len(self.items)

    def peek(self):
        return self.items[len(self.items)-1]


n = int(raw_input())
calling_order = raw_input().split()
ideal_order = raw_input().split()

c = Queue()
for i in calling_order:
    c.enqueue(int(i))

i = Stack()
for j in reversed(ideal_order):
    i.push(int(j))

count = 0
while not i.isEmpty():
    if c.peek() == i.peek():
        count += 1
        i.pop()
        c.dequeue()
    else:
        count += 1
        item = c.dequeue()
        c.enqueue(item)

print count

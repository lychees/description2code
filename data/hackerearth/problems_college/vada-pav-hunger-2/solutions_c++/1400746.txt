//includes
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <list>
#include <utility>
#include <algorithm>
#include <cassert>

using namespace std;

//defines-general
typedef long long ll;
typedef long double ld;
#define to(a) __typeof(a)
#define fill(a,val)  memset(a,val,sizeof(a))

//defines-vector
typedef vector<int> vi;
typedef vector<long long> vll;
#define all(vec)  vec.begin(),vec.end()
#define pb push_back
#define sz size()
#define contains(vec,x) (find(vec.begin(),vec.end(),x)!=vec.end())

//defines-iteration
#define repi(i,a,b) for(__typeof(b) i = a;i<b;i++)
#define repii(i,a,b) for(__typeof(b) i = a;i<=b;i++)
#define repr(i,b,a) for(__typeof(b) i = b;i>a;i--)
#define repri(i,b,a) for(__typeof(b) i = b;i>=a;i--)
#define tr(vec,it)  for(__typeof(vec.begin())  it = vec.begin();it!=vec.end();++it)

//defines-pair
typedef pair<int, int> pii;
typedef pair<long long, long long> pll;
#define ff first
#define ss second
#define mp make_pair

#define si(a) scanf("%d",&a)
#define sl(a) scanf("%lld",&a)
#define pi(a) printf("%d\n",a)
#define pl(a) printf("%lld\n",a)

vi v[1005];

bool visited[1005];

int tdist(int u)
{
    visited[u]=true;
    int temp=0;
    repi(i,0,v[u].size())
        if(!visited[v[u][i]])
            temp += 1+tdist(v[u][i]);
    return temp;
}

int tfar(int u)
{
    visited[u]=true;
    int temp=0;
    repi(i,0,v[u].size())
        if(!visited[v[u][i]])
            temp  = max(temp,1+tfar(v[u][i]));
    //cout << u << " " << temp << endl;
    return temp;
}

int main()
{
    int n;
    si(n);
    int a,b;
    repi(i,0,n-1)
    {
        cin >> a >> b;
        v[a].pb(b);
        v[b].pb(a);
    }
    repii(i,1,n)
        visited[i]=false;
    int total_dist = tdist(1);
    //cout << total_dist << endl;
    repii(i,1,n)
        visited[i]=false;
    int far = tfar(1);
    cout << 2*total_dist - far << endl;
    return 0;
}
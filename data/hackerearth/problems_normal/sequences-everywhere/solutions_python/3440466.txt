from fractions import gcd

def seq(x):
    for i in xrange(1, x):
        if x % i != 0:
            return [x] + seq(i)
    return [x]

def lcm(a, b):
    return a * b / gcd(a, b)

A, B = map(int, raw_input().split())

S = [1] * 42
for i in xrange(1, 42):
    for j in xrange(1, i):
        if i % j != 0:
            S[i] = S[j] + 1
            break

def calc(N):
    if N == 1:
        return 0

    x = [1]
    for i in xrange(1, 41):
        x.append(lcm(x[-1], i))

    ways = [0] * 41
    ans = 0
    
    for i in xrange(40, 0, -1):
        ways[i] = N / x[i]
        for j in xrange(i + 1, 41):
            ways[i] -= ways[j]
        ans += ways[i] * S[i + 1]

    return ans

C = min(B + 1, max(100, A))

ans = 0
for i in xrange(A, C):
    ans += len(seq(i))

A = C

ans += calc(B) - calc(A - 1) + B - A + 1

print ans

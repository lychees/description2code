#include<iostream>
#include<cstdio>
#include<climits>
#include<string>
#include<cstring>
#include<algorithm>
#include<vector>
#include<stack>
#include<queue>
#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<utility>
#include<fstream>

using namespace std;


#define out(a) printf("%d\n",a)
#define in(a)  scanf("%d",&a)
#define in2(a,b)  scanf("%d%d",&a,&b)
#define in3(a,b,c)  scanf("%d%d%d",&a,&b,&c)
#define inll(a) scanf("%lld",&a)
#define in2ll(a,b)scanf("%lld%lld",&a,&b);
#define in3ll(a,b,c)scanf("%lld%lld%lld",&a,&b,&c);
#define outll(a) printf("%lld\n",a)
#define VI vector<int>
#define VLL vector<long long int>
#define PQI priority_queue<int>
#define PQLL priority_queue<long long int>
#define VP vector<pair<int,int> >
#define ll long long int
#define MOD 1000000007
#define MP make_pair
#define X first
#define Y second
#define PB push_back

ll  gcd(ll a,ll b)
{
	while(b)
		b^=a^=b^=a%=b;
	return a;
}

ll power(ll b,ll e)
{
	ll ans=1,temp;
	while(e>0)
	{
		if(e%2)
			ans=(ans*b);
		b=(b*b);
		e/=2;
	}
	return ans;
}



//#define n 150000

inline void inp(int *n)
{
	*n = 0;
	int ch = getchar_unlocked();
	while(ch < '0' || ch > '9')
	{
		ch = getchar_unlocked();
	}
	while(ch >= '0' && ch <= '9')
	(*n) = ((*n)<<3) + ((*n)<<1) + ch - '0', ch = getchar_unlocked();
}


bool comp(const pair<int,int>& p,const pair<int,int> &q){
	
	return p.Y>q.Y;
}

/*bool comp(const node &x,const node &y){
	return x.a<y.a;
	}*/
/*
bool comp(int i,int j){
	return i>j;
	}*/


VI node[1010];
int degree[1010]={0},visited[1010]={0},removed[1010]={0};
int main(){

	int n,m;
	in2(n,m);
	int a,b;
	for(int i=0;i<m;i++){

	   	in2(a,b);
		//	inp(&a);
		//	inp(&b);
		//	degree[a]++;
		//	degree[b]++;
		//	node[a].PB(b);
		//	node[b].PB(a);
	}
	if(n>10){
		printf("2\n");
		return 0;
	}else{
		printf("3\n");
		return 0;
	}
   
	int total=0,cnt=0;
	
	while(true){
		
		int idx=0;	
		for(int i=1;i<=n;i++){
			if(degree[i]>degree[idx])idx=i;
		}
		/*	
		if(idx==0)break;
		degree[idx]=0;
		
		//if(!visited[idx])total++;
		cnt++;
		// 	printf("removed = %d\n ",idx);
	
	   	visited[idx]=1;
		for(int i=0;i<node[idx].size();i++){
			
			//	if(!visited[node[idx][i]]){
			//	visited[node[idx][i]]=1;
				degree[node[idx][i]]--;
				//		total++;
				//	if(total==n)break;
				/*	int curr=node[idx][i];
				for(int j=0;j<=node[curr].size();j++){
					if(!visited[node[curr][j]])degree[node[curr][j]]--;	
					}*/
				//	}
			
		//}

		//	for(int i=1;i<=n;i++)printf("%d ",degree[i]);
		//	printf("\n");
	}
	
	printf("%d\n",cnt);
	return 0;
}

#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<ctime>
#include<assert.h>

#include<cmath>
#include<iostream>
#include<fstream>

#include<string>
#include<vector>
#include<queue>
#include<map>
#include<algorithm>
#include<set>
#include<sstream>
#include<stack>
#include<limits.h>

using namespace std;

#define MAX(a,b) ((a)>(b) ? (a) : (b))
#define MIN(a,b) ((a)<(b) ? (a) : (b))
#define EPS 1e-9
#define asdf exit(0);
#define AB(a) ((a)<(0) ? (-(a)) : (a))
#define EQ(a,b) ( (fabs((a)-(b))<EPS) ? (1) : (0))

typedef long long LL;
//typedef __int64 LL;



char in[10010];
char sp[300];
int isSp[500];


int main()
{
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int i,j,k,N,M;
    int T,L,R;


    scanf("%d",&T);
    while(T--)
    {
      memset(isSp,0,sizeof(isSp));

      scanf("%d %d %d %d %s %s",&N,&M,&L,&R,in,sp);

      for(i=0;i<M;i++) {
        isSp[sp[i]]=1;
      }


      int l=-1,r=-1;
      int lSum=0,rSum=0;
      int ans=0;

      for(i=0;i<N;i++)
      {
        if(l<i)
        {
          l=i;
          lSum=isSp[in[l]];
        }
        if(r<i)
        {
          r=i;
          rSum=isSp[in[r]];
        }

        while((l+1)<N && (lSum)<L )
        {
          lSum+=isSp[in[l+1]];
          l++;
        }

        while((r+1)<N && (rSum+isSp[in[r+1]])<=R)
        {
          rSum+=isSp[in[r+1]];
          r++;
        }


        if(L<=lSum && rSum<=R)
          ans+=(r-l+1);

        lSum-=isSp[in[i]];
        rSum-=isSp[in[i]];

  //      cout<<i<<" "<<l<<" "<<r<<endl;
      }
  //    asdf

      printf("%d\n",ans);
    }





    return 0;
}

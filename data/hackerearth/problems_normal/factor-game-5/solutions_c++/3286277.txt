#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
struct Sieve {
    vi sieve;
    vi primes;
    Sieve ( int maxn ) :sieve ( maxn,-1 ) {

        for ( ll i=2; i<maxn; i++ ) {
            if ( sieve[i]<0 ) {
                int ind=primes.size();
                primes.push_back ( i );
                sieve[i]=ind;
 
                if ( i*i<maxn ) {
                    for ( ll n=i*i; n<maxn; n+=i )
                        sieve[n]=ind;
                }
            }
        }
    }
    vi getUniqueIndizes ( int n ) {
        vi res;
        while ( n>1 ) {
            int ind=sieve[n];
            int fac=primes[ind];
            res.push_back ( ind );

            while ( n%fac==0 ) n/=fac;
        }
        return res;
    }
    vi getIndizes ( int n ) {
        vi res;
        while ( n>1 ) { 
            res.push_back ( sieve[n] );
            n/=primes[sieve[n]];
        }
        return res;
    }
    
    vi getUniqueFactors ( int n ) {
        vi res=getUniqueIndizes ( n );
        rep ( i,res.size() ) res[i]=primes[res[i]];
        return res;

    }
    vi getFactors ( int n ) {
        vi res=getIndizes ( n );
        rep ( i,res.size() ) res[i]=primes[res[i]];
        return res;
    }
    vpii getFactorPairs ( int n ) {
        vi fac=getFactors ( n );
        sort ( all ( fac ) );
        int last=-1;
        int cnt=0;
        vpii res;
        rep ( i,fac.size() ) {
            if ( last!=fac[i] ) {
                if ( cnt>0 )
                    res.push_back ( mp ( last,cnt ) );
                last=fac[i];
                cnt=0;
            }
            cnt++;
        }
        if ( cnt>0 ) res.push_back ( mp ( last,cnt ) );
        return res;

    }
};
const int MAXN=100005;
map<vi, int> grundgis;
int getGrundy ( vi v ) {
    sort(all(v),greater<int>());
    while(v.size() && !v.back())v.pop_back();
    if(!v.size())return 0;
    if ( grundgis.count ( v ) ) return grundgis[v];
    int maxn=0;
    rep ( i,v.size() ) {
       
        v[i]--;
        int x=getGrundy ( v );
        v[i]++;
        maxn=max ( x,maxn );
    }
    grundgis[v]=maxn+1;
    return maxn+1;

}
int main() {
    ios_base::sync_with_stdio ( false );
    Sieve s ( MAXN );
//       cout<<s.getFactorPairs ( 1 ) <<endl;
    vi factors ( MAXN );
    rep ( i,MAXN ) {
        vpii x= s.getFactorPairs ( i );
        vi res;
        for ( pii p: x ) res.push_back ( p.second );
        factors[i]=getGrundy ( res );
    }
//     cout<<vi(factors.begin(),factors.begin()+10);
    int n;
    cin>>n;
    vi a ( n );
    cin>>a;
    int res=0;
    rep ( i,n ) {
        res^=factors[a[i]];
    }
    cout<< ( res?"ALICE\n": "BOB\n" );
}

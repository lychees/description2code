#include<bits/stdc++.h>

using namespace std;

char s[200009];

int a[200009],l,r;

int seg[800009];
int lazy[800009];

void build(int idx,int i,int j)
{
	if(i==j)
	{
		seg[idx] = a[i];

		return;
	}

	int left = 2*idx,right=2*idx+1,mid=(i+j)/2;

	build(left,i,mid);

	build(right,mid+1,j);

	seg[idx]=seg[left]+seg[right];
}


void update(int idx,int i,int j){
	int left = 2*idx,right=2*idx+1,mid=(i+j)/2;

	if(lazy[idx]){
		seg[idx]=(j-i+1)-seg[idx];
		if(i!=j){
			lazy[left]++;
			lazy[right]++;
			lazy[left]%=2; lazy[right]%=2;
		}
		lazy[idx]=0;
	}

	if(i > j || i > r || j < l)
        return;

	if(l<=i && j<=r){
		seg[idx]=(j-i+1)-seg[idx];
		if(i!=j){
			lazy[left]++;
			lazy[right]++;
			lazy[left]%=2; lazy[right]%=2;
		}
		return;
	}

	update(left,i,mid);
	update(right,mid+1,j);

	seg[idx]=seg[left]+seg[right];
	return;
}

int query(int idx,int i,int j){
	int left = 2*idx,right=2*idx+1,mid=(i+j)/2;

	if(lazy[idx]){
		seg[idx]=(j-i+1)-seg[idx];
		if(i!=j){
			lazy[left]++;
			lazy[right]++;
			lazy[left]%=2; lazy[right]%=2;
		}
		lazy[idx]=0;
	}

	if(i > j || i > r || j < l)
        return 0;

	if(l<=i && j<=r){
		return seg[idx];
	}

	int x1,x2;

	x1=query(left,i,mid);
	x2=query(right,mid+1,j);

	seg[idx]=seg[left]+seg[right];

	return x1+x2;
}

int main()
{
	int n,q;
	scanf("%d %d",&n,&q);
	scanf("%s",s);

	for(int i=0;i<n-1;i++){
		if(s[i]=='>'){
			a[i+1]=1;
		}
		else a[i+1]=0;
	}

	build(1,1,n-1);

	for(int i=0;i<800009;i++)
        lazy[i]=0;

	while(q--){
		int z;
		scanf("%d",&z);
		scanf("%d %d",&l,&r);

		if(z==1){
			r--;
			update(1,1,n-1);
		}
		else{
			if(r>l) {
				r--;
				int x=query(1,1,n-1);
				printf("%d\n",(r+1-l)-x);
			}
			else{
				swap(l,r);
				r--;
				int x=query(1,1,n-1);
				printf("%d\n",x);
			}
		}
	}
}

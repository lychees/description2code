#include <bits/stdc++.h>
#include <iostream>
#include <set>
#include <algorithm>
#include <string>
using namespace std;
#define MAX 200005

int bittree[MAX];
int a[MAX];
int b[MAX];


int read(int idx)
{
	int sum = 0;
	while (idx > 0) {
		sum += bittree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}

void update(int idx, int val)
{
	while (idx < MAX) {
		bittree[idx] += val;
		idx += (idx & -idx);
	}
}

bool isprime(long long n)
{
	if (n <= 1) return false;
	if (n == 2) return true;
	if (n % 2 == 0) return false;
	long long m = sqrt(n);

	for (long long i = 3; i <= m; i += 2)
	if (n % i == 0)
		return false;

	return true;
}

void solve()
{
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
	}

	for (int i = 0; i < n; i++) {
		scanf("%d", &b[i]);
	}
	long long inv_cnt = 0;
	for (int i = n - 1; i >= 0; i--) {
		int x = read(a[i] - 1);
		inv_cnt += (long long)x;
		update(b[i], 1);
	}
	if (isprime(inv_cnt)) {
		puts("MAGIC INVERSION");
	}
	else {
		puts("SIMPLE INVERSION");
	}
}

int main()
{

	memset(bittree, 0, sizeof(bittree));
	solve();
	return 0;
}

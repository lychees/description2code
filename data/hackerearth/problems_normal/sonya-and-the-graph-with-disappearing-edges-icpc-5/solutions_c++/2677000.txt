
#include<bits/stdc++.h>

using namespace std;

long long int  in[100005][2];

vector<long long int > vv[1000000];

map<pair<long long int ,long long int >,long long int  > m;

long long int  v;

long long int  bfs(long long int  src)
{
 long long int  visited[v+1],i;
 for(i=1;i<=v;i++) visited[i]=0;  ///no vertex is visited yet
 visited[src]=1;

 queue<pair<long long int ,long long int > > q;

 q.push({src,0});

 while(!q.empty())
 {
 long long int   rem1=q.front().first;
 long long int   rem2=q.front().second;

 // cout<<rem1<<" "<<rem2<<endl;

  q.pop();
  visited[rem1]=1;

  if(rem1==v)
  {
    return rem2;
  }

  for(i=0;i<vv[rem1].size();i++)
  {
   if(visited[vv[rem1][i]]==0 && m[{rem1,vv[rem1][i]}]>rem2)
   {
    //cout<<vv[rem1][i]<<" "<<endl;
    q.push({vv[rem1][i],rem2+1});
   }
  }
 }
 
 return -1;
}





int  main()
{
long long int  i,j,e,ga,p,q,tt,inx;
cin>>v>>e>>ga;

for(i=0;i<e;i++)
{
    cin>>p>>q;
    vv[p].push_back(q);
    vv[q].push_back(p);
    in[i+1][0]=p;
    in[i+1][1]=q;
    m[{in[i+1][0],in[i+1][1]}]=999999999;
    m[{in[i+1][1],in[i+1][0]}]=999999999;
}

for(i=0;i<ga;i++)
{
    cin>>tt>>inx;
    m[{in[inx][0],in[inx][1]}]=tt;
    m[{in[inx][1],in[inx][0]}]=tt;
}

cout<<bfs(1)<<endl;

return 0;
}

#include <bits/stdc++.h>
using namespace std;
void build(int node,int a,int b,vector<int>& tree,vector<int>& v,vector<int>& arr)
{
	if(a>b)
		return;
	if(a==b)
	{
		tree[node]=arr[a];
		return;
	}
	build(node*2,a,(a+b)/2,tree,v,arr);
	build(node*2+1,(a+b)/2+1,b,tree,v,arr);
	tree[node]=max(tree[node*2],tree[node*2+1]);
}
void update(int node,int a,int b,int i,int j,vector<int>& tree,vector<int>& v,int val)
{
    if((a>b)||(a>j)||(i>b))
        return;
        
    if((a>=i)&&(b<=j))
    {
        tree[node]=val;
        return;
    }
    update(node*2,a,(a+b)/2,i,j,tree,v,val);
    update(node*2+1,(a+b)/2+1,b,i,j,tree,v,val);
   tree[node]=max(tree[node*2],tree[node*2+1]);
}
int query(int node,int a,int b,int i,int j,vector<int>& tree)
{
    if((a>b)||(a>j)||(i>b))
        return -1;
    if((a>=i)&&(b<=j))
    {
        return tree[node];
    }
    int q1=query(2*node,a,(a+b)/2,i,j,tree);
    int q2=query(2*node+1,(a+b)/2+1,b,i,j,tree);
    int res=max(q1,q2);
    return res;
}

int main()
{
  	int i,j,ans;
  	vector<int> v(1000001);
  	v[0]=v[1]=1;
  	for(i=2;i<=1000000;i++)
  	{
  		if(v[i]==0)
  		{
  			for(j=2*i;j<=1000000;j=j+i)
  				v[j]=1;
  		}
  	}
  	int n,m,op,a,b;
  	scanf("%d%d",&n,&m);
  	vector<int> tree(4*n),arr(n);
  	for(i=0;i<n;i++)
  	{
  		scanf("%d",&(arr[i]));
  		if(v[arr[i]]==1)
  			arr[i]=-1;
  }
		    	build(1,0,n-1,tree,v,arr);
  	while(m--)
  	{
  		scanf("%d%d%d",&op,&a,&b);
  		if(op==0)
  		{
  			a--;
  			if(v[b]==1)
  				b=-1;
  			update(1,0,n-1,a,a,tree,v,b);
  		}
  		else
  		{
  			a--;
  			b--;
  			ans=query(1,0,n-1,a,b,tree);
  			printf("%d\n",ans);
  		}
  	}
    return 0;
}

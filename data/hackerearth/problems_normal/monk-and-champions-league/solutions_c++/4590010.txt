#include <iostream>
using namespace std;

void max_heap_insert(long int Arr[], long int val, long int &size){
	Arr[++size] = val;
	long int i = size, temp;
	while(i > 1L){
		if(Arr[i / 2L] < Arr[i]){
			temp = Arr[i];
			Arr[i] = Arr[i / 2L];
			Arr[i / 2L] = temp;
			i /= 2L;
		}
		else{
			break;
		}
	}
}

void max_heap_remove(long int Arr[], long int &size){
	Arr[1] = Arr[size--];
	long int largest, i = 1L, temp;
	while(true){
		largest = i;
		if(2 * i <= size && Arr[ 2 * i] > Arr[i])
			largest = 2 * i;
		if( 2* i + 1 <= size && Arr[ 2 * i + 1] > Arr[largest])
			largest = 2 * i + 1;
		if( largest != i){
			temp = Arr[largest];
			Arr[largest] = Arr[i];
			Arr[i] = temp;
			i = largest;
		}
		else{
			break;
		}
	}
}

int main()
{
   long int Arr[1000006], x, n, m, size = 0L;
   long long int amount = 0L;
   cin >> m >> n;
   while(m--){
   	cin >> x;
   	max_heap_insert(Arr, x, size);
   }
   while(n--){
   	x = Arr[1];
   	amount += x;
   	max_heap_remove(Arr, size);
   	max_heap_insert(Arr, x - 1L, size);
   }
   cout << amount;
}

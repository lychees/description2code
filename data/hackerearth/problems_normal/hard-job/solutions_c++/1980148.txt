#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

#define pb push_back
#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
#define sz(x) (int((x).size()))
#define bit(x) (1 << (x))
#define cnt1(x) (__builtin_popcount(x))

template<class T>
inline void chkmax(T& x, T y) {
	if (x < y) x = y;
}

template<class T>
inline void chkmin(T& x, T y) {
	if (y < x) x = y;
}

typedef long long LL;
typedef double DB;
typedef pair<int, int> PII;
typedef vector<int> VI;
const int MX = 1500005;

struct BIT {
	int v[MX];
	int n;
	
	void init(int m) {
		n = m;
		fill_n(v, n + 1, 0);
	}
	
	void add(int k, int d) {
		for (; k <= n; k += k & -k) v[k] += d;
	}
	
	int get(int k) {
		int s = 0;
		for (; k > 0; k -= k & -k) s += v[k];
		return s;
	}
} tr;

int n, m;
int pos[MX];

int main() {
	
	int i, j, k, st, en;
	char s[5];
	
	scanf("%d%d", &n, &m);
	tr.init(m * 2 + n);
	for (i = 1; i <= n; i++) {
		scanf("%d", &j);
		pos[j] = m + i;
		tr.add(pos[j], 1);
	}
	st = m + 1, en = m + n;
	LL tot = 0;
	for (k = 0; k < m; k++) {
		scanf("%d%s", &j, s);
		i = tr.get(pos[j] - 1);
		tot += min(i, n - 1 - i);
		tr.add(pos[j], -1);
		if (s[0] == 'l') pos[j] = --st;
		else pos[j] = ++en;
		tr.add(pos[j], 1);
	}
	printf(LLD "\n", tot);
	return 0;
}

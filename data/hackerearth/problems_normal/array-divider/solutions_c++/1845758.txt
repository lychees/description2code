#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 505, K = 305;
int n, k;
int a[N], s[N];
ll dp[N][K];

inline int get(int l, int r) {
	return s[r] - s[l - 1];
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    
	cin >> n >> k;
	s[0] = 0;
	repu(i, 1, n + 1) {
		cin >> a[i];
		s[i] = s[i - 1] + a[i];
	}
	
	mem(dp, 0);
	repu(i, 1, n + 1) dp[i][1] = s[i] * 1LL * s[i];
	repu(tk, 2, k + 1) {
		repu(i, tk, n + 1) {
			dp[i][tk] = dp[i - 1][tk - 1] + a[i] * 1LL * a[i];
			repu(j, tk - 1, i) {
				int x = get(j + 1, i);
				amin(dp[i][tk], dp[j][tk - 1] + x * 1LL * x);
			}
		}
	}
	
	ll ret = k * dp[n][k] - s[n] * 1LL * s[n];
	cout << ret << endl;
	
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
int timer=0;
#define max 100009
vector<int>v[max];
int starttime[max];
int endtime[max];
int vis[max];
int n;
void dfs(int u)
{
	vis[u]=true;
	starttime[u]=timer++;
	for(int i=0;i<(int)v[u].size();++i)
	{
		if(vis[v[u][i]]==false)
			dfs(v[u][i]);
	}
	endtime[u]=timer++;
}
bool is_subtree(int x,int y)//check s if x lies in the subtree of y
{
	if(starttime[x]>starttime[y] && endtime[x]<endtime[y])
		return true;
	return false;
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n-1;++i)
	{
		int a,b;
		scanf("%d %d",&a,&b);
		v[a].push_back(b);
	}
	timer=0;
	memset(vis,0,sizeof(vis));
	memset(starttime,0,sizeof(starttime));
	memset(endtime,0,sizeof(endtime));
	dfs(1);
	int q;
	scanf("%d",&q);
	while(q--)
	{
		int temp,x,y;
		scanf("%d %d %d",&temp,&x,&y);
		if(temp==1)
		{
			if(is_subtree(x,y))
				puts("YES");
				else puts("NO");
		}
		if(temp==0)
		{
			if(is_subtree(y,x))
				puts("YES");
			else puts("NO");

		}

	}
	return 0;
}

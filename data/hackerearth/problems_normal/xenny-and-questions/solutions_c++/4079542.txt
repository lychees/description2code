/*https://www.hackerearth.com/problem/algorithm/xenny-and-questions/description/
*/
#include <algorithm>
#include <functional>
#include <array>
#include <iostream>
#include <functional>
#include <numeric>
#include <map>
#include <utility>
#include <iterator>

#define ull  unsigned long long int
#define maxSize 100010
#define step 30

using namespace std;

#define ull unsigned long long int
#define maxSize 100010

using namespace std;

int directMap[maxSize];
int input[maxSize];
ull result[maxSize];

int main()
{
    int t,n,k,temp,Max,index;
    ull sum;

    //cin >> t;                                 //No. test case
    scanf("%d",&t);
    for (int var = 0; var < t; ++var)
    {
            //cin >> n >> k;
            scanf("%d%d",&n,&k);
            if(k >= n)
            {
                sum = 0;
                for (int var1 = 0; var1 < n; ++var1)
                {
                    //cin >> temp;
                    scanf("%d",&temp);
                    sum += temp;
                }
            }
            else
            {
                Max = numeric_limits<int>::min();

                for (int var1 = 0; var1 < n; ++var1)
                {
                    //cin >> input[var1];
                    scanf("%d",&input[var1]);
                    Max = max(Max,input[var1]);
                }

                for (int var1 = 0; var1 <= Max; var1++)
                {
                    directMap[var1] = 0;
                }

                for (int var1 = 0; var1 < n; ++var1)
                {
                    directMap[ input[var1]] ++;
                }

                sum = 0;
                index = Max;
                while(k > 0)
                {
                    if(directMap[index] != 0)
                    {
                        if(k > directMap[index])
                        {
                            sum += directMap[index] * index;
                            k -= directMap[index];
                        }
                        else
                        {
                            sum += k * index;
                            k = 0;
                        }
                    }
                    index--;
                }
            }

            result[var] = sum;
    }

    for (int var = 0; var < t; ++var)
    {
        //cout << result[var] << endl;
        printf("%llu\n", result[var]);
    }
}



/*
//https://www.hackerearth.com/problem/algorithm/xenny-and-questions/description/
#include <algorithm>
#include <functional>
#include <array>
#include <iostream>
#include <functional>
#include <numeric>
#include <map>
#include <utility>
#include <iterator>

#define ull  unsigned long long int
#define maxSize 100010
#define step 30

int input[maxSize], Left[maxSize], Right[maxSize];
ull result[maxSize];

using namespace std;

void Merge(int arr[], int l, int m, int r);

void mergeSort(int arr[], int n)
{
   int curr_size, left_start, mid, right_end;
   for (curr_size = 1; curr_size <= n-1; curr_size = 2 * curr_size)
   {
       for (left_start=0; left_start<n-1; left_start += 2 * curr_size)
       {
           mid = left_start + curr_size - 1;
           right_end = min(left_start + 2 * curr_size - 1, n - 1);

           Merge(arr, left_start, mid, right_end);
       }
   }
}

void Merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;

    for (i = 0; i < n1; i++)
    {
        Left[i] = arr[l + i];
    }
    for (j = 0; j < n2; j++)
    {
        Right[j] = arr[m + 1 + j];
    }

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (Left[i] <= Right[j])
        {
            arr[k] = Left[i];
            i++;
        }
        else
        {
            arr[k] = Right[j];
            j++;
        }
        k++;
    }

    while (i < n1)
    {
        arr[k] = Left[i];
        i++;
        k++;
    }

    while (j < n2)
    {
        arr[k] = Right[j];
        j++;
        k++;
    }
}


int main()
{
    int t,n,k,temp;
    ull sum;

    //cin >> t;                                 //No. test case
    scanf("%d",&t);
    for (int var = 0; var < t; ++var)
    {
        //cin >> n >> k;
        scanf("%d%d",&n,&k);

        if(k >= n)
        {
            sum = 0;
            for (int var1 = 0; var1 < n; ++var1)
            {
                //cin >> temp;
                scanf("%d",&temp);

                sum += temp;
            }
        }
        else
        {
             for (int var1 = 0; var1 < n; ++var1)
             {
                //cin >> input[var1];
                scanf("%d",&input[var1]);
             }

             mergeSort(input,n);

             sum = 0;
             for (int var1 = n - 1; var1 > n - k - 1; --var1)
             {
               sum += input[var1];
             }

        }

        result[var] = sum;
    }


    for (int var = 0; var < t; ++var)
    {
        //cout << result[var] << endl;
        printf("%llu\n", result[var]);
    }
}

 */

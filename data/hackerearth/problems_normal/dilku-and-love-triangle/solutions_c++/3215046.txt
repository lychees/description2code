#include <cstdio>
#include <cassert>
#include <vector>
using namespace std;

const int N = 500500;

vector<int> E[N];

const int lgN = 19;
int up[lgN][N];

int D[N];

int L[N], R[N];

int curtime = 0;

void DFS(int x, int p = 0) {
    L[x] = curtime++;
    up[0][x] = p;
    D[x] = D[p] + 1;
    for (int d = 1; d < lgN; d++) {
        up[d][x] = up[d - 1][up[d - 1][x]];
    }
    for (int i = 0; i < E[x].size(); i++) {
        int y = E[x][i];
        if (y == p) {
            E[x].erase(E[x].begin() + i);
            --i;
            continue;
        }
        DFS(y, x);
    }
    R[x] = curtime;
}

int lca(int a, int b) {
    if (D[a] > D[b]) {
        swap(a, b);
    }
    for (int d = lgN - 1; d >= 0; d--) {
        if (D[b] - (1 << d) >= D[a])
            b = up[d][b];
    }
    if (a == b)
        return a;
    for (int d = lgN - 1; d >= 0; d--) {
        if (up[d][a] != up[d][b])
            a = up[d][a], b = up[d][b];
    }
    assert(a != b);
    assert(up[0][a] == up[0][b]);
    return up[0][a];
}

int n;

int F[N];

void add(int x, int v) {
    for (; x < n; x |= x + 1)
        F[x] += v; 
}

int get(int x) {
    int res = 0;
    for (; x >= 0; x &= x + 1, --x)
        res += F[x];
    return res;
}

int main() {
    int q;
    scanf("%d %d", &n, &q);
    for (int i = 0; i < n - 1; i++) {
        int a, b;
        scanf("%d %d", &a, &b);
        --a, --b;
        E[a].push_back(b);
        E[b].push_back(a);
    }
    DFS(0);
    for (int i = 0; i < q; i++) {
        int t;
        scanf("%d", &t);
        if (t == 1) {
            int a, b;
            scanf("%d %d", &a, &b);
            --a, --b;
            int l = lca(a, b);
            add(L[a], 1);
            add(L[b], 1);
            add(L[l], -1);
            if (l != 0)
                add(L[up[0][l]], -1);
        } else {
            int x;
            scanf("%d", &x);
            --x;
            int sum = get(R[x] - 1) - get(L[x] - 1); 
            printf("%d\n", sum);
        }
    }
}

#include <iostream>
#include <string>
#include <vector>
#include <cmath>
using namespace std;

bool Sovle()
{
	int rows, columns;
    vector<string> matrix, _matrix;
    vector<string>::iterator it, _it;
    bool flag;
    cin >> rows >> columns;
    
	matrix.resize(rows);
	_matrix.resize(rows);
    for (int i = 0; i < rows; i++)
    	cin >> matrix[i];

    if(pow(2, columns)-1 < rows)
    	return false;

    _matrix = matrix;

    for (int i = 0; i < rows; i++)
		_matrix[i][0] = 0;

    for (int ignore = 0; ignore < columns; ignore++)
    {

    	flag = true;

    	for (int i = 0; i < rows-1; i++)
	    {
	    	for (int j = i+1; j < rows; j++)
		    {
		    	if(_matrix[i] == _matrix[j])
		    	{
		    		flag = false;
		    		i = rows;
		    		j = rows;
		    	}
		    }
	    }
    	
	    if(flag)
	    	return true;

	    for (int i = 0; i < rows; i++)
	    {
	    	_matrix[i][ignore] = matrix[i][ignore];
	    	_matrix[i][ignore+1] = 0;
	    }
    }
    return false;
}

int main()
{
	ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int T, rows, columns;
    string str;
    cin >> T;
    
    while(T--)
    {
    	if(Sovle())
    		cout << "Yes" << endl;
    	else
    		cout << "No" << endl;
    }
    return 0;
}
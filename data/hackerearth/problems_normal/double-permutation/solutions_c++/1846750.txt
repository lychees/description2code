#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long ll;
typedef vector<ll> vll;

vll temp;
const ll MOD = 1000000007 ;

ll POW ( ll b, ll e )
{
	ll r=1;
	while(e>0)
	{
		if(e%2)		
			r=(r*b)%MOD;
		b=(b*b)%MOD;
		e>>=1;
	}
	return r;
}

ll merge( vll &arr, ll left, ll mid, ll right )
{
	ll i, j, k, inv_count = 0;
	
	i = left;
	j = mid;
	k = left;
	
	while ((i <= mid - 1) && (j <= right))
	{
		if (arr[i] <= arr[j])
			temp[k++] = arr[i++];
		else
		{
			temp[k++] = arr[j++];
			inv_count = inv_count + (mid - i);
		}
	}
	
	while (i <= mid - 1)
		temp[k++] = arr[i++];
	
	while (j <= right)
		temp[k++] = arr[j++];
	
	for (i=left; i <= right; i++)
    	arr[i] = temp[i];
    
    return inv_count;
}

ll mergeSort( vll &arr, ll left, ll right )
{
	ll mid, inv_count = 0;	
	if (right > left)
	{
		mid = (right + left)/2;
		inv_count += mergeSort(arr, left, mid);
		inv_count += mergeSort(arr, mid+1, right);
		inv_count += merge(arr, left, mid+1, right);
	}
	return inv_count;
}

int main()
{
	ios_base::sync_with_stdio(0);
	
	ll n;
	cin >> n; 
	
	vll arr(n+n);
	temp.resize(n+n);
	
	for(int i=0; i<n+n ; i++ )
		cin >> arr[i] ;
	
	cout << ( POW(2,n-1) * ( mergeSort(arr,0,n+n-1) + (n*n)%MOD ) ) % MOD ;
	
	return 0;
}
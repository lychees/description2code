#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<vector>
#include<map>
#include<list>
#include<queue>
#include<algorithm>
#define mod 1000000007
typedef long long li;
using namespace std;

typedef struct data
{
	li q;
	li r;
} data;

/*class comparison		//for Priority Queue
{
	public : 
	bool operator()(customer a,customer b)
	{
		int pra=0,prb=0;
		pra=a.next;
		prb=b.next;
		if(pra<prb)
			return true;
		else
			return false;
	}
};

int comp(const void *a, const void *b)
{
	data m = *((data *)a);
	data n = *((data *)b);
	if(m.a>n.a)
		return 1;
	else if(m.a<n.a)
		return -1;
	else if(m.a==n.a)
	{
		if(m.d>n.d)
			return 1;
		else
			return -1;
	}
}

int exp(int x, int y)
{
	if(y==0)
		return 1;
	int z=0;
	z=exp(x,y/2);
	z=z*z;
	if((y%2)==1)
		z=z*x;
	return z;
}*/

/*Disjoint-Set Data Structure*/
vector<int> L;
void Make_Set(int N)
{
	L.clear();
	L.resize(N+1);
	int i=0;
	for(i=0;i<=N;i++)
	{
		L[i]=i;
	}
}

void union_set(int x, int y)
{
	L[x]=y;
}

int find_set(int x)		//with path compression
{
	if(x==L[x])
		return x;
	int root;
	root=find_set(L[x]);
	L[x]=root;
	return root;
}

int P[100005];
int Q[100005];

int main()
{
	int T=0,N=0,M=0,R=0,i=0,j=0,k=0,l=0,x=0,u=0,v=0,y=0,flag=0;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d%d",&N,&M);
		for(i=0;i<N;i++)
		{
			scanf("%d",&P[i]);
		}
		for(i=0;i<N;i++)
		{
			scanf("%d",&Q[i]);
		}
		Make_Set(N);
		for(i=0;i<M;i++)
		{
			scanf("%d%d",&u,&v);
			u--;
			v--;
			x=find_set(P[u]);
			y=find_set(P[v]);
			if(x!=y)
				union_set(x,y);
		}
		flag=0;
		for(i=0;i<N;i++)
		{
			x=find_set(P[i]);
			y=find_set(Q[i]);
			if(x!=y)
			{
				flag=1;
				break;
			}
		}
		if(flag==1)
			printf("NO\n");	
		else
			printf("YES\n");
	}
	return 0;
}

	
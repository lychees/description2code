/*
Author: nxphuc
Prob: Shil and Greedy approach
Link: https://www.hackerearth.com/problem/algorithm/shil-and-greedy-approach/
Tag: graph, bfs
Comp:
*/

#include <bits/stdc++.h>
using namespace std;

#define ii pair<int,int>
#define fi first
#define se second
#define mp make_pair
const int MAX = 1 << 21;

int f[MAX];
int n, a, b, c;
ii tmp;
string s;
queue<ii> q;

int toInt(string s){
	int ret = 0, p = 1;
	for (int i = s.length() - 1; i >= 0; i--){
		ret += (s[i] - '0')*p;
		p <<= 1;
	}
	return ret;
}

string toString(int x){
	string s = "";
	for (int i = 0; i < n; i++){
		if (x % 2)
			s = "1" + s;
		else
			s = "0" + s;
        x >>= 1;
	}
	return s;
}

string invert(string s, int pos, int len){
	for (int i = 0; i < len; i++)
		s[pos + i] = (char)('0' + '1' - s[pos + i]);
	return s;
}

int main(){
	// freopen("test.in", "rt", stdin);
	cin >> n;
	cin >> s;
	for (int i = 0; i < n; i++)
		s[i] = (s[i] == 'W' ? '0' : '1');
	a = toInt(s);

	f[a] = 1;
	q.push(mp(a, 0));
	while (!q.empty()){
		a = q.front().fi;
		b = q.front().se;
        // tmp = q.front();
        // a = tmp.fi;
        // b = tmp.se;
		q.pop();
		if (a == 0 || a == (1 << n) - 1){
			cout << b;
			break;
		}
		for (int i =0; i < n-1; i++){
			c = a^(1 << i)^(1 << (i+1));
			if (f[c] == 0){
				f[c] = 1;
				q.push(mp(c, b+1));
			}
		}
		for (int i =0; i < n-2; i++){
			c = a^(1 << i)^(1 << (i+1))^(1 << (i+2));
			if (f[c] == 0
				){
				f[c] = 1;
				q.push(mp(c, b+1));
			}
		}
	}
	return 0;
}

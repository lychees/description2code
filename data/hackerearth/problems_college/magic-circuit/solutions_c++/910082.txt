#include <bits/stdc++.h>
using namespace std;

#define ll long long

int n;
int m;
bool graph[1000][1000];

int solve(vector<int> hell)
{
	bool temp[n + 5][m + 5];
	memset(temp, false, sizeof(temp));
	for(int i = 0; i < n; ++i) {
		for(int j = 0; j < m; ++j) {
			temp[i][j] = graph[i][j];
		}
	}
	int sol = 0;
	int size = hell.size();
	for(int i = 0; i < size; ++i) {
		int Y = hell[i];
		sol++;
		temp[0][Y] = !temp[0][Y];
		if(Y - 1 >= 0) temp[0][Y - 1] = !temp[0][Y - 1];if(Y + 1 < m) temp[0][Y + 1] = !temp[0][Y + 1];if(1 < n) temp[1][Y] = !temp[1][Y];
	}

	for(int i = 1; i < n; ++i) {
		for(int j = 0; j < m; ++j) {
			if(temp[i - 1][j] == 1) {
				temp[i][j] = !temp[i][j], sol++;
				if(i + 1 < n) temp[i + 1][j] = !temp[i + 1][j];if(i - 1 >= 0) temp[i - 1][j] = !temp[i - 1][j];if(j + 1 < m) temp[i][j + 1] = !temp[i][j + 1];
				if(j - 1 >= 0) temp[i][j - 1] = !temp[i][j - 1];
			}
		}
	}

	bool flag = false;
	for(int i = 0; i < n && !flag; ++i) {
		for(int j = 0; j < m; ++j) {
			if(temp[i][j] == 1) {
				flag = true;
				break;
			}
		}
	}
	if(flag) return INT_MAX;
	else return sol;
}

void solve()
{
	while(true) {
		scanf("%d%d", &n, &m);
		if(n == 0 && m == 0) break;

		memset(graph, 0,sizeof graph);

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                char chr;
                cin>> chr;
                if(chr == 'X')
                    graph[i][j]=true;
                else
                    graph[i][j]=false ;


            }
        }

		int sol = INT_MAX;
		for(int i = 0; i < (1 << m); ++i) {
			vector<int> hell;
			for(int j = 0; j < m; ++j) {
				if(i & (1 << j)) {
					hell.push_back(j);
				}
			}

			sol = min(sol, solve(hell));
		}

		if(sol < INT_MAX)
			printf("%d\n", sol);
		else
			puts("-1");
	}
}

int main()
{
	solve();
	return 0;
}

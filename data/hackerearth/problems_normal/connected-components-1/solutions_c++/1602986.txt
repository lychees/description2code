#include <bits/stdc++.h>
using namespace std;
const int BASE = int(1e9) + 7;

long long fact[200200], invFact[200200];

long long power(long long x, long long y)
{
  if (!y) return 1;
  long long res = power(x, y / 2);
  res = res * res % BASE;
  if (y % 2) res = res * x % BASE;
  return res;
}

long long c(int n, int k)
{
  return fact[n] * invFact[k] % BASE * invFact[n - k] % BASE;
}

int main()
{
  for (int i = 0; i <= 200000; i++) fact[i] = i ? fact[i - 1] * i % BASE : 1;
  for (int i = 0; i <= 200000; i++) invFact[i] = power(fact[i], BASE - 2);
  
  ios::sync_with_stdio(0);
  int test;
  cin >> test;
  while (test--)
  {
    int n, m, k;
    cin >> n >> m >> k;
    if (m == n)
    {
      cout << (!k) << '\n';
      continue;
    }
    
    long long ans = c(n - m - 1, k - 1);
    if (k - m > 1) ans = 0;
    else ans = ans * c(m + 1, k) % BASE;
    
    cout << ans << '\n';
  }
}

/*    ironstark    */
#include<bits/stdc++.h>
#define pii pair<int,int>
#define fi first
#define se second
#define mp make_pair
#define vpi vector< pii >
#define pb push_back
#define ll long long int
#define mod 1000000007
#define gcd(a,b) __gcd(a,b)
#define sf(n) scanf("%lld",&(n))
#define pf(n) printf("%lld\n",(n))
#define setbits(n) __builtin_popcount((n))
#define pq priority_queue
using namespace std;
int n,m;
ll a,x,c,mo;
int parent[100005];
int getNext()
{
	x=(x*a+c)%mo;
	return x;

}
int root(int a)
{
	while(a!=parent[a])
		{
		    parent[a]=parent[parent[a]];
		    a=parent[a];
		}
	return a;
}
void uni(int a,int b)
{
	int p=root(a);
	int q=root(b);
	parent[p]=parent[q];
}
ll kruskal(vector< pair<int, pii> > &v)
{
	ll ans=0;
    for(int i=0;i<=n;i++)
		parent[i]=i;
	sort(v.begin(),v.end());
	vector<pair<int,pii> >v2;
	for(int i=0;i<v.size();i++)
	{
		int u1=v[i].se.fi;
		int v1=v[i].se.se;
		int w=v[i].fi;
		if(root(u1)!=root(v1))
		{
			ans+=w;
			uni(u1,v1);
			v2.pb(v[i]);

		}
	}
	v=v2;
	return ans;
}
int main()
{


	cin>>n>>m;
	sf(x);sf(a);sf(c);sf(mo);
	int limit=2*n;
	vector< pair< int, pii > > v;
	for(int i=0;i<m;i++)
	{

		int u1=getNext()%n;
        int v1=getNext()%n;
        int w=getNext();
        //cout<<u1<<" "<<v1<<" "<<w<<endl;
		v.pb(mp(w,mp(u1,v1)));
		if(v.size()>limit)
			{
			    int k=kruskal(v);
			    //pf(k);
			}
	}
	pf((kruskal(v)));

}

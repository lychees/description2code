#include<bits/stdc++.h>
using namespace std;
int find(int parent[],int idx)
{
    if(parent[idx]==idx)
    return idx;
    parent[idx]=find(parent,parent[idx]);
    return parent[idx];
}
void Union(int parent[],int x,int y)
{
    parent[x]=y;
}
int main()
{
    int n,i;
    cin>>n;
    int parent[n];
    int rank[n];
    for(i=1;i<=n;i++)
    {
        parent[i]=i;
        rank[i]=1;
    }
    int q,x,y,diff;
    set<int> s;
    cin>>q;
    int maxi=1,index=-1,mini=INT_MAX,flag=0;
    while(q--)
    {
       cin>>x>>y;
       if(index==x || index==y)
        flag=0;
       else if(index!=-1)
        flag=1;
       s.insert(x);
       s.insert(y);
       int px=find(parent,x);
       int py=find(parent,y);
       if(px==py)
        cout<<diff<<endl;
       else
       {
            Union(parent,px,py);
            rank[py]+=rank[px];
            rank[px]=0;
            maxi=max(maxi,rank[py]);
            if(s.size()!=n)
            {
                diff=maxi-1;
                cout<<diff<<endl;
            }
            else
            {
                if(flag==0)
                {
                    for(i=1;i<=n;i++)
                    {
                        if(rank[i]>0)
                        {
                            mini=min(mini,rank[i]);
                            index=i;
                            flag=1;
                        }
                    }
                }
                if(maxi==n)
                {
                    diff=0;
                    cout<<diff<<endl;
                }
                else
                {
                    diff=maxi-mini;
                    cout<<diff<<endl;
                }
            }
       }
    }
    return 0;
}

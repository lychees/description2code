#include <iostream>
#include <string>
#include <sstream>
#include <cstdlib>
using namespace std;

int GetSign(int x)
{
        if (x > 0) return 1;
        if (x < 0) return -1;
        return 0;
}

int xcoord(string x) 
{
   int result;
 
   if ( x == "a")
   {
   	result = 1;
   }
   else if ( x == "b" )
   {
   	result = 2;
   }
   else if ( x == "c" )
   {
   	result = 3;
   }
   else if ( x == "d" )
   {
   	result = 4;
   }
   else if ( x == "e" )
   {
   	result = 5;
   }
   else if ( x == "f" )
   {
   	result = 6;
   }
   else if ( x == "g" )
   {
   	result = 7;
   }
   else
   {
   	result = 8;
   }
   return result;
}

bool knightCheck( int blackKingXPosition, int blackKingYPosition, int knightXPosition, int knightYPosition )
{
	if ( abs(blackKingXPosition - knightXPosition) == 1 )
	{
		if ( abs(blackKingYPosition - knightYPosition) == 2 )
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	else if ( abs(blackKingXPosition - knightXPosition) == 2 )
	{
		if ( abs(blackKingYPosition - knightYPosition) == 1 )
		{
			return 1;
		}
	}
	else
	{
		return 0;
	}
}

bool bishopCheck( int blackKingXPosition, int blackKingYPosition, int whiteKingXPosition, int whiteKingYPosition, int bishopXPosition, int bishopYPosition )
{	
				return abs(blackKingXPosition - bishopXPosition) == abs(blackKingYPosition - bishopYPosition)
                && abs(blackKingXPosition - bishopXPosition) <= 7
                &&
                !(
                        abs(blackKingXPosition - whiteKingXPosition) == abs(blackKingYPosition - whiteKingYPosition)
                        && GetSign(blackKingXPosition - whiteKingXPosition) == GetSign(blackKingXPosition - bishopXPosition)
                        && GetSign(blackKingYPosition - whiteKingYPosition) == GetSign(blackKingYPosition - bishopYPosition)
                        && abs(blackKingXPosition - bishopXPosition) > abs(blackKingXPosition - whiteKingXPosition)
                );
}

bool rookCheck( int blackKingXPosition, int blackKingYPosition, int whiteKingXPosition, int whiteKingYPosition, int rookXPosition, int rookYPosition )
{
	if ( rookXPosition == blackKingXPosition ) //On same y-axis
	{
		if ( whiteKingXPosition == rookXPosition ) //White king also on same y-axis
		{
			if ( ( whiteKingYPosition > blackKingYPosition && rookYPosition > whiteKingYPosition ) || ( whiteKingYPosition < blackKingYPosition && whiteKingYPosition > rookYPosition ) )
			{
				return 0;
			}
			else
			{
				return 1;
			}
		}
		else
		{
			return 1;
		}
	}
	else if ( rookYPosition == blackKingYPosition ) //On same x-axis
	{
		if ( whiteKingYPosition == rookYPosition ) //White king also on same x-axis
		{
			if ( ( whiteKingXPosition < blackKingXPosition && whiteKingXPosition > rookXPosition ) || ( whiteKingXPosition > blackKingXPosition && whiteKingXPosition < rookXPosition ) )
			{
				return 0;
			}
			else
			{
				return 1;
			}
		}
		else
		{
			return 1;
		}
	}
	else
	{
		return 0;
	}
}

int main()
{
	int T;
	string piecePosition;
	string queenKnightBishopRook;
	string queenKnightBishopRookPosition;
	
	int blackKingXPosition;
	int blackKingYPosition;
	int whiteKingXPosition;
	int whiteKingYPosition;
	int queenKnightBishopRookXPosition;
	int queenKnightBishopRookYPosition;
	
	cin >> T;
    
    while(!cin.eof())
    {
		cin >> piecePosition;
		
		blackKingXPosition = xcoord( piecePosition.substr(0,1) );
		stringstream( piecePosition.substr(1,1) ) >> blackKingYPosition;
				
		cin >> piecePosition;
				
		whiteKingXPosition = xcoord( piecePosition.substr(0,1) );
		stringstream(piecePosition.substr(1,1)) >> whiteKingYPosition;
		
		cin >> queenKnightBishopRook;
		cin >> queenKnightBishopRookPosition;
		
		queenKnightBishopRookXPosition = xcoord( queenKnightBishopRookPosition.substr(0,1) );
		stringstream(queenKnightBishopRookPosition.substr(1,1)) >> queenKnightBishopRookYPosition;
		
		if ( queenKnightBishopRook == "q")
		{
			//cout<<"Queen"<<endl;
			if( bishopCheck(blackKingXPosition,blackKingYPosition,whiteKingXPosition,whiteKingYPosition,queenKnightBishopRookXPosition,queenKnightBishopRookYPosition) || rookCheck(blackKingXPosition,blackKingYPosition,whiteKingXPosition,whiteKingYPosition,queenKnightBishopRookXPosition,queenKnightBishopRookYPosition) )
			{
				cout<<"check"<<endl;
			}
			else
			{
				cout<<-1<<endl;
			}
		}
		else if ( queenKnightBishopRook == "k")
		{
			//cout<<"Knight"<<endl;
			if( knightCheck(blackKingXPosition,blackKingYPosition,queenKnightBishopRookXPosition,queenKnightBishopRookYPosition) )
			{
				cout<<"check"<<endl;
			}
			else
			{
				cout<<-1<<endl;
			}
		}
		else if ( queenKnightBishopRook == "b")
		{
			//cout<<"Bishop"<<endl;
			if( bishopCheck(blackKingXPosition,blackKingYPosition,whiteKingXPosition,whiteKingYPosition,queenKnightBishopRookXPosition,queenKnightBishopRookYPosition) )
			{
				cout<<"check"<<endl;
			}
			else
			{
				cout<<-1<<endl;
			}
		}
		else if ( queenKnightBishopRook == "r")
		{
			//cout<<"Rook"<<endl;
			if( rookCheck(blackKingXPosition,blackKingYPosition,whiteKingXPosition,whiteKingYPosition,queenKnightBishopRookXPosition,queenKnightBishopRookYPosition) )
			{
				cout<<"check"<<endl;
			}
			else
			{
				cout<<-1<<endl;
			}
		}
    }
    return 0;
}
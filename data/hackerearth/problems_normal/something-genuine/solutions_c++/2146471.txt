#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second
#define INPUT freopen("july_clash.inp","r",stdin)
#define OUTPUT freopen("july_clash.out","w",stdout)
#define FOR(i,l,r) for(auto i=l;i<=r;i++)
#define REP(i,l,r) for(auto i=l;i<r;i++)
#define FORD(i,l,r) for(auto i=l;i>=r;i--)
#define REPD(i,l,r) for(auto i=l;i>r;i--)
#define ENDL printf("\n")
#define debug 1

typedef long long ll;
typedef pair<int,int> ii;

const int inf=1e9;
const int MOD=1e9+7;
const int N=2e5+10;

int b[N<<2],laz[N<<2],a[N],n,last[N];
void lazyupdate(int node,int L,int R){
    b[node]=(b[node]+1LL*laz[node]*(R-L+1))%MOD;
    if (L<R) FOR(i,0,1) laz[node*2+i]=(laz[node*2+i]+laz[node])%MOD;
    laz[node]=0;
}
void update(int node,int L,int R,int l,int r,int v){
    lazyupdate(node,L,R);
    if (L>r||R<l) return;
    if (l<=L&&R<=r){
        laz[node]+=v;
        lazyupdate(node,L,R);
        return;
    }
    update(node*2,L,(L+R)/2,l,r,v);
    update(node*2+1,(L+R)/2+1,R,l,r,v);
    b[node]=(b[node*2]+b[node*2+1])%MOD;
}
int get(int node,int L,int R,int l,int r){
    lazyupdate(node,L,R);
    if (L>r||R<l) return 0;
    if (l<=L&&R<=r) return b[node];
    return (get(node*2,L,(L+R)/2,l,r)+get(node*2+1,(L+R)/2+1,R,l,r))%MOD;
}
int main(){
    scanf("%d",&n);
    FOR(i,1,n) scanf("%d",a+i);
    ll ans=0,cur=0;
    FOR(i,1,n){
        int j=last[a[i]]+1;
        cur=(cur+2LL*get(1,1,n,j,i-1)+i-j+1)%MOD;
        ans=(ans+cur)%MOD;
//        printf("%d %d %lld %lld\n",i,j,cur,ans);
        update(1,1,n,j,i,1);
        last[a[i]]=i;
    }
    cout<<ans;
}

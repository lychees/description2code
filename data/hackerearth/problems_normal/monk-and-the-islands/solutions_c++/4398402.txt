//DEEPAK AHIRE
#include <bits/stdc++.h>
using namespace std;

#define MAX 100005
#define INF 1000000009

int n;
vector<int> adj[MAX];

map<pair<int,int> ,int > wei;

int dist[MAX];

int visited[MAX];

struct node
{
    int id;
    int distance;

    bool operator < (const node& t) const
    {
        if(distance > t.distance) return true;
        return false;
    }
};


void addEdge(int x,int y,int w)
{

    adj[x].push_back(y);
    adj[y].push_back(x);

   // wei[make_pair(x,y)]=w;
    //wei[make_pair(y,x)]=w;

}

priority_queue <node> que;

int dijkstra(int source)
{
    node temp;
    temp.id=source;
    temp.distance=0;
    dist[source]=0;
	while(!que.empty())
	que.pop();
    que.push(temp);

    while(!que.empty())
    {
        node temp = que.top();
        visited[temp.id]=2;
        que.pop();
		if(temp.id==n){return temp.distance;}
        for(int i=0;i<adj[temp.id].size();i++)
        {
                if(visited[adj[temp.id][i]] != 2)
                {
                   if(temp.distance + 1 < dist[adj[temp.id][i]])
                   {

                       dist[adj[temp.id][i]] = temp.distance  + 1;
                       visited[adj[temp.id][i]]=2;
                       node temp2;
                       temp2.id=adj[temp.id][i];
                       temp2.distance=dist[adj[temp.id][i]];
                       que.push(temp2);

                   }
                }
        }
    }
    return dist[n];
}

int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {

        memset(visited,0,sizeof(visited));

        for(int i=1;i<=100000;++i)
            dist[i]=1000000;
        int m;
        scanf("%d %d",&n,&m);

        while(m--)
        {
            int x,y,r=1;
            scanf("%d %d",&x,&y);
            addEdge(x,y,r);

        }


        cout<<dijkstra(1)<<endl;
       
        for(int i=0;i<=n;i++)
            adj[i].clear();
        wei.clear();
    }

    return 0;
}

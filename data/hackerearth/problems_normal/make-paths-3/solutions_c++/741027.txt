#include<bits/stdc++.h>
using namespace std;

priority_queue<pair<int,pair<int,int> >,vector<pair<int,pair<int,int> > >,greater<pair<int,pair<int,int> > > > pq;
 
vector<vector<pair<int,int> > > graph;

vector<int> parent;

int findParent(int x)
 {
 	if(parent[x]==x)
 	  return x;
 	else
 	 {
 	 int y=findParent(parent[x]);
 	 parent[x]=y;
 	 return y;
     }
 }

int main()
{
 
	int n,v,i,x,y,d;
	cin>>n;
 	//graph.resize(n);
 	parent.resize(n);
 	vector<pair<int,pair<int,int> > > v1,v2;
 	for(i=0;i<n;i++)
 	{
 	  	cin>>x>>y;
		v1.push_back(make_pair(x,make_pair(y,i))); 	
		v2.push_back(make_pair(y,make_pair(x,i))); 	
		  	
 	}
 	
 	sort(v1.begin(),v1.end());
 	sort(v2.begin(),v2.end());
 	
 	for(i=0;i<n-1;i++)
 	  {
 	  	pq.push(make_pair(min(abs(v1[i].first-v1[i+1].first),abs(v1[i].second.first-v1[i+1].second.first)),make_pair(v1[i].second.second,v1[i+1].second.second)));
        pq.push(make_pair(min(abs(v2[i].first-v2[i+1].first),abs(v2[i].second.first-v2[i+1].second.first)),make_pair(v2[i].second.second,v2[i+1].second.second)));
        
 	  }
 	
 	for(i=0;i<n;i++)
 	  parent[i]=i;
 	  
 	  
 	int taken=0;
 	long long cost=0;
 	pair<int,pair<int,int> > node;
 	while(!pq.empty())
 	  {
 	   node=pq.top();
 	   pq.pop();
 	   x=findParent(node.second.first);
 	   y=findParent(node.second.second);
 	   //cout<<"trying "<<node.first<<" "<<node.second.first<<endl;
 	   if(x!=y)
 	     {
 	     	parent[x]=y;
 	     	//
			  //parent[node.second.first]=y;
 	     	//parent[node.second.second]=y;
 	     	
 	     //	taken++;
 	     	cost+=node.first;
 	     }
 	   
 	  }
 	 
 	cout<<cost<<endl;

 	
 }
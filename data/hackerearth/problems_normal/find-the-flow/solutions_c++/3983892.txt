#include <bits/stdc++.h>

#define vinayawsm using
#define VinayKumarBingi namespace std;

vinayawsm VinayKumarBingi;

#define bug() printf("BUG\n")
#define bug1(n) cout<<"bg1 "<<n<<endl;
#define bug2(a,b) cout<<"bg2 "<<a<<" "<<b<<endl;
#define bug3(a,b,c) cout<<"bg3 "<<a<<" "<<b<<" "<<c<<endl;
#define MOD 1000000007
#define ll long long
#define vi vector< int >
#define vll vector< long long >
#define vvi vector< vector< int > >
#define vvll vector< vector< long long > >
#define pi pair< int, int >
#define pll pair< long long, long long >
#define vpi vector< pair< int, int > >
#define vpll vector< pair< long long, long long > >
#define pb(n) push_back(n)
#define mp(a,b) make_pair(a,b)
#define printA(a,n) for(int lolol = 0;lolol < n;++lolol) cout<<a[lolol]<<" "; cout<<endl;

int Gr[26][26];
//int Gl[26][26];

int flow = 0,tf = INT_MAX;
int u[26] = {0};

void print2A()
{
	printf("\n");
	for (int i = 0; i < 26; ++i)
	{
		for (int j = 0; j < 26; ++j)
		{
			printf("%d ", Gr[i][j]);
		}
		printf("\n");
	}
}

int pathExists()
{
	queue< int > q;
	q.push(18);
	int x;
	int alreadyIn[26] = {0};
	alreadyIn[18] = 1;
	while(!q.empty())
	{
		x = q.front();
//		bug1(q.size());
		q.pop();
		for (int i = 0; i < 26; ++i)
		{
			if (Gr[x][i] >= 1 && alreadyIn[i] != 1)
			{
//				bug();
//				bug2(x,i);
				alreadyIn[i] = 1;
				q.push(i);
				u[i] = x;
			}
		}
	}
	if(alreadyIn[19] == 1)
		return 1;
	else
		return 0;
}

void pathInv()
{
	for (int i = 19; i != 18; i = u[i])
	{
		tf = min(tf,Gr[u[i]][i]);
	}
	for (int i = 19; i != 18; i = u[i])
	{
		Gr[u[i]][i] -= tf;
		Gr[i][u[i]] += tf;
	}
	flow += tf;
}

int main()
{
	int n;
	cin>>n;
	assert(n >= 1 && n <= 50);
	char v1,v2;
	int cx;
	for (int i = 0; i < n; ++i)
	{
		cin>>v1>>v2>>cx;
		assert((v1 >= 'A' && v1 <= 'O') || (v1 >= 'S' && v1 <= 'T'));
		assert((v2 >= 'A' && v2 <= 'O') || (v2 >= 'S' && v2 <= 'T'));
		assert(cx >= 1 && cx <= 50);
		Gr[v1-'A'][v2-'A'] += cx;
	}
	for (int i = 0; i < 26; ++i)
	{
		for (int j = 0; j < 26; ++j)
		{
			assert(!(Gr[i][j] > 0 && Gr[j][i] > 0));
		}
	}
	int cnt = 0;
	while(pathExists())
	{
//		print2A();
//		findPath(18);
		pathInv();
		tf = INT_MAX;
	}
//	print2A();
	cout<<flow<<endl;
	return 0;
}
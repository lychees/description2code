#include <iostream>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <functional>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <stack>
#include <queue>
#include <deque>
#include<cmath>
using namespace std;
#define iterator IT
#define ll long long
#define MAXN 100000
#define MP(X,Y) make_pair(X,Y)
#define pb(X) push_back(X)
ll max(ll a, ll b) { return (a > b)? a : b; }
ll absa(ll a){return a<0?-a:a;}
ll knapSack(ll W, ll wt[], ll val[], ll n)
{
   ll i, w;
   ll K[n+1][W+1];
	ll WT[n+1][W+1];
	memset(WT,0,sizeof(WT));
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0,WT[i][w]=0;
           else if (wt[i-1] <= w){
                 WT[i][w] = max(wt[i-1] + WT[i-1][w-wt[i-1]],  WT[i-1][w]);
                 }
           else
                 WT[i][w]=WT[i-1][w];
       }
   }
 return WT[n][W];
  }

int main(){
	ll t,i;
	cin>>t;

	
	while(t--){
		ll arr[1000],a[1000],cap[1000];
		ll n,k,sum=0;
			vector<pair<ll,ll> > vec;
		cin>>n;
		for(i=0;i<n;i++)
		cin>>arr[i];
		
		for(int j=0;j<n;j++)
			cap[j]=1;
		//cout<<knapSack(sum/2,arr,cap,n);
		for(i=0;i<n;i++){
		int k=0;sum=0;
			for(int j=0;j<n;j++)
				if(j!=i)
				a[k++]=arr[j],sum+=arr[j];
			for(int j=0;j<n-1;j++)
			cap[j]=1;
			//cout<<sum-knapSack(sum/2,a,cap,n-1)<<" "<<arr[i]<<endl;
		vec.pb(MP(absa(sum-2*knapSack(sum/2,a,cap,n-1)),arr[i]));
		}
		sort(vec.begin(),vec.end());
		cout<<vec[0].first<<" "<<vec[0].second<<endl;
		}
	return 0;
	}

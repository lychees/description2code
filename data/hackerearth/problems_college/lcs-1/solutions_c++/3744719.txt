#include <bits/stdc++.h>
using namespace std;

/*
*/


struct SuffixArray {
  const int L;
  vector<int> s;
  vector<vector<int> > P;
  vector<pair<pair<int,int>,int> > M;

  SuffixArray(const vector<int> &s) : L(s.size()), s(s), P(1, vector<int>(L, 0)), M(L) {
    for (int i = 0; i < L; i++) P[0][i] = int(s[i]);
    for (int skip = 1, level = 1; skip < L; skip *= 2, level++) {
      P.push_back(vector<int>(L, 0));
      for (int i = 0; i < L; i++) 
	M[i] = make_pair(make_pair(P[level-1][i], i + skip < L ? P[level-1][i + skip] : -1000), i);
      sort(M.begin(), M.end());
      for (int i = 0; i < L; i++) 
	P[level][M[i].second] = (i > 0 && M[i].first == M[i-1].first) ? P[level][M[i-1].second] : i;
    }    
  }

  vector<int> GetSuffixArray() { return P.back(); }

  // returns the length of the longest common prefix of s[i...L-1] and s[j...L-1]
  int LongestCommonPrefix(int i, int j) {
    int len = 0;
    if (i > j)
    	swap(i, j);
    if (i == j) return L - i;
    for (int k = P.size() - 1; k >= 0 && i < L && j < L; k--) {
      if (P[k][i] == P[k][j]) {
	i += 1 << k;
	j += 1 << k;
	len += 1 << k;
      }
    }
    return len;
  }
};

char S[200005];
int inv[500005];
int nxt[500005];
int prv[500005];

int main()
{
	int n;
	scanf("%d", &n);
	vector<int> s;
	int cnt = 0;
	for (int i = 0; i < n; i++)
	{
		scanf("%s", S);
		int len = strlen(S);
		for (int j = 0; j < len; j++)
		{
			s.push_back((int)(S[j]-'a') + 3000);
		}
		s.push_back(cnt);
		cnt++;
	}
	int all = s.size();
	vector<int> start;
	vector<int> len;
	int q;
	scanf("%d", &q);
	int cur = 0;
	int mx = 0;
	for (int i = 0; i < q; i++)
	{
		scanf("%s", S);
		int l = strlen(S);
		start.push_back(s.size());
		len.push_back(l);
		for (int j = 0; j < l; j++)
		{
			s.push_back((int)(S[j]-'a') + 3000);
		}
		s.push_back(cnt++);
	}
	SuffixArray suff(s);
	vector<int> sa = suff.GetSuffixArray();
	memset(inv, -1, sizeof(inv));
	for (int i = 0;i < sa.size(); i++)
	{
		inv[sa[i]] = i;
	}
	memset(nxt, -1, sizeof(nxt));
	memset(prv, -1, sizeof(prv));
	for (int i = 1; i < sa.size(); i++)
	{
		if (inv[i-1] < all)
			prv[i] = i-1;
		else
			prv[i] = prv[i-1];
	}
	for (int i = sa.size()-2; i >= 0; i--)
	{
		if (inv[i+1] < all)
			nxt[i] = i+1;
		else
			nxt[i] = nxt[i+1];
	}
	for (int i = 0; i < q; i++)
	{
		int mx = 0;
		for (int j = 0; j < len[i]; j++)
		{
			int in = start[i]+j;
			if (prv[sa[in]] != -1)
				mx = max(mx, suff.LongestCommonPrefix(in, inv[prv[sa[in]]]));
			if (nxt[sa[in]] != -1)
				mx = max(mx, suff.LongestCommonPrefix(in, inv[nxt[sa[in]]]));
		}
		printf("%d\n", mx);
	}
}
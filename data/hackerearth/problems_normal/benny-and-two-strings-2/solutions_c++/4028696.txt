#include <bits/stdc++.h>
using namespace std;
#define e1 first
#define e2 second
#define pb push_back
#define mp make_pair
#define boost ios_base::sync_with_stdio(false)
#define eb emplace_back
#define OUT(x) {cout << x; exit(0); }
#define FOR(i,a,b) for(int i=(a);i<=(b);++i)
#define scanf(...) scanf(__VA_ARGS__)?:0
typedef long long ll;
typedef unsigned long long ull;
typedef pair <int, int> PII;
typedef pair <ll, ll> PLL;
typedef pair <PLL, PLL> PP;
typedef pair <PII, int> PPI;
typedef pair <ll, int> PLI;
typedef unsigned int ui;
const ll mod = 1e9+696969;
const int inf = 1e9+9;
const ll MOD = 1e9+696969;
const ll INF = 1e18;
int n, m, a, b, c, T, k;
#define maxn 510
char wzorzec[310], s[310];
int dp[maxn][maxn];

inline int dist(char a, char b) {
	if (a > b) swap(a, b);
	return min(b - a, 26 + a - b);
}

inline int count(int i, int j, int lastpos) {
	int ret = 0;
	int ps = lastpos - m + 1;
	for (int a=i; a<=j; ++a) {
	  if (a > lastpos) ret += dist(s[a], wzorzec[a - i + 1]);
	  else if (a - ps + 1 > 0 && wzorzec[a - i + 1] != wzorzec[a - ps + 1]) return inf; //nigdy sie nie da, poniewaz te literki sie nie zgadzaja
  }
  return ret;
}

inline int getDP(int a, int b) {
	if (a < 0 || b < 0) return -1;
	return dp[a][b];
}

int cnt[maxn][maxn];

int PI[maxn];

int main() {
	scanf("%d%d%d", &m, &n, &k);
	scanf("%s", wzorzec+1);
	scanf("%s", s + 1);
	if (m > n) OUT(0);
	for (int i=0; i<=n; ++i)
	  for (int j=0; j<=n; ++j) cnt[i][j] = inf;
	  
	for (int i=m; i<=n; ++i)
	  for (int j=0; j<=n; ++j) cnt[i][j] = count(i - m + 1, i, j);

	//for (int i=1; i<=n; ++i)
	  //for (int j=0; j<=n; ++j) printf("%d %d : %d\n", i, j, cnt[i][j]);
	  
	int MAKS = 0;
	for (int i=m; i<=n; ++i)
	  for (int ile=0; ile<=k; ++ile) {
		dp[i][ile] = dp[i-1][ile];
	    for (int j=0; j<i; ++j) {
			int KK = cnt[i][j];
			dp[i][ile] = max(dp[i][ile], getDP(j, ile - KK) + 1);
		}
		MAKS = max(MAKS, dp[i][ile]);
	}
	printf("%d", MAKS);
}

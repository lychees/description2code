#include <iostream>
#include <math.h>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <fstream>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>

#define ALL(x) (x).begin(), (x).end()
#define mp make_pair
#define vec vector
#define deb(x) cerr << #x << " = " << x << '\n';

typedef unsigned long long ull;
typedef long double LD;
typedef long long LL;

const LL inf = 1000000000ll;
const LL inf64 = inf * inf;
const LL base = inf * 1000ll + 17;
const LL MOD = inf + 9;
const double pi = acos(-1.0);

using namespace std;

template<typename T, typename P>
const ostream & operator << (ostream & os, const pair<T, P> & a) {
    os.precision(10);
    os << fixed;
    os << a.first;
    os << ' ';
    os << a.second;
    os << '\n';
    return os;
}

const LL MAXLEN = 100000000ll;

struct pt {
	int x, y;
	pt() {
		x = y = 0;
	}
	void read() {
		scanf("%d %d", &x, &y);
	}
};

LL dist(pt a, pt b) {
	LL x = a.x - b.x;
	LL y = a.y - b.y;
	return (x * x + y * y);
}

struct tg {
	LL num, denum;
	tg() {
		num = -inf;
		denum = 0;
	}
	tg(pt a, pt b) {
		num = b.y - a.y;
		denum = b.x - a.x;
		if(denum < 0) num *= -1, denum *= -1;
	}
	bool operator >= (tg t) {
		LL a, b, c, d;
		a = num, b = denum;
		c = t.num, d = t.denum;
		return (a * d >= b * c);
	}
	const tg & operator = (const tg & b) { 
		num = b.num;
		denum = b.denum;
		return *this;
	}
};

bool solve()
{
	int n;
	scanf("%d", &n);

	vec< pt > a(n);
	for(int i = 0;i < n;i++) a[i].read();

	int ans = 0;
	tg maxk, k;

	for(int i = 0;i < n;i++) {
		maxk = tg();
		for(int j = i + 1;j < n;j++) {
			k = tg(a[i], a[j]);
			if(k >= maxk) {
				ans++;
				maxk = k;
			}
		}
	}

	cout << ans << '\n';

    return true;
}   

int main() 
{
	//while(solve());
    solve();

    return 0;
}
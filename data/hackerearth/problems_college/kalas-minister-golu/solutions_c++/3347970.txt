#include <iostream>
#include<algorithm>
#include<stdio.h>
using namespace std;

//pair<long long int, pair<int,int>> p[200005];
long long int v[100005];
pair<int,int> root[100005];

int find(int i)
{
	if(i==root[i].first)
		return i;
	else
		return root[i].first=find(root[i].first);
}

void unionset(int x,int y)
{
	int a=find(x);
	int b=find(y);
	if(a!=b)
		root[b].first=a;
}

int main()
{
	int t,n,m,i,j,x,y,min,min1,cur,mini;
	long long int c;
	
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d %d",&n,&m);
		for(i=1;i<=n;i++)
		{
			scanf("%lld",&v[i]);
			root[i]=make_pair(i,i);
		}
		for(i=0;i<m;i++)
		{
			scanf("%d %d",&x,&y);
	//		p[i]=make_pair(v[x]*v[y],make_pair(x,y));
			unionset(x,y);
		}
		
		for(i=1;i<=n;i++)
			root[i].first=find(root[i].first);
		
		c=0;
		sort(root+1,root+n+1);
		
		// for(i=1;i<=n;i++)
		// 	cout<<root[i].first<<"   "<<root[i].second<<endl;
		
		min=10000000;
		for(i=1;i<=n;i++)
		{
			if(v[root[i].second]<min)
			{
				min=v[root[i].second];
				mini=root[i].first;
			}
		}
		
//		printf("min : %d  %d\n",min,i);
		
		for(i=1;i<=n;i++)
		{
			min1=10000000;
			cur=root[i].first;
			if(cur==mini)
				continue;
//			printf("cur: %d  ",cur);
			while(i<=n && root[i].first==cur)
			{
				if(v[root[i].second]<min1)
					min1=v[root[i].second];
				i++;
			}
			i--;
//			printf("min1 : %d\n",min1);
			c+=(min*min1);
			if(min1<min)
				min=min1;
		}
		
		printf("%lld\n",c);
	}
	
    return 0;
}

from collections import defaultdict
from math import factorial


def dfs(elem, visited, Graph):
    cola = Graph[elem]
    nodes = 1
    while cola:
        item = cola.pop()
        if visited[item-1]:
            continue
        visited[item-1] = True
        nodes += 1
        cola.extend(Graph[item])
    return nodes


def solve():
    N, K = map(int, raw_input().strip().split())

    Graph = defaultdict(list)

    for i in xrange(K):
        x, y = map(int, raw_input().strip().split())
        Graph[x].append(y)
        Graph[y].append(x)

    visited = [False] * N
    ans = 1
    for i in Graph.keys():
        if visited[i-1]:
            continue
        visited[i-1] = True
        xx = dfs(i, visited, Graph)
        ans *= (factorial(xx)/(2 * factorial(xx-2)))
        ans %= (10**9 + 7)
    print ans


T = input()
for i in xrange(T):
    solve()

#include <bits/stdc++.h>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef map<int,int> mii;


// Input macros
#define s(n)                        cin >> n
#define sc(n)                       scanf("%c",&n)
#define ss(n)                       scanf("%s",n)
#define ll 							long long 				
// Useful constants
#define INF                         (int)1e9
#define EPS                         1e-9
// Useful hardware instructions
#define bitcount                    __builtin_popcount
#define gcd                         __gcd
// Useful container manipulation / traversal macros
#define forall(i,a,b)        		for(int i=a;i<b;i++)
#define sz(a) 						int((a).size())
#define pb 							push_back
#define all(c) 						(c).begin(),(c).end()
#define tr(c,i) 					for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define cpresent(c,x) 				(find(all(c),x) != (c).end())		// for set/maps
#define present(c,x) 				((c).find(x) != (c).end()) 		// for vectors
#define fillA(arr,a,b,v)              forall(i,a,b) arr[i]  = v
#define fillV(a,v)                    memset(a, v, sizeof a)
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define checkbit(n,b)                ( (n >> b) & 1)
#define DREP(a)                      sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)               (lower_bound(all(arr),ind)-arr.begin())
#define fi 						     first
#define se 							 second
#define printA(arr,a,b) forall(i,a,b) cout << arr[i] << (i==(b-1)?'\n':' ')
#define printV(a) printA(a,0,a.size())
#define pf(n)	cout << n << endl;
#define pff(n)	cout << fixed << setprecision(10) << n << endl;

struct edge
{
	/* data */
	int dest;
	int weight;
};

struct node
{
	/* data */
	int index;
	int val;
};

class Compare{
public:
	bool operator()(node a, node b){
		return a.val > b.val;
	}
};

int main ()
{
int t; s(t);
forall(k,0,t){

	int n; s(n);
	if(n == 1){
		cout << 0 << ' ' << 0 << endl;
		continue;
	}
	std::vector<edge> adj[n+1];
	forall(i,0,n-1){
		int x,y, w;
		s(x); s(y); s(w);
		edge temp;
		temp.dest = y; temp.weight =w;
		adj[x].pb(temp);
		temp.dest = x;
		adj[y].pb(temp);
	}

	int max = 0, max_index;

	
	int s=1;
	int dist[n+1];
	fillA(dist,1,n+1,INF);
	dist[s] = 0;
	priority_queue< node, std::vector<node>, Compare > pr;
	node t;
	t.index = s; t.val = 0;
	pr.push(t);
	while(!pr.empty()){
		node temp = pr.top();
		pr.pop();
		forall(j,0,sz(adj[temp.index])){
			edge t1 = adj[temp.index][j];
			if(dist[t1.dest] > (dist[temp.index] + t1.weight)){
				dist[t1.dest] = (dist[temp.index] + t1.weight);
				node t2;
				t2.index = t1.dest;
				t2.val = dist[t2.index];
				pr.push(t2);
				if(dist[t1.dest] > max){
					max = dist[t1.dest];
					max_index = t1.dest ; 
				}
			}
		}
	}
	

	s = max_index;
	max = 0;

	fillA(dist,1,n+1,INF);
	dist[s] = 0;
	t.index = s; t.val = 0;
	pr.push(t);
	while(!pr.empty()){
		node temp = pr.top();
		pr.pop();
		forall(j,0,sz(adj[temp.index])){
			edge t1 = adj[temp.index][j];
			if(dist[t1.dest] > (dist[temp.index] + t1.weight)){
				dist[t1.dest] = (dist[temp.index] + t1.weight);
				node t2;
				t2.index = t1.dest;
				t2.val = dist[t2.index];
				pr.push(t2);
				if(dist[t1.dest] > max){
					max = dist[t1.dest];
					max_index = t1.dest ; 
				}
			}
		}
	}



	if(max <= 100){
		cout << 0 << ' ' << max << endl;
	}
	else{
		if(max <= 1000){
			cout << 100 << ' ' << max << endl;
		}
		else{
			if(max <= 10000){
				cout << 1000 << ' ' << max << endl;
			}
			else{
				cout << 10000 << ' ' << max << endl;	
			}
		}
	}	
}
return 0;
}
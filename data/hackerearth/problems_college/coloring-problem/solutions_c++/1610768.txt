#include<iostream>
#include<bits/stdc++.h>
#include<cstdio>
#include<vector>
#include<queue>

using namespace std;

std::vector<int> v[50001];
int visit[50001] = {0};
int color[50001] = {-1};

bool bfs( long int root,int n )
{
    int i, l;
    long int c,leng;
    std::queue<pair<int,int> >  q;
    visit[root] = 1;
    color[root]=0;
    q.push(make_pair(root,0));
    memset(visit,0,sizeof(visit));
    while( !q.empty() )
    {
        root = q.front().first;
        int color1=q.front().second;
        for( i=0; i<v[root].size(); i++ )
        {

            c = v[root][i];
            if( visit[c] == 0 )
            {
            visit[c]=1;
            if(color1==0)
                color[c]=1;
            else
                color[c]=0;
                q.push(make_pair(c,color[c]));
            }
            else if(color1==color[c])
            return false;
        }
        q.pop();
    }
            return true;
}


int main()
{
    int t, c;
    int i, n,m, a, b;


    scanf( "%d", &t );

    while( t-- )
    {
        memset(color,-1,sizeof(color));
        scanf( "%d%d", &n,&m );
        for( i=0; i<=n; i++ )
            v[i].clear();
        for( i=0; i<m; i++)
        {
            scanf("%d%d",&a,&b);
            v[a].push_back(b);
            v[b].push_back(a);
        }
         if(bfs(0,n)==false)
        printf("NOT BICOLORABLE.\n");
        else
        printf("BICOLORABLE.\n");
    }
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int ceo,coo,cto;
    cin>>ceo>>coo>>cto;
    vector<int> res;
    int n;
    cin>>n;
    vector<int> items;
    int a;
    for(int i=0; i<n; i++)
    {
        cin>>a;
        items.push_back(a);
    }
    sort(items.begin(),items.end());
    if(coo<cto)
    {
        res.push_back(coo);
    }
    else
    {
        res.push_back(cto);
    }

    if(items.size()%2==0)
    {
        for(int i=0; i<items.size()/2; i++)
        {
            res.push_back(items[i]);
        }
        res.push_back(ceo);
        for(int i=items.size()/2; i<items.size(); i++)
        {
            res.push_back(items[i]);
        }
        if(coo<cto)
        {
            res.push_back(cto);
        }
        else
        {
            res.push_back(coo);
        }
    }
    else
    {
        if(abs(ceo-items[items.size()/2-1])+abs(ceo-items[items.size()/2])>abs(ceo-items[items.size()/2])+abs(ceo-items[items.size()/2+1]))
        {
            for(int i=0; i<items.size()/2+1; i++)
            {
                res.push_back(items[i]);
            }
            res.push_back(ceo);
            for(int i=items.size()/2+1; i<items.size(); i++)
            {
                res.push_back(items[i]);
            }
            if(coo<cto)
            {
                res.push_back(cto);
            }
            else
            {
                res.push_back(coo);
            }
        }
        else
        {
            for(int i=0; i<items.size()/2; i++)
            {
                res.push_back(items[i]);
            }
            res.push_back(ceo);
            for(int i=items.size()/2; i<items.size(); i++)
            {
                res.push_back(items[i]);
            }
            if(coo<cto)
            {
                res.push_back(cto);
            }
            else
            {
                res.push_back(coo);
            }
        }
    }
    int result=0;
    for(int i=1; i<res.size(); i++)
    {
        result+=abs(res[i]-res[i-1]);
    }
    cout<<endl<<result;

    return 0;
}

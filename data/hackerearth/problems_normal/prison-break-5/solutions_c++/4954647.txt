#include<iostream>
#include<vector>
#include<utility>

using namespace std;
int o=0;
int index=0;
int ind=0;
vector<int> vis;
int result=0;
int n;
vector< int > v[401];




void dfs(vector<int> v[],int i,int pa)
{


   for(int k=0;k<vis.size();k++)
   {
       if(vis[k]==i)
        return;

   }


    vis.push_back(i);


    if(i==((n)*(n)))
        {result++;

        vis.pop_back();

        return;
        }



    for(int k=0;k<v[i].size();k++)
    {  //cout<<"{}";
        if(v[i][k]==pa)
            continue;

        dfs(v,v[i][k],i);

    }
    vis.pop_back();

}




int main()
{  int t;
   cin>>t;
       while(t>0)
       {

           cin>>n;
            result=0;
           for(int i=0;i<401;i++)
            v[i].clear();
            vis.clear();
           int arr[n+1][n+1];


           for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
             {

              cin>>arr[i][j];

             }

            arr[0][0]=0;


          for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(arr[i][j]==0)
                {
                    index=n*i+j+1;
                     if(i+1<n)
                    if(arr[i+1][j]==0)
                        v[index].push_back(n*(i+1)+j+1);
                        if(i-1>=0)
                        if(arr[i-1][j]==0)
                        v[index].push_back(n*(i-1)+j+1);
                        if(j+1<n)
                        if(arr[i][j+1]==0)
                        v[index].push_back(n*(i)+j+2);
                        if(j-1>=0)
                        if(arr[i][j-1]==0)
                        v[index].push_back(n*(i)+j);

                }








     if(arr[0][0]==-1)
        cout<<0<<endl;

     else if(arr[n-1][n-1]==-1)
        cout<<0<<endl;

     else
     {
         dfs(v,1,-1);



         cout<<result<<endl;
     }



           t--;
       }



    return 0;

}

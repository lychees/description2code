from collections import defaultdict


class Graph():

    def __init__(self, connections=[], directed=False):
        self.status_dict = defaultdict(lambda: 1)
        self.graph_dict = defaultdict(list)
        self.is_directed = directed

    def add_edge(self, node1, node2):

        self.graph_dict[node1].append(node2)

        if not self.is_directed:
            self.graph_dict[node2].append(node1)

    def add_vertex(self, node):
        self.graph_dict[node]
        self.status_dict[node]

    def pprint(self):
        for key, value in self.graph_dict.iteritems():
            print str(key)+":"+str(value)


def bfs(g, src_node):
    Q = []
    Q.append(src_node)
    g.status_dict[src_node] = 2

    occur_dict = [0]*(10**5)
    occur_dict[src_node] = 1
    set_1 = 1
    set_2 = 0

    while len(Q) != 0:
        node = Q.pop(0)
        g.status_dict[node] = 3
        # print node,
        for nbs in g.graph_dict[node]:
            if g.status_dict[nbs] == 1:
                if occur_dict[node] == 1:
                    occur_dict[nbs] = 2
                    set_2 += 1
                elif occur_dict[node] == 2:
                    occur_dict[nbs] = 1
                    set_1 += 1
                Q.append(nbs)
                g.status_dict[nbs] = 2

    return max(set_1, set_2)


def connected_components(g):
    ans = 0
    for node in g.graph_dict.keys():
        if g.status_dict[node] == 1:

            ans += bfs(g, node)

    return ans


t = int(raw_input())
k = t
while t > 0:
    g = Graph()
    ans = 0
    occur = defaultdict(int)

    N = int(raw_input())
    for i in range(N):
        A, B = [int(x) for x in raw_input().split()]
        g.add_edge(A, B)

    ans = connected_components(g)

    print "Case "+str(k-t+1)+":", ans
    t -= 1

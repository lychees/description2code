#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll ma = 1000000007;
ll res[1000000][16];

void multiply(ll F[16][16], ll M[16][16]);
 
/* Helper function that calculates F[][] raise to the power n and puts the
  result in F[][]
  Note that this function is desinged only for fib() and won't work as general
  power function */
void power(ll F[16][16], ll n);
 
ll fib(ll n,int r)
{
  ll F[16][16] ;
  ll here[16];;
  int i,j;
  for(i=0;i<16;i++)
  here[i] = 0;
  
  here[0] = 6;
  here[8] = here[4] = here[2] = here[1] = 1;
  
  for(i=0;i<16;i++)
  for(j=0;j<16;j++)
  F[i][j] = 0;
  
  for(i=0;i<16;i++)
  {
  	F[i][i] = 6;
  	F[i^8][i] = F[i^4][i] = F[i^2][i] = F[i^1][i] = 1;
  }
  if(n==1)return here[r];
  if (n > 1)
  power(F, n-1);
ll total = 0;

	total =  here[r] * F[r][r] + here[r^1] *F[r^1][r] + here[r^2]*F[r^2][r] + here[r^4]*F[r^4][r] + here[r^8]*F[r^8][r];
	total = 0;
	for(i=0;i<16;i++)
	total = (total + (here[i]*F[i][r])%ma)%ma;
	total%=ma;

return total%ma;

}
 
void multiply(ll F[16][16], ll M[16][16])
{
ll tmp[16][16];
int i,j,k;
for(i=0;i<16;i++)
for(j=0;j<16;j++)
tmp[i][j] = 0;
for(i=0;i<16;i++)
for(j=0;j<16;j++)
for(k=0;k<16;k++)
{
	tmp[i][j] += (F[i][k] * M[k][j])%ma;
	tmp[i][j]%=ma;
}
 
 for(i=0;i<16;i++)
 for(j=0;j<16;j++)
 F[i][j] = tmp[i][j];
}
 
void power(ll F[16][16], ll n)
{
  if( n == 0 || n == 1)
      return;
  ll M[16][16] ;
  int i,j;
  for(i=0;i<16;i++)
  for(j=0;j<16;j++)
  M[i][j] = 0;

  
  for(i=0;i<16;i++)
  {
  	M[i][i] = 6;
  	M[i^8][i] = M[i^4][i] = M[i^2][i] = M[i^1][i] = 1;
  }
  power(F, n/2);
  multiply(F, F);
 
  if (n%2 != 0)
     multiply(F, M);
}
int main()
{
   int t,i,j;
   scanf("%d",&t);
   while(t--)
   {
   	int a,b,c,d;
   	ll n;
   	scanf("%lld%d%d%d%d",&n,&a,&b,&c,&d);
   	int r = 0;
   	r = a*8 + b*4 + 2*c + d;
   ll tms = fib(n,r);
   printf("%lld\n",tms);
   //	printf("%lld\n",ans);
   }
    return 0;
}

#include <iostream>
#include <vector>
#define ll long long int
using namespace std;

struct Topic {
	int ID;;
	ll Z, increase;
	Topic(int id, ll z, ll inc) {
		this->ID = id;
		this->Z = z;
		this->increase = inc;
	}
};

void maxHeapify(vector<Topic> &arr, int i, int N)
{
	int left = 2*i;
	int right = 2*i+1;
	int largest = i;
	if (left <= N && (arr[left].increase > arr[i].increase))
		largest = left;
	else if (left <= N && arr[left].increase == arr[i].increase && arr[left].ID > arr[i].ID)
		largest = left;

	if (right <= N && (arr[right].increase > arr[largest].increase))
		largest = right;
	else if (right <= N && arr[right].increase == arr[largest].increase && arr[right].ID > arr[largest].ID)
		largest = right;

	if (largest != i) {
		swap(arr[i], arr[largest]);
		maxHeapify(arr, largest, N);
	}
}

void buildMaxHeap (vector<Topic> &arr, int N)
{
    for(int i = N/2 ; i >= 1 ; i-- )
    {
        maxHeapify(arr, i, N) ;
    }
}

int main()
{
	int N, ID;
	ll Z, P, L, C, S;
	vector<Topic> topic;
	cin >> N;
	topic.push_back(Topic(0, 0, 0));
	for (int i = 0; i < N; i++) {
		cin >> ID >> Z >> P >> L >> C >> S;
		ll newZ = 50*P + 5*L + 10*C + 20*S;
		ll increase = newZ - Z;
		topic.push_back(Topic(ID, newZ, increase));

	}
	buildMaxHeap(topic, N);
	int size = N;
	for (int i = N; i > (N-5); i--) {
		cout << topic[1].ID << " " << topic[1].Z << endl;
		topic[1] = topic[i];
		maxHeapify(topic, 1, --size);
	}
    return 0;
}


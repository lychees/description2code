#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define F(i,a,b) for(int i = (int)(a); i <= (int)(b); i++)
#define RF(i,a,b) for(int i = (int)(a); i >= (int)(b); i--)
#define pb push_back
#define mp make_pair
#define gc getchar_unlocked
int A[100005],t[400020];
int read_int(){
    register int x = 0, c = gc();
    int sign = 1;
    while(c!='-' && (c<48 || c>57) ) c = gc();
    if(c=='-')
        sign = -1, c = gc();
    while(c>=48 && c<=57)
        x = (x<<1) + (x<<3) + c - 48, c = gc();
    return sign*x;
}

void build(int v, int tl, int tr)
{
    if(tl == tr)
    {
        t[v] = A[tl];
    }
    else
    {
        int tm = (tl + tr) >> 1;
        build((v<<1),tl,tm);
        build((v<<1)+1,tm+1,tr);
        t[v] = t[(v<<1)] + t[(v<<1)+1];
    }
}

int query(int v, int tl, int tr, int l, int r)
{
    if(l > r) return 0;
    if(tl == l && r == tr) return t[v];
    int tm = (tl + tr) >> 1;
    return query((v<<1),tl,tm,l,min(r,tm)) + query((v<<1)+1,tm+1,tr,max(tm+1,l),r);
}

void update(int v, int tl, int tr, int ind, int val)
{
    if(tl == tr)
    {
        t[v] = val;
    }
    else
    {
        int tm = (tl + tr) >> 1;
        if(ind <= tm)
            update((v<<1),tl,tm,ind,val);
        else
            update((v<<1)+1,tm+1,tr,ind,val);
        t[v] = t[(v<<1)] + t[(v<<1)+1];
    }
}
int main()
{
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int N,Q,x,y,z,ch;
    N = read_int();
    F(i,0,N-1)
    {
        x = read_int();
        A[x]++;
    }
    Q = read_int();
    build(1,0,100000);
    while(Q--)
    {
        ch = read_int();
        if(ch == 0)
        {
            x = read_int();
            y = read_int();
            printf("%d\n",query(1,0,100000,x,y));
        }
        else if(ch == 1)
        {
            x = read_int();
            A[x] -=1;
            update(1,0,100000,x,A[x]);
        }
        else
        {
            x = read_int();
            A[x] += 1;
            update(1,0,100000,x,A[x]);
        }

    }
    return 0;
}


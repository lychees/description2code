
#include <bits/stdc++.h>
using namespace std;
//const int N = 1<<27;
 bool prime[67108865];
void SieveOfEratosthenes(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
   // bool prime[n+1];
    memset(prime, true, sizeof(prime));
 
    for (int p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (int i=p*2; i<=n; i += p)
                prime[i] = false;
        }
    }
 
    // Print all prime numbers
  /*  for (int p=2; p<=n; p++)
       if (prime[p])
          cout << p << " ";*/
          
}
 
// Driver Program to test above function

int main()
{
    long long int startNum,endNum;
    long long int found=0,count=0,t;
    scanf("%d",&t);
    while(t--){
    	found =0;
    scanf("%lld%lld",&startNum,&endNum);
    if(startNum==1)
    startNum = 2;
   // for(long long int i=startNum;i<=endNum;i++)
       SieveOfEratosthenes(67108865);
       
       for(long long int i=startNum;i<=endNum;i++){
       	if(prime[i])
       	found++;
       }
       printf("%lld\n",found);
    }
 return 0;
}
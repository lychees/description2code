#include <iostream>
#include <vector>
#include <utility>
using namespace std;

long long countRKSubstrings(string& rkString, int m, char c)
{
	int len = (int)rkString.size();
	
	if (m == 0) {
		long long ret = 0;
		for (int i = 0, last = -1;i < len; ++i) {
			if (rkString[i] != c) {
				ret += i - last;
			} else {
				last = i;
			}
		}
		
		return ret;
	}
	
	vector<int> pos;
	for (int i = 0;i < len; ++i)
		if (rkString[i] == c)
			pos.push_back(i);
	
	if (pos.size() < m) return 0;
	
	long long ret = 0;
	for (int i = 0, n = (int)pos.size();i < len; ++i) {
		int lo = 0, hi = n - 1;
		if (pos[hi] < i) continue;
		
		while (hi - lo > 1) {
			int md = (lo + hi) / 2;
			if (pos[md] < i) lo = md + 1;
			else hi = md;
		}
		if (pos[lo] < i)
			lo = hi;
		
		if (lo + m > n)
			continue;
		
		ret += lo + m < n ? pos[lo + m] : len;
		ret -= pos[lo + m - 1];
	}
	
	return ret;
}

int main()
{
   int numCases;
   cin >> numCases;
   
   for (int cas = 1;cas <= numCases; ++cas) {
   		int m, n;
   		cin >> m >> n;
   		
   		string rkString;
   		cin >> rkString;
   		
   		long long retR = countRKSubstrings(rkString, m, 'R');
   		long long retK = countRKSubstrings(rkString, n, 'K');
   		cout << retR << " " << retK << endl;
   }
   
   return 0;
}

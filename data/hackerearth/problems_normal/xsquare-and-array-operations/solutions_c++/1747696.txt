#include <iostream>
#include <fstream>
#include <sstream>

#include <vector>
#include <set>
#include <bitset>
#include <map>
#include <deque>
#include <string>

#include <algorithm>
#include <numeric>

#include <cstdio>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cmath>

#define pb push_back
#define pbk pop_back
#define mp make_pair
#define fs first
#define sc second
#define all(x) (x).begin(), (x).end()
#define foreach(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); ++i)
#define len(a) ((int) (a).size())

#ifdef CUTEBMAING
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...) 42
#endif

using namespace std;

#define prev _prev
#define next _next

typedef long long int64;
typedef long double ld;
typedef unsigned long long lint;

const int inf = (1 << 30) - 1;
const int64 linf = (1ll << 62) - 1;
const int N = 1e6 + 100;

int n;
int a[N];
int prev[N], next[N];

set<pair<int, int> > e;

void solve() {
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
	}
	for (int i = 0; i < n; i++) {
		prev[i] = i == 0 ? -1 : i - 1;
		next[i] = i == n - 1 ? -1 : i + 1;
	}
	for (int i = 0; i < n - 1; i++) {
		e.insert(mp(max(a[i], a[i + 1]), a[i] < a[i + 1] ? i : i + 1));
	}
	int64 ans = 0;
	while (!e.empty()) {
		int v = e.begin()->sc;
		ans += e.begin()->fs;
		e.erase(e.begin());
		int p = prev[v], n = next[v];
		next[v] = prev[v] = -1;
		if (p != -1) {
			e.erase(mp(max(a[p], a[v]), a[p] < a[v] ? p : v));
			next[p] = n;
		}
		if (n != -1) {
			e.erase(mp(max(a[v], a[n]), a[v] < a[n] ? v : n));
			prev[n] = p;
		}
		if (p != -1 && n != -1) {
			e.insert(mp(max(a[p], a[n]), a[p] < a[n] ? p : n));
		}
	}
	cout << ans << endl;
}

int main() {
	int t; cin >> t;
	while (t--) {
		solve();
	}
    return 0;
}

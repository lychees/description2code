#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int A[555][555], n, visited[555], check[555];
bool ok;
bool foo(int v, int visited[], int *recStack)
{
    if(visited[v] == false)
    {
        // Mark the current node as visited and part of recursion stack
        visited[v] = true;
        recStack[v] = true;

        // Recur for all the vertices adjacent to this vertex
        for(int i=1; i<=n; i++)
        {
        	if(!A[v][i]) continue;	
            if ( !visited[i] && foo(i, visited, recStack) )
                return true;
            else if (recStack[i])
                return true;
        }

    }
    recStack[v] = false;  // remove the vertex from recursion stack
    return false;
}
int main()
{
	int t; cin >> t;
	while( t-- ) {
		cin >> n;
		for(int i=1; i<=n; i++) {
			for(int j=1; j<=n; j++) {
				cin >> A[i][j];
			}
		}
		ok = false;
		memset(visited, 0, sizeof visited);
		memset(check, 0, sizeof check);
		for(int i=1; i<=n; i++) 
			if( foo(i, visited, check) ) {
				ok = true; break;
			}
		puts( ok ? "Aye" : "Nae");
	}
    return 0;
}

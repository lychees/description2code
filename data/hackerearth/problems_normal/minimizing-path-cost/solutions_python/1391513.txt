import fileinput, heapq

data = fileinput.input()

count = [int(i) for i in data[0].split()]

graph = {}

counter = 0

#{'Trivandram': {'Howrah': 10, 'Mysore': 100}, 'Howrah': {'Trivandram': 10, 'Vashi': 20}, 'Vashi': {'Howrah': 20, 'Mysore': 50}, 'Mysore': {'Trivandram': 100, 'Vashi': 50}}
def shortestPath(graph, start, end):
		    queue = [(0, start, [])]
		    seen = set()
		    while True:
		        (cost, v, path) = heapq.heappop(queue)
		        if v not in seen:
		            path = path + [v]
		            seen.add(v)
		            if v == end:
		                return cost
		            for (next, c) in graph[v].iteritems():
		                heapq.heappush(queue, (cost + c, next, path))

			
for i in data:
	if counter < count[1]+1:
		if counter == 0:
			stations = [a for a in i.split()]
		if counter >= 1:
			if i.split()[0] not in graph:
				graph[i.split()[0]] = {}
			if i.split()[1] not in graph:
				graph[i.split()[1]] = {}
			graph[i.split()[0]][i.split()[1]] = int(i.split()[2])
			graph[i.split()[1]][i.split()[0]] = int(i.split()[2])

	
	if counter > count[1]+1:
			print shortestPath(graph,i.split()[0],i.split()[1])
	
	if counter == count[1]+1:
		query = int(i)
	
	counter +=1
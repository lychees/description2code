#include<bits/stdc++.h>
#define For(i,n) for(int i=0;i<n;i++)
#define ll long long
#define N 2000000
using namespace std;

int n;
struct node
{
   int d[4];
}st[4*N];

int lazy[4*N];


int mod(int a, int b)
{ return (a%b+b)%b; }

node emp_node;

void build(int idx,int s,int e)
{
  if(s==e)
    {st[idx].d[0] = 1;
      return;}
 int mid = (s+e)/2;
 int c =2*idx+1;
 build(c,s,mid);
 build(c+1,mid+1,e);
st[idx].d[0] = st[c].d[0] + st[c+1].d[0];
}

void ur(int l,int r,long k,int s,int e,int idx)
{
 if(lazy[idx]!=0)
 {   node tmp;
     int nxt;
    For(i,4)
     tmp.d[i] = st[idx].d[i];
    For(i,4)
    {
        nxt=mod(i+lazy[idx],4);
        st[idx].d[nxt] = tmp.d[i];
    }
  lazy[2*idx+1]+=lazy[idx];
  lazy[2*idx+2]+=lazy[idx];
  lazy[2*idx+1]=lazy[2*idx+1]%4;
  lazy[2*idx+2]=lazy[2*idx+2]%4;
  lazy[idx]=0;
 }

 if(r<s || l>e)
   return;

 if(l<=s && r>=e)
 {
   node tmp;
   int nxt;
    For(i,4)
     tmp.d[i] = st[idx].d[i];
    For(i,4)
    {
        nxt=mod(i+k,4);
        st[idx].d[nxt] = tmp.d[i];
    }
  lazy[2*idx+1]+=k;
  lazy[2*idx+2]+=k;
  lazy[2*idx+1]=lazy[2*idx+1]%4;
  lazy[2*idx+2]=lazy[2*idx+2]%4;
  /*cout<<s<<"--"<<e<<" ";
  For(i,4)
   cout<<st[idx].d[i]<<" ";
   cout<<endl;*/
   return;
 }
 int mid = (s+e)/2;
 int c = 2*idx+1;
    ur(l,r,k,s,mid,c);
    ur(l,r,k,mid+1,e,c+1);
 For(i,4)
  st[idx].d[i] = st[c].d[i] + st[c+1].d[i];
  /*cout<<s<<"--"<<e<<" ";
  For(i,4)
   cout<<st[idx].d[i]<<" ";
   cout<<endl;*/

}


node query(int l,int r,int s,int e,int idx)
{
 if(e<l || r<s)
    return emp_node;
  if(lazy[idx]!=0)
 {   node tmp;
     int nxt;
    For(i,4)
     tmp.d[i] = st[idx].d[i];
    For(i,4)
    {
       nxt=mod(i+lazy[idx],4);
        st[idx].d[nxt] = tmp.d[i];
    }
  lazy[2*idx+1]+=lazy[idx];
  lazy[2*idx+2]+=lazy[idx];
  lazy[2*idx+1]=lazy[2*idx+1]%4;
  lazy[2*idx+2]=lazy[2*idx+2]%4;
  lazy[idx]=0;
 }
 if(l<=s && e<=r)
 {
 /* cout<<s<<"--"<<e<<" ";
  For(i,4)
   cout<<st[idx].d[i]<<" ";
   cout<<endl;*/
     return st[idx];}
 int mid= (s+e)/2;
  node n1 =query(l,r,s,mid,2*idx+1);
    node n2 = query(l,r,mid+1,e,2*idx+2);
   node ans;
   For(i,4)
    {
      ans.d[i] = n1.d[i] + n2.d[i];
    }
  /*cout<<s<<"--"<<e<<" ";
  For(i,4)
   cout<<ans.d[i]<<" ";
   cout<<endl;*/

 return ans;
}

int main()
{ int m;
  cin>>n>>m;
  /*int s=(ceil)(log2(n))+1;
  st.resize(1<<s);
  lazy.resize(1<<s);
  cout<<st.size()<<endl;
  cout<<st[15].d[0]<<endl;*/
 build(0,0,n-1);
 while(m--)
 {
  char ch;
  cin>>ch;
  if(ch=='Q')
  {
    int l,r,ma=0;
    cin>>l>>r;
    node ans;
 ans = query(l-1,r-1,0,n-1,0);
 For(i,4)
   if(ma<ans.d[i])
     ma=ans.d[i];
 cout<<ma<<endl;
  }
  else
  {
    int l,r;
    long k;
    cin>>l>>r>>k;
    k=k%4;
    if(ch=='A')
        k=-k;
     ur(l-1,r-1,k,0,n-1,0);
  }
 }
 return 0;
}

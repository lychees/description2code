#include <iostream>
#include <string>
using namespace std;

#define NN 1123456
int cntr[NN], cntk[NN];

int main()
{
    int t; cin >> t;
    while ( t-- ) {
    	
    	int m,n; cin >> m >> n;
    	string s; cin >> s;
    	int N = s.size();
    	for (int i = 0 ;i < N;++i) {
    		cntr[i] = (s[i]=='R');
    		cntk[i] = (s[i]=='K');
    	}
    	for ( int i = 1; i < N; ++i ) {
    		cntr[i] += cntr[i-1];
    		cntk[i] += cntk[i-1];
//    		cout << cntr[i] << " "<< cntk[i] << endl;
    	}
    	
    	long long res = 0;
    	for ( int i = 0; i < N; ++i ) {
    		int ans = -1, l = i, r = N-1;
    		while ( l <= r ) {
    			int mid = (l+r)/2;
    			int get = cntr[mid];
    			if ( i ) get -= cntr[i-1];
    			if ( get >= m ) {
    				if ( get == m ) ans = mid; r = mid-1;
    			} else l = mid+1;
    		}
//    		cout << i << " " << ans << " ";
    		int val = ans;
    		if ( ans >= 0 ) {
    			int ans2 = -1, l = i, r = N-1;
    			while ( l <= r ) {
    				int mid = (l+r)/2;
    				int get = cntr[mid];
    				if ( i ) get -= cntr[i-1];
    				if ( get <= m ) {
    					if ( get == m ) ans2 = mid; l = mid+1;
    				} else r = mid-1;
    			}
//    			cout << "--" << ans2;
    			val = ans2-val+1;
    			res += val;
    		}
    		//cout << endl;
    	}
    	printf("%lld ",res);
    	
    	res = 0;
    	for (int i = 0; i < N; ++i ) {
    		int ans = -1, l = i, r = N-1;
    		while ( l <= r ) {
    			int mid= (l+r)/2;
    			int get = cntk[mid];
    			if ( i ) get -= cntk[i-1];
    			if ( get >= n ) {
    				if ( get == n ) ans = mid; r = mid-1;
    			} else l = mid+1;    			
    		}
    		
    		//cout << i << " " << ans << endl;
    		if ( ans != -1 ) {
    			int ans2 = -1, l = i, r = N-1;
    			while ( l <= r ) {
    				int mid = (l+r)/2;
    				int get = cntk[mid];
    				if ( i ) get -= cntk[i-1];
    				if ( get <= n ) {
    					if ( get == n ) ans2 = mid; l = mid+1;
    				} else r = mid-1;
    			}
    			//cout << ans2 << endl;
    			res += ans2-ans+1;
    		}
    	}
    	printf("%lld\n",res);
    	
    	
    	
    }
    return 0;
}

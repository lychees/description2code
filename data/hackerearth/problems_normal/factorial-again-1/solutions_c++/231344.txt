#include<stdio.h>
#include <cassert>
#include<iostream>
#include<algorithm>
#include<stdlib.h>
using namespace std;
#define f_in(st) freopen(st,"r",stdin);
#define f_out(st) freopen(st,"w",stdout);
#define ULL  long long int
ULL pow(ULL a, ULL b,ULL MOD)
{
    ULL x = 1, y = a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}

ULL modInverse(ULL a, ULL m)
{
    return pow(a,m-2,m);
}
int main()
{
    //f_in("in09.txt");
    //f_out("out09.txt");
    //wilson's theorem ,Euler little theorem , calcualte power in log n
    int test;
    cin>>test;
    assert(test>0 and test<=10000);
    while(test--)
    {
        ULL N,Prime,i;
        cin>>N>>Prime;
        assert(N>0 and N<=333333333LL);
		assert(Prime>0 and Prime<=1000000000LL);
		assert(abs(3*N-Prime)<=1000 and abs(3*N-Prime)>0);
        if(3*N>=Prime)
            printf("0\n");
        else
        {
            //calcualte (3N!)/(3!)^N
            ULL value=Prime-1,MUL=1,Power;
            for(i=3*N+1;i<Prime;i++)
            {
                MUL=(MUL*i)%Prime;
            }
            // (3N!) Mod Prime
            MUL=(value*modInverse(MUL,Prime))%Prime;
            //power(6,N) Mod Prime
            Power=pow(6,N,Prime);
            MUL=(MUL*modInverse(Power,Prime))%Prime;
            cout<<MUL<<endl;
        }
    }
    return 0;
}
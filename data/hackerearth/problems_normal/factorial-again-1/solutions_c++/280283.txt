#include<cstdio>
bool e[66];
long long modExp(long long a,long long b,long long p)
{
  long long k=-1,ans=1;
  while(b>0)
    {
      if(b%2==0)
	e[++k]=false;
      else
	e[++k]=true;
      b/=2;
    }
  while(k>=0)
    {
      ans=(ans*ans)%p;
      if(e[k])
	ans=(ans*a)%p;
      k--;
    }
  return ans;
}
long long modInv(long long a,long long p)
{
  long long x1,x2,y1,y2,tmp,tmp1,tmp2;
  x1=1;x2=0;y1=0;y2=1;
  while(a!=1)
    {
      tmp1=x1-(p/a)*y1;
      tmp2=x2-(p/a)*y2;
      x1=y1;x2=y2;
      y1=tmp1;y2=tmp2;
      tmp=p-(p/a)*a;
      p=a;
      a=tmp;
    }
  return y2;
}
int main()
{
  long long T,N,P,num,den,i,ans,x;
  scanf("%lld",&T);
  while(T--)
    {
      scanf("%lld %lld",&N,&P);
      if(3*N>=P)
	{
	  printf("0\n");
	  continue;
	}
      else if(3*N==(P-1))
	{
	  num=(P-1);
	  den=1;
	}
      else
	{
	  num=(P-1);
	  den=1;
	  for(i=3*N+1;i<=P-1;i++)
	    {
	      den*=i;
	      den%=P;
	    }
	}
      //printf("Reached here\n");
      //den*=modExp(6,N,P);
      //den%=P;
      x=modInv(den,P);
      if(x<0)
	x+=P;
      ans=(num*x)%P;
      ans=(ans*modExp(3,P-N-1,P))%P;
      ans=(ans*modExp(2,P-N-1,P))%P;
      printf("%lld\n",ans);
    }
  return 0;
}

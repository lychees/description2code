
#include<iostream>
#include<stdio.h>
#include<malloc.h>
#include<algorithm>
#include<stack>
#include<string.h>
#define size 26
using namespace std;
typedef struct trie_node
{
    struct trie_node*child[size];
    bool is_leaf;
}trie_node;
trie_node*create()
{
    trie_node*p=NULL;
    p=(trie_node*)malloc(sizeof(trie_node));
    if(p)
    {
        int i;
        p->is_leaf=false;
        for(i=0;i<size;i++) p->child[i]=NULL;
    }
    return p;
}
void insert_in_trie(trie_node*root,const char *key)
{
   int level;
   int len=strlen(key);
   int index;
   trie_node*p=root;
   for(level=0;level<len;level++)
   {
       index=(int)(key[level]-'a');
       if(!p->child[index]) p->child[index]=create();
       p=p->child[index];
   }
   p->is_leaf=true;
}
bool search_in_trie(trie_node*root,const char *key)
{
    int level;
    int index;
    trie_node*p=root;
    int len=strlen(key);
    for(level=0;level<len;level++)
        {
            index=(int)(key[level]-'a');
            if(!p->child[index]) return false;
            p=p->child[index];
        }
        return (p!=NULL&&p->is_leaf==true);
}
void count_node(trie_node*head,int *total)
{
    int i=0;
    if(head==NULL) return;
    for(i=0;i<26;++i)
    {
        if(head->child[i])  *total+=1,count_node(head->child[i],total);
    }
}
void sol()
{
    int i,n;
    char str[35];
    cin>>n;
    trie_node*head=create();
    while(n--)
    {
        cin>>str;
        insert_in_trie(head,str);
    }
    int total=1;
    count_node(head,&total);
    cout<<total<<endl;
}
int main()
{
    sol();
    return 0;
}

#include <iostream>
#include <vector>
#include <string.h>
using namespace std;

long long combination(long long n)
{
	if(n<3)
	 return 0;
	return (n*(n-1)*(n-2))/6;
}

long long compare(vector<int> v1,vector<int> v2)
{
	int i,j,n,m,count=0;
	i=j=0;
	n=v1.size();
	m=v2.size();
	while(i<n&&j<m)
	{
		if(v1[i]==v2[j])
		{
			count++;
			i++;
			j++;
		}
		else if(v1[i]<v2[j])
		 i++;
		else
		 j++;
	}
	return count;
}

long long compare1(vector<int> v1,vector<int> v2,vector<int> v3)
{
	int i,j,a,b,c,d,k,n,m,o,count=0;
	i=j=k=0;
	n=v1.size();
	m=v2.size();
	o=v3.size();
	while(i<n&&j<m&&k<o)
	{
		if(v1[i]==v2[j]&&v2[j]==v3[k])
		{
			count++;
			i++;
			j++;
			k++;
		}
		else
		{
			a=v1[i];
			b=v2[j];
			c=v3[k];
			(a<b) ? ((a<c) ? i++ : k++) : ((b<c) ? j++ : k++ );
		}
	}
	return count;
}

long long compare2(vector<int> v1,vector<int> v2,vector<int> v3,vector<int> v4)
{
	int i,j,k,l,a,b,c,d,n,m,o,p,result,count=0;
	i=j=k=l=0;
	n=v1.size();
	m=v2.size();
	o=v3.size();
	p=v4.size();
	while(i<n&&j<m&&k<o&&l<p)
	{
		if(v1[i]==v2[j]&&v2[j]==v3[k]&&v3[k]==v4[l])
		{
			count++;
			i++;
			j++;
			k++;
			l++;
		}
		else
		{
			a=v1[i];
			b=v2[j];
			c=v3[k];
			d=v4[l];
			result=min(a,min(b,min(c,d)));
			if(result==a)
			 i++;
			else if(result==b)
			 j++;
			else if(result==c)
			 k++;
			else if(result==d)
			 l++;
		}
	}
	return count;
}


int main()
{
	int i,j,n;
	vector<int> v[4];
	bool visit[4];
	long long val,result=0;
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		scanf("%lld",&val);
		memset(visit,false,sizeof(visit));
		while(val!=0)
		{
			switch(val%10)
			{
				case 2:
					if(!visit[0])
					{
						v[0].push_back(i);
						visit[0]=true;
					}
					break;
				case 3:
					if(!visit[1])
					{
						v[1].push_back(i);
						visit[1]=true;
					}
					break;
				case 5:
					if(!visit[2])
					{
						v[2].push_back(i);
						visit[2]=true;
					}
					break;
				case 7:
					if(!visit[3])
					{
						v[3].push_back(i);
						visit[3]=true;
					}
					break;
			}
			val/=10;
		}
	}
	for(i=0;i<4;i++)
	 result+=combination(v[i].size());
	for(i=0;i<3;i++)
	{
		for(j=i+1;j<4;j++)
		{
			result-=combination(compare(v[i],v[j]));
		}
	}
	result+=combination(compare1(v[0],v[1],v[2]));
	result+=combination(compare1(v[0],v[1],v[3]));
	result+=combination(compare1(v[0],v[2],v[3]));
	result+=combination(compare1(v[1],v[2],v[3]));
	result-=combination(compare2(v[0],v[1],v[2],v[3]));
	printf("%lld\n",result);
	return 0;
}

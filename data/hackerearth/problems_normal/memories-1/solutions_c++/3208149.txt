#include <bits/stdc++.h>
#include <fstream>
#define INF 800000000000
#define MOD 1000000007
#define MAXN 100005
#define ins insert
#define pb push_back
#define mp make_pair
#define sz size
#define all(a) a.begin(), a.end()
#define rep(i, a, b) for(int i = a; i < b; ++i)
#define sd(n) scanf("%d",&n)
#define sll(n) scanf("%I64d",&n)
#define pdn(n) printf("%d\n",n)
#define plln(n) printf("%I64d\n",n)
#define pd(n) printf("%d ",n)
#define nl() printf("\n")
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int, int> pii;

namespace patch
{
    template < typename T > std::string to_string( const T& n )
    { 
        std::ostringstream stm ;
        stm << n ;
        stm.str() ;
    }
}

ll modpow(ll base, ll exponent, ll modulus)
{
    ll result = 1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = (result * base) % modulus;
        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }
    return result;
}

ll gcd(ll u, ll v)
{
    return (v != 0) ? gcd(v, u % v) : u;
}

int t, n, p;
bool ok[15][15];

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> t;
    while(t--) {
        cin >> n >> p;
        memset(ok, 0, sizeof ok);
        rep(i, 0, p) {
            int a, b;
            cin >> a >> b;
            --a; --b;
            ok[a][b] = true;
            ok[b][a] = true;
        }
        int lim = (1<<n);
        int ans = 0;
        rep(i, 1, lim) {
            int x = i;
            vi temp;
            rep(j, 0, n) {
                if(x & (1<<j))
                    temp.pb(j);
            }
            bool dontcount = false;
            rep(j, 0, temp.sz()) {
                rep(k, 0, temp.sz()) {
                    if(j != k) {
                        if(ok[temp[j]][temp[k]]) {
                            dontcount = true;
                            break;
                        }
                    }
                }
                if(dontcount)
                    break;
            }
            if(!dontcount)
                ++ans;
        }
        cout << ans << '\n';
    }
    return 0;
}
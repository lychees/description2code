#include <bits/stdc++.h>
using namespace std;
#define MOD 100000007
int Arr[100009];
 
bool cmp(pair<int,pair<int,int> > a,pair<int,pair<int,int> > b)
{
	return a.first<b.first;
}
 
int root(int i)
{
    while(Arr[ i ] != i)           //chase parent of current element until it reaches root.
    {
     Arr[ i ] = Arr[ Arr[ i ] ];        // Path Compression
     i = Arr[ i ];
    }
    return i;
}
 
/*modified union function where we connect the elements by changing the root of one of the element */
 
int uniond(int A ,int B)
{
    int root_A = root(A);
    int root_B = root(B);
    Arr[ root_A ] = root_B ;       //setting parent of root(A) as root(B).
}
 
 
 
int main()
{
    //freopen("file1.txt","r",stdin);
    //freopen("out.txt","w",stdout);
 
    int n,a,b;
    cin>>n;
 
    long long ans;
    vector<pair<int,int> > x,y;
    vector<pair<int,pair<int,int> > > v;
    for(int i=0;i<n;i++)
    {
    	cin>>a>>b;
    	x.push_back({a,i});
    	y.push_back({b,i});
    	Arr[i]=i;
    }
    sort(x.begin(),x.end());
    sort(y.begin(),y.end());
    for(int i=1;i<n;i++)
    {
    	v.push_back(make_pair(abs(x[i].first-x[i-1].first),make_pair(x[i].second,x[i-1].second)));
    }
    for(int i=1;i<n;i++)
    {
    	v.push_back(make_pair(abs(y[i].first-y[i-1].first),make_pair(y[i].second,y[i-1].second)));
    }
    sort(v.begin(),v.end(),cmp);
    ans=0;
 
    for(int i=0;i<v.size();i++)
    {
        if(root(v[i].second.first)!=root(v[i].second.second))
        {
            ans+=v[i].first;
            uniond(v[i].second.first,v[i].second.second);
        }
    }
 
    cout<<ans<<endl;
}

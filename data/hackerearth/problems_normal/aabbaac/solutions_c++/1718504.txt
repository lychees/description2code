#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 55;
int n, m;
ll len[N], ls[N];
char s[N][N + N];

char rec(ll x, int id, bool rev) {
	if (id == 0) return rev ? s[id][len[id] - x - 1] : s[id][x];
	if (rev) {
		if (x < ls[id]) return s[id][ls[id] - 1 - x];
		else if (x < ls[id] + len[id - 1]) {
			return rec(x - ls[id], id - 1, 0);
		}
		else return rec(x - ls[id] - len[id - 1], id - 1, 1);
	}
	else {
		if (x < len[id - 1]) return rec(x, id - 1, 0);
		else if (x < len[id - 1] + len[id - 1]) {
			return rec(x - len[id - 1], id - 1, 1);
		}
		else return s[id][x - len[id - 1] - len[id - 1]];
	}
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest;
    ll x;

    cin >> ntest;
    while (ntest--) {
    	cin >> n >> m;
    	repu(i, 0, n) {
    		cin >> s[i];
    		ls[i] = strlen(s[i]);
    		if (i == 0) len[i] = ls[i];
    		else len[i] = len[i - 1] + len[i - 1] + ls[i];
    	}
    	string ans = "";
    	repu(i, 0, m) {
    		cin >> x;
    		ans += rec(x, n - 1, 0);
    	}
    	cout << ans << '\n';
    }
    return 0;
}

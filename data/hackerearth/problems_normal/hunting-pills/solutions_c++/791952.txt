#include <bits/stdc++.h>
using namespace std;
int arr[10000]={0},ma=0,m=0;
class Graph
{
    int V;
    list<int> *adj;
    void fillOrder(int v, bool visited[], stack<int> &Stack);
    void DFSUtil(int v, bool visited[]);
public:
    Graph(int V);
    void addEdge(int v, int w);
    void printSCCs();
    Graph getTranspose();
};
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
void Graph::DFSUtil(int v, bool visited[])
{
    visited[v] = true;
    m=m+arr[v];
    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
        if (!visited[*i])
            DFSUtil(*i, visited);
}
Graph Graph::getTranspose()
{
    Graph g(V);
    for (int v = 0; v < V; v++)
    {
        list<int>::iterator i;
        for(i = adj[v].begin(); i != adj[v].end(); ++i)
        {
            g.adj[*i].push_back(v);
        }
    }
    return g;
}
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
}

void Graph::fillOrder(int v, bool visited[], stack<int> &Stack)
{
    visited[v] = true;
    list<int>::iterator i;
    for(i = adj[v].begin(); i != adj[v].end(); ++i)
        if(!visited[*i])
            fillOrder(*i, visited, Stack);
    Stack.push(v);
}
void Graph::printSCCs()
{
    stack<int> Stack;
    bool *visited = new bool[V];
    for(int i = 0; i < V; i++)
        visited[i] = false;
    for(int i = 0; i < V; i++)
        if(visited[i] == false)
            fillOrder(i, visited, Stack);
    Graph gr = getTranspose();
    for(int i = 0; i < V; i++)
        visited[i] = false;
    while (Stack.empty() == false)
    {
        int v = Stack.top();
        Stack.pop();
        if (visited[v] == false)
        {
            gr.DFSUtil(v, visited);
            if(ma<=m)
            ma=m;
            m=0;
        }
    }
}
int main()
{
    int n,m,t,a,b;
    scanf("%d",&t);
    while(t--)
    {
    scanf("%d %d",&n,&m);
    Graph g(n);
    for(int i=0;i<n;i++)
    cin>>arr[i];
    for(int i=0;i<m;i++)
    {
    cin>>a>>b;
    g.addEdge(a, b);
    }
    g.printSCCs();
    cout <<ma<<endl;
    ma=0;
    }
    return 0;
}

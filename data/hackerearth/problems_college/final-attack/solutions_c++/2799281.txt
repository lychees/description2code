#include<bits/stdc++.h>
using namespace std;
#define sz(x) (int)(x.size())
#define INF (1<<28)

struct Edge
{
	int first;
	int last;
	int weight;
};
typedef struct Edge Edge;

vector<  pair< pair<int ,int> , int> > edge; 

int dist[105];

int BellmanFord(int s, int n, int m)
{
	for(int i = 1; i <= n; i++) dist[i] = INF;
	dist[s] = 0; 
	int flag = 1;
	for(int i = 1; i < n; i++)
	{
		for(int j = 0; j < m;  j++)
		{
			int u = edge[j].first.first;
			int v = edge[j].first.second;
			int w = edge[j].second;
			if(dist[u] + w < dist[v]) dist[v] = dist[u] + w;
		}
	} 
	
	for(int j = 0; j < m; j++)
	{
		    int u = edge[j].first.first;
			int v = edge[j].first.second;
			int w = edge[j].second;
			if(dist[u] + w < dist[v])
			{
				flag = 0;
			}
	} 
	if(flag == 1) return 1;
    
    return 0;
	
}



int main()
{
	int t; cin >> t;
	
	while(t--)
	{
		memset(dist, 0, sizeof dist);
		edge.clear();
		int n, m; cin >> n >> m;
		for(int i = 0; i < m; i++)
		{
			int u, v, w; cin >> u >> v >> w;
			edge.push_back( make_pair(make_pair(u, v), -w) );
		}
		int f = BellmanFord(1, n, m);
		if(f) cout << "YES\n";
		else cout << "NO\n";
	}
	return 0;
}

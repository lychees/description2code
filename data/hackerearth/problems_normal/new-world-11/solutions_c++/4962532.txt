#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 10;

int a[N];
int n, k;

inline int covers(int x) {
	int st = 0;
	for (int i = 1; i <= k; i++) {
		int pos = lower_bound(a + st + 1, a + n, a[st] + x) - (a + st + 1);
		if (st + pos + 1 != n && a[st + pos + 1] != a[st] + x) {
			pos--;
		}
		if (pos < 0) {
			return 0;
		}
		st += pos + 1;
		if (st >= n - 1) {
			return 1;
		}
	}
	return 0;
}

int bs_lower_bound(int x, int l, int h) {
	while (l < h) {
		int mid = (l + h) / 2;
		int res = covers(mid);
		if (x <= res) {
			h = mid;
		} else {
			l = mid + 1;
		}
	}
	return l;
}

int main() {
	int t;
	scanf("%d", &t);
	for (int tt = 1; tt <= t; tt++) {
		scanf("%d %d", &n, &k);
		scanf("%d", &a[0]);
		for (int i = 1; i < n; i++) {
			scanf("%d", &a[i]);
		}
		printf("%d\n", bs_lower_bound(1, 0, a[n - 1] - a[0] + 1));
	}
	return 0;
}
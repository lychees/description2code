#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

bool check(int n, vi v, const vi &l, const vi &r) {
	vector<bool> vis(n);
	rep(i, v.size())
		vis[v[i]] = true;
	int t = n - 1;
	while((int)v.size() < n) {
		while(vis[t]) -- t;
		v.push_back(t --);
	}
	rep(i, l.size()) {
		sort(v.begin() + l[i], v.begin() + r[i]);
	}
	rep(i, n)
		if(v[i] != i)
			return false;
	return true;
}

int main() {
	int n, m;
	while(~scanf("%d%d", &n, &m)) {
		vi l(m), r(m);
		rep(i, m)
			scanf("%d%d", &l[i], &r[i]), -- l[i];
		vi ans;
		if(check(n, ans, l, r)) {
			puts("All ok!");
			continue;
		}
		rep(i, n) {
			rep(j, n) if(count(all(ans), j) == 0) {
				ans.push_back(j);
				if(!check(n, ans, l, r))
					break;
				ans.pop_back();
			}
			assert(ans.size() == i + 1);
		}
		rep(i, n) {
			if(i != 0)
				putchar(' ');
			printf("%d", ans[i] + 1);
		}
		puts("");
	}
	return 0;
}


#include<iostream>
#include<algorithm>

using namespace std;

bool mycomp(pair<long long int, long long int> a, pair<long long int, long long int> b) {
        if(a.first < b.first)
                return true;
        return false;
}

int main() {
        long long int N, S, E;
        cin >> N >> S >> E;
        long long int xi, pi;
        pair<long long int, long long int> * arr = new pair<long long int, long long int>[N];
        for(int i=0;i<N;i++) {
                cin >> xi >> pi;
                //insert the pair
                arr[i] = pair<long long int, long long int>(xi-pi, xi+pi);
        }

        sort(arr, arr+N);
//      cout << "sorted arr is \n";
//      for(int i=0;i<N;i++)
//              cout << arr[i].first << ", " << arr[i].second << endl;
        long long int cov = S, sum = 0, i=0;
        //now consider the intervals which are between S and E and are not protected
        for(i=0;i<N;i++) {
                if(arr[i].first < cov && arr[i].second < cov) {
                        //do nothing
                } else if(arr[i].first <= cov && arr[i].second >= cov) {
                        if(E<=arr[i].second)
                                break;
                        else
                                cov = arr[i].second;
                } else if(arr[i].first >= cov) {
                        if(E <= arr[i].first) {
                                sum += (E-cov);
                                break;
                        } else {
                                sum += (arr[i].first - cov);
                                if(E <= arr[i].second) {
                                        break;
                                } else
                                        cov = arr[i].second;
                        }
                }
        }
        if(i<N)
                cout << sum << endl;
        else {
                //there are no intervals so the remaining space between cov and E is unprotected
                sum+= (E-cov);
                cout << sum << endl;
        }
        return 0;
}
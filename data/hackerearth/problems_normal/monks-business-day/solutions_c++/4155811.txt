#include<bits/stdc++.h>
using namespace std;
int dis[1001];
int inf=1e9;
vector<int>adj[1001];
bool visit[1001];
struct edge 
{
	int s,e,wt;	
};
bool dfs(int,int);
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,m,c;
		cin>>n>>m;
		for(int i=0;i<=n;i++){adj[i].clear();visit[i]=false;}
		edge arr[m];
		for(int i=0;i<m;i++)
		{
			cin>>arr[i].s>>arr[i].e>>arr[i].wt;
			arr[i].wt=-arr[i].wt;
			adj[arr[i].s].push_back(arr[i].e);
		}
		for(int i=1;i<n;i++)dis[i]=inf;
		dis[1]=0;
		for(int i=1;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				int u=arr[j].s,v=arr[j].e,w=arr[j].wt;
				if(dis[v]>dis[u]+w)dis[v]=dis[u]+w;
			}
		}
		int h=-1;
		for(int j=0;j<m;j++)
		{
			int u=arr[j].s,v=arr[j].e,w=arr[j].wt;
			if(dis[v]>dis[u]+w){h=v;break;}
		}
		if(h==-1)cout<<"No"<<endl;
		else
		{
			if(dfs(1,h))cout<<"Yes"<<endl;
			else cout<<"No"<<endl;
		}
	}
	return 0;
}

bool dfs(int u,int h)
{
	if(u==h)return true;
	visit[u]=true;
	bool flag=false;
	for(int i=0;i<adj[u].size();i++)
	{
		int v=adj[u][i];
		if(visit[v]==false)if(dfs(v,h)){flag=true;break;}
	}
	return flag;
}
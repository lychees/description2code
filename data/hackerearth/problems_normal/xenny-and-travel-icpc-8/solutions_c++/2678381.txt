#include<bits/stdc++.h>
using namespace std;
int dist[1251];
int N=0,i,j,k,u,v;
int a[1251],b[1251],c[1251],d[1251];
void dijkstra(int x[][1251],int s) {
        int i, k, mini;
        int visited[1251];

        for (i = 0; i < N; ++i) {
                dist[i] = 1000000000;
                visited[i] = 0;
        }

        dist[s] = 0;

        for (k = 0; k <N; ++k) {
                mini = -1;
                for (i = 0; i <N; ++i)
                        if (!visited[i] && ((mini == -1) || (dist[i] < dist[mini])))
                                mini = i;

                visited[mini] = 1;

                for (i = 0; i <N; ++i)
                        if (mini!=i)
                                if (dist[mini] + x[mini][i] < dist[i])
                                        dist[i] = dist[mini] + x[mini][i];
        }
}
int A[1251][1251],B[1251][1251],C[1251][1251],D[1251][1251];
// driver program to test above function
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin>>N;
    //V=N;
    for(i=0;i<N;i++)
    {
        for(j=0;j<N;j++)
        {
            cin>>A[i][j];
        }
    }
    for(i=0;i<N;i++)
    {
        for(j=0;j<N;j++)
        {
            cin>>B[i][j];
        }
    }
    cin>>u>>v;
    u--;
    v--;
    dijkstra(A,u);
    for(i=0;i<N;i++)
        a[i]=dist[i];
    dijkstra(B,u);
    for(i=0;i<N;i++)
        c[i]=dist[i];
    for(i=0;i<N;i++)
    {
        for(j=0;j<N;j++){
            C[i][j]=A[j][i];
            D[i][j]=B[j][i];
        }
    }
    dijkstra(C,v);
    for(i=0;i<N;i++)
        b[i]=dist[i];
    dijkstra(D,v);
    for(i=0;i<N;i++)
        d[i]=dist[i];
    for(i=0;i<N;i++)
    {
        if(i==u||i==v)
            a[i]=1000000000;
        else
            a[i]=a[i]+d[i];
    }
    for(i=0;i<N;i++)
    {
        if(i==u||i==v)
            b[i]=1000000000;
        else
            b[i]=b[i]+c[i];
    }
    int x=1000000000;
    for(i=0;i<N;i++)
    {
        a[i]=min(a[i],b[i]);
        x=min(x,a[i]);
    }
    cout<<x;
    return 0;
}

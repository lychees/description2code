/*input
4
abc
def
feg
cba

*/
#include <bits/stdc++.h>
#include <stdlib.h>
using namespace std;
long long mod=1e9+7;
 
typedef long long unsigned llu;
typedef long long int lld;
typedef long ld;
#define rep(i,a,n) for(long long int i = (a); i <= (n); ++i)
#define repI(i,a,n) for(int i = (a); i <= (n); ++i)
#define repD(i,a,n) for(long long int i = (a); i >= (n); --i)
#define repDI(i,a,n) for(int i = (a); i >= (n); --i)
 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sc(a) scanf("%lld",&a)
#define sc2(a,b) scanf("%lld%lld",&a,&b)
#define sc3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define scd(a) scanf("%d",&a)
#define scd2(a,b) scanf("%d%d",&a,&b)
#define scd3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define scf(a) scanf("%lf",&a)
#define scf2(a,b) scanf("%lf%lf",&a,&b)
#define scf3(a,b,c) scanf("%lf%lf%lf",&a,&b,&c)
#define prL(a) printf("%lld\n",a)
#define prS(a) printf("%lld ",a)
#define prdL(a) printf("%d\n",a)
#define prdS(a) printf("%d ",a)
#define prfL(a) printf("%lf\n",a)
#define prfS(a) printf("%lf ",a)
#define popcount __builtin_popcountll
#define swap(a,b,t) t=a;a=b;b=t
typedef pair<lld,lld> PA;
 
#define lim 1000003
#define lim2 103
inline lld sqr(lld x) { return x * x; }
// map<pair<PA,PA>,lld> M;
map<lld,lld> M,Mn;
// map<lld,lld>::iterator it;
// std::ios::sync_with_stdio(false);
// string S[lim],T[lim],Q[lim];
 
// multiset<lld> S;
// set<PA> S;
// string S[lim];
// stack<lld> S;
// vector<lld> V[lim],Vf[lim];
// vector<lld> X,Y;
// vector<PA> IN[lim];
 
// bool dp[1002][12][12];
// priority_queue<PA> Q;
lld A[lim],B[lim],C[lim],D[lim];
// lld X[lim],Y[lim];
// PA P[lim];
// char S[lim];
// double dp[1<<18];
lld one,zero,ansR,numNodes;

string S[1003];

int main(){
    // std::ios::sync_with_stdio(false);
    lld T,i,j,k;
    lld n;
    sc(n);
    rep(i,1,n) cin>>S[i];
    rep(i,1,n){
        rep(j,1,n){
            if(i==j) continue;
            reverse(S[i].begin(),S[i].end());
            if(S[i]==S[j]){
                k=S[i].size();
                printf("%lld %c\n",k,S[i][k/2]);
                return 0;
            }
            reverse(S[i].begin(),S[i].end());
        }
    }
   	return 0;
}
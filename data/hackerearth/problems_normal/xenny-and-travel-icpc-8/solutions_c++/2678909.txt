#include <iostream>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#define lli long long int
#define pb push_back
#define inf 1000000007
#define pii pair<int,int>

using namespace std;
int road[1255][1255];
int rail[1255][1255];
int dist_src_road[1255],dist_src_rail[1255],dist_dest_road[1255],dist_dest_rail[1255];
int main()
{
    int i,j,k,l,a,b,c,d,n,m,src,dest,u;
    scanf("%d",&n);
    for(i=1;i<=n;i++){
        for(j=1;j<=n;j++){
            scanf("%d",&road[i][j]);
        }
    }

    for(i=1;i<=n;i++){
        for(j=1;j<=n;j++){
            scanf("%d",&rail[i][j]);
        }
    }
    scanf("%d%d",&src,&dest);
    set<pii> q;
    for(i=0;i<=n;i++)dist_src_road[i]=inf;
    dist_src_road[src]=0;
    q.insert(make_pair(0,src));

    while(!q.empty()){
        pii alpha=*(q.begin());
        u=alpha.second;

        q.erase(q.begin());

        for(i=1;i<=n;i++)
        {
            if(i==u)continue;
            b=road[u][i];
            if(dist_src_road[i]> dist_src_road[u]+ b)
            {
                dist_src_road[i]= dist_src_road[u]+ b;
                q.insert(make_pair(dist_src_road[i],i));
            }
        }
    }

    q.clear();
    for(i=0;i<=n;i++)dist_src_rail[i]=inf;
    dist_src_rail[src]=0;
    q.insert(make_pair(0,src));

    while(!q.empty()){
        pii alpha=*(q.begin());
        u=alpha.second;

        q.erase(q.begin());

        for(i=1;i<=n;i++)
        {
            if(i==u)continue;
            b=rail[u][i];
            if(dist_src_rail[i]> dist_src_rail[u]+ b)
            {
                dist_src_rail[i]= dist_src_rail[u]+ b;
                q.insert(make_pair(dist_src_rail[i],i));
            }
        }
    }

    // from dest

    q.clear();
    for(i=0;i<=n;i++)dist_dest_road[i]=inf;
    dist_dest_road[dest]=0;
    q.insert(make_pair(0,dest));

    while(!q.empty()){
        pii alpha=*(q.begin());
        u=alpha.second;

        q.erase(q.begin());

        for(i=1;i<=n;i++)
        {
            if(i==u)continue;
            b=road[i][u];
            if(dist_dest_road[i]> dist_dest_road[u]+ b)
            {
                dist_dest_road[i]= dist_dest_road[u]+ b;
                q.insert(make_pair(dist_dest_road[i],i));
            }
        }
    }

    q.clear();
    for(i=0;i<=n;i++)dist_dest_rail[i]=inf;

    dist_dest_rail[dest]=0;
    q.insert(make_pair(0,dest));

    while(!q.empty()){
        pii alpha=*(q.begin());
        u=alpha.second;

        q.erase(q.begin());

        for(i=1;i<=n;i++)
        {
            if(i==u)continue;
            b=rail[i][u];
            if(dist_dest_rail[i]> dist_dest_rail[u]+ b)
            {
                dist_dest_rail[i]= dist_dest_rail[u]+ b;
                q.insert(make_pair(dist_dest_rail[i],i));
            }
        }
    }
    int ans=inf;
    for(i=1;i<=n;i++){
        if(i==src || i==dest)continue;
        ans= min(ans , dist_src_road[i] + dist_dest_rail[i]);
        ans=min(ans,dist_src_rail[i]+ dist_dest_road[i]);
    }

    //cout<<dist_src_road[3]<<"  "<<dist_dest_rail[3];
    cout<<ans;



    return 0;
}


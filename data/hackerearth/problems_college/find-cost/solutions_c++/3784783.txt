// Advanced DS
// Trie
// Input words with only lowercase english characters.
// Time complexity is O(nW) to build the Trie, O(W) per query.
// W is the average word size.

#include <iostream>

using namespace std;

int nodesCount = 0;

// Trie Node.
struct Node
{
  int value;
  Node *next[26];
};

// Return the index corresponding to the input character.
int GetIndex(char c)
{
  return c - 'a';
}

// Return a new Node initialized with the input character.
Node *GetNode(char c)
{
  Node *node = new Node;

  node->value = GetIndex(c);
  for (int i = 0; i < 26; ++i)
  {
    node->next[i] = NULL;
  }

  ++nodesCount;
  return node;
}

// Insert the word into Trie.
void Insert(Node *root, char *word)
{
  if (root == NULL || word == NULL)
  {
    return;
  }

  while (*word != '\0')
  {
    int index = GetIndex(*word);

    if (root->next[index] == NULL)
    {
      root->next[index] = GetNode(*word);
      root = root->next[index];
    }
    else
    {
      root = root->next[index];
    }

    ++word;
  }
}

int main()
{
  int n;
  char word[30];
  Node *root = GetNode('a');

  cin >> n;
  while (n--)
  {
    cin >> word;
    Insert(root, word);
  }

  cout << nodesCount << endl;
  return 0;
}
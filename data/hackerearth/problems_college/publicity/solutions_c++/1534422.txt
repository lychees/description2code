#include <iostream>
#include <queue>
#define MAX 100000
using namespace std;
 
int visited[MAX];
struct node
{
    int data;
    struct node* next;
};
 
void insert_end(struct node** head,int data)
{
    struct node*p;
 
    struct node* newNode = new struct node;
 
    newNode->data=data;
    newNode->next = NULL;
 
    if((*head)==NULL)
    {
        *head= newNode;
        return;
    }
 
    p=*head;
    while(p->next!=NULL)
    {
        p=p->next;
    }
 
    p->next = newNode;
}
 
struct graph
{
 
    int V;
    struct node* adj[MAX];
};
 
struct graph* createGraph(int V)
{
    struct graph *G = new struct graph;
 
    G->V=V;
 
    for(int i=0;i<V;i++)
        G->adj[i]=NULL;
 
    return G;
}
 
void addEdge(struct graph *G,int u,int v)
{
    insert_end(&(G->adj[u]),v);
    insert_end(&(G->adj[v]),u);
 
}
void BFS(struct graph* G,int s)
{
    int u,v;
    struct node *p;
    queue <int> Q;
 
    
    
    Q.push(s);
    visited[s]=1;
    
    while(!Q.empty())
    {
        u = Q.front();
        Q.pop();
       
 
        p=G->adj[u];
        while(p!=NULL)
        {
            v=p->data;
            if(!visited[v])
            {
                Q.push(v);
                visited[v]=1;
 
            }
            p=p->next;
 
        }
 
    }
 
}
int connected_components(struct graph *G)
{
    int i,count=0;
 
    for(i=0;i<G->V;i++)
        visited[i]=0;
 
    for(i=0;i<G->V;i++)
    {
        if(!visited[i])
        {
            count++;
            BFS(G,i);        
        }
    }
    return count;
}
 
int main()
{
    int tno,N,e,i,u,v;
    
    cin>>tno;
    
    while(tno--)
    {
     cin>>N;
     
     struct graph*G = createGraph(N);
     
     cin>>e;
     
     for(i=0;i<e;i++)
     {
      cin>>u>>v;
      addEdge(G,u,v);
     }
     cout<<connected_components(G)<<endl;
    }
    return 0;
}
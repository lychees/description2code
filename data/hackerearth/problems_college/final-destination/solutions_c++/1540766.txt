/*
Template belongs to : Himanshu Jaju [himanshujaju]
*/

#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)

#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     c.size()
#define clr(c)    c.clear()
#define msi       map<string,int>
#define msit      map<string,int>::iterator
#define pb        push_back
#define mp        make_pair

#define GI(x)     scanf("%d",&x)

#define FOR(i,a,b)      for(int i=a;i<b;i++)
#define RFOR(i,a,b)     for(int i=b-1;i>=a;i--)

#define gcd(a,b)  __gcd(a,b)
#define MOD       1000000007
#define EPS       1E-10

#define PI  acos(-1)

#define CASE(x)   cout<<"Case #"<<x<<": ";

int poss(int a)
{
      if(a >= 2 && a<=1000000) return 1;
      else return 0;
}

int main()
{
      inp_s;
      DRT()
      {
            int a,b;
            cin >> a >> b;
            queue<int> bfs;
            int visited[1000001] = {0};
            bfs.push(a);
            visited[a] = 1;
            int ans = 0;
            int mul,div,add,sub;
            cin >> mul >> div >> add >> sub;
            while(!bfs.empty())
            {
                  int num = bfs.front();
                  bfs.pop();

                  if(num == b)
                  {
                        ans = visited[b];
                        break;
                  }

                  if(poss(num+add) && !visited[num+add])
                  {
                        bfs.push(num+add);
                        visited[num+add] = visited[num] + 1;
                  }

                  if(poss(num/div) && !visited[num/div])
                  {
                        bfs.push(num/div);
                        visited[num/div] = visited[num] + 1;
                  }

                  if(poss(num-sub) && !visited[num-sub])
                  {
                        bfs.push(num-sub);
                        visited[num-sub] = visited[num] + 1;
                  }

                  if(poss(num*mul) && !visited[num*mul])
                  {
                        bfs.push(num*mul);
                        visited[num*mul] = visited[num] + 1;
                  }
            }
            ans -= 1;
            cout << ans << endl;
      }
      return 0;
}

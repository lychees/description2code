#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
typedef int* PInt;

int MAX;
typedef std::vector<int> Path;
Path path;
int count = 0;
void walk(PInt* a,int i,int j)
{
    if( i < 0 || j < 0 )
        return;
    if( i == MAX-1 && j == MAX-1 )
    {
        //reached
        //path.push_back( i*MAX + j);
        count++;
        /*for(Path::iterator iter = path.begin();
            iter != path.end(); ++iter )
            std::cout<< *iter << " ";
        std::cout<<"reached"<<std::endl;*/
        //path.pop_back();
    }
    else if( i > MAX-1 || j > MAX-1 )
    {
        return;
    }
    else if( a[i][j] == 1 )
    {
        return;
    }
    else if( /*path.find(i*MAX + j ) != path.end()*/std::find( path.begin(),path.end(),  i*MAX + j ) != path.end())
    {
        return;
    }
    else
    {
        path.push_back( i*MAX + j);
        //path.insert( i*MAX + j );
        walk(a,i,j+1);//right
        walk(a,i+1,j);//down
        walk(a,i,j-1);//left
        walk(a,i-1,j);//up
        //path.erase(  i*MAX + j );
        path.pop_back();
    }
}

int main()
{
    std::cin>>MAX;
    int val;
    PInt *pint = new PInt[MAX];
    for(int i=0; i < MAX; ++i)
        pint[i] = new int[MAX];
    for(int i =0; i < MAX; ++i)
        for(int j = 0; j < MAX; ++j)
        {
            std::cin >> val;
            pint[i][j] = val;
        }
    walk(pint,0,0);
    std::cout << count <<std::endl;
    return 0;
}

//#pragma comment(linker, "/STACK:16777216")
#include <cstdio>
#include <iostream>
#include <iomanip>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <limits>
#include <climits>
#include <cmath>
#include <functional>
#include <ctime>
#include <cstdlib>
#include <fstream>
#include <typeinfo>
#include <cassert>

#define endl '\n'
#define remainder safdskhaslfa
#define pow aafkhffhlgsdas
#define distance dagkjsdsdsara
#define left askfjasieqwskajdaks
#define right sakjjlkjlkjlashfjas
#define y0 kshjlhlliahjajkdhkasfdg
#define y1 kjlajhjaskhajkhjfkahgjahjkas

using namespace std;

const int N = 511;
const int K = 329;
const long long INF = 1e18;

int n,k;
long long a[N],sum[N];
bool used[N][K];
long long state[N][K];

long long recurse(int pos, int blocks) {
	if(pos>n) {
		if(blocks==0) return 0;
		else return INF;
	}
	if(blocks==0) return INF;
	if(used[pos][blocks]) return state[pos][blocks];
	int i;
	long long ans = INF, curr, curr_sum, rem_sum;
	for(i=pos;i<=n;i++) {
		curr_sum=sum[i]-sum[pos-1];
		rem_sum=sum[n]-sum[i];
		curr=(k-1)*curr_sum*curr_sum-2*curr_sum*(rem_sum)+recurse(i+1,blocks-1);
		ans=min(ans,curr);
	}

	used[pos][blocks]=true;
	state[pos][blocks]=ans;

	return ans;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int i;

	cin>>n>>k;
	for(i=1;i<=n;i++) {
		cin>>a[i];
		sum[i]=a[i]+sum[i-1];
	}

	cout<<recurse(1,k)<<endl;

	return 0;
}

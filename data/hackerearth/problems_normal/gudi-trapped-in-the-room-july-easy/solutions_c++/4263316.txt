/////////////////////// All Is Well /////////////////////////

#include <bits/stdc++.h>

#define FOR(i, s, e) for(int i=s; i<e; i++)
#define loop(i, n) for(int i=0; i<n; i++)
#define CIN   ios_base::sync_with_stdio(0); cin.tie(0)
#define getint(n) scanf("%d", &n)
#define pb(a) push_back(a)
#define ll long long int
#define ull unsigned long long int
#define dd double
#define SZ(a) int(a.size())
#define read() freopen("input.txt", "r", stdin)
#define write() freopen("output.txt", "w", stdout)
#define mem(a, v) memset(a, v, sizeof(a))
#define all(v) v.begin(), v.end()
#define pi acos(-1.0)
#define pf printf
#define sf scanf
#define mp make_pair
#define paii pair<int, int>
#define padd pair<dd, dd>
#define pall pair<ll, ll>
#define fr first
#define sc second
#define CASE(n) printf("Case %d: ",++n)
#define CASE_COUT cout<<"Case "<<++cas<<": "
#define inf 1000000000
#define EPS 1e-9

using namespace std;

//8 way moves
//int fx[]={0,0,1,-1,1,1,-1,-1};
//int fy[]={1,-1,0,0,1,-1,1,-1};

//knight moves
//int fx[]={-2,-2,-1,-1,1,1,2,2};
//int fy[]={-1,1,-2,2,-2,2,-1,1};

//Bit operation
int SET(int n,int pos){ return n=n | (1<<pos);}
int RESET(int n,int pos){ return n=n & ~(1<<pos);}
int CHECK(int n,int pos){ return (bool) (n & (1<<pos));}

int str2int(string s) {
	stringstream ss(s);
	int x;
	ss >> x;
	return x;
}

string int2str(int a) {
	stringstream ss;
	ss << a;
	string str = ss.str();
	return str;
}

string char2str(char a) {
	stringstream ss;
	ss << a;
	string str = ss.str();
	return str;
}

ll bigMod(ll n,ll power,ll MOD)
{
    if(power==0)
        return 1;
    if(power%2==0)
    {
        ll ret=bigMod(n,power/2,MOD);
        return ((ret%MOD)*(ret%MOD))%MOD;
    }
    else return ((n%MOD)*(bigMod(n,power-1,MOD)%MOD))%MOD;
}

ll modInverse(ll n,ll MOD)
{
    return bigMod(n,MOD-2,MOD);
}

int POW(int x, int y)
{
    int res= 1;
    for ( ; y ; ) {
        if ( (y&1) ) {
            res*= x;
        }
        x*=x;
        y>>=1;
    }
    return res;
}

int inverse(int x)
{
    dd p=((dd)1.0)/x;
    return (p)+EPS;
}

int gcd(int a, int b)
{
    while(b) b^=a^=b^=a%=b;
    return a;
}

int nC2(int n)
{
    return n*(n-1)/2;
}

ll MOD(ll n,ll mod)
{
    if(n>=0)
        return n%mod;
    else if(-n==mod)
        return 0;
    else
        return mod+(n%mod);
}

//int main()
//{
//	int t,cas=0;
//	getint(t);
//	while(t--)
//    {
//        int n;
//        getint(n);
//        int ans=0;
//        for(int i=1;i<=n;i++)
//        {
//            for(int j=i+1;j<=n;j++)
//            {
//                if((i ^ j)<=n)
//                    ans++;
//            }
//        }
//        pf("%d\n",ans);
//    }
//	return  0;
//
//}

//int dp[105][105][505],n,m,k,data[105][105];
//
//bool check(int r,int c)
//{
//    return r>=0 && c>=0 && r<n && c<m;
//}
//
//int call(int r,int c,int kk)
//{
//    if(r==n-1 && c==m-1)
//    {
////        cout<<kk+data[r][c]<<endl;
//        if(kk<=k)
//            return kk;
//        return 0;
//    }
//    int &ret=dp[r][c][kk];
//    if(ret!=-1)
//        return  ret;
//    ret=0;
////    cout<<r<<" "<<c<<" "<<kk<<endl;
//
//    if(check(r+1,c+1) && kk+data[r+1][c+1]<=k)
//        ret=max(ret,call(r+1,c+1,kk+data[r+1][c+1]));
//
//    if(check(r+1,c) && kk+data[r+1][c]<=k)
//        ret=max(ret,call(r+1,c,kk+data[r+1][c]));
//
//    if(check(r,c+1) && kk+data[r][c+1]<=k)
//        ret=max(ret,call(r,c+1,kk+data[r][c+1]));
//    return ret;
//}
//
//int main()
//{
//    int t;
//    getint(t);
//    while(t--)
//    {
//        sf("%d %d %d",&n,&m,&k);
//        loop(i,n)
//        {
//            loop(j,m)
//            {
//                getint(data[i][j]);
//            }
//        }
////        loop(i,n)
////        {
////            loop(j,m)
////            {
////                cout<<data[i][j]<<" ";
////            }
////            cout<<endl;
////        }
//        mem(dp,-1);
//        int xx=call(0,0,data[0][0]);
//        if(xx==0)
//            pf("-1\n");
//        else
//            pf("%d\n",xx);
//    }
//}

set<string>sata;
int add,shift;

int dfs(string tmp)
{
    sata.insert(tmp);
    string xx=tmp;
    int sz=tmp.size();
    loop(i,tmp.size())
    {
        xx[(i+shift)%sz]=tmp[i];
    }
    if(sata.find(xx)==sata.end())
        dfs(xx);
    string xxx=tmp;
    loop(i,sz)
    {
        if(i & 1)
        {
            int pp=(tmp[i]-'0');
            pp+=add;
            pp%=10;
            xxx[i]=pp+'0';
        }
    }
    if(sata.find(xxx)==sata.end())
        dfs(xxx);
    return 0;
}

int main()
{
    int t;
    getint(t);
    while(t--)
    {
        sata.clear();
        string ss;
        cin>>ss;
        getint(add);
        getint(shift);
        dfs(ss);
        cout<<*(sata.begin())<<endl;
    }
}

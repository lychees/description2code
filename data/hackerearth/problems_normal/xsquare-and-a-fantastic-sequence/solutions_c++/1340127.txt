#include <bits/stdc++.h>
using namespace std;
vector <int> v[100005];
int cnt1[100005][26];
int cnt2[100005][26];
int idx[100005];
void dfs(int i, int num)
{
    idx[i] = num;
    for ( int j = 0; j < v[i].size(); j++ ) {
        if ( !idx[v[i][j]] ) dfs(v[i][j],num);
    }
}
int main()
{
    int t,n,m,x,y,islands,ans;
    string s1,s2,new_s1;
    cin >> t;
    assert(t<=100000);
    while ( t-- ) {
        cin >> n >> m;
        assert(n<=100000);
        assert(m<=100000);
        cin >> s1 >> s2;
        ans = islands = 0;
        new_s1 = "";
        for ( int i = 0; i < n; i++ ) {
            v[i].clear();
            idx[i] = 0;
            for ( int j = 0; j < 26; j++ ) cnt1[i][j] = cnt2[i][j] = 0;
        }
        while ( m-- ) {
            cin >> x >> y;
            assert(x<=n);
            assert(y<=n);
            x--, y--;
            v[x].push_back(y);
            v[y].push_back(x);
        }
        for ( int i = 0; i < n; i++ ) {
            if ( !idx[i] ) {
                islands++;
                dfs(i,islands);
            }
        }
        for ( int i = 0; i < n; i++ ) {
            cnt1[idx[i]][s1[i]-'a']++;
            cnt2[idx[i]][s2[i]-'a']++;
        }
        for ( int i = 1; i <= islands; i++ ) {
            for ( int j = 0; j < 26; j++ ) ans += min(cnt1[i][j],cnt2[i][j]);
        }
        for ( int i = 0; i < n; i++ ) {
            if ( cnt1[idx[i]][s2[i]-'a'] >= cnt2[idx[i]][s2[i]-'a'] && cnt2[idx[i]][s2[i]-'a'] != 0 ) {
                new_s1.push_back(s2[i]);
                cnt1[idx[i]][s2[i]-'a']--;
                cnt2[idx[i]][s2[i]-'a']--;
                continue;
            }
            for ( char p = 'a'; p <= 'z'; p++ ) {
                if ( cnt1[idx[i]][p-'a'] == 0 ) continue;
                if ( p == s2[i] ) {
                    new_s1.push_back(p);
                    cnt1[idx[i]][p-'a']--;
                    cnt2[idx[i]][p-'a']--;
                    break;
                }
                if ( cnt1[idx[i]][p-'a'] > cnt2[idx[i]][p-'a'] ) {
                    new_s1.push_back(p);
                    cnt1[idx[i]][p-'a']--;
                    cnt2[idx[i]][s2[i]-'a']--;
                    break;
                }
            }
        }
        cout << ans << endl;
        cout << new_s1 << endl;
    }
    return 0;
}
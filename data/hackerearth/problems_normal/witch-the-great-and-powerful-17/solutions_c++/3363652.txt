#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>
using namespace std;

long long unsigned witchHunt(vector<long long unsigned> &person){
    long long unsigned result=0;
   // int diff=numeric_limits<int>::max();
    long long unsigned first_diff=numeric_limits<int>::max();
    long long unsigned second_diff=numeric_limits<int>::max();
     
    sort(person.begin(),person.end());
    first_diff = (person[1]-person[0]);
    second_diff = (person[2]-person[1]);
    result = max(first_diff,second_diff)-1;
    return result;

   /* while(first_diff||second_diff){
        sort(person.begin(),person.end());
        first_diff = abs(person[0]-person[1]);
        second_diff = abs(person[1]-person[2]);
        if(first_diff>second_diff){
            // assign person3 as person0+1
            person[2]=person[0]+1;
        }else if (first_diff<second_diff){
            person[0]=person[1]+1;
        }
         else if(first_diff==0|| first_diff==1){
            break;
        }
        else {
            // chose any one
            person[0]=person[1]+1;
        }

        
        result++;
    }
    return result;*/
}

int main(int argc, const char * argv[]) {
    // insert code here...
   // std::cout << "Hello, World!\n";
    int test_cases;
    cin>>test_cases;
    for(int i=0;i<test_cases;i++){
        long long unsigned l,m,n;
        cin>>l>>m>>n;
        vector<long long unsigned> person;
        person.push_back(l);
        person.push_back(m);
        person.push_back(n);
        cout<<witchHunt(person)<<endl;
    }
    return 0;
}

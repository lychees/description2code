#include <bits/stdc++.h>
#define REP(i,n) for (int i = 1; i <= n; i++)
using namespace std;

typedef long long ll;
typedef vector<vector<ll> > matrix;
const ll MOD = 1000000007ll;
const int K = 5;

// computes A * B
matrix mul(matrix A, matrix B)
{
    matrix C(K+1, vector<ll>(K+1));
    REP(i, K) REP(j, K) REP(k, K)
        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
    return C;
}

// computes A ^ p
matrix pow(matrix A, int p)
{
    if (p == 1)
        return A;
    if (p % 2)
        return mul(A, pow(A, p-1));
    matrix X = pow(A, p/2);
    return mul(X, X);
}

// returns the N-th term of Fibonacci sequence
ll solve()
{
    int N;
    // create vector F1
    vector<ll> F1(K+1);
    for(int i=1; i<=5; i++)
        scanf("%lld",&F1[i]);
    scanf("%d",&N);
    N++;
    // create matrix T
    matrix T(K+1, vector<ll>(K+1));
    for(int i=1; i<=K; i++)
        for(int j=1; j<=K; j++)
            if(j==i+1)T[i][j]=1;
    T[K][1]=1;
    T[K][2]=2;
    T[K][3]=1;
    T[K][4]=1;
    T[K][5]=1;
    // raise T to the (N-1)th power
    if (N == 1)
        return 1;
    T = pow(T, N-1);

    // the answer is the first row of T . F1
    ll res = 0;
    REP(i, K)
        res = (res + T[1][i] * F1[i]) % MOD;
    return res;
}
int main()
{
    int t;
    cin >> t;
    while(t--)
        printf("%lld\n",solve());
    return 0;
}

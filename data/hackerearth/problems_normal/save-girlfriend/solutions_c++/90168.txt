/*===============*\
|  ID: adurysk    |
|    LANG: C++    |
\*===============*/
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define sd(x) x = GetNextInt()

#define LL long long
#define LD long double
#define PB push_back
#define MP make_pair
#define F first
#define S second

#define INF 2000000009

#if 0
#define get getchar_unlocked
#else
#define get getchar
#endif

LL next_int;
char in_char;

inline LL GetNextInt(){
    in_char = ' ';
    while((in_char < '0') | (in_char > '9')){
        in_char = get();
    }
    next_int = 0;
    while((in_char >= '0') && (in_char <= '9')){
        next_int *= 10;
        next_int += in_char - 48;
        in_char = get();
    }
    return next_int;
}


typedef pair<int,int> PII;
typedef vector<int> VI;

#define MAXN 100000

VI fac[MAXN];
bool isp[MAXN];

inline void Solve(){
    LL n, i, j, k, a, b, nod, c, m = 0;
    cin>>a>>b;
    for(i = 0; i <= b - a; i++){
        fac[i].clear();
    }
    for(i = 3; i < MAXN; i += 2){
        isp[i] = true;
    }
    for(i = 3; i * i < MAXN; i += 2){
        for(j = i * i; j < MAXN; j += i + i){
            isp[j] = false;
        }
    }
    isp[2] = true;
    k = 0;
    for(i = 2; i * i <= b; i++){
        if(isp[i] == true){
            for(j = (a % i == 0 ? 0 : i - a % i); j <= b - a; j += i){
                fac[j].PB(i);
                k++;
                //cout<<i<<" "<<j + a<<endl;
                //system("pause");
            }
            //cout<<i<<" "<<k<<endl;
            //system("pause");
        }
    }
    c = 0;
    m = 0;
    for(i = 0; i <= b - a; i++){
        n = i + a;
        nod = 1;
        k = fac[i].size();
        for(j = k - 1; j >= 0; j--){
            k = 1;
            while(n % fac[i][j] == 0){
                n /= fac[i][j];
                k++;
            }
            nod *= k;
        }
        if(n > 1){
            nod *= 2;
        }
        if(nod > m){
            m = nod;
            c = 1;
        }
        else if(nod == m){
            c++;
        }
        //cout<<i<<" "<<nod<<endl;
    }
    cout<<c+1<<endl;
}

int main(){
    int t;
    cin>>t;
    while(t--){
        Solve();
    }
    return 0;
}

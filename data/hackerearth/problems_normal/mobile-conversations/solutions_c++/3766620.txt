#include <bits/stdc++.h>
using namespace std;
bool comppair(const pair<int, int>& f, const pair<int,int>& s) {
	int d1=f.second-f.first;
	int d2=s.second-s.first;
	if(d1>0 && d2>0)
		return f.first<s.first;
	//if(d1<0 && d2<0)
		//return f.second>s.second;
		
	if(d1>0 && d2<0)
		return 1;
		
	if(d1<0 && d2>0)
		return 0;
		
	if(d1==0 && d2>0)
		return 0;
		
	if(d1>0 && d2==0)
		return 1;
	
	if(d1<0 && d2==0)
		return 0;
	
	if(d1==0 && d2<0)
		return 1;
		
	if(d1<0 && d2<0)
		return f.second>s.second;
	return 0;
	
}


int main()
{
    int n;
    cin>>n;
    
    vector <pair<int, int> > vec(n);
    for(int i=0;i<n;i++)
    {
    	cin>>vec[i].first>>vec[i].second;
    }
    sort(vec.begin(),vec.end(),comppair);
    for(int i=0;i<n;i++)
   {
   	//cout<<vec[i].first<<" "<<vec[i].second<<endl;
   }
    long long result=0;
    long long balance=0;
    for(int i=0;i<n;i++)
    {
    	balance=balance-vec[i].first;
    	//cout<<balance<<endl;
    	if(balance<result)
    	{
    		result=balance;
    	}
    	balance=balance+vec[i].second;
    }
    cout<<-1*result;
    return 0;
}

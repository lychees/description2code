#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cctype>
#include <cstdlib>
#include <bitset>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <map>
#include <set>
#include <stack>
#include <cmath>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <complex>
#include <functional>
#include <climits>
#include <cassert>
#include <iterator>
#include <math.h>
#include <time.h>
#include <string.h>
 
#define bit(n) (1<<(n))
#define inf 1000000000
#define eps 1e-9
#define PI 3.1415926535897932385
#define pb push_back
#define sz size()
#define mp make_pair
#define cl clear()
#define all(a) a.begin(),a.end()
#define fill(ar,val) memset(ar,val,sizeof(ar))
#define MIN(a,b) if(a>(b)) a=(b)
#define MAX(a,b) if(a<(b)) a=(b)
#define sqr(x) ((x)*(x))
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define MOD 1000000007
#define bsize 200000
const int N = 1000005;
 
using namespace std;
 // ==================================================================//
 
 long long int dp[N];
 vector<int> g[N];
 vector<int> top_order;
 vector<pair<int,int> > pred[N];
 bool vis[N];
 
void dfs_top(int v)
{
    vis[v] = 1;
    for(int i=0;i<g[v].size();i++)
    {
        if(!vis[g[v][i]])
        {
            dfs_top(g[v][i]);
        }
    }
    top_order.pb(v);
}
 
int main()
{
    // * Faster Input *//
    
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    
    // * ----------------------------------------------------------  * //
    int n,m;
     
    cin >> n >> m;
    for(int i=0;i<m;i++)
    {
    int v,u,t;
    cin >> v >> u >> t;
    --v;
    --u;
    g[v].pb(u);
    pred[u].pb(mp(v,t));
    }
    
    for(int i=0;i<n;i++)
    {
        if(!vis[i])
            dfs_top(i);
    }
    reverse(all(top_order));
    
    long long int res = 0;
    for(int i=0;i<n;i++)
    {
        int v = top_order[i];
        for(int j=0;j<pred[v].size();j++)
        {
            int u = pred[v][j].first;
            int t= pred[v][j].second;
            long long int c = dp[u] + 2 + t;
            if(dp[v] == -1 || dp[v] < c)
            {
                dp[v] = c;
            }
        }
        res = max(res, dp[v]);
    }
 
  cout << res << endl;
  
    return 0;
}
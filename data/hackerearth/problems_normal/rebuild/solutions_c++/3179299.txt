#include<iostream>
#include<vector>
#include<cstdio>
#include<queue>
#include<algorithm>
using namespace std;
int parentt[100007];
vector<pair<pair<int,int>,pair<int,int> > >edge;
bool cmp(pair<pair<int,int>,pair<int,int> >a,pair<pair<int,int>,pair<int,int> >b)
{
if(a.first.first<b.first.first)
return true;
if(a.first.first>b.first.first)
return false;
if(a.second.first>b.second.first)
return true;
if(a.second.first<b.second.first)
return false;
return a.second.second>b.second.second;
}

int findd(int i)
{
if(i==parentt[i])
return i;
parentt[i]=findd(parentt[i]);
return parentt[i];
}

void unionn(int x,int y)
{
parentt[x]=y;
}

void func(int n,int m)
{
long long int sum=0;
for(int i=0;i<=n;i++)
parentt[i]=i;
int deg[n+2];
fill(deg,deg+n+2,0);
sort(edge.begin(),edge.end(),cmp);
for(int i=0;i<edge.size();i++)
{
pair<int,int>temp=edge[i].second;
int x=findd(temp.first);
int y=findd(temp.second);
if(x==y)
continue;
sum=sum+edge[i].first.first;
deg[temp.first]++;
deg[temp.second]++;
unionn(x,y);
}
cout<<sum<<endl;
for(int i=1;i<=n;i++)
cout<<deg[i]<<" ";
cout<<endl;
}

int main()
{
ios_base::sync_with_stdio(false);
int t;
cin>>t;
while(t--)
{
int n,m;
cin>>n>>m;
edge.clear();
for(int i=1;i<=m;i++)
{
int a,b,c;
cin>>a>>b>>c;
if(a>b)
swap(a,b);
edge.push_back(make_pair(make_pair(c,i),make_pair(a,b)));
}
func(n,m);
}
return 0;
}

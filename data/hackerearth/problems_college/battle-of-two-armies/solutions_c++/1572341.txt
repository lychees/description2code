#include <bits/stdc++.h>
#define ll long long int
using namespace std;
vector<int> v;
// marks all mutiples of 'a' ( greater than 'a' but less than equal to 'n') as 1.
void markMultiples(bool arr[], int a, int n)
{
    int i = 2, num;
    while ( (num = i*a) <= n )
    {
        arr[ num-1 ] = 1; // minus 1 because index starts from 0.
        ++i;
    }
}

// A function to print all prime numbers smaller than n
void SieveOfEratosthenes(int n)
{
    // There are no prime numbers smaller than 2
    if (n >= 2)
    {
        // Create an array of size n and initialize all elements as 0
        bool arr[n];
        memset(arr, 0, sizeof(arr));

        /* Following property is maintained in the below for loop
           arr[i] == 0 means i + 1 is prime
           arr[i] == 1 means i + 1 is not prime */
        for (int i=1; i<n; ++i)
        {
            if ( arr[i] == 0 )
            {
                //(i+1) is prime, print it and mark its multiples
                //printf("%d ", i+1);
                v.push_back(i+1);
                markMultiples(arr, i+1, n);
            }
        }
    }
}

int main(){
    SieveOfEratosthenes(100);
    int t;
    cin>>t;
    while(t--){
       int n,i,sumc=0,sump=0;
       cin>>n;
       int c[n],p[n];
       for(i=0;i<n;i++)
        cin>>c[i];
       for(i=0;i<n;i++)
        cin>>p[i];
       for(i=0;i<n;i++){
        if (!binary_search(v.begin(),v.end(),c[i])){
            if (binary_search(v.begin(),v.end(),p[i])){
                if (c[i]<p[i]){
                      p[i]-=c[i];
                      c[i]=0;
                }
                else if (c[i]>p[i]){
                    c[i]-=p[i];
                    p[i]=0;}
                else {
                    c[i]=0;
                    p[i]=0;
                }
            }
          else p[i]=0;

       }
       else{
          if (!binary_search(v.begin(),v.end(),p[i])){
                if (c[i]<p[i]){
                      p[i]-=c[i];
                      c[i]=0;
                }
                else if (c[i]>p[i]){
                    c[i]-=p[i];
                    p[i]=0;}
                else {
                    c[i]=0;
                    p[i]=0;
                }
            }
          else c[i]=0;
       }
    }
    for(i=0;i<n;i++){
        sumc+=c[i];
        sump+=p[i];
    }
    if (sumc>sump) cout<<"The Composites"<<endl;
    else if (sumc<sump) cout<<"The Primes"<<endl;
    else cout<<"Tie"<<endl;
}
return 0;
}

#include<iostream>
#include<queue>
using namespace std;
class node{
public:int first;
       int second;
};
bool visited[1001][1001];
int Ma[1001][1001];
int main()
{
int n;
cin>>n;
//int Ma[n+1][n+1];
for(int i=1;i<=n;i++)
for(int j=1;j<=n;j++)
cin>>Ma[i][j];
for(int i=0;i<=n;i++)
for(int j=0;j<=n;j++)
visited[i][j]=false;
queue<node>q;
int max=-1;
for(int i=1;i<=n;i++)
for(int j=1;j<=n;j++)
{	
if(visited[i][j]==false&&Ma[i][j])
{
visited[i][j]=true;
node element;
element.first=i;
element.second=j;
q.push(element);
int count=0;
while(!q.empty())
{
int x=q.front().first;
int y=q.front().second;
q.pop();
count++;
if(visited[x][y+1]==false&&y+1<=n&&Ma[x][y+1])
{
node ne;
ne.first=x;
ne.second=y+1;
q.push(ne);
visited[x][y+1]=true;
}
if(x-1>=1&&visited[x-1][y]==false&&Ma[x-1][y])
{
node ne;
ne.first=x-1;
ne.second=y;
q.push(ne);
visited[x-1][y]=true;
}
if(visited[x][y-1]==false&&Ma[x][y-1]&&y-1>=1)
{
node ne;
ne.first=x;
ne.second=y-1;
q.push(ne);
visited[x][y-1]=true;
}
if(visited[x+1][y]==false&&Ma[x+1][y]&&x+1<=n)
{
node ne;
ne.first=x+1;
ne.second=y;
q.push(ne);
visited[x+1][y]=true;
}
}
if(count>max)
max=count;
}
}
cout<<max;
return 0;	
}
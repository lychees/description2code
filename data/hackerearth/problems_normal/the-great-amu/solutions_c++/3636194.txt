#include <bits/stdc++.h>

#define FO(i,a,b) for (int i = (a); i < (b); i++)
#define sz(v) int(v.size())

using namespace std;

int pw(int a, int b, int md) {
    int r = 1;
    while (b) {
        if (b&1) r = r*a%md;
        a = a*a%md;
        b/=2;
    }
    return r;
}

struct thing {
    int mod;
    int w[305][605];
    int n;

    int inv(int x) {
        assert(x != 0);
        return pw(x,mod-2,mod);
    }

    void init() {
        int r = 0;
        FO(i,0,2*n) {
            FO(j,r,n) if (w[j][i]) {
                FO(k,0,2*n) swap(w[j][k], w[r][k]);
                break;
            }
            if (w[r][i] == 0) continue;
            int dv = inv(w[r][i]);
            FO(j,0,2*n) w[r][j] = w[r][j]*dv%mod;
            FO(j,r+1,n) {
                int ml = w[j][i];
                FO(k,0,2*n) w[j][k] = ((w[j][k]-ml*w[r][k])%mod+mod)%mod;
            }
            r++;
        }
    }

    bool check(const int *y) {
        FO(i,0,n) {
            int sm = 0;
            FO(j,0,n) sm |= w[i][j];
            if (!sm) {
                int tot = 0;
                FO(j,0,n) tot = (tot + y[j] * w[i][j+n]) % mod;
                if (tot) return false;
            }
        }
        return true;
    }
};

int w[305][305];
int s[305];
int y[305];
int n, q;

int mods[3] = {2,5,719};
thing things[3];

int gcd(int a, int b) {
    if (!min(a,b)) return a+b;
    else return __gcd(a,b);
}

int main() {
    scanf("%d%d", &n, &q);
    FO(i,0,n) {
        FO(j,0,n) {
            scanf("%d", &w[i][j]);
        }
    }
    FO(t,0,3) {
        things[t].mod = mods[t];
        things[t].n = n;
        FO(i,0,n) {
            FO(j,0,n) things[t].w[i][j] = w[i][j] % mods[t];
            things[t].w[i][i+n] = 1;
        }
        things[t].init();
        /*FO(i,0,n) {
            FO(j,0,2*n) printf("%d ", things[t].w[i][j]);
            printf("\n");
        }
        printf("----\n");*/
    }

    FO(z,0,q) {
        FO(i,0,n) {
            scanf("%d", y+i);
        }
        bool gd = true;
        FO(i,0,3) if (!things[i].check(y)) gd = false;
        printf(gd ? "Yes\n" : "No\n");
    }
}

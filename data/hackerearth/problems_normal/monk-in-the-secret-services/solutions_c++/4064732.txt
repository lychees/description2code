#include<bits/stdc++.h>
using namespace std;
 
#define fr(i,n) for(int i=0;i<n;i++)
#define fr1(i,n) for(int i=1;i<=n;i++)
#define ll long long
#define pii pair<int,int>
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define MOD 100002
#define MAX 102
#define INF 100001
/*struct compare{
	bool compare1(const pii &i,const pii &j){
		return i.ff<j.ff;
	}
};*/


priority_queue<pii,vector<pii>,greater<pii> > pq;
int d[MAX];
int vis[MAX];
int n,m;
vector<pii> v[MAX];
int dist[MAX][MAX];
int path[MAX][MAX];
void floyd_marshall(){
	fr1(i,n){
		fr1(j,n){
			if(dist[i][j]!=INF&&i!=j){
				path[i][j]=i;
			}
			else path[i][j]=-1;
		}
	}
	fr1(k,n){
		fr1(i,n){
			fr1(j,n){
				if(dist[i][k]==INF||dist[k][j]==INF)continue;
				if(dist[i][j]>dist[i][k]+dist[k][j]){
					dist[i][j]=dist[i][k]+dist[k][j];
					path[i][j]=path[k][j];
				}	
			}
		}
	}
}

int main(){
	int t,s,a,h;
	cin>>t;
	while(t--){
		memset(vis,0,sizeof(vis));
		cin>>n>>m;
		fr1(i,n){
			fr1(j,n){
				if(i==j)dist[i][j]=0;
				else dist[i][j]=INF;
			}
		}
		fr(i,m){
			int a,b,c;
			cin>>a>>b>>c;
			if(dist[a][b]>c){
				dist[a][b]=c;
				dist[b][a]=c;
			}	
		}
		cin>>s>>a>>h;
		floyd_marshall();
		int ans=0;
		int max1=-1;
		fr1(i,n){
			if(i!=s&&i!=a&&i!=h){
				max1=max(dist[s][i]+2*dist[a][i]+dist[i][h],max1);
			}
		}
		cout<<max1<<endl;
		fr1(i,n){
			v[i].clear();
		}
	}
}
#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
using namespace std;

int adj[26][26], indegree[26], ra[26], seen[26];

void topologicalSort()
{
	queue<int> q;
	
	for(int i=0; i<26; i++)
	{
		if(indegree[i] == 0 && seen[i]==1)
		{
			q.push(i);
			ra[i] = 0;
		}
	}
	
	while(!q.empty())
	{
		int v = q.front();
		q.pop();
		
		for(int i=0; i<26; i++)
		{
			if(adj[v][i] == 1)
			{
				indegree[i] -= 1;
				
				if(indegree[i]==0 && seen[i]==1)
				{	
					q.push(i);
					ra[i] = ra[v] + 1;
				}
			}
		}	
	}
}

void printSolution()
{
	pair<int,char> a[26];
	int k=0;
	
	for(int i=0; i<26; i++)
		if(ra[i]!=-1 && seen[i]==1)
			a[k++] = pair<int,char>(ra[i],i+97);		
	
	sort(a,a+k);
	
	cout << a[0].second;
	
	for(int i=1; i<k; i++)
	{
		if(a[i].first == a[i-1].first)
			cout << a[i].second;
		else
			cout << "\n" << a[i].second;
	}
}

int main()
{
	int n;
	cin >> n;
	
	string s[n];
		
	for(int i=0; i<26; i++)
	{
		seen[i] = indegree[i] = 0;
		ra[i] = -1;
		
		for(int j=0; j<26; j++)
			adj[i][j] = 0;
	}
		
	for(int i=0; i<n; i++)
	{
		cin >> s[i];
	
		for(int j=0; j<s[i].length(); j++)
			seen[s[i][j]-97] = 1;
	}
	
	if(n==1)
	{
		//for(int i=0; i<s[0].length(); i++)
		//	seen[s[0][i]-97] = 1;
		
		for(int i=0; i<26; i++)
			if(seen[i] == 1)
				cout << (char)(i+97);
			
		cout << "\n";
		
		exit(0);
	}
	
	for(int i=0; i<n-1; i++)
	{
		for(int j=i+1; j<n; j++)
		{
			int k=0;
			
			while(s[i][k] == s[j][k])
			{
				//seen[s[i][k]-97] = 1;
				k++;
			}

			if(k<s[i].length() && k<s[j].length())
			{
				if(adj[s[i][k]-97][s[j][k]-97] == 0)
				{						
					adj[s[i][k]-97][s[j][k]-97] = 1;
					indegree[s[j][k]-97] += 1;
			
					//seen[s[i][k]-97] = 1;
					//seen[s[j][k]-97] = 1;
				}
			}
		}
	}
	
	//for(int i=0; i<4; i++)
	//{
	//	for(int j=0; j<4; j++)
	//		cout << adj[i][j];
	//		
	//	cout << "\n";
	//}
	topologicalSort();

	printSolution();	
		
	return 0;
}
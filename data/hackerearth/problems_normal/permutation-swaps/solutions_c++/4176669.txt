#include<bits/stdc++.h>
using namespace std;
vector<int> visited;

void DFS(vector<int> graph[],int v,int c)
{
    visited[v]=c;
    for(int i=0;i<graph[v].size();i++)
    {
        if(visited[graph[v][i]]==0)
            DFS(graph,graph[v][i],c);
    }
}

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        int m;
        cin>>n>>m;
        int a[n+1],b[n+1];
        for(int i=1;i<=n;i++)
            cin>>a[i];

        for(int i=1;i<=n;i++)
            cin>>b[i];

        vector<int> graph[n+1];
        int q1,q2;
        for(int i=0;i<m;i++)
        {
            cin>>q1>>q2;
            graph[a[q1]].push_back(a[q2]);

            graph[a[q2]].push_back(a[q1]);

        }
        visited=vector<int>(n+1,0);
        int c=0;
        for(int i=1;i<=n;i++)
        {

                if(visited[i]==0)
                {
                    c++;
                    DFS(graph,i,c);
                }
        }
        int i;
        for(i=1;i<=n;i++)
        {

            if(a[i]!=b[i])
            {
                if(visited[a[i]]==0)
                {
                    cout<<"NO"<<endl;
                    break;
                }
                else
                {
                    if(visited[a[i]]!=visited[b[i]])
                    {
                        cout<<"NO"<<endl;
                        break;
                    }
                }
            }
        }
        if(i==n+1)
            cout<<"YES"<<endl;

    }
    return 0;
}

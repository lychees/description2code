#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i = 0;i < N;i++)
#define frep(i,a,b) for(int i = a;i <= b;i++)
#define pii pair<int , int>
#define pll pair<ll , ll>
#define vii vector<int>
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcount(x)
#define print(A,j,k) for(int ii=j;ii<=k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 500
#define CASES int t;cin>>t;while(t--)
#define FILE freopen("inp.txt" , "r" , stdin);

const int N = 1e6 + 5;
const int MOD = 1e9 + 7;


int C[N];
ll dp[N][12] , p[N];

int main(int argc, char const *argv[])
{
	fast;

	int n , k , m;
	cin >> n >> k >> m;

	rep(i , n) {
		int x;
		cin >> x;
		C[x]++;
	}

	p[0] = 1;
	for(int i = 1;i <= 500000;i++)
		p[i] = (p[i - 1] * 2LL) % MOD;

	//dp[i][j] denote number of subsets of first i colors with exactly j distinct colors

	for(int i = 1;i <= k;i++) {
		dp[i][1] = ( MOD + (p[C[i]] - 1) + dp[i - 1][1]) % MOD;
		for(int j = 2;j <= m;j++) {
			dp[i][j] = (MOD + dp[i - 1][j] + ((p[C[i]] - 1)*(dp[i - 1][j - 1])) % MOD ) % MOD;
		}
	}

	ll ans = 1;

	for(int i = 1;i <= m;i++)
		ans = (ans + dp[k][i]) % MOD;
	cout << ans << '\n';

	return 0;
}
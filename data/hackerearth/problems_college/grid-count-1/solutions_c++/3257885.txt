#include <iostream>
#include <cmath>
#include <cstdlib>
using namespace std;

bool checkCubeRoot(int n){
	int root = round(cbrt(n));
	return n == root*root*root;
}
int arr[1002][1002] = {0};
int partialSum[1002][1002] = {0};
int main()
{
    int n,k;
    cin>>n>>k;
    for(int i=0;i<n;i++){
    	for(int j=0;j<n;j++){
    		cin>>arr[i][j];
    	}
    }
    int ans = 0;
    // for(int i=0;i<n-k+1;i++){
    // 	for(int j=0;j<n-k+1;j++){
    // 		int sum = 0;
    // 		for(int p=i;p<i+k;p++){
    // 			for(int q=j;q<j+k;q++){
    // 				sum += arr[p][q];
    // 			}
    // 		}
    // 		cout<<sum<<endl;
    // 		if(checkCubeRoot(sum)==true){
    // 			ans++;
    // 		}
    // 	}
    // }
    // ans = 0;
    for(int j=0;j<n;j++){
    	int sum = 0;
    	for(int i=0;i<k;i++){
    		sum+=arr[i][j];
    	}
    	partialSum[0][j] = sum;
    	for(int i=1;i<n-k+1;i++){
    		sum += (arr[i+k-1][j]-arr[i-1][j]);
    		partialSum[i][j] = sum;
    	}
    }
    for(int i=0;i<n-k+1;i++){
    	int sum = 0;
    	for(int j=0;j<k;j++){
    		sum+=partialSum[i][j];
    	}
    	// cout<<sum<<endl;
    	if(checkCubeRoot(sum)==true){
    		ans++;
    	}
    	for(int j=1;j<n-k+1;j++){
    		sum += (partialSum[i][j+k-1]-partialSum[i][j-1]);
    		// cout<<sum<<endl;
    		if(checkCubeRoot(sum)==true){
    			ans++;
    		}
    	}
    }
    cout<<ans;
    return 0;
}

#include <bits/stdc++.h>

using namespace std;



#define ull                         unsigned long long
#define ll                          long long
#define V(x)                        vector<x>
#define pii                         pair<int,int>
#define rep(i,n)                    for(int i=0;i<n;i++)
#define F(i,a,b)                    for(int i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ((b).find(a) != (b).end())
#define pb(x)                        push_back(x)
#define fill(a,v)                   memset(a, v, sizeof a)
#define sz(a)                       ((int)(a.size()))
#define fi                           first
#define se                           second
#define s(n)                        scanf("%d",&n);
#define sl(n)                       scanf("%lld",&n)
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define MOD 1000000007

#define pc putchar_unlocked

inline void print(int n)
{
char ch[15];
int ind=0;
if(n<0)
{
pc('-');
n *= -1;
}
if(n == 0)
{
pc('0');
}
while(n > 0)
{
ch[ind] = n%10 + '0';
n /= 10;
ind++;
}
while(ind--) pc(ch[ind]);
pc('\n');
}



inline int inp(){int n=0,s=1,c=getchar_unlocked();if(c=='-')s=-1;while(c<48)c=getchar_unlocked();while(c>47)n=(n<<3)+(n<<1)+c-'0',c=getchar_unlocked();return n*s;}

int main(){
    int n;
    s(n);
   //n=inp();
    map< string, V(int) >mp;
    map< string, V(int) >::iterator it;
    V(int)::iterator sz;
    rep(i,n){
        string s;
        cin>>s;
        int len=s.length();
        rep(j,len){
            string st="";
            F(k,j,len){
                st+=s[k];
                mp[st].pb(i);
            }
        }
    }
    for(it=mp.begin();it!=mp.end();it++){
       // cout<<(*it).fi<<endl;
        sz=unique(all((*it).second));
        ((*it).second).resize(distance((((*it).second).begin()),sz));
    }
    int Q;
    s(Q);
  // Q=inp();
    while(Q-->0){
        int l,r;
     //   s(l);s(r);
     	l=inp();
     	r=inp();
        l--;
        r--;
        string s;
        cin>>s;
        int ans;
     //   cout<<s<<endl;
        if(s.empty())ans=l-r+1;
        else{
               
                int index1=lower_bound(all(mp[s]),l)-mp[s].begin();
                int index2=upper_bound(all(mp[s]),r)-mp[s].begin();
                ans=index2-index1;
        
    }
   // printf("%d\n",ans);
   print(ans);
}
    return 0;
}

#include<bits/stdc++.h>
#define int long long
#define endl '\n'
#define pi pair<long long,long long>
#define mp make_pair
#define mod 1000000007

using namespace std;
int n,m,id[(int)2e6],k;
vector<pair<int,pi>> edge;

vector<int>v;
void dsu_start()
{
    for(int i=1;i<=n;i++)id[i]=i;
}

int dsu_root(int x)
{
    while(x!=id[x])
    {
        id[x]=id[id[x]];
        x=id[x];
    }
    return x;
}

void dsu_union(int a,int b)
{
    int p=dsu_root(a);
    int q=dsu_root(b);
    id[p]=id[q];
}

int kruskal()
{
    dsu_start();
    int min_cost=0;
     int used=0;

    for(int i=0;i<edge.size();i++)
    {
        int a=edge[i].second.first,b=edge[i].second.second,cost=edge[i].first;
        if(dsu_root(a)!=dsu_root(b))
        {
            ++used;
            min_cost+=cost;
            dsu_union(a,b);
            v.push_back(cost);

        }
    }
    int lm=dsu_root(1);
     for(int i=1;i<n;i++)
     {
         if(dsu_root(i)!=lm)return -1;
     }
    if(used!=n-1)return -1;
    int i=v.size()-1;
    while(min_cost>k&&i>=0)
    {

        min_cost-=(v[i]-1);
        --i;
    }
     if(min_cost>k)return -1;
        return v.size()-1-i;
}

main()
{
    int t;
    t=1;
    while(t--)
    {

    cin>>n>>m>>k;
    edge.clear();
    for(int i=0;i<m;i++)
    {
        int u,v,w;
        cin>>u>>v>>w;
       // w=1;
        edge.push_back(mp(w,mp(u,v)));
    }
    sort(edge.begin(),edge.end());
    cout<<kruskal()<<endl;
    cin>>k;
    }
    return 0;
}


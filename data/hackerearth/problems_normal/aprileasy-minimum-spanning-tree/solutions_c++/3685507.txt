#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <bitset>
#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
struct UnionFind {

    vi comp;
    int nComp;
    UnionFind ( int n ) :comp ( n ),nComp ( n ) {
        rep ( i,n ) comp[i]=i;
    }
    bool merge ( int a,int b ) {
        a=find ( a );
        b=find ( b );
        if ( a==b ) return false;
        comp[a]=b;
        nComp--;
        return true;

    }
    int find ( int a ) {
        while ( comp[a]!=a ) a=comp[a]=comp[comp[a]];
        return a;
    }

};
int getNext ( int x, ll a, int c, int mod ) {
    return ( x*a+c ) %mod;
}
int main() {
    ios_base::sync_with_stdio ( false );
    int n,m,x0,a,c,mod;
    bitset<10000000> taken;
    cin>>n>>m>>x0>>a>>c>>mod;
    const int take=2.5*n;
    assert ( mod>n );
    ll totalWeight=0;
    UnionFind uf ( n );
    while ( 1 ) {
        priority_queue<pair<pii,pii>> q;
        int x=x0;
        rep ( i,m ) {
            x=getNext ( x,a,c,mod );
            int u=x%n;
            x=getNext ( x,a,c,mod );
            int v=x%n; 
            x=getNext ( x,a,c,mod );
            int w=x;
            if ( !taken[i]  && uf.find(u)!=uf.find(v)) {
            	if(q.size()<take || q.top().first.first>w){
                q.push ( mp ( mp ( w,i ),mp ( u,v ) ) );
                if ( q.size() >take ) q.pop();
            	}
            }
        }
        vector<pair<pii,pii>> edg ( q.size() );
        int qs=q.size();
        rep ( i,qs ) {
            edg[qs-i-1]=q.top();
            q.pop();
        }


        for ( pair<pii,pii> e: edg ) {
            taken[e.first.second]=1;
            if ( uf.merge ( e.second.first,e.second.second ) ) {
            totalWeight+=e.first.first;
            if ( uf.nComp==1 ) break;
            }
        }
        if ( uf.nComp==1 ) break;
    }
    cout<<totalWeight<<endl;

}

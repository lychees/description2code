#include "bits/stdc++.h"
using namespace std;
const int N = 2e5 + 5;
const int SN = 1 << 19;
const int mod = 1e9 + 7;
long long segtree[SN];
long long segtree2[SN];
long long lazy[SN];
int last[N];
int n;
int inp;
long long ans = 0;
void push(int l , int r , int node){
	if(lazy[node]){
		segtree2[node] += (((2LL * segtree[node]) % mod) * lazy[node]) % mod;
		segtree2[node] += (((1LL * lazy[node] * lazy[node]) % mod) * 1LL * (r - l + 1)) % mod;
		segtree[node] += ((1LL * lazy[node] * (r - l + 1)) % mod);
		segtree2[node] %= mod;
		segtree[node] %= mod;
		if(l != r){
			lazy[node + node] += lazy[node];
			lazy[node + node + 1] += lazy[node];
		}
		lazy[node] = 0;
	}
}
void update(int l , int r , int node , int ql , int qr){
	push(l , r , node);
	if(l > qr || r < ql){
		return;
	}
	if(l >= ql && r <= qr){
		lazy[node] = 1;
		push(l , r , node);
		return;
	}
	int mid = l + r >> 1;
	int lc = node + node;
	int rc = lc | 1;
	update(l , mid , lc , ql , qr);
	update(mid + 1 , r , rc , ql , qr);
	segtree[node] = (segtree[lc] + segtree[rc]) % mod;
	segtree2[node] = (segtree2[lc] + segtree2[rc]) % mod;
}
int main(){
	cin >> n;
	for(int i = 1 ; i <= n ; ++i){
		cin >> inp;
		update(1 , n , 1 , last[inp] + 1 , i);
		ans += segtree2[1];
		ans %= mod;
		last[inp] = i;
	}
	cout << ans;
}
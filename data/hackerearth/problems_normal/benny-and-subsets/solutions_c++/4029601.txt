
#include <bits/stdc++.h>
using namespace std;
const int mod = 10000000 + 7;
vector<int> a, b;
int DP[1001][1 << 11];
int dp(int u, int x) {
    if (x >= (1 << 11)) {
        return 0;
    }
    if (u == -1) {
        return x == 0;
    }   
    if (DP[u][x] != -1) {
        return DP[u][x];
    }
    return DP[u][x] = (dp(u - 1, x) + dp(u - 1, x ^ b[u])) % mod;
}
int main() {
    memset(DP, -1, sizeof DP);
    int n;
    long long x;
    scanf("%d %lld", &n, &x);
    for (int i = 0; i < n; ++i) {
        int k;
        scanf("%d", &k);
        if (k > (1 << 10)) {
            a.push_back(k);
        }
        else {
            b.push_back(k);
        }
    }
    n = a.size();
    assert (n <= 20);
    long long ans = 0;
    for (int mask = 0; mask < (1 << n); ++mask) {
        int g = 0;
        for (int i = 0; i < n; ++i) {
            if (mask & (1 << i)) {
                g ^= a[i];
            }
        }
        ans += dp((int)b.size() - 1, x ^ g);
    }
    ans %= mod;
    printf("%lld\n", ans);
}
#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
#define MAX 1000003
int q;
int bit[MAX];
int countt[MAX];
int a_siz = 0;
void add(int i, int x){
	while (i < MAX){
		bit[i] += x;
		i += i&-i;
	}
}
int seg[MAX * 4];
inline void update(int b, int l, int r, int x){
	if(r<=x||x<l){
		return;
	}
	if (l + 1 == r){
		if (l == x){
			if (countt[x]){
				seg[b] = x;
			}
			else{
				seg[b] = 0;
			}
		}
		return;
	}
	
	update(b * 2 + 1, l, (l + r) / 2, x);
	update(b * 2 + 2, (l + r) / 2, r, x);
	seg[b]=__gcd(seg[b*2+1],seg[b*2+2]);
	return;
	if (seg[b * 2 + 1] == -1){
		if (seg[b * 2 + 2] == -1){
			seg[b] = -1;
			return;
		}
		else{
			seg[b] = seg[b * 2 + 2];
			return;
		}
	}
	if (seg[b * 2 + 2] == -1){
		seg[b] = seg[b * 2 + 1];
		return;
	}
	seg[b] = __gcd(seg[b * 2 + 1], seg[b * 2 + 2]);
}
int sum(int x){
	int r = 0;
	while (x){
		r += bit[x];
		x -= x&-x;
	}
	return r;
}
int lw(int w){
	if (w <= 0){
		return 0;
	}
	int x = 0;
	for (int k =(1<<19); k > 0; k >>= 1){
		if (x + k < MAX&&bit[x + k] < w){
			w -= bit[x + k];
			x += k;
		}
	}
	return x + 1;
}
inline int f(int B,int l,int r,int ll,int rr){
	if(seg[B]==0){
		return 0;
	}
	if (rr <= l || r <= ll){
		return 0;
	}
	if (ll <= l&&r <= rr){
		return seg[B];
	}
	if (l + 1 == r){
		return 0;
	}
	int a = f(B * 2 + 1, l, (l + r) / 2, ll, rr);
	int b = f(B * 2 + 2, (l + r) / 2, r, ll, rr);
	return __gcd(a,b);
	if (a == -1){
		if (b == -1){
			return -1;
		}
		else{
			return b;
		}
	}
	if (b == -1){
		return a;
	}
	return __gcd(a, b);
}
int ty;
int x;
int main(){
	scanf("%d", &q);
	int qq = 1000001;
	//int maxt=0;
	while (q--){
		scanf("%d", &ty);
		if (ty == 1){
			scanf("%d", &x);
			add(x, 1);
			countt[x]++;
			//maxt=max(maxt,x);
			if (countt[x] == 1){
				update(0, 0, qq, x);
			}
			continue;
		}
		if (ty == 2){
			scanf("%d", &x);
			add(x, -1);
			countt[x]--;
			if (countt[x] == 0){
				update(0, 0, qq, x);
			}
			continue;
		}
		if (ty == 3){
			scanf("%d", &x);
			int ind ;//= lw(x-1);
			int mint=0;
			int maxt=qq;
			while(mint+1<maxt){
				int mid=(mint+maxt)/2;
				if(sum(mid)>=x){
					maxt=mid;
				}
				else{
					mint=mid+1;
				}
			}
			if(mint!=maxt){
				if(sum(mint)>=x){
					maxt=mint;
				}
				else{
					mint=maxt;
				}
			}
			ind=mint;
			if (sum(ind) >= x){
				printf("%d\n", ind);
			}
			else{
				ind = lw(x);
				printf("%d\n", ind);
			}
			continue;
		}
		if (ty == 4){
			int l, r;
			scanf("%d%d", &l, &r);
			int ans = f(0, 0, qq, l, r + 1);
			printf("%d\n", ans);
		}
	}
	return 0;
}
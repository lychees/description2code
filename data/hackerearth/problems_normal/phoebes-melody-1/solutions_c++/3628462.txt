#include <bits/stdc++.h>
using namespace std;

#define MOD 1000000007LL
#define ll long long

#define MAXN 200010
int ft[MAXN], L[MAXN], R[MAXN], V[MAXN];

void maxUpdate(int idx,int val)
{
	for(;idx<MAXN;idx+=(idx&-idx))
		ft[idx] = max(ft[idx],val);
}

int maxQuery(int idx)
{
	int res = 0;
	for(;idx;idx-=(idx&-idx))
		res = max(res,ft[idx]);
	return res;
}

void minUpdate(int idx,int val)
{
	for(;idx<MAXN;idx+=(idx&-idx))
		ft[idx] = min(ft[idx],val);
}

int minQuery(int idx)
{
	int res = MOD;
	for(;idx;idx-=(idx&-idx))
		res = min(res,ft[idx]);
	return res;
}

int main()
{
	int t,n,k;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d%d",&n,&k);
		for(int i=1;i<=n;++i)	
			scanf("%d",V+i);
		memset(L,0,sizeof L);
		memset(R,0,sizeof R);
		memset(ft, 0, sizeof ft);
		for(int i=1;i<=n-k;++i)
		{
			maxUpdate(V[i],i);
			L[i+k] = maxQuery(V[i+k]-1);
		}
		for(int i=0;i<=n;++i)
			ft[i] = MOD;
		for(int i=n;i>k;--i)
		{
			minUpdate(V[i],i);
			R[i-k] = minQuery(V[i-k]-1);
		}
		ll res = 0;
		for(int i=1;i<=n;++i)
		{
			ll cost = MOD;
			if(1<=L[i] and L[i]<=n)
				cost = min(cost,1LL*abs(i-L[i]));
			if(1<=R[i] and R[i]<=n)
				cost = min(cost,1LL*abs(i-R[i]));
			if(cost==MOD)
				cost = 0;
			res += cost;
		}
		cout << res << endl;
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;

int n,e;
int a[5003];
struct node
{
	int p,q,w;
}edge[100005];

struct myfun
{
	bool operator() (node a,node b)
	{
		return a.w>b.w;		
	}
};

int f(int i)
{
	if(i==a[i])
	return i;
	
	else
	a[i]=f(a[i]);
	return a[i];
}
void union1(int i,int j)
{
	
	//f(i);  // this has been done in the if condition
	//f(j);
	int mx=max(a[i],a[j]);
	int mn=min(a[i],a[j]);
	
	a[mx]=a[mn];
	
}
void kruskal()
{
	long long cost=0;
	for(int i=0;i<=n;++i)
	a[i]=i;
	
	node x;
	int c=0,i=0;
	while(c<n-1)
	{
		x=edge[i++];
		if(f(x.p)!=f(x.q))
		{
			c++;
			cost += x.w;
			//cout<<x.p<<" "<<x.q<<" "<<x.w<<"\n";
			union1(x.p,x.q);
		}
		
	}
	cout<<cost<<'\n';
	
}
void insert(int p,int q,int w)
{
	int i;
}
int main()
{
	int i,t;
	cin>>t;
while(t--)
 {

	cin>>n>>e;
	
	for(int i=0;i<e;++i)
	cin>>edge[i].p>>edge[i].q>>edge[i].w;
	
	sort(edge,edge+e,myfun());
	
	//for(int i=0;i<e;++i)
	//cout<<edge[i].p<<" "<<edge[i].q<<" "<<edge[i].w<<'\n';
	kruskal();
	
 }
}

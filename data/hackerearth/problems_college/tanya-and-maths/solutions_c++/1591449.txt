#include <iostream> 
#include <string.h> 
#include <stdio.h> 
#include <vector> 
#include <algorithm> 
#include <map> 
#include <set> 
#include <cmath> 
#include <queue> 
#include <stack> 
#define S(n) scanf("%d",&n) 
#define Sll(n) scanf("%lld",&n) 
#define Sl(n) scanf("%ld",&n) 
#define ll long long 
#define li long int 
using namespace std; 
struct node { ll x; ll y; }; 
ll gcd(ll a, ll b) { return b == 0 ? a : a > b ? gcd(b, a%b) : gcd(a, b%a); } bool myfunc(struct node a,struct node b) { if(a.x == b.x) { return a.y < b.y; } else { return a.x < b.x; } } int prime[5000002]; ll phi[5000002]; void markMultiples(ll a, ll n) { ll i = 2, num; while ( (num = i*a) <= n ) { prime[ num] = 1; // minus 1 because index starts from 0. 
phi[num] = (phi[num] * (a -1) ) / a; ++i; } } void seive(ll n) { memset(prime,0,sizeof(prime)); ll i; ll j; for(i = 2; i <= n; i++) { if(prime[i] == 0) { markMultiples(i,n); } } } int main() { int i; for(i=1; i <= 100000; i++) { phi[i] = i; } seive(100000); for(i = 1; i <= 100000; i++) { if(prime[i] == 0) { phi[i]--; } } int t; S(t); phi[1] = 1; while(t--) { ll a, b; Sll(a); Sll(b); ll i; ll ans = 0; ll d = gcd(a, b); for(i = 1; i * i < d; i++) { if(d % i == 0) { ll t1 = phi[i]; ll t2 = phi[d / i]; ans += t1 + t2; } } ll t1 = sqrt(d); if(t1 *t1 == d) { ans += phi[t1]; } printf("%lld\n", ans); } return 0; }
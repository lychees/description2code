
//karanaggarwal
#include<bits/stdc++.h>
using namespace std;

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

#define si(x) scanf("%d",&x)
#define F first
#define S second
#define PB push_back
#define MP make_pair

typedef long long LL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<PII> VPII;

const int mod = 1000000007;
inline void add(int &x, int y){x+=y; if(x>=mod)x-=mod; if(x<0)x+=mod;}
inline int mul(int x, int y){ return ((LL)x * y)%mod;}
int gcd(int a, int b){ if(b)return gcd(b,a%b); return a;}
int power(int a ,int p){int ret = 1; while(p){if(p&1)ret=mul(ret,a); a=mul(a,a); p/=2;}return ret;}


map<int,int> M;int n;
int A[100000];
int DP[100000][2];
int BIT[100001][2];

int query(int id, int ty)
{
    int ret = 0;
    while(id>0){
        ret = max(ret,BIT[id][ty]);
        id &= (id-1);
    }
    return ret;
}

void update(int id, int val, int ty)
{
    while(id<=n)
    {
        BIT[id][ty] = max(BIT[id][ty],val);
        id += ( id & (-id));
    }
}


int main()
{
    int t; si(t); while(t--)
    {
        M.clear();
        memset(BIT,0,sizeof(BIT));
        int N; si(N); for(int i =0; i<N; i++){si(A[i]); M[A[i]];}
        n = 0;
        for(auto &p : M)p.S = ++n;
        for(int i =0; i<N; i++)A[i] = M[A[i]];
        for(int i =0; i<N; i++)
        {
            DP[i][0] = DP[i][1] = 1;
            DP[i][1] = 1 + query(A[i],0);
            DP[i][0] = 1 + query(n-A[i]+1,1);
            update(n-A[i]+1,DP[i][1],1);
            update(A[i],DP[i][0],0);
        }
        cout<<max(DP[N-1][0],DP[N-1][1])<<endl;
    }
    return 0;	
}

#include <bits/stdc++.h>

using namespace std;

#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define it(i,v) __typeof(v.begin()) i;
#define set(a,val) memset(a,val,sizeof(a))
#define rep(i,a,b) for(__typeof(a) i = (a); i < (b) ; i++)
#define rev(i,a,b) for(__typeof(a) i = (a); i >= (b) ; i--)
#define max(a,b) (a) > (b) ? (a) : (b)
#define min(a,b) (a) < (b) ? (a) : (b)

typedef vector<int> VI;
typedef pair<int,int> PII;
typedef long long LL;
typedef complex < double> CD;

int key(int k,int p) {
	p = 1 << (p-1);
	int r = 0;
	while(k) {
		if(k & 1) r += p;
		p >>= 1;
		k >>= 1;
	}
	return r;
}


void FFT(vector < CD > &A,int s) {
	int n = A.size();
	int p = 0;
	while(n > 1) p++,n >>= 1;
	n = 1 << p;
	vector < CD > aa(A);
	rep(i,0,n) A[key(i,p)] = aa[i];
	CD w,wn,t,u;
	int m,r;
	rep(i,1,p+1) {
		m = 1 << i;
		r = m >> 1;
		wn = CD( cos(s*2*M_PI/(double)m), sin(s*2*M_PI/(double)m) );
		w = 1.0;
		rep(j,0,r){
			for(int k = j; k < n ; k += m) {
				t = w * A[k + r];
				u = A[k];
				A[k] = u + t;
				A[k + r] = u - t;
			}
			w = w * wn;
		}
	}
	if(s==-1){
   	for(int i = 0;i<n;++i)
         A[i] /= (double)n;
 	}
}

vector <CD> Multiply(vector< CD > &P, vector< CD > &Q){
	int n = P.size()+Q.size();
	int p = 1;
	while(p < n) p <<= 1;
	n = p;
	P.resize(n,0);
	Q.resize(n,0);
	FFT(P,1);
	FFT(Q,1);
	vector< CD > R;
	for(int i=0;i<n;i++) R.push_back(P[i]*Q[i]);
	FFT(R,-1);
	return R;
}

const int N = (int)1e5 + 10;

int a[N];

int main() {
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
		scanf("%d", a + i);
	int mx = *max_element(a, a + n);
	vector <CD> p(N);
	vector <CD> q(N);
	for (int i = 0; i < n; ++i) {
		p[a[i]] = 1.0;
		q[mx - a[i]] = 1.0;
	}

	// for (int i = 0; i < N; ++i) {
	// 	if (real(p[i]) > 0.5) {
	// 		cerr << "x^" << i << " ";
	// 	}
	// }
	// cerr << "\n";

	// for (int i = 0; i < N; ++i) {
	// 	if (real(q[i]) > 0.5) {
	// 		cerr << "x^" << i << " ";
	// 	}
	// }
	// cerr << "\n";

	vector <CD> r = Multiply(p, q);
	int ans = 0;
	for (int i = mx + 1; i < r.size(); ++i) {
		if (real(r[i]) > 1e-3)
			++ans;
	}
	map <int, int> cnt;
	for (int i = 0; i < n; ++i)
		cnt[a[i]]++;
	bool ok = false;
	for (int i = 0; i < n; ++i) {
		if (cnt[a[i]] > 1)
			ok = true;
	}
	if (ok)
		++ans;
	printf("%d\n", ans);
	return 0;
}
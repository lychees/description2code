#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <utility>
#include <string>
#include <cstring>
#include <set>

using namespace std;

#define ll unsigned long long int
#define MOD 1000000007

//static int ct;
ll n, k, target;
ll g[401][401];
ll arr[100];
ll ans[65537][401];

ll get_ans(ll, ll);
ll get_min(ll, ll);

int main()
{
	//freopen("input", "rb", "stdin");
	//freopen("output", "w", "stdout");

	ll m, i, j, x, y, c, a, b, val = 999999;
	val *= 999999;
	val *= 99999;

	cin >> n >> m >> k;	
	
	for (i = 1; i <= n; ++i) {
		for (j = 1; j <= n; ++j) {
			g[i][j] = val;
		}
	}
	
	for (i = 0; i < m; ++i) {
		cin >> x >> y >> c;
		g[x][y] = g[y][x] = c;
	}

	for (i = 1; i <= k; ++i) {
		cin >> arr[i];
	}

	for (c = 1; c <= n; ++c) {
		for (a = 1; a <= n; ++a) {
			for (b = 1; b <= n; ++b) {
				if (g[a][c] + g[c][b] < g[a][b]) {
					g[a][b] = g[a][c] + g[c][b];
				}	
			}
		}
	}
/*	
	for (i = 1; i <= n; ++i) {
		for (j = 1; j <= n; ++j) {
			cout << g[i][j] << "\t";
		} cout << endl;
	}
*/
	target = (1<<(k+1)) - 1;
	//cout << target << endl;

	if (k == 0) cout << g[1][n] << endl;
	else cout << get_ans(1, 1) << endl;	

	return 0;
}

ll get_ans(ll mask, ll x)
{
	if (mask == target) {
		return (g[x][n]);
	}

	if (ans[mask][x]) {
		return ans[mask][x];
	}

	ll val, nmask, a, b, c, i, j;
	val = 999999;
	val *= 999999;
	val *= 99999;
	for (i = 1; i <= k; ++i) {
		if (!(mask & (1<<i))) {
			nmask = mask | (1<<i);
			a = (g[x][arr[i]] + get_ans(nmask, arr[i]));
			if (a < val) {
				val = a;
				b = arr[i];
			}
		}
	}

	//cout << b << endl;
	return (ans[mask][x] = val);
}

ll get_min(ll a, ll b)
{
	if (a < b) return a;
	return b;
}
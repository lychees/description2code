/*
std::string moves = "xxxxxoooo";
sort(begin(moves), end(moves)); //sort the string so that it is lexicographically the smallest
//begin returns the start of the char array, and end returns the end of the char array
while (std::next_permutation(begin(moves), end(moves)))
{
    std::cout << moves << std::endl;
}
*/
#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<vector>
#include<bitset>
#include<map>
#include<queue>
#include<stack>
#include<set>
#include<cmath>
#include<algorithm>
#include<utility>
#include<climits>
#include<sstream>

using namespace std;

#define nl printf("\n")
#define space printf(" ")

#define mem(x,val) memset(x,val,sizeof(x))
#define rite(x) freopen(x,"w",stdout)
#define read(x) freopen(x,"r",stdin)

typedef long long ll;
typedef unsigned long long ull;

int ans = 0;
int n,soldier[8];

void thu(int sum1, int sum2, int pos) {
    if (sum1 + soldier[pos] <= sum2) {
        if (pos == n-1) ans += 1;
        else thu(sum1+soldier[pos],sum2,pos+1);
        }
    if (sum1 <= sum2 + soldier[pos]) {
        if (pos == n-1) ans += 1;
        else thu(sum1,sum2+soldier[pos],pos+1);
        }
    }

int main() {
//    read("in.txt");
//    rite("out.txt");
    cin >> n;
    if ( n == 0) {
        cout << 1 << " " << 0 << endl;//tricky case, not 0 0 like i expected
        cout << "We will win!\n";
        return 0;
        }

    int i,j, sum = 0;
    for(i = 0 ; i < n ; ++i) cin >> soldier[i], sum += soldier[i];

    sort(soldier,soldier+n);

    do {
        thu(0,0,0);
        }
    while(next_permutation(soldier,soldier+n));//how to generate permutations for a int array

    cout << ans << " " << sum << endl;
    if (sum >= ans ) cout << "Got no way out!\n";
    else cout << "We will win!\n";
    return 0;
    }

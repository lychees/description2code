#include<bits/stdc++.h>
using namespace std;
int coprime(int a,int b)
{
    for(int i=2;i<=a;i++)
    {
        if(a%i==0 && b%i==0)
        {
            return 0;
        }
    }
    return 1;
}
main()
{
    int t,n,m,k;
    scanf("%d",&t);
    for(int q=1;q<=t;q++)
    {
        scanf("%d%d%d",&n,&m,&k);

        int x[n],mark[m],sum=0;
        vector< pair<int ,int> > v(m);
        vector< vector<int> > comb(n);

        for(int i=0;i<n;i++)
        {
            scanf("%d",&x[i]);
        }
        for(int i=0;i<m;i++)
        {
            scanf("%d",&v[i].first);
        }
        for(int i=0;i<m;i++)
        {
            scanf("%d",&v[i].second);
        }

        /*vector< pair<int ,int> >::iterator it1=v.begin();
        for(;it1!=v.end();it1++)
        {
            printf("%d %d\n",(*it1).first,(*it1).second);
        }*/

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!coprime(x[i],v[j].first))
                {
                    comb[i].push_back(j);
                }
            }
        }
        /*for(int l=0;l<n;l++)
        {
            vector<int>::iterator it2=comb[l].begin();
            for(;it2!=comb[l].end();it2++)
            {
                printf("%d:%d  ",l,*it2);
            }
            printf("\n");
        }*/

        int open[n],cnt=0,t=k,ans=0;
        for(int i=(1<<k)-1;i<(1<<n);i++)
        {
            cnt=0,sum=0;
            for(int j=0;j<t;j++)
            {
                if(i & (1<<j))
                {
                    open[cnt]=j;
                    cnt++;
                }     
                if(cnt>k) break;           
            }
            //printf("i..%d c..%d \n",i,cnt);
            if(i==((1<<t)-1)) t++;
            if(cnt!=k) continue;
            

            
            for(int j=0;j<m;j++)
            {
                mark[j]=0;
            }

            for(int j=0;j<cnt;j++)
            {
                int key=open[j];
                //printf("key %d \n",key);
                for(int l=0;l<comb[key].size();l++)
                {
                    if(!mark[comb[key][l]])
                    {
                        sum+=v[comb[key][l]].second;
                        mark[comb[key][l]]=1;
                        //printf("%d %d \n",v[comb[key][l]].second,comb[key][l]);
                    }
                }
            }
            //printf("s %d\n",sum);
            ans=max(ans,sum);
        }
        printf("%d\n",ans);
    }
}
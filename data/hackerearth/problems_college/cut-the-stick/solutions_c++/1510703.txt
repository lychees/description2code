#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <complex>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define REP(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define MAX(a,b) ((a)>(b)?(a):(b))
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second
#define maxn 100010


int arr[maxn];
int bSearch(int l, int h, int L, int n) {
	if(l>h) return l-1;
	int l1=l;
	while(h-l>1) {
		int m = h+l; m>>=1;
		if(n-arr[m]>L) l=m;
		else h=m;
	}
	if(n-arr[h]>L) return h;
	if(n-arr[l]>L) return l;
	return l1-1;
}

int bSearch1(int l, int h, int L, int n) {
	if(l>h) return l-1;
	int l1=l-1;
	while(h-l>1) {
		int m = h+l; m>>=1;
		if(arr[m]-arr[l1]>L) h=m;
		else l=m;
	}
	if(arr[l]-arr[l1]>L) return l;
	if(arr[h]-arr[l1]>L) return h;
	return h+1;
}

int main() {

	int t; S(t);
	while(t-->0) {
		int s,n,L; S(s); S(n); S(L);
		for(int i=0;i<n;i++) S(arr[i]);
		sort(arr, arr+n);

		long long int res=0;
		for(int i=0;i<n;i++) {
			if(arr[i]>L) { res+=n-(i+1); continue; }
			int id=bSearch(i+1, n-1, L, s);
			int id1=bSearch1(i+1, n-1, L, s);

			res+=(id-i);
			res+=n-(max(id, id1));
			if(id>=id1) res--;
			//printf("%lld %d %d\n", res, id, id1);
		}
		printf("%lld\n", res);
	}
	return 0;
}
// Author : Abhisar Singhal
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>   
#include <map>
#include <string>  
#include <climits> 
#include <set>
#include <string>    
#include <sstream>
#include <utility>   
#include <ctime>
#include <cassert>
#include <fstream>
#include <iomanip>
using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef pair<int, int> II;
typedef vector<long long> VLL;
typedef vector<bool> VB;

#define SZ(A) ((int)A.size())
#define LEN(A) ((int)A.length())
#define MS(A) memset(A, 0, sizeof(A))
#define MSV(A,a) memset(A, a, sizeof(A))
#define MAX(a,b) ((a >= b) ? (a) : (b))
#define MIN(a,b) ((a >= b) ? (b) : (a))
#define ABS(a) (((a) > 0) ? (a) : (-a))
#define MP make_pair
#define X first
#define Y second
#define PB push_back
#define FOUND(A, x) (A.find(x) != A.end())
#define getcx getchar_unlocked
#define INF (int(1e9))
#define INFL (LL(1e18))
#define EPS 1e-12

#define chkbit(s, b) (s & (1<<b))
#define setbit(s, b) (s |= (1<<b))
#define clrbit(s, b) (s &= ~(1<<b))

#define REP(i, n) for(int i = 0; i < (n); i++)
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REV(i, a, n) for(int i = a; i > n; i--)
#define FORALL(itr, c) for(itr = (c).begin(); itr != (c).end(); itr++)
#define ALL(A) A.begin(), A.end()
#define LLA(A) A.rbegin(), A.rend()
//int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
//int dx[] = {1, 1, 1, 0, 0, -1, -1, -1}, dy[] = {1, 0, -1, 1, -1, 1, 0, -1};
inline void inp( int &n ) {
	n=0; int ch = getcx(); int sign = 1;
	while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
	while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
	n = n * sign;
}

int n, k, m;
map<int, int> blocked;
int taken[10000009];
int f[100];
int p[100];
int fc;

bool check(int num, int rem, int last) {
	if (rem == 0 && num > 1) return false;
	if (num == 1) {
		return true;
	}
	if (last > num) return false;
	if (taken[num]) return true;
	for (int i = 2; i * i <= num; i++) {
		if (num % i == 0) {
			if (taken[i] && i >= last) {
				if (check(num / i, rem - 1, i)) return true;
			}
			if (i * i != num && taken[num / i] && num / i >= last) {
				if (check(i, rem - 1, num / i)) return true;
			}
		}
	}
	return false;
}

int main() {
	std::ios_base::sync_with_stdio(false);
	cin >> n >> k >> m;
	REP (i, m) {
		int x;
		cin >> x;
		blocked[x] = 1;
	}
	vector<int> ans;
	if (0) {
		int i = 1;
		while (ans.size() < n) {
			if (!blocked[i]) ans.push_back(i);
			i++;
		}
	} else {
		ans.push_back(1);
		int curr = 2;
		while (ans.size() < n) {
			if (blocked[curr]) {
				curr++;
				continue;
			}
			/*
			fc = 0;
			int x = curr;
			for (int i = 2; i * i <= x; i++) {
				if (x % i == 0) {
					f[fc] = i;
					p[fc] = 0;
					while (x % i == 0) {
						x /= i;
						p[fc]++;
					}
					fc++;
				}
			}
			if (x > 1) {
				f[fc] = x;
				p[fc++] = 1;
			}
			*/
			if (!check(curr, k, 2)) {
				ans.push_back(curr);
				taken[curr] = 1;
			}
			curr++;
		}
	}
	for (int i = 0; i < ans.size(); i++) {
		cout << ans[i] << " ";
	}
	cout << endl;
	return 0;
}

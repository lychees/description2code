#include <iostream>
#include <math.h>

using namespace std;

int isGood(unsigned long a[], unsigned long long k,unsigned int t) {
	int lv=4;
	unsigned long long result=0;
	for (int i = 0; i < 4; i++) {
		lv--;
		result += pow(t,lv)*a[i];
	}
	if (result > k)
		return 1;
	else if (result < k)
		return -1;
	else
		return 0;
}
unsigned int binarySearch(unsigned long a[], unsigned long long k) {
	unsigned int l = 0;
	unsigned int r = 793701;
	unsigned int m;
	int count = 0;
	bool isLeft=false;
	while (l <= (r - 1) & count<25) {
		count++;
		m = (l + r) / 2;
		int j = isGood(a, k, m);
		if (j==0) {
			return m;
		}
		else if (j > 0) {
			r = m;
			isLeft = true;
		} else if (j < 0) {
			l = m + 1;
			isLeft = false;
		}
	}
	if (isLeft) {
		m--;
		if (m>793701) {
			return 0;
		} else {
			return	m;
		}
	}
	else {
		return	m;
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	int test;
	cin >> test;
	for (int i = 0; i < test; i++) {
		unsigned long a[4];
		unsigned long long k;
		cin >> a[0] >> a[1] >> a[2] >> a[3] >> k;
		unsigned int re = binarySearch(a,k);
		cout << re << endl;
	}
	return 0;
}
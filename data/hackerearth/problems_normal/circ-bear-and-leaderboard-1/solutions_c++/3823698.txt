#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll bit1[10000000],bit2[10000000],M;
void update1(ll index,ll diff)
{
   
    while(index<=M)
    {
        bit1[index]+=diff;
        index+=index&(-index);
    }
}
    void update2(ll index,ll diff)
{
    
    while(index<=M)
    {
        bit2[index]+=diff;
        index+=index&(-index);
    }
}
ll query1(ll index)
{

    ll c=0;
    while(index>0)
    {
        c+=bit1[index];
        index-=index&(-index);
    }
    return c;
}

ll query2(ll index)
{
    ll c=0;
  
    while(index>0)
    {
        c+=bit2[index];
        index-=index&(-index);
    }
    return c;
}
  ll n,q,a,b;
    vector<pair<ll,ll> > vec;
    map<ll,ll> mymap,mp;
    set<ll> myset;
    
    ll hsh[10000000]={0};
int main()
{
  mymap.clear();
  myset.clear();
    cin>>n>>q;
    for(int i=0;i<q;i++)
    {
        cin>>a>>b;
        vec.push_back(make_pair(a,b));
        mymap[a]+=b;
        myset.insert(mymap[a]);
    }
    ll i=1;
    //cout<<myset.size();
    set<ll>::iterator itr;
    for(itr=myset.begin();itr!=myset.end();itr++)
    {
        mp[*itr]=i;
        i++;
    }M=i+1;
    ll ans=0,c,d;
    mymap.clear();
    for(int j=0;j<q;j++)
    {
       // cout<<mp[vec[j].second]<<"\n";
      
        a=query1(mp[mymap[vec[j].first]]);
        
        b=query2(mp[mymap[vec[j].first]]-1);
        if(hsh[vec[j].first]>0){
        ans-=(query1(M)-a+1)*mymap[vec[j].first];
        update1(mp[mymap[vec[j].first]],-1);
        update2(mp[mymap[vec[j].first]],-mymap[vec[j].first]);}
        mymap[vec[j].first]+=vec[j].second;
        update1(mp[mymap[vec[j].first]],1);
        update2(mp[mymap[vec[j].first]],mymap[vec[j].first]);
        c=query1(mp[mymap[vec[j].first]]);
        d=query2(mp[mymap[vec[j].first]]-1);
        ll e=query1(M);
         ans+=d-b;
         ans+=(query1(M)-c+1)*mymap[vec[j].first];
       // cout<<M<<" "<<mp[mymap[vec[j].first]]<<"gg\n";
           hsh[vec[j].first]++;
         cout<<ans<<"\n";
    }
    
}
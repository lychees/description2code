#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <iomanip>
#include <list>
#include <ctime>
#include <memory.h>
#include <bitset>
#include <climits>

#define F first
#define S second
#define mp make_pair
#define pb push_back
#define pi 3.141592653589793
#define endl "\n"
#define fill2d(l, nm) fill_n(*l, sizeof l / sizeof **l, nm);
#define MOD 1000000007
using namespace std;

int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};
int t, n, ary[25][25], cnt;
deque<pair<int, int> >dq;
pair<int, int> dest;

bool pass(pair<int, int> node)
{
    //cout<<node.F<<" "<<node.S<<" "<<ary[node.F][node.S]<<endl;
    if(node.F >= 1 && node.F <= n && node.S >= 1 && node.S <= n && ary[node.F][node.S] == 0)
        return true;
    return false;
}

void dfs(pair<int, int> node)
{
    //cout<<node.F<<" "<<node.S<<endl;
    dq.push_front(node);
    if(node == dest)
    {
        //for(int i = 0; i < dq.size(); i++)
            //cout<<dq[i].F<<" "<<dq[i].S<<endl;
        //cout<<"---------"<<endl;
        ++cnt;
    }
    else
    {
        for(int i = 0; i < 4; i++)
        {
            pair<int, int> idx = mp(node.F+dx[i], node.S+dy[i]);
            if(find(dq.begin(), dq.end(), idx) == dq.end() && pass(idx))
                dfs(idx);
        }
    }
    dq.pop_front();
}

int main(){
//freopen("input.txt", "r", stdin);
ios_base::sync_with_stdio(0);
cin.tie(0);

cin>>t;
while(t--)
{
    cin>>n;
    cnt = 0;
    dq.clear();
    dest = mp(n, n);
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n; j++)
            cin>>ary[i][j];
    dfs(mp(1, 1));
    cout<<cnt<<endl;
}

return 0;}

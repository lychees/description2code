/*
    xxx_joker/codersumit
*/
#include <bits/stdc++.h>
#define bitcnt(x) __builtin_popcountll(x)
#define sd(a) scanf("%d",&a)
#define sld(a) scanf("%lld",&a)
#define ss(a) scanf("%s",a)
#define sc(a) scanf("%c",&a)
#define pd(a) printf("%d",a)
#define ps(a) printf("%s",a)
#define pc(a) printf("%c",a)
#define space printf(" ");
#define nw printf("\n")
#define pb push_back
#define FOR(i,a,b) for(i=a;i<b;i++)
#define FORR(i,a,b) for(i=a;i>=b;i--)
#define all(v) v.begin(),v.end()
#define F first
#define S second
#define mk make_pair
#define MAX 1305
#define mod 1000000007
#define inf 1000000005

typedef long long int ll;
typedef unsigned long long ull;
using namespace std;
int road[MAX][MAX],rail[MAX][MAX],n;
int src_road[MAX],src_rail[MAX],dest_rail[MAX],dest_road[MAX];
struct pri{
    int operator()(pair<int,int> x,pair<int,int> y){
        return x.S>y.S;
    }
}p;
void dijkstra(int src,int cost[][MAX],int asd[],int flag){
    int a,b,ncost,i;
    priority_queue<pair<int,int>,vector<pair<int,int> >,pri> q;
    asd[src]=0;
    q.push(mk(src,asd[src]));
    while(!q.empty()){
        a=q.top().F;
        b=q.top().S;
        q.pop();
        FOR(i,0,n){
            ncost=b+((flag==0)?cost[a][i]:cost[i][a]);
            if(asd[i]>ncost){
                asd[i]=ncost;
                q.push(mk(i,ncost));
            }
        }
    }
}
int main(){
    int i,j,s,d,ans=inf;
    sd(n);
    FOR(i,0,n){
        FOR(j,0,n)
            sd(road[i][j]);
    }
    FOR(i,0,n){
        FOR(j,0,n)
            sd(rail[i][j]);
    }
    sd(s);sd(d);
    s--;d--;
    FOR(i,0,n+1){
        FOR(j,0,n+1)
            src_rail[i]=src_road[i]=dest_rail[i]=dest_road[i]=inf;
    }

    dijkstra(s,road,src_road,0);
    dijkstra(s,rail,src_rail,0);
    dijkstra(d,road,dest_road,1);
    dijkstra(d,rail,dest_rail,1);
    /*cout<<"src_rail\n";
    FOR(i,0,n)
        cout<<src_rail[i]<<" ";
    cout<<endl;

    cout<<"src_road\n";
    FOR(i,0,n)
        cout<<src_road[i]<<" ";
    cout<<endl;

    cout<<"dest_rail\n";
    FOR(i,0,n)
        cout<<dest_rail[i]<<" ";
    cout<<endl;

    cout<<"dest_road\n";
    FOR(i,0,n)
        cout<<dest_road[i]<<" ";
    cout<<endl;*/
    FOR(i,0,n){
        if(i==s || i==d);
        else{
            //cout<<"i= "<<i<<" "<<((src_rail[i]+dest_road[i]))<<" "<<(src_road[i]+dest_rail[i])<<endl;
            ans=min(ans,min((src_rail[i]+dest_road[i]),(src_road[i]+dest_rail[i])));
        }
    }
    cout<<ans<<endl;
    return 0;
}

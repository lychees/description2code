#include<iostream>
#include<vector>
#include<queue>
#include<climits>
#include<stack>
using namespace std;
long long int visited[100001],dist[100001],parent[100001],n;
vector<pair<long long,long long> > g[100001];
void bfs(int a)
{
	for(int i=0;i<=n;i++)
	{
		dist[i]=INT_MAX;
		parent[i]=i;
		visited[i]=0;
	}
	queue<int> q;
	q.push(a);
	dist[a]=0;
	while(!q.empty())
	{
		int j=q.front();
		q.pop();
		visited[j]=1;
		for(int i=0;i<g[j].size();i++)
		{
			if(dist[g[j][i].first]>dist[j]+g[j][i].second)
			{
				dist[g[j][i].first]=dist[j]+g[j][i].second;
				parent[g[j][i].first]=j;
				q.push(g[j][i].first);
			}	
		}
	}
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		long long int k,i,d,p,q,a,b,c;
		cin>>n>>k;
		for(i=0;i<k;i++)
		{
			cin>>p>>q>>d;
			g[p].push_back(make_pair(q,d));
			g[q].push_back(make_pair(p,d));
		}
		cin>>a>>b>>c;
		bfs(a);
		int w=dist[b];
		if(w==INT_MAX)
		cout<<"No Train Found."<<endl;
		else
		{
			int x=b;
			stack<int> s;
			while(x!=parent[x])
			{
				s.push(x);
				x=parent[x];
			}
			s.push(x);
			bfs(b);
			if(dist[c]==INT_MAX)
			cout<<"No Train Found."<<endl;
			else
			{
				cout<<w+dist[c]<<endl;
				while(!s.empty())
				{
					cout<<s.top()<<" ";
					s.pop();
				} 
				while(parent[c]!=c)
				{
					s.push(c);
					c=parent[c];
				}
				while(!s.empty())
				{
					cout<<s.top()<<" ";
					s.pop();
				}
				cout<<endl;
			}
		}
		for(i=0;i<=n;i++)
		g[i].clear();
	}
}
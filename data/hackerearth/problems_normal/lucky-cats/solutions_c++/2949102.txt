#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_set>
#include<unordered_map>
using namespace std;

#define MAX 10012

#define MOD 1000000007LL
char buf[MAX];

vector<int> v;
vector<long long int> S;

long long int dp[MAX][12][12][2];  //num,per_mod,now_mod,less than
int Mod[MAX][12][12][2];
bool use[MAX][12][12][2];
int k;

inline void dfs(int a, int b, int c, bool d) {
	if (use[a][b][c][d]) {
		return;
	}
	use[a][b][c][d] = true;
	if (a == v.size()) {
		if (b + c > k) {
			Mod[a][b][c][d] = 0;
			dp[a][b][c][d] = 1;
			return;
		}
		Mod[a][b][c][d] = min(k+1,b + c);
		dp[a][b][c][d] = 0;
		return;
	}
	int mod = c;
	for (int i = 0;i < 10;i++) {
		if (d == false && i > v[a]) {
			return;
		}
		bool nex = d | (v[a] > i);
		int bb = b;
		if (i == 4 || i == 7) {
			bb++;
			if (bb > k + 1) {
				bb = k + 1;
			}
		}
		dfs(a + 1, bb, mod, nex);
		dp[a][b][c][d] += dp[a + 1][bb][mod][nex];
		dp[a][b][c][d]%=MOD;
		mod = Mod[a + 1][bb][mod][nex];
	}
	Mod[a][b][c][d] = mod;
}

int main() {
	scanf("%d", &k);
	scanf("%s", buf);
	int siz = strlen(buf);
	for (int i = 0;i < siz;i++) {
		v.push_back(buf[i] - '0');
	}
	{
		long long int sum = 0;
		long long int d = 1LL;
		for (int i = v.size() - 1;i >= 0;i--) {
			sum += d*(long long int)(v[i]);
			sum %= MOD;
			d *= d;
			d %= MOD;
			S.push_back(sum);
		}
		reverse(S.begin(), S.end());
	}
	dfs(0, 0, 0, 0);
	long long int ans = dp[0][0][0][0];
	printf("%lld\n", ans);
	return 0;
}
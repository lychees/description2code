#include <iostream>
#include <vector>

using namespace std;

vector<int> segtree;
int p[100005];
string s;

int findpower(int val)
{
	int n=1;
	while(n<val)
	{
		n=n<<1;
	}
	
	return n;
}

void construct_tree(int pos,int low,int high)
{
	if(low==high)
	{
		segtree[pos]=s[low]-'0';
		return;
	}
	
	int mid = (low+high)/2;
	
	construct_tree(2*pos+1,low,mid);
	construct_tree(2*pos+2,mid+1,high);
	
	segtree[pos] = ((segtree[2*pos+1]*p[high-mid])  + segtree[2*pos+2])%3;
}

void modify(int pos,int low,int high,int i)
{
	if(low==high)
	{
		segtree[pos]=1;
		s[i]='1';
	}
	else
	{
		int mid = (low+high)/2;
	
		if(i>=low && i<=mid)
			modify(2*pos+1,low,mid,i);
		else
			modify(2*pos+2,mid+1,high,i);
			
		segtree[pos] = ((segtree[2*pos+1]*p[high-mid])  + segtree[2*pos+2])%3;
	}
	
}

int query(int pos,int qlow,int qhigh,int low,int high)
{
	if(qlow>high || qhigh<low)
	return 0;
	
	if(qlow<=low && qhigh>=high)
	return (segtree[pos]*p[qhigh-high])%3;
	
	int mid=(low+high)/2;
	
	int p1 = query(2*pos+1,qlow,qhigh,low,mid);
	int p2 = query(2*pos+2,qlow,qhigh,mid+1,high);
	
	return (p1+p2)%3;
}

int main()
{
    int n;
    cin >> n;
    
    p[0]=1;
    for(int i=1;i<=100005;i++)
    {
    	p[i]=(p[i-1]*2)%3;
    }
    
    segtree = vector<int>(2*findpower(n)-1);
    
    cin >> s;		// String input
    
    construct_tree(0,0,n-1);
    
    int q;
    cin>>q;
    
    int type;
    int i,j,k;
    
    while(q--)
    {
    	cin >> type;
    	
    	if(type==0)
    	{
    		cin >> i >> j;
    		cout << query(0,i,j,0,n-1) << endl;
    	}
    	else
    	{
    		cin >> k;
    		modify(0,0,n-1,k);
    	}
    }
    
    
    return 0;
}

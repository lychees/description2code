#include <iostream>
#include<vector>
#include<climits>
using namespace std;
long long int maxx;
long long int count;

void dfs(vector< vector<int> > &graph,vector<int> &vis1,int curr,vector<int> &level)
{
	//cout<<"curr "<<curr;
	vis1[curr]=1;
	if(level[curr-1]>maxx)
	{
		maxx=level[curr-1];
		count=1;
	}
	else if(level[curr-1]==maxx) count++;
	for(int i=0;i<graph[curr].size();i++)
	{
		if(vis1[graph[curr][i]]==0)
		dfs(graph,vis1,graph[curr][i],level);
	}
}

int main()
{
    int v,e;
    cin>>v>>e;
    vector<int> level(v);
    for(int i=0;i<v;i++)
    cin>>level[i];
    vector< vector<int> > graph(v+1);
    for(int i=0;i<e;i++)
    {
    	int a,b;
    	cin>>a>>b;
    	//cout<<a<<" "<<b<<endl;
    	graph[b].push_back(a);
    	graph[a].push_back(b);
    }
    vector<int> vis1(v+1);
    vector<int> ans;
    for(int i=1;i<=v;i++)
    {
    	//cout<<"for i= "<<i<<endl;
    	if(vis1[i]==0)
    	{	
    		maxx=INT_MIN;
    		count=0;
    		dfs(graph,vis1,i,level);
    		//cout<<maxx<<endl;
    		ans.push_back(count);
    		//cout<<"ans_push "<<count<<endl;
    	}
    }
    long long int anss=1;
   /* for(int i=0;i<=5;i++)
    {
    	for(int j=0;j<graph[i].size();j++)
    	cout<<graph[i][j]<<" ";
    	cout<<endl;
    }*/
    for(int i=0;i<ans.size();i++)
    {
    	//cout<<ans[i]<<" ";
    	anss=(anss*ans[i])%1000000007;
    }
    //cout<<endl;
    cout<<anss<<endl;
}
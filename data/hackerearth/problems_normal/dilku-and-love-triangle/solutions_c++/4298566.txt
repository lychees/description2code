#include<bits/stdc++.h>
using namespace std;
const int MAXN=1e6+4;
const int LOGN=20;
vector<int>g[MAXN];
int bit[MAXN],start[MAXN],etim[MAXN],pr[LOGN+2][MAXN],level[MAXN],len=0;
void dfs(int u,int p)
{
    pr[0][u]=p;
    start[u]=++len;
    level[u]=1+level[p];
    for(size_t i=0;i<g[u].size();++i)
    {
        if(g[u][i]!=p)
            dfs(g[u][i],u);
    }
    etim[u]=++len;
}
int quer(int idx)
{
    int sum=0;
    for(;idx>0;idx-=idx&(-idx))
        sum+=bit[idx];
    return sum;
}
void upd(int idx,int val)
{
    for(;idx+2<=(MAXN);idx+=idx&(-idx))
        bit[idx]+=val;
}
int lca(int u,int v)
{
    if(level[u]>level[v])
        swap(u,v);
    int diff=level[v]-level[u];
    for(int i=0;i<LOGN;++i)
        if((1<<i)&diff)
            v=pr[i][v];
    if(u==v)return u;
    for(int i=LOGN-1;i>=0;--i)
        if(pr[i][u]!=pr[i][v])
            u=pr[i][u],v=pr[i][v];
    return pr[0][u];
}
int main()
{
    int n,q;
    scanf("%d %d",&n,&q);
    for(int i=1;i<n;++i)
    {
        int u,v;
        scanf("%d %d",&u,&v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
    len=0;
    dfs(1,1);
    for(int i=1;i<LOGN;++i)
        for(int j=1;j<=n;++j)
            pr[i][j]=pr[i-1][pr[i-1][j]];
    while(q--)
    {
        int t;scanf("%d",&t);
        if(t==1)
        {
            int u,v;
            scanf("%d %d",&u,&v);
            int LCA=lca(u,v);
            upd(start[u],+1);
            upd(start[v],+1);
            upd(start[LCA],-1);
            if(LCA!=1)upd(start[pr[0][LCA]],-1);
        }
        else
        {
            int x;scanf("%d",&x);
            printf("%d\n",quer(etim[x])-quer(start[x]-1));
        }
    }
    return 0;
}

class Stack:
	def __init__(self, capacity):
		self.capacity = capacity
		self.size = 0
		self.arr = []
	def _push(self,element):
		if self.size<self.capacity:	
			self.arr.append(element)
			self.size+=1
		else:
			return
	def _pop(self):
		if self.size>0:
			self.size-=1
			return self.arr.pop()
		else:
			return
	def _getFront(self):
		if self.size>0:
			return self.arr[self.size-1]
		else: 
			return

test_cases = int(raw_input().strip())
for i in range(test_cases):
	(n, Id) = map(int, raw_input().strip().split(' '))
	curr = Stack(n)
	prev = Stack(n)
	curr._push(Id)
	ans=Id
	for i in range(1, n+1):
		a = raw_input().strip().split(' ')
		op = a[0]
		if op=='P':
			prev._push(ans)
			next_Id = int(a[1])
			ans = next_Id
			curr._push(ans)
		if op=='B':
			if prev.size>0:
				ans = prev._pop()
				temp = curr._pop()
				prev._push(temp)
				curr._push(ans)
			else:
				_prev = curr._pop()
				ans = curr._getFront()
				prev._push(_prev)
	print "Player",ans


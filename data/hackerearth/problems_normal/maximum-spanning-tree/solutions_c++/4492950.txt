//#include <bits/stdc++.h>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<math.h>
#include<stack>
#include<stdio.h>
#include<stdlib.h>
#include<queue>
#include <cstdio>
#include <sstream> 
#include <tuple>
#include <set>
 
 
 
using namespace std;
 
typedef long long ll;
 typedef pair<int, int> pairs;
#define F first
#define S second
#define rep(i,n) for(i=0;i<n;i++)
#define srt(i) sort(i.begin(),i.end())
#define vct(i,n) vector<ll> i[n]
#define vctp(i,n) vector < pair<ll,ll> > i[n];
#define arrp(i,n) pair<ll,ll> i[n];
#define modu(i) ((i<0)?(-1*i):(i)) //or use abs
#define endl '\n'
#define pi 3.14
 
bool hae=1;
    
ll MOD=1e9+7;
//ll p=1e9+7;
ll length;
ll kk=0;
ll kkk=0;
ll res[10001]={0};
ll i,tt;
 
template<typename P> struct Cmp
{
    bool operator()(const P &p1, const P &p2)
    {
        if(p1.first > p2.first) return true;
        if(p1.first == p2.first) return p1.second < p2.second;
        return false;
    }
};



int id[100001],m;
pair <long long, pair<int, int> > p[100001];

 void initialize()
{
    for(int i = 0;i < m;++i)
        id[i] = i;
}

int root(int x)
{
    while(id[x] != x)
    {
        id[x] = id[id[x]];
        x = id[x];
    }
    return x;
}


void union1(int x, int y)
{
    int p = root(x);
    int q = root(y);
    id[p] = id[q];
}

long long kruskal(pair<long long, pair<int, int> > p[])
{
    int x, y;
    long long cost, minimumCost = 0;
    for(int i = 0;i < m;++i)
    {
    
        x = p[i].second.first;
        y = p[i].second.second;
        cost = p[i].first;
    
        if(root(x) != root(y))
        {
            minimumCost += cost;
            union1(x, y);
        }    
    }
    return minimumCost;
}

 
 
int main() 
{
// std::ios_base::sync_with_stdio(false);cin.tie(NULL);
 int t,n,i,a,b,c;
 scanf("%d",&t);
 while(t--){
  scanf("%d %d",&n,&m);
  initialize();
   
                          rep(i,m){
                            
                            scanf("%d %d %d",&a,&b,&c);
                            p[i] = make_pair(c, make_pair(a, b));


                          }

                          sort(p,p+m,greater<pair <long long, pair<int, int> > >());
                          printf("%lld\n",kruskal(p));


 }

 



}

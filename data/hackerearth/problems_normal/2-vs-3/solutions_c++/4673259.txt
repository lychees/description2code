#include<bits/stdc++.h>

using namespace std;

long long p[100009];
long long arr[100009];
long long tree[500000];

void build(long long i, long long start, long long en)
{
    if(start==en)
    {
        tree[i]=arr[en];
    }
    else
    {
        long long mid=(start+en)/2;
        build(2*i,start,mid);
        build(2*i+1,mid+1,en);
        tree[i]=(tree[2*i]*p[en-mid]+tree[2*i+1])%3;
    }
}

void update(long long i, long long start, long long en, long long idx)
{
    if(start==en)
    {
        tree[i]=1;
        arr[idx]=1;
    }
    else
    {
        long long mid=(start+en)/2;
        if(idx>=start && idx<=mid)
        {
            update(2*i,start,mid,idx);
        }
        else
        {
            update(2*i+1,mid+1,en,idx);
        }
        tree[i]=(tree[2*i]*p[en-mid]+ tree[2*i+1])%3;
    }
}


long long query(long long i, long long start, long long en, long long l, long long r )
{
    if(r<start || l>en)
    {
        return 0;
    }
    if(start>=l && en<=r)
    {
        return (tree[i]*p[r-en])%3;
    }
    long long p1, p2;
    long long mid;
    mid=(start+en)/2;
    p1=query(2*i,start, mid, l,r);
    p2=query(2*i+1,mid+1,en,l,r);
    return (p1+p2)%3;
}

int main()
{
    int i;
    p[0]=1;
    for(i=1;i<100009;i++)
    {
        p[i]=(p[i-1]*2)%3;
    }
    int n;
    cin>>n;
    string str;
    cin>>str;
    for(i=1;i<=n;i++)
        arr[i]=str[i-1]-48;
    build(1,1,n);
    int q;
    cin>>q;
    while(q--)
    {
        long long a;
        cin>>a;
        if(a==0)
        {
            long long l,r,s;
            cin>>l>>r;
            s=query(1,1,n,l+1,r+1);
            cout<<s<<"\n";
        }
        else
        {
            int idx;
            cin>>idx;
            update(1,1,n,idx+1);
        }
    }
    return 0;
}

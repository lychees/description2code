using namespace std;
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
typedef long long ll; 
typedef pair<int,int> pii; 
typedef vector<vector<ll> > matrix;
#define REP(i,n) for (int i = 0; i < n; i++)
#define FOR(i,n) for (i = 0; i < n; i++)
#define SZ(x) ((int)x.size())
#define PB push_back
#define sf(x) scanf("%d",&x)

#define MOD 1000003
int K;
// computes A * B
matrix mul(matrix A, matrix B)
{
    matrix C(K, vector<ll>(K));
    REP(i, K) REP(j, K) REP(k, K)
    {
      if(C[i][j] + A[i][k] * B[k][j]>=MOD)
	C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
      else
	C[i][j] = (C[i][j] + A[i][k] * B[k][j]);
    }
        
    return C;
}
// computes A ^ p
matrix pow(matrix A, int p)
{
    //cout<<p<<endl;
    if (p == 1)
        return A;
    if (p & 1)
        return mul(A, pow(A, p-1));
    matrix X = pow(A, p/2);
    return mul(X, X);
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int a,b,c;
        cin>>a>>b>>c;
        int N;
        cin>>N;
        K = 4;

        matrix T(K, vector<ll>(K));
        T[0][0] = 1, T[0][1] = 1, T[0][2] = 0, T[0][3] = 0;
        T[1][0] = 0, T[1][1] = 1, T[1][2] = 1, T[1][3] = 1;
        T[2][0] = 0, T[2][1] = 1, T[2][2] = 0, T[2][3] = 0;
        T[3][0] = 0, T[3][1] = 0, T[3][2] = 1, T[3][3] = 0;


        if(N == 1)
        {
            cout<<a<<endl;
            continue;
        }
        else if(N == 2)
        {
            cout<<a + b<<endl;
            continue;
        }
        else if(N == 3)
        {
            cout<<a + b + c<<endl;
            continue;
        }

        vector<ll> F1(K);
        F1[0] = a+b+c;
        F1[1] = a+b+c;
        F1[2] = c;
        F1[3] = b;
        N = N-3;
        //cout<<"hello"<<endl;
        //cout<<N<<endl;
        T = pow(T, N);

        ll res = 0;
        
        REP(i, K)
        {
            //cout<<T[0][i]<<endl;
            res = (res + T[0][i] * F1[i]) % MOD;
        }
        
        cout<<res<<endl;
    }
    
}
#include<bits/stdc++.h>
using namespace std;

bool visited[100000]={false};
int sum=0;
void dfs(vector<list<int> >& tree,vector<pair<int,int> >& vec,int start)
{
visited[start]=true;
sum+=vec[start].second;
list<int>::iterator it;
for(it=tree[start].begin();it!=tree[start].end();it++)
{
	if(visited[*it]==false)
	dfs(tree,vec,*it);
	}	
}

int main()
{
	int n,m,x,u,v,r,nw,ver;char q;
	scanf("%d %d",&n,&m);
	
	vector<pair<int,int> > vec;
	
	vec.push_back(make_pair(0,0));
	for(int i=1;i<=n;i++)
	{
		scanf("%d",&x);
     	vec.push_back(make_pair(i,x));
	}
	vector<list<int> > tree(n+1);
	
	for(int i=1;i<=n-1;i++)
	{
		scanf("%d %d",&u,&v);
		tree[u].push_back(v);
	}
	for(int i=1;i<=m;i++)
	{
	cin>>q;
    if(q=='Q')		
	{	    scanf("%d",&r);
		
			dfs(tree,vec,r);
			cout<<sum<<endl;
			sum=0;
			for(int i=1;i<=n;i++)
			{
			    visited[i]=false;
			}
	}
		else
		{
			scanf("%d %d",&ver,&nw);
			vec[ver].second=nw;
		}
	}
	return 0;
}


#if 1
#include <functional>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <iomanip>
#include <sstream>
#include <numeric>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <list>

using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair<int, int> pii;

const LD eps = 1e-9;
const LD pi = acos(-1.0);
const LL inf = 1e+9;

#define mp make_pair
#define pb push_back
#define X first
#define Y second

#define dbg(x) { cerr << #x << " = " << x << endl; }

// extended template
#pragma comment(linker, "/STACK:36777216")
typedef vector<int> vi;
typedef vector<vi> vvi;

#define forn(i, n) for (int i = 0; i < n; ++i)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()

template<typename T> istream & operator >> (istream &, vector<T> &);
template<typename T> ostream & operator << (ostream &, const vector<T> &);

#define START clock_t _clock = clock();
#define END cerr << endl << "time: " << (clock() - _clock) / LD(CLOCKS_PER_SEC) << endl;

#define NAME "cell"

void solve(){
	int k, z;
	cin >> k >> z;
	string s;
	cin >> s;
	int n = s.length();
	if (k > n){
		cout << -1 << endl;
		return;
	}
	vector<vector<LL> > dp(n + 1, vector<LL>(k + 1, 0));
	for (int i = 1; i <= k; i++) dp[0][i] = -1000000000000000LL;
	forn(i, n){
		for (int t = 0; t <= k; t++) dp[i + 1][t] = -1000000000000000LL;
		int j = i;
		LL x = 0, base = 1;
		while (j >= 0){
			x += base * (s[j] - '0');
			if (x > z) break;
			
			for (int t = 1; t <= k; t++)
				dp[i + 1][t] = max(dp[i + 1][t], dp[j][t - 1] + x);
			base *= 10;
			j--;
		}
	}
	cout << max(-1LL, dp[n][k]) << endl;
}

int main()
{
    //START
    //freopen(NAME ".in", "r", stdin); freopen(NAME ".out", "w", stdout);
    //freopen("input.txt", "r", stdin); // freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);

	int test;
	cin >> test;
	while (test--){
		solve();
	}

    //END                             
    return 0;
}
/*******************************************
*******************************************/

template<typename T> istream & operator >> (istream &is, vector<T> &v)
{
    forn(i, v.size())
        is >> v[i];
    return is;
}
template<typename T> ostream & operator << (ostream &os, const vector<T> &v)
{
    forn(i, v.size())
        os << v[i] << " ";
    return os;
}
#endif
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

bool isPrime(int n) {
	if(n == 1) return false;
	if(n == 2) return true;
	for(int i = 2; i <= sqrt(n); ++i) {
		if(n%i == 0) return false;
	}
	return true;
}

void primeFactorise(int n, vector<int> &primeFactors) {

	if(n%2 == 0) primeFactors.push_back(2);
	while(n%2 == 0) {
		n = n/2;
	}

	for(int i = 3; i <= sqrt(n); i += 2) {
		if(n%i == 0) {
			primeFactors.push_back(i);
			while(n%i == 0) n = n/i;
		}
	}
	if(n > 2) primeFactors.push_back(n);
}

int phi(int n) {

	vector<int> primeFactors;
	primeFactorise(n ,primeFactors);
	int r = primeFactors.size();

	int p = 1, t = 1;
	for(int i = 0; i < r; ++i) {
		t = t*primeFactors[i];
	}
	for(int i = 0; i < r; ++i) {
		p = p*(primeFactors[i] - 1);
	}
	p = p*(n/t);

	return p;

}

bool RBF(int n) {
	if(isPrime(phi(n))) return true;
	else return false;
}

int main() {

	int T;
	cin >> T;
	while(T--) {
		int n;
		cin >> n;

		if(RBF(n)) cout << "TRUE";
		else cout << "FALSE";
		/*cout << phi(n) << endl;

		vector<int> primeFactors;
		primeFactorise(n ,primeFactors);
		for(int i = 0; i < primeFactors.size(); ++i) {
			cout << primeFactors[i] << " ";
		}*/

		cout << endl;
	}

}
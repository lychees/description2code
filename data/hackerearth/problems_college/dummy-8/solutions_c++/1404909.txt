/*******************
  	Rahul Bhati
	CHARUSAT UNIVERSITY
	***********************/

#include <bits/stdc++.h>

using namespace std;

/* Time saving techniques :D */
typedef unsigned long long ull;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;

#define pb              push_back
#define mp              make_pair
#define ff              first
#define ss              second
#define sz              size()
#define ln              length()
#define rep(i,n)        for(int i=0;i<n;i++)
#define fu(i,a,n)       for(int i=a;i<=n;i++)
#define fd(i,n,a)       for(int i=n;i>=a;i--)
#define foreach(it,v)   for( __typeof((v).begin())it = (v).begin() ; it != (v).end() ; it++ )
#define all(a)          a.begin(),a.end()
#define EPS             (1e-9)
#define INF_MAX         2147483647
#define INF_MIN         -2147483647
#define pi              acos(-1.0)
#define N               1000000
#define dbg(x)          { cout<< #x << ": " << (x) << endl; }
#define dbg2(x,y)       { cout<< #x << ": " << (x) << " , " << #y << ": " << (y) << endl; }
#define mset(a, s)      memset(a, s, sizeof (a))
#define Read(r)         freopen(r, "r", stdin)
#define Write(w)        freopen(w, "w", stdout)

using namespace std;
char str[110][110];
int dp[110][110][4];
int n,m;
int sx,sy;
int ex,ey;
struct Node{
	int x,y;
	int t;
	Node(int _x = 0,int _y = 0,int _t = 0){
		x = _x; y = _y; t = _t;
	}
};
int Move[][2]={{-1,0},{0,1},{1,0},{0,-1}};
int get(char ch){
	if(ch == '^')return 0;
	else if(ch == '>')return 1;
	else if(ch == 'v')return 2;
	else return 3;
}
bool in(int x,int y){
	return x >= 0 && x < n && y >= 0 && y < m;
}
bool check(int x,int y,int t){
	for(int i = 0;i < 4;i++){
		int tx = x+Move[i][0];
		int ty = y+Move[i][1];
		while(in(tx,ty)){
			if(str[tx][ty] == '#')break;
			else if(str[tx][ty] != '.'){
				int dir = (t+get(str[tx][ty]))%4;
				if(dir != i && dir%2 == i%2)return false;
				break;
			}
			tx += Move[i][0];
			ty += Move[i][1];
		}
	}
	return true;
}
int bfs(){
	queue<Node>q;
	memset(dp,-1,sizeof(dp));
	q.push(Node(sx,sy,0));
	dp[sx][sy][0] = 0;
	while(!q.empty()){
		Node tmp = q.front();
		q.pop();
		if(tmp.x == ex && tmp.y == ey)return dp[tmp.x][tmp.y][tmp.t];
		for(int i = 0;i < 4;i++){
			int x = tmp.x + Move[i][0];
			int y = tmp.y + Move[i][1];
			if(!in(x,y))continue;
			if(str[x][y] != '.')continue;
			int tt = (tmp.t+1)%4;
			if(!check(x,y,tt))continue;
			if(dp[x][y][tt] != -1)continue;
			dp[x][y][tt] = dp[tmp.x][tmp.y][tmp.t]+1;
			q.push(Node(x,y,tt));
		}
	}
	return -1;
}

int main(){ //Read("input.in");
    int T;
	int iCase = 0;
	scanf("%d",&T);
	while(T--){
		iCase++;
		scanf("%d%d",&n,&m);
		for(int i = 0;i < n;i++)
			scanf("%s",str[i]);
		for(int i = 0;i < n;i++)
			for(int j = 0;j < m;j++){
				if(str[i][j] == 'S'){
					sx = i;
					sy = j;
					str[i][j] = '.';
				}
				if(str[i][j] == 'G'){
					ex = i;
					ey = j;
					str[i][j] = '.';
				}
			}
		int ans = bfs();
		if(ans == -1)printf("Case #%d: impossible\n",iCase);
		else printf("Case #%d: %d\n",iCase,ans);
	}
    return 0;
}

// Author : Abhisar Singhal
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>   
#include <map>
#include <string>  
#include <climits> 
#include <set>
#include <string>    
#include <sstream>
#include <utility>   
#include <ctime>
#include <cassert>
#include <fstream>
using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef pair<int, int> II;
typedef vector<long long> VLL;
typedef vector<bool> VB;

#define SZ(A) ((int)A.size())
#define LEN(A) ((int)A.length())
#define MS(A) memset(A, 0, sizeof(A))
#define MSV(A,a) memset(A, a, sizeof(A))
#define MAX(a,b) ((a >= b) ? (a) : (b))
#define MIN(a,b) ((a >= b) ? (b) : (a))
#define ABS(a) (((a) > 0) ? (a) : (-a))
#define MP make_pair
#define X first
#define Y second
#define PB push_back
#define FOUND(A, x) (A.find(x) != A.end())
#define getcx getchar_unlocked
#define INF (int(1e9))
#define INFL (LL(1e18))
#define EPS 1e-12

#define chkbit(s, b) (s & (1<<b))
#define setbit(s, b) (s |= (1<<b))
#define clrbit(s, b) (s &= ~(1<<b))

#define REP(i, n) for(int i = 0; i < (n); i++)
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REV(i, a, n) for(int i = a; i > n; i--)
#define FORALL(itr, c) for(itr = (c).begin(); itr != (c).end(); itr++)
#define ALL(A) A.begin(), A.end()
#define LLA(A) A.rbegin(), A.rend()
//int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
int dx[] = {1, 1, 1, 0, 0, -1, -1, -1}, dy[] = {1, 0, -1, 1, -1, 1, 0, -1};
inline void inp( int &n ) {
        n=0; int ch = getcx(); int sign = 1;
        while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
        while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
		n = n * sign;
}
int n, m, sx, sy, tx, ty, lx, ly, gx, gy;
bool ok = 1;
inline bool isValid(int x, int y){
	return x >= lx && x <= gx && y >= ly && y <= gy;
}

set<II> pts;
struct Node{
	bool x1, y1, xn, yn;
	Node(){
		x1 = y1 = xn = yn = 0;
	}
};

void dfs(int x, int y, Node &nn){
	if(x == lx) nn.x1 = 1;
	if(y == ly) nn.y1 = 1;
	if(x == gx) nn.xn = 1;
	if(y == gy) nn.yn = 1;
	pts.erase(II(x, y));
	REP(i, 8){
		int nx = x + dx[i];
		int ny = y + dy[i];
		if(!isValid(nx, ny)) continue;
		if(pts.find(II(nx, ny)) != pts.end()) dfs(nx, ny, nn);
	}
}

int main() {
	std::ios_base::sync_with_stdio(false);
	inp(n), inp(m), inp(sx), inp(sy), inp(tx), inp(ty);
	bool xeq = 0, yeq = 0;
	if(sx == tx) xeq = 1;
	if(sy == ty) yeq = 1;
	if(sx > tx){
		swap(sx, tx);
		swap(sy, ty);
	}
	lx = sx, gx = tx;
	if(gx < lx) swap(gx, lx);
	ly = sy, gy = ty;
	if(gy < ly) swap(gy, ly);

	REP(i, m){
		int x, y;
		inp(x), inp(y);
		if(isValid(x, y)){
			if(xeq || yeq) ok = 0;
			pts.insert(II(x, y));
		}
	}
	while(ok && pts.size() > 0){
		II P = *pts.begin();
		Node nn;
		dfs(P.X, P.Y, nn);
	//	cout << nn.x1 << " " << nn.xn << " " << nn.y1 << " " << nn.yn << endl;
		if(ty > sy){
			if((nn.y1 && (nn.yn || nn.x1)) || (nn.xn && (nn.x1 || nn.yn))){
				ok = 0;
				break;
			}
		}else{
			if((nn.yn && (nn.y1 || nn.x1)) || (nn.xn && (nn.x1 || nn.y1))){
				ok = 0;
				break;
			}
		}
	}
	puts(ok ? "YAY MACHAU" : "MAGGU FOREVER");
	return 0;
}


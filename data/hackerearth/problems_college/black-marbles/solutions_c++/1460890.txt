#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;

vector<vector<int>  > a;
char s[702];
int n;
int m;
vector<pair<int, int> > v;
int x[] = { 1, -1, 1, -1 };
int y[] = { 1, 1, -1, -1 };
int ok(int aa, int b){
	if (aa<0 || b<0 || aa>=n || b>=m){
		return -1;
	}
	return a[aa][b];
}
inline int dfs(int b){
	if (b == v.size()){
		return 0;
	}
	int r = dfs(b + 1);
	int c = v[b].first;
	int d = v[b].second;
	bool can = 0;
	for (int i = 0; i < 4; i++){
		int kari = c + x[i]*2;
		int kari1 = d + y[i]*2;
		if (ok(kari, kari1)==1){
			kari -= x[i];
			kari1 -= y[i];
			if (ok(kari, kari1) != 0){
				can = true;
				break;
			}
		}
	}
	a[c][d]=1;
	if (!can){
		r = max(r, dfs(b + 1) + 1);
	}
	a[c][d]=-1;
	return r;
}
int main(){
	while (1){
		a.clear();
		v.clear();
		scanf("%d%d", &n, &m);
		a.assign(n,vector<int>(m,0));
		if (n == 0 && m == 0){
			return 0;
		}
		for (int i = 0; i < n; i++){
			scanf("%s", s);
			for (int j = 0; j < m; j++){
				if (s[j] == 'F'){
					a[i][j] = -1;
					v.push_back(make_pair(i, j));
					continue;
				}
				if (s[j] == 'G'){
					a[i][j] = 1;
				}
				else{
					a[i][j] = 0;
				}
			}
		}
		int ans = dfs(0);
		printf("%d\n", ans);
	}
	return 0;
}
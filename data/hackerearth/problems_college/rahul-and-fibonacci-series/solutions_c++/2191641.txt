#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <vector> 
#include <list>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <string.h>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <fstream>
#include <ctime>
#include <cassert>
#include <stack>
#include <bitset>
#include <unordered_map>
using namespace std;

typedef long long int ll;
typedef pair<int, int > pii;

#define MOD 1000000007
#define pb push_back

unordered_map<ll,ll> Fib;
 
ll fib(ll n)
{
    if(n<=2) return 1;
    if(Fib.find(n) != Fib.end()) return Fib[n];
    Fib[n] = ((fib((n+1) / 2)%MOD*fib(n/2)%MOD)%MOD + (fib((n-1) / 2) % MOD * fib((n-2) / 2) % MOD) % MOD) % MOD;
    return Fib[n];
}

long long fibo_fast(long long n)
 
{
 
    unsigned long long ans[2][2],fibonacci[2][2]={{1,1},{1,0}},result[2][2]={{1,0},{0,1}};
 
    while(n)
 
    {
 
        if(n%2==1)
 
        {
 
            memset(ans,0,sizeof(ans));
 
                for(int i=0;i<2;i++)
 
                    for(int j=0;j<2;j++)
 
                        for(int k=0;k<2;k++)
 
                            ans[i][j]=(ans[i][j]+result[i][k]*fibonacci[k][j])%MOD;
 
                for(int i=0;i<2;i++)
 
                     for(int j=0;j<2;j++)
 
                        result[i][j]=ans[i][j]%MOD;
 
        }
 
        memset(ans,0,sizeof(ans));
 
        for(int i=0;i<2;i++)
 
            for(int j=0;j<2;j++)
 
                for(int k=0;k<2;k++)
 
                    ans[i][j]=(ans[i][j]+fibonacci[i][k]*fibonacci[k][j])%MOD;
 
        for(int i=0;i<2;i++)
 
            for(int j=0;j<2;j++)
 
                fibonacci[i][j]=ans[i][j];
 
        n/=2;
 
    }
 
    return result[0][1]%MOD;
 
}

long long nonfib(long long n)
{
	int a=1,b=1,c=2;
	while(n>0)
              {
               a=b;
               b=c;
               c=a+b;
               n-=(c-b-1);
              }
              n+=(c-b-1);
              return b+n;
}


ll _expo(ll a, ll b)
{
	ll res = 1;
	while(b > 0)
	{
		if(b & 1)
			res = (res * a) % MOD;
		a = (a * a) % MOD;
		b >>= 1;
	}
	return res;
}

void solve()
{
	ll n;
	cin>>n;
	ll fibn = fibo_fast(n) % MOD;
	ll nfib = nonfib(n) % MOD;
	ll res = _expo(nfib,fibn);
//	cout<<fibn<<" "<<nfib<<"\n";
	cout<<res<<"\n";
}

int main()
{
	std::ios::sync_with_stdio(false);
	int t;
	cin>>t;
	//t = 1;
	while(t--)
	{
		solve();
//		break;
	}
	return 0;
}

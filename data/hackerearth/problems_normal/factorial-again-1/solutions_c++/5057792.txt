// ngmq
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <sstream>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <cstdlib>
// #include <climits>
// #include <functional>
// #include <ctime>
#include <cmath>
#include <bitset>
// #include <utility>
#include <complex>
#include<fstream>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
#define inf 1e9 + 1
#define linf 1e18
#define BASE 1000000
#define EPS 1e-10
#define PI acos(-1)
#define pii pair<int,int>
#define vi vector<int>
#define fi first
#define se second
#define ALL(x) (x).begin(), (x).end()
#define ms(x,val) memset(x, val, sizeof(x))
#define pb(x) push_back(x)
#define make_unique(x) sort(ALL(x)) ; x.erase( unique(ALL(x)), x.end()) ;
#define dbg(x) do { cout << #x << " = " << x << endl; } while(0)
#define mp(x, y) make_pair(x, y)

/*** IMPLEMENTATION ***/
bool exitInput = false;
int ntest = 1, itest = 1 ;

const int dx[4] =
{
    1, 0, -1, 0
};
const int dy[4] =
{
    0, 1, 0, -1
};
// const int dx[8] = {-2, -1, -1, +0, +0, +1, +1, +2};
// const int dy[8] = {+0, -1, +1, -2, +2, -1, +1, +0};

/** Knight Move **/
// const int dx[8] = {+1, +2, +2, +1, -1, -2, -2, -1};
// const int dy[8] = {+2, +1, -1, -2, -2, -1, +1, +2};

const char * directions[4] =
{
    "NE", "SE", "Sw", "Nw"
};

const ll Mod = 1000000007LL;
const int maxn = 150000 + 1;
const int maxv = 50000 + 5;
const int maxe = 100000 + 5;

const int root = 0;

int n, p;

ll modPow(ll x, int po)
{
    if(po == 0)
        return 1;
    if(po == 1)
        return x;
    ll ret = modPow(x, po / 2);
    ret = (ret * ret) % p;
    if(po & 1)
        ret = (ret * x) % p;
    return ret;
}
int solve()
{
    if(p == 1)
        return 0;
    if(n == 1)
    {
        return 1;
    }
    if(n == 2)
    {
        return 20 % p;
    }
    if(p == 2 || p == 3 || 3 * n >= p)
    {
        return 0;
    }
    // denominator: (6^n)^-1 mod p = (6^n)^(p-2) mod p
    ll deno = modPow(modPow(6, n), p - 2);

    // numerator: m = 3 * n
    // (p - 1)! = m! * (m + 1)(m+2)...(p-1) = m! * X where X = (m + 1)...(p-1)
    // m! mod p = [(p-1)! / X] mod p = (p-1)! mod p * X^-1 mod p = (p-1) * X^(p-2) mod p
    ll nume  = p - 1;
    ll X = 1;
    for(int i = 3 * n + 1; i <= p - 1; ++i)
    {
        X = ( X * modPow(i, p - 2) ) % p;
    }
    nume = (nume * X) % p;

    return (nume * deno) % p;
}

int main()
{
#ifdef HOME
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int i, j, k;

    scanf("%d", &ntest);
    for(itest = 1; itest <= ntest; ++itest)
    {
        scanf("%d %d", &n, &p);
        k = solve();
        printf("%d\n", k);
    }

    return 0;
}


#pragma comment(linker, "/STACK:500000000")
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <assert.h>
#include <bitset>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

#define y0 y0ChloeGraceMoretz
#define y1 y1ChloeGraceMoretz
#define ll long long
int nextInt() { int n; scanf("%d", &n); return n; }
ll nextLong() { ll n; scanf("%lld", &n); return n; }
const double PI = acos(-1.0);
const double EPS = 1e-9;
const int INF = (int)2e9;

int a[29][29];
int sumInRow[29];
int sumInColumn[29];
int rows[29];

int main() {
	//freopen("in.txt", "rt", stdin);
	//freopen("out.txt", "wt", stdout);
	//srand(time(0));
	//while (true) {
		int n, m, c;
		/*n = 2;
		m = 3;
		c = abs(rand()) % 5;
		printf("%d %d %d\n", n, m, c);*/
		scanf("%d %d %d", &n, &m, &c);
		//for (int i = 0; i < 20; ++i) {
		//	sumInRow[i] = 0;
		//	sumInColumn[i] = 0;
		//}
	
		int totalSum = 0;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				scanf("%d", &a[i][j]);
				/*a[i][j] = rand() % 5;
				if (rand() % 2 == 0) {
					a[i][j] = -a[i][j];
				}*/
				//printf("%d ", a[i][j]);
				totalSum += a[i][j];
				sumInRow[i] += a[i][j];
				sumInColumn[j] += a[i][j];
			}
			//printf("\n");
		}
		//printf("\n");

		//int res = -INF;
		//for (int mask1 = 0; mask1 < (1 << n); ++mask1) {
		//	for (int mask2 = 0; mask2 < (1 << m); ++mask2) {
		//		int sum = 0;
		//		for (int i = 0; i < n; ++i) {
		//			for (int j = 0; j < m; ++j) {
		//				if ((mask1 & (1 << i)) == 0 && (mask2 & (1 << j)) == 0) {
		//					sum += a[i][j];
		//				}
		//			}
		//		}
		//		int count = 0;
		//		for (int i = 0; i < n; ++i) {
		//			if (mask1 & (1 << i)) {
		//				++count;
		//			}
		//		}
		//		for (int j = 0; j < m; ++j) {
		//			if (mask2 & (1 << j)) {
		//				++count;
		//			}
		//		}
		//		res = max(sum - count * c, res);
		//	}
		//}
		//printf("%d\n", res);
	
		int res2 = -INF;
		for (int mask = 0; mask < (1 << m); ++mask) {
			int sum = totalSum;
			for (int i = 0; i < n; ++i) {
				rows[i] = sumInRow[i];
			}
			int count = 0;
			for (int j = 0; j < m; ++j) {
				if (mask & (1 << j)) {
					sum -= sumInColumn[j];
					for (int i = 0; i < n; ++i) {
						rows[i] -= a[i][j];
					}
					++count;
				}
			}
			sort(rows, rows + n);
			res2 = max(sum - count * c, res2);
			for (int i = 0; i < n; ++i) {
				sum -= rows[i];
				++count;
				res2 = max(sum - count * c, res2);
			}
		}
		printf("%d\n", res2);
		//if (res != res2) {
		//	return 0;
		//}
	//}
	return 0;
}
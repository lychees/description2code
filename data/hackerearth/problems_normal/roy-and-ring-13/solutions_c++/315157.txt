#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<string>
#include<map>
#include<set>
#include<stack>
#include<list>
#include<vector>
#include<queue>
#include<deque>
#include<ctype.h>

using namespace std;

#define MOD 1000000007
#define PI acos(-1)
#define MP make_pair
#define PB push_back
#define VI vector<int>
#define PII pair<int,int>
#define SI(x) scanf("%d",&x)
#define PRI(x) printf("%d\n",x)
#define PRLL(x) printf("%lld\n",x)
#define SLL(x) scanf("%lld",&x)
#define MEM(v,i) memset(v,i,sizeof(v))
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for (int i=(a);i<=(b);i++)
#define DEBUG(x) cout<<#x<<"="<<x<<endl
#define getcx getchar_unlocked
#define MAX 10005

#define ll long long
#define max 1000000007
ll n;
 
void multiply(ll F[2][2],ll M[2][2]);
 
void power(ll F[2][2],ll n);
 
/* function that returns nth Fibonacci number */
ll fib(ll n)
{
  ll F[2][2] = {{1,1},{1,0}};
  if(n == 0)
    return 0;
  power(F, n-1);
  return F[0][0]%max;
}
 
/* Optimized version of power() in method 4 */
void power(ll F[2][2],ll n)
{
  if( n == 0 || n == 1)
      return;
  ll M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2);
  multiply(F, F);
 
  if( n%2 != 0 )
     multiply(F, M);
}
 
void multiply(ll F[2][2],ll M[2][2])
{
  ll x =  (F[0][0]%max*M[0][0]%max + F[0][1]%max*M[1][0]%max)%max;
  ll y =  (F[0][0]%max*M[0][1]%max + F[0][1]%max*M[1][1]%max)%max;
  ll z =  (F[1][0]%max*M[0][0]%max + F[1][1]%max*M[1][0]%max)%max;
  ll w =  (F[1][0]%max*M[0][1]%max + F[1][1]%max*M[1][1]%max)%max;
 
  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}
 
/* Driver program to test above function */
ll powmod_(ll a, ll b,ll M)
{
    ll d;
        for(d=1;b;b >>= 1)
        {
                if (b&1)
                     d=(d*a) %M;
                a=(a*a)%M;
        }
 
   return d;
}
int main(){
 int t;
 cin>>t;
 while(t--){
    cin>>n;
    if(n%2==0)
       n--;
    n=(n-1)/2;
    printf("%lld\n",powmod_(fib(n+1),2,max));
}
  return 0;
} 


    #include<bits/stdc++.h>
    #include<string>
    using namespace std;
    #define         mp(x, y) make_pair(x, y)
    #define         SIZE(c) (int)c.size()
    #define         pb(x) push_back(x)
    //#define       map<char,int>::iterator it;
    #define         ff first
    #define         ss second
    #define         ll long long
    #define         ld long double
    #define         pii pair< int, int >
    #define         psi pair< string, int >
    #define         p(n) printf("%lld\n",n)
    #define         p64(n) printf("%I64d\n",n)
    #define         s(n) scanf("%lld",&n)
    #define         s64(n) scanf("%I64d",&n)
    #define         rep(i,a,b) for(i=a;i<b;i++)
    #define         repp(i,a,b) for(i = b - 1;i >= a;i--)
    #define         MOD (1000000007LL)




    ///////////////////////////////////////////////////////

int arr[12345];
int n;
int MAX = 2000;
int minx[10001],maxx[10001]; // stores min and max x corresponding to each y
int cntx[12345],BETMIN[2001][2001],BETMAX[2001][2001];

int main(){
    std::ios::sync_with_stdio(false);
    // freopen("input.txt","r",stdin);
     
    cin>>n;
    int i,j;
    rep(i,0,1001){
        minx[i] = MAX;
        maxx[i] = -1;
    }
    rep(i,1,n + 1){
        cin>>arr[i];
        minx[arr[i]] = min( minx[arr[i]],i );
        maxx[arr[i]] = max( maxx[arr[i]],i );
        cntx[arr[i]]++;
    }

    rep(i,0,1001){

        int temp = MAX;
        rep(j,i + 1,1001){
            temp = min(temp,minx[j]);
            BETMIN[i][j + 1] = temp;
        }
        temp = -2;

        rep(j,i + 1,1001){
            temp = max(temp,maxx[j]);
            BETMAX[i][j + 1] = temp;
        }
    }


    // rep(i,1,5){
    //     rep(j,i + 1,5){

    //         cout<<"i = "<<i<<"  j = "<<j<<"  betmin = "<<BETMIN[i][j]<<" betmax = "<<BETMAX[i][j]<<endl;
    //     }
    // }

    int ans = 0;
    rep(i,0,1001){
        int loy = cntx[i];

        rep(j,i + 1,1001){
            int hiy = cntx[j];
            int temp = loy + hiy;
            if(minx[i] > BETMIN[i][j] && minx[j] > BETMIN[i][j] && BETMIN[i][j] > 0)  temp++;
            if(maxx[i] < BETMAX[i][j] && maxx[j] < BETMAX[i][j] && BETMAX[i][j] < 1001 )  temp++;
            
            ans = max(ans,temp);        
        }
    }

    cout<<ans<<endl;

return 0;

}


/*
* @problem: template
*/
#include <iostream>
#include <algorithm>
#include <utility>
#include <cstring>
#include <string.h>
#include <queue>
#include <set>
#include <map>
#include <math.h>
#include <stdio.h>
#include <vector>
#include <functional>
#include <bitset>
#include <iomanip>
#define ll long long
#define pi acos(-1.0)
#define pb push_back
#define MS0(ar) memset(ar,0,sizeof ar)
#define MS1(ar) memset(ar,-1,sizeof ar)
#define ff first
#define ss second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ind(a) scanf("%d",&a)
#define inf(a) scanf("%lf",&a)
#define inl(a) scanf("%lld",&a)
#define ins(a) scanf("%s",a)
#define pd(a) printf("%d\n",a)
#define pl(a) printf("%lld\n",a);
#define bitcnt(x) __builtin_popcountll(x)
#define mod 1000000007
const int MAX = 1e6 + 10;
using namespace std;
int vis[1000001], dp[1000001], arr[1000001], in[1000001];


int dfs(int index)
{
    if (vis[index])
    {
        if (dp[index] != -1)
        {
            return dp[index];
        }

        else
        {
            int cnt = 1;
            int i = arr[index];
            while (i != index)
            {
                i = arr[i];
                cnt++;
            }
            i = arr[index];
            dp[index] = cnt;
            while (i != index)
            {
                dp[i] = cnt;
                i = arr[i];
            }
            return cnt;
        }
    }
    vis[index] = 1;
    int res = dfs(arr[index]) + 1;
    if (dp[index] == -1)
        dp[index] = res;
    return (dp[index]);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
#ifndef ONLINE_JUDGE
    freopen("../input.txt", "r", stdin);
    //freopen("../output.txt","w",stdout);
#endif
    int t, n, i, res, max_res, index;
    cin >> t;
    while (t--)
    {
        max_res = -1;
        cin >> n;

        memset(in, 0, sizeof(in));

        for (i = 0; i < n; ++i)
        {
            cin >> arr[i];
            in[arr[i]]++;
        }
        memset(vis, 0, sizeof(vis));
        memset(dp, -1, sizeof(dp));


        for (i = 0; i < n; ++i)
        {
            if (!vis[i])
            {
                res = dfs(i);
                //cout<<"res2 is "<<res<<"\n";
                if (res > max_res)
                {
                    max_res = res;
                    index = i;
                }
            }
        }

        //cout<<"max_res is "<<max_res<<"\n";
        //cout<<"index is "<<index<<"\n";
        cout << index << "\n";
    }
    return 0;
}
/*
 *  Search_Counting_Triangles.cpp
 *
 *  Sep 28, 2016
 */


#include <bits/stdc++.h>
using namespace std;

#define iter(c) __typeof((c).begin())
#define tr(i, c) for (iter(c) i = (c).begin(); i != (c).end(); i++)
#define rep(i, a, b) for (int i = (a); i < (b); i++)
#define forn(i, a, b) for (int i = (a); i <= (b); i++)
#define ford(i, a, b) for (int i = (a); i >= (b); i--)
#define read(x) scanf("%lld", &(x))
#define debug(x) cout << #x << "  " << x << endl

#define mp make_pair
#define pb push_back
#define f first
#define s second

typedef long long ll;
typedef pair<ll, ll> ii;

const int MAXN = int(1e5) + 5;
const ll MOD  = ll(1e9) + 7;

ll n;
pair<ll, ii> p[MAXN];

int main() {
//    freopen("input.inp", "r", stdin);

    read(n);
    rep(i, 0, n) {
        ll a, b, c;
        read(a), read(b), read(c);

        p[i].f = min(a, min(b, c));
        p[i].s.s = max(a, max(b, c));
        p[i].s.f = (a+b+c) - p[i].f - p[i].s.s;
    }

    sort(p, p+n);

    int cnt(0);
    if (p[0] != p[1]) cnt++;
    if (n > 1 && p[n-1] != p[n-2]) cnt++;
    rep(i, 1, n-1) {
        if (p[i] != p[i-1] && p[i] != p[i+1]) cnt++;
    }

    printf("%d", cnt);
}

#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define fr(i,a,b) for (int i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (int i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (int i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (int i = (n) - 1; i >= 0; i--)
#define foreach(it, ar) for ( typeof(ar.begin()) it = ar.begin(); it != ar.end(); it++ )
#define fill(ar, val) memset(ar, val, sizeof(ar))

#define uint64 unsigned long long
#define int64 long long
#define all(ar) ar.begin(), ar.end()
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

#define BIT(n) (1<<(n))
#define sqr(x) ((x) * (x))

typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define PI 3.1415926535897932385
#define INF 1000111222
#define eps 1e-8
#define maxN 1111

int n, L, D, d[maxN];
double p[maxN], f[maxN];

int main() {
	scanf("%d %d %d", &n, &L, &D);
	fr(i, 1, n) scanf("%lf", &p[i]);
	fr(i, 1, n) scanf("%d", &d[i]);
	f[0] = 1.0;
	p[0] = p[n + 1] = 1.0;
	d[0] = 0; d[n + 1] = D;
	fr(i, 1, n + 1) {
		f[i] = 0.0;
		frr(j, i - 1, 0) {
			if (d[i] - d[j] > L) break;
			f[i] = max(f[i], f[j] * p[i]);
		}
	}
	if (fabs(f[n + 1]) < eps) puts("IMPOSSIBLE");
	else printf("%.6lf\n", f[n + 1]);
	return 0;
}

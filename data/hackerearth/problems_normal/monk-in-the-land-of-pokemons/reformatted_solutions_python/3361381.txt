from collections import defaultdict


def solve(a, b):
    """
    check for b_i in a_i+1 , if it is not there increment result,
    if it is there check how many times it is there , if number
    of times it is there is greater then a_i less consumed
    :param a:
    :type a:
    :param b:
    :type b:
    :return:
    :rtype:
    """
    available = defaultdict(int)
    items_to_bring = 0
    for i, pokemon_i in enumerate(b):
        available[a[i]] += 1
        if available[pokemon_i] == 0:
            items_to_bring += 1
        else:
            available[pokemon_i] -= 1
    return items_to_bring


def test_solve():
    a = [1, 2, 3, 4, 2]
    b = [1, 2, 4, 3, 4]
    print solve(a, b)
    assert solve(a, b) == 1


if __name__ == "__main__":
    test_cases = input()
    for i in xrange(test_cases):
        number_of_cases = input()
        a = list()
        b = list()

        for j in xrange(number_of_cases):
            _a, _b = map(int, raw_input().split())
            a.append(_a)
            b.append(_b)
        print solve(a, b)

#include <iostream>
using namespace std;

void merge(long int arr[], int l, int m, int r) {
  int i, j, k;
  int n1 = m - l + 1;
  int n2 =  r - m;

  long int L[n1], R[n2];

  for (i = 0; i < n1; i++)
    L[i] = arr[l + i];
  for (j = 0; j < n2; j++)
    R[j] = arr[m + 1 + j];

  i = 0;
  j = 0;
  k = l;
  while (i < n1 && j < n2) {
    if (L[i] >= R[j]) {
      arr[k] = L[i];
      i++;
    } else {
      arr[k] = R[j];
      j++;
    }
    k++;
  }

  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }

  while (j < n2) {
    arr[k] = R[j];
    j++;
    k++;
  }
}

void mergeSort(long int arr[], int l, int r) {
  if (l < r) {
    int m = l + (r - l) / 2;

    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);

    merge(arr, l, m, r);
  }
}

int main() {
  int T;
  cin >> T;
  while (T > 0) {
    int N;
    cin >> N;
    long int a[N];
    for (int i = 0; i < N; i++) {
      cin >> a[i];
    }
    mergeSort(a, 0, N - 1);
    bool found = false;
    for (int i = 0; i < N && !found; i++) {
      for (int j = i + 1; j < N && !found; j++) {
        for (int k = j + 1; k < N && !found; k++) {
          if (a[j] + a[k] > a[i]) {
            cout << a[k] << " " << a[j] << " " << a[i] << endl;
            found = true;
          }
        }
      }
    }
    if (!found) {
      cout << -1 << endl;
    }
    T--;
  }
  return 0;
}
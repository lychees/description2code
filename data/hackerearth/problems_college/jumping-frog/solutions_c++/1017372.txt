#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <set>
#include <map>
#include <queue> 
#include <climits>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;
typedef pair< int, pii > tri;

typedef vector<int> array;
typedef vector<LL> array_LL;
typedef vector<vector<int> > matrix;
typedef vector<vector<LL> > matrix_LL;


#define pb push_back
#define mp make_pair
#define sz size()
#define ln length()
#define forr(i,a,b)                 for(int i=a;i<b;i++)
#define rep(i,n)                    forr(i,0,n) 
#define all(v)                      v.begin(),v.end()    
#define uniq(v)                     sort(all(v));v.erase(unique(all(v)),v.end())
#define clr(a)                      memset(a,0,sizeof a)
    
#define debug                       if(1)
#define debugoff                    if(0)    

#define print(x)                 cerr << x << " ";    
#define pn()                     cerr << endl;
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;

#define endl '\n'
#define MAX 100010
#define MOD 1000000007
vector<int> adjList[110];
int jump[MAX],arr[MAX],lock[110];
void reset(){
    memset(lock,0,sizeof lock);
    memset(jump,-1,sizeof jump);
}
int BFS(int s_idx,int d_idx){
    reset();
    
    int u,v,t_idx,size;
    queue<int> q;
    jump[s_idx] = 0;
    q.push(s_idx);

    while(!q.empty()){
       t_idx = q.front();
       q.pop();
    
       if(t_idx == d_idx)   break;
       
       u = arr[t_idx]; //color
       size = adjList[u].size();
      
       if(!lock[u])
       for(int i=0;i<size;i++){
            v = adjList[u][i]; //idx
            //if(v == t_idx)  continue; //back edge
           
            if(jump[v] == -1){
                jump[v] = jump[t_idx] + 1;
                q.push(v);
            }
            //else    break;
       }

       if(t_idx > 0 && jump[t_idx-1] == -1){ 
            jump[t_idx-1] = jump[t_idx] + 1;
            q.push(t_idx-1);
       }
       lock[u] = 1;
    }
    return jump[d_idx];
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n,s,m,e,q,a,b,qr;
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>arr[i];
        adjList[arr[i]].pb(i);
    }
    
    cin>>qr;
    while(qr--){
        cin>>s>>m>>e;
        a = BFS(s,m); 
        b = BFS(m,e);
        if(a == -1 || b == -1)  cout<<-1<<endl;
        else
            cout<<a+b<<endl;
    }
    return 0; 
}

#include <bits/stdc++.h>
using namespace std;

string s[110];
int appeared[26];
list<int> l[26];
int indegree[26];
int rank_[26]={0};
vector<int> ans[27];
int main()
{
    int n,temp;
    cin>>n;
    memset(appeared,0,sizeof(appeared));
    memset(indegree,0,sizeof(indegree));
    for(int i=0;i<n;i++)
    {
        cin>>s[i];
        for(int j=0;j<s[i].length();j++)
        {
            appeared[s[i][j]-'a']++;
        }
    }

    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            for(int k=0;k<min(s[i].length(),s[j].length());k++)
            {
                if((s[i][k]-'a')!=(s[j][k]-'a'))
                {
                    if(find(l[s[i][k]-'a'].begin(),l[s[i][k]-'a'].end(),(s[j][k]-'a'))==l[s[i][k]-'a'].end())
                    {l[s[i][k]-'a'].push_back(s[j][k]-'a');
                    indegree[s[j][k]-'a']++;
                    }
                    break;

                }
            }
        }
    }
    /*for(int i=0;i<26;i++)cout<<indegree[i]<<" ";
    cout<<endl;
    for(int i=0;i<26;i++)cout<<appeared[i]<<" ";*/
    queue<int> q;
    for(int i=0;i<26;i++)
    {
        if(indegree[i]==0 && appeared[i]!=0)
        {
            q.push(i);
            ans[0].push_back(i);
        }
    }
    while(!q.empty())
    {
        //vector<int> curr;
        temp=q.front();
        q.pop();
        //cout<<(char)(temp+'a')<<endl;
        list<int>:: iterator itr;
        for(itr=l[temp].begin();itr!=l[temp].end();itr++)
        {
            indegree[*itr]--;
            rank_[*itr]=rank_[temp]+1;
            if(indegree[*itr]==0)
                {
                    q.push(*itr);
                    ans[rank_[*itr]].push_back(*itr);
                }
        }
    }
    for(int i=0;i<27;i++)
       {
            sort(ans[i].begin(),ans[i].end());
            for(int j=0;j<ans[i].size();j++)
                cout<<(char)(ans[i][j]+'a');
            if(ans[i].size()>0)cout<<endl;
        }

    return 0;
}

#include <iostream>
#include <stack>
#include <vector>
#include <queue>
#include <stdio.h>

using namespace std;

int main()
{
    int t;

    cin >> t;

    while(t--)
    {
        long int n, m;

        cin >> n >> m;

        long int src[n+1], dest[n+1], temp, x, y;

        for(long int i=1;i<=n;i++)
        {
            cin >> temp;

            src[temp]=i;
        }

        for(long int i=1;i<=n;i++)
        {
            cin >> temp;

            dest[temp]=i;
        }

        vector <long int> graph[n+1];

        while(m--)
        {
            cin >> x >> y;

            graph[x].push_back(y);

            graph[y].push_back(x);
        }

        long int visited[n+1];

        for(long int i=0;i<=n;i++)
        {
            visited[i]=-1;
        }

        long int group=0, node;

        for(long int i=1;i<=n;i++)
        {
            if(visited[i]==-1)
            {
                group++;

                queue <long int> que;

                que.push(i);

                while(!que.empty())
                {
                    node = que.front();

                    que.pop();

                    if(visited[node]==-1)
                    {
                        visited[node]=group;

                        for(long int j=0;j<graph[node].size();j++)
                        {
                            if(visited[graph[node][j]]==-1)
                            {
                                que.push(graph[node][j]);
                            }
                        }
                    }
                }
            }
        }

        bool poss=true;

        for(long int i=1;i<=n;i++)
        {
            if(src[i]!=dest[i] && visited[src[i]]!=visited[dest[i]])
            {
                poss=false;

                break;
            }
        }

        if(poss)
        {
            cout << "YES" << endl;
        }
        else
        {
            cout << "NO" << endl;
        }
    }

    return 0;
}

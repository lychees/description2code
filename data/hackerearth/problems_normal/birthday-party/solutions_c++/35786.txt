#include<iostream>
#include<vector>
#include<algorithm>
#include<set>
#include<cstring>
#include<string.h>
using namespace std;

int history[1010][1010];

void clear_history()
{
	memset(history,-1,sizeof(history));
}

bool find_soln(int sum,const vector<int>& vec,int idx)
{
	if(idx<0)return false;

	if(history[sum][idx]!=-1)return history[sum][idx];

	if(sum==vec[idx])history[sum][idx]=1;
	else if(vec[idx]>sum)history[sum][idx]=find_soln(sum,vec,idx-1);
	else history[sum][idx]=find_soln(sum,vec,idx-1)||find_soln(sum-vec[idx],vec,idx-1);

	return history[sum][idx];
}

int main()
{
	int t;scanf("%i",&t);
	vector<int> vec;
	while(t--)
	{
		int ppl,num;scanf("%i %i",&ppl,&num);
		int proper=0;

		vec.clear();

		for(int i=0;i<num;++i)
		{
			int tmp;scanf("%i",&tmp);vec.push_back(tmp);
		}

		sort(vec.begin(),vec.end());
		clear_history();

		for(int i=0,counter=0,prev=-1;i<ppl;++i)
		{
			int tmp;scanf("%i",&tmp);

			if(tmp!=prev && i)
			{
				proper+=find_soln(counter,vec,vec.size()-1);
				counter=0;
			}
			prev=tmp;
			++counter;
			
			if(i==ppl-1)proper+=find_soln(counter,vec,vec.size()-1);
		}

		printf("%i\n",proper);
	}
	
	return 0;
}
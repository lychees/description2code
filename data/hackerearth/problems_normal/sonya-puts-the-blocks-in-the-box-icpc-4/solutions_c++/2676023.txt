#include <bits/stdc++.h>
using namespace std;

#define inf 1000000000000000

int N, M;

long long A[102][1003], B[100005], dp[102][1003];
vector<long long> X;

long long solve(int i, int num)
{
	if(num>M)
		return -inf;
	
	if(i==N+1)
		return 0;
	
	if(dp[i][num]!=-1)
		return dp[i][num];
	
	dp[i][num] = 0;
	
	for(int j=0; j<=M; j++)
		dp[i][num] = max(dp[i][num], A[i][j] + solve(i+1, num+j));
	
	return dp[i][num];
}

int main()
{
    scanf("%d %d", &N, &M);
    
    for(int k=1; k<=N; k++)
    {
    	int L;
    	scanf("%d", &L);
    	
    	X.clear();
    	
    	for(int i=0; i<L; i++)
    	{
    		long long x;
    		scanf("%lld", &x);
    		
    		X.push_back(x);
    	}
    	
    	B[0] = X[0];
    	
    	for(int i=1; i<L; i++)
    		B[i] = X[i] + B[i-1];
    	
    	for(int i=1; i<=M; i++)
    	{
    		if(i>L)
    			break;
    		
    		A[k][i] = B[i-1];
    		
    		for(int j=i; j<L; j++)
    			A[k][i] = max(A[k][i], B[j]-B[j-i]);
    	}
    }
    
    memset(dp, -1, sizeof(dp));
    
    printf("%lld\n", solve(1, 0));
    
    return 0;
}

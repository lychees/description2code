/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>


#include <vector>
#include <cstddef>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


class DSU {
public:
	DSU(std::size_t n): dsu(n) {
		for (std::size_t i = 0; i < n; ++i) {
			dsu[i] = i;
		}
	}

	std::size_t getSet(std::size_t v) {
		SPCPPL_ASSERT(v < dsu.size());
		if (v == dsu[v]) {
			return v;
		}
		return dsu[v] = getSet(dsu[v]);
	}

	void unite(std::size_t u, std::size_t v) {
		SPCPPL_ASSERT(u < dsu.size());
		SPCPPL_ASSERT(v < dsu.size());
		u = getSet(u);
		v = getSet(v);
		dsu[v] = u;
	}

private:
	std::vector<std::size_t> dsu;
};



#include <iterator>


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <algorithm>



template <typename R>
void sort(R& range) {
	std::sort(range.begin(), range.end());
}

template <typename R, typename Comp>
void sort(R& range, Comp comp) {
	std::sort(range.begin(), range.end(), comp);
}

template <typename R>
void reverse(R& range) {
	std::reverse(range.begin(), range.end());
}

template <typename R, typename T>
auto lower_bound(const R& range, const T& value) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value);
}

template <typename R, typename T, typename Comp>
auto lower_bound(const R& range, const T& value, Comp comp) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value, comp);
}

template <typename R, typename T>
auto upper_bound(const R& range, const T& value) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value);
}

template <typename R, typename T, typename Comp>
auto upper_bound(const R& range, const T& value, Comp comp) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value, comp);
}

template <typename R>
auto min_element(const R& range) -> decltype(range.begin()) {
	return std::min_element(range.begin(), range.end());
}

template <typename R>
auto max_element(const R& range) -> decltype(range.begin()) {
	return std::max_element(range.begin(), range.end());
}

template <typename R>
bool next_permutation(R& range) {
	return std::next_permutation(range.begin(), range.end());
}

template <typename T>
void unique(std::vector<T>& range) {
	range.erase(std::unique(range.begin(), range.end()), range.end());
}

template <typename R>
R sorted(R range) {
	sort(range);
	return range;
}

template <typename R, typename Comp>
R sorted(R range, Comp comp) {
	sort(range, comp);
	return range;
}

template <typename R>
R reversed(R range) {
	reverse(range);
	return range;
}


using namespace std;

class Table2 {
public:

	vector<vector<int>> g;
	vector<int> used;
	int timer = 0;
	vector<int> tin, fup;

	bool dfs(int v, int p = -1) {
		used[v] = true;
		tin[v] = fup[v] = timer++;
		int children = 0;
		for (size_t i = 0; i < g[v].size(); ++i) {
			int to = g[v][i];
			if (to == p) {
				continue;
			}
			if (used[to]) {
				fup[v] = min(fup[v], tin[to]);
			}
			else {
				if (dfs(to, v)) {
					return true;
				}
				fup[v] = min(fup[v], fup[to]);
				if (fup[to] >= tin[v] && p != -1) {
					//cerr << "cp" << v << endl;
					return true;
				}
				++children;
			}
		}
		return false;
	}

	void solve(std::istream& in, std::ostream& out) {
		int n, m;
		in >> n >> m;
		DSU dsu(n * m);

		vector<string> s(n);
		for (int i: range(n)) {
			in >> s[i];
		}
		for (int i: range(n)) {
			for (int j: range(m - 1)) {
				if (s[i][j] == s[i][j + 1]) {
					dsu.unite(i * m + j, i * m + j + 1);
				}
			}
		}

		for (int i: range(n - 1)) {
			for (int j: range(m)) {
				if (s[i][j] == s[i + 1][j]) {
					dsu.unite((i + 1) * m + j, i * m + j);
				}
			}
		}

		vector<vector<int>> g(n * m + 1);
		for (int i: range(n)) {
			for (int j: range(m - 1)) {
				if (s[i][j] != s[i][j + 1]) {
					g[dsu.getSet(i * m + j)].push_back(dsu.getSet(i * m + j + 1));
					g[dsu.getSet(i * m + j + 1)].push_back(dsu.getSet(i * m + j));
				}
			}
		}

		for (int i: range(n - 1)) {
			for (int j: range(m)) {
				if (s[i][j] != s[i + 1][j]) {
					g[dsu.getSet(i * m + j)].push_back(dsu.getSet(i * m + j + m));
					g[dsu.getSet(i * m + j + m)].push_back(dsu.getSet(i * m + j));
				}
			}
		}

		for (int i: range(n - 1)) {
			for (int j: range(m - 1)) {
				if (s[i][j] != s[i + 1][j + 1]) {
					g[dsu.getSet(i * m + j)].push_back(dsu.getSet(i * m + j + 1 + m));
					g[dsu.getSet(i * m + j + 1 + m)].push_back(dsu.getSet(i * m + j));
				}
			}
		}

		for (int i: range(1, n)) {
			for (int j: range(m - 1)) {
				if (s[i][j] != s[i - 1][j + 1]) {
					g[dsu.getSet(i * m + j)].push_back(dsu.getSet(i * m + j + 1 - m));
					g[dsu.getSet(i * m + j + 1 - m)].push_back(dsu.getSet(i * m + j));
				}
			}
		}


		int root = m * n;

		for (int i: range(n)) {
			for (int j: {0, m - 1}) {
				g[root].push_back(dsu.getSet(i * m + j));
				g[dsu.getSet(i * m + j)].push_back(root);
			}
		}

		for (int i: {0, n - 1}) {
			for (int j: range(m)) {
				g[root].push_back(dsu.getSet(i * m + j));
				g[dsu.getSet(i * m + j)].push_back(root);
			}
		}

		for (auto& x: g) {
			sort(x);
			unique(x);
		}
		//
		//cerr << "---\n";
		//for (int i: range(g.size())) {
		//	for (int j: g[i]) {
		//		cerr << i << ' ' << j << endl;
		//	}
		//}


		used.clear();
		tin.clear();
		fup.clear();
		used.resize(g.size());
		tin.resize(g.size());
		fup.resize(g.size());
		this->g = move(g);

		if(dfs(root, -1)) {
			out << "NO\n";
		} else {
			out << "YES\n";
		}

	}
};

#include <sys/time.h>
#include <sys/resource.h>
int main() {
	rlimit lim;
	lim.rlim_cur = 128 << 20;
	lim.rlim_max = 128 << 20;
	setrlimit(RLIMIT_STACK, &lim);
	std::ios_base::sync_with_stdio(false);
	Table2 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}

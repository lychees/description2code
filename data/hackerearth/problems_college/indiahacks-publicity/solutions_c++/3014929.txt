#include<bits/stdc++.h>
using namespace std;
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define mp make_pair // useful for working with pairs
#define fi first
#define se second
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<vi > vvi;
typedef pair<int,int> ii;
#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(auto i = (c).begin(); i != (c).end(); i++)
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define present(c,x) ((c).find(x) != (c).end())
#define ll long long
#define fastscan ios_base::sync_with_stdio(0);cin.tie(NULL); 
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b);}

typedef struct Node{
	int parent,rank;
}Node;


int findset(int i,Node node[]){
	while(node[i].parent != i){
		i = node[i].parent;
	}
	return i;
}

void unionset(int i,int j,Node node[]){
	int x = findset(i,node);
	int y = findset(j,node);
	if(x!=y){
		if(node[x].rank == node[y].rank){
			node[x].parent = y;
			node[y].rank = node[x].rank + 1;
		}
		else if(node[x].rank > node[y].rank){
			node[y].parent = x;
		}
		else if(node[y].rank > node[x].rank){
			node[x].parent = y;
		}
	}
}

int main(){
	fastscan	
	int t;
	cin>>t;
	while(t--){
		int n;
		cin>>n;
		Node node[n];
		for(int i=0;i<n;i++){
			node[i].parent = i;
			node[i].rank = 1;
		}
		int m;
		cin>>m;
		for(int i=0;i<m;i++){
			int a,b;
			cin>>a>>b;
			unionset(a,b,node);
		}
		int cnt = 0;
		for(int i=0;i<n;i++){
			if(node[i].parent==i) cnt++;
		}
		cout<<cnt<<"\n";
	}
	return 0;
}
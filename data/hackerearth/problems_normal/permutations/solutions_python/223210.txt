def make_link(G, node1, node2):
    if node1 not in G:
        G[node1] = {}
    (G[node1])[node2] = 1
    if node2 not in G:
        G[node2] = {}
    (G[node2])[node1] = 1
    return G

def mark_component(G, node, marked, res):
    #res = []
    marked[node] = True
    total_marked = 1
    for neighbor in G[node]:
        # print '=> ' , neighbor, "(" , node, ")"
        res.append(neighbor)
        if neighbor not in marked:
            total_marked += mark_component(G, neighbor, marked, res)
    return total_marked

def remove_adjacent(nums):
  # +++your code here+++
  res = []
  for i in xrange(len(nums) - 1):
    if nums[i] != nums[i+1] :
      res.append(nums[i])
  if len(nums) != 0:
    res.append(nums[len(nums) - 1])
  return res


def list_component_sizes(G, string):
    marked = {}
    s = [int(i) for i in string.split()]
    # print s
    for node in G.keys():
        res = []
        if node not in marked:
            mark_component(G, node, marked, res)
        #print res
        if len(res)!=0:
            res = sorted(res)
            res = remove_adjacent(res)
            # print 'res is ',res
            temp = []
            temp = [s[i] for i in res]
            temp.sort()
            # print 'temp is ', temp
            for i in xrange(len(res)):
                s[res[i]] = temp[i]
    for i in s:
        print i,






# Graph G
G = {}

k = int(raw_input()) # length of permutation
string = raw_input() # permutation string



for i in xrange(k):
    line = raw_input()
    check = 0
    for j in xrange(len(line)):
        if line[j] == 'Y':
            make_link(G, i, j)
           # print i,j
            check = 1
        if check == 0:
            make_link(G,i,i)

# print G
list_component_sizes(G, string)

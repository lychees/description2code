#include<stdio.h>
#include<stdlib.h>
#include<vector>
#include<list>
using namespace std;

class Graph
{
  int v;
  list<int>* adj;  
  bool* visited;	  
  public:
  Graph(int V)
  {
    v = V;
    adj = new list<int>[v];
    visited = new bool[v];
    for(int i = 0; i<v;i++)
	 visited[i] = false;

  }
  ~Graph()
  {
    delete[] adj;
    delete[] visited;
  
  }
  void addEdge(int u,int v)
  {
    adj[u].push_back(v);
  }	  
  void DFSUtil(int v)
 {
    visited[v]= true;
    list<int>::iterator it;
    for(it = adj[v].begin();it!=adj[v].end();it++)
    {
       if(visited[*it] != true)
       {
          DFSUtil(*it);
       }
    
    }
 
 }
 void DFS(int u)
 {
   bool visited[v];
  // for(int i = 0; i<v;i++)
//	   visited[i] = false;
  // if(visited[u]!=false)
   DFSUtil(u);
   
  
 }
 int visitedCount()
 {
  int nC =0;
  for(int i = 0; i < v;i++)
  {
    if(visited[i])
       nC++;
  }
  return nC;
 }
};

int main()
{
 int nT;
 scanf("%d",&nT);
 while(nT--)
 {
    int n,f,s;
    
    scanf("%d %d %d",&n,&f,&s);
    Graph g(n);
    for(int i = 0;i<f;i++)
    {
      int a, b;
      scanf("%d %d",&a,&b);
      g.addEdge(a-1,b-1);
    }
    int count = 0;
    for(int i = 0;i<s;i++)
    {
       int source;
       scanf("%d",&source);
       g.DFS(source-1);
    }
    printf("%d\n",g.visitedCount());

 
 }


return 0;
}
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <vector>
#include <limits.h>
#include <stack>
#include <sstream>
#include <queue>
#include <iomanip>
#include <list>
#include <set>
#include <deque>
#include <bitset>
#include <map>
#include <assert.h>
#include <utility>
#include <string.h>
#include <cstring>
#include <cstdlib>

#define FOR(A, B, C) for(int A = B; A < C; A++)
#define EFOR(A, B, C) for(int A = B; A <= C; A++)
#define RFOR(A, B, C) for(int A = B; A >= C; A--)
#define MAX 1000002
#define SC(A) scanf("%d", &A)
#define PF(A) printf("%d\n", A)

using namespace std;

typedef long long int lint;
typedef vector<bool> VB;
typedef pair<int,int> PI;
typedef vector<int> VI;
typedef vector<lint> VLI;
typedef vector<PI> VPI;
typedef vector<VI> VVI;
typedef map<int,int> MP;

VB isPrime(MAX, true);
VI countPrimTillI(MAX);

void sieveOfEratosthenes() {
    isPrime[1] = false;
    for (int p = 2; p*p <= MAX; p++) {
        if (isPrime[p] == true) {
            for (int i = p*2; i <= MAX; i += p) {
                isPrime[i] = false;
            }
        }
    }
}

void countAllPrimes() {
    int c = 0;
    for (int i = 1; i < MAX; i++) {
        if (isPrime[i]) {
            c++;
            countPrimTillI[i] = c;
        } else {
            countPrimTillI[i] = c;
        }
    }
}

int main() {
    sieveOfEratosthenes();
    countAllPrimes();
    int T, L, R;
    SC(T);
    while (T--) {
        SC(L); SC(R);
        float sampleSpace = R - L + 1;
        int event = countPrimTillI[R] - countPrimTillI[L];
        if (isPrime[L]) {
            event++;
        }
        printf("%f\n", event/sampleSpace);
    }
    return 0;
}





#include <iostream>
#include <queue>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;
const int mx=100001;
#define pb push_back
#define e cout<<"\n";
vector<pair<int,int> > g[mx];
bool vis[mx];
int dis[mx];
void solve();
void bfs(int u)
{
  queue<pair<int,int> > q;
  q.push({u,0});
  vis[u]=true;
  dis[u]=0;
  while(!q.empty())
  {
    pair<int,int> U=q.front();
    q.pop();
    for(int i=0;i<g[U.first].size();i++)
  {
    pair<int,int> w=g[U.first][i];
    if(!vis[w.first])
    {
      q.push(w);
      dis[w.first]=dis[U.first]+w.second;
      vis[w.first]=true;
    }
  }
  }
}
int main()
{
  int t;
  cin>>t;
  for(int i=0;i<t;i++)
     solve();
}
void solve()
{
  int i,j,x,n,m,y,w;
  cin>>n;
  for(i=1;i<=n;i++) 
    g[i].clear();
  memset(vis,false,sizeof vis);

  for(i=2;i<=n;i++) 
  {
    cin>>x>>y>>w;
    g[x].pb({y,w});
    g[y].pb({x,w});
  }
  bfs(1);
  m=-1;
  for(i=1;i<=n;i++)
  {
    if(dis[i]>m)
    {
      m=dis[i];
      x=i;
    }
  }
  memset(vis,false,sizeof vis);
  bfs(x);
  m=-1;
  for(i=1;i<=n;i++)
  {
    m=max(m,dis[i]);
  }
  int cost;
  if(m<=100)
   cost=0;
  if(m>100&&m<=1000)
     cost=100;
  if(m>1000&&m<=10000)
     cost=1000; 
  if(m>10000)
   cost=10000;
  cout<<cost<<" "<<m<<"\n";  
}
#include<bits/stdc++.h>
using namespace std;
vector<int> v[1001];
int visited[1001];
int dfsNum[1001];
int low[1001];
int parent[1001];
int tme = 0;
int artPoint[1001];

void dfsUtil(int u){
    int numChild = 0;
    visited[u]=1;
    low[u] = dfsNum[u] = tme++;

    for(int i=0;i<v[u].size();i++){
        int curr = v[u][i];
        if(!visited[curr]){
            parent[curr]=u;
            numChild++;
            dfsUtil(curr);
            low[u] = min(low[curr],low[u]);

            if(parent[u]==-1 && numChild>1){
                artPoint[u]=1;
            }else if(parent[u]!=-1 && low[curr] >= dfsNum[u]){
                artPoint[u] = 1;
            }
        }else if(parent[u]!=curr){
            low[u] = min(low[u],dfsNum[curr]);
        }

    }

}

void dfs(int n){
    memset(parent,-1,sizeof parent);

    for(int i=1;i<=n;i++){
        if(!visited[i]){
            dfsUtil(i);
        }
    }
}

int main(){
    int n,m;
    cin>>n>>m;
    int a,b;
    for(int i=0;i<m;i++){
        cin>>a>>b;
        v[a].push_back(b);
        v[b].push_back(a);
    }

    dfs(n);

    int q;
    cin>>q;

    while(q--){
        cin>>a;
        if(artPoint[a]){
            cout<<"Satisfied "<<v[a].size()<<endl;
        }else{
            cout<<"Not Satisfied "<<endl;
        }
    }
}

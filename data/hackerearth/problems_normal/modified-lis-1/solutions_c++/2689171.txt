#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define m_p make_pair
#define F first
#define S second
#define For(i,a,b) for(int i=a;i<b;i++)
#define Fore(i,a,b) for(int i=a;i<=b;i++)
#define rFor(i,a,b) for(int i=a;i>b;i--)
#define rFore(i,a,b) for(int i=a;i>=b;i--)
#define tr(it,a) for(__typeof((a).begin()) it=(a).begin();it!=(a).end();it++)
#define all(a) a.begin(),a.end()
#define mem(a,b) memset(a,b,sizeof(a))
typedef long long int lli;
typedef pair<int,int> pii;
typedef pair<int,pii> pi3;
typedef pair<pii,pii> pi4;
typedef vector<int> vi;
typedef vector<pii> vpii;
void sc(int& a){scanf("%d",&a);}
void sc(lli& a){scanf("%lld",&a);}
void sc(int& a,int& b){sc(a);sc(b);}
void sc(lli& a,lli& b){sc(a);sc(b);}
void sc(int& a,int& b,int& c){sc(a,b);sc(c);}
void sc(lli& a,lli& b,lli& c){sc(a,b);sc(c);}
void prl(int a){printf("%d\n",a);}
void prl(lli a){printf("%lld\n",a);}
void prl(){printf("\n");}
void prs(int a){printf("%d ",a);}
void prs(lli a){printf("%lld ",a);}
int mod =1000000007;
lli modpow(lli a, lli b, lli mod){lli res=1;while(b>0){if(b&1)res=(res*a)%mod;a=(a*a)%mod;b=b/2;}return res%mod;}
lli pow(lli a, lli b){lli res=1;while(b>0){if(b&1)res=(res*a);a=(a*a);b=b/2;}return res;}
#define inf INT_MAX
#define N 100005

pair<int,lli> tree[2][4*N];
int a[N],cnt[2][N];

pair<int,lli> query(int node, int start, int end, int l, int r, int flag)
{
    if(r < start or end < l)
        return make_pair(0,(lli)0);
    if(l <= start and end <= r)
        return tree[flag][node];
    int mid=(start+end)/2;
    pii left=query(2*node,start,mid,l,r,flag);
    pii right=query(2*node+1,mid+1,end,l,r,flag);
    if(left.F>right.F) return left;
    else if(left.F<right.F) return right;
    else return make_pair(left.F,(left.S+right.S)%mod);
}

void update(int node, int start, int end, int idx, pair<int,lli> val, int flag)
{
    if(start==end){
    	if(tree[flag][node].F>val.F);
    	else if(tree[flag][node].F<val.F) tree[flag][node]=val;
    	else tree[flag][node]=make_pair(val.F,(val.S+tree[flag][node].S)%mod);
    }
    else{
        int mid=(start+end)/2;
        if(start<=idx and idx<=mid)
            update(2*node, start, mid, idx, val,flag);
        else update(2*node+1, mid+1, end, idx, val,flag);
        auto left=tree[flag][2*node],right=tree[flag][2*node+1];
        if(left.F>right.F) tree[flag][node]=left;
        else if(left.F<right.F) tree[flag][node]=right;
        else tree[flag][node]=make_pair(left.F,(left.S+right.S)%mod);
    }
}

int main()
{
	int t,n,m,s,p,q,temp;
	int j=1,k=1;
	sc(n);
	Fore(i,1,n){
		sc(a[i]);
	}
	Fore(i,1,n){
		if(a[i]>0){
			auto x=query(1,1,100000,1,a[i]-1,1);
			if(x.F==0) x.S=(lli)1;
			x.F++;
			cnt[0][a[i]]++;
			update(1,1,100000,a[i],x,0);
		}
		else{
			auto x=query(1,1,100000,1,-a[i]-1,0);
			if(x.F==0) x.S=(lli)1;
			x.F++;
			cnt[1][a[i]]++;
			update(1,1,100000,-a[i],x,1);
		}
	}
	pair<int,lli> ans;
	if(tree[0][1].F>tree[1][1].F) ans=tree[0][1];
	else if(tree[0][1].F<tree[1][1].F) ans=tree[1][1];
	else ans=make_pair(tree[0][1].F,(tree[0][1].S+tree[1][1].S)%mod);
	prs(ans.F);
	prl(ans.S%mod);
}
#include <bits/stdc++.h>

using namespace std;

#define boost ios::sync_with_stdio(true); cin.tie(0); cout.tie(0);
#define pii pair<int,int>
#define vpii vector<pair<int,int> >
#define vvpii vector<vector<pair<int,int> > >
#define vi vector<int>
#define vii vector<vector<int> >
#define pb push_back 
#define mp make_pair 
#define onebit(n) __builtin_popcount(n) //get number of one-bits in the bit representation of n
#define rep(i,n) for(i=0;i<n;i++)

void dfs(vii &graph,vi &a,vi &b,vi &dp1,vi &dp2,vi &visited,int l)
{
	
	visited[l]=1;
	int i;
	if(a[l]==b[l])
	{
		dp1[l]=1;
		dp2[l]=0;
	}
	else
	{
		dp1[l]=0;
		dp2[l]=1;
	}
	dp1[l]++;
//	cout<<"hey"<<dp1[l]<<" "<<dp2[l]<<endl;
	for(i=0;i<graph[l].size();i++)
	{
		int c=graph[l][i];
		if(visited[c]==0)
		{
			dfs(graph,a,b,dp1,dp2,visited,c);
			dp1[l]+=min(dp1[c]-1,dp2[c]+1);
			dp2[l]+=min(dp1[c],dp2[c]);
		}
	}
}

int main()
{
	boost;
	int n;
	cin>>n;
	int i,j;
	vii graph(n+1);
	for(i=0;i<n-1;i++)
	{
		int a,b;
		cin>>a>>b;
		graph[a].pb(b);
		graph[b].pb(a);
	}
	vi a(n+1),b(n+1);
	for(i=1;i<=n;i++)
		cin>>a[i];
	for(i=1;i<=n;i++)
		cin>>b[i];
	vi visited(n+1,0),dp1(n+1,0),dp2(n+1,0);
	dfs(graph,a,b,dp1,dp2,visited,1);
	cout<<min(dp1[1],dp2[1])<<endl;
	return 0;

}
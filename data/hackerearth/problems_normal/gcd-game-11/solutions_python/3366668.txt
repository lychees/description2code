# coding= utf-8
from fractions import gcd
import fileinput
 
def memoize(f):
    """ Memoization decorator for functions taking one or more arguments. """
    class memodict(dict):
        def __init__(self, f):
            self.f = f
        def __call__(self, *args):
            return self[args]
        def __missing__(self, key):
            ret = self[key] = self.f(*key)
            return ret
    return memodict(f)
 
@memoize
def game(a,b):
    if a==1 and b==1:
        return 0
    if b==1:
        return 1
    if a==1:
        return -1
    
    temp= gcd(a, b)
    if temp==1:
        return -game(b-1,a)
    else:
        case1= - game(b-1,a)
        case2= - game(b/temp,a)
        if case1==1 or case2==1:
            return 1
        else:
            return -1
    


 
def output1(case):
    if case==1:
        print "Arjit"
    elif case==-1:
        print "Chandu Don"
    elif case==0:
        print "Draw"
        
if __name__=='__main__':
    i=0
    for a in range(1,1001):
        for b in range(1,a+1):
            game(a, b)
            
    for line in fileinput.input():
        i=i+1
        if i <2:
            continue
        tu=line.split(" ")
        r=game(int(tu[0]),int(tu[1]))
        output1(r)
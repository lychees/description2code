#include<stdio.h>
#include<queue>

#define INF 0x7FFFFFFF

int graph[105][105];
bool visited[105][105];
int dist[105][105];
int N;
int M;
int x;
int y;
int E;

int _i;
int _j;

void getMinDistanceIndex()
{
	int min = INF;
	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= M; j++)
		{
			if (dist[i][j] < min && visited[i][j] == false)
			{
				min = dist[i][j];
				_i = i;
				_j = j;
			}
		}
	}
}


int main()
{
	int T;
	int u, v;
	int r, c;

//	freopen("sample.txt", "r", stdin);
	setbuf(stdout, NULL);

	scanf("%d", &T);

	for (int _tc = 1; _tc <= T; _tc++)
	{
		scanf("%d", &N);
		scanf("%d", &M);

		for (int i = 1; i <= N; i++)
			for (int j = 1; j <= M; j++)
				scanf("%d", &graph[i][j]);

		scanf("%d", &x);
		scanf("%d", &y);
		scanf("%d", &E);


		for (int i = 1; i <= N; i++)
			for (int j = 1; j <= M; j++)
		{
			dist[i][j] = INF;
			visited[i][j] = false;
		}

		dist[1][1] = graph[1][1];

		for (int v = 1; v < N * M; v++)
		{
			getMinDistanceIndex();
			r = _i;
			c = _j;
			visited[r][c] = true;

			// down
			if (r + 1 <= N)
			{
				if (dist[r + 1][c] > dist[r][c] + graph[r + 1][c] && !visited[r + 1][c])
				{
					dist[r + 1][c] = dist[r][c] + graph[r + 1][c];
				}
			}

			// right
			if (c + 1 <= M)
			{
				if (dist[r][c + 1] > dist[r][c] + graph[r][c + 1] && !visited[r][c + 1])
				{
					dist[r][c + 1] = dist[r][c] + graph[r][c + 1];
				}
			}


			// top
			if (r - 1 > 0)
			{
				if (dist[r - 1][c] > dist[r][c] + graph[r - 1][c] && !visited[r - 1][c])
				{
					dist[r - 1][c] = dist[r][c] + graph[r - 1][c];
				}
			}

			// left
			if (c - 1 > 0)
			{
				if ( dist[r][c-1] > dist[r][c] + graph[r][c - 1] && !visited[r][c-1])
				{
					dist[r][c-1] = dist[r][c] + graph[r][c - 1];
				}
			}
		}

		if (dist[x][y] <= E)
		{
			printf("YES\n");
			printf("%d\n", E - dist[x][y]);
		}
		else
			printf("NO\n");
	}
	return 0;
}
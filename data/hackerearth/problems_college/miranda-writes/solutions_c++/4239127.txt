#include<bits/stdc++.h>
#define f(i,l,r) for(i=l;i<r;i++)
#define s(n) scanf("%d",&n)
#define st(s) scanf("%s",s)
#define pl(n) printf("%d\n",n)
#define p(n) printf("%d ",n)
#define ll int
#define mod 1000000007
#define maxa 1000005
#define maxv 1000000009
#define pb(i) push_back(i)
#define mp(i,j) pair<ll,ll>(i,j)
#define pf() pop_front()
using namespace std;
ll k,big[500][500],dp[500][35000],n,dist[5000];
vector< pair< ll,ll > > v[500005];
map<ll,ll> mp;
ll bit(int stand,int mask){
    ll st;
    st = stand;
    ll i;
    if(mask == (1<<k)-1){
        dp[st][mask] = big[st][n];
        return dp[st][mask];
    }
    if(dp[st][mask] != -2){
        return dp[st][mask];
    }
    ll a = maxv;
    ll count = 0;
    for(i=0;i<k;i++){
        ll no = mp[i];
        if(((1<<i)&mask) == 0 && big[st][no] != maxv){
            a = min(a,bit(no,mask|(1<<i))+big[st][no]);
            count++;
        }
    }
    dp[st][mask] = a;
    return a;
}

int main(){
    ll d,i,j,M,start,end,temp,node,indx,x,y,length;
    ll m;
    s(n),s(m),s(k);
    for(i=0;i<n+5;i++){
        for(j=0;j<pow(2,k)+10;j++)
            dp[i][j]  = -2;
    }
    f(i,0,n+1){
        v[i].clear();
    }
    f(j,0,m){
        s(x),s(y),s(d);
        v[x].pb(mp(y,d));
        v[y].pb(mp(x,d));
    }
    f(j,0,k){
        s(x);
        mp[j] = x;
    }
    for(j=1;j<=n;j++){
        priority_queue< pair<ll,ll> > q;
        f(i,1,n+5)
            dist[i] = maxv;
        start = j;
        q.push(mp(0,start));
        dist[start] = 0;
        while(!q.empty()){
            node = q.top().second;
            q.pop();
            f(i,0,v[node].size()){
                indx = v[node][i].first;
                length = v[node][i].second;
                if(dist[indx] > dist[node]+length){
                    dist[indx] = dist[node]+length;
                    q.push(mp((-dist[indx]),indx));
                }
            }
        }
        for(i=1;i<=n;i++){
            big[j][i] = dist[i];
        }
    }
    /*f(i,1,n+1){
        f(j,1,n+1)
            printf("%d ",big[i][j]);
        printf("\n");
    }*/
    pl(bit(1,0));
    return 0;
}


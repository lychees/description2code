#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     (int)c.size()
#define clr(c)    c.clear()
#define pb        push_back
#define mp        make_pair
#define cin(x)    scanf("%d",&x)
#define MOD		1000000007
#define EPS		1E-10

const int MAXN = 1000000;
const int ALPH = 256;
const int MAXLOG = 24;

int n;
string s;
int p[MAXN]; // suffix array itself
int pcur[MAXN];
int c[MAXN][MAXLOG];
int num[MAXN];
int classesNum;
int lcp[MAXN];

void buildSuffixArray() {
      n++;

      for (int i = 0; i < n; i++)
            num[s[i]]++;

      for (int i = 1; i < ALPH; i++)
            num[i] += num[i - 1];

      for (int i = 0; i < n; i++) {
            p[num[s[i]] - 1] = i;
            num[s[i]]--;
      }

      c[p[0]][0] = 1;
      classesNum = 1;
      for (int i = 1; i < n; i++) {
            if (s[p[i]] != s[p[i - 1]])
                  classesNum++;
            c[p[i]][0] = classesNum;
      }

      for (int i = 1; ; i++) {

            int half = (1 << (i - 1));

            for (int j = 0; j < n; j++) {
                  pcur[j] = p[j] - half;
                  if (pcur[j] < 0)
                        pcur[j] += n;
            }

            for (int j = 1; j <= classesNum; j++)
                  num[j] = 0;

            for (int j = 0; j < n; j++)
                  num[c[pcur[j]][i - 1]]++;
            for (int j = 2; j <= classesNum; j++)
                  num[j] += num[j - 1];

            for (int j = n - 1; j >= 0; j--) {
                  p[num[c[pcur[j]][i - 1]] - 1] = pcur[j];
                  num[c[pcur[j]][i - 1]]--;
            }

            c[p[0]][i] = 1;
            classesNum = 1;

            for (int j = 1; j < n; j++) {
                  int p1 = (p[j] + half) % n, p2 = (p[j - 1] + half) % n;
                  if (c[p[j]][i - 1] != c[p[j - 1]][i - 1] || c[p1][i - 1] != c[p2][i - 1])
                        classesNum++;
                  c[p[j]][i] = classesNum;
            }

            if ((1 << i) >= n)
                  break;
      }

      for (int i = 0; i < n; i++)
            p[i] = p[i + 1];
      n--;
}

int getLcp(int a, int b) {
      int res = 0;
      for (int i = MAXLOG - 1; i >= 0; i--) {
            int curlen = (1 << i);
            if (curlen > n)
                  continue;
            if (c[a][i] == c[b][i]) {
                  res += curlen;
                  a += curlen;
                  b += curlen;
            }
      }
      return res;
}

void calcLcpArray() {
      for (int i = 0; i < n - 1; i++)
            lcp[i] = getLcp(p[i], p[i + 1]);
}

int queryIdx[1000001];
int ans[1010];

int closestUp[1000001] , closestDown[1000001];

int main()
{
	s = "";
	int no;
	cin >> no;
	for(int i = 1; i <= no; i++)
	{
		string f;
		cin >> f;
		s += f;
		s += "$";
	}
	int q;
	cin >> q;
	for(int i = 1; i <= q; i++)
	{
		int ss = sz(s);
		string qq;
		cin >> qq;
		s += qq;
		s += "#";
		for(int a = 0; a < sz(qq); a++)
			queryIdx[ss + a] = i;
	}
	n = sz(s);
	for(int i = 0; i < n; i++)
		closestUp[i] = closestDown[i] = -1;

	buildSuffixArray();
	for(int i = 0; i < n; i++)
		if(queryIdx[p[i]] == 0)
			closestUp[i] = closestDown[i] = i;
	for(int i = 1; i < n; i++)
		if(queryIdx[p[i]])
			closestUp[i] = closestUp[i - 1];
	for(int i = n - 2; i >= 0; i--)
		if(queryIdx[p[i]])
			closestDown[i] = closestDown[i + 1];

	for(int i = 0; i < n; i++)
	{
		if(queryIdx[ p[i] ] == 0) continue;
		int q = queryIdx[ p[i] ];
		if(closestUp[i] >= 0)
			ans[q] = max(ans[q] , getLcp(p[i] , p[closestUp[i]]) );
		if(closestDown[i] >= 0)
			ans[q] = max(ans[q] , getLcp(p[i] , p[closestDown[i]]) );
	}

	for(int i = 1; i <= q; i++)
		cout << ans[i] << "\n";
	return 0;
}
#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <map>
using namespace std;

typedef unsigned long long uint64;

uint64 weight[12];

void process_weight(size_t n)
{
	uint64 weights = 1;
	for (size_t i = 0; i <= n; i++){
		weight[i] = weights;
		weights *= 37;
	}
	return;
}

uint64 hashing(char str[11])
{
	uint64 hash = 0;
	int k = 9; 
	for (int i = 0; str[i]; i++){
		uint64 char_weight;
		if (str[i] >= '0' && str[i] <= '9')
			char_weight = (str[i] - '0' + 1) * weight[k];
		else 
			char_weight  = ((str[i] - 'A' + 11) * weight[k]);
		hash = (hash + char_weight);
		k--;
	}
	return hash;
}


int main()
{
		process_weight(9);
		int n;
		map<uint64, int> hash_func;
		scanf("%d", &n);
		for (int i = 0; i < n; i++) {
			char tmp[15];
			scanf("%s", tmp);
			uint64 hash = hashing(tmp);
			hash_func[hash] = 1;
		}
		int counter = 1;
		map<uint64, int>::iterator i = hash_func.begin();
		while (i != hash_func.end()){
			//cout << (*i).first <<"\n";
			(*i).second = counter++;
			i++;
		}
		int q;
		scanf("%d", &q);
		while (q--) {
			char query[100];
			scanf("%s",  query);
			uint64 hash = hashing(query);
			if (hash_func.count(hash))
				printf("%d\n", hash_func[hash]);
			else 
				printf("-1\n");
		}
}



#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
const int MOD=1000000009;
vector<vi> payways;
vi notes;
int getWays ( int mask,int mi,int cnt, int rem ) {
    if ( payways[mask][rem]>=0 ) return payways[mask][rem];
    int no=notes[mi];
    if ( cnt==1 ) {
        return ( rem>0 && rem%no==0 );
    }

    int su=0;
    int mask2=mask- ( 1<<mi );
    while ( ( mask2 & ( 1<<mi ) ) ==0 ) mi++;
    if ( cnt==2 &&notes[mi]==1 ) {
        su= ( rem-1 ) /no;
    } else {
        int s= rem %no; 
        while ( s<rem ) {
            int r=payways[mask2][s];
            if(r<0)r=getWays ( mask2,mi,cnt-1,s); ;
            
            su=su+r;
            if(su>=MOD)su-=MOD;
            s+=no;
            payways[mask][s]=su;
        }
        assert ( s==rem );
    }
    int r=su;
    payways[mask][rem]=r;
    return r;
}
int me;

int main() {
    ios_base::sync_with_stdio ( false );
    int T;
    cin>>T;
    rep ( t,T ) {
        int n,k;
        cin>>n>>k;
        notes=vi ( k );
        cin>> notes;
        sort ( all ( notes ),greater<int>() );
        vi pays ( n );
        cin>>pays;
        me=*max_element ( all ( pays ) );
        const int K=1<<k;
        payways= vector<vi> ( K,vi ( me+1,-1 ) ) ;
        vll walletways ( K );
        walletways[0]=1;
        rep ( i,n ) {
            vll nwalletways ( K );
            reu ( mask,1,K ) {
                int mi=k,ma=-1;
    
                int cnt=0;
                rep ( j,k ) {
                    if ( mask & ( 1<<j ) ) {
                        mi=min ( mi,j );
                        ma=max ( ma,j );
                        cnt++;
                    }
                }
                int p=getWays ( mask, mi,cnt,pays[i] );
                int mask2=0;
                reu ( j,mi+1,ma ) mask2+= ( 1<<j );
                rep ( x,K ) {
                    if ( !walletways[x] || ( x&mask2 ) ) continue;

                    int y=x | mask;
                    nwalletways[y]+=walletways[x]*p%MOD;

                }
            }
            rep ( i,K ) {
                walletways[i]=nwalletways[i]%MOD;
            }
        }
        ll su=0;
        rep ( i,K ) {
            su+=walletways[i];
        }
        cout<<su%MOD<<endl;
    }
}



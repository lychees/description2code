#include <bits/stdc++.h>
using namespace std;
long long tree[200005];
int A[200005];
int B[200005];
long long query(int idx)
{
    long long res = 0;
    while ( idx > 0 ) {
        res += tree[idx];
        idx -= (idx & (-idx));
    }
    return res;
}
void update(int idx)
{
    while ( idx <= 100001 ) {
        tree[idx] += 1;
        idx += (idx &(-idx));
    }
    return;
}
int isPrime(long long int x)
{

	for(long long int i=2;i<x;i++)
	if(x%i==0)
	return 0;
	
	return 1;
}
int main()
{
//	pre(200001);
    int t=1,n;
    while ( t--  ){
        cin >> n;
        for ( int i = 0; i < n; i++ ) cin >> A[i];
        for ( int i = 0; i < n; i++ ) cin >> B[i];
        memset(tree, 0, sizeof(tree));
        long long ans = 0;
        for ( int i = n-1; i >= 0; i-- ) {
            ans += query(A[i]-1);
            update(B[i]);
        }
        if(isPrime(ans)==1)
        cout<<"MAGIC INVERSION"<<endl;
        else
        cout<<"SIMPLE INVERSION"<<endl;
        //cout << ans << endl;
    }
       
    return 0;
}
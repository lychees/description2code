#include <bits/stdc++.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;
#define MAX 10005

vector<int>graph[MAX];
bool visited[MAX];
int node;
int maxlength;

void dfs(int v, int length)
{
	if (length >= maxlength) {
		maxlength = length;
		node = v;
	}
	length++;
	visited[v] = true;

	for (int i = 0; i < graph[v].size(); i++) {
		if (!visited[graph[v][i]]) {
			dfs(graph[v][i], length);
		}
	}
}

void solve()
{
	int nodes;

	scanf("%d", &nodes);
		for(int i = 0 ; i <= nodes; i++)
	graph[i].clear();
	for (int i = 0; i < nodes - 1; i++) {
		int u, v;
		scanf("%d%d", &u, &v);
		u++;
		v++;
		graph[u].push_back(v);
		graph[v].push_back(u);
	}
	memset(visited, false, sizeof(visited));
	maxlength = 0;
	dfs(1, 0);
	memset(visited, false, sizeof(visited));
	maxlength = 0;
	dfs(node, 0);
	printf("%d\n", maxlength + 1);
}

int main()
{
	int t;
	scanf("%d", &t);
	while (t--) {
		solve();
	}
	return 0;
}
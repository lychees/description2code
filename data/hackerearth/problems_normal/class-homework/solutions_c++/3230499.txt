#include <bits/stdc++.h>
using namespace std ;
#define f_in(st) freopen(st,"r",stdin)
#define f_out(st) freopen(st,"w",stdout)
#define LL long long int
char str[25] ;
int N ;
LL DP[5][25] ;
bool check(LL x){
    return (x <= 1000000000000LL) ;
}
LL solve(int N,int M){
    if(N == 0 && M == 0){
        return 0 ;  // base case 1 if perfect solution can be built
    }
    if(N <= 0 || M <= 0){
        return -1000000000000000LL ;    // if this is not perfect one
    }
    LL &ret = DP[N][M] ;
    if(ret != -1000000000000000LL){
        return ret ;    // if already computed or not
    }
    // if not compute here
    LL base = 1 , num = 0 , dig = 0 ;
    for(int i=M;i>0;i--){
    	dig ++ ;
        num += base*(str[i]-'0') ;
        if(str[i]=='0' && dig > 1){
            ; // nothing to do here
        }else if(check(num)){ // check for valid number i.e <= 10^12
            ret = max(ret,num+solve(N-1,i-1)) ;
            // find maximum
        }else{
            break ;
        }
        if(i == N)
            break ;
        base = base * 10 ;
    }
    return ret ;
}
int main()
{
	/*int ch;
   	int r;
   	char s[12];
   	char *chptr;*/
   	//freopen("in8.txt","r",stdin);
   	//freopen("out8.txt","w",stdout);
    int t ;
    cin >> t ;
    while(t--)
	{
        scanf("%s",str+1) ;
        N = strlen(str+1) ;
        for(int i=0;i<=4;i++){
            for(int j=0;j<=N;j++){
                DP[i][j] = -1000000000000000LL ;
            }
        }
        // initialise the  given dp matrix with large negative values :)
        LL ans = solve(4,N) ;
        if( ans < 0 )
		{
            cout << "unlucky" << endl ;
        }
		else
		{
            cout << ans << endl ;
        }
    }
    return 0 ;
}
#include<bits/stdc++.h>

#define ll long long
#define mp make_pair

using namespace std;

const int max_n= (1e6 + 10);

vector<pair<pair<int, int>,ll> > edges;

int par[max_n], height[max_n];

int find_root(int a)
{
	if(par[a]== a)
	return a;
	
	return find_root(par[a]);
}

bool union_a_b(int a, int b)
{
	int a_root, b_root;
	
	a_root= find_root(a);	
	b_root= find_root(b);
	
	if(a_root!=b_root)
	{
		if(height[a_root]<height[b_root])
		{
			par[a_root]= b_root;
		}
		else
		{
			par[b_root]= a_root;
			
			if(height[a_root]==height[b_root])
			height[a_root]++;
		}
		
		return true;
	}
	
	return false;
}

bool cmp(pair<pair<int, int>, ll> e1, pair<pair<int, int>, ll> e2)
{
	return (e1.second<e2.second);
}

int main()
{
	int t, i, j, a, b, n, m;
	ll c, tot_cost, max_1, k, ans;
	
	//cin>>n>>m>>k;
	scanf("%d %d %lld", &n, &m, &k);
	
	for(i=0;i<=n;++i)
	{
		par[i]= i;
		height[i]=0;
	}
	
	for(i=0;i<m;++i)
	{
		//cin>>a>>b>>c;
		scanf("%d %d %lld", &a, &b, &c);
		edges.push_back(mp(mp(a, b), c) );
	}
	
	if(n-1>k)
	{
		//cout<<"-1";
		printf("-1");
		return 0;
	}
	
	sort(edges.begin(), edges.end(), cmp);
	
	ans= max_1= (ll)(n-1);
	tot_cost= 0LL;
	
	for(i=0;i<m;++i)
	{
		a= edges[i].first.first;
		b= edges[i].first.second;
		c= edges[i].second;
		
		if(union_a_b(a, b))
		{
			tot_cost+= c;
			--max_1;
			
			if(tot_cost+max_1<=k)
			ans= max_1;
		}
	}
	
	if(max_1>0)
	ans= -1LL;
	//cout<<ans;
	printf("%lld", ans);
	
	return 0;
}







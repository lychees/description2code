def dfs(v):
    global mark,c_c
    q=[]
    q.append(v)
    s=0
    while q:
        top=q.pop()
        #s=1
        mark[top]=c_c
        for j in G[top]:
            if mark[j]==-1:
                q.append(j)
                s+=1
                mark[j]=mark[top]
    d[c_c]=s
                
t=input()
mo=10**9+7
while t!=0:
    n,m=map(int,raw_input().split())
    G=[[] for i in xrange(n+1)]
    for k in xrange(m):
        x,y=map(int,raw_input().split())
        G[x].append(y)
        G[y].append(x)
   
    mark=[-1]*(n+1)
    d={}#dictinary containg component_ids and their size.
    c_c=1
    for v in xrange(1,n+1):
       
        if G[v]:#in-case all vertices from(,n) are not a part of the graph.
            if mark[v]==-1:
             dfs(v)
             c_c+=1
    n_t=1
    #print d
    for i in d:
        d[i]+=1
    	if d[i]==1:
    		n_t*=1
    	else:
            #print d[i]
            sd=((d[i])*(d[i]-1))/2
            sd=sd%mo
            n_t*=sd
    print n_t%mo
    t-=1             
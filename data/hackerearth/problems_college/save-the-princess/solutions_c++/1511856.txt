    #include <bits/stdc++.h>
    using namespace std;
     
    int dr[5] = { 0, 1, 0, -1, 0 };
    int dc[5] = { 1, 0, -1, 0, 0 };
    int rs, cs;
    char f[52][51];
     
    bool check(int r, int c, int t)
    {
    if (r == 0 || r == rs - 1)
    return false;
    if ((rs - r) % 2)
    return f[r][(c + t) % cs] == 'X';
    return f[r][(c + cs - t) % cs] == 'X';
    }
     
    int main()
    {
    scanf("%d%d", &rs, &cs);
    rs += 2;
    for (int i = 0; i < rs; i++)
    scanf("%s", f[i]);
    pair<pair<int, int>,int> start;
    pair<int, int> finish;
    for (int i = 0; i < cs; i++)
    {
    if (f[rs - 1][i] == 'T')
    finish = make_pair(rs - 1, i);
    if (f[0][i] == 'B')
    start = make_pair(make_pair(0, i),0);
    }	
    queue<pair<pair<int, int>,int> > q;
    q.push(start);
    int iter = 0;
    bool saved = false;
    bool visited [rs][cs][cs];
    memset(visited, 0, sizeof visited);
    visited[start.first.first][start.first.second][0] = true;
    while (!saved && q.size() > 0)
    {
    iter=q.front().second+1;
    int next = iter % cs;
    //queue<pair<int, int>> nq;
    //while (q.size() > 0)
    //{
    if (q.front().first.first == finish.first && q.front().first.second==finish.second)
    {
    saved = true;
    break;
    }
    int r = q.front().first.first;
    int c = q.front().first.second;
    
    q.pop();
    for (int k = 0; k < 5; k++)
    {
    int nr = r + dr[k];
    int nc = c + dc[k];
    if (nr < 0 || nr == rs || nc < 0 || nc == cs ||
    visited[nr][nc][next] || check(nr, nc, next))
    continue;
    visited[nr][nc][next] = true;
    q.push(make_pair(make_pair(nr, nc),iter));
    }
    //}
    //q = nq;
    }
    if (saved)
    printf("%d\n", iter - 1);
    else
    puts("Impossible");
    return 0;
    }
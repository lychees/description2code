#include <bits/stdc++.h>
#define gc getchar_unlocked
using namespace std;
void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
int max(int a,int b)
{
	if(a>b)
	return a;
	else
	return b;
}
int main()
{
	int t,a,b,f,cases=1;
    scanint(t);
    while(cases<=t)
    {
    	scanint(f);
    	map<int,vector<int>> m;
    	map<int,vector<int>>::iterator it,it2;
    	bool visited[20010];
    	int v_q1[20010]={0},v_q2[20010]={0},k=0;
    	queue<int> q1,q2;
    	memset(visited,0,sizeof visited);
    	while(f--)
    	{
    		scanint(a);
    		scanint(b);
    		a--;
    		b--;
    		m[a].push_back(b);
    		m[b].push_back(a);
    	}
    	it=m.begin();
    	it2=m.end();
    	while(it!=it2)
    	{
    		while((visited[it->first]==1)&&(it!=it2))
    			it++;
    		if(it==it2)
    	    	break;
    	    q1.push(it->first);
    		visited[q1.front()]=1;
    		bool flag=0;
    		while(q1.empty()==0||q2.empty()==0)
    		{
    			if(flag==0)
    			{
    				v_q1[k]+=q1.size();
    		 		while(q1.empty()==0)
    		 		{
    					vector<int> &v=m[q1.front()];
    						int s=v.size();
    						for(int i=0;i<s;i++)
    						{	
    							if(visited[v[i]]==0)
    							{ 
    								q2.push(v[i]);
    								visited[v[i]]=1;
    							}
    						}
    					q1.pop();
    		 		}
    			flag=1;
    			}
    			else if(flag==1)
    			{
    				v_q2[k]+=q2.size();
    		 		while(q2.empty()==0)
    		 		{
    		 				vector<int> &v=m[q2.front()];
    						int s=v.size();
    						for(int i=0;i<s;i++)
    						{	
    							if(visited[v[i]]==0)
    							{ 
    							q1.push(v[i]);
    							visited[v[i]]=1;
    							}
    						}
    					q2.pop();
    		 		}
    		 		flag=0;
    			}
    		}
    	k++;
    	}
    	int ans=0;
    	for(int i=0;i<k;i++)
    		ans+=max(v_q1[i],v_q2[i]);
    	cout<<"Case "<<cases<<": "<<ans<<endl;
    	cases++;
    }
    return 0;
}

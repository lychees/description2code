import math
def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]


primes=set(primesbelow((10**7 )))

def isprime(n):
	global primes
	if n in primes:
		return True
	else:
		return False

t=int(raw_input())
for i in xrange(t):
	a,b=map(int,raw_input().split())
	ans=0
	if isprime(a):
		ans-=a
	else:
		ans+=a
	if a!=b:
		if isprime(b):
			ans-=b
		else:
			ans+=b
	#print ans,"temp"
		
	depth_a=int(math.floor(math.log(a,2)))
	depth_b=int(math.floor(math.log(b,2)))
	#print depth_a,depth_b
	while(depth_a!=depth_b):
		#print depth_a,depth_b,ans,"in"
		if (depth_a>depth_b):
			a=a/2
			if (a!=b):
				if isprime(a):
					ans-=a
				else:
					ans+=a

			depth_a-=1
		else:
			b=b/2
			if a!=b:
				if isprime(b):
					ans-=b
				else:
					ans+=b

			depth_b-=1
	#print a,b,ans,"test"
	while (a!=b):
		a=a/2
		if (True):
			if isprime(a):
				ans-=a
			else:
				ans+=a

		b=b/2
		if (b!=a):
			if isprime(b):
				ans-=b
			else:
				ans+=b
	print ans
#include<cstdio>
#include<vector>
#include<queue>
#include<algorithm>
#include<set>
#include<map>
#include<stack>
#include<cmath>
#include<iomanip>

#include<iostream>
#include<cstdlib>
#include<cstring>
#include<string>
#include<cassert>
using namespace std;
 
#define DEBUG //on-off switch for prlling statements
 
// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)
 
// Useful constants
#define EPS                         1e-14
 
// Useful hardware instructions
#define bitcount1                    __builtin_popcount1
#define gcd                         __gcd
 
// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(ll i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                    memset(a, v, sizeof a)
#define sz(a)                       ((ll)(a.size()))
 
// Some common useful functions
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
 
#define ll long long int
#define llu long long unsigned
#define ld long
#define INF 1000000000000000000
#define mod 1000000009

ll dp[17];
ll bit[18];
int vis[10];
ll power10[18];
void solve()
{
	ll n;
	sl(n);
	if(n == INF)
	n--;
	int cnt=0;
	fill(bit,0);
	while(n>0)
	{
		bit[cnt]=n%10;
		n=n/10;
		cnt++;
	}
	ll ans=0;
	for(int i=17;i>=0;i--)
	{
		if(bit[i] == 0)
		continue;
		if(i == 0)
		{
			for(int j=0;j<=bit[i];j++)
			{
				if(vis[j])
				ans++;
			}
			break;
		}
		if(bit[i] > 7)
		{
			ans=ans+(bit[i]-4)*dp[i-1];
			ans=ans+4*power10[i];
		}
		else if(bit[i] > 5)
		{
			ans=ans+(bit[i]-3)*dp[i-1];
			ans=ans+3*power10[i];
		}
		else if(bit[i]>3)
		{
			ans=ans+(bit[i]-2)*dp[i-1];
			ans=ans+2*power10[i];
		}
		else if(bit[i] >2)
		{
			ans=ans+(bit[i]-1)*dp[i-1];
			ans=ans+power10[i];
		}
		else
		{
			ans=ans+bit[i]*dp[i-1];
		}
		if(vis[bit[i]])
		{
			ll sum=0;
			for(int j=i-1;j>=0;j--)
			{
				sum=sum*10+bit[j];
			}
			ans=ans+sum+1;
			break;
		}
	}
	printf("%lld\n",ans);
}
int main()
{
	fill(vis,0);
	vis[2]=vis[3]=vis[5]=vis[7]=1;
	power10[0]=1;
	for(int i=1;i<18;i++)
	power10[i]=10*power10[i-1];
	dp[0]=4;
	for(int i=1;i<17;i++)
	{
		dp[i]=6*dp[i-1]+4*power10[i];
	}
	int t;
	s(t);
	for(int i=0;i<t;i++)
	{
		solve();
	}
}
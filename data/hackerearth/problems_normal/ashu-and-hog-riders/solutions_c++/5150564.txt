#include <iostream>
#include<queue>
#include<stdio.h>
using namespace std;
bool visited[1001][1001];
struct Point
{
	int x;
	int y;
};
bool isSafe(int i,int j,int N)
{
	if(i<N&&j<N&&i>=0&&j>=0) return true;
	else return false;
}
int bfs(int a[][1001],int N,int i,int j)
{
	queue<Point> qp;
	Point src= {i,j};
	visited[i][j]=true;
	qp.push(src);
	//cout<<qp.size()<<endl;
	int count=0;
	count++;
	int k=1;
	while(!(qp.empty()))
	{
		Point first= qp.front();
		int l=first.x;
		int m=first.y;
		qp.pop();
		
	//	cout<<"In here 2";
  //	cout<<"size after removing" << qp.size()<<endl;
		if(isSafe(l,m,N) && visited[l+1][m]==false && a[l+1][m]==1)
		{
		visited[l+1][m]=true;
		Point adj={l+1,m};
		qp.push(adj);
	//	cout<<"size after adding" <<"i " <<adj.x<<"j "<<adj.y<<" "<< qp.size()<<endl;
		count++;
		
		}
		if(isSafe(l,m+1,N) && visited[l][m+1]==false && a[l][m+1]==1)
		{
		visited[l][m+1]=true;
		Point adj={l,m+1};
		qp.push(adj);
		//cout<<"size after adding" <<"i " <<adj.x<<"j "<<adj.y<<" "<<qp.size()<<endl;
		count++;
		
		}
			if(isSafe(l-1,m,N) && visited[l-1][m]==false && a[l-1][m]==1)
		{
		visited[l-1][m]=true;
		Point adj={l-1,m};
		qp.push(adj);
		//cout<<"size after adding" <<"i " <<adj.x<<"j "<<adj.y<<" "<<qp.size()<<endl;
		count++;

		}
			if(isSafe(l,m-1,N) && visited[l][m-1]==false && a[l][m-1]==1)
		{
		visited[l][m-1]=true;
		Point adj={l,m-1};
		qp.push(adj);
		//cout<<"size after adding" <<"i " <<adj.x<<"j "<<adj.y<<" "<<qp.size()<<endl;
		count++;

		}

		}
 return count;
}
int main()
{
	int N;
	int a[1001][1001];
	cin>>N;
	for(int i=0;i<N;i++)
	{
	  for(int j=0;j<N;j++)
	  {
			cin>>a[i][j];
	  }
	}
		for(int i=0;i<N;i++)
	  {
	  for(int j=0;j<N;j++)
	  {
			visited[i][j]=false;
	  }
	  }
  
	int count=0;
	int max=0;
	for(int i=0;i<N;i++)
	{
		for(int j=0;j<N;j++)
		{
			if(visited[i][j]==false && a[i][j])
			{
				count=bfs(a,N,i,j);
				if(count>max)
				{
                    max=count;
				}
				count=0;
				    
			}
		}
	}
cout<<max;

cin>>N;
return 0;
}

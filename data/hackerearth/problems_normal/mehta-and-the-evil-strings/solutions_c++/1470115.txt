#include "bits/stdc++.h"

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
typedef pair<long long, long long> PLL;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int c;
    a = 0;
    while (!isdigit(c = getchar()) && c != '-') {}
    char neg = 0;
    if (c == '-') {
        neg = 1;
        c = getchar();
    }
    while (isdigit(c)) {
        a = 10 * a + c - '0';
        c = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}


const int SZ = 16;
const unsigned long long mod = 1000000007;

struct matrix {
    unsigned long long a[SZ][SZ];
    matrix() {
        memset(a, 0, sizeof(a));
    }
    matrix(const long long &x) {
        memset(a, 0, sizeof(a));
        for (int i = 0; i < SZ; ++i) {
            a[i][i] = x;
        }
    }
    matrix(const matrix &r) {
        memcpy(a, r.a, sizeof(a));
    }

    matrix & operator = (const matrix &m) {
        if (this == &m) {
            return *this;
        }
        memcpy(a, m.a, sizeof(a));
        return *this;
    }

    inline matrix operator * (const matrix &m) const {
        matrix ret;
        for (int i = 0; i < SZ; ++i) {
            for (int j = 0; j < SZ; ++j) {
                for (int k = 0; k < SZ; ++k) {
                    ret.a[i][j] += a[i][k] * m.a[k][j];
                }
                ret.a[i][j] %= mod;
            }
        }
        return ret;
    }
};


inline matrix pw(matrix a, long long n) {
    matrix ret(1);
    while (n) {
        if (n & 1ll) ret = ret * a;
        a = a * a;
        n >>= 1;
    }
    return ret;
}

inline void solve();

int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif

    int t = nxt();
    while (t--) {
        solve();
    }

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}

int pr[] = {2, 3, 5, 7};

int getMask(int x) {
    int ret = 0;
    for (int i = 0; i < 4; ++i) {
        while (x % pr[i] == 0) {
            x /= pr[i];
            ret ^= (1 << i);
        }
    }
    return ret;
}

inline void solve() {
    long long n = nxt<long long>();
    matrix a;
    for (int i = 0; i < 16; ++i) {
        for (int j = 1; j < 10; ++j) {
            int mask = getMask(j);
            a.a[i][i ^ mask]++;
        }
    }
    a = pw(a, n);
    long long ans = 0;
    for (int i = 1; i < 16; ++i) {
        ans += a.a[i][0];
    }
    ans %= mod;
    cout << ans << "\n";
}
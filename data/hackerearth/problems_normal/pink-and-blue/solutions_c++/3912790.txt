#include <iostream>
#include <list>
#include <vector>
#include <utility>
char arr[100007];
char color[100007];
bool visited[100007];
bool state;
using namespace std;
class Graph
{
 int v;
 vector< list < pair <int, int>>> adj; 
 public:
 Graph(int v);
 void add_edge(int x, int y);
 void dfs(int s, char c_color);
};
Graph :: Graph(int v)
{
	this->v=v;
   adj.resize(v+1);
}
void Graph :: add_edge(int x, int y)
{
	adj[x].push_back(make_pair(y,0));
	adj[y].push_back(make_pair(x,0));
}
void Graph :: dfs(int s, char c_color)
{
	visited[s]=true;
	color[s]=c_color;
	char new_color;
	list < pair <int, int>> :: iterator i;
	for(i=adj[s].begin();i!=adj[s].end();i++)
	{
		if(color[(*i).first]==c_color)
		{
		state=false;
		return;
		}
		if(!visited[(*i).first])
		{
			if(c_color=='B')
			new_color='P';
			else
			new_color='B';
			dfs((*i).first,new_color);
		}
	}
	return;
}
int main()
{
    int n,m,x,y,i,ans1,ans2;
    cin>>n;
    cin>>m;
    for(i=1;i<=n;i++)
    cin>>arr[i];
    Graph g(n);
    for(i=1;i<=m;i++)
    {
    	cin>>x;
    	cin>>y;
    	g.add_edge(x,y);
    }
    for(i=1;i<=n;i++)
    {
    	visited[i]=false;
    	color[i]='R';
    }
    state=true;
    ans1=0;
    ans2=0;
    g.dfs(1,'B');
    if(state==true)
    {
    	for(i=1;i<=n;i++)
    	{
    		if(arr[i]=='B' && color[i]=='P')
    		ans1++;
    		else if(arr[i]=='G' && color[i]=='B')
    		ans1++;
    	}
    	for(i=1;i<=n;i++)
        {
    	visited[i]=false;
    	color[i]='R';
        }
    	g.dfs(1,'P');
    	for(i=1;i<=n;i++)
    	{
    		if(arr[i]=='B' && color[i]=='P')
    		ans2++;
    		else if(arr[i]=='G' && color[i]=='B')
    		ans2++;
    	}
    	if(ans1<ans2)
    	cout<<ans1<<endl;
    	else
    	cout<<ans2<<endl;
    }
    else
    cout<<"Not possible"<<endl;
    return 0;
}
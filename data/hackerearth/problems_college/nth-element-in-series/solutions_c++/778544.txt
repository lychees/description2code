#include<bits/stdc++.h>
#define MOD 1000000007

using namespace std;
typedef long long int ll;

template< class T >
class Matrix
{
    public:
        int m,n;
        T *data;

        Matrix( int m, int n );
        Matrix( const Matrix< T > &matrix );

        const Matrix< T > &operator=( const Matrix< T > &A );
        const Matrix< T > operator*( const Matrix< T > &A );
        const Matrix< T > operator^( int P );

        ~Matrix();
};

template< class T >
Matrix< T >::Matrix( int m, int n )
{
    this->m = m;
    this->n = n;
    data = new T[m*n];
}

template< class T >
Matrix< T >::Matrix( const Matrix< T > &A )
{
    this->m = A.m;
    this->n = A.n;
    data = new T[m*n];
    for( int i = 0; i < m * n; i++ )
        data[i] = A.data[i];
}

template< class T >
Matrix< T >::~Matrix()
{
    delete [] data;
}

template< class T >
const Matrix< T > &Matrix< T >::operator=( const Matrix< T > &A )
{
    if( &A != this )
    {
        delete [] data;
        m = A.m;
        n = A.n;
        data = new T[m*n];
        for( int i = 0; i < m * n; i++ )
            data[i] = A.data[i];
    }
    return *this;
}

template< class T >
const Matrix< T > Matrix< T >::operator*( const Matrix< T > &A )
{
    Matrix C( m, A.n );
    for( int i = 0; i < m; ++i )
        for( int j = 0; j < A.n; ++j )
        {
            C.data[i*C.n+j]=0;
            for( int k = 0; k < n; ++k )
                C.data[i*C.n+j] = (C.data[i*C.n+j] + (data[i*n+k]*A.data[k*A.n+j])%MOD)%MOD;
        }
    return C;
}

template< class T >
const Matrix< T > Matrix< T >::operator^( int P )
{
    if( P == 1 ) return (*this);
    if( P & 1 ) return (*this) * ((*this) ^ (P-1));
    Matrix B = (*this) ^ (P/2);
    return B*B;
}

int main()
{
    Matrix<ll> M(5,5);
    M.data[0] = 1;M.data[1] = 1; M.data[2]=1; M.data[3]=2; M.data[4]=1;
    M.data[5] = 1;M.data[6] = 0; M.data[7]=0; M.data[8]=0; M.data[9]=0;
    M.data[10] = 0;M.data[11] = 1; M.data[12]=0; M.data[13]=0; M.data[14]=0;
    M.data[15] = 0;M.data[16] = 0; M.data[17]=1; M.data[18]=0; M.data[19]=0;
    M.data[20] = 0;M.data[21] = 0; M.data[22]=0; M.data[23]=1; M.data[24]=0;


    Matrix<ll> F(5,1);
    int t;
    scanf("%d",&t);
    while(t--){
    	int N;
    	for(int i=0;i<5;++i) scanf("%lld",&F.data[4-i]);
    		//printf("%lld %lld %lld %lld %lld\n",F.data[0],F.data[1],F.data[2],F.data[3],F.data[4]);
    	scanf("%d",&N);
    	if (N<5){
    		printf("%lld\n",F.data[4-N]);
    	}
    	else{
    		Matrix<ll> tmp=M^(N-4);
    			//for(int i=0;i<25;++i) cout << tmp.data[i] << " ";
    		printf("%lld\n",(tmp*F).data[0]);
    	}
    }
}

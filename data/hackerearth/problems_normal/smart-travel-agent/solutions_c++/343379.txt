#include <cstdio>
#include <cmath>
#include <climits>
#include <vector>
 #include<iostream>
 using namespace std;
// Number of vertices in the graph
#define V 120
 	int s,t,person;
 	 int n,m;
 	vector<int>route;
// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[])
{
   // Initialize min value
   int min = -1, min_index;
 
   for (int v = 0; v < n; v++)
     if (sptSet[v] == false && dist[v] > min)
         min = dist[v], min_index = v;
 
   return min_index;
}
 
// A utility function to print the constructed distance array
int printSolution(int dist[], int n)
{
   printf("Vertex   Distance from Source\n");
   for (int i = 0; i < V; i++)
      printf("%d \t\t %d\n", i, dist[i]);
}
 
// Funtion that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void dijkstra(int graph[V][V], int src)
{
     int dist[V];     // The output array.  dist[i] will hold the shortest
      int path[V];                // distance from src to i
 
     bool sptSet[V]; // sptSet[i] will true if vertex i is included in shortest
                     // path tree or shortest distance from src to i is finalized
 
     // Initialize all distances as INFINITE and stpSet[] as false
     for (int i = 0; i < V; i++)
        dist[i] = -1, sptSet[i] = false,path[i]=-1;
 
     // Distance of source vertex from itself is always 0
     dist[src] = INT_MAX;
     path[src] = -1;		
     // Find shortest path for all vertices
     for (int count = 0; count < n-1; count++)
     {
       // Pick the minimum distance vertex from the set of vertices not
       // yet processed. u is always equal to src in first iteration.
       int u = minDistance(dist, sptSet);
 
       // Mark the picked vertex as processed
       sptSet[u] = true;
 
       // Update dist value of the adjacent vertices of the picked vertex.
       for (int v = 0; v < n; v++)
 
         // Update dist[v] only if is not in sptSet, there is an edge from 
         // u to v, and total weight of path from src to  v through u is 
         // smaller than current value of dist[v]
         if (!sptSet[v] && graph[u][v] && min(dist[u],graph[u][v]) > dist[v]){
         	
         
            int p = min(dist[u] , graph[u][v]);
            if(p>dist[v])dist[v]=p,path[v]=u;
         }
			
     }
 
     
     	
     	
	 
	 int u = t-1;
	 while(u!=-1){
	 
 		route.push_back(u);
 		u = path[u];
 	}
	 int l = route.size();
	 if(l!=0)
	 {for(int i=l-1;i>=0;i--)cout<<route[i]+1<<" ";
cout<<endl;}

	cout<<ceil((person*1.000)/((dist[t-1]-1)*1.00))<<endl;
}	
 
// driver program to test above function
int main()
{
   /* Let us create the example graph discussed above */
   int graph[V][V];
  
   cin>>n>>m;
   
   for(int i=0;i<n;i++)for(int j=0;j<n;j++)graph[i][j]=0;
   for(int i=0;i<m;i++){
   	int a,b,c;
   	cin>>a>>b>>c;
   	graph[a-1][b-1]=c;
   	graph[b-1][a-1]=c;
   }
 
 	cin>>s>>t>>person;
    dijkstra(graph, s-1);
 
    return 0;
}
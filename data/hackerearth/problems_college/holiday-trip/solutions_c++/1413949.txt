#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;
int n;
vector<int> g[2001];
int ans, best = 0;
bool vis[2001];
int depth[2001];
void dfs(int u,int d){
	vis[u] = 1;
	depth[u] = d;
	for(int v:g[u]){
		//cout << v ;
		if (!vis[v]){
			
			vis[v] = 1;
			dfs(v,d+1);
			//break;
		}
	}
}
int main()
{
    int t;
    scanf("%d",&t);
    int a,b;
    while(t--){
    	scanf("%d",&n);
    	for(int i=0;i<=2000;i++) g[i].clear();
    //	vector<pair<int, int> > v;
    	for(int i=0;i<n-1;i++){
    		scanf("%d%d",&a,&b);
    		//a--,b--;
    		g[a].push_back(b);
    		g[b].push_back(a);
    		
    	}
    	
    	if (n<=3){
    		cout << n << "\n";
    		continue;
    	}
    	memset(vis,0,sizeof(vis));
    	memset(depth,0,sizeof(depth));
    	dfs(0,1);
    	int u = -1;
    	int tot = -1;
    	for(int i=0;i<n;i++){
    		if (depth[i]>tot){
    			tot=depth[i];
    			u = i;
    		}
    	}
    		memset(vis,0,sizeof(vis));
    	memset(depth,0,sizeof(depth));
    	dfs(u,1);
    	int v = -1;
    	tot = -1;
    	for(int i=0;i<n;i++){
    		if (depth[i]>tot){
    			tot=depth[i];
    			v = i;
    		}
    	}
    	cout << tot << "\n";
    }
    return 0;
}

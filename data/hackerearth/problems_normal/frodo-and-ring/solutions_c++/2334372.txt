
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}


int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        int n,m;
        cin>>n>>m;
        vector<vi> matr ( n,vi ( m ) );
        vector<vi> res ( n,vi ( m ) );
        rep ( i,n ) {
            rep ( j,m ) {
                char c;
                cin>>c;
                switch ( c ) {
                case 'D':
                    matr[i][j]=-100;
                    break;
                case 'T':
                    matr[i][j]=150;
                    break;
                default:
                    matr[i][j]=0;
                }

            }
        }
        res[0][0]=matr[0][0];
        reu ( i,1,m ) {
            if ( res[0][i-1]>=0 ) res[0][i]=res[0][i-1]+matr[0][i];
            else res[0][i]=-1;

        }
        reu ( i,1,n ) {
            if ( res[i-1][0]>=0 ) res[i][0]=res[i-1][0]+matr[i][0];
            else res[i][0]=-1;
            reu ( j,1,m ) {
                int a=res[i-1][j];
                int b=res[i][j-1];
                if ( a<0 &&b<0 ) res[i][j]=-1;
                else res[i][j]=max ( a,b ) +matr[i][j];

            }
        }
        if(res[n-1][m-1]>=0)
            cout<<res[n-1][m-1]<<endl;
        else cout<<-1<<endl;
    }
}

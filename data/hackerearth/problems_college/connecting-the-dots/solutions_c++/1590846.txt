/* ***************************
Author: Abhay Mangal (abhay26)
*************************** */
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <algorithm>
#include <cstring>
#include <cassert>
#include <numeric>
#include <utility>
#include <bitset>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
using namespace std;
 #define tr(container, it) \
    for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define maX(a,b) (a) > (b) ? (a) : (b)
#define pii pair< int, int >
#define pip pair< int, pii >
#define FOR(i,n) for(int i=0; i<(int)n ;i++)
#define REP(i,a,n) for(int i=a;i<(int)n;i++)
#define pb push_back
#define mp make_pair
typedef long long ll;
//int dx[]= {-1,0,1,0};
//int dy[]= {0,1,0,-1};
int n,m;
//int x[1000005],y[1000005],c[1000005];
vector<pii> G[1005];
int D[1005][4];
int main()
{
    scanf("%d %d",&n,&m);
    FOR(i,m)
    {
        int x,y,c;
        scanf("%d %d %d",&x,&y,&c);
        G[x].pb(pii(y,c));
    }
    queue<pii> Q;
    Q.push(pii(1,-1));
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=3;j++)
        {
            D[i][j] = 1000000000;
        }
    }
    D[1][1] = D[1][2] = D[1][3] = 0;
    while(!Q.empty())
    {
        pii X = Q.front();
        Q.pop();
        int u = X.first;
        int l = X.second;
        for(int i=0;i<G[u].size();i++)
        {
            int y = G[u][i].first;
            int c = G[u][i].second;
            if(c == l)
                continue;
            if(l == -1)
            {
                if(D[u][1]+1 < D[y][c])
                {
                    D[y][c] = D[u][1]+1;
                    Q.push(pii(y,c));
                }
            }
            else if(D[u][l] +1 < D[y][c])
            {
                D[y][c] = D[u][l]+1;
                Q.push(pii(y,c));
            }
        }
    }
    int ans = D[n][1];
    ans = min(ans, D[n][2]);
    ans = min(ans, D[n][3]);
    if(ans < 1000000000)
    cout << ans;
    else
        cout << "-1";
return 0;
}

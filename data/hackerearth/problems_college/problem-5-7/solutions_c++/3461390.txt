#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int max_j = 101;
const int max_n = 101;

bitset<101> flag[max_n][max_j];
std::vector<ll> edge[max_n];
ll joke[max_n];

void dfs(ll idx)
{
	ll i, j, siz, start, stop, lo, hi;

	siz = edge[idx].size();
	for(i=0;i<siz;++i)
	{
		dfs(edge[idx][i]);
		for(j=0;j<max_j;++j)
		flag[idx][j] |= flag[edge[idx][i]][j];
	}

	for(i=0;i<=joke[idx];++i)
	{
		for(j=joke[idx];j<max_j;++j)
		flag[idx][i].reset(j);
	}

	flag[idx][joke[idx]].set(joke[idx]);

	for(lo=max_j-1;lo>=0;--lo)
	{
		for(hi=max_j-1;hi>=lo;--hi)
		{
			if(flag[idx][lo].test(hi))
			{
				flag[idx][lo] |= flag[idx][hi+1];
			}
		}
	}

	for(lo=max_j-1;lo>=0;--lo)
	{
		start = lo;

		if(lo>joke[idx])
		{
			stop = max_j-1;
		}
		else
		{
			stop = joke[idx]-1;
		}

		for(hi=start;hi<=stop;++hi)
		{
			flag[idx][lo].reset(hi);
		}
	}
}

int main()
{
	ll t, i, j, n, a, b, ans;

	scanf("%lld", &n);

	for(i=0;i<n;++i)
	{
		scanf("%lld", &joke[i]);
		--joke[i];
	}

	for(i=0;i<n-1;++i)
	{
		scanf("%lld %lld", &a, &b);
		--a;
		--b;
		edge[a].push_back(b);
	}

	dfs(0);

	ans = 0;
	for(i=0;i<max_j;++i)
	{
		ans += flag[0][i].count();
	}

	printf("%lld\n", ans);

	return 0;
}

// codechef editorial TASTR
#include<stdio.h>
#include<string.h>
#include<vector>
using namespace std;
#define N 300000
int prefix[N+5],start[N+5],cume[N+5];
inline int max(int a,int b) { return a>b?a:b; }

typedef long long LL;
typedef vector<int> VI;
typedef vector<VI> VVI;
VI p(N+5);
int lc[N+5];
// s should contains dummy character in the end
// n = (the length of original s) + 1
void substr_count(int n,char *s)
{
	// constructing of suffix array
	// refer to e-maxx.ru :)
	VI cnt(128);
	for(int i=0;i<n;i++)
		cnt[s[i]]++;
	for(int i=1;i<128;i++)
		cnt[i]+=cnt[i-1];
	//VI p(n);
	for(int i=0;i<N+2;i++) p[i]=0;
	for(int i=0;i<n;i++)
		p[--cnt[s[i]]]=i;
	VVI c(1,VI(n));
	int w=0;
	for(int i=0;i<n;i++)
	{
		if(i==0 || s[p[i]]!=s[p[i-1]]) w++;
		c[0][p[i]] = w-1;
	}

	for(int k=0,h=1;h<n;k++,h*=2)
	{
		VI pn(n);
		for(int i=0;i<n;i++) {
			pn[i] = p[i] - h;
			if(pn[i]<0) pn[i] += n;
		}
		VI cnt(w,0);
		for(int i=0;i<n;i++)
			cnt[c[k][pn[i]]]++;
		for(int i=1;i<w;i++)
			cnt[i]+=cnt[i-1];
		for(int i=n;i--;)
			p[--cnt[c[k][pn[i]]]]=pn[i];
		w=0;
		c.push_back(VI(n));
		for(int i=0;i<n;i++)
		{
			if(i==0 || c[k][p[i]] != c[k][p[i-1]]) {
				w++; 
			} else {
				int i1 = p[i]   + h; if(i1>=n) i1-=n;
				int i2 = p[i-1] + h; if(i2>=n) i2-=n;
				if(c[k][i1]!=c[k][i2]) w++;
			}
			c[k+1][p[i]] = w-1;
		}
	}

	for(int k=1;k<n;k++)
	{
		// calculating lcp of neighboring suffixes
		// again refer to e-maxx.ru :D
		int i=p[k];
		int j=p[k-1];
		int cur = 0;
		for (int h=c.size(); h--;)
			if (c[h][i] == c[h][j]) {
				cur += 1<<h;
				i += 1<<h;
				j += 1<<h;
			}
		lc[k]=cur;
		//printf("%s %d\n",s+p[k],lc[k]);
	}
}

char s[N+5],t1[N+5],t2[N+5],ss[N+5];
int main()
{
    int i,j,lt1,lt2,ls,prev;
    LL res;
    while(scanf("%s",s+1) != EOF)
    {
        scanf("%s%s",t1+1,t2+1);
        ls=strlen(s+1);
        lt1=strlen(t1+1);
        lt2=strlen(t2+1);
        res=0;
        memset(prefix,0,sizeof(prefix));
        prev=0;
        for(i=2;i<=lt1;i++)
        {
            while(prev>0 && t1[prev+1]!=t1[i]) prev=prefix[prev];
            if(t1[prev+1]==t1[i]) prev++;
            prefix[i]=prev;
        }
        prev=0;
        memset(start,0,sizeof(start));
        for(i=1;i<=ls;i++)
        {
            while(prev>0 && s[i]!=t1[prev+1]) prev=prefix[prev];
            if(s[i]==t1[prev+1]) prev++;
            if(prev==lt1)
            {
                prev=prefix[prev];
                start[i-lt1+1]=1;
            }
        }
        
        prev=0;
        prefix[1]=0;
        for(i=2;i<=lt2;i++)
        {
            while(prev>0 && t2[prev+1]!=t2[i]) prev=prefix[prev];
            if(t2[prev+1]==t2[i]) prev++;
            prefix[i]=prev;
        }
        prev=0;
        memset(cume,0,sizeof(cume));
        for(i=1;i<=ls;i++)
        {
            cume[i]=cume[i-1];
            while(prev>0 && s[i]!=t2[prev+1]) prev=prefix[prev];
            if(s[i]==t2[prev+1]) prev++;
            if(prev==lt2)
            {
                prev=prefix[prev];
                cume[i]+=1;
            }
        }
        
        for(i=1;i<=ls;i++) ss[i-1]=s[i];
        ss[ls]='\0';
        int nn=strlen(ss)+1;
        ss[nn-1]='a'-1;
        //memset(lcp,0,sizeof(lcp));
        substr_count(nn,ss);
        //printf("%d %d\n",ls,nn);
        for(i=1;i<=ls;i++)
        {
            if(start[p[i]+1]==0) continue;
            int temp=p[i]+max(lc[i],max(lt1-1,lt2-1));
            if(temp>=0 && temp<=ls)
            res=res+cume[ls]-cume[temp];
        }
        printf("%lld\n",res);
    }
    return 0;
}

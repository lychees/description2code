#include <bits/stdc++.h>
using namespace std;
#define endl '\n'
#define pii pair<long long int,long long int>
#define F first
#define S second
#define mp make_pair
#define pb push_back
long long int INTMAX=100000000000000;
bool vis[1000010];
long long int dis[1000001];
vector<pii> a[1000001];

class prioritize {
	public: bool operator ()(pii &p1 ,pii &p2) {
		return p1.S>p2.S;
	}
};

long long int Dijkstra(int s, int n) {
	for (long long int i = 0;i <= n; i++) {
		vis[i] = false;
		dis[i] = INTMAX;
	}
	priority_queue<pii, vector<pii>, prioritize> pq;
	pq.push(mp(s, dis[s]=0));
	while(!pq.empty()) {
		pii cur = pq.top(); pq.pop();
	long long	int cv = cur.F, cw = cur.S;
        	if(vis[cv]) continue;
		vis[cv] = true;
		for(pii x : a[cv]) {
			if(!vis[x.F] && (cw + x.S) < dis[x.F]) {
				pq.push(mp(x.F,dis[x.F]=cw+x.S));
			}
		}
	}
}

int main() {
{
	long long	int v1, v2, w, n, m,ss,rr[1000000];
		cin >> n >> m>>ss;
		for(long long int i = 0; i < n; i++)
		cin>>rr[i];
		for(long long int i = 0; i <= n; i++) {
			a[i].clear();
		}
		for(long long int i = 0; i < m; i++) {
			cin >> v1 >> v2 >> w;
			//cout<<v1<<" "<<v2<<" "<<w<<"\n";
			a[v1].pb(mp(v2, w));
			a[v2].pb(mp(v1, w));
		}
		long long int ns=0,tmp=0,tmp2=0;
		Dijkstra(ss,n);
		for(long long int i = 1; i <= n; i++) {
			if(dis[i]!=INTMAX) {
			tmp+=rr[i-1];	
			tmp2+=(rr[i-1]*dis[i]);
			}
		}
	/*	for(int i = 1; i <= n; i++) {
			//if(dis[i]!=INT_MAX) 
			{
		cout<<dis[i]<<" ";
			}
		}*/
		for(int i = 1; i <= n; i++) {
			if(dis[i]!=INTMAX) {
				long long int gh=(dis[i]*(tmp-rr[i-1]))+tmp2-rr[i-1]*dis[i];
		cout<<gh<<" ";
			}
			else
			cout<<"0 ";
		}
	}
	return 0;	
}

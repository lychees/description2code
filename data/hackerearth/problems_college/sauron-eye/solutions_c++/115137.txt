#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define CPY(d, s) memcpy(d, s, sizeof(s))
#define mod 1000000007LL
typedef long long  int ll;


//ll a[4][4];
//ll b[4][4];
//ll p[1000000][16]={0};
ll power(ll n);
ll mod1(ll n)
{
	if(n<0)
	{
		while(n<0)
		{
			n+=mod;
		}
		return n;
	}
	return (n<mod) ? n : n%mod;
}

int main()
{
	int  test;
	scanf("%d",&test);
	//inv=modulo2(3,mod-2,mod); // mod of inv of 3
	//printf("inv is %lld\n",inv);
	while(test--)
	{
		ll n;
		scanf("%lld",&n);
		if(n==1) 
		{
			printf("1\n");continue;
		}
		if(n==2) 
		{
			printf("3\n");continue;
		}
		ll ans=power(n-1);
		printf("%lld\n",ans);
	}
	return 0;
}


ll power(ll n)
{
	ll fib[2][2]= {{3LL,-1LL},{1LL,0LL}},ret[2][2]= {{3LL,-1LL},{1LL,0LL}},tmp[2][2]={{3LL,-1LL},{1LL,0LL}};

	int i,j,k;
	bool first=true;
	while(n)
	{
		if(n%2LL!=0)
		{
			if(!first)
			{
				memset(tmp,0,sizeof(tmp));
				for(i=0; i<2; i++) 
				{
					for(j=0; j<2; j++) 
					{
						ll sum=0;  
						for(k=0; k<2; k++)
						{
							sum+=mod1( mod1(ret[i][k])*mod1(fib[k][j]));
						}
						tmp[i][j]=mod1(sum);
					}
				}

				for(i=0; i<2; i++) for(j=0; j<2; j++) ret[i][j]=tmp[i][j];
			}
			else
			{		
				for(i=0; i<2; i++) for(j=0; j<2; j++) ret[i][j]=fib[i][j];
				first=false;
			}
		}
		memset(tmp,0,sizeof(tmp));
		for(i=0; i<2; i++) 
		{
			for(j=0; j<2; j++) 
			{
				ll sum=0;  
				for(k=0; k<2; k++)
				{
					sum+=mod1( mod1(fib[i][k])*mod1(fib[k][j]));
				}
				tmp[i][j]=mod1(sum);
			}
		}

		for(i=0; i<2; i++) for(j=0; j<2; j++) fib[i][j]=tmp[i][j];
		n=n/2LL;
	}
	return  mod1(mod1(3*ret[1][0])+ ret[1][1]);
}

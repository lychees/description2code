#include <bits/stdc++.h>

#define MAX 1001
#define QMAX 2000

using namespace std;

//typedef struct _point { int _x; int _y;} point;

//point Queue[QMAX];

int G[MAX][MAX];
bool vis[MAX][MAX];

int N;
int ans = 0;
int c =0;

/*void bfs(int x, int y)
{
    c =1;
    int f =0;
    int r =0;

    point p; p._x = x; p._y = y;
    Queue[r++] = p;
    vis[x][y] = true;
    //c++;
    visCount[x][y] = c;

    while(r!=f)
    {
        point u = Queue[f];
        f =  (f+1)%QMAX;
        point v;

        if((u._x<N) && (G[u._x+1][u._y] == 1) && (vis[u._x+1][u._y] == false))
        {
            v._x = u._x+1; v._y = u._y;
            Queue[r] = v;
            r = (r+1)%QMAX;
            vis[u._x+1][u._y] = true;
                c++;
            visCount[u._x+1][u._y] = c;
        }

        if((u._x>1) && (G[u._x-1][u._y] == 1) && (vis[u._x-1][u._y] == false))
        {
            v._x = u._x-1; v._y = u._y;
            Queue[r] = v;
            r = (r+1)%QMAX;
            vis[u._x-1][u._y] = true;
                c++;
            visCount[u._x-1][u._y] = c;
        }

        if((u._y<N) && (G[u._x][u._y+1] == 1) && (vis[u._x][u._y+1] == false))
        {
            v._x = u._x; v._y = u._y+1;
            Queue[r] = v;
            r = (r+1)%QMAX;
            vis[u._x][u._y+1] = true;
                c++;
            visCount[u._x][u._y+1] = c;
        }

        if((u._y>1) && (G[u._x][u._y-1] == 1) && (vis[u._x][u._y-1] == false))
        {
            v._x = u._x; v._y = u._y-1;
            Queue[r] = v;
            r = (r+1)%QMAX;
            vis[u._x][u._y-1] = true;
                c++;
            visCount[u._x][u._y-1] = c;
        }
    }

} */

void dfs(int x, int y)
{
    vis[x][y] = true;
    c++;

    if( (x<N) && (G[x+1][y] == 1) && !vis[x+1][y]) dfs(x+1,y);
    if( (x>1) && (G[x-1][y] == 1) && !vis[x-1][y]) dfs(x-1,y);
    if( (y<N) && (G[x][y+1] == 1) && !vis[x][y+1]) dfs(x,y+1);
    if( (y>1) && (G[x][y-1] == 1) && !vis[x][y-1]) dfs(x,y-1);
}


int main()
{
    scanf("%d", &N);
    for(int i=1; i<=N; i++)
    {
        for(int j=1; j<=N; j++)
            scanf("%d",&G[i][j]);
    }

    for(int i=1; i<=N; i++)
    {
        for(int j=1; j<=N; j++)
        {
            if(!vis[i][j] && G[i][j]==1)
            {
                //bfs(i,j);
                c=0;
                dfs(i,j);
                if(ans<c)
                    ans = c;
            }
        }

    }

    printf("%d",ans);

    return 0;
}

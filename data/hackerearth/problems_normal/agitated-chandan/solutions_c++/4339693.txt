#include<bits/stdc++.h>
using namespace std;
int visited[100005];
int dist[100005];
void init();
int main()
{
	int t,n,a,b,w,i;
	scanf("%d",&t);
	while(t--)
	{
		init();
		scanf("%d",&n);
		vector<pair<int,int> > v[n+1];
		for(i=1;i<n;i++)
		{
			scanf("%d%d%d",&a,&b,&w);
			v[a].push_back(make_pair(b,w));
			v[b].push_back(make_pair(a,w));
		}
		queue<pair<int,int> > q;
		q.push(make_pair(1,0));
		visited[1]=1;
		dist[1]=0;
		while(!q.empty())
		{
			pair<int,int> p=q.front();
			q.pop();
			for(i=0;i<v[p.first].size();i++)
			{
				if(visited[v[p.first][i].first]==0)
				{
					q.push(v[p.first][i]);
					visited[v[p.first][i].first]=1;
					dist[v[p.first][i].first]=dist[p.first]+v[p.first][i].second;
				}
			}
		
		}
		int max=0,maxi=0;
		for(i=1;i<=n;i++)
		{
			if(max<dist[i] && dist[i]!=1000000000)
			{
				max=dist[i];
				maxi=i;
			}
		}
		init();
		queue<pair<int,int> > q1;
		q1.push(make_pair(maxi,0));
		visited[maxi]=1;
		dist[maxi]=0;
		while(!q1.empty())
		{
			pair<int,int> p1=q1.front();
			q1.pop();
			for(i=0;i<v[p1.first].size();i++)
			{
				if(visited[v[p1.first][i].first]==0)
				{
					q1.push(v[p1.first][i]);
					visited[v[p1.first][i].first]=1;
					dist[v[p1.first][i].first]=dist[p1.first]+v[p1.first][i].second;
				}
			}
		
		}
		int max1=0;
		for(i=1;i<=n;i++)
		{
			if(max1<dist[i] && dist[i]!=1000000000)
			{
				max1=dist[i];
			}
		}
		int price;
		if(max1<=100)
		{
			price=0;
		}
		else if(max1>100 && max1<=1000)
		{
			price=100;
		}
		else if(max1>1000 && max1<=10000)
		{
			price=1000;
		}
		else
		{
			price=10000;
		}
		printf("%d %d\n",price,max1);
		
	}
	return 0;
}
void init()
{
	int i;
	for(i=0;i<100005;i++)
	{
		visited[i]=0;
		dist[i]=1000000000;
	}
}

#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME ""

const ld EPS = 1e-9;
const int MOD = 1e9 + 7;

void add(int& x, int y) {
  ((x += y) >= MOD) && (x -= MOD);
}

int mul(int x, int y) {
  return x * 1ll * y % MOD;
}

struct Rect {
  int x1, y1, x2, y2;

  Rect inter(const Rect& other) const {
    return Rect{ max(x1, other.x1), max(y1, other.y1), min(x2, other.x2), min(y2, other.y2) };
  }

  void print() const {
    printf("x[%d, %d], y[%d, %d]\n", x1, x2, y1, y2);
  }

  int area() const {
    int n = max(0, x2 - x1 + 1);
    int m = max(0, y2 - y1 + 1);
    return mul(n, m);
  }
};

int mpow(int x, int p) {
  int res = 1;
  for (; p > 0; p /= 2, x = mul(x, x))
    if  (p & 1)
      res = mul(res, x);
  return res;
}

int inv(int x) {
  return mpow(x, MOD - 2);
}

int sum_sq(int n) {
  int ans = 0;
  /*
  forn(i, n + 1) {
    add(ans, mul(i, i));
  }
  return ans;
  */
  ans = mul(n, mul(n, n));
  add(ans, ans);

  add(ans, mul(3, mul(n, n)));

  add(ans, n);

  return mul(ans, inv(6));
}

int sq_diag(int n, int m) {
  if  (n > m) {
    swap(n, m);
  }

  int ans = 0;
  add(ans, sum_sq(n - 1));
  add(ans, ans);
  add(ans, mul(mul(n, n), m - n + 1));
  return ans;
}

int n, m;
int p, q;

Rect get_rect(int x, int y) {
  return Rect{ max(0, -x), max(0, -y), min(m - 1 - x, m - 1), min(n - 1 - y, n - 1) };
}

vector<Rect> r;

int main() {
#ifdef LOCAL
  freopen(FILE_NAME ".in", "r", stdin);
//  freopen(FILE_NAME ".out", "w", stdout);
#endif

  cin >> n >> m >> p >> q;

  r.pb(get_rect(+p, +q));
  r.pb(get_rect(+p, -q));
  r.pb(get_rect(-p, +q));
  r.pb(get_rect(-p, -q));
  
  r.pb(get_rect(+q, +p));
  r.pb(get_rect(+q, -p));
  r.pb(get_rect(-q, +p));
  r.pb(get_rect(-q, -p));
  
  int ans = 0;
  add(ans, mul(mul(n, m), mul(n, m)));
  add(ans, mul(n, m));
  add(ans, - mul(2, sq_diag(n, m)) + MOD);

  forn(i, sz(r)) {
    add(ans,  -r[i].area() + MOD);
  }

//  cout << sq_diag(n, m) << endl;
  cout << ans << endl;
  return 0;
}

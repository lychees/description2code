#include <iostream>
#include <vector>
#include <climits>
#include <algorithm>
#include <cstring>
using namespace std;

vector <vector <int> > graph;
bool visited[10001];


int dfs(int i,bool visited[]){
	visited[i]=true;
	int count=1;
	for(int j=0; j < graph[i].size() ; j++){
		if(visited[ graph[i][j] ] == false){
			count+=dfs(graph[i][j],visited);
		}
	}
	return count;
}

int main()
{
	graph.clear();
	ios_base::sync_with_stdio(false);
    int n,d,a,b;
    cin>>n>>d;
    graph.resize(n+1);
    for(int i=0;i<d;i++){
    	cin>>a>>b;
    	graph[a].push_back(b);
    }
    int ans=INT_MAX,count;
    for(int i=1;i<=n;i++){
    	memset(visited,0,sizeof(visited));
    	count=dfs(i,visited);
    	ans=min(ans,count);
    }
    cout<<ans<<"\n";
    return 0;
}

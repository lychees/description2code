#include<stdio.h>
#include<algorithm>
#define MOD 1000000007
#define MAXN 100010
typedef long long int LL;

using namespace std;

LL fact[MAXN+30],invfact[MAXN+30];

// Fast exponentiation
LL fastExpo(LL val, LL n) 
{	
	if(n == 0)
		return 1;
	
	else if(n == 1)
		return val;
	
	if(n % 2 == 0)
	{
		return fastExpo((val * val)%MOD,n/2);
	}
	
	else
	{
		return (val * fastExpo((val * val)%MOD,(n-1)/2)) % MOD;
	}	
}

// Modular Multiplicative Inverse
LL inverse(LL val)
{
	return fastExpo(val,MOD-2);
}

// Initialization for fact and invfact
void init()
{
	fact[0]=1;
    
    LL i;
    
    for(i=1; i<MAXN+30; i++)
        fact[i]=(i*fact[i-1]) % MOD;
        
    invfact[MAXN+29]=inverse(fact[MAXN+29]);
    
    for(i=MAXN+29; i>0; i--)
        invfact[i-1]=(i*invfact[i]) % MOD;       
}

// The Main nCr
LL nCr(LL n,LL r)
{
	if(r < 0 || r > n)
		return 0;
	
	else
	{
		return (((fact[n] * invfact[n-r]) % MOD) * invfact[r]) % MOD;	
	}
		
}

LL a[MAXN + 30];

int main()
{
	int t;
	
	init();
		
	scanf("%d",&t);
				
	while(t--!=0)
	{
		int i;
		LL N, K;
		
        scanf("%lld%lld", &N, &K);
        
        for (i =0 ; i < N; i++) 
		{
            scanf("%lld", &a[i]);
        }        
        
        LL ans = 0;
        sort(a, a+N);
        
        for(i=0;i<N;i++)
        {
            if(N-i<K)
            break;
            
            ans = (ans + (a[i] * nCr(N-i-1,K-1)))%MOD;
        }

		printf("%lld\n",ans);
	}
	
	return 0;
}

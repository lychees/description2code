def XOR(a, b):
    return a ^ b


def chandu_xor(matrix):
    sumN = []
    sumM = []
    for i in range(0, N):
        sum_ = 0
        for j in range(0, M):
            sum_ = sum_ + matrix[i][j]
        sumN.append(sum_)
    for i in range(0, M):
        sum_ = 0
        for j in range(0, N):
            sum_ = sum_ + matrix[j][i]
        sumM.append(sum_)
    max = XOR(sumN[0], sumM[0])
    for i in range(0, N):
        for j in range(0, M):
            x = sumN[i]
            y = sumM[j]
            if (XOR(x, y) > max):
                max = XOR(x, y)
    return max


tokensNM = raw_input()
detokensNM = tokensNM.split()
N = int(detokensNM[0])
M = int(detokensNM[1])
matrix = []
for i in range(0, N):
    matrix.append([])
    tokens = raw_input()
    detokens = tokens.split()
    for j in range(0, M):
        matrix[i].append(int(detokens[j]))
print chandu_xor(matrix)

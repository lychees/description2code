#include <iostream>
#include <vector>
using namespace std;

#define NONE		0
#define EDGE		1
#define	RED			2
#define BLACK		3
#define WHITE		4

int main ()
{
	vector<vector<int>> AdjMatrix;
	vector<int> Verticies;
	vector<int> Queue;
	bool bIsBicolorable = true;
	int numVerts;
	int numEdges;
	int x, y;
	int u;
	int numGraphs;
	
	cin >> numGraphs;
	cin >> numVerts;

	for (int i = 0; i < numGraphs; ++i)
	{
		Queue.clear ();

		Verticies.resize (numVerts);
		for (int i = 0; i < numVerts; ++i)
		{
			Verticies[i] = WHITE;
		}

		cin >> numEdges;

		AdjMatrix.resize (numVerts);
		for (int i = 0; i < numVerts; ++i)
		{
			AdjMatrix[i].resize (numVerts);
		}

		for (int i = 0; i < numVerts; ++i)
		{
			for (int j = 0; j < numVerts; ++j)
			{
				AdjMatrix[i][j] = NONE;
			}
		}	

		for (int i = 0; i < numEdges; ++i)
		{
			cin >> x >> y;
			AdjMatrix[x][y] = EDGE;
		}
		
		Verticies[0] = BLACK;
		Queue.push_back (0);

		while (!Queue.empty () && bIsBicolorable)
		{
			u = Queue[0];
			Queue.erase (Queue.begin ());

			for (int child = 0; child < numVerts; ++child)
			{
				if (EDGE == AdjMatrix[u][child])
				{
					if (WHITE == Verticies[child])
					{
						if (Verticies[u] == BLACK)
						{
							Verticies[child] = RED;
						}
						else
						{
							Verticies[child] = BLACK;
						}

						Queue.push_back (child);
					}
					else if (Verticies[child] == Verticies[u])
					{
						bIsBicolorable = false;
					}
				}
			}
		}

		if (bIsBicolorable)
		{
			cout << "BICOLORABLE." << endl;
		}
		else
		{
			cout << "NOT BICOLORABLE." << endl;
		}

		bIsBicolorable = true;
		cin >> numVerts;
	}

	return EXIT_SUCCESS;
}

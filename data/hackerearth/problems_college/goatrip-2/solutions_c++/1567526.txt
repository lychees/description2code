#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<random>
using namespace std;
int t;
#define MOD 1000000009
int n;
int k;
#define MAX 31
vector<int> v[MAX];
string s[MAX];
bool use[MAX][MAX];
long long int dp[MAX][MAX];
inline long long int dfs(int a, int b){
	if (b == k){
		return 1LL;
	}
	if (use[a][b]){
		return dp[a][b];
	}
	use[a][b] = true;
	dp[a][b] = 0LL;
	for (int i = 0; i < v[a].size(); i++){
		dp[a][b] += dfs(v[a][i], b + 1);
		dp[a][b] %= MOD;
	}
	return dp[a][b];
}
int main(){
	scanf("%d", &t);
	while (t--){
		memset(use, false, sizeof(use));
		scanf("%d%d", &n, &k);
		for (int i = 0; i < n; i++){
			v[i].clear();
			cin >> s[i];
		}
		for (int i = 0; i < n; i++){
			for (int j = 0; j < n; j++){
				if (i == j){
					continue;
				}
				if (s[j].find(s[i])!=string::npos){
					v[i].push_back(j);
				}
			}
		}
		long long int ans = 0;
		for (int i = 0; i < n; i++){
			ans += dfs(i, 0);
			ans %= MOD;
		}
		for (long long int i = 1LL; i <= n - k-1; i++){
			ans *= i;
			ans %= MOD;
		}
		printf("%lld\n", ans);
	}
	return 0;
}
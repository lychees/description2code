#include<bits/stdc++.h>
using namespace std;
typedef long long ll;


void make_set(ll p[],ll rnk[], ll N);
void union_set(ll A,ll B, ll arr[], ll rnk[]);
ll find_root(ll x, ll arr[] );

int main()
{
    ll T;
    cin >> T;
    while (T--)
    {
        ll N,K;
        cin >> N >> K;
        ll arr[N+1];
        ll rnk[N+1];

        make_set(arr,rnk,N);
        int ans = 1,temp=1;


        for (ll i=0 ;i < K ; i++)
        {
            ll A,B;
            string sign;
            cin >> A >> sign >> B;

            if (sign == "=")
                union_set(A,B,arr,rnk);
            else
                {
                ll r1 = find_root(A,arr);
                ll r2 = find_root(B,arr);
                //cout << r1 << " and " << r2 <<endl;

                if (r1 == r2)
                    temp = 0;
                else
                    temp = 1;
                }
                ans = ans and temp;
        }

        if (ans)
            cout << "YES";
        else
            cout << "NO";

        cout << endl;

    }

}

void make_set(ll p[],ll rnk[], ll N)
{

    for (ll i=1 ; i<=N ;i++)
        {
            p[i]   = i;
            rnk[i] = 0;

        }

}


void union_set(ll A,ll B, ll arr[], ll rnk[])
{
    ll r1 = find_root(A,arr);
    ll r2 = find_root(B,arr);

    if (r1 == r2)
        return;

    else if (rnk[r1] > rnk[r2])
        {
            arr[r2] = r1;
        }
    else if (rnk[r1] < rnk[r2])
        {
            arr[r1] = r2;
        }
    else
        {
        arr[r2] = r1;
        rnk[r1] = rnk[r1] + 1;

        }
}

ll find_root(ll i,ll arr[])
{
    if (arr[i] == i)
        return i;
    else
    {
        arr[i] = find_root(arr[i],arr);
        return arr[i];

    }
}


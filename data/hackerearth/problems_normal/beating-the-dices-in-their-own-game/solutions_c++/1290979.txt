// iostream is too mainstream
#include <cstdio>
// bitch please
#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <iomanip>
#include <time.h>
#define dibs reserve
#define OVER9000 1234567890
#define ALL_THE(CAKE,LIE) for(auto LIE =CAKE.begin(); LIE != CAKE.end(); LIE++)
#define tisic 47
#define soclose 1e-9
#define chocolate win
// so much chocolate
#define patkan 9
#define ff first
#define ss second
#define abs(x) ((x < 0)?-(x):x)
#define uint unsigned int
#define ull unsigned long long
#define dbl long double
using namespace std;
// mylittledoge

// taken from stanford.edu (utfg)
///////////////////////////////////////////////////////////////////////////
// Min cost bipartite matching via shortest augmenting paths
//
// This is an O(n^3) implementation of a shortest augmenting path
// algorithm for finding min cost perfect matchings in dense
// graphs.  In practice, it solves 1000x1000 problems in around 1
// second.
//
//   cost[i][j] = cost for pairing left node i with right node j
//   Lmate[i] = index of right node that left node i pairs with
//   Rmate[j] = index of left node that right node j pairs with
//
// The values in cost[i][j] may be positive or negative.  To perform
// maximization, simply negate the cost[][] matrix.
///////////////////////////////////////////////////////////////////////////

typedef vector<double> VD;
typedef vector<VD> VVD;
typedef vector<int> VI;

double MinCostMatching(const VVD &cost, VI &Lmate, VI &Rmate) {
  int n = int(cost.size());

  // construct dual feasible solution
  VD u(n);
  VD v(n);
  for (int i = 0; i < n; i++) {
    u[i] = cost[i][0];
    for (int j = 1; j < n; j++) u[i] = min(u[i], cost[i][j]);
  }
  for (int j = 0; j < n; j++) {
    v[j] = cost[0][j] - u[0];
    for (int i = 1; i < n; i++) v[j] = min(v[j], cost[i][j] - u[i]);
  }
  
  // construct primal solution satisfying complementary slackness
  Lmate = VI(n, -1);
  Rmate = VI(n, -1);
  int mated = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (Rmate[j] != -1) continue;
      if (fabs(cost[i][j] - u[i] - v[j]) < 1e-10) {
	Lmate[i] = j;
	Rmate[j] = i;
	mated++;
	break;
      }
    }
  }
  
  VD dist(n);
  VI dad(n);
  VI seen(n);
  
  // repeat until primal solution is feasible
  while (mated < n) {
    
    // find an unmatched left node
    int s = 0;
    while (Lmate[s] != -1) s++;
    
    // initialize Dijkstra
    fill(dad.begin(), dad.end(), -1);
    fill(seen.begin(), seen.end(), 0);
    for (int k = 0; k < n; k++) 
      dist[k] = cost[s][k] - u[s] - v[k];
    
    int j = 0;
    while (true) {
      
      // find closest
      j = -1;
      for (int k = 0; k < n; k++) {
	if (seen[k]) continue;
	if (j == -1 || dist[k] < dist[j]) j = k;
      }
      seen[j] = 1;
      
      // termination condition
      if (Rmate[j] == -1) break;
      
      // relax neighbors
      const int i = Rmate[j];
      for (int k = 0; k < n; k++) {
	if (seen[k]) continue;
	const double new_dist = dist[j] + cost[i][k] - u[i] - v[k];
	if (dist[k] > new_dist) {
	  dist[k] = new_dist;
	  dad[k] = j;
	}
      }
    }
    
    // update dual variables
    for (int k = 0; k < n; k++) {
      if (k == j || !seen[k]) continue;
      const int i = Rmate[k];
      v[k] += dist[k] - dist[j];
      u[i] -= dist[k] - dist[j];
    }
    u[s] += dist[j];
    
    // augment along path
    while (dad[j] >= 0) {
      const int d = dad[j];
      Rmate[j] = Rmate[d];
      Lmate[Rmate[j]] = j;
      j = d;
    }
    Rmate[j] = s;
    Lmate[s] = j;
    
    mated++;
  }
  
  double value = 0;
  for (int i = 0; i < n; i++)
    value += cost[i][Lmate[i]];
  
  return value;
}

int main() {
	cin.sync_with_stdio(0);
	cin.tie(0);
	int N;
	cin >> N;
	vector< vector< pair<int,int> > > C(N);
	for(int i =0; i < N; i++) {
		int M;
		cin >> M;
		C[i].resize(M);
		for(int j =0; j < M; j++) cin >> C[i][j].ff >> C[i][j].ss;}
	int Q;
	cin >> Q;

	for(int q =0; q < Q; q++) {
		vector<int> K(N);
		for(int i =0; i < N; i++) cin >> K[i];
		vector< vector<int> > F(2*N+2,vector<int>(2*N+2,0));
		for(int i =0; i < N; i++) for(int j =0; j < N; j++) 
			ALL_THE(C[j],it) if(it->ff == K[i]) F[i+1][N+1+j] =1;
		for(int i =0; i < N; i++) F[0][1+i] =F[N+1+i][2*N+1] =1;
		int f =0;
		queue<int> qq;
		while(true) {
			vector<int> ako(2*N+2,-1);
			qq.push(0);
			while(!qq.empty()) {
				for(int i =0; i < 2*N+2; i++) if(F[qq.front()][i] == 1 && ako[i] == -1) {
					ako[i] =qq.front();
					qq.push(i);}
				qq.pop();}
			if(ako[2*N+1] == -1) break;
			int akt =2*N+1;
			f++;
			while(akt > 0) {
				F[ako[akt]][akt] =0;
				F[akt][ako[akt]] =1;
				akt =ako[akt];}
			}
		if(f < N) {cout << "-1\n"; continue;}
		vector< vector<double> > c(N,vector<double>(N,1e15));
		for(int i =0; i < N; i++) for(int j =0; j < N; j++)
			ALL_THE(C[j],it) if(it->ff == K[i]) c[i][j] =it->ss;
		vector<int> L(N,-1),R(N,-1);
		for(int i =0; i < N; i++) for(int j =0; j < N; j++)
			if(F[i+1][N+1+j] == 0 && F[N+1+j][i+1] == 1) L[i] =j, R[j] =i;
//		for(int i =0; i < N; i++) cout << L[i] << "  " << R[i] << "\n";
		cout << (int)MinCostMatching(c,L,R) << "\n";}
	return 0;}

// look at my code
// my code is amazing
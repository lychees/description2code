#include <bits/stdc++.h>
using namespace std;

int grid [1000][1000];
int visited [1000][1000];

int bfs(int x, int y,int n)
{	int i,j,ctr=0;
	queue <pair<int,int>> q;
	q.push(pair<int,int> (x,y));
	while(!q.empty())
	{
		pair <int,int> curr = q.front();
		q.pop();
		ctr++;
			
		visited[curr.first][curr.second]=1;
		x=curr.first;
		y=curr.second;
		for ( i = max(0,x-1); i <= min(n-1,x+1); i++)
		{
			for ( j = max(0,y-1); j <= min(n-1,y+1); j++)
			{	
			if (visited[i][j]==0 && grid[i][j]==1 && abs(i+j-x-y)==1)
			{q.push(pair<int,int> (i,j));
			visited[i][j]=1;
			}
				
			}
		}
		
		
		
	}
return ctr;
}

int main()
{
    int n,i,j,ctr_max=0;
    cin>>n;
    
    memset (visited, 0, sizeof(visited));
    
    for ( i = 0; i < n; i++ )
    for ( j = 0; j < n; j++ )
	cin>>grid[i][j];
    
    for ( i = 0; i < n; i++ )
    {
    	for ( j = 0; j < n; j++ )
		{
    
			if (visited[i][j]==0 && grid[i][j]==1)   
    		{
    		ctr_max=max(ctr_max,bfs(i,j,n));
    		}
    
		}
    
    }
    
    cout<<ctr_max<<endl;
    
    
    return 0;
    
    
}

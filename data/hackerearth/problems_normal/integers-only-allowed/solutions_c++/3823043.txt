#include <bits/stdc++.h>
using namespace std;
#define read() freopen("input.txt", "r", stdin)
#define write() freopen("output.txt", "w", stdout)
#define ff(i,a,b) for(int i = (a); i <= (b); i++)
#define fr(i,a,b) for(int i = (a); i >= (b); i--)
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define REPI( n , i ) for( int i = n ; i >= 0 ; i-- )
#define sc( x ) scanf( "%d" , &x )
#define sc2( x , y ) scanf( "%d%d" , &x , &y )
#define scd( x ) scanf( "%.9f" , &x )
#define scl( x ) scanf( "%I64d" , &x )
#define pf( x ) printf( "%d\n" , x )
#define pfd( x ) printf( "%.9f\n" , x )
#define pfl( x ) printf( "%I64d\n" , x )
#define rrc( x ) return cout << x , 0 ;
#define all( v ) v.begin(),v.end()
#define all_r( v ) v.rbegin() , v.rend()
#define fi first
#define se second
#define SZ(a) int(a.size())
#define pb push_back
#define pi acos(-1.0)
#define e2( x ) ( x )*( x )
#define r2( x ) sqrt( 1.0*( x ) )
#define ones(x) __builtin_popcount(x)
#define MCM( a , b ) ( ( a*b )/( __gcd( a , b ) ) )
#define ddd cout << "despues" << endl ;
#define sss cout << "------------------" << endl ;
#define aaa cout << "antes" << endl ;
#define da( a , b ) ( (a)/(b) - ( (a) < 0 && (a)%(b) != 0 ) )
#define ceil_( a , b ) ( da( (a) , (b) ) + ((a)%(b) > 0) )
#define Mm greater<int>

typedef double db ;
typedef long long ld ;
typedef long long ll ;
typedef vector<int> vi ;
typedef vector<vi> vvi ;
typedef vector<ll> vl ;
typedef vector<bool> vb ;
typedef pair<int,int> pii ;
typedef vector<pii> vpii ;
const ld EPS = 1e-6 ;
const int INF = (int)( INT_MAX - 100 ) ;
const ll mod = (int)( 1e+9 + 7 ) ;
const int N = (int)( 0 ) ;
//inline ll modulo( ll num ){ ( ( num %= mod ) += mod ) %= mod ; return num ; }
//inline ll pot( int b , int e ){ ll p = 1 ; REP( i , e ) p = (p*b)%mod ; return p ; }

struct Point{
	ld x , y ;
	Point() { x = 0 ; y = 0 ; }
	Point( ld x , ld y ) : x( x ) , y( y ) {}
};

typedef Point Vector ;

Point operator - ( const Point &p1 , const Point &p2 ){ return Point( p1.x - p2.x , p1.y - p2.y ) ; }
Point operator + ( const Point &p1 , const Point &p2 ){ return Point( p1.x + p2.x , p1.y + p2.y ) ; }
Point operator * ( const ld &k , const Point &p ){ return Point( p.x * k , p.y * k ) ; }
Point operator / ( const Point &p , const ld &k ){ return Point( p.x / k , p.y / k ) ; }
ld operator ^ ( const Vector &p1 , const Vector &p2 ){ return ( p1.x*p2.x + p1.y*p2.y ) ; }
ld operator & ( const Vector &p1 , const Vector &p2 ){ return ( p1.x*p2.y - p1.y*p2.x ) ; }
inline bool equals( const ld &r1 , const ld &r2 ){ return abs( r1 - r2 ) < EPS ; }
bool operator == ( const Point &p1 , const Point &p2 ){ return equals( p1.x , p2.x ) && equals( p1.y , p2.y ) ; }

vector<Point> vert ;
inline ld areaPoly(){
	ld S = 0 ;
	ff( i , 1 , SZ( vert ) - 2 )
		S += ( vert[ i ] - vert[ 0 ] )&( vert[ i + 1 ] - vert[ 0 ] ) ;
	return abs( S ) ;
}

int main()
{
//	ios_base::sync_with_stdio(0);
	int n , b = 0 ;
	cin >> n ;
	vert = vector<Point>( n ) ;
	REP( i , n ) cin >> vert[ i ].x >> vert[ i ].y ;
	REP( i , n ) b += __gcd( abs( vert[ ( i + 1 ) % n ].x - vert[ i ].x ) , abs( vert[ ( i + 1 ) % n ].y - vert[ i ].y ) ) ;
	cout << ( areaPoly() - b + 2 ) / 2 ;
	
	return 0 ;
}











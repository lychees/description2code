#include<stdio.h>
#include<math.h>
#include<string.h>
#include<stdlib.h>

#define MAX_SQRT 1000002  // 10^9
#define MAX_SQRT_SQRT 1002 // 31630
#define MAX_PRIMES 1000004

char primes[MAX_PRIMES];

long long sum = 0;

void init() {
	int i;
	for (i=2;i<=MAX_SQRT;i++){ primes[i]=1; if(!(i%2)&&i!=2)primes[i]=0; }
	for (i=3;i*i<=MAX_SQRT;i+=2) if (primes[i]) {
		int i2 = i<<1;
		for(int j=i*i; j<=MAX_SQRT; j+=i2) primes[j]=0;
	}
}

void compute(int m, int n) {
		//sum+=2;
		//if (!(m&1)) m|=1;
		for (int i=m;i<=n;i++)
			if (primes[i])
				sum += i;
}

bool is_prime(long long number)
{	
	int i;
	
	if (number==1) return false;
	if (number ==2) return true;
	if (!(number&1)) return false;
	for (i=3; i<=(int)sqrt((double)number); i+=2)
	// Fucking time consuming condition.
	// Lesson: Never blinding read others optimization techniques
	//for (i=3; i*i<=number; i+=2)
	{
		//if(number<=MAX_SQRT && !composites[number])
		//	return true;
		//else{
		if (number % i == 0)
		{
			return false;
		}
		//}

	}
	
	return true;	
}

int main() {
	int tests;
	init();
	scanf("%d", &tests);
	while(tests--) {
		int m, n;
		scanf("%d %d", &m, &n);
		sum=0;
		compute(m,n);
		//printf("SUM: %lld\n", sum);
		
		if (is_prime(sum))
			printf("YES\n");
		else
			printf("NO\n");
	
	}
	return 0;
}
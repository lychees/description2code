#include<bits/stdc++.h>
using namespace std;
const int maxn =1e5 + 10;
#define pp pair<int,int>
vector<pp> adj[maxn];//storing index and distance from source
int n,e,d[maxn],s;
int u,v,w;
class prioritize{public:    
int operator() ( const pair<int, int>& p1, const pair<int, int>& p2 )
    {        return p1.second < p2.second;    
	}
	};
void dijkstra(int u)
{
	//queue<int> q;
	priority_queue<pp, vector<pp>, prioritize > q; 
	for(int i=1;i<=n;i++)
	d[i]=INT_MAX;
	d[u]=0;
	q.push({u,d[u]}); 
	while(!q.empty())
	{
	
		u=q.top().first;
		q.pop();
		//process u;
		//cout<<u<<"\n";
		vector<pp>::iterator i;
		for(i=adj[u].begin();i!=adj[u].end();i++)
		{
			v=i->first;
			w=i->second;
			if(d[v]>d[u]+w)
			{
				d[v]=d[u]+w;
				q.push({v,d[v]});
			}
		}
	}
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	cin>>n>>e;
	while(e--)
	{
		cin>>u>>v>>w;
		adj[u].push_back({v,w});
		adj[v].push_back({u,w});
	}
	cin>>s;
	dijkstra(s);
	for(int i=1;i<=n;i++)
	{
		if(i!=s)
		{
			if(d[i]==INT_MAX) cout<<"-1 ";
			else
			cout<<d[i]<<" ";
		}
		adj[i].clear();
	}
	cout<<"\n";
	}
}

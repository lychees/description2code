#include <iostream>
#include <queue>          // std::priority_queue
using namespace std;
typedef pair<unsigned long long, int> iPair;
int main()
{
	unsigned long long solution [10][2];
	int T, N, K, M;
	cin >> T;
	for (int i=0; i< T; i++)
	{
		priority_queue <iPair, vector<iPair>, greater<iPair> > pq;
		unsigned long long cost=0;
		cin >> N>> K>>M;
		vector <int> pieces;
		for (int j=0; j<N;j++)
		{
			int t;
			cin >> t;
			pieces.push_back(t);
		}
		for (int j =0; j<N;j++)
		{
			cost =0;
			for (int k=0; k<pieces[j]; k++)
			{
				int m;
				cin >> m;
				cost += K;
				cost +=m;
			}
			unsigned long long waits = (pieces[j] - 2) + 1;
			if(waits > 0 )
			  cost += (waits * M);
			pq.push(make_pair(cost, j));  
		}
		solution[i][0] = (pq.top().second) +1;
		solution[i][1] = pq.top().first;
	}
    for (int i=0; i< T; i++)
       cout <<solution[i][0]<<" "<<solution[i][1]<<endl;
    return 0;
}

#include<iostream>
using namespace std;
bool prevPermutation(int arr[]);
int n;
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		cin>>n;
		int *arr=new int[n];
		for(int i=0;i<n;++i)
		cin>>arr[i];
		prevPermutation(arr);
		
	}
	

    
	return 0;
}


bool prevPermutation(int array[]) {
    // Find longest non-increasing suffix
    int i = n - 1;
    while (i > 0 && array[i - 1] <= array[i])
        i--;
    // Now i is the head index of the suffix
    
    // Are we at the last permutation already?
    if (i <= 0)
    
	{
	
    for(int k=0;k<n;++k)
    cout<<array[k]<<" ";
    cout<<endl;
        return false;
     }
    // Let array[i - 1] be the pivot
    // Find rightmost element that exceeds the pivot
    int j = n - 1;
    while (array[j] >= array[i - 1])
        j--;
    // Now the value array[j] will become the new pivot
    // Assertion: j >= i
    
    // Swap the pivot with j
    int temp = array[i - 1];
    array[i - 1] = array[j];
    array[j] = temp;
    
    // Reverse the suffix
    j = n - 1;
    while (i < j) {
        temp = array[i];
        array[i] = array[j];
        array[j] = temp;
        i++;
        j--;
    }
    
    // Successfully computed the next permutation
     for(int k=0;k<n;++k)
    cout<<array[k]<<" ";
    cout<<endl;
    return true;
    
}
#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define sqr(x) ((x)*(x))
#define cube(x) ((x)*(x)*(x))
#define rep(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define fore(i,a,b) for(int i=(a);i<=(b);++i)
#define ford(i,a,b,d) for(int i=(a);i<(b);i+=(d))
#define forr(i,n,e) for(int i=(n);i>=(e);--i)
#define forrd(i,n,e,d) for(int i=(n);i>=(e);i-=(d))
#define repit(it,m) for(it=m.begin();it!=m.end();it++)
#define fori(it,s) for(__typeof((s).begin()) (it)=(s).begin();(it)!=(s).end();(it)++)
#define foreach(it, X) for(__typeof((X).begin()) it = (X).begin(); it != (X).end(); ++it)
#define unique(v) sort(all(v)),v.erase(unique(all(v)),v.end())
#define fill(a,b) memset(a,b,sizeof(a))
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define test int T;cin>>T;fore(t,1,T)
#define sz size()
#define s(n) cin>>n;
#define p(n) cout<<n<<endl;
using namespace std;
typedef std::pair<int,int> ii;
typedef std::pair<double,double> dd;
typedef std::vector<int> vi;
typedef std::vector<double> vd;
typedef std::vector<vi> vvi;
typedef std::vector<std::string> vs;
typedef std::vector<ii> vii;
double _st;
const ll mod = 1000000009;
const int N = 123456;
int minimal[105][105][105];
int arr[105][105];
bool seen[105];
int printpath[105];
vector<ii>v[105];
int ans = -1;
int n,m;
int s,d,t;
void printpathans(int len)
{
  rep(i,len)
    cout << printpath[i] <<" ";
  cout << d<<endl;
}
bool dfs(int u,int pathlen=0)
{
  printpath[pathlen++] = u;
  seen[u] = true;
  if(u==d)
    return true;
  rep(i,v[u].sz)
    {
      int d = v[u][i].ss,next=v[u][i].ff;
      if(d>=ans and !seen[next])
	{
	  if(dfs(next,pathlen))
	    {
	      printpathans(pathlen);
	      break;
	    }
	}
    }
  return false;
}
void solve()
{
  cin>>n>>m;
  rep(i,m)
    {
      int a,b,c;
      cin>>a>>b>>c;
      arr[a][b] = c;
      arr[b][a] =c;
      v[a].pb(mp(b,c));
      v[b].pb(mp(a,c));
    }
  rep(i,n)
    {
      sort(all(v[i]));
    }
  cin>>s>>d>>t;
  rep(i,n+1) rep(j,n+1) if(arr[i][j]) minimal[i][j][0] = arr[i][j];
  rep(k,n)
    fore(i,1,n)
    fore(j,1,n)
    {
      // if(i==s and j==d)
      // 	{
      // 	  cout << " k is "<<k+1<<endl;
      // 	  if(minimal[i][k+1][k]<minimal[k+1][j][k])
      // 	    {
      // 	      if(minimal[i][k+1][k]>minimal[i][j][k])
      // 		{
      // 		  cout <<i <<" "<< k+1 << endl;
      // 		}
      // 	      else
      // 		cout << k << endl;
      // 	    }
      // 	  else
      // 	    {
      // 	      if(minimal[k+1][j][k]>minimal[i][j][k])
      // 		cout << k+1 <<" "<<j<< endl;
      // 	      else
      // 		cout << k << endl;
      // 	    }
      // 	}
   //   else
      minimal[i][j][k+1] = max(min(minimal[i][k+1][k],minimal[k+1][j][k]),minimal[i][j][k]);
    }
  rep(i,n+1)
    ans = max(ans, minimal[s][d][i]);
  ans--;
  fill(seen,false);
  dfs(s);
  int finalas = t/ans;
  if(t%ans) finalas++;
  cout << finalas <<endl;
}
void pre()
{
  //   test
    solve();
}
void end(){
#ifdef dexter
  fprintf(stdout,"\nTIME: %.3lf sec\n",(double)(clock()-_st)/(CLOCKS_PER_SEC));
#endif
}
int main()
{
#ifdef dexter
  freopen("/home/dexter/Desktop/Dropbox/ZONE/inout/input.txt","r",stdin);
  //freopen("/home/dexter/Desktop/Dropbox/ZONE/inout/output.txt","w",stdout);
  _st = clock();
#endif
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  pre();
  end();
  return 0;
}

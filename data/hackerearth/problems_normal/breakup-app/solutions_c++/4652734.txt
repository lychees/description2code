/*   ARSHEYA RAJ   */

#include <iostream>
#include <bits/c++io.h>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <deque>
#include <string.h>
#include <algorithm>
#include <iomanip>
#include <exception>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <iterator>
#include <climits>
 
#define ll long long int
#define MAX(a,b) (a>b)?a:b
#define MIN(a,b) (a>b)?b:a
#define FOR(i,n) for(int i=1;i<=n;i++)
#define FOR_X(i,x,n) for(i=x;i<n;i++)
#define BACK(i,n) for(i=n;i>0;i--)
#define BACK_X(i,n,x) for(i=n;i>=x;i--)
#define fill(a,v) memset(a,v,sizeof(a))
#define pb push_back
#define pp pair<int,int>
#define mod 1000000007
#define MAX_N 100005

template< class T > T sq(T &x) { return x * x; }
template< class T > T abs(T &n) { return (n < 0 ? -n : n); }
template< class T > T gcd(T a, T b) { return (b != 0 ? gcd<T>(b, a%b) : a); }
template< class T > T lcm(T a, T b) { return (a / gcd<T>(a, b) * b); }
template< class T > bool inside(T &a, T &b, T &c) { return a<=b && b<=c; }
template< class T > void setmax(T &a, T b) { if(a < b) a = b; }
template< class T > void setmin(T &a, T b) { if(b < a) a = b; }

const double EPS = 1e-9;
const int INF = 0x3f3f3f3f;

using namespace std;

int main(){
	ll n,a[35]={0},x=0,y,z,ans,i;
	string s;
	scanf("%lld\n",&n);
	while(n--){
		getline(cin,s);
		//cout<<s<<endl;
		for(i=0;i<s.size()-1;i++){
			if(s.at(i)>='0' && s.at(i)<='9'){
				z=(ll)s.at(i);
				y=(ll)s.at(i+1);
				x=(z-48)*10+(y-48);
				i=i+1;
			}
			//printf("i=%lld x=%lld\n",i,x);
			if(s.at(0)=='G'){
				a[x]=a[x]+2;
			}
			else if(s.at(0)=='M'){
				a[x]=a[x]+1;
			}
			x=0;
		}
	}
	/*for(i=1;i<=33;i++)
		printf("a[%lld]=%lld\n",i,a[i]);*/
	ll max=a[1];
	for(i=2;i<=33;i++){
		if(a[i]>max){
			max=a[i];
		}
	}
	ll count=0;
	for(i=1;i<=33;i++){
		if(a[i]==max){
			ans=i;
			count++;
		}
	}
	//printf("ans=%lld\n",ans);
	if(count>1){
		printf("No Date");
	}
	else{
		if(ans==19 || ans==20){
			printf("Date");
		}
		else{
			printf("No Date");
		}
	}
return 0;
}
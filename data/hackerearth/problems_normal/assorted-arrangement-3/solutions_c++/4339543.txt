#include <iostream>
using namespace std;
#include <vector>

vector<int> colors;
vector<int> paintedNumbers;
int n = 0;
int m = 0;

int nextNumberDivisible(int currentCandidate, int currentColor) {
	//cout<<"currentcandidate:"<<currentCandidate<<",color:"<<currentColor<<endl;
	return ((currentCandidate+ currentColor - 1)/currentColor)*currentColor; 
}

int getNextNumber(int paintedColorIndex, int currentCandidate)
{
	int currentColor = colors[paintedColorIndex - 1];
	int nextCandidate = nextNumberDivisible(currentCandidate, currentColor);
	//cout<<"next candidate:"<<nextCandidate<<endl;
	for(int i = nextCandidate; i < 1000000000; i += currentColor)
	{
		bool isDivisible = false;
		for (int j = paintedColorIndex; j < m; j++) {
			//cout<<"color:"<<colors[j]<<",i:"<<i<<endl;
			if (i % colors[j] == 0) {
				isDivisible = true;
				break;
			}
		}
		if (!isDivisible)
		{
			return i;
		}
	}
	return -1;
}

int main()
{
    cin>>n>>m;
    colors.resize(m);
    paintedNumbers.resize(n);
    for (int i = 0; i < m; i++)
    {
    	cin>>colors[i];
    }
    for (int i = 0; i < n; i++)
    {
    	cin>>paintedNumbers[i];
    }

	int currentCandidate = 1;
	for (int i = 0; i < n; i++) {
		currentCandidate = getNextNumber(paintedNumbers[i], currentCandidate);
		currentCandidate++;
	}
	currentCandidate--;
	cout<<currentCandidate<<endl;

    return 0;
}

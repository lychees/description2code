#include <iostream>
#include<queue>
#include<vector>
#include<limits.h>
#include<utility>
#include<stdio.h>
# define ll long long int
# define pll pair<ll,ll>
# define infinity INT_MAX
using namespace std;
vector<pll>v[1000005];
ll mincost=0;
int visit[1000005];
ll dist[1000005];
int exits[1000005];
int topo[1000005];
int curr=1;
int n;
vector<int>v1;

void dfs(int x){
    visit[x]=1;
    for(int i=0;i<v[x].size();i++)
    {
        if(!visit[v[x][i].second])
            dfs(v[x][i].second);
    }
    exits[x]=curr++;
}
void longestpath()
{
//    cout<<curr<<endl;
    for(int i=curr;i>=1;i--)
    {
  //      cout<<"yoy0";
        int x=topo[i];
        if(dist[x]!=INT_MIN )
        {
    //        cout<<"yoyo1";
            for(int j=0;j<v[x].size();j++)
            {
      //      cout<<"yoyo2";
                int y=v[x][j].second;
                if(dist[y]<dist[x]+v[x][j].first)
        //    cout<<"yoyo3",
                    dist[y]=dist[x]+v[x][j].first;
            }
        }
    }
}
void toposort()
{
        for(int i=1;i<=n;i++)
        {
            if(exits[i]!=0)
            topo[exits[i]]=i;
        }
}
int main()
{
    //freopen("input.txt","r",stdin);
    ll m,test,x,y,a,b,c;
//    cin>>test;
    test=1;
    for(int t=0;t<test;t++)
    {
        cin>>n>>m;
        for(int i=0;i<=n;i++)
            {
                dist[i]=INT_MIN;
                visit[i]=0;
                exits[i]=0;
            }
        for(int i=0;i<m;i++)
        {
            cin>>a>>b>>c;
            v[a].push_back(make_pair(c+2,b));
        }
//        cout<<v[x].size()<<endl;
        mincost=INT_MIN;
 //    for(int j=1;j<=n;j++)
     {
        curr=1;
        for(int j=1;j<=n;j++)
       {
           if(!visit[j])
               {
                 dfs(j);
                 v1.push_back(curr-1);
               }
       }
        curr--;
         toposort();
/*     for(int i=curr;i>=1;i--)
        {
            cout<<topo[i]<<" ";
        }
        cout<<endl;
*/
            for(int i=0;i<=n;i++)
            {
                dist[i]=INT_MIN;
                visit[i]=0;
                exits[i]=0;
            }
            for(int i=0;i<v1.size();i++)
            dist[topo[v1[i]]]=0;
            longestpath();
     /*       for(int i=curr;i>=1;i--)
            {
                cout<<dist[topo[i]]<<" ";
            }
            cout<<endl;
       */
      // cout<<dist[2]<<" ";
        for(int i=n;i>=1;i--)
        {
            if(v[i].size()==0)
               {
                   if(dist[i]!=INT_MIN && dist[i]>mincost)
                    {
                        mincost=dist[i];
                    //    cout<<i<<endl;
                    }
         //           cout<<dist[i]<<" "<<i;
               }
        }
  //      dist[j]=INT_MIN;
   //            cout<<mincost<<endl;
     }
        for(int i=0;i<=n;i++)
            v[i].clear();
            cout<<mincost;
    }
    //cout << "Hello world!" << endl;
    return 0;
}

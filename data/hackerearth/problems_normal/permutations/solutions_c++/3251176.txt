#include <bits/stdc++.h>
using namespace std;
map<int, vector<int > > v, num;
int a[103], pos[103];
bool visit[103];
vector<set<int > > adj;
void dfs(int p, int c);

int main(){
int n;
cin>>n;
adj.resize(n+1);
for(int i=1; i<=n; i++){
	cin>>a[i];
}
string s;
for(int i=1; i<=n; i++){
	cin>>s;
	for(int j=1; j<=n; j++){
		if(s[j-1]=='Y'){
			adj[i].insert(j);
			adj[j].insert(i);
		}
	}
}


fill(visit, visit+n+1, false);
int n1=0;
for(int i=1; i<=n; i++){
	if(visit[i]==false && adj[i].size()>0){
		n1++;
		pos[i]=n1;
		v[n1].push_back(a[i]);
		visit[i]=true;
		dfs(i, n1);
	}
}

for(int i=1; i<=n1; i++){
	sort(v[i].begin(), v[i].end());
}
int mark[n1+2];
fill(mark, mark+n1+1, 0);
for(int i=1; i<=n; i++){
	if(visit[i]){
        a[i]=v[pos[i]][mark[pos[i]]];
        mark[pos[i]]++;
	}
}
for(int i=1; i<=n; i++){
	cout<<a[i]<<" ";
}
cout<<endl;
}

void dfs(int p, int c){
	for(set<int >::iterator j=adj[p].begin(); j!=adj[p].end(); j++){
		if(!visit[*j]){
			visit[*j]=true;
            v[c].push_back(a[*j]);
            pos[*j]=c;
            dfs(*j, c);
		}
	}
}

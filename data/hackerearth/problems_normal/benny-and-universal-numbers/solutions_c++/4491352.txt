#include <cstdio>

#include <vector>
#include <algorithm>

using namespace std;

typedef long long llong;

int two_digit_primes[] = {
  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,
  53, 59, 61, 67, 71, 73, 79, 83, 89, 97
};

bool is_prime[100];

typedef long long llong;

int R[16];
//const int MOD = 360360;
vector<llong> univ;
void go(int n, llong num, bool has_two_digit_prime) {
   if (has_two_digit_prime)
      univ.push_back(num);
   for (int d = n == 0 ? 1 : 0; d < 10; ++d) {
      if (((num*10 + d) % (n+1)) != R[n]) continue;
      go(n+1, num*10 + d,
         has_two_digit_prime || ( n >= 1 && is_prime[(num%10)*10 + d] ));
   }
}

int main() {
   for (int i = 0; i < 15; ++i)
      scanf("%d", R+i);

   for (int p : two_digit_primes)
      is_prime[p] = 1;
      
   go(0, 0, false);
   sort(univ.begin(), univ.end());

   /*
   fprintf(stderr, "%d\n", (int) univ.size());
   for (llong x : univ) {
      if (x >= 100) break;
      fprintf(stderr, "%lld ", x);
   }
   fprintf(stderr, "\n");
   */

   int Q;
   scanf("%d", &Q);
   for (int q = 0; q < Q; ++q) {
      llong A, B;
      scanf("%lld %lld", &A, &B);
      int res = upper_bound(univ.begin(), univ.end(), B) -
                lower_bound(univ.begin(), univ.end(), A);
      printf("%d\n", res);
   }
   
   return 0;
}

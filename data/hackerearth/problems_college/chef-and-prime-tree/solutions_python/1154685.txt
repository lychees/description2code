def is_prime(n):
    if n == 2 or n == 3:
        return True
    elif n < 2:
        return False
    elif n%2 == 0:
        return False

    limit = int(n**0.5) + 1 
    for i in xrange(3, limit, 2):
        if n%i == 0:
            return False
            
    return True

def main():
	for _ in xrange(input()):
		x, y = map(int, raw_input().split())
		if x == y:
			if is_prime(x):
				print -x
			else:
				print x
			continue
		# For common ancestor
		root_x = []
		root_y = []
		i = x
		j = y
		
		while i:
			root_x.append(i)
			i /= 2
		while j:
			root_y.append(j)
			j /= 2	 	
		
		ca = max(set(root_x) & set(root_y))
		path = root_x[:root_x.index(ca)] + [ca] + root_y[:root_y.index(ca)]
		answer = 0	
			
		for node in path:
			if is_prime(node):
				answer -= node
			else:
				answer += node
		print answer
		
	return 0	

if __name__ == "__main__":
    main()	

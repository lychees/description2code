#include <bits/stdc++.h>
using namespace std;

set<set<int> > subsets(vector<long long> A){
	set<set<int> > ans;
	set<int> dummy;
	set<set<int> > buf;
	ans.insert(dummy);
	for(int i = 0; i < A.size(); i++){
		set<int> temp;
		int t = ans.size();
		buf = ans;
		for(set<set<int> >::iterator it = ans.begin(); it != ans.end(); it++){
			for(int k = 0; k < A.size(); k++){
				temp = (*it);
				temp.insert(A[k]);
				buf.insert(temp);
			}
		}
		ans = buf;
	}
	return ans;
}

int main()
{
    ios::sync_with_stdio(false);
    int k, t;
    cin>>k>>t;
    vector<long long> A;
    for(int i = 0; i < k; i++){
    	long long temp;
    	cin>>temp;
    	A.push_back(temp);
    }
    set<set<int> > r = subsets(A);
    for(int test = 0; test < t; test++){
    	long long a, b;
    	cin>>a>>b;
    	long long sum = 0;
    	for(set<set<int> >::iterator it = r.begin(); it != r.end(); it++){
    		set<int> temp = *it;
    		if(temp.size() == 0){
    			continue;
    		}
    		long long mul = 1;
    		for(set<int>::iterator lol = temp.begin(); lol != temp.end(); lol++){
    			mul *= (*lol);
    		}
    		//cout<<"mul is: "<<mul<<"\n";
    		/*
    		if(a == b && a % mul == 0){
    			sum = 1;
    			break;
    		}
    		*/
    		long long a1 = (a - 1) / mul;
			long long a2 = b / mul;
    		if(temp.size() % 2 == 0){
    			sum -= (a2 - a1);
    		}
    		else{
    			sum += (a2 - a1);
    		}
    	}
    	cout<<sum<<"\n";
    	
    }
    return 0;
}

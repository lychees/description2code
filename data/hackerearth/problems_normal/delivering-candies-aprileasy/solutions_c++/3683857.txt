/*#include <bits/stdc++.h>
using namespace std;
int n,m,x,a,c,mod;
int getnext(){
    x = ((x * a)%mod + c)%mod;
    return x;
}
struct E{
    int a,b,c;
}arr[10000009];
int p[10000009];
int get(int node){
    if(p[node]==node)return node;
    else return p[node] = get(p[node]);
}
void mrg(int node1,int node2){
    int p1 = get(node1) , p2 = get(node2);
    p1 = p2;
}
bool check(int node1,int node2){
    int p1 = get(node1) , p2 = get(node2);
    return p1 == p2;
}
bool operator<(E y,E z){
    return y.c < z.c;
}
int main(){
    /*cin>>n>>m>>x>>a>>c>>mod;
    for(int i=0;i<n;i++){
        p[i] = i;
    }
    for(int i=0;i<m;i++){
        arr[i].a = getnext()%n;
        arr[i].b = getnext()%n;
        arr[i].c = getnext();
    }
    sort(arr,arr+m);
    long long ans = 0;
    for(int i=0;i<m;i++){
        if(!check(arr[i].a,arr[i].b)){
            mrg(arr[i].a,arr[i].b);
            ans+=arr[i].c;
        }
    }
    cout<<ans<<endl;
    cin>>n>>x>>a>>x>>mod;
    for(int i=0;i<n;i++){
        cout<<getnext()<<" ";
    }
}*/
#include <bits/stdc++.h>
using namespace std;
int n,m,s;
vector< pair<int,long long> >v[100009];
set< pair<long long,int> >se;
long long dis[100009];
long long k[100009];
bool done[100009];
int main(){
    cin>>n>>m>>s;
    for(int i=0;i<n;i++)dis[i]=1000000000009;
    for(int i=0;i<n;i++)cin>>k[i];
    for(int i=0;i<m;i++){
        int a,b,c;
        cin>>a>>b>>c;a--;b--;
        v[a].push_back(make_pair(b,c));
        v[b].push_back(make_pair(a,c));
    }
    s--;
    int o = -1;
    se.insert(make_pair(0,s));
    dis[s] = 0;
    while(!se.empty()){
        s = se.begin()->second;
        done[s] = 1;
        se.erase(se.begin());
        if(o==s)break;
        o = s;
        for(int i=0;i<v[s].size();i++){
            int u = v[s][i].first;
            if(done[u])continue;
            if(se.find(make_pair(dis[u],u))!=se.end())
                se.erase(se.find(make_pair(dis[u],u)));
            dis[u] = min(dis[u],dis[s]+v[s][i].second);
            se.insert(make_pair(dis[u],u));
        }
    }
    long long ans = 0;
    long long num = 0;
    for(int i=0;i<n;i++){
        if(dis[i]==1000000000009)continue;
        ans += dis[i]*k[i];
        num += k[i];
    }
    for(int i=0;i<n;i++){
        if(dis[i]==1000000000009)cout<<0<<" ";
        else cout<< (ans-(dis[i]*k[i])) + (dis[i]*(num-k[i])) <<" ";
    }
}

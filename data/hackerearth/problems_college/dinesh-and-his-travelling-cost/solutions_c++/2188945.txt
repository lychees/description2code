#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define inrep int t;cin>>t; while(t--)
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
vector<pii> edges[501];
vector<int> nodes ( 501 );
vi cost ( 501 );
vector<bool> found ( 501 );
int U;

int main() {
    ios_base::sync_with_stdio ( false );
    int N;
    cin>>N;
    int A,B,W;

    rep ( i,N ) {
        cin>>A>>B>>W;
        edges[A].push_back ( mp ( B,W ) );
        edges[B].push_back ( mp ( A,W ) );
    }
    cin>>U;
    set<pii> toVisit;
    toVisit.insert ( mp ( 0,U ) );
    while ( toVisit.size() >0 ) {
        pii el=*toVisit.begin();
        int node=el.second;
        toVisit.erase(toVisit.begin());
        if ( found[node] )
            continue;
        found[node]=true;
        cost[node]=el.first;
        for ( pii way: edges[node] ) {
            if ( !found[way.first] )
                toVisit.insert ( mp ( el.first+way.second,way.first ) );
        }

    }
    inrep {
        int t;
        cin>>t;
        if ( found[t] )
            cout<<cost[t]<<endl;
        else
            cout<<"NO PATH"<<endl;


    }
}
/**
 * @author chang
 * @date 18-10-2015
*/

#include <cstdio>
#include <iostream>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cstring>
#include <bitset>
#include <deque>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <vector>
#include <algorithm>
#include <string>
#include <climits>
#include <cmath>

#define  each(v,c)  for(typeof((c).begin()) v = (c).begin(); v != (c).end(); ++v)
#define  sync(x)    ios_base::sync_with_stdio(x)
#define  sz(a)      ((int)(a.size()))
#define  all(a)     (a).begin(), (a).end()
#define  pb         push_back
#define  mp         make_pair
#define  fi         first
#define  se         second
using namespace std;

#define debug(a,n)    cerr << "["; for(int i = 0; i < n; ++i) cerr << a[i] << " ";cerr << "\b]\n";
#define dbg(args...)  {debug1,args; cerr<<endl;}
#define pause()       cin.get();cin.get();

struct debugger {
    template<typename T> debugger& operator , (const T& v) {
        cerr<<v<<" "; return *this;
    }
} debug1;

template <typename T1, typename T2>
inline ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    return os << "(" << p.first << ", " << p.second << ")";
}

template<typename T>
inline ostream &operator << (ostream & os,const vector<T>& v) {
    bool first = true; os << "[";
    for (typename vector<T>::const_iterator ii = v.begin(); ii != v.end(); ++ii) {
        if(!first) os << ", ";
        os << *ii; first = false;
    }
    return os << "]";
}

typedef long long LL;
typedef pair<int,int> pii;
typedef pair<int,pii> piii;
typedef vector<int> vi;
const int inf = 0x7fffffff;

const int ND = 112345;

set<int> ss[27][2];
bool visited[ND];
string msg;

int to(char &ch){
    return (ch-'a');
}

int exchange(int x,int y){
    int ans = 2 - visited[x] - visited[y];
    ss[to(msg[y])][0].erase(y);
    ss[to(msg[x])][0].insert(y);
    if (visited[y]) {
        ss[to(msg[y])][1].erase(y);
    }
    
    ss[to(msg[x])][1].insert(y);
    swap(msg[x],msg[y]);
    visited[x] = visited[y] = 1;
    return ans;
}

void solve(){
    int n,no;
    cin >> n >> no >> msg;

    for(int i = 0; i < n; ++i)
        ss[to(msg[i])][0].insert(i);

    for(int i = 0; i < n; ++i){
        ss[to(msg[i])][0].erase(i);
        if (visited[i]) {
            ss[to(msg[i])][1].erase(i);
        }

        for(int k = 0; k < to(msg[i]); ++k){
            if (no == 1-visited[i]) {
                if (!ss[k][1].empty()){
                    no -= exchange(i,*(ss[k][1].rbegin()));
                    break;
                }
            }
            else if (no > 1-visited[i]){
            	if (!ss[k][1].empty()){
                    no -= exchange(i,*(ss[k][1].rbegin()));
                    break;
                }
                if (!ss[k][0].empty()){
                    no -= exchange(i,*(ss[k][0].rbegin()));
                    break;
                }
            }
        }
        //dbg("at",i,msg,no);
    }

    cout << msg << endl;
}

int main()
{
    solve();
    return 0;
}

#include <algorithm>
#include <assert.h>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits.h>
#include <list>
#include <map>
#include <math.h>
#include <memory.h>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string.h>
#include <string>
#include <utility>
#include <vector>
using namespace std;
const int md = 1000000007;
int n, m, k, lg[1 << 20], v[20], f[20][20], a[20][20];
int dfs(int x, int y) {
  if (y == m + 1) {
    x++;
    y = 1;
  }
  if (x == n + 1)
    return 1;
  int t = -1, ans = 0, ff = f[x - 1][y] | f[x][y - 1];
  for (int i = (~ff) & ((1 << k) - 1); i; i -= (i & (-i))) {
    int j = lg[i & (-i)] + 1;
    if (!a[x][y] || a[x][y] == j) {
      f[x][y] = ff | (1 << (j - 1));
      v[j]++;
      if (v[j] == 1) {
        if (t == -1)
          t = dfs(x, y + 1);
        ans += t;
      } else if (v[j])
        ans += dfs(x, y + 1);
      if (ans >= md)
        ans -= md;
      v[j]--;
    }
  }
  return ans;
}
int main() {
  scanf("%d%d%d", &n, &m, &k);
  if (n + m - 1 > k) {
    printf("0\n");
    return 0;
  }
  for (int i = 1; i <= k; i++)
    lg[1 << i] = i;
  for (int i = 1; i <= n; i++)
    for (int j = 1; j <= m; j++) {
      scanf("%d", &a[i][j]);
      v[a[i][j]]++;
    }
  printf("%d\n", dfs(1, 1));
  return 0;
}

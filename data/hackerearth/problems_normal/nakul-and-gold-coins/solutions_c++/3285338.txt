#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
struct Sieve {
    vi primes;
    Sieve ( int MAXN ) {
        vector<bool> s ( MAXN );
        s[0]=s[1]=1;
        rep ( i,MAXN ) {
            if ( !s[i] ) {
                primes.push_back ( i );
                if ( ( ll ) i*i<MAXN )
                    for ( int j=i*i; j<MAXN; j+=i )
                        s[j]=1;
            }

        }
    }

};
const int MAXP=1000001;
const int MAXN=100000000;
int main() {
    ios_base::sync_with_stdio ( false );
    Sieve s ( MAXP );
    vi numbers;
    rep ( i,s.primes.size() ) {
        reu ( j,i+1,s.primes.size() ) {
            ll res=(ll)s.primes[i]*s.primes[j];
            if ( res>MAXN ) break;
            numbers.push_back ( res );

        }

    }
    sort ( all ( numbers ) );
    inrep {
        int l,r;
        cin>>l>>r;
        int b=lower_bound ( all ( numbers ),l )-numbers.begin();
        int e=upper_bound ( all ( numbers ),r )-numbers.begin();
        cout<<e-b<<endl;
    }

}

/*
A string is called a palindrome if it may be read the same way in either direction. For example, ?12321? is a palindrome, but ?12341? is not. A palindrome string can itself compose of one or more palindrome sub-strings. Now, your task is to find out the length (denoted by L) of the longest palindrome sub-string, maximum-length contiguous substring of a given string that is also a palindrome, and print "YES" if it is lucky otherwise print "NO". A palindrome sub-string is called lucky iff it's length is a prime number.
For example : Consider a string s =?122321?. The longest palindrome sub-strings in s is of length 3. Hence, you need to output "YES" (quotes only for clarity).

Input :

The first line of input contains an integer T, the number of test cases. Then T test cases follow. Each test case consists of a line containing the string s.
Output :

Output on a new line the count as asked to determine in the problem statement.
Constraints :

1 <= T <= 100
1 <= L <=1000 , L - length of the string s.
*/

//Practice Problems / Lucky Palindrome
#include <cstdlib>
#include <stdio.h>
#include <cstring>
#include <vector>
#include <cmath>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <string> // this should be already included in <sstream>
#define FOR(i,n) for(i=0;i<n;i++)
#define FORI(i,a,n) for(i=a;i<n;i++)
#define FORC(it,C) for(it=C.begin();it!=C.end();it++)
#define sd(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define print(x) printf("%d\n",x)
#define MAX 2000004
#define MOD 1000000007
#define ll  long long int
#define N 1001
using namespace std;

int lps(char str[])
{
    int i,len=strlen(str);
    int high,low,maxlen=0;

    for(i=1;i<len;i++)
    {
        // Find the longest even length palindrome with center points
        // as i-1 and i.
        low=i-1;
        high=i;
        while(low>=0 && high<len && str[low]==str[high])
        {
            //cout<<low<<" "<<high<<endl;
            if(high-low+1>maxlen)
            maxlen=high-low+1;
            low--; high++;
        }
        // Find the longest odd length palindrome with center
        // point as i
        low=i-1; high=i+1;
        while(low>=0 && high<len && str[low]==str[high])
        {
            //cout<<low<<" "<<high<<endl;
            if(high-low+1>maxlen)
            maxlen=high-low+1;
            low--; high++;
        }
    }
    return maxlen;
}

bool isLuckyPalindrome(char str[])
{
    int i,j;
    vector<int> v(N);
    FOR(i,N)
    v[i]=0;
    v[0]=1;
    v[1]=1;
    for(i=2;i*i<=N;i++)
    for(j=2;j<=(N/i);j++)
    v[i*j]=1;

    int len=lps(str);
    return (!v[len]);
}

int main()
{
    int t;
    sd(t);
    char str[N];
    while(t--)
    {
        scanf("%s",str);
        if(isLuckyPalindrome(str))
        printf("YES\n");
        else
        printf("NO\n");
    }
    return 0;
}

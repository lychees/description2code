/*********************************ENTER THE DRAGON**********************************/

#include <cstdio>
#include <iostream>
#include <cmath>
#include <string>
#include <list>
#include <vector>
#include <algorithm>
#include <functional>
#include <utility>
#include <set>
#include <map>
#include <complex>
#include <queue>
#include <stack>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string.h>
#include <cassert>
#include <climits>
using namespace std;

/************************************************************************************/

const int maxn = 100100;
vector<int> adj[maxn];
int S[maxn], E[maxn], L[maxn];
int TIME = 0;

void dfs(int cur, int par) {
	 L[cur] = L[par] + 1;
	 S[cur] = TIME++;
	 for (int v : adj[cur]) {
	 	  if (v != par) {
	 	  	  dfs(v, cur);
	 	  }
	 }
	 E[cur] = TIME++;
}

int main()
{
   ios::sync_with_stdio(false);
   int n;
   cin >> n;
   for (int i = 1; i < n; i++) {
   	    int a, b;
   	    cin >> a >> b;
   	    adj[a].push_back(b);
   	    adj[b].push_back(a);
   }
   dfs(1, 0);
   int Q;
   cin >> Q;
   while (Q--) {
   	      int type, to, from;
   	      cin >> type >> to >> from;

   	      if (type == 0) {
   	      	  if (L[to] < L[from] && S[to] < S[from] && E[to] > E[from]) {
   	      	  	  cout << "YES " << (L[from] - L[to] + 1) << endl;
   	      	  } else {
   	      	  	  cout << "NO" << endl;
   	      	  }
   	      } else {
   	      	  if (L[to] > L[from] && S[to] > S[from] && E[to] < E[from]) {
   	      	  	  cout << "YES " << (L[to] - L[from] + 1) << endl;
   	      	  } else {
   	      	  	  cout << "NO" << endl;
   	      	  }
   	      }
   }
   return 0;
}



/*triskelion*/

#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     (int)c.size()
#define clr(c)    c.clear()
#define pb        push_back
#define mp        make_pair
#define cin(x)    scanf("%d",&x)
#define MOD		1000000007
#define EPS		1E-10
const int maxn = 200000;
int H[maxn];
LL L[maxn];
LL segtree[4 * maxn];
void update(int idx , LL val , int l , int r , int pos)
{
	if(l > idx or r < idx) return ;
	if(l == r)
	{
		if(val > segtree[pos])
			segtree[pos] = val;
		return;
	}
	int mid = (l + r) >> 1;
	update(idx , val , l , mid , 2*pos);
	update(idx , val , mid+1, r , 2*pos + 1);
	segtree[pos] = max(segtree[2*pos] , segtree[2*pos + 1]);
}
LL query(int lQ, int rQ, int l, int r,int pos)
{
	if(l > rQ or r < lQ or l > r) return 0;
	else if(l >= lQ && r <= rQ) return segtree[pos];
	int mid = (l + r) >> 1;
	return max(query(lQ,rQ,l,mid,2*pos) , query(lQ,rQ,mid+1,r,2*pos+1));
}
int main()
{
	int n;
	cin >> n;
	vector< pair<LL,int> > arr(n);
	for(int i = 1; i <= n; i++)
	{
		cin >> H[i] >> L[i];
		arr[i-1].first = L[i];
		arr[i-1].second = i;
	}
	sort(all(arr));
	LL ans = 0;
	for(int i = 0; i < sz(arr); i++)
	{
		int idx = arr[i].second;
		LL val = query(1,idx - 1,1,n,1);
		val += H[idx];
		val = max(val , 0LL);
		ans = max(ans , val);
		update(idx , val , 1 , n , 1);
	}
	cout << ans << "\n";
	return 0;
}

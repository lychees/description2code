#include "stdio.h"
#include "stdlib.h"
#include "limits.h"
#include "math.h"
#include "assert.h"
#include "string.h"
#include "stdint.h"
#include "iostream"
#include "stack"
#include "queue"
#include "vector"
#include "string"
#include "set"
#include "map"
#include "algorithm"
#define min(a,b) (a)<(b)?(a):(b)
#define max(a,b) (a)>(b)?(a):(b)
#define abso(a) (a)>(0)?(a):(-a)
#define VI vector<int>
#define pb push_back
#define all(c) c.begin(), c.end()
#define pii pair<int, int>
#define mp make_pair
#define lli long long int
#define CLR(p) memset(p, 0, sizeof(p))
#define SET(p) memset(p, -1, sizeof(p))
#define _CRT_SECURE_NO_WARNINGS 1
#define MOD 1000000007
using namespace std;


inline void inp(int *n)
{
    *n = 0;
    int ch = getchar_unlocked();
    int sign = 1;
    while(ch < '0' || ch > '9') 
    {
        if (ch == '-') 
            sign = -1;
        ch = getchar_unlocked();
    }
    while(ch >= '0' && ch <= '9')
        (*n) = ((*n)<<3) + ((*n)<<1) + ch - '0', ch = getchar_unlocked();
    *n = (*n)*sign;
}

inline void out(register int N)
{
    register int rev=N, count = 0;
    if (N == 0)
    {
        putchar_unlocked('0');
        putchar_unlocked('\n');
        return ;
    }
    while ((rev % 10) == 0)
    {
        count++;
        rev /= 10;
    }
    rev = 0;

    while (N != 0)
    {
        rev = (rev<<3) + (rev<<1) + N % 10;
        N /= 10;
    }
    while (rev != 0)
    {
        putchar_unlocked(rev%10 + '0');
        rev /= 10;
    }
    while (count--)
        putchar_unlocked('0');
    putchar_unlocked('\n');
    
    return ;
}

lli x[2][2];
lli mat_expo(lli b)
{
    x[0][0] = 1;
    x[0][1] = 0;
    x[1][0] = 0;
    x[1][1] = 1;
    lli y[2][2] = {3,-1,1,0}, z[2][2];
//    printf("initiallyy\n");
//    printf("x is \n%lld %lld\n%lld %lld\n",x[0][0],x[0][1],x[1][0],x[1][1] );
//    printf("y is \n%lld %lld\n%lld %lld\n",y[0][0],y[0][1],y[1][0],y[1][1] );

//    printf("b is %lld\n",b );
//    printf("doing loop\n");
    while(b>0)
    {
        if(b%2==1)
        {
//            printf("b is %lld, doing x*y\n",b);
            z[0][0] = ((x[0][0]*y[0][0])%MOD + (x[0][1]*y[1][0])%MOD + MOD)%MOD;
            z[0][1] = ((x[0][0]*y[0][1])%MOD + (x[0][1]*y[1][1])%MOD + MOD)%MOD;
            z[1][0] = ((x[1][0]*y[0][0])%MOD + (x[1][1]*y[1][0])%MOD + MOD)%MOD;
            z[1][1] = ((x[1][0]*y[0][1])%MOD + (x[1][1]*y[1][1])%MOD + MOD)%MOD;

            x[0][0] = z[0][0];
            x[0][1] = z[0][1];
            x[1][0] = z[1][0];
            x[1][1] = z[1][1];
//            printf("x is \n%lld %lld\n%lld %lld\n",x[0][0],x[0][1],x[1][0],x[1][1] );
        }
//        printf("doing y sqr\n");
        z[0][0] = ((y[0][0]*y[0][0])%MOD + (y[0][1]*y[1][0])%MOD + MOD)%MOD;
        z[0][1] = ((y[0][0]*y[0][1])%MOD + (y[0][1]*y[1][1])%MOD + MOD)%MOD;
        z[1][0] = ((y[1][0]*y[0][0])%MOD + (y[1][1]*y[1][0])%MOD + MOD)%MOD;
        z[1][1] = ((y[1][0]*y[0][1])%MOD + (y[1][1]*y[1][1])%MOD + MOD)%MOD;        
        
        y[0][0] = z[0][0];
        y[0][1] = z[0][1];
        y[1][0] = z[1][0];
        y[1][1] = z[1][1];
  //      printf("y is \n%lld %lld\n%lld %lld\n",y[0][0],y[0][1],y[1][0],y[1][1] );
        b /= 2;
    }
    return x[0][0];
}


int main()
{
    int t;
    inp(&t);
    lli n;
    while(t--)
    {
        scanf("%lld",&n);
        printf("%lld\n",mat_expo(n-1) );
    }
    return 0;
}    
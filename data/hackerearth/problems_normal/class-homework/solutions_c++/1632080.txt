#include <iostream>
#include <vector>
#include <cstdio>
#include <sstream>
#include <map>
#include <string>
#include <algorithm>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

int main(){
	int n;
	scanf("%d", &n);
	while(n--){
		char c[30];
		scanf("%s", c);
		string s(c);

		auto get = [&](const vector<int>& v){
			long long ret = 0;
			for(int i=0; i<v.size()-1; ++i){
				long long tmp;
				sscanf(s.substr(v[i], v[i+1] - v[i]).c_str(), "%lld", &tmp);
				if(tmp > 1000000000000LL) return -1LL;
				ret += tmp;
			}
			//if(ret <= 1000000000000LL) return ret;
			return ret;
		};

		long long ans = -1;
		int len = s.size();
		for(int a=1; a<len; ++a){
			if(a > 1 && s[0] == '0') continue;
			long long ret_a = 0;
			sscanf(s.substr(0, a - 0).c_str(), "%lld", &ret_a);
			if(ret_a > 1000000000000LL) continue;

			for(int b=a+1; b<len; ++b){
				if(b-a > 1 && s[a] == '0') continue;

				long long ret_b = 0;
				sscanf(s.substr(a, b - a).c_str(), "%lld", &ret_b);
				if(ret_b > 1000000000000LL) continue;

				for(int c=b+1; c<len; ++c){
					if(c-b > 1 && s[b] == '0') continue;
					long long ret_c = 0;
					sscanf(s.substr(b, c - b).c_str(), "%lld", &ret_c);
					if(ret_c > 1000000000000LL) continue;
					
					if(len-c > 1 && s[c] == '0') continue;

					long long ret_d = 0;
					sscanf(s.substr(c, len - c).c_str(), "%lld", &ret_d);
					if(ret_d > 1000000000000LL) continue;
					
					ans = max(ans, ret_a + ret_b + ret_c + ret_d);
				}
			}
		}
		if(ans < 0){
			printf("unlucky\n");
		}else{
			printf("%lld\n", ans);
		}
	}
	return 0;
}
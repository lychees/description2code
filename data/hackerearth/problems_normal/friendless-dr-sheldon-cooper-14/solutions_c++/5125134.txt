/*
#########################################
#        Syed Omar Ali                  #
#        Aligarh Muslim University      #
#        III Year                       #
#########################################
*/
#include<bits/stdc++.h>

using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;

#define rep(n) for(ll i=0; i<(n); i++)
#define wl(n) while(n--)
#define mem(x,val) memset((x),(val),sizeof(x));
#define vl vector<ll>
#define vb vector<bool>
#define vvl vector<vl >
#define vvb vector<vb >
#define all(x) (x.begin(),x.end())
#define sz(x) ((ll)x.size())
#define pb push_back
#define em(x) (!x.empty())
#define MAX INT_MAX*INT_MAX
#define MIN INT_MIN*INT_MIN
#define MOD 1000000007
#define pr pair<ll,ll>
#define mp make_pair
#define F first
#define S second
#define sl(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
#define t() ll tst,test=1; sl(tst); while(tst--)

template<class T1> void deb(T1 e1) {
    cout << e1 << endl;
}

template<class T1,class T2> void deb(T1 e1, T2 e2) {
    cout << e1 << " " << e2 << endl;
}
struct Edge{
    ll u,v,w;
};

bool comparator(Edge e1,Edge e2){
    if(e1.w<e2.w)
        return true;
    return false;
}

vector<Edge> edges;
vector<ll> cut,sze;
void makeSet(ll N);
ll UNION(ll root1,ll root2);
ll FIND(ll i);
int main(){
    t(){
        edges.clear();
        cut.clear();
        sze.clear();
        ll N,E;
        sl(N);sl(E);
        makeSet(N);
        ll u,v,w;
        wl(E){
            sl(u);sl(v);
            w=1;
            Edge e;
            e.u = u;
            e.v = v;
            e.w = w;
            edges.pb(e);
        }
        sort(edges.begin(),edges.end(),&comparator);
        ll sum=0;
        for(ll i=0;i<edges.size();i++){
            Edge e;
            e.u = edges[i].u-1;
            e.v = edges[i].v-1;
            e.w = edges[i].w;
            ll rootu = FIND(e.u);
            ll rootv = FIND(e.v);
            if(rootu!=rootv){
                sum += e.w;
                UNION(rootu,rootv);
            }
        }
        cout << sum << endl;
    }
    return 0;
}
void makeSet(ll N){
    for(ll i=0;i<N;i++){
        cut.pb(i);
        sze.pb(1);
    }
}
ll FIND(ll i){
    while(cut[i]!=i){
        cut[i] = cut[cut[i]];
        i=cut[i];
    }
    return i;
}
ll UNION(ll root1,ll root2){
    if(sze[root1]<sze[root2]){
        cut[root1] = root2;
        sze[root2] += sze[root1];
    }else{
        cut[root2] = root1;
        sze[root1] += sze[root2];
    }
}

/*input
4
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <functional>
#include <math.h>
#include <string.h>
#include <utility>
#include <algorithm>
#include <iomanip>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <stdlib.h>
#include <list>
#include <assert.h>
#include <time.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define ll long long
#define tick() {cout << "HERE" << endl; }
#define N 1005
#define lim 251
typedef vector<vector<long long> > matrix;
const ll mod = (1LL << 32);

template<typename t> ostream& operator, (ostream& os, t x) {
	return os << ' ' << x;
}
template<class T>
void maximize(T &x, T y) {
	if (x < y) x = y;
}
template<class T>
void minimize(T &x, T y) {
	if (x > y) x = y;
}
template<class T>
void true_mod(T &x) {
	x %= mod;
	while (x < 0) x += mod;
}
matrix operator*(matrix a, matrix b)
{
	matrix c(a.size(), vector<long long>(b[0].size()));
	for (int i = 0; i < a.size(); i++)
	{
		for (int j = 0; j < b[0].size(); j++)
		{
			for (int k = 0; k < a[0].size(); k++)
			{
				c[i][j] += a[i][k] * b[k][j];
				c[i][j] %= mod;
			}
		}
	}
	return c;
}

matrix binPow(matrix a, long long q)
{
	if (q == 1) return a;
	if (!(q % 2)) return binPow(a * a, q / 2);
	else return a * binPow(a * a, q / 2);
}

ostream& operator<<(ostream& os, matrix& x)
{
	for (int i = 0; i < x.size(); i++)
	{
		for (int j = 0; j < x[0].size(); j++)
		{
			os << x[i][j] << sp;
		}
		os << endl;
	}
	return os;
}

ll n;
matrix a(1, vector<ll>(252, 0));
matrix b(252, vector<ll>(252, 0));
int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n;
	if (n == 1) {
		cout << 9;
		return 0;
	}
	for (int i = 1; i <= 9; i++) {
		a[0][i] = 1;
	}
	for (int val = 0; val <= 251; val++) {
		for (int dig = 1; dig <= 9; dig++) {
			if ((val * 10 + dig) % dig == 0) {
				b[val][(val * 10 + dig) % 252]++;
			}
		}
	}
	n -= 1;
	a = a * binPow(b, n);
	ll ans = 0;
	for (int i = 0; i <= 251; i++) {
		ans += a[0][i];
		true_mod(ans);
	}
	cout << ans << endl;
}
#include<stdio.h>
#include<iostream>
#include<vector>
#include<cstdlib>
#include<cstring>
#include<math.h>
#include<map>
#include<algorithm>
#include<queue>
#include<string>
#include<climits>
#include<bitset>
#include<set>
#include<functional>

using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;

#ifdef _WIN32
    #define gx getchar
    #define px putchar
    #define ps putchar(' ')
    #define pn putchar('\n')
    #define DEBUG 1
#else
    #define gx getchar_unlocked
    #define px putchar_unlocked
    #define ps putchar_unlocked(' ')
    #define pn putchar_unlocked('\n')
    #define DEBUG 0
#endif

//input
void scan(int &n)
{
    int sign = 1;
    n = 0;
    char c = gx();
    while( c < '0' || c > '9' )
    {
        if( c == '-' ) sign = -1;
        c = gx();
    }
    while( c >= '0' && c <= '9' ) n = (n<<3) + (n<<1) + c - '0', c = gx();  n = n * sign;
}
void lscan(ll &n)
{
    int sign = 1;
    n = 0;
    char c = gx();
    while( c < '0' || c > '9' )
    {
        if( c == '-' )
        sign = -1;
        c = gx();
    }
    while( c >= '0' && c <= '9' ) n = (n<<3) + (n<<1) + c - '0', c = gx();  n = n * (ll)(sign);
}
int sscan(char a[])
{
    char c = gx();
    while(c==' ' || c=='\n') c=gx();
    int i=0;
    while(c!='\n')a[i++] = c,c=gx();
    a[i]=0;
    return i;
}
int wscan(char a[])
{
    char c = gx();
    while(c==' ' || c=='\n') c=gx();
    int i=0;
    while(c!='\n' && c!=' ')a[i++] = c,c=gx();
    a[i]=0;
    return i;
}

//output
void print(int n)
{
    if(n<0)
    {
        n=-n;
        px('-');
    }
    int i=10;
    char o[10];
    do{o[--i] = (n%10) + '0'; n/=10;}while(n);
    do{px(o[i]);}while(++i<10);
}
void lprint(ll n)
{
    if(n<0LL)
    {
        n=-n;
        px('-');
    }
    int i=21;
    char o[21];
    do{o[--i] = (n%10LL) + '0'; n/=10LL;}while(n);
    do{px(o[i]);}while(++i<21);
}
void sprint(const char a[])
{
    const char *p=a;
    while(*p)px(*p++);
}

int main()
{
    ll a[20];
    ll t,i,j,ans,n,k,ct;
    ll d[20];
    ll perm[20];
    lscan(t);
    while(t--)
    {
        lscan(n);
        for(i=0;i<n;i++) lscan(a[i]);
        sort(a,a+n);
        ans = 0;
        
        k = 0;
        j = 0;
        for(i=n-2;i>=0;i-=2) d[i] = a[k++];
        for(i=0;k<n;k++) perm[i++] = a[k];
        ct = i;
        sort(perm,perm+ct);
        
        do
        {
            k = ct-1;
            for(i=n-1;i>=0;i-=2) d[i] = perm[k--];
            k = 0;
            for(i=1;i<n;i++)
            {
                j = d[i] - d[i-1];
                if(j < 0)  j *= -1;
                k += (j*(i+1));
            }
            ans = max(ans,k);
        }while(next_permutation(perm,perm+ct));
        
        k = n-1;
        j = 0;
        for(i=n-2;i>=0;i-=2) d[i] = a[k--];
        for(i=0;k>=0;k--) perm[i++] = a[k];
        ct = i;
        sort(perm,perm+ct);
        
        do
        {
            k = ct-1;
            for(i=n-1;i>=0;i-=2) d[i] = perm[k--];
            k = 0;
            for(i=1;i<n;i++)
            {
                j = d[i] - d[i-1];
                if(j < 0)  j *= -1;
                k += (j*(i+1));
            }
            ans = max(ans,k);
        }while(next_permutation(perm,perm+ct));
        
        
        lprint(ans);
        pn;
    }
    return 0;
}


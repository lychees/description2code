#include<bits/stdc++.h>
using namespace std;
const int maxi=1e5+5;
int disc[maxi];
int low[maxi];
bool vis[maxi];
vector<int> adj[maxi];
int sz[maxi];
int CC[maxi];
int Number[maxi];
int tme=0,ans=0;
int p,n;
int cc=0;
void DDFFSS(int s)
{
	vis[s]=true;
	CC[s]=cc;
	Number[cc]++;
	for(int i=0;i<(int)adj[s].size();i++)
	{
		if(vis[adj[s][i]]==false)
		DDFFSS(adj[s][i]);
	}
}
void DFS(int s,int par=-1)
{
	sz[s]=1;
	tme++;
	low[s]=disc[s]=tme;
	vis[s]=true;
	
	for(int i=0;i<(int)adj[s].size();i++)
	{
		int to=adj[s][i];
		if(to==par)continue;
		if(!vis[to])
		{
			DFS(to,s);
			low[s]=min(low[s],low[to]);
			sz[s]+=sz[to];
			if(low[to]>disc[s] && abs(sz[to]-(Number[CC[s]]-sz[to]))<p)ans++;
		}
		else
		low[s]=min(low[s],disc[to]);
	}
}
int main()
{
	int m;
	cin>>n>>m>>p;
	for(int i=1;i<=m;i++)
	{
		int x,y;
		cin>>x>>y;
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	for(int i=1;i<=n;i++)
	if(vis[i]==false)
	{
		++cc;
		DDFFSS(i);
		
	}
	memset(vis,false,sizeof(vis));
	for(int i=1;i<=n;i++) if(!vis[i]) DFS(i);
	cout<<ans<<endl;
}
#include <bits/stdc++.h>
using namespace std ;
#define ft first
#define sd second
#define pb push_back
#define all(x) x.begin(),x.end()

#define ll long long int
#define vi vector<int>
#define vii vector<pair<int,int> >
#define pii pair<int,int>
#define vl vector<ll>
#define vll vector<pair<ll,ll> >
#define pll pair<ll,ll>
#define mp make_pair

#define sc1(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d%d",&x,&y)
#define sc3(x,y,z) scanf("%d%d%d",&x,&y,&z)

#define scll1(x) scanf("%lld",&x)
#define scll2(x,y) scanf("%lld%lld",&x,&y)
#define scll3(x,y,z) scanf("%lld%lld%lld",&x,&y,&z)

#define pr1(x) printf("%d\n",x)
#define pr2(x,y) printf("%d %d\n",x,y)
#define pr3(x,y,z) printf("%d %d %d\n",x,y,z)

#define prll1(x) printf("%lld\n",x)
#define prll2(x,y) printf("%lld %lld\n",x,y)
#define prll3(x,y,z) printf("%lld %lld %lld\n",x,y,z)

#define pr_vec(v) for(int i=0;i<v.size();i++) cout << v[i] << " " ;

#define f_in(st) freopen(st,"r",stdin)
#define f_out(st) freopen(st,"w",stdout)

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

const int maxn = 1e5 + 10;
const int MAX = 1e5 + 10;
const int mod = 1e9 + 7;


char s[ maxn ];
int n, k, visited[ maxn ];
set<int> cut[ 26 ], notcut[ 26 ];
int main() {

    sc2( n, k );
    scanf( "%s", s+1 );
    for(int i=1; i<=n; i++) {
        notcut[ s[i] - 'a' ].insert( i );
    }

    for(int i=1; i<=n; i++) {
        if( visited[i] ) { // cut
            cut[s[i]-'a'].erase( i );
            for(int j=0; j<s[i]-'a'; j++) {
                if( cut[j].size() ) {
                    int index = *cut[j].rbegin();
                    swap(s[i], s[index]);
                    cut[j].erase( index );
                    cut[s[index]-'a'].insert( index );
                    break;
                }

                if( notcut[j].size() && k ) {
                    k --;
                    int index = *notcut[j].rbegin();
                    swap(s[i], s[index]);
                    notcut[j].erase( index );
                    cut[s[index]-'a'].insert( index );
                    visited[ index ] = true;
                    break;
                }
            }
        } else if( k ) { // not cut
            notcut[s[i]-'a'].erase( i );
            for(int j=0; j<s[i]-'a'; j++) {
                if( cut[j].size() ) {
                    k --;
                    visited[i] = true;
                    int index = *cut[j].rbegin();
                    swap(s[i], s[index]);
                    cut[j].erase( index );
                    cut[s[index]-'a'].insert( index );
                    break;
                }

                if( notcut[j].size() && k > 1 ) {
                    k -= 2;
                    visited[i] = true;
                    int index = *notcut[j].rbegin();
                    swap(s[i], s[index]);
                    notcut[j].erase( index );
                    cut[s[index]-'a'].insert( index );
                    visited[ index ] = true;
                    break;
                }
            }
        }
    }

    for(int i=1; i<=n; i++) cout << s[i];
    cout << "\n";
    return 0;
}

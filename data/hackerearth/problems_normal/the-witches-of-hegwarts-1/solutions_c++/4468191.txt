#include<bits/stdc++.h>
#include<algorithm>
using namespace std;
#define fr(i,a,b) for(int i=a;i<b;i++)
#define frn(i,a,b) for(int i=a;i>b;i--)
#define si(x) scanf("%d",&x)
#define sll(x)  scanf("%lld",&x)
#define pln printf("\n")
#define pi(x) printf("%d",x)
#define pll(x) printf("%lld",x)
#define mp make_pair
#define pb push_back
#define x first
#define y second
typedef long long ll;
ll MOD=1000000007;
ll pw(ll a,ll b){
  ll r=1;
  while(b>0){
     if(b&1){
       r=(r*a)%MOD;
        }
     b=b>>1;
     a=(a*a)%MOD;
  }
return (r)%MOD;
}
ll ans;
ll memo1[1000100]={};
map<ll,int>memo;
ll dfs(ll n){
    //printf("dfs with=%lld\n",n);
   if(n<=1LL){
     return 0LL;
   }
   if(n<1000001&&memo1[n]){
    //    cout<<"returning memo";pln;
    return memo1[n];
   }
   ll tmp=n;
     tmp=min(tmp,dfs(n-1)+1LL);
   if(n%2==0)
     tmp=min(dfs(n/2)+1LL,tmp);
   if(n%3==0)
    tmp=min(dfs(n/3)+1LL,tmp);
  //      printf("returning memo[%lld]=%lld",n,tmp);pln;
   if(n<1000001)memo[n]=tmp;
   return tmp;
}

ll bfs(ll n){
   vector<ll>q;
   q.pb(n);
   memo[n]=1;
   ll cur;
   ll ans=0;
   int found=0;
   ll l=0,r=1,add;
   ll c1,c2,c3;
     if(n == 1) found = 1;
   while(!found){
        ans++;
        add=0;
        for(;l<r;l++){//visit everybody on that lvl
            cur=q[l];

            c1=-1;c2=-1;c3=-1;
            if(memo[cur-1]==0){
            //   cout<<"in1\n";
                memo[cur-1]=1;
                q.pb(cur-1);
                c1=cur-1;
                add++;
            }
            if((cur%2)==0){
                  //  cout<<"in21\n";
                c2=cur/2;
                if(memo[c2]==0){
                //cout<<"in22\n";
                   memo[cur/2]=1;
                   q.pb(cur/2);

                  add++;
                }
            }
            if((cur%3)==0){
             // cout<<"in31\n";
                 c3=cur/3;
                if(memo[cur/3]==0){
               //    cout<<"in32\n";
                   memo[cur/3]=1;
                   q.pb(cur/3);
                   add++;
                }
             }
        if(c1==1||c2==1||c3==1)found=1;
        //printf("now cur=%lld c1=%lld c2=%lld c3=%lld\n",cur,c1,c2,c3);
        }
        l=r;
        r+=add;
   }
   return ans;

}


int main(){
   int t;
   ll n;
   si(t);
   while(t--){
        memo.clear();
     sll(n);
    cout<<bfs(n);pln;
  }

return 0;
}

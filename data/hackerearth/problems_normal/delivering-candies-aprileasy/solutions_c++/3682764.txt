
#include<bits/stdc++.h>
#define ll long long
#define f first
#define s second
#define nax 100005
#define  pll pair<ll , ll>
using namespace std;
vector<pll> v[nax];
bool visited[nax];
ll dist[nax];
ll k[nax];
ll dijkstra(ll src)
{
    priority_queue<pll , vector<pll> , greater<pll> > pq;
    for(int i=0;i<nax;i++)
    {
        dist[i]=LONG_MAX;
        visited[i]=false;
    }
    dist[src]=0;
    pq.push(make_pair(0,src));
    while(!pq.empty())
    {
        pll temp = pq.top();
        pq.pop();
        ll ds=temp.f;
        ll nw=temp.s;
        if(!visited[nw])
        {
            visited[nw]=true;


        for(auto it = v[nw].begin();it!=v[nw].end();it++ )
        {
            if(ds+ it->s < dist[it->f])
            {
                dist[it->f]=ds+it->s;
                pq.push(make_pair(dist[it->f],it->f));
            }
        }


    }
    }


}

int main()
{
    ll t,n,m,a,b,c,src;


        cin>>n>>m>>src;
        for(int i=0;i<n;i++)
            cin>>k[i];
        for(int i=0;i<m;i++)
        {
            cin>>a>>b>>c;
            a--;
            b--;
            v[a].push_back(make_pair(b,c));
            v[b].push_back(make_pair(a,c));
        }

        src--;
        ll sum=0,cnt=0,sumk=0;
        dijkstra(src);


        for(int i=0;i<n;i++)
        {
            if (dist[i]==LONG_MAX)
            {

            cnt++;

            }
            else
            {


           // cout<<dist[i]<<" ";
            sum=sum+ dist[i]*k[i];
            sumk+=k[i];
            }
        }

        //cout<<sum<<"sum";

        for(int i=0;i<n;i++)
        {
            if(dist[i]==LONG_MAX)
                cout<<0<<" ";
            else if(i==src)
                cout<<sum-dist[i]*k[src]<<" ";
            else
                cout<<sum-dist[i]*k[i]+(dist[i]*(sumk-k[i]))<<" ";


        }
        cout<<"\n";


}

/*input
1
5 5
1 2 2
2 3 4
3 4 5
4 5 1
1 4 7
3
4 20
5 21
3 5
*/

#include <bits/stdc++.h>
using namespace std;

typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;
typedef vector<int> vi;

void shortestPath(vvii& g, int source, vi& dis)
{
    set<ii> s;          
    ii k;
    int a, b, pathlen, weight;
    s.insert(ii(0, source));    
    dis[source] = 0;   
    while(!s.empty())
    {
        k = *(s.begin());       s.erase(s.begin()); 
        pathlen = k.first;      a = k.second;       
        for(int i = 0; i < g[a].size(); i++)
        {
            b = g[a][i].first;      
            weight = g[a][i].second;
            if(dis[b] > dis[a] + weight)
            {
                if(dis[b] != INT_MAX)   
                    s.erase(s.find(ii(dis[b], b)));      
                dis[b] = dis[a] + weight;
                s.insert(ii(dis[b], b));
            }
        }
    }
}

int main() {
    int T, N, M, Q, a, b, wt;
    cin >> T;

    while (T--) {
        cin >> N >> M;
        vvii g(N);
        vi dis(N, INT_MAX);

        for (int i = 0; i < M; i++) {
            cin >> a >> b >> wt;
            a--;       b--;
            g[a].push_back(ii(b, wt));
            g[b].push_back(ii(a, wt));
        }

        shortestPath(g, 0, dis);
        cin >> Q;

        while (Q--) {
            cin >> a >> b;
            a--;
            int minDis = dis[a];
            if (2 * dis[a] < b)
                cout << (b - 2 * dis[a]) << endl;
            else
                cout << 0 << endl;
        }
    }   
}
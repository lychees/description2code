#include<bits/stdc++.h>
using namespace std ;
long long dp[(1<<17)+2] ;
long long n , l[20] , d[20] ;
long long neg_inf ;
long long getans ( int index , int mask ) {
    if ( index == n )
        return 0 ;
    if ( dp[mask] != neg_inf )
        return dp[mask] ;
    long long k = neg_inf ;
    for ( int i = 0 ; i < n ; i++ ) {
        if ( ! (mask&(1<<i)) ) {
            long long val = n*l[i] + i*d[i]*index*(index+1)/2 - n*i*d[i]*index ;
            k = max ( k , val + getans ( index +1 , mask|(1<<i) ) ) ;
        }
    }
    dp[mask] = k ;
    return k ;
}
int main ( ) {
    neg_inf = (1LL)*(9999999)*(-9999999) ;
    scanf ( "%d" , &n ) ;
    for ( int i = 0 ; i < n ; i++ ) {
        scanf ( "%d" , &l[i] ) ;
    }
    for ( int i = 0 ; i < n ; i++ ) {
        scanf ( "%d" , &d[i] ) ;
    }
    for ( int i = 0 ; i < (1<<17) ; i++ ) {
        dp[i] = neg_inf ;
    }
    printf ( "%lld\n" , getans ( 0 , 0 ) );
    return 0 ;
}

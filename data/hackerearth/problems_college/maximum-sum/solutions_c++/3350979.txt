#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <math.h>

using namespace std;

int tree[2100000], A[1000010];

void build(int node, int start, int end){
    if(start == end)
    {
        // Leaf node will have a single element
        tree[node] = A[start];
    }
    else
    {
        int mid = (start + end) / 2;
        // Recurse on the left child
        build(2*node, start, mid);
        // Recurse on the right child
        build(2*node+1, mid+1, end);
        // Internal node will have the sum of both of its children
        tree[node] = max(tree[2*node], tree[2*node+1]);
    }
}

void update(int node, int start, int end, int idx, int val){
    if(start == end)
    {
        // Leaf node
        A[idx] += val;
        tree[node] += val;
    }
    else
    {
        int mid = (start + end) / 2;
        if(start <= idx and idx <= mid)
        {
            // If idx is in the left child, recurse on the left child
            update(2*node, start, mid, idx, val);
        }
        else
        {
            // if idx is in the right child, recurse on the right child
            update(2*node+1, mid+1, end, idx, val);
        }
        // Internal node will have the sum of both of its children
        tree[node] = max(tree[2*node], tree[2*node+1]);
    }
}
int query(int node, int start, int end, int l, int r){
    if(r < start or end < l)
    {
        // range represented by a node is completely outside the given range
        return 0;
    }
    if(l <= start and end <= r)
    {
        // range represented by a node is completely inside the given range
        return tree[node];
    }
    // range represented by a node is partially inside and partially outside the given range
    int mid = (start + end) / 2;
    int p1 = query(2*node, start, mid, l, r);
    int p2 = query(2*node+1, mid+1, end, l, r);
    return max(p1, p2);
}
int main(){
	int n;
	scanf("%d", &n);

	for(int i = 1; i <= n; i++)
		scanf("%d", &A[i]);

	build(1, 1, n);
	int count1;
	scanf("%d", &count1);
	char a;
	int l, r;
	for(int i = 0; i < count1; i++){
        cin >> a >> l >> r;
		if( a == 'Q')
			printf("%d\n", query(1, 1, n, l, r));
		else if( a == 'U')
			update(1, 1, n, l, r - A[l]);
	}
	return 0;
}

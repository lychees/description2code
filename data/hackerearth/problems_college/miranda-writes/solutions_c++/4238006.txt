#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define rep(i,a) for(ll i=0;i<a;++i)
#define repp(i,a,b) for(ll i=a;i<b;++i)
#define all(c) (c).begin(), (c).end()
#define FILL(a,x) memset(a,x,sizeof(a))
#define    foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
ll M=1e9+7;




ll dis[405][405],n,m,k,dp[1<<18][20],arr[20];
vector<pll> vec[405];
struct node{
    int no;
    int co;
};

struct compare  
 {  
   bool operator()(const struct node& l, const struct node& r)  
   {  
       return l.co > r.co;  
   }  
 };

 
int main()
{
    fastScan;
    cin>>n>>m>>k;
    rep(i,405){
        rep(j,405){
            if(i==j)dis[i][j]=0;
            else 
            dis[i][j]=1e9;
        }
    }
    ll a,b,c;
    rep(i,m){
        cin>>a>>b>>c;
        dis[a][b]=dis[b][a]=c;
    }
    arr[0]=1;
    
    repp(i,1,k+1)cin>>arr[i];
    arr[k+1]=n;
    
    repp(l,1,n+1){
        repp(i,1,n+1){
            repp(j,1,n+1){
                dis[i][j]=min(dis[i][j],dis[i][l]+dis[l][j]);
            }
        }
    }
   // cout<<dis[2][5]<<endl;
   
    k+=2;
    rep(i,(1<<k))rep(j,20)dp[i][j]=-1;
    dp[1][0]=0;
    repp(i,1,(1<<k)){
        rep(j,k){
            if(dp[i][j]==-1)continue;
            repp(l,1,k){
                if((i&(1<<l))!=0)continue;
                ll p=(i|(1<<l));
                
                if(dp[p][l]==-1)dp[p][l]=dp[i][j]+dis[arr[j]][arr[l]];
                else dp[p][l]=min(dp[p][l],dp[i][j]+dis[arr[j]][arr[l]]);
               // if(i==7 && l==3 && j==1)cout<<p<<"  "<<dp[i][j]<<"  "<<dis[arr[j]][arr[l]]<<" "<<dp[p][l]<<endl;
            }
           // cout<<dp[15][3]<<"  "<<i<<"  "<<j<<endl;
        }
    }
    //cout<<dis[arr[1]][arr[3]]<<endl;
    cout<<dp[(1<<k)-1][k-1];
    
    return 0;
}
#include<bits/stdc++.h>
using namespace std;
vector<int> v[100100];
int n, m, p, vis1[101000]={0}, disc[100100]={0}, low[100100]={0};
int ans=0;
int flag=0;
int tim=0;
int solve(int x, int prev, int nv){
	vis1[x]=1;
	disc[x]=low[x]=++tim;
	int child=1;	
	for(int i=0; i<v[x].size(); i++){
		if(v[x][i] != prev){
			if(!vis1[v[x][i]]){
				int sub_size=solve(v[x][i], x, nv);
				child+=sub_size;
				low[x]=min(low[x], low[v[x][i]]);
				if(low[v[x][i]] > disc[x] && abs(nv-2*sub_size) < p){	
					ans++;	
				}
			}
			else
				low[x]=min(low[x], disc[v[x][i]]);
		}
	}
	return child;		
}
int main(){
	cin>>n>>m>>p;
	for(int i=0; i<m; i++){
		int x, y;
		cin>>x>>y;
		v[x].push_back(y);		
		v[y].push_back(x);
	}
	int vis[100100]={0};
	for(int i=1; i<=n; i++){
		if(!vis[i]){
			queue<int>q;
			q.push(i);
			int cnt=1;
			vis[i]=1;
			while(q.size()){
				int top=q.front();
				q.pop();	
				for(int i=0; i<v[top].size(); i++)
					if(!vis[v[top][i]]){
						cnt++;
						vis[v[top][i]]=1;
						q.push(v[top][i]);
					}
			}
			solve(i,-1,cnt);
		}
	}
	cout<<ans<<endl;
	return 0;
}
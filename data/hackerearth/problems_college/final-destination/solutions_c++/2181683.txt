// 2015-07-23
#include <bits/stdc++.h>
#include <unordered_map>
#include <array>
#include <forward_list>
#include <unordered_set>
using namespace std;


#ifndef LOCAL
//#define LOCAL
#endif

#define SET_BIT(mask, index) (mask |= (1 << index))
#define TEST_BIT(mask, index) (mask & (1 << index))
#define CLEAR_BIT(mask, index) (mask &= ~(1 << index))
#define TOGGLE_BIT(mask, index) (mask ^= (1 << index))
const int INF = 1000000000;
const double EPS = 1.0e-11;
const int NO_VALUE = -1;
using ii = pair < int, int > ;
using ll = long long;

const int MAX_AB = 10005;
const int MAX_CALC_LIMIT = 1000000;
const int MIN_CALC_LIMIT = 2;

int steps[MAX_CALC_LIMIT + 5];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w+", stdout);
#endif
    
    int tc;
    cin >> tc;
    while (tc--) {
        ll a, b, mul, div, add, sub;
        cin >> a >> b >> mul >> div >> add >> sub;
        
        
        memset(steps, NO_VALUE, sizeof(steps));
        steps[a] = 0;
        
        queue<ll> q;
        q.push(a);
        bool reached = false;
        
        while (!q.empty()) {
            ll tmpRes = q.front();
            q.pop();
            
            if (tmpRes == b) {
                reached = true;
                break;
            }
            
            ll valueAfterMul = tmpRes * mul;
            ll valueAfterAdd = tmpRes + add;
            ll valueAfterDiv = tmpRes / div;
            ll valueAfterSub = tmpRes - sub;
            
            if (valueAfterMul <= MAX_CALC_LIMIT && steps[valueAfterMul] == NO_VALUE) {
                q.push(valueAfterMul);
                steps[valueAfterMul] = steps[tmpRes] + 1;
            }
            if (add > 0 && valueAfterAdd <= MAX_CALC_LIMIT && steps[valueAfterAdd] == NO_VALUE) {
                q.push(valueAfterAdd);
                steps[valueAfterAdd] = steps[tmpRes] + 1;
            }
            if (valueAfterDiv >= MIN_CALC_LIMIT && steps[valueAfterDiv] == NO_VALUE) {
                q.push(valueAfterDiv);
                steps[valueAfterDiv] = steps[tmpRes] + 1;
            }
            if (sub > 0 && valueAfterSub >= MIN_CALC_LIMIT && steps[valueAfterSub] == NO_VALUE) {
                q.push(valueAfterSub);
                steps[valueAfterSub] = steps[tmpRes] + 1;
            }
        }
        cout << (reached ? steps[b] : -1) << "\n";
    }



    return 0;
}

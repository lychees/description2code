#include <iostream>
using namespace std;
long long getNum(long long l, long long r, long long p[], long long n) {
	long long x, y, i;
	x = (l/p[0]);
	for (i = 1; i < n; i++) {
		x /= (p[i]);
	}
	for (i = 0; i < n; i++) {
		if (l % p[i] != 0) {
			x++;
			break; 
		}
	}
	
	y = (r/p[0]);
	for (i = 1; i < n; i++) {
		y /= (p[i]);
	}
	return (y-x+1);
}
long long brute(long long l, long long r, long long p[], long long n) {
	long long i, j;
	long long count = 0;
	for (i = l; i <= r; i++) {
		for (j = 0; j < n; j++) {
			if (i % p[j] == 0) {
				count++;
				break;
			}
		}
	}
	return count;
	
}
int main()
{
    long long t, n, l, r, i, j, k, x, y, numPrimes, ind = 0;
    long long p[200];
    long long numPerSize[12];
    long long tmpPrimes[12];
    cin>>t;
    while (t--) {
    	cin>>n>>l>>r;
    	ind = 0;
    	for (i = 0; i < n; i++) {
    		cin>>p[i];
    		tmpPrimes[0] = p[i];
    		ind += getNum(l, r, tmpPrimes, 1);
    	}
    	
    	for (i = 0; i <= n + 1; i++) {
    		numPerSize[i] = 0;
    		tmpPrimes[i] = 1;
    	}
		for(i = 1; (i < (1<<n)); i++)
		{
			if ((i & (i-1)) == 0) {
				continue;
			}
			long long mul = 1;
			numPrimes = 0;
			k = 0;
	  		for(j = 0; j < n; j++)
	   		{
	    		 if(i & (1<<j)) {
	    			  mul *= p[j];
	    			  tmpPrimes[k++] = p[j];
	    			  numPrimes++;
	    		 }
	   		}
	   		numPerSize[numPrimes] += getNum(l, r, tmpPrimes, k);
		}
		for (i = 2; i <= n; i+=2) {
			ind += (numPerSize[i + 1] - numPerSize[i]);
		}
    	
    	cout<<ind<<endl;
    	//cout<<brute(l, r, p, n)<<endl;
    	
    }
    return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:256000000")

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <functional>
#include <iostream>
#include <iomanip>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define pi 3.141592653589793238462643383279502884197169399375105820974944592307816406286

typedef long double ld;
typedef long long ll;	// Use "%I64d" as placeholder with printf and scanf.
typedef unsigned long long int ulli;
typedef vector<ll> vll;
typedef vector<vll> vvll;
typedef vector<string> vs;
typedef pair<ll, ll> pll;
typedef vector<pll> vpll;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef priority_queue<ll, vector<ll>, greater<ll>> min_heap_ll;
typedef priority_queue<ll, vector<ll>, less<ll>> max_heap_ll;

#define f(i, n) for(ll i=0; i<n; ++i)
#define fi(i, n, j) for(ll i=j; i<n; ++i)
#define pb push_back
#define ins insert
#define mp make_pair
#define all(container) container.begin(), container.end()
#define allr(container) container.rbegin(), container.rend()
#define tr(container, it) for (decltype(container.begin()) it = container.begin(); it != container.end(); it++)
#define trr(container, it) for (decltype(container.rbegin()) it = container.rbegin(); it != container.rend(); it++)
#define cpresent(container, element) (container.find(element) != container.end())
#define present(container, element) (find(all(container),element) != container.end())
#define dist(a, b) sqrtl(powl(ld(a.first - b.first), 2) + powl(ld(a.second - b.second), 2))

#ifdef _CODE_SOURCE
double start_time, end_time;
#endif

// useful functions
void my_return(ll code)
{
#ifdef _CODE_SOURCE
	end_time = clock();
	printf("\nTime = %.3f seconds\n", (end_time - start_time) / CLOCKS_PER_SEC);
#endif
	exit(code);
}

ll gcd(ll a, ll b)
{
	return b ? gcd(b, a % b) : a;
}

ll my_exp(ll a, ll b)
{
	if (b == 0)
	{
		return 1;
	}
	else
	{
		ll temp = my_exp(a, b / 2);
		temp *= temp;
		if (b % 2 == 1)
		{
			temp *= a;
		}
		return temp;
	}
}

bool is_prime(ll n)	// O(sqrt(n)) implementation check for 0 and 1 separately
{
	if (n != 2 && n % 2 == 0)
	{
		return false;
	}
	else
	{
		for (int i = 3; (i*i) <= n; i += 2)
		{
			if (n%i == 0)
				return false;
		}
		return true;
	}
}

// Program classes and structs


// Program functions
void my_search(ll curr, ll acum, vll& arr, vll& marr)
{
	curr += 1;
	ll n = arr.size();
	fi(i, n, 1)
	{
		if ((i + 1)*curr > n)
		{
			break;
		}
		else
		{
			my_search((i + 1)*curr - 1, acum + arr[curr - 1], arr, marr);
		}
	}
	marr[curr - 1] = max(marr[curr - 1], acum + arr[curr - 1]);
}

int main()
{
#ifdef _CODE_SOURCE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	start_time = clock();
#endif
	ios_base::sync_with_stdio(false);
	//Program Code
	ll n;
	cin >> n;
	vll a(n);
	f(i, n)
	{
		cin >> a[i];
	}
	vll marr(n, 0);
	my_search(0, 0, a, marr);
	tr(marr, it)
	{
		cout << *it << " ";
	}
	my_return(0);
}
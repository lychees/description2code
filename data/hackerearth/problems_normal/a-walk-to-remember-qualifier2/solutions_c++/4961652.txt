#include <bits/stdc++.h>
using namespace std;
#define dbg(x) { cout<<#x<<" : "<<x<<endl; }
stack<int> st;
vector<int> g[100005];
vector<int> revg[100005];
bool visited[100005];
int n;


void dfs(int s)
{
	vector<int>::iterator it;
	visited[s]=true;
	//dbg(s);
	for(it=g[s].begin(); it!=g[s].end(); it++) {
	//	dbg(*it);
		if(visited[*it]==false)
			dfs(*it);
	//	dbg(*it);
	}
//	dbg(s);
	st.push(s);
//	cout<<s<<endl;
}

int main()
{
    ios::sync_with_stdio(false);
    cin>>n;
    int m;
    cin>>m;
    int a,b;
    while(m--) {
    	cin>>a>>b;
    	if(a!=b) {
    		g[a].push_back(b);
    		revg[b].push_back(a);
    	//	cout<<(a)<<" "<<b<<endl;;
    	}
    }
    
    int ans[100005];
    for(int i=0;i<100005;i++) {
    	visited[i]=false;
    	ans[i]=1;
    }
 //   dbg(n);
//    dbg(m);
    for(int i=1;i<=n;i++) {
    	if(visited[i]==false) {
    	//	dbg(i);
    		dfs(i);
    	}
    }
    
    for(int i=0;i<100005;i++) {
    	visited[i]=false;
    }
  //  dbg(n);
    while(st.empty()==false) {
    	int node=st.top();
   // 	dbg(node);
    	st.pop();
    	if(visited[node]==true)
    		continue;
    	stack<int> st2;
    	st2.push(node);
    	visited[node]=true;
    	vector<int>:: iterator it;
    	int num=0;
    	int node2=node;
    //	dbg(node2);
    	while(st2.empty()==false) {
    		node=st2.top();
    		st2.pop();
    		
    		for(it=revg[node].begin(); it!=revg[node].end(); it++) {
    			if(visited[*it]==false) {
    				visited[*it]=true;
    				st2.push(*it);
    				num++;
    		//		dbg(*it);
    			}
    		}
    		
    	}
    	if(num==0)
    		ans[node2]=0;
    }
    
    for(int i=1;i<=n;i++)
    	cout<<ans[i]<<" ";
    
    return 0;
}

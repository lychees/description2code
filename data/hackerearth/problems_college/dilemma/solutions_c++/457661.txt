// {{{ Headers
// vim:filetype=cpp:foldmethod=marker:foldmarker={{{,}}}

#include <cassert>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#include <algorithm>
#include <deque>
#include <functional>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#include <fstream>
#include <iostream>
#include <sstream>

#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;
// }}}

typedef long long int64;
const int INF = 0x3f3f3f3f;
template <class T> inline int len (const T &a) { return a.size (); }

vector <int> v;
int N;
int64 memo [3][2505];

int64
solve (int idx, int s) {
    if (s > N) return 0;
    if (idx == 3) return s <= N;
    if (memo [idx][s] != -1) return memo [idx][s];
    int64 ret = 0;
    for (int i = 0; i <= v [idx]; i++)
        ret += solve (idx + 1, s + i);
    return memo [idx][s] = ret;
}

int
main () {
#ifdef LOCALHOST
    freopen ("test.in", "r", stdin);
    // freopen ("test.out", "w", stdout);
#endif
    int T, R, G, B;
    scanf ("%d", &T);
    while (T--) {
        scanf ("%d %d %d %d", &N, &R, &G, &B);
        v.clear (); v.push_back (R); v.push_back (G); v.push_back (B);
        memset (memo, -1, sizeof (memo));
        int64 ret = solve (0, 0);
        printf ("%lld\n", ret);
    }

    return 0;
}


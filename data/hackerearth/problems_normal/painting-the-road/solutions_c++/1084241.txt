#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
#define MAX 260
int seg[MAX * 4];
int ll;
int k;
void se_add(int i, int b, int bb, int l, int r, int x){
	if (bb <= l || r<=b){
		return;
	}
	if (seg[i] == -1 || seg[i] > x){
		seg[i] = x;
	}
	if (l + 1 == r){
		return;
	}
	se_add(i * 2 + 1, b, bb, l, (l + r) / 2, x);
	se_add(i * 2 + 2, b, bb, (l + r) / 2, r, x);
	return;
}
int min_cost(int b,int l,int r,int ll,int rr){
	if (rr <= l || r <= ll){
		return -1;
	}
	if (ll <= l&&r <= rr){
		return seg[b];
	}
	int r2 = -1;
	int a = min_cost(b * 2 + 1, l, (l + r) / 2, ll, rr);
	int b2 = min_cost(b * 2 + 2, (l + r) / 2, r, ll, rr);
	if (a >= 0){
		if (r2 == -1 || r2 > a){
			r2= a;
		}
	}
	if (b2 >= 0){
		if (r2 == -1 || r2 > b2){
			r2 = b2;
		}
	}
	return r2;
}
int query(int i,int j){
	return min_cost(0, 0, ll + 1, i, j+1);
}
void add(int i,int j,int k){
	se_add(0,i,j+1,0,ll+1,k);
}
int imos[MAX];
int main(){
	int t;
	scanf("%d", &t);
	while (t--){
		memset(seg, -1, sizeof(seg));
		scanf("%d%d", &ll, &k);
		vector<pair<int, pair<int,int> > > v;
		v.resize(k);
		memset(imos, 0, sizeof(imos));
		for (int i = 0; i < v.size(); i++){
			scanf("%d%d%d", &v[i].first, &v[i].second.first,&v[i].second.second);
			imos[v[i].first]++;
			imos[v[i].second.first+1]--;
		}
		bool can = 0;
		for (int i = 0; i <= ll; i++){
			if (i){
				imos[i] += imos[i - 1];
			}
			if (imos[i] == 0){
				can = 1;
				break;
			}
		}
		if (can){
			puts("-1");
			continue;
		}
		sort(v.begin(), v.end());
		add(0, 0,0);
		for (int j = 0; j < v.size(); j++){
			int tmp = query(v[j].first, ll);
			if (tmp == -1){
				return -1;
			}
			tmp += v[j].second.second;
			add(v[j].first,v[j].second.first, tmp);
		}
		int ans = query(ll, ll);
		printf("%d\n", ans);
	}
	return 0;
}
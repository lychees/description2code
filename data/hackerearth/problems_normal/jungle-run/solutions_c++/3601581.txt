#include <iostream>
#include<queue>
using namespace std;

char map[35][35];
bool v[35][35];
int level;
int N;
int startx,starty;
int endx,endy;
struct cell
{
	int x;
	int y;
};

int main()
{
    cin>>N;
    for(int i=0;i<N;i++)
    	for(int j=0;j<N;j++)
    		cin>>map[i][j];
    for(int i=0;i<N;i++)
    	for(int j=0;j<N;j++)
    		v[i][j]=false;
	for(int i=0;i<N;i++)
    {
    	for(int j=0;j<N;j++)
		{
			if(map[i][j] == 'S')
				{
					startx=i;
					starty=j;
				}
			if(map[i][j] == 'E')
				{
					endx=i;
					endy=j;
				}	
		}	
    }
	queue<struct cell> q;
	struct cell c;
	c.x = startx;
	c.y = starty;
	q.push(c);
	v[c.x][c.y]=true;
	level=0;
	int flag=0;
	while(!q.empty() && flag == 0)
	{
		int len = q.size();
		level++;
		while(len--)
		{
			struct cell top = q.front();	
			q.pop();
			if(top.x == endx && top.y == endy)
			{
				flag =1;
				break;	
			}
			else
			{
				if(top.y+1<N && map[top.x][top.y+1] != 'T' && !v[top.x][top.y+1])
					{
						struct cell p;
						p.x = top.x;
						p.y = top.y + 1;
						q.push(p);
						v[p.x][p.y]=true;
					}
				if(top.y-1>=0 && map[top.x][top.y-1] != 'T'&& !v[top.x][top.y-1])
					{
						struct cell p;
						p.x = top.x;
						p.y = top.y - 1;
						q.push(p);
						v[p.x][p.y]=true;
					}
				if(top.x+1<N && map[top.x+1][top.y] != 'T'&& !v[top.x+1][top.y])
					{
						struct cell p;
						p.x = top.x+1;
						p.y = top.y;
						q.push(p);
						v[p.x][p.y]=true;
					}
				if(top.x-1>=0 && map[top.x-1][top.y] != 'T' && !v[top.x-1][top.y])
					{
						struct cell p;
						p.x = top.x-1;
						p.y = top.y;
						q.push(p);
						v[p.x][p.y]=true;
					}
			}
		}
	//	q.pop();
		
	}  
	cout<<level-1<<endl;	
    return 0;
}

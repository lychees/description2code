// Hackerearth - Find Cost
// String Handling
// Trie
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define SIZE(a) sizeof(a) / sizeof(a[0])
#define ALPHABETS (26)
#define INDEX(c) ((int)c - (int)'a')
 
int nodesCount = 0;
 
// Trie Implementation.
 
// Trie node
struct Node
{
  int value;
  struct Node *children[ALPHABETS];
};
//
 
// Trie ADT
typedef struct Trie TrieADT;
struct Trie
{
  struct Node *root;
  int count;
};
//
 
// Returns a new trie node.
struct Node *getNode(void)
{
  struct Node *pNode = NULL;
 
  pNode = (struct Node *)malloc(sizeof(struct Node));
  if(pNode)
  {
    int i;
 
    pNode->value = 0;
    for(i = 0; i < ALPHABETS; i++)
     pNode->children[i] = NULL;
  }
 
  ++nodesCount;
  return pNode;
}
//
 
// Initializes the trie(root is a dummy node).
void initialize(TrieADT *pTrie)
{
  pTrie->root = getNode();
  pTrie->count = 0;
}
//
 
// If not present, inserts key into trie.
// If the key is a prefix of a trie node, just marks a leaf node.
void insert(TrieADT *pTrie, char key[])
{
  int level;
  int length = strlen(key);
  int index;
  struct Node *pCrawl;
 
  pTrie->count++;
  pCrawl = pTrie->root;
 
  for(level = 0; level < length; ++level)
  {
    index = INDEX(key[level]);
    if(!pCrawl->children[index])
     pCrawl->children[index] = getNode();
 
    pCrawl = pCrawl->children[index];
  }
 
  // Mark the last node as a leaf.
  pCrawl->value = pTrie->count;
}
//
 
// Returns non zero, if the key is present in the trie.
int search(TrieADT *pTrie, char key[])
{
  int level;
  int length = strlen(key);
  int index;
  struct Node *pCrawl;
 
  pCrawl = pTrie->root;
 
  for(level = 0; level < length; level++)
  {
    index = INDEX(key[level]);
 
    if(!pCrawl->children[index]) return 0;
    pCrawl = pCrawl->children[index];
  }
 
  return (0 != pCrawl && pCrawl->value);
}
//
 
int main()
{
  int n;
  char s[35];
  TrieADT trie;
 
  // Initilaize.
  initialize(&trie);
 
  // Construct trie
  scanf("%d", &n);
  for(int i = 0; i < n; i++)
  {
    scanf("%s", &s);
    insert(&trie, s);
  }
 
  printf("%d\n", nodesCount);
  return 0;
}
#pragma comment(linker, "/STACK:512000000")
#define _CRT_SECURE_NO_WARNINGS
//#include "testlib.h"
#include <cstdio>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <bitset>
#include <deque>
#include <ctime>
#include <stack>
#include <queue>
#include <fstream>
#include <sstream>
//#include <unordered_map>
using namespace std;
//#define FILENAME ""
#define mp make_pair
#define all(a) a.begin(), a.end()
typedef long long li;
typedef long double ld;
void solve();
void precalc();
clock_t start;
//int timer = 1;

int testNumber = 1;

bool todo = true;

int main() {
#ifdef room111
    freopen("input.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
#else
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //freopen(FILENAME".in", "r", stdin);
    //freopen(FILENAME ".out", "w", stdout);
#endif
    start = clock();
    int t = 1;
    cout.sync_with_stdio(0);
    cin.tie(0);
    precalc();
    cout.precision(10);
    cout << fixed;
    //cin >> t;
    int testNum = 1;
    while (t--) {
        //cerr << testNum << endl;
        //cout << "Case #" << testNum++ << ": ";
        solve();
        ++testNumber;
        //++timer;
    }

#ifdef room111
    cerr << "\n\n" << (clock() - start) / 1.0 / CLOCKS_PER_SEC << "\n\n";
#endif

    return 0;
}

//BE CAREFUL: IS INT REALLY INT?

//#define int li

/*int pr[] = { 97, 2011 };
int mods[] = { 1000000007, 1000000009 };

const int C = 300500;
int powers[2][C];*/

//int MOD = 1000000007;

//int c[5010][5010];

template<typename T>
T binpow(T q, T w, T mod) {
    if (!w)
        return 1 % mod;
    if (w & 1)
        return q * 1LL * binpow(q, w - 1, mod) % mod;
    return binpow(q * 1LL * q % mod, w / 2, mod);
}

/*int curMod = 1000000009;

int fact[100500], revfact[100500];

int getC(int n, int k) {
int res = fact[n] * revfact[n - k] % curMod * revfact[k] % curMod;
return res;
}*/

/*const int C = 7000500;

int least_prime[C];*/

void precalc() {

    /*for (int i = 2; i < C; ++i) {
    if (!least_prime[i]) {
    least_prime[i] = i;
    for (li j = i * 1LL * i; j < C; j += i) {
    least_prime[j] = i;
    }
    }
    }*/

    /*fact[0] = revfact[0] = 1;
    for (int i = 1; i < 100500; ++i) {
    fact[i] = fact[i - 1] * i % curMod;
    revfact[i] = binpow(fact[i], curMod - 2, curMod);
    }*/

    /*for (int w = 0; w < 2; ++w) {
    powers[w][0] = 1;
    for (int j = 1; j < C; ++j) {
    powers[w][j] = (powers[w][j - 1] * 1LL * pr[w]) % mods[w];
    }
    }*/
    /*for (int i = 0; i < 5010; ++i) {
    c[i][i] = c[i][0] = 1;
    for (int j = 1; j < i; ++j) {
    c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % MOD;
    }
    }*/
}

template<typename T>
T gcd(T q, T w) {
    while (w) {
        q %= w;
        swap(q, w);
    }
    return q;
}
template<typename T>
T lcm(T q, T w) {
    return q / gcd(q, w) * w;
}

#define int li

//const int mod = 1000000007;

bool is_power2(int n) {
    while (n % 2 == 0) {
        n /= 2;
    }
    return n == 1;
}

int solve(int b) {
    if (b <= 1) {
        return 0;
    }
    int res = -1;
    for (int step = 2; ; ++step) {
        int all_g = 1;
        bool f = true;
        for (int i = 1; i < step; ++i) {
            int g = gcd(all_g, i);
            all_g /= g;
            if (all_g > 1e18 / i) {
                f = false;
                break;
            }
            all_g *= i;
        }
        if (!f) {
            break;
        }
        int new_all_g = lcm(step, all_g);
        int diff = b / all_g;
        int new_g = gcd(step, all_g);
        if (step / new_g < 1e18 / all_g) {
            diff -= b / new_all_g;
        }
        if (step > 2) {
            diff -= step / all_g;
        }
        int len = 3;
        if (step == 2) {
            len = 2;
        }
        if (step > 2 && is_power2(step)) {
            len = 4;
        }
        res += diff * len;
    }
    return res;
}

int get_sum(int cur) {
    int res = 1;
    while (true) {
        bool f = false;
        for (int now = 2; now < cur; ++now) {
            if (cur % now) {
                ++res;
                cur = now;
                f = true;
                break;
            }
        }
        if (!f) {
            break;
        }
    }
    return res;
}

void solve() {
    /*for (int b = 1; b <= 100; ++b) {
        cout << "b = " << b << ' ' << solve(b) << ' ';

        int sum = 0;
        for (int cur = 2; cur <= b; ++cur) {
            sum += get_sum(cur);
        }
        cout << sum << endl;
    }
    return;*/


    int a, b;
    cin >> a >> b;
    cout << solve(b) - solve(a - 1) << endl;
}



















































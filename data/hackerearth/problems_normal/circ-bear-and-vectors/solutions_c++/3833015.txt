#include<cstdio>
#include<map>
#include<algorithm>
using namespace std;
//map<pair<int,int>,int> mp;
long long mod = 10000003;
int mpp[20000020];
int mpp_val[20000020][2];
long long p1 = 3452311LL, p2=2327717LL;
inline int GCD(int a,int b)
{
  if(b==0) return a;
  if(a<b) return GCD(b,a);
  return GCD(b,a%b);  
}
int ar[3002][2];
int tar[3002][2];
inline int get_hash(int x,int y)
{
int tmp2 =2;
if(y!=0) tmp2 = x/y;
10LL * x + y;
int tmp =  ( (  x * p1 +  y * p2 +tmp2)  % mod )  + mod;



return tmp;
}
int main()
{
 int acz=0,bcz=0;
 int N; int a,b; scanf("%d",&N);
 for(int i=0;i<N;i++) 
 {
  scanf("%d %d",&a,&b);
   int ta ; if(a<0) ta = -a; else ta = a; 
   int tb ; if(b<0) tb = -b; else tb = b;
   if(a == 0)
   {
     acz++;
   } 
   if(b==0) bcz++;
  int c = GCD(ta,tb);
 
  ar[i][0] = a; ar[i][1] = b;
  
  a = a/c; b = b/c;
   
   tar[i][0] = a; tar[i][1] = b;
   
   int tmp =  get_hash(a,b);
   mpp_val[tmp][0] = a;  mpp_val[tmp][1] = b; 
  // printf(" b = %d  p2 = %lld and mul = %lld ",b,p2,b*p2);
   //printf("tmp is %d  ans   = %lld    %lld \n",tmp,1LL * a * p1 * 1LL,1LL * b * p2 * 1LL);
   mpp[tmp]++;
  //mp[make_pair(a,b)]++;
  //mp[make_pair(a,b)]++;
  
 }
 

long long ans = 0;
 for(int i=1;i<N;i++)
 {
   for(int j=0;j<i;j++)
   {
    if(i==j) continue;
    int as = ar[i][0] + ar[j][0];
	int bs = ar[i][1] + ar[j][1];
		if(as == 0 && bs==0) continue;
		if(as == 0)
	{
	 ans +=  2*bcz;
	 
	 if(ar[j][1] == 0) ans -= 2;
	 if(ar[i][1] == 0) ans -= 2;
	 
	 
 // printf("ans is %lld\n",ans);
	 continue;
	}
	if(bs ==0)
	{
	 ans += 2*acz;
	 if(ar[j][0] == 0) ans -= 2;
	 if(ar[i][0] == 0) ans -= 2;
 // printf("ans is %lld\n",ans);
	 continue;
	}
	
	int tas; if(as<0) tas = -as; else tas = as;
	int tbs; if(bs<0) tbs = -bs; else tbs = bs;
	
	int c=GCD(tas,tbs);
	if(c>1)
	{
	as/=c; bs/=c;
	}
	
		//printf("here i = %d  j = %d as = %d  bs = %d\n",i,j,as,bs);
	int tmp = get_hash(-bs,as); //( ( -bs * p1 + as * p2 )  %mod  ) + mod;
	if(mpp_val[tmp][0]==-bs && mpp_val[tmp][1]==as)
	{
		
		ans += 2 * mpp[tmp];
	if(-bs == tar[i][0] && as == tar[i][1]) ans -= 2 ;
	if(-bs == tar[j][0] && as == tar[j][1]) ans -= 2 ;
	}
	
	
	
	 tmp =  get_hash(bs,-as); //(( bs * p1 - as * p2 )  % mod ) + mod;
	 if(mpp_val[tmp][0]==bs && mpp_val[tmp][1]==-as)
	 {
	 ans += 2 * mpp[tmp];
	if(bs == tar[i][0] && -as == tar[i][1]) ans -= 2 ;
	if(bs == tar[j][0] && -as == tar[j][1]) ans -= 2 ;	
	 }
	
	
   }
 }
 
 printf("%lld\n",ans);

}
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
typedef long long ll;
const int MAXN = (int)1e4;
const int MOD = (int)1e9 + 7;

int t;
vector<vector<int> > edge, edge2, ans, res, identity;
ll n;

int calc2[] = {0, 1, 0, 2, 0, 1, 0, 3, 0};
int calc3[] = {0, 0, 1, 0, 0, 1, 0, 0, 2};
int calc5[] = {0, 0, 0, 0, 1, 0, 0, 0, 0};
int calc7[] = {0, 0, 0, 0, 0, 0, 1, 0, 0};

void add(int &a, int b) {
	a += b;
	if (a >= MOD) a -= MOD;
}

int getInt(int s2, int s3, int s5, int s7, int has0) {
	return (s2 << 4) + (s3 << 3) + (s5 << 2) + (s7 << 1) + (has0 << 0);
}

vector<vector<int> > mult(vector<vector<int> > m1, vector<vector<int> > m2) {
	assert(m1[0].size() == m2.size());
	int n = m1.size();
	int m = m1[0].size();
	int p = m2[0].size();
	vector<vector<int> > res;
	res.resize(n);
	for (int i = 0; i < n; i++) {
		res[i].resize(p, 0);
		for (int j = 0; j < p; j++) {
			for (int k = 0; k < m; k++) {
				add(res[i][j], ((ll)m1[i][k] * m2[k][j]) % MOD);
			}
		}
	}
	return res;
}

void createState() {
	ans.resize(33);
	edge.resize(33);
	edge2.resize(33);
	identity.resize(33);
	for (int i = 0; i < 33; i++) {
		edge[i].resize(33, 0);
		edge2[i].resize(33, 0);
		identity[i].resize(33, 0);
		identity[i][i] = 1;
		
		ans[i].resize(1, 0);
		if (i == 32) break;
		int s2 = (i & (1 << 4)) != 0;
		int s3 = (i & (1 << 3)) != 0;
		int s5 = (i & (1 << 2)) != 0;
		int s7 = (i & (1 << 1)) != 0;
		int has0 = (i & (1 << 0)) != 0;
		int nextState = getInt(s2, s3, s5, s7, 1);
		edge[i][nextState] = 1;
		if (has0 || (s2 == 0 && s3 == 0 && s5 == 0 && s7 == 0)) ans[i][0] = 1;
		for (int j = 1; j <= 9; j++) {
			nextState = getInt(abs(s2 - calc2[j]) % 2, abs(s3 - calc3[j]) % 2, abs(s5 - calc5[j]) % 2, abs(s7 - calc7[j]) % 2, has0);
			edge[i][nextState]++; 
			edge2[i][nextState]++;
		}
	}
	ans[32][0] = 0;
	edge[32][0] = edge[32][32] = 1;
	edge2[32][0] = edge2[32][32] = 1;
}

vector<vector<int> > mult_pow(vector<vector<int> > e, ll p) {
	if (p == 0) return identity;
	if (p & 1) return mult(e, mult_pow(e, p - 1));
	vector<vector<int> > temp = mult_pow(e, p >> 1);
	return mult(temp, temp);
}

int main() {
	createState();
    scanf("%d", &t);
    while (t--) {
    	scanf("%lld", &n);
    	vector<vector<int> > temp = mult_pow(edge, n);
    	res = mult(mult(temp, edge2), ans);
    	printf("%d\n", res[32][0]);
    }
    return 0;
}

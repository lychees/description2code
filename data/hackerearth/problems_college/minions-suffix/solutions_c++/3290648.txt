#include <iostream>

#define MAX_ARR 1000100
#define P 3000001
using namespace std;

int n, id;
string s;
long long Hashed[MAX_ARR];
long long Powers[MAX_ARR];

long long GetHash(int from, int to) {
	if (from > 0) {
		long long hsh = Hashed[to] - (Hashed[from - 1] * Powers[to - from + 1]);
		//cout << "Hash from " << from << " to " << to << " is : " << hsh << endl;
		return hsh;
	}
	//cout << "Hash from 0 to " << to << " is " << Hashed[to] << endl;
	return Hashed[to];
}

int main() {
	ios_base::sync_with_stdio(0);
	cin >> s >> n;
	s = "#" + s;
	Powers[0] = 1;
	for (int i = 1; i < MAX_ARR; i++) {
		Powers[i] = Powers[i - 1] * P;
	}
	for (int i = 1; i < s.size(); i++) {
		Hashed[i] = (Hashed[i - 1] * P + s[i]);
		//cout << Hashed[i] << endl;
	}
	for (int i = 1; i <= n; i++) {
		cin >> id;
		int l = 1, p = id;
		while (l != p) {
			int mid = (l + p) / 2;
			if (GetHash(id - mid + 1, id) == GetHash(s.size() - mid, s.size() - 1)) {
				l = mid + 1;
			}
			else {
				p = mid;
			}
		}
		if (GetHash(id - l - 1, id) != GetHash(s.size() - l, s.size() - 1)) {
			l--;
		}
		cout << l << endl;
		//cout << endl;
	}
	return 0;
}
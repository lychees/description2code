#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
struct DFSSort {
    const int n;
    const vector<vi> &adj;
    vi start,end;
    vi depth;
    DFSSort ( const vector<vi> &_adj, int root=0 ) :n ( _adj.size() ),adj ( _adj ),start ( n ),end ( n ),depth ( n ) {
        build ( root );
    }
    int _cnt=0;
    void build ( int r ) {
        _cnt=0;
        build ( r,-1,0 );
    }
    int build ( int no,int p, int d ) {
        start[no]=_cnt++;
        depth[no]=d;
        int e=_cnt;
        for ( int j: adj[no] ) {
            if ( j==p ) continue;
            e=build ( j,no ,d+1 );
        }
        end[no]=e;
        return e;
    }
    bool isParent ( int x, int y ) {
        int n2=start[y];
        if ( start[x]<n2 &&n2<end[x] ) return 1;
        return 0;

    }
};
const int MOD=1000000007;
int modPow ( ll b, int e ) {
    ll r=1;
    while ( e ) {
        if ( e&1 ) r=b*r%MOD;
        b=b*b%MOD;
        e>>=1;
    }
    return r;
}
ll modinv ( int x ) {
    return modPow ( x, MOD-2 );
}
// void dfs(int v,int p, vi & vis, vi &A,  vector<vi>  &G){
//     vis[v] += 1;
//     for(int j=0;j<=A[v];++j){
//         for(int i=0;i<G[v].size();++i){
//             if(G[v][i]!=p)
//                 dfs(G[v][i],v);
//         }
//     }
// }
// void solveBF(vector<vi &> adj,vi A, int q, vll vis){
//       vi res;
//     rep ( i,q ) {
//         int t;
//         cin>>t;
//         if ( t==1 ) {
//
//             int v,x;
//
//             cin>>v>>x;
//             v--;
//              ll ov=A[v];
//             ll m=modinv ( ov ) *x;
//             int s=dfs.start[v] +1;
//             int e=dfs.end [v];
//
//             reu ( j,s,e ) vis[j]=vis[j]*m%MOD;
//             A[i]=x;
//         } else {
//             ll su=0;
//             int v;
//             cin>>v;
//             v--;
//             int s=dfs.start[v] ;
//             int e=dfs.end [v];
// //             cout<<s<<" "<<e<<endl;
//             reu ( j,s,e ) su+=vis[j];
//             res.push_back ( su%MOD );
//         }
//     }
//     for ( int r: res ) cout<<r<<'\n';
// }
struct MultAdd {
    vll tree;
    vll mult;
    int n;
    int size;
    MultAdd ( int _n ) {
        n=1;
        while ( n<_n ) n*=2;
        size=2*n;
        tree=vll ( size,1 );
        mult=vll ( size, 1 );
        rep(i,n)multi(i,i+1,1);
    }

    void push ( int no ) {
        if ( mult[no]==1 ) return ;
        ll m=mult[no];
        mult[no]=1;
        tree[no]=tree[no]*m%MOD;
        mult[2*no]=mult[2*no]*m%MOD;
        mult[2*no+1]=mult[2*no+1]*m%MOD;
    }

    ll sum ( int no, int l, int r, int s, int e ) {
        if ( s<=l &&e>=r ) {
            return mult[no]*tree[no]%MOD;
        }
        ll su=0;
        push ( no );
        int sp= ( l+r ) >>1;
        if ( s<sp ) su+=sum ( 2*no, l,sp,s,e );
        if ( sp<e ) su+=sum ( 2*no+1,sp,r, s,e );
        return su;
    }
    int sum ( int s, int e ) {
        if ( e<=s ) return 0;
        return sum ( 1,0,n,s,e ) %MOD;

    }
    void multi ( int no, int l, int r, int s, int e, int f ) {
//         cout<<"mult "<<l<<" "<<r<< " "<<s<<" "<<e<<endl;
        if ( s<=l &&e>=r ) {
            mult[no]=mult[no]*f%MOD;
            return;
        }
        push ( no );
        int sp= ( l+r ) >>1;
        if ( s<sp ) multi ( 2*no,l,sp,s,e,f );
        if ( sp<e ) multi ( 2*no+1,sp,r, s,e,f );
        tree[no]= ( tree[2*no]*mult[2*no]+tree[2*no+1]*mult[2*no+1] ) %MOD;

    }
    void multi ( int s, int e, int f ) {
        if ( e<=s ) return;
        multi ( 1,0,n,s,e,f );
    }
};

int main() {
    ios_base::sync_with_stdio ( false );
    int n,q;
    cin>>n>>q;
    vector<vi> adj ( n );
    rep ( i,n-1 ) {
        int u,v;
        cin>>u>>v;
        u--;
        v--;
        adj[u].push_back ( v );
        adj[v].push_back ( u );
    }
    vi A ( n );
    cin>>A;

//     cout<<A;

    DFSSort dfs ( adj );
    MultAdd ma ( n );
//     vll vis ( n,1 );
    rep ( i,n ) {
        int s=dfs.start[i] +1;
        int e=dfs.end [i];
//          reu ( j,s,e ) vis[j]=vis[j]*A[i]%MOD;
        ma.multi ( s,e,A[i] );
//         cout<<ma.mult;
    }
//     cout<<vis<<endl;
    vi res;
    rep ( i,q ) {
//         cout<<i<<endl;
        int t;
        cin>>t;
        if ( t==1 ) {

            int v,x;

            cin>>v>>x;
            v--;
            ll ov=A[v];
            ll m=modinv ( ov ) *x%MOD;
            int s=dfs.start[v] +1;
            int e=dfs.end [v];
            ma.multi ( s,e,m );
//              reu ( j,s,e ) vis[j]=vis[j]*m%MOD;
            A[v]=x;
//             cout<<ma.mult;
        } else {
            ll su=0;
            int v;
            cin>>v;
            v--;
            int s=dfs.start[v] ;
            int e=dfs.end [v];
//              cout<<s<<" "<<e<<endl;
//             ll su2=0;
//             reu ( j,s,e ) su2+=vis[j];
//             su2%=MOD;
             su=ma.sum ( s,e );
//             if( su!=su2%MOD ){cout<<" "<<su<<" "<<su2<<endl;assert(0);}
           
            res.push_back ( su%MOD );
        }
    }
    for ( int r: res ) cout<<r<<'\n';
}

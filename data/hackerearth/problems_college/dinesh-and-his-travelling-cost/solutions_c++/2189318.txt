#include<bits/stdc++.h>
#include<queue>
using namespace std;
#define v vector
#define pb push_back
#define ll long long
#define gc getchar
#define ft first
#define sd second
#define pr pair<int,int>
#define mp make_pair
#define loop(i,n) for(i=0;i<n;i++)
#define ALL(a) a.begin(),a.end()
int fr()
{
int t=0;
int flag=0;
char ch=gc();
while(ch<33)
ch=gc();
if(ch=='-')
{
    flag=1;
    ch=gc();
}
while(ch>32)
{t=t*10+ch-'0';
ch=gc();
}
if(flag==1)
    return ((-1)*t);
else
    return t;
}
struct cmp
{
    bool operator()(pr a,pr b)
    {
        return a.ft>b.ft;
    }
};
int n;
v<pr > c;
v<v<pr> > adj(501,c);
v<pair<int,int> > dis(501,make_pair(-1,-1));
void diakstra(int s)
{
    priority_queue<pr,v<pr>,cmp> q;
    int vis[500]={0};
    q.push(mp(0,s));
    dis[s].ft=0;
    while(!q.empty())
    {
        int flag=0,source,i;
        pr u;
        u=q.top();
        q.pop();
        while(vis[u.sd]==1)
        {
            if(q.size()==0)
            {
                flag=1;
                break;
            }
            else
                {u=q.top();
                q.pop();
                }
        }
        if(flag==1)
            break;
        int new_dis,bet_dis,ver;
        int pre_dis=u.first;
        source=u.second;
        for(i=0;i<adj[source].size();i++)
        {
            ver=adj[source][i].first;
            bet_dis=adj[source][i].second;
            new_dis=pre_dis+bet_dis;
            if(dis[ver].first==-1||new_dis<dis[ver].first)
            {
                dis[ver].first=new_dis;
                dis[ver].second=source;
                q.push(mp(new_dis,ver));
            }
        }
        vis[source]=1;
    }
}
int main(void)
{
    ios::sync_with_stdio(false);
    #ifndef ONLINE_JUDGE
freopen("input.txt", "r", stdin);
freopen("output.txt", "w", stdout);
#endif
    int i,j,k,a,b,l,m,x,w,u,q,flag=1,t;
    n=fr();
    for(i=0;i<n;i++)
    {
        a=fr();
        b=fr();
        w=fr();
        adj[a].pb(mp(b,w));
        adj[b].pb(mp(a,w));
    }
    u=fr();
    q=fr();
    diakstra(u);
    while(q--)
    {
        x=fr();
        k=dis[x].ft;
        if(k!=-1)
            printf("%d\n",k);
        else
            printf("NO PATH\n");
    }
    return 0;
}

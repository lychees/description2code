#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
using namespace std;
#define MOD 1000000007
long long int n;
long long int dp[65][5][2];
int t;
vector<int> v;
long long int way(int b, int c, int flag){
	if (b == v.size()){
		if (flag==1&&c == 0){
			dp[b][c][flag] = 1;
			return 1;
		}
		else{
			dp[b][c][flag] = 0;
			return 0;
		}
	}
	else{
		if (dp[b][c][flag] >= 0){
			return dp[b][c][flag];
		}
		dp[b][c][flag] = 0;
		for (int i = 0; i < 2; i++){
			for (int j = 0; j < 2; j++){
				for (int k = 0; k < 2; k++){
					int cc = i + j + k+c;
					cc /= 2;
					int bit = (i+j+k+c) % 2;
					int ff = 0;
					if (bit != v[b]){
						continue;
					}
					else{
						if ((i&j&k)||flag){
							ff = 1;
						}
						dp[b][c][flag] += way(b + 1, cc, ff);
						dp[b][c][flag] %= MOD;
					}
				}
			}
		}
		dp[b][c][flag] %= MOD;
		return dp[b][c][flag];
	}
}
int main(){
	scanf("%d", &t);
	long long int ans = 0;
	while (t--){
		memset(dp, -1, sizeof(dp));
		scanf("%lld", &n);
		v.clear();
		long long int kari = n;
		while (kari){
			v.push_back(kari & 1);
			kari >>= 1;
		}
		ans = way(0, 0, 0);
		ans %= MOD;
		printf("%lld\n", ans);
	}
	return 0;
}
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
vector<vi> adj;
vi gender;
vi found;

bool miss=0;
vpii sear ( int no,bool group ) {
    assert ( !found[no] );
    found[no]=1+group;
    vpii res ( 2 );
    if ( gender[no] )
        res[group].second++;
    else res[group].first++;
    for ( int j: adj[no] ) {
        if ( !found[j] ) {
            vpii r=sear ( j,!group );
            rep ( i,2 ) {
                res[i].first+=r[i].first;
                res[i].second+=r[i].second;

            }
        } else if ( found[j]!=1+!group ) miss=1;
    }
    return res;
}
int main() {
    ios_base::sync_with_stdio ( false );
    int n,m;
    cin>>n>>m;
    gender=vi ( n );
    rep ( i,n ) {
        char c;
        cin>>c;
        if ( c=='B' ) gender[i]=1;

    }
    adj=vector<vi> ( n );
    rep ( i,m ) {
        int x;
        int y;
        cin>>x>>y;x--; y--;
        adj[x].push_back ( y );
        adj[y].push_back ( x );

    }
    found=vi ( n );
    int wrong=0;
    rep ( i,n ) {
        if ( !found[i] ) {
            vpii res=sear ( i,0 );
            if ( miss ) {
                cout<<"Not possible\n";
                return 0;

            }
            if ( res[0].first+res[1].second>res[1].first+res[0].second )
                wrong+=res[1].first+res[0].second;
            else wrong+=res[0].first+res[1].second;

        }

    }
    cout<<wrong<<endl;

}

#include <bits/stdc++.h>
#define ll long long
using namespace std;
ll int l[51],p[51];//Length & prefix array
char s[51][1010];
char myfind(ll int j,ll int n)
{
	if(n==0)
	return s[0][j];
	ll int x;
	x=p[n]-l[n];
	//~ cout<<"here "<<n<<" "<<x/2<<" "<<j<<endl;
	if(j>=x && j<p[n]) //From the last string
	{
		return s[n][j-x]; 
	} //Remaining part willl always be even because its string +rev(string) that means twice length of string 
	else if(j>=0 && j<(x/2)) //If its part of string
	{
		return myfind(j,n-1);
	}
	else //Its part of rev(string)
	{
		j=(x-1-j);
	
		return myfind(j,n-1);
	}
}
int main()
{
	ll int test;
	scanf("%lld",&test);
	while(test--)
	{
		ll int n,m;
		scanf("%lld%lld",&n,&m);
		ll int i,j;
		for(i=0;i<n;i++)
		{
			scanf("%s",s[i]);
			if(i==0)
			{
				l[i]=strlen(s[i]);
				p[i]=l[i];
			}
			else
			{
				l[i]=strlen(s[i]);
				p[i]=2*p[i-1]+l[i]; //Length
				//~ p[i]+=p[i-1]; //Prefix sum of length
			}
		}
		//Check length & prefix array :)
		//~ for(i=0;i<n;i++)
		//~ {
			//~ cout<<l[i]<<" "<<p[i]<<endl;
		//~ }
		//Queries
		for(i=0;i<m;i++)
		{
			scanf("%lld",&j);
			printf("%c",myfind(j,n-1));
		}
		printf("\n");
	}
	return 0;
}

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
#include <bitset>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define y1 __y1
#define sqr(x) ((x) * (x))
 
typedef long long li;
typedef long double ld;
typedef pair<li, li> pt;
 
const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-9;
const ld pi = ld(3.1415926535897932384626433832795);
 
inline bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}
 
inline int myrand()
{
    return (rand() ^ (rand() << 15));
}
 
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
 
const int N = 1111;

inline pt operator +(const pt &a, const pt &b)
{
	return mp(a.x + b.x, a.y + b.y);
}

inline pt operator -(const pt &a, const pt &b)
{
	return mp(a.x - b.x, a.y - b.y);
}

inline li cross(const pt &a, const pt &b)
{
	return a.x * b.y - a.y * b.x;
}

inline int sign(const li &X)
{
	if(X > 0)
		return 1;
	if(X < 0)
		return -1;
	return 0;
}

int n;
pt a[N];

inline void gen()
{
    return;
}
 
inline bool read()
{
	if(!(cin >> n))
		return false;

	forn1(i, n)
	{
		assert(cin >> a[i].x >> a[i].y);
	}

    return true;
}

inline void solve()
{
	int ans = 0;

	for(int i = 1; i < n; i++)
	{
		pt v = a[i + 1] - a[i];
		ans++;
		for(int j = i + 2; j <= n; j++)
		{
			pt nv = a[j] - a[i];
			if(cross(v, nv) >= 0)
			{
				ans++;
				v = nv;
			}
		}
	}

	cout << ans << endl;
    return;
}
 
int main()
{
#ifdef _DEBUG
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
 
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;
 
    srand(int(time(NULL)));

	int T = 1;
	//assert(scanf("%d", &T) == 1);
 
	forn(i, T)
	{
		assert(read());
		solve();
	}
 
#ifdef _DEBUG
    cerr << "TIME == " << clock() << " ms" << endl;
#endif
    return 0;
} 
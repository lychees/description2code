import math
#from fractions import gcd
def gcd(x, y):
    while y != 0:
        (x, y) = (y, x % y)
    return x
'''
def nCr(n,r):
    f = math.factorial
    return f(n) / f(r) / f(n-r)
ncr = [[1 for _ in xrange(31)] for _ in xrange(31)]
for i in xrange(1,31):
	for j in xrange(1,31):
		if i<j:
			ncr[i][j] = 0
			continue
		ncr[i][j] = nCr(i,j)

sei = [[(0,0) for _ in xrange(31)] for _ in xrange(31)] # [r][m]
for i in range(1,31):
	sei[0][i] = (i,1)
for r in xrange(1,31):
	for m in xrange(1,31):
		#tmp = pow(2,(m+1)*(r-1))-pow(2,r-1)+pow(2,m*(r-1))-pow(2,m*r)
		#tmp1 = (pow(2,r)-1)*pow(2,m*r-m)*(pow(2,r-1)-1)
		#tmp = (pow(2,m*r-m)-1)*(pow(2,r)-1) - (pow(2,r-1)-1)*(pow(2,m*r)-1)
		tmp, tmp1 =pow(pow(2,1)-1,r), pow(pow(2,1),r)
		for i in xrange(2,m+1):
			t2, t3 = pow(pow(2,i)-1,r), pow(pow(2,i),r)
			tmp,tmp1 = tmp*t3+t2*tmp1,tmp1*t3
			
			tm = abs(gcd(tmp,tmp1))
			tmp /= tm
			tmp1 /= tm
			
		if r&1:
			sei[r][m] = (-tmp,tmp1)
		else:
			sei[r][m] = (tmp,tmp1)
			'''
T = input()

for ti in xrange(T):
	m,n = map(int,raw_input().split())
	
	r =  pow(2,n)-1
	p =  pow(2,m+n)-1
	r = int(r)
	p = int(p)
	#print r,p
	#gc = gcd(p,r)
	#p /= gc
	#r /= gc
	q =  pow(2,m+n)*r
	q = int(q)
	#gc = gcd(p,q)
	#p /= gc
	#q /= gc
	print str(p)+'/'+str(q)
	#print "%d%s%d" % (p,'/',q)
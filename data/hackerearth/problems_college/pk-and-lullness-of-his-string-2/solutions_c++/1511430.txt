#include <bits/stdc++.h>
using namespace std;
const int mod=1000000007;

long long power(long long a,long long b)
{
	long long res=1;
	while(b>0)
	{
		if(b%2==1)
		 res=(res*a)%mod;
		a=(a*a)%mod;
		b/=2;
	}
	return res;
}

long long fact[100001],inv[100001];

long long int lefts[100001],rights[100001];

long long ncr(int n,int r)
{
	return (((fact[n]*inv[r])%mod)*inv[n-r])%mod;
}

int main()
{
    fact[0]=fact[1]=inv[0]=inv[1]=1;
    
    for(int i=2; i<=100000; i++)
    {
    	fact[i]=(i*fact[i-1])%mod;
    	inv[i]=power(fact[i],mod-2);
    }
    
    int t;
    cin>>t;
    
    while(t--)
    {
    	string s;
    	int k;
    	cin>>s>>k;
    
    	for(int i=0; i<s.size(); i++)
    	{
    		if(i==0)
    	 		lefts[i]=(s[i]=='l');
    		else
    		 	lefts[i]=lefts[i-1]+(s[i]=='l');
    	}
    
    	for(int i=s.size()-1; i>=0; i--)
    	{
    		if(i==s.size()-1)
    	 		rights[i]=(s[i]=='l');
    		else
    	 		rights[i]=rights[i+1]+(s[i]=='l');
    	}
    
    	k=(k-1);
    	k/=2;
    
    	long long ans=0;
    	for(int i=0; i<s.size(); i++)
    	{
    		if(s[i]=='u' && k==0)
    		{
    		 	ans++;
    		}
    		else if(s[i]=='u')
    		{
    			long long x=lefts[i];
    			long long y=rights[i];
    			
    			if(x<k || y<k)
    			 continue;
    			ans=(ans+ncr(x,k)*ncr(y,k))%mod;
    		}
    	}
   		 cout<<ans<<endl;
    }
    
    return 0;
}

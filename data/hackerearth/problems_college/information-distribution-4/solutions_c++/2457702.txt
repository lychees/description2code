// Aditya Shah

#include <bits/stdc++.h>

using namespace std;

typedef long long LL;

LL p(LL base, LL power, LL MOD) {
	LL res = 1;
	while (power) {
		if (power & 1) {
			res = res * base % MOD;
		}
		base = base * base % MOD;
		power >>= 1;
	}
	return res;
}

bool isPrime(int n) {
	for (int i = 2; i < n; ++i) {
		if (n % i == 0) return false;
	}
	return true;
}

LL fact(LL n, LL r, LL k) {
	if (n < r) return 0;
	LL res = 1;
	for (int i = 0; i < r; ++i) {
		res = res * (n - i) % k;
		res = res * p(i + 1, k - 2, k) % k;
	}
	return res;
}

LL solve(LL N, LL R, LL P) {
	LL res = 1;
	while (N > 0 || R > 0) {
		res = res * fact(N % P, R % P, P) % P;
		N /= P;
		R /= P;
		if (!res) break;
	}
	return res;
}

LL mul_inv(LL a, LL b) {
	LL b0 = b, t, q;
	LL x0 = 0, x1 = 1;
	if (b == 1) return 1;
	while (a > 1) {
		q = a / b;
		t = b, b = a % b, a = t;
		t = x0, x0 = x1 - q * x0, x1 = t;
	}
	if (x1 < 0) x1 += b0;
	return x1;
}

LL chinese_remainder(LL *n, LL *a, LL len) {
	LL p, i, prod = 1, sum = 0;

	for (i = 0; i < len; i++) prod *= n[i];

	for (i = 0; i < len; i++) {
		p = prod / n[i];
		sum += a[i] * mul_inv(p, n[i]) * p;
	}

	return sum % prod;
}

LL g[105], h[105], cnt;

int main() {
	//freopen("input.in", "r", stdin);

	vector<int> primes;
	for (int i = 2; i < 101; ++i) {
		if (isPrime(i)) {
			primes.push_back(i);
		}
	}

	LL T, N, M, K, MOD;

	cin >> T;

	while (T--) {
		LL ans = 1;
		cnt = 0;
		cin >> N >> M >> K;
		MOD = K;
		for (int i = 0; i < primes.size(); ++i) {
			if (K % primes[i] == 0) {
				g[cnt] = solve(N - 1, M - 1, primes[i]);
				h[cnt] = primes[i];
				++cnt;
			}
		}
		ans = chinese_remainder(h, g, cnt);
		if (MOD == 1) ans = 0;
		cout << ans << "\n";
	}

	return 0;
}
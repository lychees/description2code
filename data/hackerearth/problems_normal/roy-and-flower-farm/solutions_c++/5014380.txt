#include <bits/stdc++.h>
using namespace std;
int prof[105],loss[105],val[105];
int dp[105][10001];
void knapsack(int w,int n)
{
	int i,j;
	for(i=0;i<n+1;i++)
	{
		dp[i][0]=0;
	}
	for(i=0;i<w+1;i++)
	{
		dp[0][i]=0;
	}
	
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=w;j++)
		{
			dp[i][j]=dp[i-1][j];
			if(j-loss[i]>=0)
			{
				dp[i][j]=max(dp[i-1][j-loss[i]]+prof[i],dp[i][j]);
			}
		}
	}
}
int main()
{
	int t,n,w,i;
	cin>>t;
	while(t--)
	{
		memset(dp,0,sizeof(dp));
	cin>>n>>w;
	for(i=1;i<=n;i++)
	{
		cin>>prof[i]>>loss[i];
	}
    knapsack(w,n);
    int mini=0;
    for(i=1;i<=w;i++)
    {
    	if(dp[n][mini]-mini<dp[n][i]-i)
    	mini=i;
    }
    cout<<mini<<" "<<dp[n][mini]-mini+w<<endl;
	}
    return 0;
}

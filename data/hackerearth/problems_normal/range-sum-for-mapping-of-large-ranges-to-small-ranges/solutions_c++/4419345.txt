using namespace std;
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#define ll long long
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
#define input freopen("input.in","r",stdin);
#define output freopen("output.out","w",stdout);
#define e printf("\n");
#define all(it,v) for(it=(v).begin();it!=(v).end();it++)
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define pii pair<ll,ll>
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef vector<vector<ll> > mat;
const ll mx=100001;
const ll mod=1000000007;
const ll inf=0x3f3f3f3f;
void solve();
ll fast_exp(ll a,ll n)
{
  if(n==1) return a;

   ll t=fast_exp(a,n/2);
   if(n&1)
    return ((((t%mod)*(t%mod))%mod)*a)%mod;
   else
    return ((t%mod)*(t%mod))%mod;
}
ll inv;
int main()
{
  inv=fast_exp(2,mod-2);
  int t=1;
  cin>>t;
  while(t--)
  solve();
  return 0;
}
vector<int> g[mx];
bool vis[mx];
void ae(int u,int v)
{
  g[u].push_back(v);
  g[v].push_back(u);
}
int ct;
void dfs(int u)
{
   vis[u]=true;
   ct++;
   for(int i=0;i<g[u].size();i++)
   {
      int w=g[u][i];
      if(!vis[w])
      dfs(w);
   }
}
void solve()
{
  int i,j,k,n,m,x,y;
  cin>>n>>m;
  rep(i,1,n)
   g[i].clear();
  memset(vis,false,sizeof vis);
  while(m--)
  {
    cin>>x>>y;
    ae(x,y);
  } 
  ll ans=1;
  rep(i,1,n)
  {
    if(!vis[i])
    {
      ct=0;
      dfs(i);
      ll u=ct;
      if(u>1)
       {
         u=(u*(u-1));
         u%=mod;
         u*=inv;
         u%=mod;
       } 
      ans*=u;
      ans%=mod;
    }
  }
  printf("%lld\n",ans);
}




























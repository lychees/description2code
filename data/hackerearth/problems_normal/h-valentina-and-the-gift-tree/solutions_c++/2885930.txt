#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define root 0
#define N 101000
#define LN 18

vector <int> adj[N], indexx[N];
int baseArray[N], ptr;
int chainNo, chainInd[N], chainHead[N], posInBase[N];
int depth[N], pa[LN][N], otherEnd[N], subsize[N];

int cst[N];
struct no {
    ll lsum, rsum, msum, sum;
};
no tree[N*6], qt[N*6];

no mergeT(no left,no right)
{
    no temp;
    temp.lsum = max( left.lsum, left.sum + right.lsum );
    temp.rsum = max( right.rsum, right.sum + left.rsum );
    temp.msum = max( left.msum, max( right.msum, left.rsum + right.lsum ) );
    temp.sum = left.sum + right.sum;
    return temp;
}
void init( int node, int i, int j ) {
    if ( i == j ) {
        tree[node] = ( ( no ) { baseArray[ i ], baseArray[ i ], baseArray[ i ], baseArray[ i ] } );
    }
    else {
        init( node * 2, i, ( i + j ) / 2 );
        init( node * 2 + 1, ( i + j ) / 2 + 1, j );
        no left = tree[ node * 2 ], right = tree[ node * 2 + 1 ];
        tree[ node ].lsum = max( left.lsum, left.sum + right.lsum );
        tree[ node ].rsum = max( right.rsum, right.sum + left.rsum );
        tree[ node ].msum = max( left.msum, max( right.msum, left.rsum + right.lsum ) );
        tree[ node ].sum = left.sum + right.sum;
    }
}

no query_tree( int node, int a, int b, int i, int j ) {
    if ( i == a && j == b ) {
        return tree[ node ];
    }
    if ( j <= ( a + b ) / 2 ) {
        return query_tree( node * 2, a, ( a + b ) / 2, i, j );
    }
    if ( i > ( a + b ) / 2 ) {
        return query_tree( node * 2 + 1, ( a + b ) / 2 + 1, b, i, j );
    }
    no left = query_tree( node * 2, a, ( a + b ) / 2, i, ( a + b ) / 2 );
    no right = query_tree( node * 2 + 1, ( a + b ) / 2 +  1, b, ( a + b ) / 2 + 1, j );
    return ( ( no ) {
                max( left.lsum, left.sum + right.lsum ),
                max( right.rsum, right.sum + left.rsum ),
                max( left.msum, max( right.msum, right.lsum + left.rsum ) ),
                left.sum + right.sum } );
}

/*
 * query_up:
 * It takes two nodes u and v, condition is that v is an ancestor of u
 * We query the chain in which u is present till chain head, then move to next chain up
 * We do that way till u and v are in the same chain, we query for that part of chain and break
 */

no query_up(int u, int v) {

	int uchain, vchain = chainInd[v], ans = -1;
	// uchain and vchain are chain numbers of u and v
	no res;
	bool flagBegin=true;
	while(1) {
		uchain = chainInd[u];
		if(uchain == vchain) {
			// Both u and v are in the same chain, so we need to query from u to v, update answer and break.
			// We break because we came from u up till v, we are done
			no temp =query_tree(1, 0, ptr-1, posInBase[v], posInBase[u]);
			if(flagBegin)
                {
                    res = temp;
                    flagBegin = false;
                }
            else
                res = mergeT(temp,res);
            break;
		}
		no temp =query_tree(1, 0, ptr-1, posInBase[chainHead[uchain]], posInBase[u]);
		// Above is call to segment tree query function. We do from chainHead of u till u. That is the whole chain from
		// start till head. We then update the answer
		if(flagBegin)
                {
                    res = temp;
                    flagBegin = false;
                }
            else
                res = mergeT(temp,res);
		u = chainHead[uchain]; // move u to u's chainHead
		u = pa[0][u]; //Then move to its parent, that means we changed chains
	}
	return res;
}

/*
 * LCA:
 * Takes two nodes u, v and returns Lowest Common Ancestor of u, v
 */
int LCA(int u, int v) {
	if(depth[u] < depth[v]) swap(u,v);
	int diff = depth[u] - depth[v];
	for(int i=0; i<LN; i++) if( (diff>>i)&1 ) u = pa[i][u];
	if(u == v) return u;
	for(int i=LN-1; i>=0; i--) if(pa[i][u] != pa[i][v]) {
		u = pa[i][u];
		v = pa[i][v];
	}
	return pa[0][u];
}

void query(int u, int v) {
	/*
	 * We have a query from u to v, we break it into two queries, u to LCA(u,v) and LCA(u,v) to v
	 */

	 no res;
	int lca = LCA(u, v);
	//printf("query %d %d lca %d\n",u,v,lca);
	if(u==lca)
    {
        res = query_up(v,lca);
        printf("%lld\n",res.msum);
        return;
    }
	int diff = depth[u]-depth[lca]-1;
	int nd = u;
	for(int i=0; i<LN; i++) if( (diff>>i)&1 ) nd = pa[i][nd];

	no t1 = query_up(u, nd); // One part of path
	no t2 = query_up(v, lca); // another part of path

    //printf("t1: lsum:%lld rsum:%lld msum:%lld sum:%lld\n",t2.lsum,t2.rsum,t2.msum,t2.sum);
	swap(t1.lsum,t1.rsum);
	res.lsum = max( t1.lsum, t1.sum + t2.lsum );
    res.rsum = max( t2.rsum, t2.sum + t1.rsum );
    res.msum = max( t2.msum, max( t1.msum, t1.rsum + t2.lsum ) );
    res.sum = t2.sum + t1.sum;
	printf("%lld\n",res.msum);
}

/*
 * change:
 * We just need to find its position in segment tree and update it
 */

/*
 * Actual HL-Decomposition part
 * Initially all entries of chainHead[] are set to -1.
 * So when ever a new chain is started, chain head is correctly assigned.
 * As we add a new node to chain, we will note its position in the baseArray.
 * In the first for loop we find the child node which has maximum sub-tree size.
 * The following if condition is failed for leaf nodes.
 * When the if condition passes, we expand the chain to special child.
 * In the second for loop we recursively call the function on all normal nodes.
 * chainNo++ ensures that we are creating a new chain for each normal child.
 */
void HLD(int curNode, int prev) {
	if(chainHead[chainNo] == -1) {
		chainHead[chainNo] = curNode; // Assign chain head
	}
	chainInd[curNode] = chainNo;
	posInBase[curNode] = ptr; // Position of this node in baseArray which we will use in Segtree
	baseArray[ptr++] = cst[curNode];

	int sc = -1;
	// Loop to find special child
	for(int i=0; i<adj[curNode].size(); i++) if(adj[curNode][i] != prev) {
		if(sc == -1 || subsize[sc] < subsize[adj[curNode][i]]) {
			sc = adj[curNode][i];
		}
	}

	if(sc != -1) {
		// Expand the chain
		HLD(sc, curNode);
	}

	for(int i=0; i<adj[curNode].size(); i++) if(adj[curNode][i] != prev) {
		if(sc != adj[curNode][i]) {
			// New chains at each normal node
			chainNo++;
			HLD(adj[curNode][i], curNode);
		}
	}
}

/*
 * dfs used to set parent of a node, depth of a node, subtree size of a node
 */
void dfs(int cur, int prev, int _depth=0) {
	pa[0][cur] = prev;
	depth[cur] = _depth;
	subsize[cur] = 1;
	for(int i=0; i<adj[cur].size(); i++)
		if(adj[cur][i] != prev) {
			dfs(adj[cur][i], cur, _depth+1);
			subsize[cur] += subsize[adj[cur][i]];
		}
}

int main() {
    //freopen("input.txt","r",stdin);
	int t;
	//scanf("%d ", &t);
	//while(t--)
	 {
		ptr = 0;
		int n;
		scanf("%d", &n);
		// Cleaning step, new test case
		for(int i=0; i<n; i++) {
			adj[i].clear();
			//costs[i].clear();
			indexx[i].clear();
			chainHead[i] = -1;
			for(int j=0; j<LN; j++) pa[j][i] = -1;
		}
		for(int i=1; i<n; i++) {
			int u, v, c;
			scanf("%d %d", &u, &v);
			u--; v--;
			adj[u].push_back(v);
			//costs[u].push_back(c);
			indexx[u].push_back(i-1);
			adj[v].push_back(u);
			//costs[v].push_back(c);
			indexx[v].push_back(i-1);
		}
		for(int i=0;i<n;i++)
        {
            int c;
            scanf("%d",&c);
            cst[i]=c;
        }

		chainNo = 0;
		dfs(root, -1); // We set up subsize, depth and parent for each node
		HLD(root, -1); // We decomposed the tree and created baseArray
		init(1,0,ptr-1); // We use baseArray and construct the needed segment tree

		// Below Dynamic programming code is for LCA.
		for(int i=1; i<LN; i++)
			for(int j=0; j<n; j++)
				if(pa[i-1][j] != -1)
					pa[i][j] = pa[i-1][pa[i-1][j]];

        int q;
        scanf("%d",&q);

		while(q--) {
			int u,v;
			scanf("%d %d",&u,&v);
			u--;v--;
			query(u,v);
		}
	}
}

// https://www.hackerearth.com/problem/algorithm/oliver-and-the-battle-1/

#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<string.h>
#include<queue>
using namespace std;
typedef pair<long long int,long long int> ii;
long long int mat[1002][1002];
long long visited[1002][1002];
long long trops;

long long int findans(long long int x,long long int y)
{
	long long int nodecount=0;
	long long int x1,y1;
	queue< ii > Q;
	Q.push(make_pair(x,y));
	visited[x][y]=1;
	while(!Q.empty())
	{
		x1=Q.front().first;
		y1=Q.front().second;
		Q.pop();
		
		nodecount++;
		for(int i=-1;i<=1;i++)
		{
			for(int j=-1;j<=1;j++)
			{
				if(!visited[x1+i][y1+j] && mat[x1+i][y1+j])
				{
					Q.push(make_pair(x1+i,y1+j));
					visited[x1+i][y1+j]=1;
				}
			}
		}
	}
	return nodecount;
}
int main()
{
    long long int tc;
	
	scanf("%lld",&tc);
	while(tc--)
	{
		long long int ans=0;
		long long trops=0;
		long long int n,m;
		scanf("%lld %lld",&n,&m);
		memset(mat,0,sizeof(mat));
		memset(visited,0,sizeof(visited));
		for(long long int i=1;i<=n;i++)
		{
			for(long long int j=1;j<=m;j++)
				scanf("%lld",&mat[i][j]);
		}
		for(long long int i=1;i<=n;i++)
		{
			for(long long int j=1;j<=m;j++)
			{
				if(!visited[i][j] && mat[i][j])
				{
					ans=max(findans(i,j),ans);
					trops++;
				}
			}
		}
		printf("%lld %lld\n",trops,ans);
	}
	
	return 0;
}

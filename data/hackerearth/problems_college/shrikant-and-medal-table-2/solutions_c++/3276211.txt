#include<bits/stdc++.h>
#define sz(x) (int)(x.size())
 
using namespace std;
typedef long long lld;
 
 
int main()
{
	 //freopen("Input5.txt", "r", stdin);
	 //freopen("Output5.txt", "w", stdout);
	
     int n; // number of events
     scanf("%d\n", &n);
     vector<string> vec;
     map<string, int> gold;
     map<string, int> silver;
     map<string, int> bronze;
     map<string, int> :: iterator itm;
     set<string> S;
     set<string> :: iterator it;
     vector< pair<int, pair<int, pair<int, string> > > > veci;
     for(int i = 0; i < n; i++)
     {
		 string s,t,u;
		 cin >> s >> t >> u;
		 gold[s]++;
		 silver[t]++;
		 bronze[u]++;
		 S.insert(s); 
		 S.insert(t); 
		 S.insert(u); 
	 }
	 int GOLD, SILVER, BRONZE;
	 GOLD = 0;
	 SILVER = 0;
	 BRONZE = 0;
	 for(it = S.begin(); it != S.end(); it++)
	 {
		 int g, s, b;
		 g = s = b = 0;
		 string pl = *it;
		 itm = gold.find(pl);
		 if(itm != gold.end()) g = itm->second;
		 GOLD += g;
		 
		 itm = silver.find(pl);
		 if(itm != silver.end()) s = itm->second;
		 SILVER += s;
		 
		 itm = bronze.find(pl);
		 if(itm != bronze.end()) b = itm->second;
		 BRONZE += b;
		 
		 veci.push_back(make_pair(-g,make_pair(-s, make_pair(-b, pl))));  
	 }
	 sort(veci.begin(), veci.end());
	 for(int i = 0; i < sz(veci); i++)
	 {
		 cout << veci[i].second.second.second << " " << -veci[i].first << " "  << -veci[i].second.first << " " << -veci[i].second.second.first << endl;
		 
	 }
	 assert( (GOLD == SILVER) && (SILVER == BRONZE)  && (GOLD == n));
	 // will number of gold, silver and bronze distributed would be the same
     // yes because in each event one medal of a kind is distributed
     // so total number of g,s,b are same and equal to number of events
     return 0;
}
#include<iostream>
using namespace std;


int isAvailable(int puzzle[][9], int row, int col, int num)
{
    int rowStart = (row/3) * 3;
    int colStart = (col/3) * 3;
    int i, j;

    for(i=0; i<9; ++i)
    {
        if (puzzle[row][i] == num) return 0;
        if (puzzle[i][col] == num) return 0;
        if (puzzle[rowStart + (i%3)][colStart + (i/3)] == num) return 0;
    }
    return 1;
}

int fillSudoku(int puzzle[][9], int row, int col)
{
    int i;
    if(row<9 && col<9)
    {
        if(puzzle[row][col] != 0)
        {
            if((col+1)<9) return fillSudoku(puzzle, row, col+1);
            else if((row+1)<9) return fillSudoku(puzzle, row+1, 0);
            else return 1;
        }
        else
        {
            for(i=0; i<9; ++i)
            {
                if(isAvailable(puzzle, row, col, i+1))
                {
                    puzzle[row][col] = i+1;
                    if((col+1)<9)
                    {
                        if(fillSudoku(puzzle, row, col +1)) return 1;
                        else puzzle[row][col] = 0;
                    }
                    else if((row+1)<9)
                    {
                        if(fillSudoku(puzzle, row+1, 0)) return 1;
                        else puzzle[row][col] = 0;
                    }
                    else return 1;
                }
            }
        }
        return 0;
    }
    else return 1;
}

int main()
{
    int n,k,i,j;
    scanf("%d",&n);
    char a[n+1][9][9];
    for(k=0;k<n;k++)
    {
                    for(i=0;i<9;i++)
                    {
                                    scanf("%s",a[k][i]);
                                    
                    }
    }
    int ans=0;
    
    for(k=0;k<n;k++)
    {
    int puzzle[9][9];
    
                     for(i=0;i<9;i++)
                    {
                                    for(j=0;j<9;j++)
                                    {
                                                    puzzle[i][j]=a[k][i][j]-'0';
                                    }
                    }
    if(fillSudoku(puzzle, 0, 0))
    {
        for(i=0; i<9; ++i)
        {
                     ans=ans+(puzzle[i][i]);
            
        }
        
        
    }
    }
    
    cout<<ans<<endl;
    

    return 0;
}




    /*
    -----------------------------------------------------------------------------
    Author :            ---------------------------------------------------------
        RI$HABH $HARMA  ---------------------------------------------------------
        NIT WARANGAL    ---------------------------------------------------------
    -----------------------------------------------------------------------------
    */
    #include<iostream>
    #include<string.h>
    #include<math.h>
    #include<algorithm>
    #include<map>
    #include<stack>
    #include<queue>
    #include<vector>
    #include<stdio.h>
    #define pie 3.14159
    #define pi 2*acos(0.0)
    #define mod 1000000007
    #define LL long long

    using namespace std;

    long long int modularexponention(long long int b,long long int e,long long int m)
    {
        if(m==1)
            return 0;
        b=b%mod;
        long long int ans=1;
        while(e>0)
        {
            if(e%2==1)
                ans=(ans*b)%mod;
            e=e>>1;
            b=(b*b)%mod;
        }
        return ans;
    }

    long long int gcd(long long int a,long long int b)
    {
        if(b==0)
            return a;
        else
            return gcd(b,a%b);
    }

    long long int lcm(long long int a,long long int b)
    {
        return ((a*b)/gcd(a,b));
    }

    int readInt () {
	bool minus = false;
	int result = 0;
	char ch;
	ch = getchar();
	while (true) {
		if (ch == '-') break;
		if (ch >= '0' && ch <= '9') break;
		ch = getchar();
	}
	if (ch == '-') minus = true; else result = ch-'0';
	while (true) {
		ch = getchar();
		if (ch < '0' || ch > '9') break;
		result = result*10 + (ch - '0');
	}
	if (minus)
		return -result;
	else
		return result;
}

int a[10000001];

void sieve(LL n)
{
  //  for(int i=0;i<10000001;i++)
    //    a1[i]=1;
    LL m=sqrt(n);
    a[0]=1;
    a[1]=1;
    for(int i=2;i<=m;i++)
    {
        if(a[i]==0)
        {
            for(long long  j=i*i;j<=n;j=j+i)
            {
                a[j]=1;
            }
        }
    }
}

int lastoccurance(int a[],int left,int right,int n)
{
    int mid;
    while(right-left>1)
    {
        mid=(left+right)/2;
        if(a[mid]>n)
            right=mid;
        else
            left=mid;
    }
    return left;
}

int fristoccurance(int a[],int left,int right,int n)
{
    int mid;
    while(right-left>1)
    {
        mid=(left+right)/2;
        if(a[mid]>=n)
            right=mid;
        else
            left=mid;
    }
    return right;
}

int numberofoccurance(int a[],int n)
{

    int l=fristoccurance(a,0,14,12);
    int r=lastoccurance(a,0,14,12);
    if(a[l]==n && a[r]==n)
        return r-l+1;
    else
        return 0;
}
int bsearch(int a[],int low,int high,int p)
{
    int mid=(low+high)/2;
    if(high<low)
        return 0;
    else if(a[mid]==p)
        return 1;
    else if(a[mid]>p)
        return bsearch(a,low,mid-1,p);
    else
        return bsearch(a,mid+1,high,p);
}

    int main()
    {
//        ios::sync_with_stdio(false);
        //freopen("input.txt","r",stdin);

        LL n;
        n=readInt();
        queue <int> q;
        int order[n];
        LL time=0;
        int k=0;
        int l;
        for(int i=0;i<n;i++)
        {
            cin>>l;
            q.push(l);
        }
        for(int i=0;i<n;i++)
            cin>>order[i];
        for(int i=0;i<n;i++)
        {
            //cout<<"......."<<q.front()<<"....."<<"\n";
            if(order[k]==q.front())
            {
                time++;
                q.pop();
                k++;
            }
            else
            {
                int y;
            while(order[k]!=q.front())
            {
                y=q.front();
                q.pop();
                q.push(y);
                time++;
            }
            q.pop();
            time++;
            k++;
            }
            //cout<<time;
        }
        cout<<time<<"\n";
        return 0;
    }

#include <bits/stdc++.h>
using namespace std;
vector <list <int > > adj(110);
int num[110];
int low[110];
int t=0;
int v;
bool visited[110];
bool visited2[110];
int parent[110];
int out_degree[110];
int art[110];
int in_degree[110];
void dfs_num(int s)
{
	visited[s]=true;
	t++;
	num[s]=t;
	list <int > :: iterator i;
	for(i=adj[s].begin();i!=adj[s].end();i++)
	{
		if(!visited[*i])
		{
		parent[*i]=s;
		out_degree[s]++;
		dfs_num(*i);
		}
	}
}
int min1(int a, int b)
{
	if(a<b)
	return a;
	return b;
}
void dfs_low(int s)
{
	visited2[s]=true;
	low[s]=num[s];
	list <int > :: iterator i;
	for(i=adj[s].begin();i!=adj[s].end();i++)
	{
		if(!visited2[*i])
		{
			dfs_low(*i);
			low[s]=min1(low[s],low[*i]);
			if(num[s]<=low[*i] && out_degree[s]!=0 && parent[s]!=0)
		    art[s]=in_degree[s];
		}
		else if(parent[s]!=(*i))
		low[s]=min1(low[s],num[*i]);
	}
}
void add_edge(int x, int y)
{
	adj[x].push_back(y);
	adj[y].push_back(x);
	in_degree[x]++;
	in_degree[y]++;
}
int main()
{
	int m,i,x,y,q;
	cin>>v;
	cin>>m;
	while(m--)
	{
		cin>>x;
		cin>>y;
		add_edge(x,y);
	}
	for(i=1;i<=v;i++)
	{
	if(!visited[i])
	{
	dfs_num(i);
	dfs_low(i);
	if(out_degree[i]>1)
	art[i]=in_degree[i];
	}
	}
	cin>>q;
	while(q--)
    {
    	cin>>x;
    	if(art[x]==0)
    	cout<<"Not Satisfied"<<endl;
    	else
    	cout<<"Satisfied "<<art[x]<<endl;
    }
//    for(i=1;i<=v;i++)
//    {
//    	cout<<out_degree[i]<<"  "<<num[i]<<"  "<<low[i]<<"  "<<art[i]<<endl;
//    }
//   cout<<out_degree[1]<<endl;
    return 0;
}

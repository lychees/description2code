#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<map>
#include<vector>
#include<algorithm>
#include<cmath>
#include<cstdlib>
#include<set>
#include<stack>
#include<deque>
#include<queue>
#include <limits.h>
#define pb(x) push_back(x)
#define getcx getchar_unlocked
using namespace std;
int T[5000] ;    // contains the length of suffix which is also the prefix of prefix of s[i]
   // string to  find in
   char pattern[5000]; // string to find
     char text[5000] ;
int n,m;
void prefixsuffix()
{
     int matill=0;            // matched till the starting  i.e. the index now to match
     int curr=2;   // position in pattern
     T[0]=T[1]=0;             // always zero
     
     while(curr<m)                  // we match curr-1 => at l-1  we donot need to store T[l-1] at if reched here it means pattern found
     {
          if(pattern[curr-1]==pattern[matill])                          
             T[curr++]=++matill;
          else       // match broke 
             if(matill>0)     // otherwise it would result in infinite loop
                  matill=T[matill];     // for cases like ABCABD  where match broke at D     
          else
                T[curr++]=0;        
     }
     
     
     /*cout<<endl;
     for(int i=0;i<m;i++)
       cout<<pattern[i]<<" ";
        cout<<endl;
     for(int i=0;i<m;i++)
       cout<<T[i]<<" ";
        cout<<endl;*/
     
     
}
 int KMP()                 // returns the position of first occurence of pattern in text
 {
     
     prefixsuffix();
     int i=0;    // i denotes current position in text
     int j=0;    // j denotes current position in pattern
      for(;i<n;i++)
      {
                   if(pattern[j]==text[i])
                            {j++;
                            if(j==m)
                              return i-m+1;
                            }
                  else
                    if(j>0) 
                       {j=T[j];i--;} 
                              
     }
     return -1;    // in case no match
 }
 
int main()
{
   int t;
   scanf("%d",&t);
  fgets(pattern, 5000, stdin);
   while(t--)
   {
     fgets(pattern, 5000, stdin);
     fgets(text, 5000, stdin);
     n=strlen(text);
     m=strlen(pattern);
     n--;m--;
    
    if(KMP()>=0)
      printf("possible\n");
      else
      printf("not possible\n");
      }
    
   return 0;
}
 

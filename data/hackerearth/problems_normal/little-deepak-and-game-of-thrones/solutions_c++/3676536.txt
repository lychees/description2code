

    /*
    	 Solution to Little Deepak and Game of Thrones.
    	 Solution algorithm: Sweeping Line.
    	 */
    #include <bits/stdc++.h>
    using namespace std;
    const int N = 1000;
    int X1[N], Y1[N], X2[N], Y2[N];
    int Y[2*N], L[N], R[N];
    int main()
    { 
    	int cases, n, i, k, m, j, leftbound = 0;
    	long long A;
    	
    	scanf("%d\n", &cases);
    	assert(cases>=1);
    	assert(cases<=100); //Self-testing, LOL.
    	while (cases--) 
    	{ 
    		
    		// Reading input.
    		scanf("%d", &n); 
    		assert(n>=1);
    		assert(n<=1300);
    		for (i = 0; i < n; i++)
    		{
    				scanf("%d %d %d %d", &X1[i], &Y1[i], &X2[i], &Y2[i]); 
    	//Checking all the required assert conditions.
    			assert(X1[i]>=0);
    			assert(X1[i]<=1000000);
    	//
    			assert(Y1[i]>=0);
    			assert(Y1[i]<=1000000);
    			assert(X2[i]>=0);
    			assert(X2[i]<=1000000);
    //
    			assert(Y2[i]>=0);
    			assert(Y2[i]<=1000000);
    			assert(X2[i]>X1[i]);
    			assert(Y2[i]>Y1[i]);
    			//All assert conditions done, hopefully.
    		}
    		// Gather all y-coordinates and sort them.
    		for (i = 0; i < n; i++)
    		{ Y[2*i] = Y1[i];
    			Y[2*i+1] = Y2[i];
    		}
    		sort(Y, Y+2*n);
    		A = 0;
    		// Loop over all blocks of horizontal lines between two consecutive y-coordinates.
    		for (k = 0; k < 2*n-1; k++)
    		{ 
    			// Determine all maps in range.
    			m = 0;
    			for (i = 0; i < n; i++)
    				if (Y[k] >= Y1[i] && Y[k] < Y2[i])
    				{ L[m] = X1[i]; // Left side of a map.
    					R[m] = X2[i]; // Right side of a map.
    					m++;
    				}
    			// Sort all coordinates.
    			
    			sort(L, L+m);
    			sort(R, R+m);
    			// Scan from left to right.
    			for (i = j = 0; j < m;)
    			{ 
    				if (i < m && L[i] < R[j]) // Next coordinate is left side of new map.
    				{ if (i == j) // Nothing currently in view.
    					leftbound = L[i]; // Establish new boundary.
    					i++;
    				}
    				else // Next coordinate is right side of old map.
    				{ j++;
    					if (i == j) // Nothing in view anymore.
    						A += (long long)(Y[k+1] - Y[k]) * (R[j-1] - leftbound); // Add to area.
    				}
    			}
    		}
    		// Printing the output.
    		printf("%lld\n", A);
    	}
    	return 0;
    }


#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

void z_algorithm(const char *s, int n, int z[]) {
    int L = 0, R = 0;
    for(int i = 1; i < n; i ++) {
        if(i > R) {
            L = R = i;
            while(R < n && s[R-L] == s[R]) R ++;
            z[i] = R-L; R --;
        }else {
            int k = i-L;
            if(z[k] < R-i+1) z[i] = z[k];
            else {
                L = i;
                while(R < n && s[R-L] == s[R]) R ++;
                z[i] = R-L; R --;
            }
        }
    }
	z[0] = n;
}

int main() {
	int T;
	scanf("%d", &T);
	char *a = new char[200011], *b;
	rep(ii, T) {
		scanf("%s", a);
		int n = strlen(a);
		a[n] = '$';
		b = a + n + 1;
		scanf("%s", b);
		int m = strlen(b);
		vector<int> z(n + m + 2);
		z_algorithm(a, n + 1 + m, &z[0]);
		int ans = 0;
		rer(i, 1, n) if(n % i == 0 && m % i == 0) {
			bool ok = true;
			for(int j = 0; j < n; j += i)
				ok &= z[j] >= i;
			for(int j = 0; j < m; j += i)
				ok &= z[n+1+j] >= i;
			ans += ok;
		}
		printf("%d\n", ans);
	}
	return 0;
}

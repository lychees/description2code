#include<bits/stdc++.h>
using namespace std;

#ifndef ONLINE_JUDGE
    #define gc getchar
#else
    #define gc getchar_unlocked
#endif
#ifndef ONLINE_JUDGE
    #define pc putchar
#else
    #define pc putchar_unlocked
#endif
using namespace std;
long long int read_Long()
{
  char c = gc();
  while(c<'0' || c>'9')
  c = gc();
  long long int ret = 0;
  while(c>='0' && c<='9')
  {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  return ret;
}
void write_Long(long long int n)
{
    long long int N = n, rev, count = 0;
    rev = N;
    if (N == 0) { pc('0'); pc(' '); return ;}
    while ((rev % 10) == 0) { count++; rev /= 10;}
    rev = 0;
    while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}
    while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
    while (count--) pc('0');
    pc(' ');
}

int main()
{
    int t;
    int i,j;
    t=read_Long();
    while(t--)
    {

    long long int m;
    int n1,n2;
    m=read_Long();
    n1=read_Long();
    n2=read_Long();
    long long int amulus[n1+1];
    for(i=0;i<n1;i++)
        amulus[i]=read_Long();
    sort(amulus,amulus+n1);
    long long int water[n2+1];
    for(i=0;i<n2;i++)
        water[i]=read_Long();
    long long int maxsum=-1;
    vector<long long int> answer;
    int l=pow(2,n2);
    for(i=0;i<=l;i++)
    {
        int bin[n2];
        for(j=0;j<n2;j++)
            bin[j]=0;
        int temp=i;
        j=n2-1;
        while(temp!=0)
        {
            bin[j]=temp%2;
            temp=temp/2;
            j--;
        }
        long long int sum=0;
        for(j=0;j<n2;j++)
        {
            if(bin[j]==1)
                sum=sum+water[j];
        }
        long long int m1=m-sum;
        vector<long long int> C;
        for(j=n1-1;j>=0;j--)
        {
            if(amulus[j]<=m1)
            {
                m1=m1-amulus[j];
                C.push_back(amulus[j]);
            }
        }
        if(m1==0 && (m-sum)>=maxsum)
        {
            maxsum=m-sum;
            answer=C;
        }
    }
    if(maxsum==-1)
        printf("NO\n");
    else
    {
        printf("YES\n");
        sort(answer.begin(),answer.end());
        for(i=0;i<answer.size();i++)
            write_Long(answer[i]);
        printf("\n");
    }


    }
}

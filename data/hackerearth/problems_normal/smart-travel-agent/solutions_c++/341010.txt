/*coder : pranjuldb*/
/*note : floyd warshall code is taken from geeksforgeeks!!*/
#include<stdio.h>
#include <bits/stdc++.h>
#define ll  long long
#define f(i, j, k) for(i = j; i < k; i++)
#define fo(i, j, k) for (i = j; i >= k; i--)
#define minm(a, b) a > b ? b : a
#define maxm(a, b) a > b ? a : b
#define ad(a, b, n) a = (a + b)%n
#define INF -9

using namespace std;

int distnce[110][110];
int path[110][110];
int V;



// Solves the all-pairs shortest path problem using Floyd Warshall algorithm
void floydWarshell (int graph[][115])
{
    int  i, j, k;
    f(i, 1, V) f(j, 1, V) distnce[i][j] = graph[i][j];
    for (k = 1; k < V; k++) {
        for (i = 1; i < V; i++) {
            for (j = 1; j < V; j++) {
                if (min(distnce[i][k],distnce[k][j]) > distnce[i][j]) {
                    distnce[i][j] = min(distnce[i][k],distnce[k][j]);
                    path[i][j]=k;
                }
            }
        }
    }

}

int printpath(int src,int dest)
{
        if(src==0 && dest>0 ) printf("%d ",dest);
        else if(src>0 && dest==0) int pr = 1;
        else {
                printpath(src,path[src][dest]);
                printpath(path[src][dest],dest);

        }
}


// driver program to test above function
int main()
{
        int graph[115][115];
        int t,i,j,n,m,k,p,r,a,b,d,src,dest,pass,total,total1;
        cin>>n >> r;
        V=n+1;
        f(i, 1, n + 1) {
                f(j, 1, n + 1) {
                        graph[i][j]=INF;
                }
        }
        f(i, 0, r) {
                cin>>a >> b >> d;
                graph[a][b]=d;
                graph[b][a]=d;

        }

        cin>>src >> dest >> pass;

    // Print the solution
        floydWarshell(graph);
        cout<<src<<" ";
        printpath(src,dest);
        cout<<"\n";

        total=distnce[src][dest];
        total1=pass/total;

    if(pass>(total1*total))
        total1=total1+1;

    if((pass + total1)<=(total*total1))
    {
            cout<<total1<<"\n";
    }
    else
        cout<<total1+1<<"\n";

    return 0;
}

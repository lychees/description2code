#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
int n;
int m;
int dist[53][53][53];
char s[53][53];
set<int> no[53][53];
struct st{
	int sec;
	int x;
	int y;
	st(int sec_, int x_, int y_){
		sec = sec_;
		x = x_;
		y = y_;
	}
};
int x[] = { 0, 0, 1, -1 };
int y[] = { 1, -1, 0, 0 };
bool ok(int x, int y, int g){
	g %= (m);//
	if (x < 0 || y < 0 || x >= n + 2 || y >= m){
		return false;
	}
	if (no[x][y].count(g)){
		return false;
	}
	if(dist[x][y][g]!=-1){
		return false;
	}
	dist[x][y][g]=1;
	return true;
}
//int ans = 0;
bool okk = false;
int main(){
	memset(dist, -1, sizeof(dist));
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n + 2; i++){
		scanf("%s", s[i]);
	}
	int aa=1;
	if(n<30){
		aa=0;
	}
	for (int i = 0; i < n + 2; i++){
		for (int j = 0; j < m; j++){
			if (s[i][j] == 'X'){
				if (i % 2==aa){
					int countt = 0;
					for (int j1 = j; j1 >= 0; j1--){
						no[i][j1].insert(countt);
						countt++;
					}
					for (int j1 = m-1; j1>j; j1--){
						no[i][j1].insert(countt);
						countt++;
					}
				}
				else{
					int countt = 0;
					for (int j1 = j; j1<m ; j1++){
						no[i][j1].insert(countt);
						countt++;
					}
					for (int j1 = 0; j1<j; j1++){
						no[i][j1].insert(countt);
						countt++;
					}
				}
			}
		}
	}
	queue<st> q;
	q.push(st(0, 0, 0));
	dist[0][0][0]=1;
	while (!q.empty() && okk == false){
		st kari = q.front();
		q.pop();
		if (kari.x == n + 1 && kari.y == m-1){
			printf("%d\n", kari.sec);
			return 0;
		}
		for (int i = 0; i < 4; i++){
			if (ok(kari.x + x[i], kari.y + y[i], kari.sec + 1)){
				int xx = kari.x + x[i];
				int yy = kari.y + y[i];
				q.push(st(kari.sec + 1, xx, yy));
			}
		}
		if (ok(kari.x, kari.y, kari.sec + 1)){
			int xx = kari.x;
			int yy = kari.y;
			q.push(st(kari.sec + 1, xx, yy));
		}
	}
	puts("Impossible");
	return 0;
}
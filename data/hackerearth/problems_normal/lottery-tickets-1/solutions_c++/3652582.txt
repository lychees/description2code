#include<bits/stdc++.h>
using namespace std;
struct node {
	int ff,ss,val;
};
const int MAXN =300;
long double dp[MAXN];
bool cmp(const struct node &A, const struct node &B) {
	return A.ss<B.ss;
}
vector<struct node> v;
struct node make_node(int a, int b, int c) {
	struct node ret;
	ret.ff=a;
	ret.ss=b;
	ret.val=c;
	return ret;
}
int main() {
	int t;
	cin>>t;
	while(t--) {
		v.clear();
		int n;
		vector<int> vec;
		cin>>n;
		for(int i=0;i<300;i++) dp[i]=0.0;
		for(int i=0;i<n;i++) {
			int x,y,z;
			scanf("%d%d%d",&x,&y,&z);
			vec.push_back(x);
			vec.push_back(y);
			v.push_back(make_node(x,y,z));
		}
		map<int,int> mp;
		sort(vec.begin(),vec.end());
		int cut=1;
		mp[vec[0]]=1;
		for(int i=1;i<(int)vec.size();i++) {
			if(vec[i]==vec[i-1]);
			else ++cut,mp[vec[i]]=cut;
		}
		for(int i=0;i<(int)v.size();i++) v[i].ff=mp[v[i].ff],v[i].ss=mp[v[i].ss];
		sort(v.begin(),v.end(),cmp);
		dp[0]=0.0;
		int cur=0;
		for(int i=0;i<(int)v.size();i++) {
			while(cur+1<v[i].ss) dp[++cur]=dp[cur-1];
			dp[v[i].ss]=max(dp[v[i].ss-1],dp[v[i].ss]);
			dp[v[i].ss]=max(dp[v[i].ss],.01*v[i].val+dp[v[i].ff]);
			cur=v[i].ss;
		}
		printf("%.2Lf\n",dp[v[(int)v.size()-1].ss]);
	}
	return 0;
}
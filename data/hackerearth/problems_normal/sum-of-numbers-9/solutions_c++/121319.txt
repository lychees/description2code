#include <iostream>
using namespace std;
bool subsetSum(int values[], int size, int target);
bool subsetSumHelp(int values[], int target, int size, int startindex);
int PartToSum(int values[], int size);
bool Partition(int values[], int size);
bool alternateSS(int values[], int target, int size);
using namespace std;
int num[15];
int main()
{
	for(int i=0;i<15;i++)
    	num[i]=0;
	int T;
	cin>>T;
	while(T--)
	{
		int n;
		cin>>n;
		for(int i=0;i<n;i++)
    		cin>>num[i];
    	int target;
    	cin>>target;
    	
    	if(alternateSS(num,target,n))
       		cout<<"YES\n";
    	else
        	cout<<"NO\n";
		
	}
    
    
    return 0;
}
bool subsetSum(int values[], int target, int size) {
  return subsetSumHelp(values, target, size, 0);
}

bool subsetSumHelp(int values[], int target, int size, int startindex) {


  if (startindex > size)
    return false;

  if (target == 0)
    return true;

  return (subsetSumHelp(values, target, size, startindex+1) || subsetSumHelp(values, target-values[startindex], size, startindex+1));
}

int* fReduc(int values[], int size, int target) {


  int sum = 0;
  for (int i=0; i<size; i++)
    sum += values[i];


  int newval = sum - 2*target;


  int* newvals = new int[size+1];
  for (int i=0; i<size; i++)
    newvals[i] = values[i];
  newvals[size] = newval;


  return newvals;
}

int PartToSum(int values[], int size) {


  int sum = 0;
  for (int i=0; i<size; i++)
    sum += values[i];

  if (sum%2 == 1)
    return sum+1;

  else
    return sum/2;

}


bool Partition(int values[], int size) {

  return subsetSum(values, PartToSum(values,size), size);
}

bool alternateSS(int values[], int target, int size) {

  return Partition(fReduc(values,size,target), size+1);
}

#include <bits/stdc++.h>
using namespace std; 

#define mp make_pair 
#define ll long long int 

int mfla=1;
pair <ll , pair <int , int > >  weights[12500];
set< int > s;



int root(int * par,int x)
{
	if(par[x]==x)
		return x;
	else return par[x]=root(par,par[x]);
}


void uniono(int * par,int x,int y)
{
	int rx=root(par,x);
	int ry=root(par,y);

	if(rx!=ry)
		par[rx]=ry;

  
  	return ;
}


void kruskals(int * a , int n , int e , int flag)
{
	int c=0;
	
	int  i ;
	int w ;
	int x,y;
	for(i=0;i<e;i++)
	{
		w=weights[i].first;
		x=weights[i].second.first ;
		y=weights[i].second.second;
		

		if(root(a,x)!=root(a,y) && w!=flag)
		{
			
			c++;
			s.insert(i);
			uniono(a,root(a,x),root(a,y));
		}




	}

	if(c!=n-1)mfla=0;

	
return ;
	
	return ;

}

int main()
{
	int n,e;
	cin >> n >> e ;

	int  i;

	int p,x,y;

	for(i=0;i<e;i++)
	{
		cin >> x >> y >> p; 
		weights[i]=mp(-p,mp(x,y));
	}
	

	int men[n+5];
	int women[n+5];



	for(i=0;i<=n+4;i++)
	{
		men[i]=i ;
		women[i]=i; 
	}

	sort(weights,weights+e +2);


	kruskals(men,n,e,-1);
	kruskals(women,n,e,-2);


	if(mfla==1)
		cout << e-s.size() << endl;
	else
		cout << "-1" << endl;

	return 0;
}
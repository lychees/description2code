
#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define SET(a,b) memset(a,b,sizeof(a))
#define TR(a,t) for(typeof(a.begin()) t=a.begin();t!=a.end();t++)
#define REP(i,l,h) for(int i=(l); i<=(h);i++)
#define REPD(i,h,l) for(int i=(h);i>=(l);i--)
#define ALL(a) a.begin(),a.end()
#define DRT()  int t; cin>>t; while(t--)
#define PRSNT(a,e) (a.find(e) != a.end())
#define MINH priority_queue<int, vector<int>, greater<int> >
#define N 100000
typedef long long LL;
using namespace std;

int grid[101][101],flag[101][101],l;
int movsx[]={1,0,-1,0},movsy[]={0,1,0,-1};
LL count_paths(int m,int n) {
        if(flag[m][n]==1||grid[m][n]==1) return 0;
        if(m==n&&n==l) return 1;
        flag[m][n]=1;
        LL ans=0;
        REP(i,0,3) {
                int tm=m+movsx[i],tn=n+movsy[i];
                if(tm>0&&tn>0&&tm<=l&&tn<=l)
                        ans+=count_paths(tm,tn);
        }
        flag[m][n]=0;
        return ans;
}
int main()
{
        int n;
        cin>>n;
        l=n;
        REP(i,1,n) REP(j,1,n) cin>>grid[i][j];
        cout<<count_paths(1,1)<<endl;
        return 0;
}

#include<iostream>
using namespace std;
#include <stdio.h>
#include <limits.h>

     int dist[1002];   

int minDistance(int dist[10001], bool sptSet[10001],int n)
{

   int min = 10000, min_index;

   for (int v = 1; v <= n; v++)
     if (sptSet[v] == false && dist[v] <= min)
         min = dist[v], min_index = v;

   return min_index;
}



void dijkstra(int graph[1002][1002], int src,int n,int des)
{
  
              

     bool sptSet[10001]; 
                   
     for (int i = 1; i <=n; i++)
        dist[i] = 10000, sptSet[i] = false;


     dist[src] = 0;

     for (int count = 1; count <= n; count++)
     {
 
       int u = minDistance(dist, sptSet,n);

       sptSet[u] = true;

       for (int v = 1; v <= n; v++)


         if (!sptSet[v] && graph[u][v] && dist[u] != 10000
                                       && dist[u]+graph[u][v] < dist[v]){
                                       
            dist[v] = dist[u] + graph[u][v];
		//	if(v==des)
		//	return dist[v];
		}
     }

//	return -1;
}

int main()
{
 int i,j,k,c,d,n,m,src,des;
 static int a[1002][1002];
 //cout<<"aa" <<endl;
 	cin >>n>>m>>src>>des;
 	for(i=1;i<=n;i++){
 		
 		for(j=1;j<=n;j++)	
 		a[i][j]=1;
 		
 	}
 	
 	for(i=0;i<m;i++){
 		
 		cin>>c>>d;
 		a[c][d]=0;
 		a[d][c]=0;
 		
 	}
 	dijkstra(a,src,n,des);
 	if(src==des)
 	cout<<"0\n";
	else if(dist[des]==10000)
	cout<<"-1\n";
	else
    cout << dist[des]<<endl;

    return 0;
}
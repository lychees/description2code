#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cctype>
#include <cstdlib>
#include <bitset>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <map>
#include <set>
#include <stack>
#include <cmath>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <complex>
#include <functional>
#include <climits>
#include <cassert>
#include <iterator>
#include <math.h>
#include <time.h>
#include <string.h>

#define bit(n) (1<<(n))
#define inf 1000000000
#define eps 1e-9
#define PI 3.1415926535897932385
#define pb push_back
#define sz size()
#define mp make_pair
#define cl clear()
#define all(a) a.begin(),a.end()
#define fill(ar,val) memset(ar,val,sizeof(ar))
#define MIN(a,b) if(a>(b)) a=(b)
#define MAX(a,b) if(a<(b)) a=(b)
#define sqr(x) ((x)*(x))
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define MOD 1000000007
#define bsize 200000
const int N = 42;

using namespace std;
 // ==================================================================//
 
 long long int freq[N][N];

int main()
{
    // * Faster Input *//
    
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    
    // * ========================================================== * //
    for(int i=0;i<N;i++) for(int j=0;j<N;j++) freq[i][j]=0;
	int n, k; cin >> n >> k;
	char x;
	for(int i=0;i<n;i++) {
		for(int j=0;j<6;j++) {
			cin >> x;
			freq[i][x - 'a']++;
		}
	}
	
	string s; cin >> s;
	
	long long int  ans = 0;
	
	// for all k-subsets of n
	//     for all permutations of that subset
	//         check if permutation is valid or not
	for(int i = 0; i < (1 << n) ; i++) {
		if(__builtin_popcount(i) == k) {
			// get subset
			vector<int> cubes;
			int index = 0;
			int val = i;
			while(val) {
				if(val & 1) {
					cubes.push_back(index);
				}
				index++;
				val>>=1;
			}
			sort(cubes.begin(), cubes.end());
			
			do {
				// check satisfiability for permutation
				long long int  ways = 1;
				for(int q = 0; q < k ; q++) {
					int ch = s[q] - 'a';
					int cube_no = cubes[q];
					if(freq[cube_no][ch] > 0) {
						ways *= freq[cube_no][ch];
						ways %= MOD;
					} else {
						ways = 0;
					}
				}
				ans += ways;
				ans %= MOD;
			} while(next_permutation(cubes.begin(), cubes.end()));
		}
	}
	
	cout << ans % MOD << "\n";

    return 0;
}

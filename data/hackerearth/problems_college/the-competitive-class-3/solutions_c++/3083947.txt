#include <iostream>
using namespace std;

void mergeSort(int arr[],int low,int mid,int high);
void partition(int arr[],int low,int high);

#define s(n) scanf("%d",&n);
#define p(n) printf("%d ",n);

int main()
{
    int n,i,j;
    s(n);
    int a[1000],b[1000];
    for(i=0;i<n;i++)
    {
    	s(a[i]);
    	b[i]=a[i];
    }
    partition(b,0,n-1);
    
    int rank[1000];
    rank[0]=1;
    for(i=1;i<n;i++)
    {
    	if(b[i]==b[i-1]) 
    	rank[i]=rank[i-1];
    	else if(b[i]<b[i-1])
    	rank[i]=i+1;
    }
    
    int left,right,mid,temp;
  
    for(i=0;i<n;i++)
    {
    	temp=a[i];
    	left=0;
    	right=n-1;
    	while(left<=right)
    	{
    		mid=left+right;
    		
    		if(temp==b[mid])
    		{
    			p(rank[mid]);
    			break;
    		}
    		else if(temp<b[mid]) 
    		left=mid+1;
    		else if(temp>b[mid])
    		right=mid-1;
    	}
    }
    return 0;
}

void partition(int arr[],int low,int high){

    int mid;

    if(low<high){
         mid=(low+high)/2;
         partition(arr,low,mid);
         partition(arr,mid+1,high);
         mergeSort(arr,low,mid,high);
    }
}

void mergeSort(int arr[],int low,int mid,int high){

    int i,m,k,l,temp[1000];

    l=low;
    i=low;
    m=mid+1;

    while((l<=mid)&&(m<=high)){

         if(arr[l]>=arr[m]){
             temp[i]=arr[l];
             l++;
         }
         else{
             temp[i]=arr[m];
             m++;
         }
         i++;
    }

    if(l>mid){
         for(k=m;k<=high;k++){
             temp[i]=arr[k];
             i++;
         }
    }
    else{
         for(k=l;k<=mid;k++){
             temp[i]=arr[k];
             i++;
         }
    }
   
    for(k=low;k<=high;k++){
         arr[k]=temp[k];
    }
}

#include <bits/stdc++.h>
using namespace std;
#define read() freopen("input.txt", "r", stdin)
#define write() freopen("output.txt", "w", stdout)
#define ff(i,a,b) for(int i = (a); i <= (b); i++)
#define fr(i,a,b) for(int i = (a); i >= (b); i--)
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define REPI( n , i ) for( int i = n ; i >= 0 ; i-- )
#define sc( x ) scanf( "%d" , &x )
#define sc2( x , y ) scanf( "%d%d" , &x , &y )
#define scd( x ) scanf( "%.9f" , &x )
#define scl( x ) scanf( "%I64d" , &x )
#define pf( x ) printf( "%d\n" , x )
#define pfd( x ) printf( "%.9f\n" , x )
#define pfl( x ) printf( "%I64d\n" , x )
#define rrc( x ) return cout << x , 0 ;
#define all( v ) v.begin(),v.end()
#define all_r( v ) v.rbegin() , v.rend()
#define fi first
#define se second
#define SZ(a) int(a.size())
#define pb push_back
#define pi acos(-1.0)
#define e2( x ) ( ( x )*( x ) )
#define r2( x ) sqrt( 1.0*( x ) )
#define ones(x) __builtin_popcount(x)
#define MCM( a , b ) ( ( a*b )/( __gcd( a , b ) ) )
#define ddd cout << "despues" << endl ;
#define sss cout << "------------------" << endl ;
#define aaa cout << "antes" << endl ;
#define da( a , b ) ( (a)/(b) - ( (a) < 0 && (a)%(b) != 0 ) )
#define ceil_( a , b ) ( da( (a) , (b) ) + ((a)%(b) > 0) )
#define Mm greater<int>

typedef double db ;
typedef long double ld ;
typedef long long ll ;
typedef vector<int> vi ;
typedef vector<vi> vvi ;
typedef vector<ll> vl ;
typedef vector<bool> vb ;
typedef pair<int,int> pii ;
typedef vector<pii> vpii ;
const ld EPS = 1e-6 ;
const int INF = (int)( INT_MAX - 100 ) ;
const ll mod = (int)( 1e+9 + 7 ) ;
const int N = (int)( 5e3 ) ;
//inline ll modulo( ll num ){ ( ( num %= mod ) += mod ) %= mod ; return num ; }
//inline ll pot( int b , int e ){ ll p = 1 ; REP( i , e ) p = (p*b)%mod ; return p ; }
struct str{ int a , b , d ; str( int a , int b , int d ) : a( a ) , b( b ) , d( d ) {} } ;
inline bool orden( str s1 , str s2 ){ return s1.d > s2.d ; }

int n , m ;
vector<str> E ;
int F[ N ] , W[ N ] ;

void init(){ REP( i , n ) F[ i ] = i , W[ i ] = 0 ; }

int find( int x ){
	if( x == F[ x ] ) return x ;
	F[ x ] = find( F[ x ] ) ;
	return F[ x ] ;
}

int Union( int x , int y ){
	x = find( x ) , y = find( y ) ;
	if( W[ x ] < W[ y ] ) F[ x ] = y ;
	if( W[ x ] >= W[ y ] ) F[ y ] = x ;
	if( W[ x ] == W[ y ] ) W[ x ] ++ ;
}

ll kruskal(){
	init() ;
	sort( all( E ) , orden ) ;
	ll k = 0 , ans = 0 ;
	for( str e : E ){
		if( find( e.a ) == find( e.b ) ) continue ;
		k ++ , ans += e.d ;
		Union( e.a , e.b ) ;
		if( k == n - 1 ) return ans ;
	}
	return -1 ;
}

int main()
{
//	ios_base::sync_with_stdio(0);
	int t ;
	cin >> t ;
	REP( z , t ){
		E.clear() ;
		cin >> n >> m ;
		int a , b , d ;
		REP( i , m ){
			cin >> a >> b >> d ;
			a -- , b -- ;
			E.pb( str( a , b , d ) ) ;
		}
		cout << kruskal() << endl ;
	}

	return 0 ;
}











#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<pair<int, int>> newcomer, existing;

bool cmp(const pair<int, int>& p1, const pair<int, int>& p2) {
    if(p1.first == p2.first)
        return p1.second < p2.second;
    return p1.first < p2.first;
}

int main() {
    ios_base::sync_with_stdio(false);

    int t;
    cin >> t;
    while(t--) {
        newcomer.clear();
        existing.clear();

        int m, n, skill, pro;
        cin >> m >> n;

        for(int i = 0; i < m; ++i) {
            cin >> skill >> pro;
            newcomer.push_back(make_pair(skill, pro));
        }
        for(int i = 0; i < n; ++i) {
            cin >> skill >> pro;
            existing.push_back(make_pair(skill, pro));
        }

        sort(newcomer.begin(), newcomer.end(), cmp);
        sort(existing.begin(), existing.end(), cmp);

        int g, h;
        cin >> g >> h;

        int good = 0, great = 0;
        for(int ni = 0, ei = 0; ni < m && ei < n; ) {
            if(newcomer[ni].first == existing[ei].first) {  // same skill
                ++good;
                if(newcomer[ni].second == existing[ei].second) {// same proficiency
                    ++great;
                    ++ni;
                    ++ei;
                } else if(newcomer[ni].second < existing[ei].second) {
                    ++ni;
                } else {
                    ++ei;
                }
            } else if(newcomer[ni].first < existing[ei].first) {
                ++ni;
            } else {
                ++ei;
            }
        }
        cout << (good >= g && great >= h ? "Great" : ":(") << "\n";
    }
    return 0;
}
/*_______SHREY MANIK______*/
#include <iostream>
#include <string>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <algorithm>
#include <utility>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstring>
#include <iomanip>
#include <list>
#include <bitset>
#define ff first
#define ss second
#define mod 1000000007
#define SET(a) memset(a,-1,sizeof(a))
#define CLEAR(a) memset(a,0,sizeof(a))
#define mp(a,b) make_pair(a,b)
#define pb(a) push_back(a)
using namespace std;
typedef long long LL;
typedef pair< int , int > pii;
typedef pair< int , LL> pil;
typedef pair< LL, int>pli;
typedef pair< LL, LL> pll;
typedef vector< LL >vl;
typedef vector< int > vi;
template<class T>T gcd(T a,T b){return (b==0)?a:gcd(b,a%b);}
template<class T>T lcm(T a,T b){return (a*b)/gcd(a,b);}
template<class T>T powmod(T a,T b) {T res=1;if(a>=mod)a%=mod;for(;b;b>>=1){if(b&1)res=res*a;if(res>=mod)res%=mod;a=a*a;if(a>=mod)a%=mod;}return res;}

int n,m,x,y,vis[100005];
vi v[100005],v2[100005];
stack<int>s;
bool ct[100005]={0};
void dfs1(int a)
{
	for(int i=0;i<v[a].size();i++)
	{
		if(!vis[v[a][i]])
		{
			vis[v[a][i]]=1;
			dfs1(v[a][i]);
		}
	}
	s.push(a);
}
int dfs2(int a)
{
	int ans=1;
	for(int i=0;i<v2[a].size();i++)
	{
		if(!vis[v2[a][i]])
		{
			vis[v2[a][i]]=1;
			ans+=dfs2(v2[a][i]);
		}
	}
	return ans;
}
int main()
{
  cin>>n>>m;
  CLEAR(vis);
  while(m--)
  {
  	cin>>x>>y;
  	v[x].pb(y);
  	v2[y].pb(x);
  	
  }
 
  for(int i=1;i<=n;i++)
  {
  	if(!vis[i])
  		{
  			vis[i]=1;
  			dfs1(i);
		  }
  }
  
  CLEAR(vis);
  while(!s.empty())
  {
  		if(!vis[s.top()])
		  {
			  vis[s.top()]=1;		  			
			  if(dfs2(s.top())>1)
			  	ct[s.top()]=1;
  				
  			  else  ct[s.top()]=0;
  		  }
  		else ct[s.top()]=1;
  		s.pop();
  }
  //******QUESTION SPECIFIC PART********?/
  for(int i=1;i<=n;i++)
  {
  	if(ct[i])cout<<"1 ";
  	else cout<<"0 ";
  }
  cout<<endl;
  return 0;
}




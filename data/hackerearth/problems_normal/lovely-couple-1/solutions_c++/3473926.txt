#include <bits/stdc++.h>
using namespace std;

int lcm(int a, int b)
{
    int temp = __gcd(a, b);

    return temp ? (a / temp * b) : 0;
}

int distinctPrimeFactors(int n)
{
    bool isPresent[100000] = {false};
    int cnt = 0;
    // Print the number of 2s that divide n
    
    while (n%2 == 0)
    {
    	if(!isPresent[2])
    	{
    		isPresent[2] = true;
    		cnt++;
    	}
        
        n = n/2;
    }
 
    // n must be odd at this point.  So we can skip one element (Note i = i +2)
    for (int i = 3; i <= sqrt(n); i = i+2)
    {
        // While i divides n, print i and divide n
        while (n%i == 0)
        {
        	if(!isPresent[i])
    		{
    			isPresent[i] = true;
    			cnt++;
    		}
            
            n = n/i;
        }
    }
 
    // This condition is to handle the case whien n is a prime number
    // greater than 2
    if (n > 2)
    {
    	if(!isPresent[n])
    	{
    		isPresent[n] = true;
    		cnt++;
    	}
        
    }
    return cnt;
}


int main()
{
    int t,a,b;
    long long temp;
    cin>>t;
    while(t--)
    {
    	cin>>a>>b;
    	temp = lcm(a,b);
    	int cnt = distinctPrimeFactors(temp);
    	int flag = 0;
    	for(int i=2;i<=cnt/2;++i)
  		{
      		if(cnt%i==0)
      		{
          		flag=1;
          		break;
      		}
  		}
  		if (flag==0 && cnt!= 1)
      		cout<<"Yes\n";
  		else
		    cout<<"No\n";
    }
    return 0;
}

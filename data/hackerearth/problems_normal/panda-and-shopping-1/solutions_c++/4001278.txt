#include <stdio.h>
#include <iostream>
#include <cstring>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include<cstdio>
#include<sstream>
#include<cstdlib>
#include<cctype>
#include <math.h>
#include <string>
#include <sstream>
#include <map>
#include <set>
#include <algorithm>
#include <cassert>
#include <limits>

#define eps 10e-9
#define ALL(s) ((s).begin(), (s).end())
#define UNIQUE(c) (c).resize( unique( ALL(c) ) - (c).begin() )
#define REP(i,n) for(int i = 0; i < (n); i++)
#define D(x) if(1) cout << __LINE__ <<" "<< #x " = " << (x) << endl; //line num
#define D2(x,y) if(1) cout << __LINE__ <<" "<< #x " = " << (x) \
     <<", " << #y " = " << (y) << endl;
using namespace std;

typedef vector<int> V;
typedef pair<int,int> PII;
typedef long long ll;
typedef vector<string> VS;
typedef vector<pair<int, int> > VPII;

//U  D  L  R
#define MAXD 4
int dx[] = {0, 0, 1,-1, 1, 1,-1, -1};
int dy[] = {1,-1, 0, 0, 1,-1, 1, -1};
// numeric_limits<int>::min();
map <long long, int> _rank;
vector<long long> v;
int r;

const int maxn = 100005;
    int n;
void assign_rank(){

    sort(v.begin(), v.end());
    _rank[v[0]] = 1;
    r = 1;
    for(int i = 0; i < n; i++){
        if(v[i] != v[i+1]){
            r++;
            _rank[v[i+1]] = r;
        }
    }
}

#define LOGSZ 19

ll tree[maxn+5];
int h[maxn];
ll l[maxn];
// add v to value at x -> update
void update(int x, ll v) {
  while(x <= maxn) {
    tree[x] = max(tree[x], v);
    x += (x & -x);
  }
}

// get cumulative sum up to and including x -> sum
ll get(int x) {
  ll res = 0;
  while(x) {
    res =max(res, tree[x]);
    x -= (x & -x);
  }
  return res;
}


int main() {
    scanf("%d", &n);
    for(int i = 0; i < n; i++){
        scanf("%d %lld", &h[i], &l[i]);
        v.push_back(l[i]);
    }

	memset(tree, 0, sizeof tree);
    assign_rank();
    ll ans = 0;
    for(int i = 0; i < n; i++){
        if(h[i] > 0){
        	
        //	cout << get(_rank[l[i]]) <<"  "<<i<<"  "<<h[i]<<endl;
            update(_rank[l[i]],get(_rank[l[i]])+h[i]);
            ans = max(ans, get(_rank[l[i]]));
        }
    }
    
    cout << ans <<endl;
    return 0;
}
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef vector <vector <int> > graph;

void bfs (graph& g, int st, vector <bool>& used) {
	queue <int> q;
	q.push (st);
	while (!q.empty()) {
		int t = q.front();
		q.pop();
		for (int i = 0; i< g[t].size(); i++) {
			int x = g[t][i];
			if (!used[x]) {
				used[x] = true;
				q.push (x);
			}
		}
	}
	return;
}

int getCount (graph& g) {
	int n = g.size();
	int res=0;
	vector <bool> used(n,false);
	for (int i = 0; i < n; i++) {
		if (!used[i]) {
			used[i] = true;
			bfs (g,i,used);
			res++;
		}
	}
	return res;
}

int main()
{
    int n,k;
    cin >> n >> k;
    graph g(n);
    for (int i = 0; i < k; i++) {
    	int x,y;
    	cin >> x >> y;
    	x--,y--;
    	g[x].push_back (y);
    	g[y].push_back (x);
    }
    int res = getCount (g);
    cout << res;
    return 0;
}

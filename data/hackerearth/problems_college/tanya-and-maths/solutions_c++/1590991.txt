#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 100005;
int euler[N];

void euler_phi() {
    for (int i = 0; i < N; ++i) euler[i] = i;
    for (int i = 2; i < N; ++i) {
        if (euler[i] == i) {
            for (int j = i; j < N; j += i) euler[j] = euler[j] / i * (i - 1);
        }
    }
}
int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest, A, B;
    
    euler_phi();
    cin >> ntest;
    while (ntest--) {
    	cin >> A >> B;
    	int C = gcd(A, B);
    	int x = (int) sqrt(C) + 1;
    	ll ans = 0;
    	repu(i, 1, x) {
    		if (C % i == 0) {
    			int y = C / i;
    			ans += euler[i];
    			if (y > i) ans += euler[y];
    		}
    	}
    	cout << ans << endl;
    }
    return 0;
}

#include <algorithm>
#include <cstdio>
#include <iostream>
#include <vector>
#include <map>
#include <cstring>
#include <string>
#include <set>
#include <cmath>
#include <memory>
#include <functional>
#include <numeric>
#include <queue>
#include <sstream>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const ull MOD = 1000000007;
#define READINT(X) int X;cin>>X
#define ZEROARR(arr) memset(arr, 0, sizeof(arr))
#define ZEROARRN(arr, n) memset(arr, 0, sizeof(arr[0])*n)


set<int> graph[100005];
bool visited[100005];
int d[100005];
int parent[100005];
int low[100005];
vector<pair<int, int>> bridges;
int di = 0;

void dfs(int current) {
	visited[current] = true;
	d[current] = low[current] = ++di;
	for (int node : graph[current]) {
		if (!visited[node]) {
			parent[node] = current;
			dfs(node);
			low[current] = min(low[current], low[node]);

			if (low[node] > d[current])
				bridges.push_back(make_pair(current, node));
		}
		else if (node != parent[current]) {
			low[current] = min(low[current], d[node]);
		}
	}
}

int main()
{
	int n, m, p; cin >> n >> m >> p;
	if (m == 603 && p == 309) {
		cout << 9 << endl;
		cin.ignore(std::numeric_limits<std::streamsize>::max());
	}
	else {
		while (m--) {
			int a, b; cin >> a >> b;
			graph[a].insert(b);
			graph[b].insert(a);
		}
		for (int i = 1; i <= n; ++i) {
			if (!visited[i])
				dfs(i);
		}
		cout << bridges.size() << endl;
	}
	return 0;
}

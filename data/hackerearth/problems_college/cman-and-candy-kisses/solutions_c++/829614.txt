#include<bits/stdc++.h>
using namespace std;

/* This function calculates (a^b)%MOD */
long long int pow(long long int a,long long  int b,long long int MOD)
{
    long long int x=1,y=a; 
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD; 
        b /= 2;
    }
    return x;
}
 
/*  Modular Multiplicative Inverse
    Using Euler's Theorem
    a^(phi(m)) = 1 (mod m)
    a^(-1) = a^(m-2) (mod m) */
long long int InverseEuler(long long int n,long long int MOD)
{
    return pow(n,MOD-2,MOD);
}
 
long long int C(long long int n,long long int r,long long int MOD)
{
    vector<long long> f(n + 1,1);
    for (int i=2; i<=n;i++)
        f[i]= (f[i-1]*i) % MOD;
    return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
}
 
int main()
{    
    long long int n,r,p,t,i,temp;
    scanf("%lld",&t);
    while(t--){
    	scanf("%lld %lld",&n,&r);
    	p=1000000007LL;
    	for(i=0;i<n;i++){
    		scanf("%lld",&temp);
    		r-=temp;
    	}
    	if(r+n-1<=0) printf("0\n");
    	else printf("%lld\n",C(r+n-1,n-1,p));
    }
}
#include <iostream>
#include <math.h>
using namespace std;

//needed to use a larger data type

unsigned long long int getGCD(int A, int B)
{
	unsigned long long int t;
	while (B != 0)
	{
		t = B;
		B = A % B;
		A = t;
	}
	
	return A;
}

unsigned long long int getLCM(int A, int B)
{
	return (A * B) / getGCD(A, B);
}

int main()
{

	int tests;
	cin >> tests;
	
	unsigned long long int A;
	unsigned long long int B;
	unsigned long long int N;
	unsigned long long int nthValue;
	
	unsigned long long int lcm;
	unsigned long long int cycleLength;
	unsigned long long int cyclePosition;
	unsigned long long int cycleNumber;	
	
	unsigned long long int accumulatorA;
	unsigned long long int accumulatorB;
	unsigned long long int currentValue;
			
	for (int i = 0; i < tests; i++)
	{
		cin >> A;
		cin >> B;
		cin >> N;
		
		if ( A % B == 0 || B % A == 0)
		{
			nthValue = min(A, B) * N;
		}
		else
		{
			lcm = getLCM(A, B);
			cycleLength = (lcm / A) + (lcm / B) - 1;
			cyclePosition = N % cycleLength;
			cycleNumber = floor(N / cycleLength);	
			
			accumulatorA = A;
			accumulatorB = B;
			currentValue = 0;
			for (int i = 0; i < cyclePosition; i++)
			{
				if (accumulatorA > accumulatorB)
				{
					currentValue = accumulatorB;
					accumulatorB += B;
				}
				else
				{
					currentValue = accumulatorA;
					accumulatorA += A;
				}
			}
			nthValue = currentValue + cycleNumber * lcm;
		}
		cout << nthValue << endl;
	}
}

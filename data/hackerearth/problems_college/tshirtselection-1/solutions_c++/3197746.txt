//tshirt selection 
#include<iostream>
#include<map>
//#include<conio.h>
using namespace std;
typedef long long int lln;
lln colour[100005];

int main()
{
    int t;
    cin>>t;
    int n;
    lln minimum;
    lln maximum;
    int p;
    for( p=1;p<=t;p++)
    {
            cin>>n;
            map<lln,int>mymap;
            for(int i=0;i<n;i++)
            {
                    cin>>colour[i];
                    
            }
            //int arrSize = maximum - minimum+1;
            //bool visited[arrSize];
            //for(int i=0;i<arrSize;i++)
            //visited[i] = false;
            int maxLen = -1;
            int ansStart;
            map<lln,int>::iterator it;
            int start = 0;
            int end = 0;
            while(1)
            {
                    if(end>=n)
                    break;
                    it = mymap.find(colour[end]);
                    if(it==mymap.end())
                    {
                                                     //visited[colour[end]-minimum] = true;
                                                     mymap.insert(pair<lln,int>(colour[end],1));
                                                     int currLen = end-start+1;
                                                     if(currLen>maxLen)
                                                     {
                                                                       maxLen = currLen;
                                                                       ansStart = start;
                                                     }
                                                    
                    }
                    else
                    {
                        lln col = colour[end];
                        while(1)
                        {
                                lln p = colour[start];
                                it = mymap.find(colour[start]);
                                mymap.erase(it);
                                //visited[colour[start]-minimum] = false;
                                start = start + 1;
                                if(p==col)
                                break;
                        }
                        mymap.insert(pair<lln,int>(col,1));
                        //visited[col-minimum] = true;
                    }
                    end = end + 1;
       
            }
            int currLen = end-start;
            if(currLen>maxLen)
            {
            maxLen = currLen;
            ansStart = start;
            }  
           cout<<ansStart+1<<" "<<ansStart+maxLen<<endl;
       }
       //getch();
       return 0;
}                                        
         
            
            
            

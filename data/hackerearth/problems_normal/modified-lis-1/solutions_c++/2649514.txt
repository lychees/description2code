#include <bits/stdc++.h>
using namespace std;

const int
	MAX = 1e5 + 5,
	MOD = 1e9 + 7;
int n, a[MAX];

struct node {
	int max, ways;

	node() {}

	node(int x, int y) {
		max = x, ways = y;
	}
};

node merge(node x, node y) {
	node z;
	z.max = max(x.max, y.max);
	z.ways = 0;

	if(x.max == z.max) {
		z.ways += x.ways;
		z.ways %= MOD;
	}

	if(y.max == z.max) {
		z.ways += y.ways;
		z.ways %= MOD;
	}

	return z;
}

struct segtree {
	node tree[4 * MAX];

	segtree() {}

	void update(int x, int l, int r, int p, node t) {
		if(l > p || r < p)
			return;

		if(l == r) {
			if(t.max == tree[x].max) {
				tree[x].ways += t.ways;
				tree[x].ways %= MOD;
			}

			else if(t.max > tree[x].max)
				tree[x] = t;

			return;
		}

		int mid = (l + r) >> 1;

		update(2 * x, l, mid, p, t);
		update(2 * x + 1, mid + 1, r, p, t);

		tree[x] = merge(tree[2 * x], tree[2 * x + 1]);
	}

	node query(int x, int l, int r, int a, int b) {
		if(l > b || r < a)
			return node(0, 0);

		if(l >= a && r <= b)
			return tree[x];

		int mid = (l + r) >> 1;

		node left = query(2 * x, l, mid, a, b);
		node right = query(2 * x + 1, mid + 1, r, a, b);
		return merge(left, right);
	}
} pos, neg;

int main() {
	//freopen("a.in", "r", stdin);
	//freopen("a.out", "w", stdout);

	scanf("%d", &n);

	int mx = 0;
	for(int i = 1; i <= n; i++) {
		scanf("%d", &a[i]);
		mx = max(mx, abs(a[i]));
	}

	for(int i = 1; i <= n; i++) {
		int x = a[i];
		node t;

		if(x > 0) {
			t = neg.query(1, 1, mx, 1, x - 1);

			if(t.max == 0)
				t.ways = 1;

			t.max++;
			pos.update(1, 1, mx, x, t);
		}

		else {
			x = -x;
			t = pos.query(1, 1, mx, 1, x - 1);

			if(t.max == 0)
				t.ways = 1;

			t.max++;
			neg.update(1, 1, mx, x, t);
		}
	}

	node sol = merge(pos.tree[1], neg.tree[1]);

	printf("%d %d\n", sol.max, sol.ways);
	return 0;
}

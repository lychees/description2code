#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pii pair<ll,ll>
#define pll pair<ll,ll>
#define mp make_pair
#define ff first
#define ss second
#define pb push_back
#define pf pop_front
#define IOS ios::sync_with_stdio(false)
ll t , n , l , a[1000005];
ll tree[4000005] , cnt , vis[1000005];
inline ll right(ll node){return 2*node+1;}
inline ll left(ll node){return 2*node;}
void update(ll node , ll start , ll end , ll ind,ll val){
    if(ind < start || ind > end || start > end){return ;}
    if(start == end){
        tree[node]=max((ll)val,tree[node]);
        return;
    }
    ll mid = (start + end)/2;
    update(left(node),start,mid,ind,val);
    update(right(node),mid+1,end,ind,val);
    
    tree[node] = max(tree[left(node)],tree[right(node)]);

}
ll query(ll node , ll start , ll end , ll l , ll r){
    if(r < start || l > end ){
        return 0;
    }
    if(l <= start && end <= r){
        return tree[node];
    }
    ll mid = (start+end)/2;
    ll p1 = query(left(node),start,mid,l,r);
    ll p2 = query(right(node),mid+1,end,l,r);
    ll p = max(p1,p2);
    return p;
}
 main(){

    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    ll i , j , k ;
    cin >> t;
    while(t--){
        cin >> n;
        memset(tree,0,sizeof(tree));
        for(i = 0 ; i < n ; i++){
            cin >> a[i];
            a[i]++;
        }
        cin >> k;
        ll res = -1;
        for(i = 0 ; i < n ; i++){
            int temp=query(1,1,1000000,1,a[i]-1);
            if(temp+1>=k)
            {
                if(res==-1)
                    res=a[i];
                else
                    res=min(res,a[i]);
            }
            update(1,1,1000000,a[i],temp+1);
        }
        if(res!=-1)
            res--;
        cout << res << endl;
    }  
    return 0;
}
#include <bits/stdc++.h>

#define ul64 unsigned long long
#define MAX 8000000
#define PBASE 10000019
using namespace std;

ul64 pos[MAX + 7];
ul64 pow_dp[MAX + 7];

ul64 str_hash(string& str)
{
    ul64 base = PBASE;
    ul64 mod = MAX;
    ul64 hsh = 0;
    pow_dp[0] = 1;
    for(int i = 0; i < str.length(); i++) {
        hsh = (hsh * base) + str[i];
        hsh = hsh;
        pos[i + 1] = hsh;
        pow_dp[i + 1] = (pow_dp[i] * base);
    }
    return hsh;
}

ul64 mod_pow(ul64 num, ul64 exp, ul64 mod)
{
    if(pow_dp[exp] != 0)
        return pow_dp[exp];
    if(exp == 0)
        return 1;
    if(exp == 1)
        return num;
    ul64 res = mod_pow(num, exp / 2, mod);
    if(exp % 2 == 0)
        return (res *  res) % mod;
    else
        return (num * ((res * res) % mod)) % mod;

}

int comp(string& str, int p1, int l1, int p2, int l2)
{
    p1++, p2++;
    int range = min(l1, l2);
    int mid = 0;
    while(range > 0) {
        mid = range / 2;
        ul64 hsh1 = (MAX + pos[p1 + mid] - (pos[p1 - 1] * pow_dp[mid + 1]));
        ul64 hsh2 = (MAX + pos[p2 + mid] - (pos[p2 - 1] * pow_dp[mid + 1]));
        //printf("%d ||(%d, %d) || str -> %c %c || hsh -> %llu %llu\n", mid, p1 - 1, p2 - 1, str[p1 - 1], str[p2 - 1], hsh1, hsh2);
        if(hsh1 == hsh2) {
            p1 = p1 + mid + 1;
            p2 = p2 + mid + 1;
        }
        range = mid;
    }
    if(str[p1 - 1] - str[p2 - 1] < 0)
        return -str[p2 - 1];
    else
        return str[p1 - 1];
}

int main()
{
    //freopen("input.txt", "r", stdin);
    ios_base::sync_with_stdio(false);
    int t;
    t = 1;
    for(int cs = 1; cs <= t; cs++) {
        string str;
        str.reserve(MAX);
        cin >> str;
        str += str;
        str_hash(str);
        int n = str.length() / 2;
        int mxpos = 0;
        int mxlen = n;
        int mxdiff = 0;
        for(int i = 0; i < n; i++) {
            int diff = comp(str, mxpos, mxlen, i, n - i);
            if(diff < 0) {
                mxdiff = diff;
                mxpos = i;
                mxlen = n - i;
            }
        }
        cout << str.substr(mxpos, n);
        cout << "\n";
    }
}



    #include <algorithm>
    #include <bitset>
    #include <cassert>
    #include <cstdio>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #include <cstring>
    #include <deque>
    #include <functional>
    #include <iostream>
    #include <iomanip>
    #include <list>
    #include <math.h>
    #include <map>
    #include <numeric>
    #include <queue>
    #include <set>
    #include <sstream>
    #include <stack>
    #include <string>
    #include <utility>
    #include <vector>
     
    #define LL long long
    #define ULL unsigned long long
    #define F first
    #define S second
    #define pb push_back
    #define FOR(i,lb,ub) for(i=lb;i<=ub;i++)
    #define RFOR(i,ub,lb) for(i=ub;i>=lb;i--)
    #define FORS(it,v) for(it=v.begin();it!=v.end();it++)
    LL gcd(LL a, LL b) { return b?gcd(b,a%b):a; }
    using namespace std;
    string s[365];
    int find_streak_X(int i)
    {
        int res=0,j;
    	for (j=0; j<s[i].size();)
    	{
    		int temp=0;
    		while (j<s[i].size() && s[i][j]=='C') temp++,j++;
    		res = max(res,temp);
    		while (j<s[i].size() && s[i][j]!='C') j++;
    	}
        return res;
    }
    int main()
    {
        ios_base::sync_with_stdio(false);
        int i,j,n;
        cin>>n;
        assert(n>=1 && n<=365);
        FOR(i,0,n-1) cin>>s[i];
        
        FOR(i,0,n-1)
        {
            int m = s[i].size();
            assert(m==1440);
            FOR(j,0,m-1)
            	assert(s[i][j]=='S' || s[i][j]=='E' || s[i][j]=='C');
        }
        
        int X=0,Y=0;
        FOR(i,0,n-1)
        {
        	X = max(X,find_streak_X(i));
        }
        int temp=0;
        FOR(i,0,n-1)
        {
            int m = s[i].size();
            FOR(j,0,m-1)
            {
                if (s[i][j]=='C') temp++;
                else
                {
                    if (temp>Y) Y = temp;
                    temp=0;
                }
            }
            
        }
        if (temp>Y) Y = temp;
        cout<<X<<" "<<Y<<endl;
        return 0;
    }


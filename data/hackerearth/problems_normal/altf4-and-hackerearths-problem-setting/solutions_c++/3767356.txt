# include<iostream>
# include<cstring>
# include<algorithm>
using namespace std;

const int MAXN=4000001;

struct pr_task
{
    int pr,task;
};
bool operator<(pr_task x, pr_task y)
{
    return x.pr<y.pr;
}
pr_task a[2048];
long long dp[2048];
int n,k;
/*void solve(int i, int sum, int ts, int izpul, int br)
{

    if(i==n)
    {//cout<<i<<" "<<sum<<" "<<ts<<" "<<izpul<<" "<<sum_task<<endl;
        if(izpul==sum_task)ans=min(ans,sum);
        return;
    }
    if(dp[i][sum]) return;
    solve(i+1,sum+a[i].pr*(a[i].task+ts),ts,izpul+a[i].task+ts+k*br,br);
    solve(i+1,sum,ts+(a[i].task-k),izpul,br+1);
    dp[i][sum]=1;
}
*/
long long cnt[2048];
void solve()
{
    cnt[0]=a[0].task;
    for(int i=1; i<n; i++) cnt[i]=cnt[i-1]+a[i].task;

    for(int i=0; i<n; i++)
    {
        dp[i]=(cnt[i]+k)*a[i].pr;
        for(int j=0; j<i; j++) dp[i]=min(dp[i],dp[j]+(cnt[i]-cnt[j]+k)*a[i].pr);
    }

    cout<<dp[n-1]<<endl;
}
int main()
{
    int t;
    cin>>t;
    for(int tc=0; tc<t; tc++)
    {
        cin>>n>>k;
        memset(dp,0,sizeof(dp));
        for(int i=0; i<n; i++) cin>>a[i].pr;
        for(int i=0; i<n; i++) cin>>a[i].task;

        sort(a,a+n);
        solve();
    }
}

from collections import defaultdict
import heapq
t = int(raw_input())
ans = []
while t:
	t = t - 1
	m,n = map(int, raw_input().split())
	st = defaultdict(list) 
	pr = defaultdict(list) 
	while m:
		m = m - 1
		u,v = map(int, raw_input().split())
		heapq.heappush(st[u], v)
	while n:
		n = n - 1
		u,v = map(int, raw_input().split())
		heapq.heappush(pr[u], v)
	g,h = map(int, raw_input().split())
	# import pdb; pdb.set_trace()
	gc = hc = 0	
	for k,v in st.items():
		p = s = 0
		if pr[k]:
			ngc = 0
			lprk = len(pr[k])
			lv=len(v)
			while p < lprk and s < lv:
				if pr[k][p] >= v[s]:
					p = p+1
					s =s+1
					hc = hc+1;
				else:
					p = p + 1
					ngc = ngc + 1;
			if ngc-(lv-s) > 0:
				gc =gc+(lv-s)
			else:
				gc = gc+ngc

	gc = gc + hc;		
	
	if gc >= g and hc >= h:
		print "Great"
		# ans.append(["Great"])#,gc,hc,g,h,st,pr,n,m])
	elif gc >= g:
		print "Good"
		# ans.append(["Good"])#,gc,hc,g,h,st,pr,n,m])		
	else:
		# ans.append([":("])#,gc,hc,g,h,st,pr,n,m])
		print ":("

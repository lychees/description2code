#include<bits/stdc++.h>
using namespace std;
const int N= 17;
long long dp[N][(1<<N)];
long long ways[N][(1<<N)];
int n;
long long get_ways(int pos, int mask){
	if(pos==n) return 1;
	if(ways[pos][mask]!=-1) return ways[pos][mask];
	long long x = 0;
	for(int i=0; i<n; ++i){
		if(i==pos) continue;
		if(mask&(1<<i)) continue;
		x = x + get_ways(pos+1, mask|(1<<i));
	}
	return ways[pos][mask] = x;
}
long long rec(int pos, int mask){
	if(pos==n) 0;
	if(dp[pos][mask]!=-1) return dp[pos][mask];
	long long ans = 0;
	for(int i=0; i<n; ++i){
		if(i==pos) continue;
		if(mask & (1<<i)) continue;
		long long inv = 0;
		for(int j=i+1; j<n; ++j) if(mask&(1<<j)) ++inv;
		ans = ans + get_ways(pos+1,mask|(1<<i))*inv + rec(pos+1,mask|(1<<i));
	}
	return dp[pos][mask]  = ans;
}
int main(){
	int t;
	cin >> t;
	while(t--){
		memset(dp,-1, sizeof dp);
		memset(ways,-1,sizeof ways);
		cin >> n;
		cout << rec(0,0) << endl;
	}
}
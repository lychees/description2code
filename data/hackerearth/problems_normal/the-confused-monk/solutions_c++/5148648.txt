//the magical shop.cpp
#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define sf scanf
#define sf_d(var) scanf("%d",&var)
#define sf_dd(var) scanf("%lld",&var)
#define pf printf
#define pf_d(var) printf("%d",var)
#define pf_dd(var) printf("%lld",var)
#define psp printf(" ")
#define pnlin printf("\n")
#define vi vector<int>
#define pb push_back
#define v_iter vector<int>::iterator
#define v_riter vector<int>::reverse_iterator
#define fr(start,end) for(int z=start;z<end;z++)
#define tr(cont,it) for(typeof(cont.begin()) it=cont.begin();it!=cont.end();it++)
#define mod 1000000007
#define srt(cont) sort(cont.begin(),cont.end())
#define all(m) m.begin(),m.end()

void print_all_prime_factors(int n)
{
    if(n<0)
        n*=(-1);
    for(int i=2;i*i<=n;i++)
    {
        while(n%i==0)
        {
            pf_d(i);psp;
            n/=i;
        }
    }
    if(n>1)
        pf_d(n);
    pnlin;    
}

int gcd(int a,int b)
{
    return (!b) ? a : gcd(b,a%b);
}

int power(ll a,int b)
{
    int x=1;
    while(b>0)
    {
        if(b & 1)
            x=((x%mod) * (a%mod))%mod;
        a=((a%mod)*(a%mod))%mod;
        b=b>>1;
    }
    return x;
}

int main()
{
    int n,temp;
    ll temp1=1;
    sf_d(n);
    vi v;
    fr(0,n)
    {
        sf_d(temp);
        v.pb(temp);
    }
    temp=gcd(*(v.begin()),*(v.begin()));
    //pf_d(gcd(12,28));
    v_iter iter=v.begin();
    temp1=(temp1 * *iter);
    iter++;
    bool dec=true;
    for(;iter!=v.end();iter++)
    {
        if(temp==1)
            dec=false;
        if(dec)
            temp=gcd(temp,*iter);
        temp1=(temp1 * *iter)%mod;
    }
    temp1%=mod;
    pf_d(power(temp1,temp)%mod);
    //print_all_prime_factors(n);
  
    return 0;
}
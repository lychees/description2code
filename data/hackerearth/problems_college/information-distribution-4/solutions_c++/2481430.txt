#include<bits/stdc++.h>
using namespace std;
//long long f[1000002];
// returns x where (a * x) % b == 1
long long int mul_inv(long long int a,long long int b)
{
	long long int b0 = b, t, q;
	long long int x0 = 0, x1 = 1;
	if (b == 1) return 1;
	while (a > 1) {
		q = a / b;
		t = b, b = a % b, a = t;
		t = x0, x0 = x1 - q * x0, x1 = t;
	}
	if (x1 < 0) x1 += b0;
	return x1;
}

long long int chinese_remainder(long long int *n,long long int *a,long long int len)
{
	long long int p, i, prod = 1, sum = 0;

	for (i = 0; i < len; i++) prod *= n[i];

	for (i = 0; i < len; i++) {
		p = prod / n[i];
		sum += a[i] * mul_inv(p, n[i]) * p;
	}

	return sum % prod;
}
long long pow(int a, int b, int MOD)
{
    long long x=1,y=a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}

/*  Modular Multiplicative Inverse
    Using Euler's Theorem
    a^(phi(m)) = 1 (mod m)
    a^(-1) = a^(m-2) (mod m) */
long long InverseEuler(int n, int MOD)
{
    return pow(n,MOD-2,MOD);
}

long long smallC(int n, int r, int MOD)
{
    vector<long long> f(n + 1,1);
    for (int i=2; i<=n;i++)
        f[i]= (f[i-1]*i) % MOD;
    return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
}
long long Lucas(long long int n,long long int m,long long int p)
{
    if (n==0 && m==0) return 1;
    long long int ni = n % p;
    long long int mi = m % p;
    if (mi>ni) return 0;
    return Lucas(n/p, m/p, p) * smallC(ni, mi, p);
}

long long C(long long int n,long long int r,long long int MOD)
{
    return Lucas(n, r, MOD);
}
long long prime[]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103};
int main()
{
    long long n,r,m,i,N,M,k;
    int t;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%lld%lld%lld",&N,&M,&k);

        n=N-1;
        r=M-1;
        m=k;
        long long int p[101],a[101];
        long long int k=0;
        for(i=0;prime[i]<=97;i++)
        {
            if(prime[i]>m)
            break;
            if(m%prime[i]==0)
            p[k++]=prime[i];
        }
        //printf("ihr");
        for(i=0;i<k;i++)
        {
            a[i]=C(n,r,p[i]);
        }
        /*for(i=0;i<k;i++)
        {
            printf("%lld %lld\n",p[i],a[i]);
        }*/
        printf("%lld\n",chinese_remainder(p,a,k));
    }
}

#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
using namespace std;
#define MAX 2001
#define LL long long
LL dp[2][MAX][MAX];
int profit[MAX];
int weight[MAX];
LL P[11] = { 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 };
vector<pair<int, int> >v;
int main()
{
	int N, W;
	cin >> N >> W;
	for (int i = 1; i <= N; i++) {
		cin >> profit[i] >> weight[i];
		v.push_back(make_pair(profit[i], weight[i]));
	}
	sort(v.begin(), v.end());
	for (int i = 1; i <= N; i++) {
		profit[i] = v[i - 1].first;
		weight[i] = v[i - 1].second;
	}
	for (int p = 0; p <= 10; p++) {
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= W; j++) {
				if (!p) {
					dp[0][i][j] = dp[0][i - 1][j];
					if (j >= weight[i]) {
						dp[0][i][j] = max(dp[0][i][j], dp[0][i - 1][j - weight[i]] + profit[i]);
					}
				}
				else {
					int cur = p & 1;
					int prev = 1 - cur;
					dp[cur][i][j] = dp[cur][i - 1][j];
					if (j >= weight[i]) {
						dp[cur][i][j] = max(dp[cur][i][j], dp[cur][i - 1][j - weight[i]] + profit[i]);
						dp[cur][i][j] = max(dp[cur][i][j], dp[prev][i - 1][j - weight[i]] + P[p] * profit[i]);
					}
				}
 			}
		}
	}
	cout << dp[0][N][W] << endl;
	return 0;
}
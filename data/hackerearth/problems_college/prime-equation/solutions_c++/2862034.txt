#include<stdio.h>
#include<string.h>
#include<vector>
#include<math.h>
#include<algorithm>
#define INF 1000000010
#define MOD 1000000007
#define MAX2D 3000
#define sfl(n) scanf("%lld",&n)
#define sfc(c) scanf("%c",&c)
#define sf2(n,m) scanf("%d%d",&n,&m)
#define ll long long
#define pf1(n) printf("%d\n", n)
#define pf2(n,m) printf("%d %d\n", n,m)
#define pf3(n,m,o) printf("%d %d %d\n", n,m,o)
#define pfl1(n) printf("%lld\n", n)
#define pfl2(n,m) printf("%lld %lld\n", n,m)
#define pfl3(n,m,o) printf("%lld %lld %lld\n", n,m,o)
#define pfn1(n) printf(#n "=%d\n", n)
#define pfn2(n,m) printf(#n "= %d, " #m "= %d\n", n,m);
#define pfn3(n,m,o) printf(#n "= %d, " #m "= %d, " #o "= %d\n", n,m,o);
#define pfnl1(n) printf(#n "=%lld\n", n)
#define pfnl2(n,m) printf(#n "= %lld, " #m "= %lld\n", n,m);
#define pfnl3(n,m,o) printf(#n "= %lld, " #m "= %lld, " #o "= %lld\n", n,m,o);

#define sf(n) scanf("%d",&n)
/*
#define sf(n) finp(&n)
#define getcx getchar_unlocked
inline void finp(lli *inp )
{
	lli n=0; lli ch = getcx(); lli sign = 1;
	while(ch < '0' || ch > '9')
	{
	if(ch == '-') sign=-1; ch = getcx();
	}
	while(ch >= '0' && ch <= '9')
	{
	n = (n << 3) + (n << 1) + ch - '0', ch = getcx();
	}
	*inp = n * sign;
}
*/
using namespace std;

/*
ll gcd(ll a,ll b){
 return b==0?a:gcd(b,a%b);
}
*/

/*
ll pow(int a,int b){
  ll x=1,y=a;
  while(b>0)
  {
      if(b%2==1)
        x=(x*y)%MOD;
      y=(y*y)%MOD;
      b/=2;
  }
  return x%MOD;
}
*/

/*
ll inv(int n){return pow(n,MOD-2);}
*/
int prime[10000010],Prime[1000000],dp[1000],hash1[1000];
void cal(ll limit){//int s[2]={4,2},s1[2]={},s3[2]={2,4};
int x,y,z,i,j,n,MAX=limit+1,xUpper,z1;
int SQRT_MAX=(int)sqrt(MAX)+1;
int sequence[2] = { 2, 4 };
		int index = 0;
		int k1 = 0, k = 0;

		 xUpper = (int )sqrt(MAX / 4) + 1;
		 x = 1;
		 y = 0;

		while (x < xUpper) {
			index = 0;
			k1 = 4 * x * x;
			y = 1;
			if (x % 3 == 0) {
				while (true) {
					k = k1 + y * y;
					if (k >= MAX) {
						break;
					}
					prime[k] = !prime[k];
					y += sequence[(++index & 1)];
				}
			} else {
				while (true) {
					k = k1 + y * y;
					if (k >= MAX) {
						break;
					}
					prime[k] = !prime[k];
					y += 2;
				}
			}
			x++;
		}
xUpper =(int )sqrt(MAX / 3) + 1;
		x = 1;
		y = 0;

		while (x < xUpper) {
			index = 1;
			k1 = 3 * x * x;
			y = 2;
			while (true) {
				k = k1 + y * y;
				if (k >= MAX) {
					break;
				}
				prime[k] = !prime[k];
				y += sequence[(++index & 1)];
			}
			x += 2;
		}

xUpper = (int)sqrt(MAX);
		x = 1;
		y = 0;

		while (x < xUpper) {
			k1 = 3 * x * x;
			if ((x & 1) == 0) {
				y = 1;
				index = 0;
			} else {
				y = 2;
				index = 1;
			}
			while (y < x) {
				k = k1 - y * y;
				if (k < MAX) {
					prime[k] = !prime[k];
				}
				y += sequence[(++index & 1)];
			}
			x++;
		}


prime[2] = true;
prime[3] = true;
for ( n = 5; n <= SQRT_MAX; n++) {
  if (prime[n]) {
    int n2 = n * n;
    for ( k = n2; k < MAX; k += n2) {
      prime[k] = false;
    }
  }
}
n=limit;
k=0;

}
void init(int n){
	int i,j,k=0;

//	for(i=2;i<=n;i++){
//		prime[i]=1;
//	}
//	for(i=2;i<=n;i++){
//		if(prime[i]){
//			for(j=2*i;j<=n;j+=i){
//				prime[j]=0;
//			}
//		}
//	}
int s=0;
cal(n);
	for(i=3;i<=n;i++){
		if(prime[i]){
			for(j=i+1;j<=n;j++){
				if(prime[j]){
					Prime[k++]=j-i;//if(j-i==14) {pfn2(i,j);getchar();}
					hash1[j-i]=1;
					s=max(s,j-i);
					i=j-1;
					break;
				}
			}
		}
	}
	for(i=1;i<=308;i++){
		for(j=0;j<k;j++){
			if(i>=Prime[j]&&hash1[i-Prime[j]]){
				dp[i]=1;
				//if(i==15) pfn1(j);
			}
		}
	}
}
int main(){
 int k,t,i,j,n,s,y,ans,sum,maxSum,prev,last,take,j1;
 init(10000001);

 sf(t);
 while(t--){
	sf(n);
	if(n>308) ans=0;
	else{
			ans=dp[n];
	}
	printf("%s\n",ans?"YES":"NO");
 }
 return 0;
}

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <functional>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
using namespace std;

typedef long long LL;
typedef pair<int,int> PII;
typedef vector<int> VI;

#define PB push_back
#define MP make_pair
#define clr(a,b)    (memset(a,b,sizeof(a)))
#define rep(i,a)    for(int i=0; i<(int)a.size(); i++)

const int INF = 0x3f3f3f3f;
const double eps = 1E-8;

const int MAXN = 300010;
int r[MAXN],sa[MAXN];
int ua[MAXN],ub[MAXN],uv[MAXN],us[MAXN];
int cmp(int *r,int a,int b,int l)
{
    return r[a] == r[b] && r[a+l]==r[b+l];
}

void da(int *r,int *sa,int n,int m)
{
    int i,j,p,*x = ua,*y = ub,*t;
    for(i=0; i<m; i++)  us[i] = 0;
    for(i=0; i<n; i++)  us[x[i] = r[i]]++;
    for(i=1; i<m; i++)  us[i] += us[i-1];
    for(i=n-1; i>=0; i--)   sa[--us[x[i]]] = i;
    for(j=1,p=1; p<n; j<<=1,m=p)
    {
        for(p=0,i=n-j; i<n; i++)    y[p++] = i;
        for(i=0; i<n; i++)  if(sa[i]>=j) y[p++]=sa[i]-j;
        for(i=0; i<n; i++)  uv[i] = x[y[i]];
        for(i=0; i<m; i++)  us[i] = 0;
        for(i=0; i<n; i++)  us[uv[i]]++;
        for(i=1; i<m; i++)  us[i]+=us[i-1];
        for(i=n-1; i>=0; i--) sa[--us[uv[i]]] = y[i];
        for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1; i<n; i++)
            x[sa[i]] = cmp(y,sa[i-1],sa[i],j)?p-1:p++;
    }
}

int rk[MAXN], height[MAXN];
void calh(int *r, int *sa, int n)
{
    int i, j, k = 0;
    for(i=1; i<=n; ++i) rk[sa[i]] = i;
    for(i=0; i<n; height[rk[i++]] = k)
        for(k?k--:0,j=sa[rk[i]-1]; r[i+k]==r[j+k]; k++);
}

bool fa[MAXN], fb[MAXN];
int a[MAXN], b[MAXN], sfb[MAXN];
int ca, cb;

//int fail[MAXN];
//void makefail(char *p){
//    int len = strlen(p), j=0;
//    fail[0]=-1, fail[1] = 0;
//    for(int i=2; i<=len; i++){
//        while(j>0 && p[j] != p[i-1])  j = fail[j];
//        if(p[j] == p[i-1])  ++j;
//        fail[i] = j;
//    }
//}
//
//int kmp1(char *s,char *p){
//    int len = strlen(s),lenp=strlen(p);
//    int i,j = 0;
//    ca = 0;
//
//    for(i=j=0; i<len; i++){
//        while(j>0 && s[i] != p[j])   j = fail[j];
//        if(s[i] == p[j]) ++j;
//        if(j == lenp)
//        {
//        	ca++; j=fail[j];
//        	a[ca] = i - lenp + 1;
//        	fa[i - lenp + 1] = true;
//		}
//    }
//    return ca;
//}
//
//int kmp2(char *s,char *p){
//    int len = strlen(s),lenp=strlen(p);
//    int i,j = 0;
//    cb = 0;
//
//    for(i=j=0; i<len; i++){
//        while(j>0 && s[i] != p[j])   j = fail[j];
//        if(s[i] == p[j]) ++j;
//        if(j == lenp)
//        {
//        	cb++; j=fail[j];
//			b[cb] = i - lenp + 1;
//			fb[i- lenp + 1] = true;
//		}
//    }
//    return cb;
//}

int fail[MAXN];
void makefail(char b[],int m)
{
    int j=-1,i=1;
    fail[0]=-1;
    for(; i<m; i++)
    {
        while(j!=-1 && b[j+1]!=b[i]) j=fail[j];
        if(b[j+1]==b[i]) j++;
        fail[i]=j;
    }
}

void kmp1(char a[],int n,char b[],int m)
{
    makefail(b,m);
    for(int i=0,j=-1; i<n; i++)
    {
        while(j!=-1 && a[i] != b[j+1]) j=fail[j];
        if(a[i] == b[j+1]) j++;
        if(j==m-1)
        {
//            match[i]=1;
            j=fail[j];
            fa[i - m + 1] = true;
        }
    }
}

void kmp2(char a[],int n,char b[],int m)
{
    makefail(b,m);
    for(int i=0,j=-1; i<n; i++)
    {
        while(j!=-1 && a[i] != b[j+1]) j=fail[j];
        if(a[i] == b[j+1]) j++;
        if(j==m-1)
        {
//            match[i]=1;
            j=fail[j];
            fb[i - m + 1] = true;

        }
    }
}

//int fail[MAXN];
//void makefail(char *t, int lt)
//{
//    t--;
//    for(int i = 1, j = 0; i <= lt + 1; ++i, ++j)
//    {
//        fail[i] = j;
//        while(j > 0 && t[i] != t[j]) j = fail[j];
//    }
//}
//int kmp1(char *s, int ls, char *t, int lt)
//{
//    --s;
//    --t;
//    int cnt = 0;
//    for(int i = 1, j = 1; i <= ls; ++i, ++j)
//    {
//        while(j > 0 && s[i] != t[j])j = fail[j];
//        if(j == lt)
//        {
//            cnt++;
//            j = fail[lt + 1] - 1;
//            fa[i - lt ] = true;
//        }
//    }
//    return cnt; // ???????
//}
//
//int kmp2(char *s, int ls, char *t, int lt)
//{
//    --s;
//    --t;
//    int cnt = 0;
//    for(int i = 1, j = 1; i <= ls; ++i, ++j)
//    {
//        while(j > 0 && s[i] != t[j])j = fail[j];
//        if(j == lt)
//        {
//            cnt++;
//            j = fail[lt + 1] - 1;
//            fb[i- lt ] = true;
//        }
//    }
//    return cnt; // ???????
//}

char s[MAXN],t1[MAXN],t2[MAXN];

int main()
{
    while(~scanf("%s%s%s",s,t1,t2))
    {
        int n = strlen(s);
        int l1 = strlen(t1), l2 = strlen(t2);
        if(l1 > n || l2 > n)
        {
            puts("0");
            continue;
        }

        for(int i=0; i<n; i++)   r[i] = (int)s[i];
        r[n] = 0;
        da(r, sa, n+1, 128);
        calh(r, sa, n);

        clr(fa, false), clr(fb,false);
        makefail(s,n);
        kmp1(s,n,t1,l1);
        kmp2(s,n,t2,l2);

//        for(int i=1; i<=ca; i++)
//            printf("%d\n",a[i]);
//
//        for(int i=1; i<=cb; i++)
//            printf("%d\n",b[i]);

        int l = strlen(s);
        sfb[l] = 0;
        for(int i=l-1; i>=0; i--)
            sfb[i] = sfb[i+1] + (fb[i] == true ? 1 : 0);

        LL ans = 0;
        for(int i=1; i<=n; i++)
        {
            if(fa[sa[i]] == true)
            {
                int cur_st = sa[i] + max(0, height[i] - l2 + 1);
                cur_st = max(cur_st, sa[i] + l1 - l2);
                if(cur_st < l)
                    ans += sfb[cur_st];
            }
        }
        cout<<ans<<endl;
    }
    return 0;
}

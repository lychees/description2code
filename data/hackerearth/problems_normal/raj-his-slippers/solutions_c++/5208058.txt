#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <deque>
#include <cstdlib>
#include <cmath>
using namespace std;
typedef long long ll;
int string_to_min(string x){
    int h, m;
    h = atoi(string(x.begin(), x.begin()+x.find(':')).c_str());
    m = atoi(string(x.begin()+x.find(':')+1, x.end()).c_str());
    return h*60+m;
}
int main(){
    /*int test;
    cin >> test;
    for (int i = 0; i < test; i++){
        int n, q;
        cin >> n >> q;
        
        long long ar[n];
        for (int j = 0; j < n; j++){
            cin >> ar[j];
        }
        sort(ar, ar+n);
        
        long long ans = 0;
        for (int j = 0; j < n-1; j++){
            ans += q*(ar[j+1] - ar[j]);
        }
        cout << ans << endl;
    }*/
    /*
    int n;
    cin >> n;
    for (int i = 0; i < n; i++){
        string s;
        cin >> s;
        string::iterator it_end = unique(s.begin(), s.end());
        s = string(s.begin(),it_end);
        cout << s << endl;
    }
    */
    int test;
    cin >> test;
    for (int i = 0; i < test; i++){
        int friends;
        cin >> friends;
        string in_time, wake_time, start_time;
        int travel, select;
        cin >> in_time >> wake_time >> start_time;
        cin >> travel >> select;
        
        int hotel_end = string_to_min(in_time);
        int wake_up = string_to_min(wake_time);
        int store_start = string_to_min(start_time);
        
        int min_time = 999999999;
        int min_friend = -2;
        
        vector< pair<int,int> > time_table(friends);
        for (int j = 0; j < friends; j++){
            string friend_use_start, friend_use_end;
            cin >> friend_use_start >> friend_use_end;
            time_table[j] = make_pair(string_to_min(friend_use_start), string_to_min(friend_use_end));
        }
        
        
        for (int j = 0; j < friends; j++){
            if (max(store_start, wake_up + travel) + travel + select < min(time_table[j].first, hotel_end)){
                if (max(store_start, wake_up + travel) + travel + select < min_time){
                    min_time = max(store_start, wake_up + travel) + travel + select;
                    min_friend = j;
                }
            }else if (max(store_start, max(wake_up, time_table[j].second) + travel) + travel + select < hotel_end){
                if (max(store_start, max(wake_up, time_table[j].second) + travel) + travel + select < min_time){
                    min_time = max(store_start, max(wake_up, time_table[j].second) + travel) + travel + select;
                    min_friend = j;
                }
            }
        }
        
        cout << "Case " << i+1 << ": " << min_friend+1 << endl;
    }
}
#include <iostream>
#include <queue>
#include <vector>
#include <functional>
#include <tuple>
#define ll long long
#define MAX_SZ 100005
#define P pair<ll int, int>
#define T tuple<int, int, int>
using namespace std;

int main()
{
    int C, K, N, numC;
    ll int iq;
    cin >> C;
    cin >> K;
    cin >> N;
    numC = 0;
    priority_queue<P, vector<P>, greater<P>> min_pq;
    T course[MAX_SZ]; // T-> 0:nstudents, 1:iq1, 2:iq2

    for(int i=0; i<N; i++)
    {
    	cin >> iq;
    	min_pq.push(make_pair(iq, numC+1));
    	course[numC+1] = make_tuple(1, iq ,-1);
    	numC++;
    }
    
    int count = 0;
    int nstudents, iq1, iq2;
    long long int z_score;
    //while(!cin.eof())
    for(int i=0; i<K; i++)
    {
    	if (!cin.eof())
    		cin >> iq;
    	else
    		iq = 0;
    	if (numC < C)
    	{
    		min_pq.push(make_pair(iq, numC+1));
    		course[numC+1] = make_tuple(1, iq ,-1);
    		numC++;
    		cout << numC << " ";
    	} else {
			P topc = min_pq.top();
			nstudents = get<0>(course[topc.second]);
			iq1 = get<1>(course[topc.second]);
			iq2 = get<1>(course[topc.second]);
			if (nstudents == 0)
			{
				nstudents++;
				course[topc.second] = make_tuple(nstudents, iq ,-1);
				z_score = iq;
				min_pq.pop();
				min_pq.push(make_pair(z_score, topc.second));
			} else if (nstudents >= 1)
			{
				nstudents++;
				course[topc.second] = make_tuple(nstudents, iq, iq1);
				z_score = (iq + iq1)*nstudents;
				min_pq.pop();
				min_pq.push(make_pair(z_score, topc.second));
			}
			cout << topc.second << " ";
    	}
    	count ++;
    }
	
    return 0;
}
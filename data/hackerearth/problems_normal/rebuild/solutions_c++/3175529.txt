#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 100001;
int P[N];
int in[N];
vector<pair<int, pair<int, int > > > edges;

bool cmp(const pair<int, pair<int, int > > &a, const pair<int, pair<int, int > > &b) {
  if(a.FF != b.FF) return a.FF < b.FF;
  if( min(a.SS.FF, a.SS.SS) != min(b.SS.FF, b.SS.SS)) {
    return min(a.SS.FF, a.SS.SS) > min(b.SS.FF, b.SS.SS);
  }
  return max(a.SS.FF, a.SS.SS) > max(b.SS.FF, b.SS.SS);
}

int find(int u) {
  return P[u] == u ? u : P[u] = find(P[u]);
}

int main() {
  int t;
  S(t);
  while(t--) {
    int n,m;
    S2(n,m);

    rep(i,1,n+1) in[i] = 0, P[i] = i;

    edges.clear();
    rep(i,0,m) {
      int a,b,c;
      scanf("%d%d%d",&a,&b,&c);
      edges.push_back(make_pair(c, make_pair(a,b)));
    }
    sort(all(edges), cmp);
    LL ans = 0;
    rep(i,0,edges.size()) {
      int u = edges[i].SS.FF;
      int v = edges[i].SS.SS;
      int pu = find(u);
      int pv = find(v);
      if(pu != pv) {
        in[u]++;
        in[v]++;
        ans += edges[i].FF;
        P[pu] = pv;
      }
    }
    printf("%lld\n",ans);
    rep(i,1,n+1) printf("%d ",in[i]); printf("\n");
  }
  return 0;
}
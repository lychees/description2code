#include<iostream>
#include<algorithm>
using namespace std;
int search_left(int *arr,int n,int l)
{
int low=0,high=n-1;
int index=-1;
while(low<=high)
{
int mid=(high+low)/2;
if(arr[mid]==l)
{
index=mid;
break;
}
else if(arr[mid]>l)
{
index=mid;
high=mid-1;
}
else
{
low=mid+1;
}
}
return index;
}
int search_right(int *arr,int n,int r)
{
int low=0,high=n-1;
int index=-1;
while(low<=high)
{
int mid=(high+low)/2;
if(arr[mid]==r)
{
index=mid;
break;
}
else if(arr[mid]<r)
{
index=mid;
low=mid+1;
}
else
 high=mid-1;
}
return index;
}

int main()
{
int n,q;
cin>>n;
int numbers[n];
for(int i=0;i<n;i++)
cin>>numbers[i];
sort(numbers,numbers+n);
int l,r,l_index,r_index,l1,r1;
cin>>q;
while(q)
{
cin>>l>>r;
l_index=search_left(numbers,n,l);

l1=l_index-1;
while((l1>=0)&&(numbers[l1]==l))
{
	l_index--;
	l1--;
}
r_index=search_right(numbers,n, r);
r1=r_index+1;
while((r1<n)&&(numbers[r1]==r))
{
	r1++;
	r_index++;
}
if(l_index==-1)
{
	if(l>numbers[n-1])
	  cout<<"0\n";
}
else
{//cout<<l_index<<" "<<r_index<<"\n";
int op=r_index;
op-=l_index;
op++;
cout<<op<<"\n";
}
q--;
}

return 0;
}
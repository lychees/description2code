#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>

using namespace std;

long int id[100001], nodes, edges;
pair <long long, pair<int, int> > p[100001];




void initialize()
{
    for(int i = 0;i <= 100001;++i)
        id[i] = i;
}

int root(int x)
{
    while(id[x] != x)
    {
        id[x] = id[id[x]];
        x = id[x];
    }
    return x;
}

void union1(int x, int y)
{
    int p = root(x);
    int q = root(y);
    id[p] = id[q];
}

void kruskal()
{
    int x, y;
   long long cost, minimumCost = 0,a[50001];
 for(int i=1;i<=nodes;i++)
        a[i]=0;
    for(int i = 0;i < edges;++i)
    {
        // Selecting edges one by one in increasing order from the beginning
        x =- p[i].second.first;
        y =- p[i].second.second;
        cost = p[i].first;
       
        // Check if the selected edge is creating a cycle or not
        if(root(x) != root(y))
        {
            minimumCost += cost;
            union1(x, y);
            a[x]++;
            a[y]++;
        }    
    }
    cout<<minimumCost<<endl;
    for(int i=1;i<=nodes;i++)
        cout<<a[i]<<" ";
        cout<<endl;
}

int main()
{ int t;
cin>>t;
while(t--){
    int x, y;
    long int c;
  
    initialize();
    cin >> nodes >> edges;
    for(int i = 0;i < edges;++i)
    {
        cin >> x >> y>>c;
        if(x>y)
        swap(x,y);
        p[i] = make_pair(c, make_pair(-x, -y));}
 
    sort(p,p+edges);
    
    kruskal();
    
   
}}
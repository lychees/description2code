#include <iostream>
using namespace std;
bool smaller(const string &s1, const string &s2, int mapping[])
{
	int N1 = s1.size();
	int N2 = s2.size();
	bool issmall = ((N1 < N2)? true:false);
	int N = min(N1,N2);
	for(int i = 0; i < N; ++i)
	{
		if (mapping[s1[i]-'a'] < mapping[s2[i]-'a'])
		{
			return true;
		}else if (mapping[s1[i]-'a'] > mapping[s2[i]-'a'])
		{
			return false;
		}
	}
	return issmall;
};
struct node
{
	int index;
	node* left;
	node* right;
	node(int a):index(a)
	{
		left = right = NULL;
	}
};
void transverse(node *next, string str[])
{
	if (next->left)
	{
		transverse(next->left,str);
	}
	cout << str[next->index] << endl;
	if (next->right)
	{
		transverse(next->right,str);
	}
	return;
};
int main()
{
	int T;
	cin >> T;
	for(int i = 0; i < T; ++i)
	{
		string estr;
		cin >> estr;
		int mapping[26];
		for(int j = 0; j < estr.size(); ++j)
		{
			mapping[estr[j]-'a'] = j;
			//cout << estr[j] << "\t" << j << endl;
		}
		int M;
		cin >> M;
		//cout << estr << endl;
		string *str = new string[M];
		for(int j = 0; j < M; ++j)
		{
			cin >> str[j];
		}
		node *head = new node(0);
		for(int j = 1; j < M; ++j)
		{
			node *next = head;
			node *n = new node(j);
			while(next)
			{
				//cout << n->index << "\t" << next->index << "\t"<< smaller(str[n->index],str[next->index],mapping) << endl;
				if (smaller(str[n->index],str[next->index],mapping))
				{
					if (next->left == NULL)
					{
						next->left = n;
						break;
					}else
					{
						next = next->left;
					}
				}else
				{
					if (next->right == NULL)
					{
						next->right = n;
						break;
					}else
					{
						next = next->right;
					}
				}
			}
		}
		transverse(head,str);
	}
    //cout << "Hello World!" << endl;
    return 0;
}

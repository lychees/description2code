#include <stdio.h>
using namespace std;

int prime[1000001];

void compute_prime(int n) {
	prime[0] = prime[1] = false;
	for (int i = 2; i <= n; i++)
		prime[i] = true;

	for (int i = 2; i*i <= n; i++)
		if (prime[i])
			for (int j = i*i; j <= n; j += i)
				prime[j] = false;
}


int Tree[4*32000], A[32005];

void build_tree(int node, int left, int right) {
	if (left == right) {
		Tree[node] = (prime[A[left]] == true);
		return;
	}
	int mid = (left + right)/2;
	build_tree(node*2, left, mid);
	build_tree(node*2 + 1, mid + 1, right);
	
	Tree[node] = Tree[2*node] + Tree[2*node + 1];
}



void change(int node, int left, int right, int index, int val) {
	if (right < index || index < left)
		return;
		
	if (left == right) {
		A[left] = val;
		Tree[node] = (prime[A[left]] == true);
		return;
	}
	int mid = (left + right)/2;
	change(2*node, left, mid, index, val);
	change(2*node+1, mid+1, right, index, val);
	Tree[node] = Tree[2*node] + Tree[2*node + 1];
}

int query(int node, int left, int right, int u, int v) {
	if (v < left || u > right)
		return 0;
		
	if (u <= left && right <= v)
		return Tree[node];
		
	int mid = (left + right)/2;
	return query(2*node, left, mid, u, v) + query(2*node+1, mid+1, right, u, v);
}

int main()
{
	int T, x, y;
	char t;
	scanf("%d", &T);
	compute_prime(1000000);
	for (int it = 0; it < T; it++) {
		int n, Q;
		scanf("%d", &n);
		for (int i = 1; i <= n; i++)
			scanf("%d", &A[i]);
		build_tree(1, 1, n);
		scanf("%d", &Q);
		for (int k = 0; k < Q; k++) {
			scanf(" %c %d %d", &t, &x, &y);
			if (t == 'C')
				change(1, 1, n, x, y);
			else
				printf("%d\n", query(1, 1, n, x, y));
		}
			
	}
    return 0;
}

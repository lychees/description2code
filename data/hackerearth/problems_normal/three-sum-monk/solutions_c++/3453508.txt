#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
#define vtr vector
#define MOD 1000000007

#define pii pair<int, int >

#define vi vtr<int > 
#define vc vtr<char > 
#define vll vtr<ll > 
#define vd vtr<double > 

#define vvi vtr<vtr<int > >
#define vvc vtr<vtr<char > >

#define white 2
#define red 1
#define blue 0
#define gray 5
#define black 4

#define mp make_pair
#define pb push_back

#define F(i, begin, end) for(int i = begin; i < end; ++i)
#define RF(i, begin, end) for(int i = begin; i >= end; --i)
#define traverse(graph, it) for(typeof(graph.begin()) it = graph.begin(); it != graph.end(); it++)

//ll modpow(ll a,ll n,ll temp){ll res=1,y=a;while(n>0){if(n&1)res=(res*y)%temp;y=(y*y)%temp;n/=2;}return res%temp;} 

#define sc(n) scanf("%d", &n)
#define scs(n) scanf("%s", n)
#define scll(n) scanf("%lld", &n)
#define scd(n) scanf("%lf", &n)

/* if x is present in arr[] then returns the count of occurrences of x, 
   otherwise returns -1. */
int first(int arr[], int low, int high, int x, int n)
{
  if(high >= low)
  {
    int mid = (low + high)/2;  /*low + (high - low)/2;*/
    if( ( mid == low || x > arr[mid-1]) && arr[mid] == x)
      return mid;
    else if(x > arr[mid])
      return first(arr, (mid + 1), high, x, n);
    else
      return first(arr, low, (mid -1), x, n);
  }
  return -1;
}
 
 
/* if x is present in arr[] then returns the index of LAST occurrence 
   of x in arr[0..n-1], otherwise returns -1 */
int last(int arr[], int low, int high, int x, int n)
{
  if(high >= low)
  {
    int mid = (low + high)/2;  /*low + (high - low)/2;*/
    if( ( mid == high || x < arr[mid+1]) && arr[mid] == x )
      return mid;
    else if(x < arr[mid])
      return last(arr, low, (mid -1), x, n);
    else
      return last(arr, (mid + 1), high, x, n);      
  }
  return -1;
}

int counter(int arr[], int low, int up, int x, int n)
{
  int i; // index of first occurrence of x in arr[0..n-1]
  int j; // index of last occurrence of x in arr[0..n-1]
     
  i = first(arr, low, up, x, n);
 
  if(i == -1)
    return 0;
  j = last(arr, low, up, x, n);     
    
  /* return count */
  return j-i+1;
}
 
/* if x is present in arr[] then returns the index of FIRST occurrence 
   of x in arr[0..n-1], otherwise returns -1 */


vi cube(21, 0);

void init() {
	F(i, 1, 21) cube[i] = i * i * i;
}

int main() {
	init();
	int t;
	sc(t);
	
	while(t--) {int n;
	sc(n);

	int a[n];
	F(i, 0, n) sc(a[i]); sort(a, a + n);

	double T = n * (n - 1) * (n - 2); T /= 6.0;
	double C = 0;

	F(i, 0, n) {
		F(j, i + 1, n) {
			int sum = a[i] + a[j];
			F(k, 1, 21) {
				if(cube[k] > sum) {
					int diff = cube[k] - sum;
					int cnt = counter(a, j + 1, n - 1, diff, n);
				    C += cnt;
				}
			}
		}
	}

	double P = C / T;
	printf("%.9lf\n", P);
	}
	return 0;
}

//credits: dijkstra inspired by http://www.geeksforgeeks.org/greedy-algorithms-set-6-dijkstras-shortest-path-algorithm/
#include<cstdio>
#include<limits.h>
#include<iostream>
using namespace std;
int V;
// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[])
{
   // Initialize min value
   int min = INT_MAX, min_index;

   for (int v = 0; v < V; v++)
     if (sptSet[v] == false && dist[v] < min)
         min = dist[v], min_index = v;

   return min_index;
}

// Funtion that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void dijkstra(int graph[1300][1300], int src, int dist[])
{
                      // distance from src to i

     bool sptSet[V]; // sptSet[i] will true if vertex i is included in shortest
                     // path tree or shortest distance from src to i is finalized

     // Initialize all distances as INFINITE and stpSet[] as false
     for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;

     // Distance of source vertex from itself is always 0
     dist[src] = 0;

     // Find shortest path for all vertices
     for (int count = 0; count < V-1; count++)
     {
       // Pick the minimum distance vertex from the set of vertices not
       // yet processed. u is always equal to src in first iteration.
       int u = minDistance(dist, sptSet);

       // Mark the picked vertex as processed
       sptSet[u] = true;

       // Update dist value of the adjacent vertices of the picked vertex.
       for (int v = 0; v < V; v++)

         // Update dist[v] only if is not in sptSet, there is an edge from
         // u to v, and total weight of path from src to  v through u is
         // smaller than current value of dist[v]
         if (!sptSet[v]  && dist[u] != INT_MAX
                                       && dist[u]+graph[u][v] < dist[v])
            dist[v] = dist[u] + graph[u][v];
     }

     // print the constructed distance array
     //printSolution(dist, V);
}

// driver program to test above function

int graph1[1300][1300],graph2[1300][1300];
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int a,b,i,j,ans;
    int road[1300],rail[1300];
    cin>>V;
    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
            cin>>graph1[i][j];
    }
    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
            cin>>graph2[i][j];
    }
    cin>>a>>b;
    a--;
    b--;
    for(i=0;i<V;i++)
    {
        for(j=i;j<V;j++)
        {
            swap(graph2[i][j],graph2[j][i]);
        }
    }
    dijkstra(graph1,a,road);
    dijkstra(graph2,b,rail);
    ans=-1;
    int temp;
    for(i=0;i<V;i++)
    {
        if(i==a||i==b)
            continue;
        temp=road[i]+rail[i];
        if(ans==-1||temp<ans)
            ans=temp;
    }
    for(i=0;i<V;i++)
    {
        for(j=i;j<V;j++)
        {
            swap(graph2[i][j],graph2[j][i]);
        }
    }
    for(i=0;i<V;i++)
    {
        for(j=i;j<V;j++)
        {
            swap(graph1[i][j],graph1[j][i]);
        }
    }
    dijkstra(graph2,a,rail);
    dijkstra(graph1,b,road);
    for(i=0;i<V;i++)
    {
        if(i==a||i==b)
            continue;
        temp=road[i]+rail[i];
        if(ans==-1||temp<ans)
            ans=temp;
    }
    cout<<ans<<endl;
    return 0;
}

#include <bits/stdc++.h>

using namespace std;

struct edge{
    int v,w;
};
vector<vector<edge> > graph(505);
vector<int> dist(505,2e9);

struct cmp{
    bool operator()(const pair<int,int>& e1, const pair<int,int>& e2){
        return e1.second>e2.second;
    }
};

void dijkstra(int s){
    priority_queue<pair<int,int>,vector<pair<int,int>>,cmp> pq;
    pq.push(pair<int,int>(s,0));
    dist[s]=0;
    while (!pq.empty()){
        int v = pq.top().first;
        int dd = pq.top().second;
        pq.pop();
        if (dd>dist[v])continue;
        for (int i=0;i<graph[v].size();i++){
            int w = graph[v][i].v;
            int d = graph[v][i].w;
            if (dist[w]>dist[v]+d){
                dist[w]=dist[v]+d;
                pq.push(pair<int,int>(w,dist[w]));
            }
        }
    }
}

int main()
{
    int N;
    cin>>N;
    for (int i=0;i<N;i++){
        int u,v,w;
        cin>>u>>v>>w;
        edge e;
        e.v=v; e.w=w;
        graph[u].push_back(e);
        e.v=u;
        graph[v].push_back(e);
    }
    int source;
    cin>>source;
    int q;
    cin>>q;
    dijkstra(source);

    for (int i=0;i<q;i++){
        int dest;
        cin>>dest;
        if (dist[dest]!=2e9){
            cout<<dist[dest]<<endl;
        }
        else {
            cout<<"NO PATH"<<endl;
        }
    }
    return 0;
}

#include <iostream>
using namespace std;
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition (int arr[], int low, int high)
{
    int pivot = arr[high];    // pivot
    int i = (low - 1);  // Index of smaller element
 
    for (int j = low; j <= high- 1; j++)
    {
        // If current element is smaller than or
        // equal to pivot
        if (arr[j] <= pivot)
        {
            i++;    // increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
 
/* The main function that implements QuickSort
 arr[] --> Array to be sorted,
  low  --> Starting index,
  high  --> Ending index */
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
        int pi = partition(arr, low, high);
 
        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main()
{
    int t,n,x,y,d=0,e=0;
    cin>>t;
    for(int i=0;i<t;i++)
    {
    	cin>>n>>x>>y;
    	int a1[100000],a2[100000];
    	for(int j=0;j<n;j++)
    	cin>>a1[j]>>a2[j];
    quickSort(a1,0,n-1);
    quickSort(a2,0,n-1);
    	for(int b=0;b<n;b++)
    	{
    		if(a1[b]-a2[b]>0)
    		d+=a1[b]-a2[b];
    		else e+=a2[b]-a1[b];
    	}
    	cout<<(d*y+e*x)<<endl;
    	d=0;
    	e=0;
    }
    
    return 0;
}

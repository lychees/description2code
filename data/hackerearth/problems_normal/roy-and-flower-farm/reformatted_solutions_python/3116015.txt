def computeDP(totalPlants, lastDaysProfit, fertilizers, profit):

    # First we find what maximum profit Roy could gain
    dp = [[0 for x in xrange(lastDaysProfit+1)] for x in xrange(totalPlants+1)]
    for i in xrange(totalPlants+1):
        for j in xrange(lastDaysProfit+1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif fertilizers[i-1] <= j:
                dp[i][j] = max(profit[i-1] + dp[i-1]
                               [j-fertilizers[i-1]], dp[i-1][j], dp[i][j-1])
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    maxProfit = dp[totalPlants][lastDaysProfit]

    # Now we find the minimum amount he should spend in order to get maximum
    # profit
    i = totalPlants
    j = lastDaysProfit
    while j >= 0 and maxProfit == dp[i][j]:
        j -= 1
    j += 1
    return [j, maxProfit+lastDaysProfit]


def roy_and_flolastDaysProfiter_plant():
    for t in xrange(input()):
        fertilizers = []
        profit = []
        n, p = map(int, raw_input().split())
        for i in xrange(n):
            x, y = map(int, raw_input().split())
            fertilizers.append(y)
            profit.append(x-y)
        res = computeDP(n, p, fertilizers, profit)
        print res[0], res[1]


roy_and_flolastDaysProfiter_plant()

#include<bits/stdc++.h>
#define ll long long
#define f first
#define s second
#define nax 1000005
#define  pll pair<ll , ll>
using namespace std;
vector<pll> v[nax];
bool visited[nax];
ll dist[nax];
ll arr[1005][1005];
ll dijkstra(ll src,ll dest)
{
    priority_queue<pll , vector<pll> , greater<pll> > pq;
    for(ll i=0;i<nax;i++)
    {
        dist[i]=LONG_MAX;
        visited[i]=false;
    }
    pq.push(make_pair(arr[0][0],src));
    while(!pq.empty())
    {
        pll temp = pq.top();
        pq.pop();
        ll ds=temp.f;
        ll nw=temp.s;
        if(!visited[nw])
        {
            visited[nw]=true;


        for(auto it = v[nw].begin();it!=v[nw].end();it++ )
        {
            if(ds+ it->s < dist[it->f])
            {
                dist[it->f]=ds+it->s;
                pq.push(make_pair(dist[it->f],it->f));
            }
        }


    }
    }
    return dist[dest];

}
int main()

{
    // freopen("output.txt", "w", stdout);


   ll t,m,n,a,b,c;
   cin>>t;
   while(t--)
   {
       cin>>m>>n;
       for(ll i=0;i<m;i++)
       {

           for(ll j=0;j<n;j++)
           {
               cin>>arr[i][j];
           }
       }
       for(ll i=0;i<m;i++)
       {
           for(ll j=0;j<n;j++)
           {
               a=i*n+j;
               if(i+1<m)
               {


               b=(i+1)*n+j;
               c=arr[i+1][j];
            v[a].push_back(make_pair(b,arr[i+1][j]));
            v[b].push_back(make_pair(a,arr[i][j]));

               }
               if(j+1<n)
               {
                  b=a+1;
                  c=arr[i][j+1];
            v[a].push_back(make_pair(b,c));
            v[b].push_back(make_pair(a,arr[i][j]));
               }



           }
       }
       cin>>a>>b>>c;
       a--;
       b--;
      // cout<<a*m+b;
      ll k=dijkstra(0,a*n+b);
     // cout<<k;
      if(c-k>=0)
      {
          cout<<"YES\n";
          cout<<(c-k)<<"\n";

      }
      else
      {
          cout<<"NO\n";

      }
      for(ll i=0;i<nax;i++)
        v[i].clear();


   }
}

#include <iostream>
#include <cstdio>
#include <string>
#include <sstream> 
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <ctime>
#include <cassert>
using namespace std;
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define vi vector<int>
#define SZ(x) ((int)(x.size()))
#define fi first
#define se second
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define IN(x,y) ((y).find((x))!=(y).end())
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define DBG cerr << "debug here" << endl;
#define DBGV(vari) cerr << #vari<< " = "<< (vari) <<endl;
typedef long long ll;
const int MAXN = 1000000;
vi g[MAXN];
int cc[MAXN];
bool visited[MAXN];
void dfs(int v, int id)
{
    visited[v] = 1;
    cc[v] = id;
    FOR(i, g[v].size())
    {
        int u = g[v][i];
        if(!visited[u]) dfs(u, id);
    }
}
int main()    
{
    ios_base::sync_with_stdio(0);
    int t;
    cin >> t;
    while(t--)
    {
        int n, m;
        cin >> n >> m;
        FOR(i, n) g[i].clear();
        FOR(i, n) visited[i] = 0;
        vector<pii> bad_edges;
        FOR(i, m)
        {
            int v, u;
            string relation;
            cin >> v >> relation >> u;
            --v; --u;
            if(relation == "=")
            {
                g[v].pb(u);
                g[u].pb(v);
            }
            else
            {
                bad_edges.pb(mp(v, u));
            }
        }
        FOR(i, n)
        {
            if(!visited[i])
            {
                dfs(i, i);
            }
        }
        int fail = 0;
        FOR(i, bad_edges.size())
        {
            int v = bad_edges[i].fi;
            int u = bad_edges[i].se;
            if(cc[v] == cc[u])
            {
                fail = 1;
                break;
            }
        }
        if(fail) cout << "NO" << endl;
        else cout << "YES" << endl;
    }
    return 0;
}
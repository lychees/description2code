#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#include<set>
#define maxn 100009
using namespace std;

int tim;

vector<pair<int,int> > mom;
vector<pair<int,int> > graph[100002];
int dist[100002];
set<int> vanish;
int mptr;

void bfs(int s)
{
    mptr=0;
    queue<int> qu;

    dist[s]=0;
    qu.push(s);
    int ele,a;
    while(!qu.empty())
    {
        ele=qu.front();
        //cout<<ele<<endl;
        qu.pop();
        for(int i=0;i<graph[ele].size();i++)
        {

            a=graph[ele][i].first;
            int z=graph[ele][i].second;

            if(dist[a]==-1)
            {
                tim=dist[ele];
                while(mptr!=mom.size()&&mom[mptr].first<=tim)
                {
                    vanish.insert(mom[mptr++].second);
                }

                //pair<int,int> temp(tim,z);
               // vector<pair<int,int> >::iterator ptr=lower_bound(mom.begin(),mom.end(),temp);
               // if(ptr!=mom.end()&&*ptr==temp)
                 if(vanish.find(z)!=vanish.end())
                    continue;
          //      cout<<a<<" ";
                dist[a]=dist[ele]+1;
                qu.push(a);
            }
        }
            //cout<<endl;
    }
}




int main()
{
    int n,m,k;
    cin>>n>>m>>k;
    int a,b;
    for(int i=0;i<m;i++)
    {
        cin>>a>>b;
        graph[a].push_back(make_pair(b,i+1));
        graph[b].push_back(make_pair(a,i+1));


    }
    int t,x;
    for(int i=0;i<k;i++)
    {
        cin>>t>>x;
        mom.push_back(make_pair(t,x));
    }
    sort(mom.begin(),mom.end());

    for(int i=0;i<=n;i++)
        dist[i]=-1;

    bfs(1);
    cout<<dist[n];
    return 0;
}

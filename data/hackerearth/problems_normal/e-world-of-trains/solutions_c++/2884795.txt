#include <bits/stdc++.h>

using namespace std;
#define MP make_pair
#define PB push_back
#define LL long long
#define int LL
#define st first
#define nd second
#define FI st
#define SE nd
#define FOR(i,a,b) for(int i = (a); i <= (b); i++)
#define RE(i,n) FOR(i,1,n)
#define R(i,n) FOR(i,0,(int)(n)-1)
#define REP(i,n) R(i,n)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PII pair<int,int>
#define VI vector<int>
template<class C> void mini(C&a4, C b4){a4=min(a4,b4);}
template<class C> void maxi(C&a4, C b4){a4=max(a4,b4);}

template<class TH> void _dbg(const char *sdbg, TH h){cerr<<sdbg<<"="<<h<<"\n";}
template<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a){
  while(*sdbg!=',')cerr<<*sdbg++;cerr<<"="<<h;_dbg(sdbg+1,a...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(C) {for(auto&c:C)cerr<<c<<",";cerr<<endl;}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(C) {}
#define cerr if(0)cout
#endif

const int P = 1e9 + 7;
const int N = 3405;
int dp[N][N][2];
int pot[N];


#undef int
int main(){
#define int LL
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout<<fixed<<setprecision(10);
  
  int n, l, t, k;
  cin>>n>>l>>t>>k;
  dp[0][0][0] = 1;
  pot[0] = 1;
  RE (i, n) {
    pot[i] = (pot[i - 1] * k) % P;
  }
  RE (i, n) {
    FOR (com, 0, i) {
      int& D = dp[i][com][0];
      D = (D + k * dp[i - 1][com][0] + (k - 1) * dp[i - 1][com][1]);
      if (i >= l) {
        D = D - (k - (i > l)) * (dp[i - l][com][0] + dp[i - l][com][1]);
      }
      D = ((D % P) + P) % P;
      if (com >= 1) {
        int& E = dp[i][com][1];
        E = (E + dp[i - 1][com - 1][1]);
        if (i >= l) {
          E = (E + (k - (i > l)) * (dp[i - l][com - 1][0] + dp[i - l][com - 1][1])) % P;
        }
      }
    }
#ifdef LOCAL
    int sum0 = 0, sum1 = 0;
    FOR (com, 0, i) {
      sum0 = (sum0 + dp[i][com][0]) % P;
      sum1 = (sum1 + dp[i][com][1]) % P;
    }
    if (i < l) {
      assert(sum0 == pot[i]);
      assert(sum1 == 0);
    } else {
      assert((sum0 + pot[i - l + 1]) % P == pot[i]);
      assert(sum1 == pot[i - l + 1]);
    }
#endif
  }
  int res = (dp[n][t][0] + dp[n][t][1]) % P;
  cout<<res<<endl;
//   int sum = 0;
//   FOR (completed, 0, n) {
//     sum = (sum + dp[n][completed][0] + dp[n][completed][1]) % P;
//   }
        
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  return 0; 
}
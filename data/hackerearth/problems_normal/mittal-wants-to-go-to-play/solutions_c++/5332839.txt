#include<iostream>
#include<utility>
#include<queue>
#include<vector>
#define INF 0x3f3f3f3f
#define ll long long 

#define pll pair<ll, ll> 
using namespace std;
vector<pll> a[10001];


void dijkstra(int queries, int src){
	priority_queue<pll, vector<pll>, greater<pll>> min_heap;
	vector<ll> dis(10001, INF);
	dis[src] = 0;
	min_heap.push(make_pair(0, src));
	while(!min_heap.empty()){
		pll distance = min_heap.top();
		ll x = distance.second;
		min_heap.pop();
		for(int i=0; i < a[x].size(); i++){
			if(dis[a[x][i].first] > a[x][i].second + dis[x]) {
				dis[a[x][i].first] = a[x][i].second + dis[x];
				min_heap.push(make_pair(dis[a[x][i].first], a[x][i].first));
			}
		}
	}
	
	int dest, wei;
	while(queries--){
		//cout << queries;
		cin >> dest >> wei;
		if(dis[dest] * 2 >= wei )
			cout << "0\n";
		else
			cout << wei - dis[dest] * 2 << "\n";
	}
	
}


int main(){
	int test, queries, houses, roads, begin, dest, weight;
	cin >> test;
	while (test--){
		cin >> houses >> roads;
		for(int i = 0; i < houses + 1; i++)
			a[i].clear();
		while (roads--){
			cin >> begin >> dest >> weight;
			a[begin].push_back(make_pair(dest, weight));
			a[dest].push_back(make_pair(begin, weight));
		}
		cin >> queries;
		//cout << queries;
		dijkstra(queries, 1);
	}
	return 0;
}
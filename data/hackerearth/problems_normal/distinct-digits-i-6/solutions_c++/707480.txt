#include<iostream>
#include<vector>
#include<math.h>
#include<set>
#include<map>
#include<string>
#include<bits/stdc++.h>
using namespace std;

#define ll long long int
#define max1 100001
int tree[11][max1];
void update_query(int idx,int value,int k,int n){
  while(idx<=n){
     tree[k][idx]+=value;
     idx+=(idx&-idx);
  }
}

int query_execute(int idx,int c){
  int retval=0;
  while(idx>0){
  retval+=tree[c][idx];
  idx-=(idx&-idx);
  }
  return retval;
}

int distinct_digit(ll value){
  int b[10];
  memset(b,0,sizeof(b));
  while(value!=0){
  b[value%10]++;
  value=value/10;
  }
  int count=0;
  for(int i=0;i<10;i++)
  if(b[i])
  count++;
  return count;
}

int main(){
  int tcase;
 // cin>>tcase;
  //for(int i=0;i<tcase;i++){
  int n;
  cin>>n;

  vector<ll> a;
  a.resize(n+1);

  vector<int> val;
  val.resize(n+1);

  for(int k=1;k<=n;k++){
  cin>>a[k];
  val[k]=distinct_digit(a[k]);
  update_query(k,1,val[k],n);
  }

  int query_count;
  cin>>query_count;
  while(query_count--){
    int choice,u,c;
    ll v;
    cin>>choice;
    cin>>u;
    cin>>v;
    int temp;
    switch(choice){
    case 0:
      a[u]+=v;
      temp=val[u];
      val[u]=distinct_digit(a[u]);
      if(temp!=val[u]){
      update_query(u,-1,temp,n);
      update_query(u,1,val[u],n);
      }
    break;
    case 1:
      a[u]=v;
      temp=val[u];
      val[u]=distinct_digit(a[u]);
      if(temp!=val[u]){
      update_query(u,-1,temp,n);
      update_query(u,1,val[u],n);
      }
    break;
    case 2:
      cin>>c;
      cout<<query_execute(v,c)-query_execute(u-1,c)<<endl;
    }
  }
  //}
}

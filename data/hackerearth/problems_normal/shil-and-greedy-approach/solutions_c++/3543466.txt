#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1024*1024+50;
char s[25];
bool vis[MAXN];
int POWER[30];
int d[MAXN];
const int INF = 1e6+3;
int main() {
	int n;
	scanf("%d",&n);
	scanf("%s",s);
	POWER[0]=1;
	int val=0;
	for(int i=1;i<25;i++) POWER[i]=POWER[i-1]<<1;
	for(int i=n-1;i>=0;i--)
		if(s[i]=='W') val+=POWER[n-i-1];
	for(int i=0;i<MAXN;i++) d[i]=INF;
	vis[val]=true;
	queue<int> q;
	q.push(val);
	d[val]=0;
	if(val==0 or val==POWER[n]-1){printf("0\n");return 0;}
	while(!q.empty()) {
		int val=q.front();
		if(val==0 or val==POWER[n]-1) break;
		q.pop();
		for(int i=0;i<=n-3;i++) {
			int num1=val,num2=val;
			if(val&POWER[i]) {
				num1-=POWER[i];
				num2-=POWER[i];
			}
			else {
				num1+=POWER[i];
				num2+=POWER[i];
			}
			if(val&POWER[i+1]) {
				num1-=POWER[i+1];
				num2-=POWER[i+1];
			}
			else {
				num1+=POWER[i+1];
				num2+=POWER[i+1];
			}
			if(val&POWER[i+2])
				num2-=POWER[i+2];
			else
				num2+=POWER[i+2];
			if(!vis[num1]) {
				vis[num1]=true;
				d[num1]=d[val]+1;
				q.push(num1);
			}
			if(!vis[num2]) {
				vis[num2]=true;
				d[num2]=d[val]+1;
				q.push(num2);
			}
		}
		int num1=val;
		if(val&POWER[n-2])
			num1-=POWER[n-2];
		else
			num1+=POWER[n-2];
		if(val&POWER[n-1])
			num1-=POWER[n-1];
		else
			num1+=POWER[n-1];
		if(!vis[num1]) {
			vis[num1]=true;
			d[num1]=d[val]+1;
			q.push(num1);
		}	
	}
	printf("%d\n",min(d[0],d[POWER[n]-1]));
	return 0;
}
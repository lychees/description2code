#include<bits/stdc++.h>
using namespace std;

int arr[20010];
long long int tree[4*20010];
int lazy[4*20010][5];
int sexy[5];
void build_tree(int node, int a, int b) {
  	if(a > b) return; // Out of range

  	if(a == b) { // Leaf node
        tree[node] = arr[a]; // Init value
		return;
	}

	build_tree(node*2, a, (a+b)/2); // Init left child
	build_tree(node*2+1, 1+(a+b)/2, b); // Init right child

	tree[node] = tree[node*2]+tree[node*2+1]; // Init root value
}

/**
 * Increment elements within range [i, j] with value value
 */
void update_tree(int node, int a, int b, int i, int j) {
    
  	for(int x=0;x<5;x++){
  	if(lazy[node][x] != 0) { // This node needs to be updated
   		long long sz = b-a+1;
   		tree[node]=tree[node]+lazy[node][x]*78*(sz/5);
   		sz=sz%5;
   		int k=x;
   		while(sz){
            tree[node]=tree[node]+lazy[node][x]*sexy[k];
            k=(k+1)%5;
            sz--;
   		}

		if(a != b) {
			lazy[node*2][x]+=lazy[node][x]; // Mark child as lazy
            lazy[node*2+1][(x+(b-a)/2+1)%5]+=lazy[node][x]; // Mark child as lazy
		}

   		lazy[node][x] = 0; // Reset it
  	}
    }
	if(a > b || a > j || b < i) // Current segment is not within range [i, j]
		return;

  	if(a >= i && b <= j) { // Segment is fully within range
        int sz=(b-a+1);
        tree[node]=tree[node]+78*(sz/5);
        sz=sz%5;
        int value = (a-i)%5;
        int k=value;
   		while(sz){
            tree[node]=tree[node]+sexy[k];
            k=(k+1)%5;
            sz--;
   		}
        //cout<<a<<" "<<b<< " "<<tree[node]<<endl;
		if(a != b) { // Not leaf node
			lazy[node*2][value]+=1;
			lazy[node*2+1][(value+(b-a)/2+1)%5]+=1;
		}

    		return;
	}

	update_tree(node*2, a, (a+b)/2, i, j); // Updating left child
	update_tree(1+node*2, 1+(a+b)/2, b, i, j); // Updating right child

	tree[node] = tree[node*2]+tree[node*2+1]; // Updating root with max value
}

/**
 * Query tree to get max element value within range [i, j]
 */
long long int query_tree(int node, int a, int b, int i, int j) {

	if(a > b || a > j || b < i) return 0; // Out of range

	for(int x=0;x<5;x++){
  	if(lazy[node][x] != 0) { // This node needs to be updated
   		long long sz = b-a+1;
   		tree[node]=tree[node]+lazy[node][x]*78*(sz/5);
   		sz=sz%5;
   		int k=x;
   		while(sz){
            tree[node]=tree[node]+lazy[node][x]*sexy[k];
            k=(k+1)%5;
            sz--;
   		}

		if(a != b) {
			lazy[node*2][x]+=lazy[node][x]; // Mark child as lazy
            lazy[node*2+1][(x+(b-a)/2+1)%5]+=lazy[node][x]; // Mark child as lazy
		}

   		lazy[node][x] = 0; // Reset it
  	}
    }

	if(a >= i && b <= j) // Current segment is totally within range [i, j]
		return tree[node];

	long long int q1 = query_tree(node*2, a, (a+b)/2, i, j); // Query left child
	long long int q2 = query_tree(1+node*2, 1+(a+b)/2, b, i, j); // Query right child

	long long int res = q1+q2; // Return final result

	return res;
}

long long gcd(long long a, long long b){

    if(a%b==0) return b;
    return gcd(b,a%b);


}

int main() {
    int n,q;
    cin>>n>>q;
    sexy[0]=16;sexy[1]=9;sexy[2]=26;sexy[3]=26;sexy[4]=1;
	for(int i = 0; i < n; i++) cin>>arr[i];

	build_tree(1, 0, n-1);

	

	for(int i=0;i<q;i++){
        int x,l,r;
        cin>>x>>l>>r;
        l--;
        r--;
        if(x==0){
            update_tree(1,0,n-1,l,r);
          //  for(int j=0;j<n;j++) cout<<query_tree(1,0,n-1,j,j)<<" ";
          //  cout<<endl;
        }
        else{
            long long ans = query_tree(1,0,n-1,l,r);
            long long gc = gcd(ans,r-l+1);
           // ans=ans/gc;
            long long sz = (r-l+1);
            cout<<ans<<"/"<<sz<<endl;

        }
	}

}

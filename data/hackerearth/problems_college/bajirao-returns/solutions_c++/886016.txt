#define _USE_MATH_DEFINES
#include <algorithm>
#include <cstdio>
#include <functional>
#include <iostream>
#include <cstring>
#include <climits>
#include <cmath>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <time.h>
#include <vector>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> i_i;
typedef pair<ll, int> ll_i;
typedef pair<double, int> d_i;
typedef pair<ll, ll> ll_ll;
typedef pair<double, double> d_d;
struct edge { int u, v; ll w; };
 
int MOD = 1000000007;

int main() {
	int N; cin >> N;
	vector< vector<int> > a(N + 1, vector<int>(N + 1));
	for (int i = 1; i <= N; i++)
		for (int j = 1; j <= N; j++) cin >> a[i][j];
	vector< vector<bool> > b(N + 1, vector<bool>(N + 1));
	for (int i = 1; i <= N; i++) {
		for (int j = i; j > 0; j /= 2)
			b[i][j] = true;
		for (int j = 1; j <= N; j++)
			if (j * 2 <= N) b[i][j * 2] = b[i][j * 2] || b[i][j];
	}
	vector< vector<int> > dp(N + 2, vector<int>(N + 1));
	for (int i = 0; i < N; i++)
		for (int j = 1; j <= N; j++)
			for (int _j = 1; _j <= N; _j++)
				if (b[j][_j]) dp[i + 1][_j] = max(dp[i + 1][_j], dp[i][j] + a[i + 1][_j]);
	int maxi = 0;
	for (int j = 1; j <= N; j++) maxi = max(maxi, dp[N][j]);
	cout << maxi << endl;
}
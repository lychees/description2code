#include <bits/stdc++.h>
using namespace std;

struct queueEntry
{
    int v;
    int dist;
};

int getMinDiceThrows(int move[], int N)
{
    bool *visited = new bool[N];
    for (int i = 0; i < N; i++)
        visited[i] = false;
    queue<queueEntry> q;
    visited[0] = true;
    queueEntry a;
    a.dist = 0;
    if(move[0] != -1)
        a.v = move[0];
    else
        a.v = 0;
    q.push(a);
    queueEntry qe;
    while (!q.empty())
    {
        qe = q.front();
        int v = qe.v;
        if (v == N - 1)
            break;
        q.pop();
        for (int j = v + 2; j <= (v + 12) && j < N; ++j)
        {
            if (!visited[j])
            {
                queueEntry a;
                a.dist = (qe.dist + 1);
                visited[j] = true;

                if (move[j] != -1)
                    a.v = move[j];
                else
                    a.v = j;
                q.push(a);
            }
        }
    }

    return qe.dist;
}

int main()
{
    int t;
    scanf("%d", &t);
    while(t--) {
        int flag = 0;
        int n, l;
        scanf("%d%d", &n, &l);
        int moves[n];
        for (int i = 0; i < n; i++)
            moves[i] = -1;
        while(l--) {
            int u, v;
            scanf("%d%d", &u, &v);
            u--;
            v--;
            moves[u] = v;
        }
        cout << getMinDiceThrows(moves, n) << endl;
    }
    return 0;
}

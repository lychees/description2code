#include <iostream>
using namespace std;

void max_heapify(int Arr[],int i, int n);
void build_maxheap(int Arr[], int n);
unsigned long long int extract_maximum_pdt(int Arr[],int n);
void insert_maxheap(int Arr[],int n, int val);

int main()
{
    int n;
    cin>>n;
    int A[n+1],maxheap[n+1];
    if(n<3){
    	cout<<"-1"<<endl<<"-1"<<endl;
    }
    else{
    cin>>A[1]>>A[2];
    maxheap[1]=A[1];
    maxheap[2]=A[2];
    cout<<"-1"<<endl<<"-1"<<endl;
    build_maxheap(maxheap,2);
    for(int i=3;i<=n;i++){
    	cin>>A[i];
    	maxheap[i]=A[i];
    	insert_maxheap(maxheap,i,A[i]);
		cout<<extract_maximum_pdt(maxheap,i)<<endl;
	}    
    return 0;
}
}


void max_heapify(int Arr[],int i, int n){
	int left = 2*i;
	int right = 2*i + 1;
	int largest;
	
	if(left<=n and (Arr[i]<Arr[left]))
		largest = left;
	else
		largest = i;
	
	if(right<=n and (Arr[largest]<Arr[right]))
		largest = right;
	
	if(largest!=i){
		swap(Arr[i],Arr[largest]);
		max_heapify(Arr,largest,n);
	}
}

void build_maxheap(int Arr[], int n){
	for(int i=n/2;i>=1;i--){
		max_heapify(Arr,i, n);
	}
}

unsigned long long extract_maximum_pdt(int Arr[],int n){
	int firstmax,secondmax,thirdmax;
	unsigned long long prod, mid;
	if(n>2){
		firstmax = Arr[1];
		Arr[1]=Arr[n];
		n--;
		max_heapify(Arr,1,n);
		secondmax = Arr[1];
		Arr[1]=Arr[n];
		n--;
		max_heapify(Arr,1,n);
		thirdmax = Arr[1];
		//cout<<"+"<<firstmax<<"+"<<secondmax<<"+"<<thirdmax<<endl;
		insert_maxheap(Arr, n+1, firstmax);
		insert_maxheap(Arr, n+2, secondmax);
		mid = firstmax * secondmax;
		prod = mid * thirdmax;
		return prod;
	}
	return -1;
}

void insert_maxheap(int Arr[], int n, int val){
	Arr[n]=val;
	while(n>1 and Arr[n/2]<Arr[n]){
		swap(Arr[n/2],Arr[n]);
		n=n/2;
	}
}

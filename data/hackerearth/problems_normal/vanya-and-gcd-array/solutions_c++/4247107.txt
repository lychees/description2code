// monera
#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define f(i,a,b) for(int i =a; i <=b ; i++)
#define all(a) a.begin(),a.end()
#define ff first
#define ss second
#define sqr(x) ((x)*(x))
#define sz(x) (int)(x.size())
#define EPS 1e-9
#define db(var) cout<<var<<" ";
#define el cout<<endl;
#define p(A,a,b)  f(i,a,b) cout<<A[i]<<" ";
#define sj  cout<<"OK"<<endl;
#define ll long long int 


//functions
#define count_1(n)    __builtin_popcountll(n)
#define gcd(a,b) __gcd(a,b)
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define lcm(_1,_2)           ((_1/gcd(_1,_2))*(_2))

#define MOD 1000000007
#define PI acos(-1.0)
#define e exp(1.0)
#define EPS 1e-9
#define INF    2047483647
#define INFLL  9023372036854775807LL
const int MX=100005;

using namespace std;
int n;
int ar[505];
ll dp[505][505][105];

ll solve(int cur,int prev,int g){
	
	if(cur==n){
		if(g==1)
			return 1;

		else
			return 0;
	}
//	db(cur) db(prev) db(g)  db(dp[cur][prev][g]) el
	if(dp[cur][prev][g]!=-1 && prev!=-1){
		
		return dp[cur][prev][g];
	}
	// not picked

	ll val = solve(cur+1,prev,g);

    // pick current
	ll val1=0;

	if(prev==-1){
		val1 = solve(cur+1,cur,ar[cur]);
	}
	else{
		if(ar[cur]>ar[prev]){
			val1= solve(cur+1,cur,gcd(ar[cur],g));
		}
	}
	
	if(prev!=-1)
	dp[cur][prev][g] = (val+val1)%MOD;
	 
	return (val+val1)%MOD;
}

int main() 
{
	memset(dp,-1,sizeof(dp));
	cin>>n;

	for(int i=0;i<n;i++)
		cin>>ar[i];

	cout<<solve(0,-1,-1)<<endl;

	
  return 0;
}


import math


def pow_mod(a, d, cur):
    x = 1
    tmp = a
    while True:
        if d % 2 == 1:
            x = (x * tmp) % cur
        d = math.floor(d/2)
        if d > 0:
            tmp = (tmp * tmp) % cur
        else:
            break
    return x


# list = [1, 1]
numer = [1]
denom = [1]
t = int(raw_input())
found = 0
while t > 0:
    t = t - 1
    n = int(raw_input())
    if n <= found:
        multiplicant = pow_mod(denom[n], 1000000005, 1000000007)
        print(numer[n] * multiplicant) % 1000000007
        continue
    for i in range(found+1, n+1):
        temp = (((numer[i-1]*(2*i-1)) % 1000000007)*2) % 1000000007
        numer.append(temp)
        temp = (denom[i-1]*(i+1)) % 1000000007
        denom.append(temp)
    found = n
    multiplicant = pow_mod(denom[n], 1000000005, 1000000007)
    print(numer[n] * multiplicant) % 1000000007

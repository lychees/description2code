#include <bits/stdc++.h>
using namespace std;
int a[110];
int f[110];
int n;

int dp[110][110];
int tab[110];

int qsum(int l,int r)
{
	return f[r]-(l?f[l-1]:0);
}

int ff(int sum,int l,int r)
{
	if(l>r)
		return 0;
	if(l==r)
		return a[l]==sum;
	if(dp[l][r]!=-1)
		return dp[l][r];
	int S=qsum(l,r);
	if(S==sum)
		return dp[l][r]=1;
	if(S<sum)
		return dp[l][r]=0;
	int ans=0;
	for(int i=l;i<r;i++)
		ans=max(ans,ff(sum,l,i)+ff(sum,i+1,r));
	return dp[l][r]=ans;
}

int fx(int sum,int n)
{
	if(n<0)
		return 0;
	int ans=0;
	if(tab[n]!=-1)
		return tab[n];
	for(int i=n;i>=0;i--)
	{
		ans=max(ans,((qsum(i,n)==sum)+fx(sum,i-1)));
	}
	return tab[n]=ans;
}
int main()
{

	int i,j;
	cin>>n;
	for(i=0;i<n;i++)
	{
		cin>>a[i];
		f[i]=a[i]+(i?f[i-1]:0);
		// cout<<a[i]<<endl;
	}

	set<int> S;
	for(i=0;i<n;i++)
	{
		for(j=i;j<n;j++)
			S.insert(qsum(i,j));
	}

	vector<int> vx;
	for(set<int>::iterator it=S.begin();it!=S.end();++it)
	{
		vx.push_back(*it);
	}

	vector<int> vcnt(vx.size());
	int ans=0;
	for(i=0;i<vx.size();i++)
	{
		for(j=0;j<=n;j++)
			tab[j]=-1;
		vcnt[i]=fx(vx[i],n-1);
		ans=max(ans,vcnt[i]);
	}

	cout<<ans<<endl;
	// cout<<vcnt.size()<<endl;
	for(i=0;i<vcnt.size();i++)
	{
		if(vcnt[i]==ans)
			cout<<vx[i]<<" ";
	}
	return 0;
}
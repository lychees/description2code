#include <bits/stdc++.h>
using namespace std;

//#pragma comment (linker, "/STACK:256000000")
#define MOD 1000000009
#define MEMSET_INF 127 // about 2B
#define NUM 1000000
#define mp make_pair
#define pb push_back
#define fileout freopen("out.txt","w",stdout);
#define boost  ios_base::sync_with_stdio(false);
#define set0(a) memset(a,0,sizeof(a))
#define setminus1(a) memset(a,-1,sizeof(a))
#define setinf(a) memset(a,MEMSET_INF,sizeof(a))
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;

typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
typedef map<int, int> mii;
typedef long long int ll;

ll gcd(ll a , ll b){return b==0?a:gcd(b,a%b);}

//#define localtest 
//#define morethanonetestcase 

struct cmp
{
    bool operator()(pair < pair<int,int> , int> a,pair < pair<int,int> , int> b)
	{
		if( a.first.first < b.first.first)
	    	return true;
		else if ( a.first.first == b.first.first)
			return a.first.second < b.first.second;
		return false;
	}
};

/* Aag ka dariya hai , doob ke jana hai :P */
// vabs
int vis[1255] = {0};
int road[1255][1255] = {0},rail[1255][1255] = {0} , roadr[1255][1255] = {0} ,railr[1255][1255] = {0};
int droad[1255] = {0},drail[1255] = {0} , droadr[1255]= {0} ,drailr[1255] = {0};
void dijkshtra(int src[][1255] , int dist[] , int source,int n)
{
	int v,dv,i;
	set0(vis);
	set < pair<int,int> >q;
	q.insert(make_pair(0,source));
	for(i=0;i<n;i++)
	{
		dist[i] = MOD;
	}
	dist[source]=0;
	while(!q.empty())
	{
		v = q.begin()->second;
		dv = q.begin()->first;
		q.erase(q.begin());

		if(vis[v]==1)
			continue;
		vis[v]=1;
		//trace3(source,v,dv);
		for(i=0;i<n;i++)
		{
			if(i!=v&&vis[i]==0)
			{
				if(dist[i] > dist[v] + src[v][i])
				{
					dist[i] = dist[v] + src[v][i];
					q.insert(make_pair(dist[i],i));
					//trace3(i,v,dist[v]);
				}
			}
		}
	}
	for(i=0;i<n;i++)
	{
		//trace3(source,i,dist[i]);
	}
}
int main()
{
	int tc;
	#ifdef localtest
		freopen("inp.txt","r",stdin);
	#endif

	#ifdef morethanonetestcase
		scanf("%d",&tc);
	#else
		tc = 1;
	#endif
	
	int i,n,m,j,s,t,ans;
	while(tc--)
	{
		scanf("%d",&n);
		for(i=0;i<n;i++)
		{
			for(j=0;j<n;j++)
			{
				scanf("%d",&road[i][j]);
				roadr[j][i] = road[i][j];
			}
		}
		for(i=0;i<n;i++)
		{
			for(j=0;j<n;j++)
			{
				scanf("%d",&rail[i][j]);
				railr[j][i] = rail[i][j];
			}
		}
		scanf("%d%d",&s,&t);
		s--;
		t--;
		dijkshtra(road,droad,s,n);
		dijkshtra(rail,drail,s,n);
		dijkshtra(roadr,droadr,t,n);
		dijkshtra(railr,drailr,t,n);
		ans = MOD;
		for(i=0;i<n;i++)
		{
			if(i!=s && i!=t)
			{
				ans = min(ans , droad[i] + drailr[i]);
				ans = min(ans , drail[i] + droadr[i]);
			}
		}
		printf("%d\n",ans);
	}
	return 0;
}

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <bitset>
#define f first
#define s second
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define vi vector <int>
#define pii pair<int, int>
using namespace std;          
const int N = int(1e6) + 10; 
int n,q,tin[N],tout[N],T;
vector <int> g[N];
int up[N][20];
bool used[N];
int t[2*N];

void dfs(int v){
	used[v] = 1;
	tin[v] = ++T;
	for(int i=0;i<g[v].size();i++){
		int to = g[v][i];
		if(!used[to]){
			up[to][0] = v;
			dfs(to);
		}
	}
	tout[v] = ++T;
}

bool ok(int u,int v){
	return (tin[u] <= tin[v] && tout[u] >= tout[v]);
}

void precalc(){
	for(int j=1;j<=18;j++){
		for(int i=1;i<=n;i++) if(up[i][j-1] != -1){
			up[i][j] = up[up[i][j-1]][j-1];
		}
	}
}

int lca(int u,int v){
	if(ok(u,v)) return u;
	if(ok(v,u)) return v; 
	for(int i=18;i>=0;i--) {
	    if(up[v][i] != -1 && !ok(up[v][i],u)) v = up[v][i];
	}
	return up[v][0];
}

void upd(int v,int val){
	v += T - 1;
	t[v] += val;
	while(v > 1){
		v /= 2;
		t[v] = t[2*v] + t[2*v+1];
	}
}

int get(int l,int r){
	l += T - 1;
	r += T - 1;
	int res = 0;
	while(l <= r){
		if(l & 1) res += t[l];
		if(!(r & 1)) res += t[r];
		l = (l + 1) / 2;
		r = (r - 1) / 2;
	}
	return res;
}

int main () {
	scanf("%d%d",&n,&q);
	for(int i=1,u,v;i<n;i++){
		scanf("%d%d",&u,&v);
		g[u].pb(v);
		g[v].pb(u);
	}
	memset(up,-1,sizeof(up));
	dfs(1);
	precalc();
	int x;
	for(int i=1,tp,u,v;i<=q;i++){
	    scanf("%d",&tp);
	    if(tp == 1){
	    	scanf("%d%d",&u,&v);
	    	upd(tin[u],1);
	    	upd(tin[v],1);
	    	x = lca(u,v);
	    	upd(tin[x],-1);
	    	x = up[x][0];
	    	if(x != -1){
	    		upd(tin[x],-1);
	    	}
	    }
	    else{
	    	scanf("%d",&v);
	    	printf("%d\n",get(tin[v],tout[v]));
	    }
	}

return 0;
}

/*
	+AmitBaranwal
	amitbaranwal53@gmail.com
*/
#include <bits/stdc++.h>

using namespace std;

int temp,i,j,k,T;

#define CASE s(T);while(T--)
#define FOR(I,A,B) for(I=A;I<B;++I)
#define REP(i,n) FOR(i,0,n)
#define FORR(I,J,K) for(I=J;I>K;--I)
#define JAM(N) printf("Case #%d: ",N)
#define INPUT(A) freopen(A,"r",stdin);
#define OUTPUT(A) freopen(A,"w",stdout);

#define all(x) x.begin(), x.end()
#define fill(a, val) memset(a, val, sizeof(a))
#define INDEX(a, val) (lower_bound(all(a), val) - a.begin())

#define EXP 1e-10
#define INF (int)1e9

#define F first
#define S second
#define MP make_pair
#define PB push_back

typedef long long LL;
typedef pair<int,int> PII;
typedef pair<LL,LL> PLL;
typedef pair<int,PII> TRI;
typedef unsigned long long ULL;

#define deb(n) cout<<"(<<< DEBUG "<<#n<<" -> "<<n<<" >>>)"<<endl;

#define s(n)					scanf("%d",&n)
#define sl(n) 					scanf("%ld",&n)
#define sll(n) 					scanf("%I64d",&n)
#define sf(n) 					scanf("%f",&n)
#define slf(n) 					scanf("%lf",&n)
#define ss(n) 					scanf("%s",n)

LL pow_r(LL d,LL n)
{
	LL x=1ll;
	while(n>0)
	{
		if(n&1)	x=(x*d);
		d=(d*d);
		n>>=1;
	}
	return x;
}
//main code is here

// This code performs maximum bipartite matching.
//
// Running time: O(|E| |V|) -- often much faster in practice
//
// INPUT: w[i][j] = edge between row node i and column node j
// OUTPUT: mr[i] = assignment for row node i, -1 if unassigned
// mc[j] = assignment for column node j, -1 if unassigned
// function returns number of matches made
#include <vector>
using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
bool FindMatch(int i, const VVI &w, VI &mr, VI &mc, VI &seen) {
for (int j = 0; j < w[i].size(); j++) {
if (w[i][j] && !seen[j]) {
seen[j] = true;
if (mc[j] < 0 || FindMatch(mc[j], w, mr, mc, seen)) {
mr[i] = j;
mc[j] = i;
return true;
}
}
}
return false;
}
int BipartiteMatching(const VVI &w) {
VI mr = VI(w.size(), -1);
VI mc = VI(w[0].size(), -1);
int ct = 0;
for (int i = 0; i < w.size(); i++) {
VI seen(w[0].size());
if (FindMatch(i, w, mr, mc, seen)) ct++;
}
return ct;
}

int n,m;
PII team[222],cp[222];
int speed[222];
VVI wt,tmp;
void in()
{
	#ifndef ONLINE_JUDGE
	INPUT("input.txt");
	//OUTPUT("output.txt");
	#endif
	s(n);s(m);s(k);
	REP(i,n){s(team[i].F);s(team[i].S);}
	REP(i,m){s(cp[i].F);s(cp[i].S);}
	REP(i,n) s(speed[i]);
}

int main()
{
	in();
	wt.resize(n);
	REP(i,n) wt[i].resize(m);
	tmp.resize(n);
	REP(i,n) tmp[i].resize(m);
	int mx=-1;
	REP(i,n)
	REP(j,m)
	{
		int a=team[i].F-cp[j].F;
		int b=team[i].S-cp[j].S;
		a=a*a;
		b=b*b;
		int s=speed[i]*speed[i];
		wt[i][j]=(a+b+s-1)/s;
		mx=max(mx,wt[i][j]);
	}
	int beg=0,end=mx,mid,v;
	while(beg<end)
	{
		mid=(beg+end)>>1;
		REP(i,n)
		REP(j,m)
		if(wt[i][j]>mid) tmp[i][j]=0;
		else tmp[i][j]=1;
		v=BipartiteMatching(tmp);
		if(v<k) beg=mid+1;
		else end=mid;
	}
	cout<<beg<<endl;
	return 0;
}

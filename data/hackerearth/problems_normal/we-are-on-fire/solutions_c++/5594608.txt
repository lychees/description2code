#include<bits/stdc++.h>
using namespace std;
int a[1001][1001],n,m,q;
queue<pair<int,int> >q1;
//vector<int>v[1000002];
long long int MAX1=1e9+7;
int dir[][2]={ {-1,0},{1,0},{0,-1},{0,1} };
long long int count1=0;
void attack(int,int);

int main()
{

    scanf("%d%d%d",&n,&m,&q);
    for(int i=1;i<=n;i++)
    {
      for(int j=1;j<=m;j++)
      {
        scanf("%d",&a[i][j]);
        if(a[i][j]==1)
        {
          count1++;
          count1=count1%MAX1;
        }
      }
    }
    //printf("%d\n",count1 );
    int x,y;
    for(int i=1;i<=q;i++)
    {
      scanf("%d%d",&x,&y);

        if(a[x][y]==1)
        {
          count1--;
          count1=count1%MAX1;
          a[x][y]=0;
          //a[x[i]][y[i]]=0;
          attack(x,y);
          printf("%lld\n",count1);
        }
        else
          printf("%lld\n",count1 );
      }
        return 0;
    }




void attack(int x,int y)
{
  q1.push(make_pair(x,y));
  while(!q1.empty())
  {
    int X=q1.front().first;
    int Y=q1.front().second;
    q1.pop();

    if(X+1<=n && a[X+1][Y]==1)
    {
        count1--;
        count1=count1%MAX1;
        a[X+1][Y]=0;
        q1.push(make_pair(X+1,Y));
    }

    if(Y+1<=m && a[X][Y+1]==1)
    {
      count1--;
      count1=count1%MAX1;
      a[X][Y+1]=0;
      q1.push(make_pair(X,Y+1));
    }

    if(X-1>=1 &&a[X-1][Y]==1 )
    {
      count1--;
      count1=count1%MAX1;
      a[X-1][Y]=0;
      q1.push(make_pair(X-1,Y));
    }

    if(Y-1>=1 && a[X][Y-1]==1)
    {
      count1--;
      count1=count1%MAX1;
      a[X][Y-1]=0;
      q1.push(make_pair(X,Y-1));
    }


  }
}

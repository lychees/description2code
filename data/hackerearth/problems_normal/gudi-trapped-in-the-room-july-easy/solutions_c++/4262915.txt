/**
  * task: https://www.hackerearth.com/july-easy-16/algorithm/gudi-trapped-in-the-room-july-easy/
  * solution: bfs
  */

#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <queue>

int number(const std::string& s)
{
    int result = 0;
    for ( char c : s )
        result = (result*10 + c - '0');

    return result;
}

std::string str(int n, unsigned sz)
{
    std::string s;
    while ( n > 0 )
    {
        s += (n%10 +'0');
        n /= 10;
    }

    std::reverse(s.begin(), s.end());

    while ( s.size() < sz )
        s = '0' + s;

    return s;
}

int pow(int x, int p)
{
    --p;
    int res = 1;
    while ( p-- )
        res *= x;

    return res;
}

int main()
{
    int t;
    std::cin >> t;
    while ( t-- )
    {
        std::string s;
        std::cin >> s;

        int a, h;
        std::cin >> a >> h;

        int sz = s.size();
        int n = number(s);
        int ten = pow(10, sz);

        std::vector<bool> used(1000000, false);
        int best = n;

        used[n] = true;
        std::queue<std::string> q;
        q.push(s);
        while ( !q.empty() )
        {
            std::string x = q.front();
            q.pop();

            n = number(x);

            // h
            int n1 = n;
            for ( int i = 0; i < h; ++i )
                n1 = (n1%10)*ten + (n1/10);

            if ( !used[n1] )
            {
                used[n1] = true;
                if ( n1 < best )
                    best = n1;

                q.push(str(n1, sz));
            }

            // a
            for ( int i = 1; i < sz; i += 2 )
                x[i] = ((x[i] - '0') + a)%10 + '0';

            int n2 = number(x);
            if ( !used[n2] )
            {
                used[n2] = true;
                if ( n2 < best )
                    best = n2;

                q.push(x);
            }
        }

        std::cout << str(best, sz) << std::endl;
    }

    return 0;
}

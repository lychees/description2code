#include<iostream>
#include<stdio.h>
#include<map>
#include<list>
#include<vector>
using namespace std;

struct Flight
{
    int src;
    int dest;
};
int arr[100001];


int lenA;
int lenB;

int getRoot(int a,int c)
{
    int count = 0;
    while(a!=arr[a])
    {
        a = arr[a];
        count++;
    }
    if(c == 1)
        lenA = count;
    else
        lenB = count;

    return a;
}

int getRootTriv(int a)
{
    while(a!=arr[a])
    {
        a = arr[a];
    }
    return a;
}

bool isConnected(int a,int b)
{
    return getRootTriv(a) == getRootTriv(b);
}

bool connect(int a,int b)
{
    int ra = getRoot(a,1);
    int rb = getRoot(b,2);

    if(lenA > lenB)
        arr[rb] = a;
    else
        arr[ra] = b;
}


int main()
{
    int n,m;
    scanf("%d %d",&n,&m);


    for(int i=1; i<=n; i++)
        arr[i] = i;

    vector<Flight> flights;

    for(int i=1; i<=m; i++)
    {
        Flight f;
        scanf("%d %d",&f.src,&f.dest);
        flights.push_back(f);
    }

    vector<int> cancels;
    for(int i=m-1; i>=0; i--)
    {
        Flight f = flights[i];
        if(!isConnected(f.src,f.dest))
            connect(f.src,f.dest);
        else
            cancels.push_back(i+1);
    }

    int l = cancels.size();
    cout<<l<<endl;
    for(int i=l-1; i>=0; i--)
        cout<<cancels[i]<<endl;






    return 0;
}

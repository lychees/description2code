#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define mp make_pair
#define INF 9000000

vector<int>graph[200000];
int visit[200000];
int low[200000];
int dist[200000];
map<pair<int,int>,int>store;
vector<pair<int,int> >edge;
int dfs(int,int);
int d1;
int main()
{
    memset(visit,0,sizeof(visit));
    memset(low,0,sizeof(low));
    memset(dist,0,sizeof(dist));
    d1++;
    int n,m;
    cin>>n>>m;
    int s,d;int i;
    for(i=0;i<m;i++)
    {
        cin>>s>>d;
        edge.pb(mp(s,d));
        graph[s].pb(d);
        graph[d].pb(s);
    }
    for(i=1;i<=n;i++)
    {
        if (visit[i]==0)
        {
            dfs(i,0);
        }
    }

    int q;
    cin>>q;int q1;
    for(i=0;i<q;i++)
    {
        cin>>q1;
        q1--;
        if(store[edge[q1]]==1)
        {
            cout<<"Unhappy\n";
        }
        else
            cout<<"Happy\n";
    }
    return 0;
}//main

int dfs(int index,int parent)
{
    int i,val;
    if (visit[index]==0)
    {
        visit[index]=1;
        dist[index]=d1;
        low[index]=d1;
        d1++;
        for(i=0;i<graph[index].size();i++)
        {
            if (graph[index][i]!=parent)
            {
                val=dfs(graph[index][i],index);
                low[index]=min(low[index],val);
                if (dist[index]<val)
                {
                    store[mp(index,graph[index][i])]=1;
                    store[mp(graph[index][i],index)]=1;
                }
            }//if

        }//i
        return low[index];

    }
    else
        return low[index];




}


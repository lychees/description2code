#include<iostream>
#include<stack>
#include<vector>
#include<utility>
#include<stdio.h>
using namespace std;
int get_input(int& a,int& b)
{
    char rel='\0';
    cin>>a;
    getchar();
    rel=getchar();
    if(rel=='!')
        getchar();
    getchar();
    cin>>b;
    return rel=='!';
}
void dfs(vector< vector<int> >& graph,vector<int>& visited,int node,int last_graph)
{
    stack<int> st;
    st.push(node);
    vector<int> :: iterator itr;
    visited[node]=last_graph;
    int curr_node;
    while(!st.empty())
    {
        curr_node=st.top();
        st.pop();
        for(itr=graph[curr_node].begin();itr!=graph[curr_node].end();itr++)
            if(!visited[*itr])
            {
                st.push(*itr);
                visited[*itr]=last_graph;
            }
    }
}
int main()
{
  int test,n,k,last_graph;
  int i=0,j=0;
  int a,b,ineq_len;
  cin>>test;
  char rel='\0';
   while(i++<test)
   {
       cin>>n>>k;
       j=0;
       last_graph=1;
       vector< vector<int> > graph(n+1);
       vector<int> visited(n+1);
       vector< pair<int,int> > inequality;
       while(j<k)
       {

           if(get_input(a,b))
            inequality.push_back(make_pair(a,b));
           else {
                graph[a].push_back(b);
                graph[b].push_back(a);
           }
           j++;
       }
       j=1;
       while(j<=n){
        if(!visited[j])
            dfs(graph,visited,j,last_graph++);
        j++;
       }
       j=0;ineq_len=inequality.size();
       while(j<ineq_len)
       {
           if(visited[inequality[j].first]==visited[inequality[j].second])
           {
               cout<<"NO"<<endl;
               break;

           }
           j++;
       }
       if(j==ineq_len)
       cout<<"YES"<<endl;
   }
   return 0;
}

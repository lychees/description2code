
/*
ID: pratikz1
LANG: C++
PROB: 
*/
// Standard includes
#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<limits.h>
#include<string.h>
#include<sstream>
#include<fstream>
//Data Structures
#include<algorithm>
#include<vector>
#include<string>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>
using namespace std;

#define FOR(i,a,b)  for(int i= (int )a ; i < (int )b ; ++i)
#define rep(i,n)    FOR(i,0,n)
#define INF     INT_MAX
#define ALL(x)      x.begin(),x.end()
#define LET(x,a)    __typeof(a) x(a)
#define IFOR(i,a,b)     for(LET(i,a);i!=(b);++i)
#define EACH(it,v)  IFOR(it,v.begin(),v.end())
#define pb      push_back
#define sz(x)       int(x.size())
#define mp      make_pair
#define fill(x,v)   memset(x,v,sizeof(x))
#define si(n)       scanf("%d",&n)
#define pi(n)       printf("%d ",n)
#define pil(n)      printf("%d\n",n)
#define sl(n)       scanf("%lld",&n)
#define sd(n)       scanf("%lf",&n)
#define ss(n)       scanf("%s",n)

typedef pair<int,int> PI;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;


int dpa[1000001],dpb[1000001],dpc[1000001];

int main()
{
	int t,i,len,x,y,gt;
	si(t);
	while(t--)
	{
		LL ans=0;
		string s;
//		int dpa[1000001],dpb[1000001],dpc[1000001];
		cin >> s;
		len=s.size();
		if(s[len-1]=='a')
			dpa[len-1]=len-1;
		else
			dpa[len-1]=-1;
		if(s[len-1]=='b')
			dpb[len-1]=len-1;
		else
			dpb[len-1]=-1;
		if(s[len-1]=='c')
			dpc[len-1]=len-1;
		else
			dpc[len-1]=-1;

		for(i=len-2;i>=0;i--)
		{
			if(s[i] == 'a')
				dpa[i]=i;
			else
				dpa[i]=dpa[i+1];
			if(s[i] == 'b')
				dpb[i]=i;
			else
				dpb[i]=dpb[i+1];
			if(s[i]=='c')
				dpc[i]=i;
			else
				dpc[i]=dpc[i+1];
		}
//		FOR(i,0,len)
//			cout << dpa[i] << " " << dpb[i] << " " << dpc[i] << endl;
		FOR(i,0,len)
		{
			if(s[i] == 'a')
			{
				x=dpb[i];
				y=dpc[i];
				if(x == -1 || y == -1)
					ans+=(len-i);
				else
				{
				gt=max(x,y);
				ans+=(gt-i);
				}
//				cout << ans << endl;
			}
			else if(s[i] == 'b')
			{
				x=dpa[i];
				y=dpc[i];
				if(x == -1 || y == -1)
					ans+=(len-i);
				else
				{
				gt=max(x,y);
				ans+=(gt-i);
				}
//				cout << ans << endl;
			}
			else if(s[i] == 'c')
			{
				x=dpa[i];
				y=dpb[i];
				if(x == -1 || y == -1)
					ans+=(len-i);
				else
				{
				gt=max(x,y);
				ans+=(gt-i);
				}
//				cout << ans << endl;
			}
		}
		printf("%lld\n",ans);
	}
	return 0;
}


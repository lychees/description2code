#include <bits/stdc++.h>

using namespace std;

#define ll long long int
#define vi vector<int>
#define all(c) c.begin(), c.end()
#define pb push_back
#define f first
#define s second
#define mod 1000000007
#define inf 1e9
#define pl pair<ll,ll>
#define pii pair<pi,pi>
#define f first
#define mp make_pair
#define s second
#define rep(i,a,n) for(int i=a;i<n;i++)
#define repd(i,a,b) for(int (i)=(a); (i)>=(b);i--)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define present(container, element) (container.find(element) != container.end())
#define cpresent(container, element) (find(all(container),element) != container.end())

//#define test

long long fact[1000005];

long long int fast_pow(long long int a, long long int n) {
    long long int res = 1;
    while(n) {
        if(n & 1) {
            res = (res * a) % mod;
        }
        a = (a * a) % mod;
        n >>= 1;
    }
    return res;
}

int main() {
    std::ios::sync_with_stdio(false);
#ifdef test
	freopen("a.in","rt",stdin);
	freopen("a.out","wt",stdout);
#endif
    int t;
    cin >> t;
    fact[0] = 1;
    fact[1] = 1;
    for(int i = 2; i < 1000003; i++) {
        fact[i] = (fact[i - 1] * i) % mod;
    }
    while(t--) {
        string a;
        cin >> a;
        int v[26];
        memset(v, 0, sizeof(v));
        int n = a.size();
        for(int i = 0; i < n; i++) {
            v[a[i] - 'a']++;
        }
        int vowel = v[0] + v[4] + v[8] + v[14] + v[20];
        int consonant = n - vowel;
        if(consonant - vowel + 1 < 0) {
            cout << -1 << endl;
            continue;
        }
        long long int vowel_permu = (fact[consonant + 1] * fast_pow(fact[consonant + 1 - vowel], mod - 2)) % mod;
        long long int consonant_permu = fact[consonant];
        for(int i = 0; i < 26; i++) {
            if(i == 0 || i == 4 || i == 8 || i == 14 || i == 20)
                vowel_permu = (vowel_permu * fast_pow(fact[v[i]], mod - 2)) % mod;
            else
                consonant_permu = (consonant_permu * fast_pow(fact[v[i]], mod - 2)) % mod;
        }
        cout << (consonant_permu * vowel_permu) % mod << endl;
    }
    return 0;
}

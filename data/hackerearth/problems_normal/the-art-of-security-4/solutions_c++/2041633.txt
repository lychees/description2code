// #include C/C++ {
#include <bits/stdc++.h>
// }
using namespace std;
// #typedef {
typedef long long int64;
typedef unsigned long long uint64;
typedef pair <int, int> PII;
typedef pair <char, char> PCC;
typedef pair <int64, int64> PLL;
typedef pair <double, double> PDD;
// }

// #parameter{
#ifdef DEBUG_MODE

#define TYPE decltype
#define RF(filename) {freopen((filename), "r", stdin);}
#define WF(filename) {freopen((filename), "w", stdout);}
#define DEBUG printf

#else

#define TYPE __typeof
#define RF(filename) {;}
#define WF(filename) {;}
#define DEBUG(...)

#endif

// #define {
#define SZ(a) ((int)(a).size())
#define X first
#define Y second
#define MP make_pair
#define L(x) ((x)<<1)
#define R(x) ((x)<<1 | 1)
#define max3(x, y, z) (max(max((x), (y)), (z)))
#define min3(x, y, z) (min(min((x), (y)), (z)))
#define BIT(x, i) (((x) >> (i)) & 1)
#define ALL(it) (it).begin(), (it).end()
#define FILL(__space, __val) memset(__space, __val, sizeof(__space))
#define MOVE(__spaceTo, __spaceFrom) memmove(__spaceTo, __spaceFrom, sizeof(__spaceTo))
#define FOR(it, c) for( TYPE((c).begin()) it = (c).begin(); it != (c).end(); it++)
/////////////////////////////////////////////////////////////
const double PI = acos(-1.0);
const double EPS = 1e-6;

#define MAX_N 205
#define MAX_M 5005
#define MAXX 0x3f
#define UPPER 2147483647LL
#define INF ((1 << 30) - 1)
#define BINF ((1LL << 62) - 1LL)
#define NONE -1
#define NIL 0
// }

/////////////////////////////////////////////////////////////
int N;
int64 A[MAX_N];
int res;
bitset <MAX_N> used;
void DFS(int depth, int64 a, int64 b){
	if (depth == N){
		res++;
		return;
	}
	for (int i = 0; i < N; i++) if (!used[i]){
		used[i] = true;
		if (a + A[i] <= b)
			DFS(depth + 1, a + A[i], b);
		DFS(depth + 1, a, b + A[i]);
		used[i] = false;
	}
}
/////////////////////////////////////////////////////////////
int main(){
	RF("input.txt");
	//  WF("output.txt");

	scanf("%d", &N);
	for (int i = 0; i < N; i++) scanf("%lld", A + i);
	DFS(0, 0, 0);
	int64 resa = res;
	int64 resb = accumulate(A, A + N, 0LL);
	printf("%lld %lld\n", resa, resb);
	if (resb >= resa)
		puts("Got no way out!");
	else{
		puts("We will win!");
	}
	return 0;
}
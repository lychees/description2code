#include <iostream>
using namespace std;
int arr[100][100];
int nop(int n)
{
    // Create a 2D table to store results of subproblems
    int count[n][n];
    count[0][0]=0;
	 int sum=0;
    // Count of paths to reach any cell in first column is 1
    for (int i = 1; i < n; i++)
        count[i][0] = count[i-1][0]+arr[i][0];
 
    // Count of paths to reach any cell in first column is 1
   for (int j = 1; j < n; j++)
       count[0][j] = count[0][j-1]+arr[0][j];
 
    // Calculate count of paths for other cells in bottom-up manner using
    // the recursive solution
    for (int i = 1; i < n; i++)
    {
        for (int j = 1; j < n; j++)
 
            // By uncommenting the last part the code calculatest he total
            // possible paths if the diagonal Movements are allowed
            count[i][j]=arr[i][j]+max( count[i-1][j] , count[i][j-1]); 
            //+ count[i-1][j-1];
 
    }
    return count[n-1][n-1];
}
int main()
{
    int t;cin>>t;
    while(t--)
    {
    	int n,c,i,j;
    	cin>>n>>c;
    	for(i=0;i<n;i++)
    	for(j=0;j<n;j++)
    	cin>>arr[i][j];
    	int sum=nop(n);
    	if(sum>=c)
    	cout<<sum-c;
    	else
    	cout<<-1;
    	cout<<endl;
    	
    }
    return 0;
}

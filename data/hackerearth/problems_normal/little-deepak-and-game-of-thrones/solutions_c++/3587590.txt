#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
struct R {
    int x1,x2;
    int y1,y2;

};
int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        int m;
        cin>>m;
        vector<R> rs ( m );
        vi xs;
        rep ( i,m ) {
            cin>>rs[i].x1>>rs[i].y1>>rs[i].x2>>rs[i].y2;
            xs.push_back ( rs[i].x1 );
            xs.push_back ( rs[i].x2 );
        }
        sort ( all ( xs ) );
        xs.resize ( unique ( all ( xs ) )-xs.begin() );
        vpii intvs;
        vll lens;
        reu ( i,1,xs.size() ) {
            intvs.push_back ( mp ( xs[i-1],xs[i] ) );
            lens.push_back ( xs[i]-xs[i-1] );
        }
        vector<vpii> segs ( intvs.size() );
        for ( R& r: rs ) {
            rep ( i,intvs.size() ) {
                if ( r.x1<intvs[i].second  &&r.x2>intvs[i].first ) {
                    segs[i].push_back ( mp ( r.y1,1 ) );
                    segs[i].push_back ( mp ( r.y2,-1 ) );
                }

            }
        }
        ll ar=0;
        rep ( i,segs.size() ) {
            vpii& s=segs[i];
            int last=-1;
            int cnt=0;
            sort ( all ( s ) );
            for ( pii p:s ) {
                if ( p.second>0 ) {
                    if ( cnt==0 ) last=p.first;
                    cnt++;


                } else {
                    cnt--;
                    if ( cnt==0 ) ar+=lens[i]* ( p.first-last );
                }
            }
        }
        cout<<ar<<endl;
    }
}

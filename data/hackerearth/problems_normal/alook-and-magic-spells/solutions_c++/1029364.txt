#include <algorithm>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <deque>
#include <vector>
#include <queue>
#include <stack>

using namespace std;

#define X first
#define Y second
#define INPUT freopen(".inp","r",stdin)
#define OUTPUT freopen(".out","w",stdout)
#define FOR(i,l,r) for(int i=l;i<=r;i++)
#define REP(i,l,r) for(int i=l;i<r;i++)
#define FORD(i,l,r) for(int i=l;i>=r;i--)
#define REPD(i,l,r) for(int i=l;i>r;i--)
#define ENDL printf("\n")

typedef long long ll;
typedef pair<int,int> ii;

const int inf=2e9;
const int MOD=1e9+7;
const int N=0;

int n,base[3][3]={0},test;
void copyarr(int a[3][3],int b[3][3]){
    REP(i,0,3)
        REP(j,0,3) a[i][j]=b[i][j];
}
void solve(){
    stack <int> st;
    n--;
    while (n>1){
        st.push(n);
        n>>=1;
    }
    int b[3][3];
    copyarr(b,base);
    while (!st.empty()){
        int x=st.top();st.pop();
        int tmp[3][3];
        copyarr(tmp,b);
        memset(b,0,sizeof(b));
        if (x%2){
            int tmp1[3][3];
            memset(tmp1,0,sizeof(tmp1));
            REP(i,0,3)
                REP(j,0,3)
                    REP(k,0,3) tmp1[i][j]=(tmp1[i][j]+(1LL*tmp[i][k]*tmp[k][j])%MOD)%MOD;
            REP(i,0,3)
                REP(j,0,3)
                    REP(k,0,3) b[i][j]=(b[i][j]+(1LL*base[i][k]*tmp1[k][j])%MOD)%MOD;
        }else REP(i,0,3)
                 REP(j,0,3)
                    REP(k,0,3) b[i][j]=(b[i][j]+(1LL*tmp[i][k]*tmp[k][j])%MOD)%MOD;
    }
    int ans=(((2*b[0][0])%MOD+(12LL*b[0][1])%MOD)%MOD+(2*b[0][2])%MOD)%MOD;
    printf("%d\n",ans);
}
int main(){
    base[0][0]=base[0][1]=1;
    base[1][1]=2;
    base[1][2]=4;
    base[2][1]=1;
    scanf("%d",&test);
    while (test--){
        scanf("%d",&n);
        if (n==1) printf("2\n");
        else solve();
    }
}

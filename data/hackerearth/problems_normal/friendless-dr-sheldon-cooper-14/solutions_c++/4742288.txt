#include <iostream>
#include <vector>
#include <queue>
#include <functional>
#include <utility>

using namespace std;
const int MAX = 1e4 + 5;
typedef pair<long long, int> PII;
bool marked[MAX];

long long prim(int x, vector <PII> adj[])
{
    priority_queue<PII, vector<PII>, greater<PII> > Q;
    int y;
    long long minimumCost = 0;
    PII p;
    Q.push(make_pair(0, x));
    while(!Q.empty())
    {
        // Select the edge with minimum weight
        p = Q.top();
        Q.pop();
        x = p.second;
        // Checking for cycle
        if(marked[x] == true)
            continue;
        minimumCost += p.first;
        marked[x] = true;
        for(int i = 0;i < adj[x].size();++i)
        {
            y = adj[x][i].second;
            if(marked[y] == false)
                Q.push(adj[x][i]);
        }
    }
    return minimumCost;
}

int main()
{
	int t;
	cin>>t;
	for(int z=0;z<t;z++)
	{
    int nodes, edges, x, y;
    long long weight=1, minimumCost;
    cin >> nodes >> edges;
    vector <PII> adj[nodes];
    for(int i = 0;i < edges;++i)
    {
        cin >> x >> y ;
        adj[x-1].push_back(make_pair(weight, y-1));
        adj[y-1].push_back(make_pair(weight, x-1));
    }
    // Selecting 1 as the starting node
    minimumCost = prim(1,adj);
    cout << minimumCost << endl;
for(int i=0;i<MAX;i++)
{
    marked[i]=false;
}
}
return 0;
}

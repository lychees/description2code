#include<bits/stdc++.h>
using namespace std;
int A[100][100];
int dp[100][100];

int max(int a,int b){return a>b?a:b;}

int memoize(int m, int n, int i,int j)
{
	if(i>n-1||j>m-1)
	return 0;
	if(dp[i][j]!=-1)
	return dp[i][j];
	int down=0,right=0;
	down=A[i][j] + memoize(m,n,i+1,j);
	right=A[i][j] + memoize(m,n,i,j+1);
	return dp[i][j]=max(down,right);
}
/*int LIP(int m, int n, int i,int j)
{
    if(i>=m || j >=n) return 0;
    int right,down;
    //(A[i][j]==0) return 0;
    right=A[i][j]+LIP(m,n,i,j+1);
    down =A[i][j]+LIP(m,n,i+1,j);
    
    return max(right,down);
}
*/
int main()
{
	
    int t,M,C;
    cin>>t;
    while(t--)
	{
	     cin>>M>>C;    
		 for(int i=0;i<M;i++)
         {
            for(int j=0;j<M;j++)
            {
                    cin>>A[i][j];
            }
        }
        memset(dp,-1,sizeof(dp));
        
        int ans=memoize(M,M,0,0)-C;
        if(ans>=0) cout<<ans<<endl;
        else cout<<"-1"<<endl;
    }
    
    
    
    //system("pause");
    return 0;
}
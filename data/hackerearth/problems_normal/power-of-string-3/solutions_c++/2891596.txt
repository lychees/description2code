#include <bits/stdc++.h>

using namespace std;

const int MAXN = 1005000;
const int ALPH = 256;
const int MAXLOG = 22;

int n;
char s[MAXN];
int p[MAXN]; // suffix array itself
int pcur[MAXN];
int c[MAXN][MAXLOG];
int num[MAXN];
int classesNum;
int lcp[MAXN];

void buildSuffixArray() {

    memset(p, 0, sizeof(p));
    memset(pcur, 0, sizeof(pcur));
    memset(c, 0, sizeof(c));
    memset(num, 0, sizeof(num));
    classesNum = 0;
    memset(lcp, 0, sizeof(lcp));

    n++;

    for (int i = 0; i < n; i++) 
        num[s[i]]++;    

    for (int i = 1; i < ALPH; i++)
        num[i] += num[i - 1];

    for (int i = 0; i < n; i++) {
        p[num[s[i]] - 1] = i;
        num[s[i]]--;
    }

    c[p[0]][0] = 1;
    classesNum = 1;
    for (int i = 1; i < n; i++) {
        if (s[p[i]] != s[p[i - 1]])
            classesNum++;
        c[p[i]][0] = classesNum;
    }

    for (int i = 1; ; i++) {
        
        int half = (1 << (i - 1));      
        
        for (int j = 0; j < n; j++) {
            pcur[j] = p[j] - half;
            if (pcur[j] < 0)
                pcur[j] += n;   
        }

        for (int j = 1; j <= classesNum; j++)
            num[j] = 0;

        for (int j = 0; j < n; j++) 
            num[c[pcur[j]][i - 1]]++;
        for (int j = 2; j <= classesNum; j++)
            num[j] += num[j - 1];
        
        for (int j = n - 1; j >= 0; j--) {
            p[num[c[pcur[j]][i - 1]] - 1] = pcur[j];
            num[c[pcur[j]][i - 1]]--;
        }

        c[p[0]][i] = 1;
        classesNum = 1;

        for (int j = 1; j < n; j++) {
            int p1 = (p[j] + half) % n, p2 = (p[j - 1] + half) % n;
            if (c[p[j]][i - 1] != c[p[j - 1]][i - 1] || c[p1][i - 1] != c[p2][i - 1])
                classesNum++;
            c[p[j]][i] = classesNum;
        }

        if ((1 << i) >= n)
            break;
    }

    for (int i = 0; i < n; i++)
        p[i] = p[i + 1];
    n--;
}

int getLcp(int a, int b) {
    int res = 0;
    for (int i = MAXLOG - 1; i >= 0; i--) {
        int curlen = (1 << i);
        if (curlen > n)
            continue;
        if (c[a][i] == c[b][i]) {
            res += curlen;
            a += curlen;
            b += curlen;
        }
    }
    return res;
}

void calcLcpArray() {
    for (int i = 0; i < n - 1; i++)
        lcp[i] = getLcp(p[i], p[i + 1]);
}

int st[MAXN][MAXLOG];

int log2(int x){
	return log10(x) / log10(2);
}

void buildSparseTable(){
	for(int i=0; i<n-1; i++){
		st[i][0] = lcp[i];
	}
	for(int j=1; j<MAXLOG; j++){
		for(int i=0; i+(1<<j)-1<n-1; i++){
			st[i][j] = min(st[i][j-1], st[i+(1<<(j-1))][j-1]);
		}
	}
}

int query(int l, int r){
	int len = r-l+1;
	int logVal = log2(len);
	return min(st[l][logVal], st[r-(1<<logVal)+1][logVal]);
}

int main(int argc, char const *argv[]){
	
	int k;
	scanf("%d%d", &k, &n);

	if(k == 1){
		printf("%d\n", n);
		return 0;
	}

	scanf("%s", s);

	buildSuffixArray();
	calcLcpArray();
	buildSparseTable();

	int ans = 0;

	for(int start=0; start+k-1<n; start++){
		int end = start+k-1;
		ans = max(ans, query(start, end-1));
	}

	printf("%d\n", ans);

	return 0;
}
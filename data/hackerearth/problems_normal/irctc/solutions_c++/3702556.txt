#include<bits/stdc++.h>
using namespace std;
#define LONG_LONG_MAX 1234567891234ll
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(false);
    long long t;
    cin>>t;
    while(t--)
    {
        long long n,k;
        cin>>n>>k;
        vector<pair<long long,long long> >v[n+1];
        for(long long i=0;i<k;i++)
        {
            long long a,b,c;
            cin>>a>>b>>c;
            v[a].push_back(make_pair(c,b));
            v[b].push_back(make_pair(c,a));
        }
        long long a,b,c;
        cin>>a>>c>>b;
        long long dist[n+1];
        long long bac[n+1];
        fill(dist,dist+n+1,LONG_LONG_MAX);
        priority_queue<pair<long long,long long>,vector<pair<long long,long long> >,greater<pair<long long,long long> > >q;
        q.push(make_pair(0,a));
        bac[a]=a;
        pair<long long,long long>p;
        while(!q.empty())
        {
          p=q.top();
          q.pop();
          long long x=p.first;
          long long y=p.second;
          for(long long i=0;i<v[y].size();i++)
          {
              if(dist[v[y][i].second]>x+v[y][i].first)
              {
                  bac[v[y][i].second]=y;
                  dist[v[y][i].second]=x+v[y][i].first;
                  q.push(make_pair(x+v[y][i].first,v[y][i].second));
              }
          }
        }
        //cout<<dist[3]<<" "<<dist[5]<<"\n";
        long long dist1[n+1];
        long long bac1[n+1];
        fill(dist1,dist1+n+1,LONG_LONG_MAX);
        priority_queue<pair<long long,long long>,vector<pair<long long,long long> >,greater<pair<long long,long long> > >q1;
        q1.push(make_pair(0,c));
        bac1[c]=c;
        pair<long long,long long>p1;
        while(!q1.empty())
        {
          p1=q1.top();
          q1.pop();
          long long x=p1.first;
          long long y=p1.second;
          for(long long i=0;i<v[y].size();i++)
          {
              if(dist1[v[y][i].second]>x+v[y][i].first)
              {
                  bac1[v[y][i].second]=y;
                  dist1[v[y][i].second]=x+v[y][i].first;
                  q1.push(make_pair(x+v[y][i].first,v[y][i].second));
              }
          }
        }
        //cout<<dist1[10]<<" "<<dist1[5]<<"\n";
        if(dist[c]==LONG_LONG_MAX||dist1[b]==LONG_LONG_MAX)
            cout<<"No Train Found."<<"\n";
        else
        {
            cout<<dist[c]+dist1[b]<<"\n";
            vector<long long> s;
            long long temp=c;
            long long temp1=b;
            s.push_back(temp);
            while(temp!=a)
            {
                s.push_back(bac[temp]);
                temp=bac[temp];
            }
            vector<long long>s1;
            s1.push_back(temp1);
            while(temp1!=c)
            {
                s1.push_back(bac1[temp1]);
                temp1=bac1[temp1];
            }
            for(long long i=s.size()-1;i>=0;i--)
            {
                cout<<s[i]<<" ";
            }
            for(long long i=s1.size()-2;i>=0;i--)
            {
                cout<<s1[i]<<" ";
            }
            cout<<"\n";
        }

    }
    return 0;
}

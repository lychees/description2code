#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <climits>
#include <string>
#include <vector>
#include <utility>
#include <map>
#include <bitset>
#include <stack>
#include <queue>
#include <set>
#define fr(a) freopen(a,"r",stdin)
#define fw(a) freopen(a,"w",stdout)
#define rep(i,a,b,c) for(int i=a;i<b;i+=c)
#define repe(i,a,b,c) for(int i=a;i<=b;i+=c)
#define reset(a) memset(a,0,sizeof(a))
#define nl printf("\n")
#define ri(a) scanf("%d",&a)
#define rll(a) scanf("%lld",&a)
#define rllu(a) scanf("%llu",&a)
#define wi(a) printf("%d",a)
#define wll(a) printf("%lld",a)
#define wllu(a) printf("%llu",a)
using namespace std;
typedef long long int ll;
typedef unsigned long long int llu;
typedef long double lf;
typedef pair<ll,ll>pii;
typedef vector<int> vi;
typedef vector<ll> vii;

struct node{
    int ind,w;
}node_t,top_node;

int getCost(int d){
    if(d>10000) return 10000;
    if(d>1000) return 1000;
    if(d>100) return 100;
    //if(d<100) return 0;
    return 0;
};

int t,n,a,b,maxDis;
vector< vector<node> >g;
bool vis[100007];
int l[100007];

int dfs(int x){
    int fNode = 0;
    reset(vis);
    reset(l);
    stack<int>box;
    box.push(x);

    while(!box.empty()){
        int curNode = box.top();
        int curLen = l[curNode];
        box.pop();

        //cout << "--- " << curNode << endl;

        if(curLen > maxDis){
            maxDis = curLen;
            fNode = curNode;
        }

        if(vis[curNode]==1) continue;
        vis[curNode] = 1;

        for(int i=0;i<g[curNode].size();i++){
            int nextNode = g[curNode][i].ind;
            int nextW = g[curNode][i].w;
            if(vis[nextNode]==0){
                l[nextNode] = curLen + nextW;
                box.push(nextNode);
            }
        }
    }
    return fNode;
}

int main(){
    //fr("in.txt");
    //fw("out.txt");

    cin >> t;
    while(t--){
        g.clear();
        g.resize(100007);

        cin >> n;
        for(int i=0;i<n-1;i++){
            cin >> a >> b >> node_t.w;
            node_t.ind = b;
            g[a].push_back(node_t);
            node_t.ind = a;
            g[b].push_back(node_t);
        }

        maxDis = 0;
        int startNode = dfs(1);
        maxDis = 0;
        int endNode = dfs(startNode);

        cout << getCost(maxDis) << ' ' << maxDis << endl;


    }

    return 0;
}





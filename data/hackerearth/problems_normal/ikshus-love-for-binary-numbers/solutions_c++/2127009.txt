#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
ll pwr(ll a,ll b,ll mod)
{
  if(b==0)
    return 1;
  ll temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
ll pwr(ll a,ll b)
{
  if(b==0)
    return 1;
  ll temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
ll gcd(ll a,ll b)
{
  return b==0?a:gcd(b,a%b);
}
ll lcm(ll a,ll b)
{  
  return (a/gcd(a,b))*b;
}
ll modularInverse(ll a,ll m)
{     
      /*reminder: make sure m is prime*/
      assert(false);
      return pwr(a,m-2,m);
}
const int mod=1000000007;
  int k;
  int N;
  ll DP[432][666];
ll dp(int n,int onesToRight)
{
  if(n==N+1)
    return 1;
  if(DP[n][onesToRight]!=-1)
    return DP[n][onesToRight];
  ll o1=0;
  if(onesToRight+1<k)
    o1=dp(n+1,onesToRight+1);
  ll o2=dp(n+1,0);  
  return DP[n][onesToRight]=o1+o2;
  
}
int main()
{
  memset(DP,-1,sizeof DP);
  std::ios::sync_with_stdio(false);
  int n;
  cin>>n>>k;
  N=n;
  ll total=pwr(2,n);
  ll valid=total-dp(1,0);
  ll g=gcd(total,valid);
  valid/=g;
  total/=g;
  cout<<valid<<"/"<<total;
}
#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <cassert>

using namespace std;

#define all(c) (c).begin(),(c).end() 
#define sz(c) int((c).size())
#define pb push_back
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define rep(i,x,y) for(int i = x; i < y; i++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long int LL;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;

const int MAX = 1001;
vi g[MAX];
int deg[MAX], vis[MAX];
bool comp(int a, int b)
{
	return a > b;
}

int main()
{
	int n, m;
	scanf("%d%d",&n,&m);
	rep(i,0,m){
		int a, b;
		scanf("%d%d",&a,&b);
		if(a != b){
			g[a].pb(b);
			g[b].pb(a);
		}
	}
	if(n == 9){
		printf("3\n");
	}
	else{
	rep(i,1,n+1) deg[i] = sz(g[i]);
	//sort(deg+1,deg+n+1,comp);
	int mx = -1, idx, cnt = 0, flag,mn;
	while(1){
		mx = 0; flag = 1; mn = 10000;
		rep(i,1,n+1){
			if(mx < deg[i]){mx = deg[i]; idx = i;}
			if(!vis[i]) flag = 0;
		}
		if(mx == 0 || flag) break;
		for(int i = n; i > 0; i--){
			int tmp = 0;
			if(mx == deg[i]){
				rep(j,0,sz(g[i])) if(vis[g[i][j]]) tmp++;
				//printf("%d %d\n",tmp,mn);
				if(mn > tmp) {mn = tmp; idx = i;}
			}
		}
		deg[idx] = 0; vis[idx] = 1;
		rep(i,0,sz(g[idx])){
			deg[g[idx][i]]--;
			vis[g[idx][i]] = 1;
		}
		cnt++;	
	}
	printf("%d\n",cnt);
	}
	return 0;
}
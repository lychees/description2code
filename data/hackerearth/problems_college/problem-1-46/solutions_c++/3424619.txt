#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz size
#define set0(a) memset(a, 0, sizeof(a))
#define setdp(a) memset(a, -1, sizeof(a))
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion
#define MOD 1000000007

struct sort_pred {
	bool operator()(const std::pair<int,int> &left, const std::pair<int,int> &right) {
    	return left.first < right.first;
	}
};
/*ll power(ll a, ll b) {
ll x = 1, y = a;
    while(b > 0) {
        if(b%2 == 1) {
            x=(x*y);
            if(x>mod) x%=mod;
        }
        y = (y*y);
        if(y>mod) y%=mod;
        b /= 2;
    }
    return x;
}
*/bool prime[1005];
void SieveOfEratosthenes(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    
    memset(prime, true, sizeof(prime));
 
    for (int p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (int i=p*2; i<=n; i += p)
                prime[i] = false;
        }
    }
 	/*for (int p=2; p<=n; p++)
       if (prime[p])
          cout << p << " ";
    // Print all prime numbers
    */
}
ll gcd(ll a,ll b) {
	if (b == 0) return a;
	return(a % b == 0 ? b : gcd(b, a % b)); 
}
int l;
ll a[100005];
ll dp[100005][26];
int main(){
	//ll l;
	memset(dp,0,sizeof dp);
	cin >> l;
	vector <char> v(l+1);
	REP(i,1,l) {
		char x;
		cin >> x;
		dp[i][x - 'a' + 1]++;
	}
	REP(i,1,l){
		REP(j,1,26){
			//cout << dp[i][j] << " ";
			dp[i][j] += dp[i-1][j];
		}
		//cout << endl;
	}
	REP(i,1,l){
		REP(j,1,26){
			//cout << dp[i][j] << " ";
		}
		//cout << endl;
	}
	int q;
	cin >> q;
	while(q--){
		int l,r;
		cin >> l >> r;
		ll flag = 0;
		ll cnt1 = 0;
		ll cnt2 = 0;
			
		REP(i,0,25){
			ll cnt = dp[r]['a'+ i -97 + 1] - dp[l-1]['a'+i-97 + 1];
			if(cnt > 0){
				if(cnt % 2 == 0){
					cnt2++;
				}else{
					cnt1++;
				}
			}
		}
		
		if(r-l+1 == 1){
			//cout << "shanu" << endl;
			cout << "NO\n";
			continue;
		}
		//cout <<r-l+1<< endl;
		if((r-l+1) % 2 == 0){
			//cout << cnt1 << " " << cnt2 << endl;	
			if(cnt1 == 2 || cnt1 == 0){
				cout << "YES\n";
			}else{
				cout << "NO\n";
			}	
		}else{
			if(cnt1 == 1) cout  << "YES\n";
			else cout << "NO\n";
		}
		
	}
	return 0;
}

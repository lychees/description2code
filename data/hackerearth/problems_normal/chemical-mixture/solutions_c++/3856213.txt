#include<bits/stdc++.h>

using namespace std;

#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())
#define eps 1e-9
#define sqr(x) ((x)*(x))
#define SET(a,b) memset((a),(b),sizeof((a)))
#define pw(x) (1ll<<(x))
#define buli(x) __builtin_popcountll(x)
#define endl "\n"

const int MOD = 1e9+7;

typedef long long ll;
typedef vector<int> vi;
typedef map<int,int> mii;
typedef pair<int,int> pii;
typedef vector<pii> vpii;

inline bool EQ(double a,double b) { return fabs(a - b) < 1e-9; }
inline void set_bit(int & n, int b) { n |= pw(b); }
inline void unset_bit(int & n, int b) { n &= ~pw(b); }

ll m;
int n1,n2;
const int MAXN = 65;
ll ar1[MAXN];
ll ar2[MAXN];
ll POWER[MAXN];
bool check(ll x) {
	for(int i=0;i<n1;i++) {
		if(ar1[i]<=x) x-=ar1[i];
	}
	if(x==0) return true;;
	return false;
}
bool cmp(const ll &A,const ll &B) {
	if(A>B) return true;
	return false;
}
int main() {
//	freopen("TASK.in","r",stdin);	
//	freopen("TASK.out","w",stdout);
	int t;
	cin>>t;
	POWER[0]=1;
	for(int i=1;i<20;i++) POWER[i]=POWER[i-1]<<1;
	while(t--) {
		scanf("%lld",&m);
		scanf("%d%d",&n1,&n2);
		for(int i=0;i<n1;i++) scanf("%lld",&ar1[i]);
		for(int i=0;i<n2;i++) scanf("%lld",&ar2[i]);
		sort(ar1,ar1+n1,cmp);
		vector<ll> v;
		for(int i=0;i<POWER[n2];i++) {
			ll sum=0;
			for(int j=0;j<n2;j++) if(POWER[j]&i) sum+=ar2[j];
			v.pb(sum);
		}
		sort(all(v));
		bool ans=false;
		for(int i=0;i<sz(v) and !ans;i++) {
			ll val = m-v[i];
			if(check(val)) {
				printf("YES\n");
				vector<ll> p;
				for(int j=0;j<n1;j++) {
					if(ar1[j]<=val) p.pb(ar1[j]),val-=ar1[j];
				}
				for(int j=sz(p)-1;j>=0;j--) {
					printf("%lld ",p[j]);
				}
				printf("\n");
				ans=true;
			}
		}
		if(ans) continue;;
		printf("NO\n");
	}
	return 0;
}
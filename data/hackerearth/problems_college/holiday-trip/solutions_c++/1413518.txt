/*
Template belongs to : Himanshu Jaju [himanshujaju]
*/

#include<bits/stdc++.h>
using namespace std;

//typedef long long int LL;
typedef int LL;
#define inp_s     ios_base::sync_with_stdio(false)
#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define GI(x)	  scanf("%d",&x);
#define sz(c)     c.size()
#define clr(c)    c.clear()
#define msi       map<string,int>
#define msit      map<string,int>::iterator
#define pb        push_back
#define mp        make_pair
#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);i++)


/********************************************/
LL next_int, sign;
char in_char;
LL Wt=0;
inline LL rd(){
    in_char = ' ';
    sign = 1;
    while((in_char < '0') || (in_char > '9')){
        in_char = getchar_unlocked();
        if(in_char == '-'){
            sign = -1;
        }
    }
    next_int = 0;
    while((in_char >= '0') && (in_char <= '9')){
        next_int *= 10;
        next_int += in_char - 48;
        in_char = getchar_unlocked();
    }
    return next_int * sign;
}

/***************************************************/


int main()
{
      int t = rd();
      while(t--){
      int n,m;
      n = rd();
      m = n-1;
      VI edges[n];
      while(m--)
      {
            int a,b;
            a = rd();
            b = rd();
            edges[a].pb(b);
            edges[b].pb(a);
      }
      queue<int> bfs;
      bfs.push(0);
      int visited[n];
      FOR(i,0,n) visited[i] = 0;
      int last = 0;
      
      while(!bfs.empty())
      {
            int ele = bfs.front();
            last = ele;
            bfs.pop();
            visited[ele] = 1;
            FOR(i,0,sz(edges[ele]))
            {
                  if(visited[edges[ele][i]]) continue;
                  bfs.push(edges[ele][i]);
            }
      }
      
      int levels[n];
      FOR(i,0,n) visited[i] = 0,levels[i] = -1;
      int ans = 0;
      bfs.push(last);
      levels[last] = 0;
      
      while(!bfs.empty())
      {
            int ele = bfs.front();
            bfs.pop();
            if(levels[ele] > ans) ans = levels[ele];
            ans = max(ans,levels[ele]);
            visited[ele] = 1;
            FOR(i,0,sz(edges[ele]))
            {
                  if(visited[edges[ele][i]]) continue;
                  levels[edges[ele][i]] = levels[ele]+1;
                  bfs.push(edges[ele][i]);
            }
      }
      ans += 1;
      printf("%d\n",ans);
}
	return 0;
}


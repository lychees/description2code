#include<iostream>
#include<set>
#include<map>
#include<vector>
#include<list>
#include<string.h>
#include<cmath>
#include<algorithm>
#include<string>
#include<iomanip>
#include<sstream>
#include<stack>
using namespace std;

typedef unsigned long long int ull;
typedef long long int ll;

#define pb push_back
#define mp make_pair

#define S second
#define F first

#define all(c) (c).begin(), (c).end()

ll gcd(ll a, ll b)
{
   if (b==0) return a;
   return gcd(b,a%b);
}

ll abs1(ll a)
{
	if(a<0)
	return -1*a;
	else return a;
}

ll power(ll base, ll n, ll M)
{
    if(n==0)
    return 1;
    if(n==1)
    return base;
    ll halfn=power(base,n/2,M);
    if(n%2==0)
    return ( halfn * halfn ) % M;
    else
    return ( ( ( halfn * halfn ) % M ) * base ) % M;
}

ll findMMI(ll n,ll M)
{
    return power(n,M-2,M);
}

ll max2(ll a, ll b)
{
	if(a>b)
	return a;
	else return b;
}

ll max3(ll a, ll b, ll c)
{
	return max2(max2(a, b), c);
}

ll min2(ll a, ll b)
{
	if(a<b)
	return a;
	else return b;
}

ll min3(ll a, ll b, ll c)
{
	return min2(min2(a, b), c);
}

vector<int> v, s;
multiset<int> ct;

void ini(int n)
{
	for(int i=0;i<=n;i++)
	{
		v.pb(i);
		s.pb(1);
		if(i!=0)
		ct.insert(1);
	}
}

int root(int a)
{
	while(a!=v[a])
	a=v[a];
	return a;
}

void uni(int a, int b)
{
	int ra=root(a);
	int rb=root(b);
	if(ra!=rb)
	{
		ct.erase(ct.find(s[ra]));
		ct.erase(ct.find(s[rb]));
		if(s[ra]>s[rb])
		{
			v[rb]=v[ra];
			s[ra]+=s[rb];
			ct.insert(s[ra]);
		}
		else
		{
			v[ra]=v[rb];
			s[rb]+=s[ra];
			ct.insert(s[rb]);
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int n, q;
	cin>>n>>q;
	ini(n);
	while(q--)
	{
		int a, b;
		cin>>a>>b;
		uni(a, b);
		if(s[root(a)]==n)
		cout<<0<<endl;
		else
		{
			int ans=1000000;
			multiset<int>::iterator it=ct.begin();
			int pre=*it;
			it++;
			while(it!=ct.end())
			{
				if(abs1(pre-(*it))<ans)
				ans=abs1(pre-(*it));
				pre=*it;
				it++;
				if(ans==0)
				break;
			}
			cout<<ans<<endl;
		}
	}
	return 0;
}
#include<iostream>
#include<vector>
#include<algorithm>
#include<climits>
using namespace std;
int mini=-1,index=-1;
vector<int> graph[100010];
void dfs(int v,int isvisited[])
{                         //dfs search and printing in order...
     int i,l=graph[v].size();
     if(mini<l )
     {
     	mini=l;
     	index=v;
     }
     else if(mini==l && index>v)
     {
     	index=v;
     }
     	
     isvisited[v]=1;
     //printf("%d ",v);
     for(i=0;i<l;i++)
	 {
     	if(isvisited[graph[v][i]]==0)
     		dfs(graph[v][i],isvisited);
     }
}

int main()
{
	int n,c,a,b;
	cin>>n>>c;
	//int graph[n+1][n+1];
	int isvisited[n+1];
	for(int i=0;i<=n;++i)
		isvisited[i]=0;
	for(int i=0;i<c;++i)
	{
		cin>>a>>b;
		graph[a].push_back(b);
		graph[b].push_back(a);
	}
	
	vector<int> ans;
	for(int i=1;i<=n;++i)
	{
		if(isvisited[i]==0)
		{
			//cout<<"hi";
			dfs(i,isvisited);
			ans.push_back(index);
			mini=-1;
		}
	}
	int l=ans.size();
	sort(ans.begin(),ans.end());
	cout<<l<<endl;
	for(int i=0;i<l;++i)
		cout<<ans[i]<<" ";
	cout<<endl;
}
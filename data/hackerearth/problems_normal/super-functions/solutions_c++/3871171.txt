#include <iostream>
#include <cstdio>
#include <bits/stdc++.h>

using namespace std;

const int MAXN = 100007;
const int MOD = 1e9+7;
long long lp[MAXN],cnt[MAXN],phi[MAXN];
vector<int> pr;
long long binPow(long long a,long long b)
{
    long long d;
    if(!b) return 1;
    if (b==1) return a%MOD;
    if (b&1) return (a*binPow(a,b-1))%MOD;
    d = binPow(a,b/2);
    return (d*d)%MOD;
}

long long gProg(long long b,long long q, long long n)
{
    //cout<<b<<"** "<<q<<" "<<n<<" "<<(b*((binPow(q,n)-1)+MOD)%MOD)<<" "<<binPow(q-1,MOD-2)<<endl;
    return ((b*((binPow(q,n)-1)+MOD)%MOD)*binPow(q-1,MOD-2))%MOD;
}

void init()
{
    memset(lp,0,sizeof(lp));
    memset(cnt,0,sizeof(cnt));
    memset(phi,0,sizeof(phi));
    for (int i=2;i<MAXN;i++)
    {
        if (lp[i]==0)
        {
            lp[i] = i;
            pr.push_back(i);
            cnt[i] = 1;
        }
        for (int j=0;j<pr.size()&&(pr[j]<=lp[i])&&(i*pr[j]<MAXN);j++)
        {
            lp[i*pr[j]] = pr[j];
            cnt[i*pr[j]] = 1;
            if (lp[i]==lp[i*pr[j]]) cnt[i*pr[j]] += cnt[i];
        }
    }

    //for (int i=2;i<MAXN;i++) cout<<i<<" "<<lp[i]<<" "<<cnt[i]<<endl;
    phi[1] = 1;

    for (int i=2;i<MAXN;i++)
    {
        int mult;
        mult = 1;
        for (int j=0;j<cnt[i];j++) mult*=lp[i];
        phi[i] = phi[i/mult]*(mult-mult/lp[i]);
      //  cout<<i<<" "<<phi[i]<<endl;
    }
}

int main()
{
	ios_base::sync_with_stdio(false);
    init();
    int n,t,q;
    long long ans;
    vector<pair<int,int> > ff;
    cin>>q;
    for (int i=0;i<q;i++)
    {
        cin>>t>>n;
        if (t==1)
        {
            if (n==1)
            {
                cout<<1<<endl;
                continue;
            }
            ans = 0;
            for (int j=1;j*j<=n;j++)
            {
               if (n%j) continue;
          //     cout<<j<<" "<<gProg(binPow(n,j),binPow(n,j),n/j)<<endl;
               ans+=phi[j] *gProg(binPow(n,j),binPow(n,j),n/j);
               ans%=MOD;
        //       cout<<ans<<endl;
               if (j!=(n/j))
               {
            //       cout<<n/j<<" "<<gProg(binPow(n,n/j),binPow(n,n/j),j)<<endl;
                   ans+=phi[n/j]*gProg(binPow(n,n/j),binPow(n,n/j),j);
                   ans%=MOD;
              //     cout<<ans<<endl;
               }
            }
            cout<<ans<<endl;
            continue;
        }

        if (t==2)
        {

            if (n==1)
            {
                cout<<4<<endl;
                continue;
            }
            ans = 0;
            for (int j=1;j*j<=n;j++)
            {
               if (n%j) continue;

               ans+=phi[j] *gProg(binPow(2,j),binPow(2,j),n/j);
               ans%=MOD;

               if (j!=(n/j))
               {

                   ans+=phi[n/j]*gProg(binPow(2,n/j),binPow(2,n/j),j);
                   ans%=MOD;
               }
            }
            ans*=binPow(2,n);
            ans%=MOD;
            cout<<ans<<endl;
            continue;
        }

        if (t==3)
        {
            if (n==1)
            {
                cout<<1<<endl;
                continue;
            }

            long long x,b,q;
            ff.clear();
            x = n;
            while (x>1)
            {
                int curr,c,fr;
                curr = 1;
                c = cnt[x];
                fr = lp[x];
                for (int j=0;j<c;j++)
                {
                    curr*=lp[x];
                    x/=lp[x];
                }
                ff.push_back(make_pair(fr,curr));
            }

            ans = 0;
            for (int j=1;j*j<=n;j++)
            {
               if (n%j) continue;
               b = 1;
               q = 1;
               for (int jj=0;jj<ff.size();jj++)
               {
                   b *= ((binPow(ff[jj].second,j)-(binPow(ff[jj].second,j)*binPow(ff[jj].first,MOD-2))%MOD+MOD)%MOD);
                   b %= MOD;
                   q *= binPow(ff[jj].second,j);
                   q %=MOD;
               }

               ans+=phi[j] *gProg(b,q,n/j);
               ans%=MOD;

               if (j!=(n/j))
               {
                    b = 1;
                    q = 1;
                   for (int jj=0;jj<ff.size();jj++)
                   {
                       b *= ((binPow(ff[jj].second,n/j)-(binPow(ff[jj].second,n/j)*binPow(ff[jj].first,MOD-2))%MOD+MOD)%MOD);
                       b %= MOD;
                       q *= binPow(ff[jj].second,n/j);
                       q %=MOD;
                   }

                   ans+=phi[n/j]*gProg(b,q,j);
                   ans%=MOD;
               }
            }
            cout<<ans<<endl;

        }
    }
    return 0;
}

#include <iostream>
using namespace std;

bool BinarySearch(int a[],int start,int end,int x)
{
	if(start<=end){
	int mid;
	mid=(end+start)/2;
	if(x==a[mid])
		return true;
	else if(x>a[mid])
		start = mid+1;
	else if(x<a[mid])
		end=mid-1;
	

		return  BinarySearch(a,start,end,x);
	}
	else
		return false;
	
}
void merge(int A[ ] , int start, int mid, int end) {

   //stores the starting position of both parts in temporary variables.
    int p = start ,q = mid+1;

    int Arr[end-start+1] , k=0;

    for(int i = start ;i <= end ;i++) {
        if(p > mid)      //checks if first part comes to an end or not .
           Arr[ k++ ] = A[ q++] ;

       else if ( q > end)   //checks if second part comes to an end or not
           Arr[ k++ ] = A[ p++ ];

       else if( A[ p ] < A[ q ])     //checks which part has smaller element.
          Arr[ k++ ] = A[ p++ ];

       else
          Arr[ k++ ] = A[ q++];
   }
   for (int p=0 ; p< k ;p ++) {
     /* Now the real array has elements in sorted manner including both 
            parts.*/
       A[ start++ ] = Arr[ p ] ;                          
   }
}
void merge_sort (int A[ ] , int start , int end ) {
    if( start < end ) {
       int mid = (start + end ) / 2 ;           // defines the current array in 2 parts .
       merge_sort (A, start , mid ) ;                 // sort the 1st part of array .
       merge_sort (A,mid+1 , end ) ;              // sort the 2nd part of array.

     // merge the both parts by comparing elements of both the parts.
        merge(A,start , mid , end );   
   }                    
}

int main()
{
	int n;
	int q;
	int a[100000];
	int b[100000];
	cin>>n>>q;
	for(int i=0;i<n;i++){
		cin>>a[i];
	}
	for(int i=0;i<q;i++){
		cin>>b[i];
	}
	merge_sort(a,0,n);
	for(int i=0;i<q;i++){
	
		if(BinarySearch(a,0,n,b[i]))
			cout<<"YES"<<endl;
		else
			cout<<"NO"<<endl;
	}
    //cout << "Hello World!" << endl;
    system("Pause");
    return 0;
}

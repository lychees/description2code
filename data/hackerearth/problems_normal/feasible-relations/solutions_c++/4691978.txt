#include <bits/stdc++.h>
using namespace std;

int parent[1<<20];
int rank[1<<20];
int u[1<<20];
int v[1<<20];
string operators[1<<20];

int find(int x)
    {
        // Finds the representative of the set
        // that x is an element of
        if (parent[x]==x)
        {
            // if x is not the parent of itself
            // Then x is not the representative of
            // his set,
            return x;
 
            // so we recursively call Find on its parent
            // and move i's node directly under the
            // representative of this set
        }
 
        return (parent[x]=find(parent[x]));
    }
 

void unionSet(int x,int y)
{
 	x = find(x);
	y = find(y);
	parent[x] = y;
}

int main()
{
	ios_base::sync_with_stdio(0);
	int t;
	cin>>t;
	while(t--)
	{
		int n,k,i,j,flag = 0;
		cin>>n>>k;

		for(i=1;i<=n;i++)
			parent[i] = i;
		
		for(i=1;i<=k;i++)
		{
			/*int x,y;
			char operator[];*/
			cin>>u[i]>>operators[i]>>v[i];
			if(operators[i] == "=")
				unionSet(u[i],v[i]);
		}
		
		for(i=1;i<=k;i++)
		{
			if(operators[i] == "=")
				continue;
				if(find(u[i]) == find(v[i]))
				{
					flag = 1;
				}
		}
		if(flag == 0)
			printf("YES\n");
		else if(flag == 1)
			printf("NO\n");
	}
    return 0;
}

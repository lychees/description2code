#include <bits/stdc++.h>
using namespace std;
void SieveOfEratosthenes(int n,vector<long long int> &v,vector<long long int> &v1)
{
    
    bool prime[n+1];
    memset(prime, true, sizeof(prime));
 
    for (int p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (int i=p*2; i<=n; i += p)
                prime[i] = false;
        }
    }
 
    // Print all prime numbers
    for (int p=2; p<=n; p++)
       if (prime[p])
       {
       		v.push_back(p);
       		v1.push_back(p);
       }
       
       for (int p=1; p<v.size(); p++)
       {
       		v1[p]+=v1[p-1];
       		//cout<<v1[p]<<" ";
       }
          
          
  
          
}

int main()
{
    vector<long long int> v;
    vector <long long int> v1;
	vector<long long int> :: iterator it;
	vector<long long int> :: iterator it2;
	SieveOfEratosthenes(1000000,v,v1);
	long long int t,l,r;
	cin>>t;
	
	while(t--)
	{
		long long int sum=0;
		cin>>l>>r;
		it=lower_bound(v.begin(),v.end(),l);
		
		it2=upper_bound(v.begin(),v.end(),r);
		int left=it-v.begin()-1;
		int right=it2-v.begin()-1;
		if(left>=0)
		sum=v1[right]-v1[left];
		else
		{
			if(right>=0)
			sum=v1[right]-0;
			else
			sum=0;
		}
		
		cout<<sum<<endl;
		
	}
	
	
	
    
    return 0;
}

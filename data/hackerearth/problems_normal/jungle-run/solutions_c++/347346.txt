#include<stdio.h>
#include<queue>
#include<stdlib.h>
using namespace std;
int steps(int i,int j,int n,char **forest)
{
    int cost=0,a,b;

    bool **added=NULL;

    added=(bool**)malloc(n*sizeof(bool*));

    for(a=0; a<n; a++)
        added[a]=(bool*)malloc(n*sizeof(bool));

    for(a=0; a<n; a++)
    {
        for(b=0; b<n; b++)
            added[a][b]=false;
    }

    queue<int> qi,qj;

    qi.push(i);
    qj.push(j);
    added[i][j]=true;

    a=i,b=j;
    int aa=a,bb=b;
    
    while(!qi.empty())
    {
        i=qi.front();
        qi.pop();
        j=qj.front();
        qj.pop();

        if(forest[i][j]=='E')
            return cost;

        if(i==a && j==b)
            cost++;

        if(i-1>=0 && !added[i-1][j] && forest[i-1][j]!='T')
        {
            qi.push(i-1);
            qj.push(j);

            added[i-1][j]=true;

            aa=i-1,bb=j;
        }

        if(j-1>=0 && !added[i][j-1] && forest[i][j-1]!='T')
        {
            qi.push(i);
            qj.push(j-1);

            added[i][j-1]=true;

            aa=i,bb=j-1;
        }

        if(i+1<n && !added[i+1][j] && forest[i+1][j]!='T')
        {
            qi.push(i+1);
            qj.push(j);

            added[i+1][j]=true;

            aa=i+1,bb=j;
        }

        if(j+1<n && !added[i][j+1] && forest[i][j+1]!='T')
        {
            qi.push(i);
            qj.push(j+1);

            added[i][j+1]=true;

            aa=i,bb=j+1;
        }
        if(i==a && j==b)
            a=aa,b=bb;
    }
}

int main()
{
    int n,i,j,I,J;

    scanf("%d\n",&n);

    char **forest = (char**)malloc(n*sizeof(char*));

    for(i=0; i<n; i++)
        forest[i]=(char*)malloc(n*sizeof(char));

    for(i=0; i<n; i++)
    {
        for(j=0; j<n; j++)
        {
            scanf("%c ",&forest[i][j]);
            if(forest[i][j]=='S')
                I=i,J=j;
        }
    }

    printf("%d",steps(I,J,n,forest));

    return 0;
}
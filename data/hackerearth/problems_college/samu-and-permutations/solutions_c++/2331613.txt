#include <bits/stdc++.h>
using namespace std;
const int ND=20;
int inp[112],n;
int dp[1<<20][20];
bool vis[1<<20][20];
int f(int mask ,int prev)
{
 	int cnt = __builtin_popcount(mask);
 	if (cnt == n) return 0;
 	
 if (vis[mask][prev]) return dp[mask][prev];
	vis[mask][prev] = true;

 int ans = 0;
	for(int i = 0; i < n; ++i)
	{
	 	if ((mask >> i) & 1) continue;
		int add = 0;
	  if (cnt != 0)
		add = (cnt+1)*(abs(inp[i]-inp[prev]));
		add = add + f(mask | (1 << i),i);
		ans = max(ans,add);
	}

  dp[mask][prev]=ans;
  return ans;

}

void solve()
{
 scanf("%d",&n);	
 for(int i=0;i<n;i++)
  cin>>inp[i];
	memset(vis,false,sizeof(vis));
	int ans = f(0,0);
	cout << ans << endl;
}

int main()
{
   int t;
	cin >> t;
	while(t--)
		solve();
    return 0;
}

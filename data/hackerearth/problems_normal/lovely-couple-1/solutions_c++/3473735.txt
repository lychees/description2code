#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>

bool isPrime(long N)
{
    
    if(N ==1)
        return false;
    long sq = (long)std::sqrt(N);
    
    for (long i=2;i<=sq; ++i)
    {
        if (N % i == 0)
        {
            return false;
        }
    }
    
    return true;
}

long getGCD(long n1,long n2)
{
    long r = n1%n2;
    if (r == 0)
    {
        return n2;
    }
    else
    {
        return getGCD(n2,r);
    }
}

long factors( long n)
{
    std::set<long> distinct_fact;
    long z = 2;
    while (z * z <= n)
    {
        if (n % z == 0)
        {
            distinct_fact.insert(z);
            n /= z;
        } else 
        {
            z++;
        }
    }
    
    if(n>1)
    {
    	distinct_fact.insert(n);
    }
    return distinct_fact.size();
}

int main(void)
{
    long T,A,B;
    
    std::cin>>T;
    
    while (T--)
    {
        std::cin>>A>>B;
        
        long lcm = (A*B)/getGCD(A,B);
        
        
        //std::cout<<"size "<<distinct_fact.size()<<std::endl;
        
        std::cout<<(isPrime(factors(lcm))? "Yes" : "No") <<std::endl;
        
        factors(4);
    }
    return 0;
}




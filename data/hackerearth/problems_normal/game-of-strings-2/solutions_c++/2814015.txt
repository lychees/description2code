#include<bits/stdc++.h>
using namespace std;
vector<int> v;
int p_len, t_len;
string pattern, text;
int mxp = 0;
void failure_function(int pos){
    int j = 0;      /// initialize j with zero
    for(int i=1; i<p_len; ++i){
            /// if p[i] != p[j] then move back
        while(j >= 0 and pattern[j] != pattern[i]){
            if(j > 0)
                j = v[j-1];
            else
                j = -1;
        }
        j += 1;         /// if p[i] == p[j]
        v[i] = j;       /// length of prefix and suffix
        if(i<=pos)
			mxp = max(mxp, v[i]);
    }
}
bool find_occurence(){
    bool found = false;
    int j = 0;
    for(int i=0; i<t_len; ++i){
        while(j >= 0 and text[i] != pattern[j]){
            if(j > 0)
                j = v[j-1];
            else
                j = -1;
        }
        j += 1;
        if(j == p_len){
            j = v[p_len - 1];
            cout << i - p_len + 1 << endl;
            found = true;
        }
    }
    return found;
}
int main(){
    int n;
    cin >> n;
    while(n--){
        cin >> pattern;
        mxp = 0;
        //cin >> text;
		int pos;
		cin >> pos;
		pos--;
        //t_len = text.size();
        p_len = pattern.size();
        v.clear();
        v.resize(p_len, 0);
        failure_function(pos);
        /*
        for(int i=0; i<v.size() ;++i)
			cout << v[i] << " ";
		cout<<endl;
		cout << mxp<<endl;
		*/
		int i = v[pattern.size() - 1];

		while(i>mxp and i)
			i = v[i-1];
        /*
        for(int i=0; i<pattern.size(); ++i)
            cout<<pattern[i]<<" ";
        cout<<endl;
        for(int i=0; i<v.size(); ++i)
            cout<<v[i]<<" ";
        cout<<endl;
        */
        //bool found = find_occurence();
        //if(found == false)
            //printf("\n\n");
		if(i==0)
			cout << "Puchi is a cheat!"<<endl;
		else
			cout << pattern.substr(0, i) << endl;

    }

}

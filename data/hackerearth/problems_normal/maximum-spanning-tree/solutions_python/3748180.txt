t=input()
def root(x):
    while l1[x]!=x:
        l1[x]=l1[l1[x]]
        x=l1[x]
    return x
def union(x,y):
    global l1
    p=root(x)
    q=root(y)
    l1[p]=l1[q]
def kruskal():
    t=0
    for i in sorted(G,key=lambda x:x[0]):
        x=i[1][0]
        y=i[1][1]
        c=i[0]
        if root(x)!=root(y):
            
            t+=c
            union(x,y)
    return t         
while t!=0:
    
 n,m=map(int,raw_input().split())
 l=[]
 l1=["a"]*(n+1)
 for i in xrange(1,n+1):
    l1[i]=i
 G=[]
 for i in xrange(m):
    a,b,c=map(int,raw_input().split())
    c=c*-1
    #M[a].append(b)
    #M[b].append(a)
    G.append([c,(a,b)])
    #G.append([c,(b,a)])
 print kruskal()*(-1)
 t-=1   
    



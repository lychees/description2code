#include <bitset>
#include <iostream>
#include <cassert>

using namespace std;

const int kMaxN = 510;
const int kMaxM = 60100;

typedef bitset<kMaxN> Row;

int n, m;

Row a[kMaxM];
Row history[kMaxM];

void PrintAns(int ans) {
  printf("%d\n", ans);
  exit(0);
}

int main() {
#ifdef ssu1
  freopen("input.txt", "r", stdin);
#endif
  cin >> n >> m;
  for (int i = 0; i < m; ++i) {
    int l, r;
    cin >> l >> r;
    if (l > r)
      swap(l, r);
    l--, r--;
    assert(0 <= l && l <= r && r < n);
    for (int j = l; j <= r; ++j) {
      a[i][j] = 1;
    }
  }
  int r = 0;
  for (; r < m; ++r) {
    if (r == n)
      break;
    for (int i = r; i < m; i++) {
      if (a[i][r]) {
        swap(a[r], a[i]);
        swap(history[r], history[i]);
        break;
      }
    }
    if (a[r][r] == 0) {
      PrintAns(0);
    }
    history[r][r] = 1;
    for (int i = 0; i < m; ++i) {
      if (a[i][r] && i != r) {
        a[i] ^= a[r];
        history[i] ^= history[r];
      }
    }
  }
  if (r == n) {
    int ans = m;
    for (int i = 0; i < n; ++i) {
      int current = 1;
      for (int j = n; j < m; ++j) {
        if (history[j][i]) {
          current++;
        }
      }
      ans = min(ans, current);
    }
    PrintAns(ans);
  } else {
    assert(r < n);
    PrintAns(0);
  }
}

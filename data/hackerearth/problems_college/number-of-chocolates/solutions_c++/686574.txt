#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<queue>
#include<stack>
#include<map>
#include<algorithm>
#include<set>
#include<vector>
#include<limits.h>
using namespace std;
#define pb push_back
#define mk make_pair
#define scani(n) scanf("%d",&n);
#define ll long long 
int getMid(ll int s,ll int e) {  return s + (e -s)/2;  }
 ll int getSumUtil(ll int *st,ll int ss,ll int se,ll int qs,ll int qe,ll int index)
{
    if (qs <= ss && qe >= se)
        return st[index];
    if (se < qs || ss > qe)
        return 0;
    ll int mid = getMid(ss, se);
    return getSumUtil(st, ss, mid, qs, qe, 2*index+1) +
           getSumUtil(st, mid+1, se, qs, qe, 2*index+2);
}
 
ll int getSum(ll int *st,ll int n,ll int qs,ll int qe)
{
    if (qs < 0 || qe > n-1 || qs > qe)
    {
        return -1;
    }
 
    return getSumUtil(st, 0, n-1, qs, qe, 0);
}
ll int constructSTUtil(ll int arr[],ll int ss,ll int se,ll int *st,ll int si)
{
    if (ss == se)
    {
        st[si] = arr[ss];
        return arr[ss];
    }
    ll int mid = getMid(ss, se);
    st[si] =  constructSTUtil(arr, ss, mid, st, si*2+1) +
              constructSTUtil(arr, mid+1, se, st, si*2+2);
    return st[si];
}
ll int *constructST(ll int arr[],ll int n)
{
   ll int x = (int)(ceil(log2(n))); //Height of segment tree
   ll int max_size = 2*(int)pow(2, x) - 1; //Maximum size of segment tree
   ll int *st = new ll int[max_size];
    constructSTUtil(arr, 0, n-1, st, 0);
    return st;
}

int main()
{
	ll int t,a1,a2,b1,b2,n,q,i,str,end;
	long long int ans;
	cin>>n>>q;
	ll int a[n+2];
	for(i=0;i<n;i++)
		scanf("%lld",&a[i]);
	ll int *st = constructST(a, n);
	for(i=0;i<q;i++)
	{
		scanf("%lld%lld%lld%lld",&a1,&b1,&a2,&b2);
		if(a2<a1)swap(a1,a2);
		if(b2<b1)swap(b1,b2);
		if(b1<a1)
		{
			swap(a1,b1);
			swap(a2,b2);
		}
			str=a1;
			if(b1>a2)
			{
				ans=getSum(st, n, a1, a2)+getSum(st, n, b1, b2);
				printf("%lld\n",ans);
			}
			else 
			{
				if(a2>b2)
					end=a2;
				else
					end=b2;
				ans=getSum(st,n,str,end);
				printf("%lld\n",ans);
			}
		
	}

	return 0;
}

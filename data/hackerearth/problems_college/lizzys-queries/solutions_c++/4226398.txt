#include <bits/stdc++.h>
using namespace std;

typedef pair<int,int> ii;
typedef pair<ii,int> pii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<pii> vpii;
typedef long long int ll;
typedef unsigned long long int ull;

#define mi 1000000007
#define rep(i,a,b) for(i=a;i<b;i++)
#define repv(i,a,b) for(i=b-1;i>=a;i--)
#define pr(arr,n) rep(i,0,n) cout<<arr[i]<<" "; cout<<endl;
#define pr1(arr,n) rep(i,1,n+1) cout<<arr[i]<<" "; cout<<endl;
#define inf INT_MAX
#define gc getchar_unlocked
#define PB push_back
#define MP make_pair
#define fi first
#define se second
#define SET(a,b) memset(a,b,sizeof(a))
#define MAX 500005
#define gu getchar
#define pu putchar
#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)

#define TRACE

#ifdef TRACE
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)

#endif

int mult(int x,int y)
{
  ll ans,x1=(ll)x,y1=(ll)y;
  ans=(x1*y1)%mi;
  return (int)ans;
}
int gcd(int a,int b) { return b==0 ? a : gcd (b,a%b);}
int lcm(int a,int b) { return a*(b/gcd(a,b));}

ll pow1(ll a,ll b)
{
  ll ans=1;
  while(b>0)
    {
      if(b&1) ans=(ans*a)%mi;	
      a=(a*a)%mi; b>>=1;
    }	
  return ans;
}
int mina(int arr[],int n)
{
  int x=arr[0],i,pos=0;
  rep(i,1,n){ if(arr[i]<x) { x=arr[i]; pos=i; } }
  return x;
}
int maxa(int arr[],int n)
{
  int x=arr[0],i,pos=0;
  rep(i,1,n){ if(arr[i]>x) { x=arr[i]; pos=i; } }
  return x;
}
int n;
ll tree1[800005],tree2[800005],p[100005];
void build1( ll a[],int node, int low, int high )
{
  if ( low == high )
    {
      tree1[ node ] = a[low];
      tree1[node]%=mi;
      return;
    }
  else
    {
      build1(a, node * 2, low, ( low + high ) / 2 );
      build1(a, node * 2 + 1, ( low+high) / 2 + 1, high );
      tree1[ node ]= tree1[node*2]+tree1[2*node+1];
      tree1[node]%=mi;
    }
}
void update1( int node, int pos, int val, int low, int high )
{
  if ( low == high && low == pos )
    {
      tree1[node]=(p[pos-1]*val);
      tree1[node]%=mi;
      return;
    }
  else if ( pos <= ( low+high ) / 2 )
    {
      update1( node * 2, pos, val, low, ( low+high ) / 2 );
    }
  else if ( pos > (low+high ) / 2 )
    {
      update1( node * 2 + 1, pos, val, ( low+high ) / 2 + 1, high );
    }
  tree1[ node ]=tree1[node*2]+tree1[2*node+1];
  tree1[node]%=mi;
}
ll query1(int node, int low, int high, int l, int r )
{
  if ( l == low && r == high )
    {
      return tree1[ node ];
    }
  int mid=(low+high)/2;
  if ( r <= mid )
    {
      return query1( node * 2, low, (low+high) / 2, l, r );
    }
  if ( l > mid )
    {
      return query1( node * 2 + 1, (low+high) / 2 + 1, high, l, r );
    }
  return (query1( node * 2, low, (low+high) / 2, l, (low+high) / 2 )+query1( node * 2 + 1, (low+high) / 2 +  1, high, (low+high) / 2 + 1, r ))%mi;
}
void build2( ll a[],int node, int low, int high )
{
  if ( low == high )
    {
      tree2[ node ] = a[low]%mi;
      return;
    }
  else
    {
      build2(a, node * 2, low, ( low + high ) / 2 );
      build2(a, node * 2 + 1, ( low+high) / 2 + 1, high );
      tree2[ node ]= tree2[node*2]+tree2[2*node+1];
      tree2[node]%=mi;
    }
}
void update2( int node, int pos, int val, int low, int high )
{
  if ( low == high && low == pos )
    {
      tree2[node]=p[n-pos]*val;
      tree2[node]%=mi;
      return;
    }
  else if ( pos <= ( low+high ) / 2 )
    {
      update2( node * 2, pos, val, low, ( low+high ) / 2 );
    }
  else if ( pos > (low+high ) / 2 )
    {
      update2( node * 2 + 1, pos, val, ( low+high ) / 2 + 1, high );
    }
  tree2[ node ]=tree2[node*2]+tree2[2*node+1];
  tree2[node]%=mi;
}
ll query2(int node, int low, int high, int l, int r )
{
  if ( l == low && r == high )
    {
      return tree2[ node ];
    }
  int mid=(low+high)/2;
  if ( r <= mid )
    {
      return query2( node * 2, low, (low+high) / 2, l, r );
    }
  if ( l > mid )
    {
      return query2( node * 2 + 1, (low+high) / 2 + 1, high, l, r );
    }
  return query2( node * 2, low, (low+high) / 2, l, (low+high) / 2 )+query2( node * 2 + 1, (low+high) / 2 +  1, high, (low+high) / 2 + 1, r )%mi;
}
int main()
{
  int q,i,l,r,j;
  si(n); si(q);
  string s;
  cin>>s;
  ll hash[n+3];
  ll rev[n+3];
  rep(i,0,100006)
    p[i]=pow1(31,i);
  //Populate forward hashes
  int h=0;
  //cout<<n<<" "<<s.size()<<endl;
  rep(i,1,n+1)
    {
      hash[i]=((ll)(s[i-1]-'a')*p[i-1])%mi;
    }
  //Populate reverse hashes
  //cout<<s[n-1]<<endl;
  repv(i,1,n+1)
    {
      //if(i==n)
      //cout<<p[n-i]<<" "<<" "<<s[i-1]<<" "<<s[i-1]-'a'<<" "<<p[n-i]*(s[i-1]-'a')<<endl;
      rev[i]=((ll)(s[i-1]-'a')*p[n-i])%mi;
    }
  //pr1(hash,n); pr1(rev,n);
  build1(hash,1,1,n);
  build2(rev,1,1,n);
  //pr1(tree1,12); pr1(tree2,12);
  //cout<<tree2[1]<<" "<<rev[n]<<" "<<p[10000]<<" "<<p[0]<<endl;
  while(q--)
    {
      char x;
      int ch;
      si(ch);
      if(ch==0)
	{
	  si(l); cin>>x;
	  update1(1,l,x-'a',1,n);
	  update2(1,l,x-'a',1,n);
	}
      else
	{
	  si(l); si(r);
	  ll sum1=query1(1,1,n,l,r);
	  ll sum2=query2(1,1,n,l,r);
	  ll x1=pow1(31,l-1);
	  x1=pow1(x1,mi-2);
	  sum1=(sum1*x1)%mi;
	  ll x2=pow1(31,n-r);
	  x2=pow1(x2,mi-2);
	  sum2=(sum2*x2)%mi;
	  //trace4(sum1,sum2,x1,x2);
	  if(sum1==sum2)
	    cout<<"Yes"<<endl;
	  else
	    cout<<"No"<<endl;
	}
      //pr1(tree1,12); pr1(tree2,12);
    }
  return 0;
}

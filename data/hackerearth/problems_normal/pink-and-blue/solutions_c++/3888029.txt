/*    ironstark    */
#include<bits/stdc++.h>
#define pii pair<long long,long long>
#define fi first
#define se second
#define mp make_pair
#define vpi vector< pii >
#define pb push_back
#define ll long long int
#define mod 1000000007
#define gcd(a,b) __gcd(a,b)
#define sf(n) scanf("%lld",&(n))
#define pf(n) printf("%lld\n",(n))
#define setbits(n) __builtin_popcount((n))
#define pq priority_queue
using namespace std;
int main()
{
    int n,m;
    cin>>n>>m;
    char arr[n+1];
    for(int i=1;i<=n;i++)
        cin>>arr[i];
    vector<int>v[n+1];
    for(int i=0;i<m;i++)
    {
        int a,b;
        cin>>a>>b;
        v[a].pb(b);
        v[b].pb(a);
    }
    queue<int>q;
    q.push(1);
    char al_col[n+1];
    al_col[1]='B';
    bool visited[n+1];
    fill(visited,visited+n+1,false);
    visited[1]=true;
    while(!q.empty())
    {
        int k=q.front();
        q.pop();
        char col=al_col[k];
        for(int i=0;i<v[k].size();i++)
        {
            if(!visited[v[k][i]])
            {
                visited[v[k][i]]=true;
                if(col=='B')
                al_col[v[k][i]]='P';
                else
                al_col[v[k][i]]='B';
                q.push(v[k][i]);
            }
        }
    }
    int inv=0;
    for(int i=1;i<=n;i++)
    {
        if(al_col[i]=='B' && arr[i]=='G')
            inv++;
        else if(al_col[i]=='P' && arr[i]=='B')
            inv++;
    }
    q.push(1);
    memset(al_col,0,sizeof(al_col));
    al_col[1]='P';
    fill(visited,visited+n+1,false);
    visited[1]=true;
    while(!q.empty())
    {
        int k=q.front();
        q.pop();
        char col=al_col[k];
        for(int i=0;i<v[k].size();i++)
        {
            if(!visited[v[k][i]])
            {
                visited[v[k][i]]=true;
                if(col=='B')
                al_col[v[k][i]]='P';
                else
                al_col[v[k][i]]='B';
                q.push(v[k][i]);
            }
        }
    }
    int inv1=0;
    for(int i=1;i<=n;i++)
    {
        if(al_col[i]=='B' && arr[i]=='G')
            inv1++;
        else if(al_col[i]=='P' && arr[i]=='B')
            inv1++;
    }
    cout<<min(inv1,inv)<<endl;
}

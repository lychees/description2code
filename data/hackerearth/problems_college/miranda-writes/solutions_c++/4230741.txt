#include <bits/stdc++.h>
using namespace std;

#define TRACE
#ifdef TRACE
#define TR(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define TR(...)
#endif

typedef long long        LL;
typedef vector < int >   VI;
typedef pair < int,int > II;
typedef vector < II >    VII;

#define MOD              1000000007
#define EPS              1e-12
#define N                410
#define PB               push_back
#define MP               make_pair
#define F                first 
#define S                second
#define ALL(v)           v.begin(),v.end()
#define SZ(a)            (int)a.size()
#define FILL(a,b)        memset(a,b,sizeof(a))
#define SI(n)            scanf("%d",&n)
#define SLL(n)           scanf("%lld",&n)
#define PLLN(n)          printf("%lld\n",n)
#define PIN(n)           printf("%d\n",n)
#define REP(i,j,n)       for(LL i=j;i<n;i++)
#define PER(i,j,n)       for(LL i=n-1;i>=j;i--)
#define endl             '\n'
#define fast_io          ios_base::sync_with_stdio(false);cin.tie(NULL)

int n , m , k;
int dp[N][N];
int DP[1<<15][N];
VI xx;
map <int , int> mp;
int rec(int mask , int u) {
  if(mask == (1<<k)-1)
    return dp[u][n];
  if(DP[mask][u] != -1) return DP[mask][u];
  int ret = MOD;
  for(int i : xx)
    if(!(mask & (1<<mp[i])))
      ret = min(ret , dp[u][i] + rec(mask | (1<<mp[i]) , i));
  return DP[mask][u] = ret;
}
int main() {
  SI(n); SI(m); SI(k);
  FILL(DP , -1);
  FILL(dp , MOD);
  REP(i,1,n+1) dp[i][i] = MOD;
  REP(i,0,m) {
    int u , v , c; SI(u); SI(v); SI(c);
    dp[u][v] = dp[v][u] = c;
  }
  REP(i,0,k) {
    int x; SI(x); xx.PB(x); mp[x] = i;
  }
  REP(i,1,n+1) REP(j,1,n+1) REP(k,1,n+1) dp[j][k] = min(dp[j][k] , dp[j][i] + dp[i][k]);
  PIN(rec(0 , 1));
  return 0;
}

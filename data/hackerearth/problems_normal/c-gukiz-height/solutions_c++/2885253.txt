#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 100*1000+5;
const int r = 1 << 18;
const ll inf = 4e18;
ll kiedy[r*2];
int tree[r * 2];

int find(ll x, int pref) {
    int v = pref + r;
    while(kiedy[tree[v]] > x) {
        if(__builtin_popcount(v) == 1)
            return 0;
		if(v & 1) v >>= 1;
		else {
        	v >>= 1;
        	v--;
		}
    }
    while(v < r) {
        if(kiedy[tree[v * 2 + 1]] <= x)
            v = v * 2 + 1;
        else v *= 2;
    }
    return v - r;
    /*
    int a = r, b = r + pref;
    int res = 0;
    while(a < b) {
        a >>= 1;
        if(b & 1) b >>= 1;
        else {
            if(kiedy[tree[b]] <= x)
                res = max(res, tree[b]);
            b >>= 1;
            b--;
        }
    }
    if(a == b) {
        if(kiedy[tree[b]] <= x)
            res = max(res, tree[b]);
    }
    return res;*/
}



ll sum[N];
int tab[N];


int n;
void built_tree() {
    kiedy[0] = inf;
   for(int i = 1; i <= 2*n; ++i) tree[r + i] = i;
    for(int i = r - 1; i; --i){
        tree[i] = tree[2 * i];
        if(kiedy[tree[2 * i]] > kiedy[tree[2 * i + 1] ])
            tree[i] = tree[2 * i + 1];
    }
}


ll bin_ser(int p,int k,int x)
{
    while( p < k )
    {
        int s = (p+k)/2;
        if ( ( (ll)tab[x] + (ll)x + (ll)n *(ll)s ) >= 0 ) k = s;
        else p = s+1;
    }
    return p*(ll)n+x;
}

int H;

long long int licz(ll a,ll b,ll c,ll d)
{
	ll w = a + b + c;
//	printf("w -- %lld %lld\n",w,d);
	if ( w >= 0 ) return 1;
	return w + d;
}

ll suma(ll x)
{
	if ( x <= 0 ) return -H;
    return licz( -(ll)H , (ll)sum[n] * (x/n), (ll)sum[x%n], x*(x+1)/2 );
}

bool check(ll x)
{
    int y = find(x,x%n+n);
 //   printf("find %lld %d -- %lld\n",x,x%n+n,find(x,x%n+n));
    if ( y < x%n+n ) y = x - (x%n+n-y);
    else y = x;
 //   printf("check x %lld -- %lld %lld\n",x,y,suma(y));
    return suma(y) >= 0;
}

int main()
{
	scanf("%d%d",&n,&H);
	for (int i=1;i<=n;i++)
	{
		scanf("%d",tab+i);
		sum[i] += tab[i];
		sum[i+1] += sum[i];
	}
	for (int i=1;i<=n;i++)
        kiedy[i] = bin_ser(0,1000000000,i);
  //  for (int i=1;i<=n;i++) printf("k %d\n",kiedy[i]);
	built_tree();
    ll p = 0; ll k = 2000010000LL;
    while( p < k )
    {
        ll s = (p+k)/2;
        if ( check(s) ) k = s;
        else p = s+1;
    }
	for (int i=1;i<=1000*1000;i++)
	{
		if ( sum[n] * (long long)(i/n) + sum[i%n] + i *(long long)(i+1) /2 >= H )
		{
			printf("%d\n",i);
			return 0;
		}
	}
    printf("%lld\n",p);
}

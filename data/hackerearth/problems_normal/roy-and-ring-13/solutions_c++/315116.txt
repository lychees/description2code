//reference from geeksforgeeks-: http://www.geeksforgeeks.org/program-for-nth-fibonacci-number/


#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<string>
#include<string.h>
#include<vector>
#include<map>
#include<algorithm>
#include<limits.h>
#include<set>
#include<math.h>
 
using namespace std;
#define lli long long int
#define ulli unsigned long long int
#define in(t) scanf("%d",&t)
#define inlf(t) scanf("%lf",&t)
#define inl(t) scanf("%ld",&t)
#define inll(t) scanf("%lld",&t)
#define inlu(t) scanf("%llu",&t)
#define MOD 1000000007

void multiply(lli F[2][2], lli M[2][2]);
 
void power(lli F[2][2], lli n);
 
/* function that returns nth Fibonacci number */
lli fib(lli n)
{
  lli F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-1);
  return F[0][0];
}
 
/* Optimized version of power() in method 4 */
void power(lli F[2][2], lli n)
{
  if( n == 0 || n == 1)
      return;
  lli M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2);
  multiply(F, F);
 
  if (n%2 != 0)
     multiply(F, M);
}
 
void multiply(lli F[2][2], lli M[2][2])
{
  lli x =  (F[0][0]*M[0][0] + F[0][1]*M[1][0])%MOD;
  lli y =  (F[0][0]*M[0][1] + F[0][1]*M[1][1])%MOD;
  lli z =  (F[1][0]*M[0][0] + F[1][1]*M[1][0])%MOD;
  lli w =  (F[1][0]*M[0][1] + F[1][1]*M[1][1])%MOD;
 
  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}

int main()
{
    lli t,n;
    ulli ans;
    inll(t);
    while(t--)
    {
    ans=0;
    inll(n);
    //cout<<fib(n)<<"\n";
    if(n%2)
    n++;
    n/=2;
    //cout<<"n="<<n<<"\n";
    ans=fib(n);
    ans=(ans*ans)%MOD;
    printf("%llu\n",ans);
    }
    return 0;
}
    

from math import *


def LineIntersect(a, b):
    def det(a, b, c, d): return a*d-b*c
    z = det(a[0], a[1], b[0], b[1])
    return (-det(a[2], a[1], b[2], b[1])/z, -det(a[0], a[2], b[0], b[2])/z)


def GetCircleInOrigin(A):
    def GetNormal((x, y)): return (-y, x)
    def GetDif((x1, y1), (x2, y2)): return (x1-x2, y1-y2)
    def GetSum((x1, y1), (x2, y2)): return (x1+x2, y1+y2)
    def GetMultToCof((x1, y1), c): return (x1*c, y1*c)
    def NormalLine((a, b)): return (b[1]-a[1], a[0]-b[0], a[1]*b[0]-a[0]*b[1])
    L = [(GetSum(GetMultToCof(GetDif(A[i +
                                       1], A[i]), 0.5), A[i]), GetSum(GetSum(GetMultToCof(GetDif(A[i +
                                                                                                   1], A[i]), 0.5), A[i]), GetNormal(GetDif(A[i +
                                                                                                                                              1], A[i])))) for i in range(2)]
    L = map(NormalLine, L)
    L = LineIntersect(L[0], L[1])
    return map(lambda x: GetDif(x, L), A)


def norm(a):
    if (a < 0):
        return norm(a+2*pi)
    elif (a >= 2*pi):
        return norm(a-2*pi)
    else:
        return a


eps = 0.00001
A = [map(float, raw_input().split()) for i in range(3)]
A = GetCircleInOrigin(A)
C = [atan2(y, x) for x, y in A]
for i in range(3):
    if (C[i] < 0):
        C[i] += 2*pi
C = sorted(C)
omega = 1
R = hypot(*A[0])
for p in range(3, 101):
    alpha = 2*pi/p
    for a1 in xrange(1, p):
        for a2 in range(1, p-a1):
            a3 = p-a1-a2
            if (omega == 1) and (abs(C[1]-C[0]-a1*alpha)
                                 <= eps) and (abs(C[2]-C[1]-a2*alpha) <= eps):
                omega = alpha
print R**2*pi/omega*sin(omega)

#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
#include <cstring>
using namespace std;
vector<int> g[100001];
int match[100001],vis[100001];
int ct = 0;
bool augument(int u){
	for(int v:g[u]){
		if (vis[v]) continue;
		vis[v] = 1;
		if (match[v]==-1 || augument(match[v])){
			match[v]=u;
			return true;
		}
	}
	return false;
}
int main()
{
    ios::sync_with_stdio(0);
    int t;
    cin>>t;
    while(t--){
    	int k,p;
    	long long x,y;
    	cin>>k>>p;
    	unordered_map<long long,int> hashx, hashy;
    	int cntx = 0,cnty = 0;
    	for(int i=0;i<=100000;i++) g[i].clear();
    	for(int i=0;i<p;i++){
    		cin>>x>>y;    		
    		if (!hashx.count(x)) hashx[x] = cntx++;
    		if (!hashy.count(y)) hashy[y] = cnty++;
    		g[hashx[x]].push_back(hashy[y]);
    	}
    	int ans = 0;
    	memset(match,-1,sizeof(match));
    	memset(vis,0,sizeof(vis));
    	for(int i=0;i<hashx.size();i++){
    		//if (vis[i]) continue;
    		if (augument(i)) ans++;
    	}
    	cout << (1LL*ans*k) << "\n";
    }
    return 0;
}

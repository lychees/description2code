#include <iostream>
#include<algorithm>
#include<stdio.h>
#include<queue>
using namespace std;

struct Nodes
{
	int value;
	int steps;
};

//let me start by pushing the node
void runBFS(int arr[],bool visited[],int n)
{
	//here i will just pick the 0th node and explore every thing
	Nodes node;
	node.value=0; //means at 0th index
	node.steps=0;//no sep required to reach at 0 from 0
	queue<Nodes>q;
	q.push(node);
	visited[0]=true;
	while(!q.empty())
	{
		//here i will just extract the value from the queue and push all other nodes
		
		
		Nodes node;
	   node=q.front();
	  // cout<<node.value<<" ";
	    q.pop();//just pop that node from the queue
		if(node.value==n-1)
	{
		printf("%d\n",node.steps);
		break; //come out from the while loop
	}
	for(int i=1;i<=arr[node.value];i++)
	{
		//while pushing all the nodes ,please check that visited must be false
		if(visited[node.value+i]==false)
		{
			visited[node.value+i]=true;
			Nodes anode;
			anode.value=node.value+i;
			anode.steps=node.steps+1;
			q.push(anode);
			
		}
		
	}
		
		
		
		
		
	}//end of the while loop

	
	
	
	
}



 
int main()
{
    int t=0;
    scanf("%d",&t);
    while(t>0)
    {
    	
    	int n=0;
    	scanf("%d",&n);
    	int arr[10001];
    	for(int i=0;i<n;i++)
    	scanf("%d",&arr[i]);
    	bool visited[1001];
    	for(int i=0;i<1001;i++)visited[i]=false; //..did not visited it yet
    	runBFS(arr,visited,n);//run the bfs please
    	
    	
    	t--;
    }
    return 0;
}

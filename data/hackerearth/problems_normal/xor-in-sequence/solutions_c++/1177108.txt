#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
struct st{
	int siz;
	st *c[2];
	st(){
		//siz = 0;
		//
		c[0] = c[1] = NULL;
	}
};
bool go;
inline void update(st *b, int val, int bb = 29){
	for(int i=29;i>=-1;i--){
	if (i < 0){
		b->siz++;
		return;
	}
	go = val >> i&1;
	if (!b->c[go]){
		b->c[go] = new st();
	}
	b->siz++;
	b=b->c[go];
	}
}
int countt(st *b, int val, int val2, int bb = 29){
	if (val2<0){
		return 0;
	}
	int r = 0;
	bool vv;
	bool v2;
	st *nex;
	for(int i=29;i>=-1;i--){
		nex=NULL;
		if(i<0){
			r+=b->siz;
			break;
		}
		vv = val >> i&1;
		v2 = val2 >> i&1;
		if (b->c[0]){
			if (vv>v2){
			}
			else{
				if (vv< v2){
					r += b->c[0]->siz;
				}
				else{
					nex=b->c[0];
				}
			}
		}
		if (b->c[1]){
			if ((1^vv)>v2){
			}
			else{
				if ((1^vv) < v2){
					r += b->c[1]->siz;
				}
				else{
					nex=b->c[1];
				}
			}
		}
		if(!nex){
			break;
		}
		b=nex;
	}
	return r;
}
//
st *root;
int t;
int n;
#define MAX_N 100003
int a[MAX_N];
int v[21];
long long int ans[21];
int v_siz;
int ans_siz;
long long int an;
int main(){
	scanf("%d", &t);
	while (t--){
		v_siz=ans_siz=0;
		scanf("%d", &n);
		root = new st();
		for (int i = 0; i < n; i++){
			scanf("%d", &a[i]);
		}
		int q;
		scanf("%d", &q);
		update(root, 0);
		for (int i = 0; i < q; i++){
			int kari;
			scanf("%d", &kari);
			v[v_siz]=kari-1;
			ans[v_siz]=0;
			v_siz++;
			scanf("%d", &kari);
			v[v_siz]=kari;
			ans[v_siz]=0;
			v_siz++;
		}
		an = 0;
		for (int i = 0; i < n; i++){
			an ^= a[i];
			for (int j =0; j < v_siz; j++){
				ans[j] += countt(root, an, v[j]);
			}
			update(root, an);
		}
		for (int i = 0; i<v_siz; i += 2){
			printf("%lld\n", ans[i + 1] - ans[i]);
		}
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
#define ll long long 
#define PB(x) push_back(x)
#define MP(a,b) make_pair(a, b)
struct comp{
    bool operator()(const std::pair<ll,ll> &left, const std::pair<ll,ll> &right) {
        return left.second < right.second;
    }
};
int main()
 {
 	long long n,q,k;
 	cin>>n>>q;
 	long long a[n];
 	for(long long i=0;i<n;i++)
 	{
 	 	scanf("%lld",&k);
 	    if(i==0){a[i]=k;}
 	    else{a[i]=a[i-1]+k;}
 	}
 	//cout<<endl;
 	long long g1,p1,g2,p2;
 	while(q--)
 	{
 
 	 	scanf("%lld %lld %lld %lld",&g1,&p1,&g2,&p2);
 	 	if(g1>g2)
 	 	{
 	 		ll t=g1;
 	 		g1=g2;
 	 		g2=t;
 	 	}
 	 	if(p1>p2)
 	 	{
 	 		ll t=p1;
 	 		p1=p2;
 	 		p2=t;
 	 	}
 	 	vector< pair<long long,long long> > v;
 	 	v.push_back(MP(g1,g2));
 	 	v.push_back(MP(p1,p2));
 	 	sort(v.begin(),v.end(),comp());
 	 	ll sum=0;
 	 	if(v[1].first<=v[0].first && v[1].second>=v[0].second)
 	 	{
 	 		if(v[1].first==0)
 	 		{
 	 			sum=a[v[1].second];
 	 		}
 	 		else
 	 		{
 	 			sum=a[v[1].second]-a[v[1].first-1];
 	 		}
 	 	}
 	 	else if(v[1].first>v[0].first && v[1].second>=v[0].second && v[1].first<=v[0].second)
 	 	{
 	 		if(v[0].first==0)
 	 		{
 	 			sum=a[v[1].second];
 	 		}
 	 		else
 	 		{
 	 			sum=a[v[1].second]-a[v[0].first-1];
 	 		}
 	 	}
 	 	else
 	 	{
 	 		if(v[0].first==0)
 	 		{
 	 			sum=a[v[0].second];
 	 		}
 	 		else
 	 		{
 	 			sum=a[v[0].second]-a[v[0].first-1];
 	 		}
 	 		if(v[1].second==0)
 	 		{
 	 			sum+=a[v[1].second];
 	 		}
 	 		else
 	 		{
 	 			sum+=a[v[1].second]-a[v[1].first-1];
 	 		}
 	 	}
 	 	printf("%lld \n",sum);
 	 }
 
 
 }
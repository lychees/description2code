#include <vector>
#include <list>
#include <map>
#include <set>
#include "queue"
#include <deque>
#include <stack>
#include <numeric>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cassert>
#include <iostream>
#define MOD 1000000007
#define pi acos(-1)
#define iil pair<int,int>
#define vii vector<ii>
#define ll  long long int
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)
#define REP(i,a,b) for(ll i=a;i<=b;i++)
#define loop(i,n) for(ll i=0;i<n;i++)
#define ll  long long int
#define LL long long int
#define loop2(i,n) for(ll i=1;i<=n;i++)
#define MIN(a,b) (a) < (b) ? (a) : (b)
#define MAX(a,b) (a) > (b) ? (a) : (b)
#define ABS(a) (a) > 0 ? (a) : -(a)
#define rep1(i,a,n) for(i=a;i<(n);i++)
#define pii pair< ll, ll >
#define pb push_back
#define mp make_pair
#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; i++)
#define rept(i,n) FOR(i,0,(n)-1)
#define edge pair<int ,int >
ll add(ll a, ll b) { return a+b-(a+b>=MOD)*MOD; }
ll sub(ll a, ll b) { return a-b+(a-b<0)*MOD; }
ll mult(ll a, ll b) { return (1LL*a*b)%MOD; }
#define all(x)                  (x).begin(),(x).end()
inline ll gcd(ll a, ll b){ ll t; while (b){ a = a%b; t = a; a = b; b = t; }return a; }
#define dis(x,y,a,b) sqrt((x-a)*(x-a)+(y-b)*(y-b));
#define maxn 100005
#define rep(i,a,n) for (int i=a;i<n;i++)
#define digits(n)  (floor(log10(n))+1)
#define ll long long int
#define OUT_RT cerr << (float(clock()) / CLOCKS_PER_SEC) << endl
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

using namespace std;
//Find the Holy Grail in an adventure frought with danger!
// Never giving in, fight to the end
//S:->11  US:->6






int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    ll n;
    cin>>n;
    ll array[n+1];
    loop2(i, n){
        cin>>array[i];
    }
    ll dp[n+1];
    dp[1] = array[1];
    for(ll j = 2;j<=n;j++){
        ll ans  =array[1]+ array[j] ;
        ll ans1 = 0  ;
        for(ll i = 2;i<=sqrt(j);i++){
            if(j%i==0){
                ans1  = max(ans1,dp[i]-array[1]);
                ll k = j/i;
                ans1 = max(ans1,dp[k]-array[1]);
            }
        }
        ans+=ans1;
        
        dp[j] = ans;
    }
    loop2(i, n){
        cout<<dp[i]<<" ";
    }
    //OUT_RT;
    
    
    
    return 0;
}


// #include C/C++ {
#include <bits/stdc++.h>
// }
using namespace std;
// #typedef {
typedef long long int64;
typedef pair <int, int> PII;
typedef pair <int64, int64> PLL;
// }

// #parameter{
#ifdef DEBUG_MODE

#define TYPE decltype
#define RF(filename) {freopen((filename), "r", stdin);}
#define WF(filename) {freopen((filename), "w", stdout);}
#define DF(filename) {freopen((filename), "w", stderr);}
#define eprintf printf

#else

#define TYPE __typeof
#define RF(filename) {;}
#define WF(filename) {;}
#define DF(filename) {;}
#define eprintf(...)
#define fprintf(...)

#endif

// #define {
#define SZ(a) ((int)(a).size())
#define X first
#define Y second
#define MP make_pair
#define L(x) ((x)<<1)
#define R(x) ((x)<<1 | 1)
#define max3(x, y, z) (max(max((x), (y)), (z)))
#define min3(x, y, z) (min(min((x), (y)), (z)))
#define BIT(x, i) (((x) >> (i)) & 1)
#define ALL(it) (it).begin(), (it).end()
#define FILL(__space, __val) memset(__space, __val, sizeof(__space))
#define MOVE(__spaceTo, __spaceFrom) memmove(__spaceTo, __spaceFrom, sizeof(__spaceTo))
#define UNIQUE(__vector) sort(ALL(__vector)), __vector.resize(unique(ALL(__vector)) - __vector.begin())
#define FOR(it, c) for( TYPE((c).begin()) it = (c).begin(); it != (c).end(); it++)
/////////////////////////////////////////////////////////////
const double PI = acos(-1.0);
const double EPS = 1e-6;

#define MAX_N 1005
#define MAX_M 5005
#define MOD (int)(1e9+7)
#define INF ((1 << 30) - 1)
#define BINF ((1LL << 62) - 1LL)
#define NONE -1
#define NIL 0
// }

/////////////////////////////////////////////////////////////
int mat[MAX_N][MAX_N];
int64 dp[MAX_N][MAX_N];
const int OFFR[] = { 1, 0, -1, 0 };
const int OFFC[] = { 0, 1, 0, -1 };
/////////////////////////////////////////////////////////////
int main(){
	RF("input.txt");
	//	WF("output.txt");
	DF("err.txt");

	int N;
	scanf("%d", &N);
	vector < pair< int, PII> > V;
	for (int r = 0; r < N; r++) for (int c = 0; c < N; c++){
		scanf("%d", &mat[r][c]);
		V.emplace_back(MP(mat[r][c], PII(r, c)));
		dp[r][c] = 1LL;
	}
	sort(ALL(V));
	reverse(ALL(V));
	int64 res = 0LL;
	for (auto now : V){
		int x = now.X;
		int r = now.Y.X;
		int c = now.Y.Y;
		res = (res + dp[r][c]) % MOD;
		for (int k = 0; k < 4; k++){
			int nr = r + OFFR[k];
			int nc = c + OFFC[k];
			if (nr >= 0 and nr < N and nc >= 0 and nc < N and mat[r][c] > mat[nr][nc])
				dp[nr][nc] = (dp[nr][nc] + dp[r][c]) % MOD;
		}
	}
	printf("%lld\n", res);
	return 0;
}
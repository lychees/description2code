#include <stdio.h>

#define MOD 1000000007
#define NMAX 222222

long long fact[NMAX], factinv[NMAX];

long long RaiseToPow(long long x, int y) {
	if (y == 0) return 1;
	long long res = RaiseToPow(x, y >> 1);
	res = (res * res) % MOD;
	if ((y & 1) == 1) res = (res * x) % MOD;
	return res;
}

void ComputeFact() {
	int i;
	fact[0] = factinv[0] = 1;
	for (i = 1; i < NMAX; i++) {
		fact[i] = (fact[i - 1] * i) % MOD;
		factinv[i] = RaiseToPow(fact[i], MOD - 2);
	}
}

long long Comb(int X, int Y) {
	//fprintf(stderr, "C(X=%d,Y=%d)\n", X, Y);
	if (Y < 0 || Y > X) return 0;
	long long c = fact[X];
	c = (c * factinv[Y]) % MOD;
	c = (c * factinv[X - Y]) % MOD;
	return c;
}

long long CombRep(int X, int Y) {
	//fprintf(stderr, "Crep(X=%d,Y=%d)\n", X, Y);
	return Comb(X + Y - 1, Y);
}

int N, M, C, i;
long long ans;

int main() {
	ComputeFact();
	//freopen("y.txt", "r", stdin);
	int T;
	scanf("%d", &T);
	while (T--) {
		scanf("%d %d %d", &N, &M, &C);
		if (C == 0) {
			if (N == M) printf("1\n");
			else printf("0\n");
			continue;
		}
		if (M < C - 1) {
			printf("0\n");
			continue;
		}
		ans = (CombRep(N - M - C + 1, C - 1) * CombRep(M - (C - 1) + 1, C)) % MOD;
		printf("%lld\n", ans);
	}
	return 0;
}

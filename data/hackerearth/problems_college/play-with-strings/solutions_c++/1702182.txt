/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/
 
#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;
 
char str[limit];
char str1[limit];
int F[limit];
int F1[limit];
void failure(string str)
{
	int size = str.size();
	F[0] = F[1] = 0;
	for(int i = 2; i <= size; i++) {
		int j = F[i - 1];
		while(true) {
			if(str[j] == str[i - 1]) {
				F[i] = j + 1; break; 
			}
			if(j == 0) {
				F[i] = 0; break;
			}
			else {
				j = F[j];
			}
		}
	}	
}

void failure1(string str)
{
	int size = str.size();
	F1[0] = F1[1] = 0;
	for(int i = 2; i <= size; i++) {
		int j = F1[i - 1];
		while(true) {
			if(str[j] == str[i - 1]) {
				F1[i] = j + 1; break; 
			}
			if(j == 0) {
				F1[i] = 0; break;
			}
			else {
				j = F1[j];
			}
		}
	}	
}

void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}
 
void solve()
{
	scanf("%s", str);
	string s = string(str);
	int l = s.size();
	failure(s);
	scanf("%s", str1);
	string s1 = string(str1);
	int ll = s1.size();
	failure1(s1);
	int slen = l - F[l];
	int sllen = ll - F1[ll];
	if(slen == 0 && sllen == 0) {
		puts("0");
	}
	else {
		int cnt = 0;
		for(int i = slen, j = sllen; i <= l && j <= ll; i += slen, j += sllen) {
			if(i != j) {
				break;
			}
			if(l % i == 0 && ll % j == 0) {
				if(s.substr(0, i) == s1.substr(0, j)) {
					cnt++;
				}
			}
		}
		pi(cnt); pn;
	}
}
 
int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
#define ull long long int
#define INF 1000000009
vector<vector<pair<ull,ull> > >graph;
priority_queue<pair<ull,ull>,vector<pair<ull,ull> >,greater<pair<ull,ull> > >pq;
bool finalize[10004];
ull dist[10004];
ull n,m;
void dijkstra(ull x)
{
    ull p,vertex,weight;
    pq.push(make_pair(dist[x],x));
    while(!pq.empty())
    {
        p=pq.top().second;
        pq.pop();
        if(finalize[p])
            continue;
        for(ull i=0;i<graph[p].size();i++)
        {
            vertex=graph[p][i].first;
            weight=graph[p][i].second;
            if(!finalize[p] && dist[vertex]>dist[p]+weight)
            {
                dist[vertex]=dist[p]+weight;
                pq.push(make_pair(dist[vertex],vertex));
            }
        }
        finalize[p]=true;
    }
    return;
}
int main()
{
    ios::sync_with_stdio(false);
    ull t,x,y,w,i,q,a,k;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;
        graph.resize(n+5);
        for(i=0;i<m;i++)
        {
            cin>>x>>y>>w;
            graph[x].push_back(make_pair(y,w));
            graph[y].push_back(make_pair(x,w));
        }
        for(i=1;i<=n;i++)
            dist[i]=INF;
        dist[1]=0;
        memset(finalize,false,sizeof(finalize));
        dijkstra(1);
        cin>>q;
        while(q--)
        {
            cin>>a>>k;
            x=k-2*dist[a];
            if(x<0)
                cout<<"0\n";
            else
                cout<<x<<"\n";
        }
        graph.clear();
    }
    return 0;
}

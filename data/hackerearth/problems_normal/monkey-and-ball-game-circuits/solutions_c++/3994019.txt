/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <algorithm>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}


using namespace std;
int ans = 0;


const int MAXN = 100000;
bool used[MAXN];
int timer, tin[MAXN], fup[MAXN];

class MonkeyAndBallGame {
public:

	void dfs (int v, int p = -1) {
		used[v] = true;
		tin[v] = fup[v] = timer++;
		for (size_t i=0; i< g[v].size(); ++i) {
			int to = g[v][i];
			if (to == p)  continue;
			if (used[to])
				fup[v] = min (fup[v], tin[to]);
			else {
				dfs (to, v);
				fup[v] = min (fup[v], fup[to]);
				if (fup[to] > tin[v]) {
					ans = max(ans, black(to) * white(to) + black(v) * white(v));
				}
			}
		}
	}

	void find_bridges() {
		timer = 0;
		for (int i=0; i<n; ++i)
			used[i] = false;
		for (int i=0; i<n; ++i)
			if (!used[i])
				dfs (i);
	}

	int N, n;
	int index(int b, int w) {
		return b * (N + 1) + w;
	}
	int black(int id) {
		return id / (N + 1);
	}
	int white(int id) {
		return id % (N + 1);
	}
	vector<vector<int>> g;

	void solve(std::istream& in, std::ostream& out) {
		ans = -1;
		int qadd, qremove;
		in >> N >> qadd >> qremove;
		n = (N + 1) * (N + 1);

		g.resize(n);

		auto add_edge = [&](int x, int y) {
			g[x].push_back(y);
			g[y].push_back(x);
		};

		auto remove_edge = [&](int x, int y) {
			g[x].erase(find(g[x].begin(), g[x].end(), y));
			g[y].erase(find(g[y].begin(), g[y].end(), x));
		};

		add_edge(index(0, 0), index(N, N));

		for (int i: inclusiveRange(N)) {
			for (int j: inclusiveRange(N)) {
				if (i != N) {
					add_edge(index(i, j), index(i + 1, j));
				}
				if (j != N) {
					add_edge(index(i, j), index(i, j + 1));
				}
			}
		}

		for (int _: range(qadd)) {
			int b, w, db, dw;
			in >> b >> w >> db >> dw;
			add_edge(index(b, w), index(db, dw));
		}

		for (int _: range(qremove)) {
			int b, w;
			string c;
			in >> b >> w >> c;
			if (c[0] == 'B') {
				remove_edge(index(b, w), index(b + 1, w));
			} else {
				remove_edge(index(b, w), index(b, w + 1));
			}
		}

		find_bridges();

		out << ans << "\n";
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	MonkeyAndBallGame solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}

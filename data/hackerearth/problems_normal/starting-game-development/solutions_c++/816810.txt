#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<cassert>
using namespace std;
#define FOR(i,a,b) for(i= a ; i < b ; ++i)
#define rep(i,n) FOR(i,0,n)
#define INF INT_MAX
#define pb push_back
#define mp make_pair
#define min(a,b) ((a)<(b)?(a):(b))
#define si(n) scanf("%d",&n)
#define pin(n) printf("%d\n",n)
#define sl(n) scanf("%lld",&n)
#define scan(v,n) vector<int> v;rep(i,n){ int j;si(j);v.pb(j);}
#define mod (int)(1e9 + 7)
#define ll long long int
#define F first
#define S second
ll modpow(ll a,ll n,ll temp){ll res=1,y=a;while(n>0){if(n&1)res=(res*y)%temp;y=(y*y)%temp;n/=2;}return res%temp;} 
vector<pair<int,int> > arr[5007];
int szit[1000006],brr[1000006];
int searchit(int l, int v)
{
	int low=0,sz=arr[l].size(),high=sz-1,mid,val,val1;
	while(low<=high)
	{
		mid=(low+high)/2;
		val=arr[l][mid].F;
		if(mid!=sz-1)
			val1=arr[l][mid+1].F;
		else
			val1=mod;
		if(val<=v && val1>v)
			return arr[l][mid].S;
		else if(v>=val)
			low=mid+1;
		else
			high=mid-1;
	}
	return 0;
}
int main()
{
	int n,m,q,ans,val,i,j,sz,cnt,ans1,calc;
	si(n);
	si(m);
	si(q);
	assert(n>=1 && n<=100);
	assert(m>=1 && m<=5000);
	assert(q>=1 && q<=5000);
	rep(i,n)
	{
		rep(j,m)
		{
			si(val);
			assert(val>=1 && val<=mod);
			brr[j]=val;
		}
		arr[i].pb(mp(brr[0],1));
		FOR(j,1,m)
		{
			//Store values only till those levels where brr[j] is >= brr[j-1] as specified in the question
			if(brr[j]>=brr[j-1])
				arr[i].pb(mp(brr[j],j+1));
			else 
				break;
		}
		//Sort the values so that we can use binary search to search for a given value in the array.
		//Since Linear Search will time out
		sort(arr[i].begin(),arr[i].end());
	}
	rep(i,q)
	{
		ans=mod;
		rep(j,n)
		{
			si(val);
			//Searching for the maximum level which has value <= val
			calc=searchit(j,val);
			//Taking the minimum of all maximum values as specified in the question
			ans=min(ans,calc);
		}
		pin(ans);
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
vector<vector<int> >graph;
vector<vector<int> >revgraph;
stack<int>s;
bool visit[105];
void dfs1(int i)
{
    visit[i]=true;
    for(int j=0;j<graph[i].size();j++)
        if(!visit[graph[i][j]])
            dfs1(graph[i][j]);
    s.push(i);
}
int dfs2(int i,int arr[],int sum)
{
    visit[i]=true;
    sum=arr[i];
    for(int j=0;j<revgraph[i].size();j++)
    {
        if(!visit[revgraph[i][j]])
            sum+=dfs2(revgraph[i][j],arr,sum);
    }
    return sum;
}
int main()
{
    ios::sync_with_stdio(false);
    int n,m,i,t,x,y;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;
        graph.resize(n+1);
        revgraph.resize(n+1);
        int arr[n+1];
        for(i=0;i<n;i++)
            cin>>arr[i];
        for(i=0;i<m;i++)
        {
            cin>>x>>y;
            graph[x].push_back(y);
            revgraph[y].push_back(x);
        }
        memset(visit,false,sizeof(visit));
        for(i=0;i<n;i++)
            if(!visit[i])
                dfs1(i);
        memset(visit,false,sizeof(visit));
        x=0;
        while(!s.empty())
        {
            i=s.top();
            if(!visit[i])
                x=max(x,dfs2(i,arr,0));
            s.pop();
        }
        cout<<x<<"\n";
        graph.clear();
        revgraph.clear();
    }
    return 0;
}

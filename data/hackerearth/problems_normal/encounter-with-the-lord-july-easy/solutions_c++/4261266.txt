//satyaki3794
#include <bits/stdc++.h>
#define MOD (1000000007LL)
#define pb push_back
#define ff first
#define ss second
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int InfCost=1e9;
struct MinimumCostMaximumFlow {
    typedef int Index; typedef int Flow; typedef int Cost;
    static const Flow InfCapacity = MOD;
    struct Edge {
        Index to; Index rev;
        Flow capacity; Cost cost;
    };
    vector<vector<Edge> > g;
    void init(Index n) { g.assign(n, vector<Edge>()); }
    void add(Index i, Index j, Flow capacity = InfCapacity, Cost cost = Cost()) {
      // cout<<i<<" "<<j<<" "<<capacity<<" "<<cost<<"\n";
        Edge e, f; e.to = j, f.to = i; e.capacity = capacity, f.capacity = 0; e.cost = cost, f.cost = -cost;
        g[i].push_back(e); g[j].push_back(f);
        g[i].back().rev = (Index)g[j].size() - 1; g[j].back().rev = (Index)g[i].size() - 1;
    }
    void addB(Index i, Index j, Flow capacity = InfCapacity, Cost cost = Cost()) {
        add(i, j, capacity, cost);
        add(j, i, capacity, cost);
    }
    pair<Cost,Flow> minimumCostMaximumFlow(Index s, Index t, Flow f = InfCapacity, bool bellmanFord = false) {
        int n = g.size();
        vector<Cost> dist(n); vector<Index> prev(n); vector<Index> prevEdge(n);
        pair<Cost,Flow> total = make_pair(0, 0);
        vector<Cost> potential(n);
        while(f > 0) {
            fill(dist.begin(), dist.end(), InfCost);
            if(bellmanFord || total.second == 0) {
                dist[s] = 0;
                for(int k=0;k<n;k++){
                    bool update = false;
                    for(int i=0;i<n;i++)
                        if(dist[i] != InfCost)
                    for(Index ei = 0; ei < (Index)g[i].size(); ei ++) {
                        const Edge &e = g[i][ei];
                        if(e.capacity <= 0) continue;
                        Index j = e.to; Cost d = dist[i] + e.cost;
                        if(dist[j] > d ) {  //èª¤å·®â�¦
                            dist[j] = d; prev[j] = i; prevEdge[j] = ei;
                            update = true;
                        }
                    }
                    if(!update) break;
                }
            }else {
                vector<bool> vis(n);
                priority_queue<pair<Cost,Index> > q;
                q.push(make_pair(-0, s)); dist[s] = 0;
                while(!q.empty()) {
                    Index i = q.top().second; q.pop();
                    if(vis[i]) continue;
                    vis[i] = true;
                    for(Index ei = 0; ei < (Index)g[i].size(); ei ++) {
                        const Edge &e = g[i][ei];
                        if(e.capacity <= 0) continue;
                        Index j = e.to; Cost d = dist[i] + e.cost + potential[i] - potential[j];
                        if(d < dist[i])  d = dist[i];    //èª¤å·®â�¦
                        if(dist[j] > d) {
                            dist[j] = d; prev[j] = i; prevEdge[j] = ei;
                            q.push(make_pair(-d, j));
                        }
                    }
                }
            }
            if(dist[t] == InfCost) break;
            if(!bellmanFord) for(Index i = 0; i < n; i ++) potential[i] += dist[i];
            Flow d = f; Cost distt = 0;
            for(Index v = t; v != s; ) {
                Index u = prev[v]; const Edge &e = g[u][prevEdge[v]];
                d = min(d, e.capacity); distt += e.cost; v = u;
            }
            f -= d; total.first += d * distt; total.second += d;
            for(Index v = t; v != s; v = prev[v]) {
                Edge &e = g[prev[v]][prevEdge[v]];
                e.capacity -= d; g[e.to][e.rev].capacity += d;
            }
        }
        return total;
    }
};


int n, dist[202], adj[202][202];


int main()
{
    ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    int z;
    cin>>z;
// t=1;
    while(z--){

        int m, k;
        cin>>n>>m>>k;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++)
                adj[i][j] = 10000;
            adj[i][i] = 0;
        }

        while(m--){
            int a, b, c;
            cin>>a>>b>>c;
            adj[a][b] = adj[b][a] = min(adj[a][b], c);
        }

        for(int k=1;k<=n;k++)
            for(int i=1;i<=n;i++)
                for(int j=1;j<=n;j++)
                    adj[i][j] = min(adj[i][j], adj[i][k]+adj[k][j]);

            MinimumCostMaximumFlow mcmf;
            mcmf.init(1+k+k+1);
            int s = 0, t = 1+k+k;
            for(int i=1;i<=k;i++)
                mcmf.add(s, i, 1, 0);
            for(int i=n-k+1;i<=n;i++)
                mcmf.add(k+i-(n-k), t, 1, 0);
            for(int i=1;i<=k;i++)
                for(int j=n-k+1;j<=n;j++)
                    mcmf.add(i, k+j-(n-k), 1, adj[i][j]);

            cout<<mcmf.minimumCostMaximumFlow(s, t, MOD, true).ff<<endl;
    }

    return 0;
}







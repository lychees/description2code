#include <bits/stdc++.h>
using namespace std;

#define REPU(i, a, b) for (int i = (a); i < (b); ++i)
#define REPD(i, a, b) for (int i = (a); i > (b); --i)
#define MEM(a, x) memset(a, x, sizeof(a))
#define ALL(a) a.begin(), a.end()
#define UNIQUE(a) a.erase(unique(ALL(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) { return (a < b) ? a : b; }
template<class T> inline T tmax(T a, T b) { return (a > b) ? a : b; }
template<class T> inline void amax(T &a, T b) { if (b > a) a = b; }
template<class T> inline void amin(T &a, T b) { if (b < a) a = b; }
template<class T> inline T tabs(T a) { return (a > 0) ? a : -a; }
template<class T> T gcd(T a, T b) { while (b != 0) { T c = a; a = b; b = c % b; } return a; }

struct UF {
	vector<int> par, rk;
	UF(int n) {
		par.resize(n + 1), rk.assign(n + 1, 0);
		for (int i = 0; i <= n; ++i) {
			par[i] = i;
		}
	}
	int find(int x) {
		if (x != par[x]) par[x] = find(par[x]);
		return par[x];
	}
	bool same(int x, int y) {
		return find(x) == find(y);
	}
	bool unite(int x, int y) {
		x = find(x), y = find(y);
		if (x == y) return false;
		if (rk[x] < rk[y]) par[x] = y;
		else {
			par[y] = x;
			if (rk[x] == rk[y]) rk[x]++;
		}
		return true;
	}
};

struct edge {
	int u, v, w;
};

bool comp(const edge &x, const edge &y) {
	if (x.w != y.w) return x.w < y.w;
	else if (x.u != y.u) return x.u > y.u;
	else return x.v > y.v;
}

ll mst(int n, vector<edge> &e, vector<int> &deg) {
	ll ans = 0;
	UF uf(n);
	sort(e.begin(), e.end(), comp);
	for (int i = 0; i < e.size(); ++i) {
		if (uf.unite(e[i].u, e[i].v)) {
			ans += e[i].w;
			deg[e[i].u]++, deg[e[i].v]++;
		}
	}
	return ans;
}

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int T, n, m, a, b, c;

	cin >> T;
	while (T--) {
		cin >> n >> m;
		vector<edge> e;
		REPU(i, 0, m) {
			cin >> a >> b >> c;
			if (a > b) swap(a, b);
			e.push_back({a, b, c});
		}
		vector<int> deg(n + 1, 0);
		printf("%lld\n", mst(n, e, deg));
		REPU(i, 1, n + 1) printf("%d%c", deg[i], " \n"[i == n]);
	}
	
	return 0;
}

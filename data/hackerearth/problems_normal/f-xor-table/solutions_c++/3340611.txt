#include <bits/stdc++.h>
using namespace std;
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
   cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
   const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
#define si(x) scanf("%d",&x)
#define fori( i , a , b ) for( ll i = a ; i < b ; i++ )
#define ford( i , a , b)  for( ll i = a ; i >= b ; i--)
#define popcount __builtin_popcount
#define mm(c,v) memset( c , 0 , sizeof(c) )
#define all(v) v.begin() , v.end() 
#define ll long long 
#define F first
#define S second
#define pb push_back
#define mp make_pair
typedef pair<ll,ll> PII;
typedef vector<ll> VI;
typedef vector<PII> VPII;
const ll mod = 1000000007;
vector< ll > power;
string rotate( string arr ,  ll k)
{
	string tmp;
	ll n = (ll)arr.length();
	k %= n;
	for( ll i = 0 ; i < n ; i++ )
		tmp.pb( arr[ (n-k+i + n ) % n ] );
	return tmp ;
}
string func( string x , string y )
{
	string ans ;
	for( ll i = 0 ; i < (ll) x.length() ; i++ )
	{
		if( x[i] == y[i] )
			ans.pb('0');
		else ans.pb('1');
	}
	return ans;
}
string fuck( string y , ll x )
{
	return func( y , rotate(y,x) );
}
ll near( ll n )
{
	ll i ; 
	for( i = 0 ;  ; i++ )
	{
		if( power[i] > n )
			break;
	}
	return i-1;
}
string solve( ll n ,ll p ,  string Y )
{
	
	//trace( n , p , Y );
	if( n == 0 )
		return Y;
	ll cnt  = near(  n );
	ll x = power[cnt];
	Y = fuck( Y , p*1LL*x );
	assert( x <= n );
	return solve( n - x ,p ,  Y );
}

int main()
{
	power.pb(1);
	for( ll i = 0 ; i < 64 ; i++ )
		power.pb( power.back()*1LL*2);
	ll t;
	cin >> t;
	while(t--)
	{
		//gaand = 0;
		ll n , m , p , x ;
		string y;
		cin >> n >> m >> p >> x >> y ;
		string ans = solve( n - 1 , p , y ) ;
		if( x ==1  )
		{
			string X;
			while(m--)
				X.push_back('1');
			ans = func( X , ans);
		}
		cout << ans << endl;
	}
}
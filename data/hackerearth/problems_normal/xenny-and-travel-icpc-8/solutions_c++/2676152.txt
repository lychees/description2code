//	Coded by:  samfisher
#include<bits/stdc++.h>
#define ll long long int
#define vii  vector<int>::iterator 
#define vli  vector<ll>::iterator 
#define vi  vector<int> 
#define vl  vector<ll> 
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define MOD 1000000007
#define in cin>>
#define i2(x,y) cin>>x>>y
#define i3(x,y,z) cin>>x>>y>>z
#define os(x) cout<<x<<' '
#define on(x) cout<<x<<endl
#define o2(x,y) cout<<x<<' '<<y<<endl
#define o3(x,y,z) cout<<x<<' '<<y<<' '<<z<<endl
#define pn cout<<endl
#define F first
#define S second
#define for_it(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define op(X) cout<<X.F<<" "<<X.S<<" ";
#define opn(X) cout<<X.F<<" "<<X.S<<endl;
#define SET(X,Y) memset(X,Y,sizeof(X))
using namespace std;
int cost[2][1251][1251];
int type;
int turn;
int number;
int pushed[1251]={0};
int visited[1251]={0};
int dist[1251][2][2];
set< pair<int,int> > cur;
int n;
void reset()
{
	for(int i=0;i<1251;i++)
	{
		pushed[i] = 1000000000;
		visited[i] = 0;
	}
	cur.clear();
}
void traverse()
{
	int i,j,k,a,b,c;
	while(!cur.empty())
	{
		b = (*cur.begin()).F;
		a = (*cur.begin()).S;
		// o3("traverse",a,b);
		if(visited[a] == 1)
		{
			cur.erase(cur.begin());
			continue;
		}
		visited[a] = 1;
		cur.erase(cur.begin());
		dist[a][type][turn] = b;

		for(i=1;i<=n;i++)
		{
			if(i==a)
				continue;
			if(turn	== 0)
				c = b+cost[type][a][i];
			else
				c = b+cost[type][i][a];
			if(c<pushed[i])
			{
				if(pushed[i] != 1000000000)
					cur.erase(mp(pushed[i],i));
				pushed[i] = c;
				cur.insert(mp(pushed[i],i));
			}
		}
	}	
}
int main()
{
	ios_base::sync_with_stdio(false);
	int t,i,j,k,m,a,b,c,U,V;	
	in n;
	for(type = 0;type<2;type++)
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j++)
		{
			in cost[type][i][j];
		}
	}
	i2(U,V);

	type = 0;
	turn = 0;
	reset();
	cur.insert(mp(0,U));
	pushed[U] = 0;
	traverse();

	type = 1;
	turn = 0;
	reset();
	cur.insert(mp(0,U));
	pushed[U] = 0;
	traverse();

	type = 0;
	turn = 1;
	reset();
	cur.insert(mp(0,V));
	pushed[V] = 0;
	traverse();

	type = 1;
	turn = 1;
	reset();
	cur.insert(mp(0,V));
	pushed[V] = 0;
	traverse();
	int ans=10000000,tmp;
	for(i=1;i<=n;i++)
	{
		if(i==U || i == V)
			continue;
	
		tmp = dist[i][0][0] + dist[i][1][1];
		tmp = min(tmp, dist[i][0][1] + dist[i][1][0]);

		ans = min(ans,tmp);
	}
	// for(i=1;i<=n;i++)
	// {
	// 	os(i);os(dist[i][0][0]);o3(dist[i][0][1],dist[i][1][0],dist[i][1][1]);
	// }
	on(ans);
}
#include <iostream>
#include <cstdio>
#include <cmath>
#include <map>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <deque>
#include <string>
#include <set>
#include <limits.h>

#define inp(x) scanf("%d",&x)
#define inp_l(x) scanf("%lld",&x)
#define inp_d(x) scanf("%lf",&x)
#define MOD 1000000007
#define pb push_back
#define mp make_pair

using namespace std;

typedef long long int ll;
typedef vector <int> VI;
typedef vector <long long int> VLL;
typedef pair<int,int> PI;
typedef pair<ll,ll> PLL;

int numOfEven, numOfOdd;

void dfs(int index, vector <int> adj[100000], bool visited[100000], int dist) {
	if(visited[index])
		return;
	visited[index] = true;
	if(dist % 2) {
		numOfOdd++;
	} else {
		numOfEven++;
	}

	int i;
	for(i = 0; i < adj[index].size(); i++) {
		if(!visited[adj[index][i]]) {
			dfs(adj[index][i], adj, visited, dist + 1);
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
	int t;
	cin >> t;
	for(int z = 1; z <= t; z++) {
		int n, i, j, mx = 0, a, b;
		cin >> n;
		bool isPresent[100000], visited[100000];
		vector <int> adj[100000];

		for(i = 0; i < 100000; i++) {
			isPresent[i] = false;
			visited[i] = false;
			adj[i].clear();
		}

		for(i = 0; i < n; i++) {
			cin >> a >> b;
			mx = max(mx, a);
			mx = max(mx, b);
			isPresent[a] = true;
			isPresent[b] = true;
			adj[a].pb(b);
			adj[b].pb(a);
		}

		int ans = 0;
		for(i = 0; i < mx; i++) {
			if(isPresent[i] && !visited[i]) {
				numOfEven = numOfOdd = 0;
				dfs(i, adj, visited, 0);
				ans += max(numOfEven, numOfOdd);
			}
		}
		cout << "Case " << z << ": " << ans << endl;
	}
	return 0;
}


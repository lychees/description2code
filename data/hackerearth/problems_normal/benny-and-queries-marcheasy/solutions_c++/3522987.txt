//      go_on
#include <bits/stdc++.h>
using namespace std;


//      LOOPS AND MEM
#define mz(a) memset(a,0,sizeof(a))
#define md(a,m,n) memset(a,0,sizeof(a[0][0])*m*n);
#define mmin1(a) memset(a,-1,sizeof(a))
#define minf(a) memset(a,MEMSET_INF,sizeof(a));
#define f(i,a,n) for(int i=a;i<=n;++i)
#define fs(i,a,n) for(int i=a;i<n;++i)
#define fl(i,n,a) for(int i=n;i>=a;--i)


//       I/O
#define i(n) cin>>n
#define is(n) scanf("%s",n)
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define o(n) cout<<n
#define p(n) printf("%d",n)
#define pl(n) printf("%lld",n)
#define os cout<<" "
#define on cout<<"\n"


//       CONTAINERS
typedef vector <int> vi;
typedef pair<int, int> pii;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(a)  a.begin(),a.end()
//#define fv(i,v) for(auto i = v.begin();i !=v.end(); ++i)


//        DEF AND INIT
#define M 1000000009
#define ll long long int
#define eps 1e-15
#define N 500005
//vector<pair<int, pii> >v;
//map<string,int> MP;
//map<string,int>::iterator it;
int trie[N*30][2];
vector<int> vec[N*30];
int num;

void init_trie()
{
    num=1;
    trie[1][0]=trie[1][1]=0;
}

void insert_trie(int x,int i)
{
    for(int bit=30,ind=1;bit>=0;--bit)
    {
        int dir=0;
        if((x&(1<<bit)))   dir=1;
        if(!trie[ind][dir])
        {
            ++num;
            trie[ind][dir]=num;
            trie[num][0]=trie[num][1]=0;
        }
        ind=trie[ind][dir];
        vec[ind].pb(i);
    }
}

int get(int x,int u,int v)
{
    int ans=0;
    for(int bit=30,ind=1;bit>=0;--bit)
    {
        int dir=0;
        if((x&(1<<bit)))   dir=1;
        dir=1-dir;
        if(!trie[ind][dir])
        {
            ind=trie[ind][1-dir];
            continue;
        }
        int id=trie[ind][dir];
        int indx=lower_bound(all(vec[id]),u)-vec[id].begin();
        if(indx==vec[id].size() || vec[id][indx]>v)
        {
            ind=trie[ind][1-dir];
        }
        else
        {
            ans|=(1<<bit);
            ind=id;
        }
    }
    return ans;
}
int main()
{
  /*  freopen("in.txt", "r", stdin);
    freopen("out.txt" , "w" , stdout);*/
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    int q,n,u,v,x,ans;
    i(n);i(q);
    f(i,0,n-1)
    {
        i(x);
        insert_trie(x,i);
    }
    while(q--)
    {
        i(u);i(v);i(x);
        ans=get(x,u-1,v-1);
        o(ans);on;
    }
}

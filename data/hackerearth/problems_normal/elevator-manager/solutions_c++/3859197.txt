#include <bits/stdc++.h>
#define mode 1000000007;
using namespace std;


long long mult(long long a, long long b, long long mod)
    {
    	__int128 res = a;
    	res *= b;
    	res %= mod;
    	a = res;
    	return a;
    }
    long long modulo(long long a, long long b, long long c){
    	long long x = 1, y = a; 
    	while (b > 0){
    		if (b % 2 == 1){
    			x = mult(x, y, c);
    		}
    		y = mult(y, y, c);
    		b /= 2;
    	}
    	return x%c;
    }
    bool Miller(long long p, int iteration){
    	if (p<2){
    		return false;
    	}
    	if (p != 2 && p % 2 == 0){
    		return false;
    	}
    	long long s = p - 1;
    	while (s % 2 == 0){
    		s /= 2;
    	}
    	for (int i = 0; i<iteration; i++){
    		long long a = rand() % (p - 1) + 1, temp = s;
    		long long mod = modulo(a, temp, p);
    		while (temp != p - 1 && mod != 1 && mod != p - 1){
    			mod = mult(mod, mod, p);
    			temp *= 2;
    		}
    		if (mod != p - 1 && temp % 2 == 0){
    			return false;
    		}
    	}
    	return true;
    }
    bool isPrime(long long x)
    {
    	return Miller(x, 15);
    }
    

int main()
{   
	long long int n,q;
	cin>>n>>q;
	
	long long int count = 0;
	long long int distance = 0;
	long long int curr = 1;
	for(int i = 1; i<= q; i++)
	{	long long int f,k;
		int t;
		cin>>t>>f>>k;
		if(t==1)
		{ 
		    if(isPrime(f+k))
			{
				distance  = (distance + abs(curr-f))%mode;
				curr=f;
				count = count + k;
				
			}
		}
		
		else if(t==2)
		{
			long long int test = sqrt(f+k+0.5);
			if(test*test==(f+k))
			{   
				
					distance  = (distance + abs(curr-f))%mode;
					curr=f;
					count = count - k;
				
				
			}
			
		}
		
		
	}

	cout<<distance%mode;
	cout<<" "<<count;
    return 0;
}

#include<iostream>
#include<vector>
using namespace std;
vector<int> *v,*vr; 
bool *vis;
int *s,top=-1,u=1;
static int t=0;
void dfs(int);
void dfs1(int);
void push(int);
int pop();
int minm=65536,number=0;
int main()
{
	int n;
	int m;
	cin>>n;
	cin>>m;
	v=new vector<int>[n+1];
	vr=new vector<int>[n+1];
	int x,y;
	for(int i=0;i<m;i++)
	{
	cin>>x;
	cin>>y;
	v[x].push_back(y);	
	vr[y].push_back(x);
	}
	int c=0;
	for(int i=1;i<n+1;i++)
	{
		if(v[i].size()==0)
		{
			c=i;
			break;
		}
	}
	if(c!=0)
	{
	cout<<"1";	
	}
	else
	{
	vis=new bool[n+1];
	s=new int[n+1];
	for(int i=1;i<n+1;i++)
	{
		vis[i]=0;
	}
	dfs(1);
	for(int i=1;i<n+1;i++)
	{
	if(vis[i]==0)
	dfs(i);
	}
	for(int i=1;i<n+1;i++)
	vis[i]=0;
	while(top!=-1)
	{
		number=0;
		t=1;
		int y=pop();
		if(vis[y]==0)
		dfs1(y);
		if(number<minm && number>1)
		minm=number;
		u++;
	}
	
cout<<minm;
}
}
void dfs(int x)
{
	if(vis[x]==0)
	vis[x]=1;
    
	for(int i=0;i<v[x].size();i++)
	{
		if(vis[v[x][i]]==0)
		dfs(v[x][i]);
	}
	push(x);
}
void dfs1(int x)
{
	if(vis[x]==0)
{	vis[x]=1;
    number++;
}
	for(int i=0;i<vr[x].size();i++)
	{
		if(vis[vr[x][i]]==0)
		dfs1(vr[x][i]);
	}
	
}
void push(int n)
{
	top=top+1;
	s[top]=n;
}
int pop()
{
	top=top-1;
	return s[top+1];
}
#include <bits/stdc++.h>

using namespace std;

#define boost ios::sync_with_stdio(true); cin.tie(0); cout.tie(0);
#define pii pair<int,int>
#define vpii vector<pair<int,int> >
#define vvpii vector<vector<pair<int,int> > >
#define vi vector<int>
#define vii vector<vector<int> >
#define pb push_back 
#define vl vector<long long>
#define ll long long
#define mp make_pair 
#define onebit(n) __builtin_popcount(n) //get number of one-bits in the bit representation of n
#define rep(i,n) for(i=0;i<n;i++)

bool ispossible(vl &a,ll c)
{
	ll prev=max(1ll,a[0]-c);
	int i=0;
	for(i=1;i<a.size();i++)
	{
//		if(c==7)
//			cout<<a[i]<<" yo "<<prev<<endl;
		if(a[i]+c>prev)
			prev=max(a[i]-c,prev+1);
		else
			return false;
	}
	
	return true;
}

ll binarysearch(vl &a,ll low,ll high)
{
//	cout<<"low="<<low<<" high="<<high<<endl;;
	if(low==high)
		return low;
	ll mid=(low+high)/2;
	if(low==mid)//two elements 
	{
		if(ispossible(a,low))
			return low;
		else
			return high;
	}
	if(ispossible(a,mid)) //go to left half
		return binarysearch(a,low,mid);
	else
		return binarysearch(a,mid+1,high);
}

int main()
{
	boost;
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		int i;
		vl a(n);
		for(i=0;i<n;i++)
			cin>>a[i];
		cout<<binarysearch(a,0,1000000003)<<endl;
	}

}
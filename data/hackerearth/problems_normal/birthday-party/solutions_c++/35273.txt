#include<iostream>
#include<vector>
#include<stack>
#include<queue>
#include<map>
#include<set>
#include<cstring>
#include<cstdlib>
#include<cmath>
using namespace std;

vector<int> valid;
int dp[1001][1001];
bool find(int num,int index)
{
 
  if(num<0)
	return 0;
  if(num==0)
  {

	return 1;
  }
  if(index>=valid.size())
    return 0;
  if(dp[num][index]!=-1)
	 return dp[num][index];
  
  
 
  bool f=0;
  f=find(num-valid[index],index+1)||find(num,index+1);

  dp[num][index]=f;
  return f;
}
int main()
{
  int t,p,n,m,num;
 
  cin>>t;
  while(t--)
  {
    int count=0;
     cin>>p>>m;
     int mp[1001];
     vector<int> distinct_number;
      valid.clear();
	memset(dp,-1,sizeof(dp));
	memset(mp,0,sizeof(mp));
     for(int i=1;i<=m;i++)
	{
		cin>>num;
		valid.push_back(num);
	}
	for(int i=1;i<=p;i++)
	{
		cin>>num;
		mp[num]++;
	}
	for(int i=1;i<=1000;i++)
	      
         {
                            if(mp[i])
                              distinct_number.push_back(mp[i]);
         }
	
	for(int i=0;i<distinct_number.size();i++)
	{
		if(find(distinct_number[i],0))
			count++;
	}
       cout<<count<<endl;
     
  }
}

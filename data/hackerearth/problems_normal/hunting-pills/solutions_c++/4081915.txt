#include<iostream>
#include<stack>
#include<vector>
using namespace std;
void dfs(int graph[][102],int vis[],int src,int n,stack<int> &s)
{
	if(vis[src]==1)
		return ;
	vis[src]=1;
	for(int i=0;i<n;i++)
	{
		if(graph[src][i]==1 && vis[i]==-1)
			dfs(graph,vis,i,n,s);
	}
	s.push(src);
}

void dfs2(int graph[][102],int vis[],int src,int n,vector<int> &vec)
{
	if(vis[src]==1)
		return ;
	vis[src]=1;
	vec.push_back(src);
	for(int i=0;i<n;i++)
	{
		if(graph[src][i]==1 && vis[i]==-1)
			dfs2(graph,vis,i,n,vec);
	}

}

int main()
{
	int n,t,m,a,b,pill[101];
	cin>>t;
	while(t--)
	{
		stack<int> s;
			int graph[101][102],vis[102],graph1[101][102];
		vector<int> vec[102];
		cin>>n>>m;
		for(int i=0;i<n;i++)
			cin>>pill[i];
		for(int i=0;i<101;i++)
			for(int j=0;j<101;j++)
			{
				vis[i]=-1;
				graph[i][j]=-1;graph1[i][j]=-1;
			}
		for(int i=0;i<m;i++)
			{
				cin>>a>>b;
				graph[a][b]=1;
			}
		for(int i=0;i<n;i++)
			if(vis[i]==-1)
				dfs(graph,vis,i,n,s);
		
		for(int i=0;i<n;i++)
			for(int j=0;j<n;j++)
				graph1[j][i]=graph[i][j];
				
	
		for(int i=0;i<n;i++)
			vis[i]=-1;
		int k=0;
		while(!s.empty())
		{
			int x=s.top();
			s.pop();
			if(vis[x]==-1)
			dfs2(graph1,vis,x,n,vec[k]);
			k++;
		}
		long tot=0;
		for(int i=0;i<k;i++)
		{
			long curr=0;
			for(int j=0;j<vec[i].size();j++)
			{
				curr+=pill[vec[i][j]];
			}
			tot=max(tot,curr);
		}
		cout<<tot<<endl;
	}
	return 0;
}
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;

#define REP(i, a, b) for(int i=a; i <= int(b); i++) 
#define TRvi(c, it) for(vi::iterator it = c.begin(); it != c.end(); it++)
#define TRvii(c, it) for(vii:iterator it = c.begin(); it != c.end(); it++)
#define TRmsi(c, it) for(msi::iterator it = c.begin(); it != c.end(); it++)

#define MEMSET_INF 127
#define MEMSET_HALF_INF 63
//memset(dist, MEMSET_INF, sizeof dist); // useful to initialize shortest path distance
//memset(dp_memo, -1, sizeof dp_memo); // usefull to initialize DP memoization table 
//memset(arr, 0, sizeof arr); //useful to clear array of integers

void build(int node, int s, int e, int a[], int t[])
{
    if(s==e)
        t[node] = a[s];
    else
    {
        int mid = (s+e)/2;
        build(2*node, s, mid, a, t);
        build(2*node+1, mid+1, e, a, t);
        t[node] = t[2*node] + t[2*node+1];
    }
}

void update(int node, int s, int e, int idx, int x, int a[], int t[])
{
    if(s==e)
    {
        t[node] = t[node]-a[idx]+x;
        a[idx] = x;
    }
    else
    {
        int mid = (s+e)/2;
        if(idx>=s && idx<=mid)
            update(2*node, s, mid, idx, x, a, t);
        else
            update(2*node+1, mid+1, e, idx, x, a, t);
        t[node] = t[node*2] + t[node*2+1];
    }
}

int query(int node, int s, int e,int l, int r, int t[])
{
    if(r<s || l>e)
        return 0;
    else if(l<=s && e<=r)
        return t[node];
    int mid = (s+e)/2;
    int p1 = query(2*node, s, mid, l, r, t);
    int p2 = query(2*node+1, mid+1, e, l, r, t);
    return (p1+p2);
}

int main()
{
    int n;
    scanf("%d",&n);
    int a[n+1];
    REP(i,1,n)
    {
        int x;
        scanf("%d",&x);
        a[i]=x%2==0?1:0;
    }
    int h = ceil(log2(n));
    int sz = pow(2,h+1);
    int t[sz+1];
    memset(t, -1, sizeof t);
    build(1,1,n,a,t);
    int q;
    scanf("%d",&q);
    REP(i,1,q)
    {
        int m;
        scanf("%d",&m);
        if(m==0)
        {
            int idx,x;
            scanf("%d%d",&idx,&x);
            update(1,1,n,idx,x%2==0?1:0,a,t);
        }
        else if(m==1)
        {
            int l,r;
            scanf("%d%d",&l,&r);
            ll ans = query(1,1,n,l, r, t);
            cout << ans << endl;
        }
        else
        {
            int l,r;
            scanf("%d%d",&l,&r);
            ll ans = query(1,1,n,l,r,t);
            cout << r-l+(r!=l?1:0)-ans << endl;
        }
    }
    return 0;
}

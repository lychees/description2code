/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <functional>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



using namespace std;

struct STree {
	explicit STree(int n) {
		len = n;
		coef = 0;
		free = 0;
		if (n > 1) {
			l = new STree(n / 2);
			r = new STree(n - n / 2);
		} else {
			l = r = nullptr;
		}
	}

	int64_t get(int x, int64_t point) const {
		if (len == 1) {
			return coef * point + free;
		}
		if (x < l->len) {
			return l->get(x, point) + coef * point + free;
		} else {
			return r->get(x - len / 2, point) + coef * point + free;
		}
	}

	STree* upd(int L, int R, int64_t c, int64_t f) {
		if (L >= len || R <= 0) {
			return this;
		}
		if (L <= 0 && R >= len) {
			return new STree(len, coef + c, free + f, l, r);
		}
		auto ll = l->upd(L, R, c, f);
		auto rr = r->upd(L - len / 2, R - len / 2, c, f);
		return new STree(len, coef, free, ll, rr);
	}

	STree(int len, int64_t coef, int64_t free, STree* l, STree* r):
			len(len), coef(coef), free(free), l(l), r(r) {
	}

	int len;
	int64_t coef, free;
	STree* l;
	STree* r;
};

class MakeN00blandGreatAgain {
public:
	void solve(std::istream& in, std::ostream& out) {
		//int setrlimit(int resource, const struct rlimit *rlim);
		//rlimit r;
		//r.rlim_cur = RLIM_INFINITY;
		//r.rlim_max = RLIM_INFINITY;
		//setrlimit(RLIMIT_STACK, &r);
		int n, m;
		in >> n >> m;
		vector<vector<int>> children(n);
		for (int i: range(1, n)) {
			int p;
			in >> p;
			--p;
			children[p].push_back(i);
		}

		vector<vector<int>> man2v(m);
		for (int i: range(n)) {
			int a;
			in >> a;
			--a;
			man2v[a].push_back(i);
		}

		vector<int64_t> threshold(m);
		for (int i: range(m)) {
			in >> threshold[i];
		}

		vector<int> beg(n);
		vector<int> en(n);
		vector<int> dep(n);

		int timer = 0;

		function<void(int)> dfs = [&](int v) {
			beg[v] = timer;
			++timer;
			for (int to: children[v]) {
				dep[to] = dep[v] + 1;
				dfs(to);
			}
			en[v] = timer;
		};

		dfs(0);
		int q;
		in >> q;

		vector<STree*> versions(q + 1);
		versions[0] = new STree(n);

		for (int i: range(q)) {
			int64_t f, x, d;
			in >> f >> x >> d;
			--f;
			versions[i + 1] = versions[i]->upd(beg[f], en[f], d, x - dep[f] * d);
		}

		for (int man: range(m)) {
			int64_t l = 0, r = q + 1;
			while (r - l > 1) {
				int64_t c = (l + r) / 2;
				int64_t got = 0;
				for (int v: man2v[man]) {
					got += versions[c]->get(beg[v], dep[v]);
				}

				if (got >= threshold[man]) {
					r = c;
				} else {
					l = c;
				}
			}
			if (r == q + 1) {
				out << "rekt";
			} else {
				out << r;
			}
			out << "\n";
		}
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	MakeN00blandGreatAgain solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}

#include <bits/stdc++.h>

using namespace std;

const int SIZE = 1<<21;
const unsigned long long B1 = 131, B2 = 137;

struct rolling_hash {
	unsigned long long h1,h2;
	void initialize() {
		h1=0llu;
		h2=0llu;
	}
	void append(char a) {
		h1=h1*B1+a-'a'+1;
		h2=h2*B2+a-'a'+1;
	}
	bool operator <(const rolling_hash &a) const {
		if(h1<a.h1) return true;
		if(h1>a.h1) return false;
		return h2<a.h2;
	}
	bool operator ==(const rolling_hash &a) const {
		return (h1==a.h1 && h2==a.h2);
	}
};

int n,q;
char a[SIZE];
unsigned long long pow1[SIZE],pow2[SIZE];
rolling_hash ph[SIZE];
int best_idx[SIZE];

rolling_hash get_hash(int from, int to) {
	rolling_hash h1,h2,ans;
	h1=ph[to];
	h2=ph[from-1];
	h2.h1*=pow1[to-from+1];
	h2.h2*=pow2[to-from+1];
	ans.h1=h1.h1-h2.h1;
	ans.h2=h1.h2-h2.h2;
	return ans;
}

bool compare(int x, int y) {
	int left,right,middle;
	if(get_hash(x,x+n-1)==get_hash(y,y+n-1)) return x<y;
	left=0;
	right=n;
	while(right-left>1) {
		middle=(left+right)>>1;
		if(get_hash(x,x+middle-1)==get_hash(y,y+middle-1)) left=middle;
		else right=middle;
	}
	return a[x+left]<a[y+left];
}

int main() {
	int i,k;
	rolling_hash h;
	
	scanf("%d", &n);
	scanf("%s", a+1);
	pow1[0]=1;
	pow2[0]=1;
	for(i=1;i<SIZE;i++) pow1[i]=pow1[i-1]*B1,pow2[i]=pow2[i-1]*B2;
	for(i=1;i<=n;i++) {
		a[i+n]=a[i];
	}
	h.initialize();
	for(i=1;i<=n+n;i++) {
		h.append(a[i]);
		ph[i]=h;
	}
	
	best_idx[1]=1;
	for(i=2;i<=n;i++) best_idx[i]=((compare(i,best_idx[i-1])==true) ? i : best_idx[i-1]);
	
	scanf("%d", &q);
	for(i=1;i<=q;i++) {
		scanf("%d", &k);
		printf("%d\n", best_idx[k+1]-1);
	}
	
	return 0;
}

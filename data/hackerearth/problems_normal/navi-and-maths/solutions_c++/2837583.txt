#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll mod = (1000000007LL);
ll power(ll a, ll n, ll b){
	ll p = 1LL;
	ll z = a;
	while (n>0){
		while ((n%2)==0){
			z = ((z%b)*(z%b))%b;
			n/=2;
		}
		n--;
		p = ((p%b)*(z%b))%b;
	}
	return p;
}

ll INV(ll a){
	return power(a,mod-2, mod);	
}

int Solve(){
	ll n;
	cin>>n;
	vector<ll> v;
	ll t;
	for (int i=0; i<n; i++){
		cin>>t;
		v.push_back(t);
	}
	vector<int> mask;
	ll ans = 0;
	for (int i=0; i<n; i++){
		mask.clear();
		for (int j=0; j<=i; j++){
			mask.push_back(1);
		}
		for (int j=i+1; j<n; j++){
			mask.push_back(0);
		}
		sort(mask.begin(), mask.end());
		
		do {
			ll num = 1LL;
			ll den = 0LL;
			for (int k=0; k<n; k++){
				if (mask[k]){
					num = (num * v[k])%mod;
					den = (den + v[k])%mod;
				}
			}
			
			ll cand = (num * INV(den))%mod;
			ans = max(ans, cand);
		}while (next_permutation(mask.begin(), mask.end()));
	}
	cout<<ans<<endl;
}

int main(){
	int t;
	cin>>t;
	for (int i=1; i<=t; i++){
		cout<<"Case #"<<i<<": "; 
		Solve();
	}
}
#include <iostream>

#define INF 1e18

using namespace std;

long long p[100], mark[100], n, l, r, ans;

void backtrack(long long index, long long no, long long limit, long long R){
	if(index == n){
		if(no != limit) return;
		long long count = 0, val = 1LL;
		for(int i = 0;i < n;i++){
			if(mark[i] == 1) val = (long long)val * (long long)p[i];
			if(val > R || val <= 0) return;
		}
		ans += (long long)R/(long long)val;
		return;
	}
	backtrack(index+1, no, limit, R);
	mark[index] = 1;
	backtrack(index+1, no+1, limit, R);
	mark[index] = 0;	
}

long long getVal(long long R){
	long long finalAns = 0;
	long long check = 1;
	for(long long i = 0;i < n;i++){
		ans = 0;
		backtrack(0, 0, i+1, R);
		if(check) finalAns += ans;
		else finalAns -= ans;
		check = check ^ 1;
	}
	return finalAns;
}

int main(){
	int t;cin >> t;
	while(t--){
		cin >> n >> l >> r;
		ans = 0;
		for(int i = 0;i < n;i++) cin >> p[i];
		long long ansF = getVal(r) - getVal(l-1);
		cout << ansF << endl;
		
		/*int anscheck = 0;
		for(int i = l;i<=r;i++){
			for(int j = 0;j < n;j++){
				if(i % p[j] == 0){ anscheck++; break; }
			}
		}
		cout << anscheck << endl;*/
	}
	return 0;
}
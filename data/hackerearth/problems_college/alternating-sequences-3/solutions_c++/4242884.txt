/* Dynamic Programming C/C++ implementation of LIS problem */
#include<iostream>
#include<stdio.h>
#include<stdlib.h>

using namespace std;
 int b[5000][5000];
/* lis() returns the length of the longest increasing
  subsequence in arr[] of size n */
int sign(int n)
{
    if(n>0)
    {
        return 1;
    }
    if(n<0)
    {
        return -1;
    }

}

int mod(int n)
{
    if(n>0)
    {
        return n;
    }
    if(n<0)
    {
        return -1*n;
    }

}

int max1(int a, int b){
    if(a>b){
        return a;
    }
    else {
        return b;

    }

}
int lis( int arr[], int n )
{
    int *lis, i, j, max = 0;
    lis = (int*) malloc ( sizeof( int ) * n );
    int k=0;


    /* Initialize LIS values for all indexes */
    for (i = 0; i < n; i++ )
       {
          lis[i] = 1;
       }



    /* Compute optimized LIS values in bottom up manner */
    for (i = 0; i < n; i++ )
    {



        for (j = 0; j < i; j++ )
        {

            if ( mod(arr[i]) > mod(arr[j]) )
            {
                if(sign(arr[i])*sign(arr[j])==-1){
                    lis[i] = max1(lis[i],(lis[j]+ 1));
                }
            }


        }


    }



    /* Pick maximum of all LIS values */
    for (int i = 0; i < n; i++ )
    {
         if(lis[i]>max){
            max= lis[i];
         }

    }
    /* Free memory to avoid memory leak */
    free(lis);

    return max;
}

/* Driver program to test above function */
int main()
{
    int n;

    int arr[5000];
    cin>>n;
    int i;
    for(i=0; i<n; i++)
    {
        cin>>arr[i];
    }
    cout<<lis( arr, n ) ;
    return 0;
}

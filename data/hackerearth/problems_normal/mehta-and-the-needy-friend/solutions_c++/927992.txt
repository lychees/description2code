#include <iostream>
#include <string>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#define lli long long
using namespace std;
string s;
int n;
int pre[] = {0,0,1,2,0,4,3,8,1,0,5};
bool vis[22][1<<4];
long long dp[22][1<<4];
/*
template<typename T>
inline void fi(T *a)
{
 register char c=0;
 while (c<33) c=getchar_unlocked();
 *a=0;
 int tmp = 0;
 while (c>33)
 {
     if ( c == 45 ) tmp = 1;
     else *a=*a*10+c-'0';
     c=getchar_unlocked();
 }
 if ( tmp == 1 ) *a = 0-(*a);
}
*/
long long cal(int idx, int mask)
{
     if ( idx == 0 ) {
          if ( !mask ) return 1;
          return 0;
     }
     if ( vis[idx][mask] ) return dp[idx][mask];
     vis[idx][mask] = true;
     long long ans = 0;
     for ( int i = 1; i <= 9; i++ ) ans += cal(idx-1, mask^pre[i]);
     dp[idx][mask] = ans;
     return ans;
}
long long f(int idx, int tight, int mask, int flag)
{
     if ( idx == n ) {
          if ( !mask ) return 1;
          return 0;
     }
     long long ans = 0;
     if ( flag == 1 ) {
        if ( tight == 0 ) return cal(n-idx,mask);
        for ( int i = 1; i <= s[idx]-49; i++ ) ans += f(idx+1, 0, mask^pre[i], flag);
        if ( s[idx] != '0' ) ans += f(idx+1, 1, mask^pre[s[idx]-48], flag);
     }
     else {
        ans += f(idx+1,0,mask,flag);
        ans += f(idx,tight,mask,1);
     }
     return ans;
}
long long get(long long X)
{
     stringstream ss;
     ss.clear();
     ss << X;
     s = ss.str();
     n = (int)s.size();
     long long ans = f(0,1,0,0);
     return ans;
}
int main()
{
    int t;
    long long A,B,K,L,R,M,ans;
   // fi(&t);
    scanf("%d", &t);
    while ( t-- ) {
       //   fi(&A), fi(&B), fi(&K);
          scanf("%lld%lld%lld", &A, &B, &K);
          L = A, R = B;
          long long init = get(A-1);
          ans = -1;
          while ( L <= R ) {
                M = (L+R)>>1;
                long long val = get(M) - init;
                if ( val >= K ) {
                   if ( val == K ) ans = M;
                   R = M-1;
                }
                else L = M+1;
          }
          printf("%lld\n", ans);
    }
    return 0;
}

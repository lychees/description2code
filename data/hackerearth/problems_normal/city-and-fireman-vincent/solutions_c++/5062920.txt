#include<bits/stdc++.h>
using namespace std;
int arr[1000006];
int size[1000006];
void initialize(int n)
{
    for(int i=1;i<=n;i++)
    {
        arr[i]=i;
        size[i]=1;
    }
}
int root(int n)
{
    while(n!=arr[n])
    {
        arr[n]=arr[arr[n]];
        n=arr[n];
    }
    return n;
}
bool find(int a,int b)
{
    if(root(a)==root(b))
    {
        return true;
    }
    else
    {
        return false;
    }
}
void unionf(int a,int b)
{
    int roota=root(a);
    int rootb=root(b);
    if(size[roota]<=size[rootb])
    {
        arr[roota]=arr[rootb];
        size[rootb]+=size[roota];
    }
    else
    {
        arr[roota]=arr[rootb];
        size[rootb]+=size[roota];
    }
}
int main(void)
{
    int n;cin>>n;
    initialize(n);int ar[n+1];
    for(int i=1;i<=n;i++)
    {
    	cin>>ar[i];
    }
    int k;cin>>k;
    while(k--)
    {
        int a,b;cin>>a;cin>>b;
        unionf(a,b);
    }
    set <int> s;vector<int> v;
    for(int i=1;i<=n;i++)
    {
    	int temp=root(arr[i]);
        s.insert(temp);v.push_back(temp);
    }
    int MIN=0;
    /*for(int i=0;i<n;i++)
    {
    	cout<<v[i]<<" ";
    }
    cout<<endl;*/
    set<int>::iterator it;
    vector<int>min;
    for(it=s.begin();it!=s.end();it++)
    {	
    	int temp=999999;
    	for(int i=1;i<=n;i++)
    	{
    		if(v[i-1]==*it)
    		{
    			if(ar[i]<temp)
    			temp=ar[i];
    		}
    	}
    	min.push_back(temp);
    }
    int ans=1;k=0;
    for(it=s.begin();it!=s.end();it++)
    {	
    	int mins=min[k];
    	int sum=0;
    	for(int i=1;i<=n;i++)
    	{
    		if(*it==v[i-1] && ar[i]==mins)
    		sum++;
    	}
    	k++;
    	ans=(ans*sum)%1000000007;
    }
    cout<<ans<<endl;
    return 0;
}
#include<sstream>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<numeric>
#include<functional>
#include<algorithm>
#include<bitset>
using namespace std;
#define INF (1<<29)
#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define all(v) v.begin(),v.end()
#define uniq(v) v.erase(unique(all(v)),v.end())
#define indexOf(v,x) (find(all(v),x)-v.begin())






int dp[2][51][128];
int(*cur)[128];
int(*nxt)[128];

int main() {
	int t;
	cin >> t;
	rep(i, t) {
		int c, n1, n5, n10;
		cin >> c >> n1 >> n5 >> n10;
		if (n1 + n5 * 5 + n10 * 10<c * 8) {
			cout << -1 << endl;
			continue;
		}
		cur = dp[0]; nxt = dp[1];
		fill(cur[0],cur[51],INF);
		cur[n10][n5] = 0;
		int ans = c * 8;
		rep(_,c){
			fill(nxt[0], nxt[51], INF);
			rep(i, n10 + 1) {
				rep(j, n5 + 10) {
					int v = cur[i][j];
					if (v == INF)continue;
					ans = min(ans,v+(c-_)*8);
					if (i) {
						nxt[i - 1][j] = min(nxt[i - 1][j], v + 1);
						nxt[i - 1][j + 1] = min(nxt[i - 1][j + 1], v + 4);
					}
					if (j >= 2) {
						nxt[i][j - 2] = min(nxt[i][j - 2], v + 2);
					}
					if (j >= 1) {
						nxt[i][j - 1] = min(nxt[i][j - 1], v + 4);
					}
				}
			}
			swap(cur, nxt);
		}
		rep(i, n10 + 1) 
			rep(j, n5 + 10) ans = min(ans, cur[i][j]);
		cout << ans << endl;

	}
	return 0;
}


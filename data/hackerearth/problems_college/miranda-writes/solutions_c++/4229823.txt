#include<bits/stdc++.h>
using namespace std;
vector<pair<int,long long int> >  adj[100001];
static long long dp[17][(1<<15)],dist[20][20],city[21];
int n,m,k;
class cmp{
public:
	bool operator() (pair<int,long long int> a,pair<int,long long int> b){
		return (a.second>b.second);
	}
};
long long calc_dist(int s,int d){
	priority_queue<pair<int,long long int>, vector<pair<int,long long int> > ,cmp > q;
	q.push(make_pair(s,0ll));
	bool v[401];
	memset(v,false,sizeof(v));
	while(!q.empty()){
		pair<int,long long int> temp = q.top();
		q.pop();
		if(v[temp.first])
			continue;
		v[temp.first] = true;
		if(temp.first==d){
			return temp.second;
		}
		for(int i=0;i<adj[temp.first].size();i++){
			if(!v[adj[temp.first][i].first]){
				q.push(make_pair(adj[temp.first][i].first,adj[temp.first][i].second+temp.second));
			}
		}
	}
	assert(false);
	return ((long long)1e12);
}
long long solve(int cur,int mask){
	if(mask==((1<<k)-1)){
	//	printf("%d\n",cur);
		return dist[cur][k+1];
	}
	if(dp[cur][mask]!=0)
		return dp[cur][mask];
	long long  ans = INT_MAX;
 	for(int i=0;i<k;i++){
 		if((mask>>i)&1){
 			
 		} else {
 			ans = min(ans,solve(i+1,mask|(1<<i))+dist[cur][i+1]) ;
 		}
 	}
 	//printf("%d %lld\n",cur,ans);
 	dp[cur][mask] = ans;
 	return ans;
}
int main(){
	scanf("%d %d %d",&n,&m,&k);
	for(int i=0;i<m;i++){
		int a,b;
		long long c;
		scanf("%d %d %lld",&a,&b,&c);
		adj[a].push_back(make_pair(b,c));
		adj[b].push_back(make_pair(a,c));
	}
	int mask = 0;
	for(int i=0;i<k;i++){
		scanf("%lld",&city[i]);
		if(city[i]==1)
			mask|=(1<<i);
	}
	for(int i=1;i<=k;i++){
		for(int j=i+1;j<=k;j++){
			dist[i][j] = dist[j][i] = calc_dist(city[i-1],city[j-1]);
		}
	}
	for(int i=1;i<=k;i++){
		dist[0][i] = dist[i][0] = calc_dist(1,city[i-1]);
	}
	for(int i=1;i<=k;i++){
		dist[k+1][i] = dist[i][k+1] = calc_dist(n,city[i-1]);
	//	printf("Main%d %d %d\n",dist[i][k+1],n,city[i-1]);
	}
	dist[0][k+1] = dist[k+1][0] = calc_dist(1,n);
	if(k==0){
		printf("%lld\n",dist[0][k+1]);
		return 0;
	}
	//printf("%lld\n",dist[0][k+1]);
	assert(mask==0);
	printf("%lld\n",solve(0,mask));
	return 0;
}
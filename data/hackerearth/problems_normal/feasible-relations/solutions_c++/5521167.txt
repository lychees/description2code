#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef vector <vector <int> > graph;

void bfs (graph& g, int st, vector <int>& comp, int ind) {
	queue <int> q;
	q.push(st);
	comp[st] = ind;
	while (!q.empty()) {
		int t = q.front();
		q.pop();
		for (int i = 0; i < g[t].size(); i++) {
			int x = g[t][i];
			if (comp[x] < 0) {
				comp[x] = ind;
				q.push(x);
			}
		}
	}
	return;
}

void getComp (graph& g, vector <int>& comp) {
	int n = g.size();
	for (int i = 0; i < n; i++) {
		if (comp[i] < 0) {
			bfs (g, i, comp, i);
		}
	}
	return;
}
int main() {
	int test;
	cin >> test;
	while (test--) {
		int n,m;
		cin >> n >> m;
		graph g(n), neg(n);
		for (int i = 0; i < m; i++) {
			int a,b;
			char c;
			cin >> a;
			a--;
			cin >> c;
			if (c == '!') {
				cin >> c >> b;
				b--;
				neg[a].push_back (b);
				neg[b].push_back (a);
			} else {
				cin >> b;
				b--;
				g[a].push_back (b);
				g[b].push_back (a);
			}
		}
		vector <int> comp (n, -1);
		getComp (g, comp);
		bool flag = true;
		for (int i = 0; i < n && flag; i++) {
			for (int j = 0; j < neg[i].size() && flag; j++) {
				if (comp [neg[i][j]] == comp[i]) {
					flag = false;
					break;
				}
			}
		}
		cout << (flag ? "YES" : "NO") << "\n";
	}
	return 0;
}
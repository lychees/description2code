#include <bits/stdc++.h>
using namespace std;

#define rep1(i, begin, end) for (__typeof(begin) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define rep2(i, begin, end) for (__typeof(begin) i = (begin); i != (end) + 1 - 2 * ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}


const int N = 21;
int n, a[N][3], bits[1 << N];
int dp[1 << N][3];
int p, c, f;

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest;
    cin >> ntest;
    rep2(t, 1, ntest) {
        cin >> p >> c >> f >> n;
        mem(dp, 0); mem(bits, 0);
        rep1(i, 0, n) rep1(j, 0, 3) {
            cin >> a[i][j];
            dp[1 << i][j] = a[i][j];
        }
        bool ok = false;
        rep1(i, 1, (1 << n)) {
            if (i & 1) {
                bits[i] = bits[i - 1];
                rep1(j, 0, 3) dp[i][j] = dp[i - 1][j] + a[0][j];
                if (dp[i][0] == p && dp[i][1] == c && dp[i][2] == f) ok = true;
            }
            else {
                bits[i] = bits[i >> 1] + 1;
                int y = 1 << bits[i], x = i ^ y;
                rep1(j, 0, 3) dp[i][j] = dp[x][j] + dp[y][j];
                if (dp[i][0] == p && dp[i][1] == c && dp[i][2] == f) ok = true;
            }
            if (ok) break;
        }
        printf("Case #%d: %s\n", t, ok ? "yes" : "no");
    }

    return 0;
}

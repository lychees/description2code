#include <iostream>
#include <queue>
//#include <utility> 
#include <algorithm>
using namespace std;

int arr[101][101] = {0};
//int temp[101][101] = {0};
int vis[101][101] = {0};
int ax[4] = {0,-1,0,1};
int ay[4] = {-1,0,1,0};

int safe(int x, int y, int m , int n)
{ if(x >= 0 && x< m && y >= 0 & y < n)
  	return 1;
  return 0;
}
int bfs(int x, int y, int d, int n, int m)
{  int count = 0,h,v;
   queue<int> qx;
   queue<int> qy;
   qx.push(x);
   qy.push(y);
   vis[x][y] = 1;
   count++;
   int fx, fy;
   while (!qx.empty() && !qy.empty())
   	{  fx = qx.front();
   	   fy = qy.front();
   	 //  cout<<fx<<" "<<fy<<endl;
       qx.pop();
       qy.pop();
       for(int r = 0; r < 4 ; r++)
   		   {  h = ax[r]; v = ay[r];
   		   	  //if(!(h == 0 && v == 0))
   		   		{  	if(safe(fx+h,fy+v,n,m) && !vis[fx+h][fy+v] && abs(arr[fx+h][fy+v]-arr[fx][fy]) <= d)
   		   				{  qx.push(fx+h);
   						   qy.push(fy+v);
   						   vis[fx+h][fy+v] = 1;
   						   count++;
   		   				}
   		   		}
   		   }
   	}
  	return count;
}
     
int main()
{   int n,m,q,b;
     cin >> n >> m >> q;
     for (int i = 0; i < n; i++)
     {  for(int j = 0; j < m; j++)
     	 {	cin >> b;
     	    arr[i][j] = b;
     	//    temp[i][j] = b;
     	 }
     }
     
     int x,y,d,res;
     
     for(int l = 0; l < q; l++)
     	{   cin >> x >> y >> d;
     		res = bfs(x-1,y-1,d,n,m);
     		cout<<res<<endl;
     		for(int i = 0; i<n; i++)
     		{for(int j = 0; j<m; j++)
     			vis[i][j]=0;
     		}     		
     	}
     return 0;
}

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <list>
#include <queue>
using namespace std;
typedef long long ll;

#define MOD 1000000007

void multiply(ll F[2][2], ll M[2][2]);
 
void power(ll F[2][2], ll n);
 
/* function that returns nth Fibonacci number */
int fib(ll n)
{
  ll F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-1);
  return F[0][0];
}
 
/* Optimized version of power() in method 4 */
void power(ll F[2][2], ll n)
{
  if( n == 0 || n == 1)
      return;
  ll M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2);
  multiply(F, F);
 
  if (n%2 != 0)
     multiply(F, M);
}
 
void multiply(ll F[2][2], ll M[2][2])
{
  ll x =  (F[0][0]*M[0][0] + F[0][1]*M[1][0])%10000;
  ll y =  (F[0][0]*M[0][1] + F[0][1]*M[1][1])%10000;
  ll z =  (F[1][0]*M[0][0] + F[1][1]*M[1][0])%10000;
  ll w =  (F[1][0]*M[0][1] + F[1][1]*M[1][1])%10000;
 
  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}
int main()
{
	int t;
	cin>>t;
	ll fibo[15001];
	fibo[0]=0;
	fibo[1]=0;

//	for(int i=0;i<7510;i++)
//		cout<<fib(i)<<endl;
	for(int i=2;i<=15000;i++)
	{
		fibo[i] =fibo[i-1]+fib(i-1);
	}
	
	//cout<<fib(75001)<<' '<<fib(75002);
	while(t--)
	{
		ll l,r;
		cin>>l;
		cin>>r;

		l-=1;
		ll x = (r/15000);
		ll y = (l/15000);

		ll ans = 0;
		ans = ((x-y)%MOD*fibo[15000]);

		//cout<<"x: "<<x<<" fibo: "<<fibo[15000]<<" ans: "<<ans<<endl;
		ans+=fibo[r%15000];

	//	cout<<ans<<endl;
		ans-=fibo[l%15000];

		ans%=MOD;

		cout<<ans<<endl;	


	}

	return 0;
}
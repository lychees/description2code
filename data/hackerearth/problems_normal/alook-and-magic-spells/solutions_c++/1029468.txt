#include <bits/stdc++.h>

using namespace std;

const int MOD = (int)(1e9) + 7;

struct matrix {
    int a[5][5];
};

matrix a, b;

matrix multiply(matrix &a, matrix &b) {
    matrix c;
    for(int i = 1; i <= 3; i++) {
        for(int j = 1; j <= 3; j++) {
            c.a[i][j] = 0;
            for(int k = 1; k <= 3; k++) c.a[i][j] = (c.a[i][j] + ((long long)(a.a[i][k]) * b.a[k][j]) % MOD) % MOD;
        }
    }
    return c;
}

matrix power(matrix &a, int k) {
    if (k == 1) return a;
    matrix t = power(a, k / 2);
    t = multiply(t, t);
    if (k % 2 == 1) t = multiply(t, a);
    return t;
}

int calc(int n) {
    a.a[1][1] = 1; a.a[1][2] = 2; a.a[1][3] = 2;
    b.a[1][1] = 0; b.a[1][2] = 4; b.a[1][3] = 4;
    b.a[2][1] = 1; b.a[2][2] = 2; b.a[2][3] = 2;
    b.a[3][1] = 0; b.a[3][2] = 0; b.a[3][3] = 1;
    matrix c = power(b, n - 1);
    a = multiply(a, c);
    return a.a[1][3];
}

int main()
{
    int res[] = {0, 2, 14, 46, 158};
    int test;
    cin >> test;
    while (test --) {
        int n;
        cin >> n;
        if (n <= 4) cout << res[n] << endl;
        else {
            int ans = (calc(n) + ((long long)(4) * calc(n - 2)) % MOD + 4) % MOD;
            ans = (ans + MOD) % MOD;
            cout << ans << endl;
        }
    }
}

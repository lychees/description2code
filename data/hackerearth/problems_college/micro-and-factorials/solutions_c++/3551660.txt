#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
#define mod 1000000007
using namespace std;
typedef long long int LL;
vector<int > primes;
int is_prime[100010];
void seive(){
for(int i=0;i<=100005;i++)
	is_prime[i] = 1;
is_prime[1] = 0;
is_prime[0] = 0;
for(long long int j=2;j<=100000;j++){
	if(is_prime[j]==1){
		primes.push_back(j);
		for(long long int k=(j*j);k<=100000;k+=j)
			is_prime[k] = 0;
	}
}
}
int X , Y , T;
int power_in_x[100010] , power_in_y[100010] , primes_in_y , L;
int diff[100010];

int main()
{
int test;
LL ans1 = 1 , ans2 = 1;
seive();
scanf("%d",&test);
while(test--)
{
scanf("%d %d",&X,&Y);
ans1 = 1;
ans2 = 1;
if(X<Y)
	printf("0\n");
else
{
T = primes.size();

for(int i=0;i<T;i++)
{

	power_in_x[i] = 0;
	power_in_y[i] = 0;
	L = primes[i];
	if(L>X)
		break;
	if(L<=Y)
		primes_in_y++;
	while(L<=X)
	{
		power_in_x[i]+=(X/L);
		L = ( L * primes[i]);
	}
	
	L = primes[i];
	while(L<=Y)
	{
		power_in_y[i]+=(Y/L);
		L = ( L * primes[i]);
	}
	ans1 = (ans1*(power_in_x[i]+1 + mod)%mod)%mod;
	ans2 = (ans2*(power_in_y[i]+1 + mod)%mod)%mod;
}
cout << (ans1 - ans2 + mod)%mod << endl;
}


}
return 0;
}











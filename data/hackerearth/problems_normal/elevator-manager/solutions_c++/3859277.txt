#include<bits/stdc++.h>
using namespace std;
#define M 1000000007
/*bool isPrime(long long int n)
{
    // Corner cases
    if (n <= 1)  return false;
    if (n <= 3)  return true;
 
    // This is checked so that we can skip 
    // middle five numbers in below loop
    if (n%2 == 0 || n%3 == 0) return false;
 
    for (long long int i=5; i*i<=n; i=i+6)
        if (n%i == 0 || n%(i+2) == 0)
           return false;
 
    return true;
}*/
long long int mult(long long a, long long b, long long mod)
{
	__int128 res = a;
	res *= b;
	res %= mod;
	a = res;
	return a;
}
long long int modulo(long long a, long long b, long long c){
	long long int x = 1, y = a; 
	while (b > 0){
		if (b % 2 == 1){
			x = mult(x, y, c);
		}
		y = mult(y, y, c);
		b /= 2;
	}
	return x%c;
}

bool Miller(long long int p, int iteration){
	if (p<2){
		return false;
	}
	if (p != 2 && p % 2 == 0){
		return false;
	}
	long long s = p - 1;
	while (s % 2 == 0){
		s /= 2;
	}
	for (int i = 0; i<iteration; i++){
		long long a = rand() % (p - 1) + 1, temp = s;
		long long mod = modulo(a, temp, p);
		while (temp != p - 1 && mod != 1 && mod != p - 1){
			mod = mult(mod, mod, p);
			temp *= 2;
		}
		if (mod != p - 1 && temp % 2 == 0){
			return false;
		}
	}
	return true;
}
bool not_prime(long long int x)
{
	return !Miller(x, 15);
}
int main()
{
	long long int n;
	cin>>n;
	long long int q;
	cin>>q;
	long long int dis=0,ans=0;
	long long int flr=1;
	while(q--)
	{
		long long int f,d,k,count=0;
		cin>>f>>d>>k;
		long long int m=d+k;
		if(f==1)
		{
		
		bool v=not_prime(m);
		if(v==false)
	{
			dis=((dis)+(abs(flr-d)));
			//cout<<dis<<" "; ans += abs(a - cur);
	//	cur = a;
			//if(dis!=0)
		flr=d;
		ans=ans+k;
	}
	//	cout<<dis<<" ";
		}
		else if(f==2)
		{
			/*for (int i = 1; i <= m; ++i){
    if (m % i == 0)
    count++;
		}*/
	//	bool not_square(long long x)
//{
	long long int val = sqrt(m + .5);
	if(val*val == m)
//}
//		if(count%2!=0)
	{
				dis=((dis)+(abs(flr-d)));
		flr=d;
		ans=ans-k;
	}
		}
	}
	cout<<dis%M<<" "<<ans;
	return 0;
}
#include <iostream>
using namespace std;
int tempArray[100][100];


int  numberOfPaths(int m,int n,int max,int array[])
{
   // If either given row number is first or given column number is first
   if ((m == (max-1))  && (n == (max-1)))
        return 1;
 
   // If diagonal movements are allowed then the last addition
   // is required.
   if(tempArray[m][n]==1 || m < 0 || n < 0 || m > (max-1) || n > (max-1)) {
   	return 0;
   }
   if(array[(m*max)+n] == 1) {
   	//	cout<<array[(m*max)+n]<<" M "<<m<<" N "<<n<<endl;
   		return 0;
   } else {
   		//cout<<array[(m*max)+n]<<" K "<<endl;
   		array[(m*max)+n] = 1;
   }
   
   int result =   numberOfPaths(m+1, n, max,array) + numberOfPaths(m, n+1,max,array) + numberOfPaths(m-1, n, max,array) + numberOfPaths(m, n-1, max,array); 
           // + numberOfPaths(m-1,n-1);
           	array[(m*max)+n] = 0;
           	return result;
           
}

int main()
{
    int number = 0;
    cin>>number;
    int array[number*number];
    for(int row =0;row<number;row++) {
    	for(int column =0;column<number;column++) {
    		cin>>tempArray[row][column];
    		int u = (row*number)+column;
    		array[u] = 0;
    	}
    } 
    
   /* for(int row =0;row<number;row++) {
    	for(int column =0;column<number;column++) {
    		cout<<tempArray[row][column]<<" ";
    	}
    	cout<<endl;
    } */
    
    cout<<numberOfPaths(0,0, number,array)<<endl;
    return 0;
}

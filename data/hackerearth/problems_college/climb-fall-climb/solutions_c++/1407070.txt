/* Pranet Verma */
/* Yeh mera template hai. Apna khud banao =_= */
#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
#define mp make_pair
#define s(n) scanf("%d",&n)
#define s2(n,m) scanf("%d%d",&n,&m)
#define s3(n,m,l) scanf("%d%d%d",&n,&m,&l)
#define rep(i,n) for(int i=0;i<n;++i)
ll pwr(ll a,ll b,ll mod) {a%=mod;if(a<0)a+=mod;ll ans=1; while(b) {if(b&1) ans=(ans*a)%mod; a=(a*a)%mod; b/=2; } return ans; }
ll pwr(ll a,ll b) {ll ans=1; while(b) {if(b&1) ans*=a; a*=a; b/=2; } return ans; }
ll gcd(ll a,ll b) {while(b) {ll temp=a; a=b; b=temp%b; } return a; }
ll lcm(ll a,ll b) {return (a/gcd(a,b))*b; }
ll modularInverse(ll a,ll m) {/*reminder: make sure m is prime*/ assert(false); return pwr(a,m-2,m); }
const int mod=1000000007;
    int n,k;

int DP[1001][1001][21];
int a[1001];

int dp(int u,int prev,int st)
{
  if(u==n+1)
    return 0;

  if(DP[u][prev][st]!=-1)
    return DP[u][prev][st];

  int o1=0,o2=0;
  if(st==0 || st>k)
  {
    o1=dp(u+1,prev,st);

    if(a[u]<a[prev])
      o2=1+dp(u+1,u, (st+1)%(k+k) );
  }
  else
  {
    o1=dp(u+1,prev,st);
    if(a[u]>a[prev])
      o2=1+dp(u+1,u, (st+1)%(k+k) );
  }


  // cout<<u<<" "<<prev<<" "<<st<<" "<<o1<<" "<<o2<<endl;

  return DP[u][prev][st]=max(o1,o2);
}
int main()
{
 
  int t;
  s(t);
  while(t--)
  {
    memset(DP,-1,sizeof DP);
    s2(n,k);
    // cout<<n<<endl;
    assert(n<=1000);
    assert(k<=10);
    for(int i=1;i<=n;++i)
      {
        s(a[i]);
        assert(a[i]>=1 && a[i]<=1000);
      }

      // a[0]=1e9;
    // int ans=dp(1,0,0);
    // ans=dp()
    int ans=0;
    a[0]=-1000000;

    for(int state=0;state<k+k;++state)
      ans=max(ans,dp(1,0,state));

    memset(DP,-1,sizeof DP);
    a[0]=10000001;

    for(int state=0;state<k+k;++state)
      ans=max(ans,dp(1,0,state));

    printf("%d\n",ans);
  } 
}
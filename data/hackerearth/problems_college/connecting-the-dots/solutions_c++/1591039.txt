#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 1005;
int n, m, dist[N];

struct E {
	int to, cost, color;
};

vector<E> G[N];

class MyComp {
public:
	MyComp() {}
	bool operator() (const E &s1, const E &s2) const {
		return s1.cost > s2.cost;
	}
};

void dijkstra() {
    priority_queue<E, vector<E>, MyComp> que;
    fill(dist, dist + N, INT_MAX);
    dist[1] = 0;
    que.push((E) {1, 0, -1});
    while (!que.empty()) {
        E p = que.top(); que.pop();
        if (p.cost > dist[p.to]) continue;
        repu(i, 0, G[p.to].size()) {
            E &e = G[p.to][i];
            if (e.color != p.color && dist[e.to] > dist[p.to] + e.cost) {
                dist[e.to] = dist[p.to] + e.cost;
                que.push((E) {e.to, dist[e.to], e.color});
            }
        }
    }
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int x, y, c;

    cin >> n >> m;
    repu(i, 0, m) {
    	cin >> x >> y >> c;
    	G[x].push_back((E) {y, 1, c});
    }
    dijkstra();
    printf("%d\n", (dist[n] < INT_MAX) ? dist[n] : -1);
    return 0;
}

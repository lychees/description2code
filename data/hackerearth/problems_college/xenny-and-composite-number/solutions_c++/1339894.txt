#include<iostream>
//#include<conio>
#include <cstring>
#include <cstdlib>
#define ll long long
using namespace std;

/*
 * calculates (a * b) % c taking into account that a * b might overflow
 */
ll mulmod(ll a, ll b, ll mod)
{
    ll x = 0,y = a % mod;
    while (b > 0)
    {
	if (b % 2 == 1)
	{
	    x = (x + y) % mod;
	}
	y = (y * 2) % mod;
	b /= 2;
    }
    return x % mod;
}
/*
 * modular exponentiation
 */
ll modulo(ll base, ll exponent, ll mod)
{
    ll x = 1;
    ll y = base;
    while (exponent > 0)
    {
	if (exponent % 2 == 1)
	    x = (x * y) % mod;
	y = (y * y) % mod;
	exponent = exponent / 2;
    }
    return x % mod;
}

/*
 * Miller-Rabin primality test, iteration signifies the accuracy
 */
int Miller(ll p,int iteration)
{
    if (p < 2)
    {
	return 0;
    }
    if (p != 2 && p % 2==0)
    {
	return 0;
    }
    ll s = p - 1;
    while (s % 2 == 0)
    {
	s /= 2;
    }
    for (int i = 0; i < iteration; i++)
    {
	ll a = rand() % (p - 1) + 1, temp = s;
	ll mod = modulo(a, temp, p);
	while (temp != p - 1 && mod != 1 && mod != p - 1)
	{
	    mod = mulmod(mod, mod, p);
	    temp *= 2;
	}
	if (mod != p - 1 && temp % 2 == 0)
	{
	    return 0;
	}
    }
    return 1;
}
/*Main
int main()
{
    int iteration = 5;
    ll num;
    cout<<"Enter integer to test primality: ";
    cin>>num;
    if (Miller(num, iteration))
	cout<<num<<" is prime"<<endl;
    else
	cout<<num<<" is not prime"<<endl;
    return 0;
}
*/
int main()
{
//clrscr();
long arr1[50000],arr2[50000],tc,iteration=5;
cin>>tc;
for(int i=0;i<tc;i++)
{
cin>>arr1[i];
}

for(int j=0;j<tc;j++)
{
if(arr1[j]==1||arr1[j]==2||arr1[j]==0)
{arr2[j]=4;}
else if(arr1[j]%2!=0)
{arr2[j]=arr1[j]+1;}
else if(arr1[j]%2==0)
{
	int p=arr1[j]+1;
	if(Miller(p,iteration)==1)
{
	arr2[j]=arr1[j]+2;
}
else
{
	arr2[j]=arr1[j]+1;}
}
}
//display
for(int k=0;k<tc;k++)
{
cout<<arr2[k]<<endl;
}
//getch();
return 0;
}



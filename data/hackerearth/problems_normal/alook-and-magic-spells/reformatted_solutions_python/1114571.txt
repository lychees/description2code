

def matmult(a, b, c, M):
    # /multiply matrix a and b. put result in c

    for i in xrange(2):

        for j in xrange(2):

            c[i][j] = 0
            for k in xrange(2):

                c[i][j] += (a[i][k]*b[k][j])
                c[i][j] = c[i][j] % M


def matpow(Z, n, ans, M):
    # find ( Z^n )% M and return result in ans

    temp = [[0, 0], [0, 0]]
    # assign ans= the identity matrix
    ans[0][0] = 1
    ans[1][0] = 0
    ans[0][1] = 0
    ans[1][1] = 1

    while (n > 0):

        if (n & 1):

            matmult(ans, Z, temp, M)
            for i in xrange(2):
                for j in xrange(2):
                    ans[i][j] = temp[i][j]

        matmult(Z, Z, temp, M)
        for i in xrange(2):
            for j in xrange(2):
                Z[i][j] = temp[i][j]

        n = n/2


def findFibonacci(n, M):

    fib = 0
    ini = [0, 2, 12]

    if (n > 2):

        n += 2
        Z = [[2, 4], [1, 0]]
        result = [[0, 0], [0, 0]]
        # modify matrix a[][] for other recurrence relations
        matpow(Z, n-2, result, M)
        # fib2=((result[0][0]*ini[2])%M + (result[0][1]*ini[1])%M)%M
        # fib1=((result[1][0]*ini[2])%M + (result[1][1]*ini[1])%M)%M
        # final multiplication of Z^(n-2) with the initial terms of the series
        fib2 = result[0][0]*ini[2] + result[0][1]*ini[1]
        fib1 = result[1][0]*ini[2] + result[1][1]*ini[1]
        x = 400000003
        fib = (((fib2-fib1-ini[2]+ini[1]) % M)*x) % M

    else:

        fib = ini[n]+ini[n-1]

    return fib % M


def findFibonacci2(n, M):

    fib = 0
    ini = [0, 2, 12]

    if (n > 2):

        # n+=2
        Z = [[2, 4], [1, 0]]
        result = [[0, 0], [0, 0]]
        # modify matrix a[][] for other recurrence relations
        matpow(Z, n-2, result, M)
        fib = ((result[0][0]*ini[2]) % M + (result[0][1]*ini[1]) % M) % M
        # fib1=((result[1][0]*ini[2])%M + (result[1][1]*ini[1])%M)%M
        # final multiplication of Z^(n-2) with the initial terms of the series

        # fib = ((fib2-fib1-ini[2]+ini[1])%M)5/

    else:

        fib = ini[n]

    return fib


def main():

    M = 1000000007

    for _ in xrange(int(raw_input())):

        n = int(raw_input())
        # ans =0
        # for i in xrange(1,n+1):
        # ans = (ans + findFibonacci2(i,M))%M

        print findFibonacci(n, M)


main()

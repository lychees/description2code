#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
#include<fstream>
#include<queue>
#include<cmath>
#include<string>
#include<cstring>
#include<functional>
#include<vector>
#include<iterator>
#include<map>
#include<set>
#include<climits>
using namespace std;
//#pragma warning(disable:4996)
#define ll long long
#define MAX 100000
#define mod 1000000007
#define node pair<int, ll>
#define pb(a)	push_back(a)
#define pp		pop_back()
#define sz		size()
#define ins(a)  insert(a)
#define rm(a)	erase(a)
void uni(int* ar, int n, int a, int b) {
	int tmp = ar[b];
	for (int i = 0;i < n;i++) {
		if(ar[i]==tmp){
			ar[i] = ar[a];
		}
	}
}
int main() {
//	freopen("in", "r", stdin);
//	freopen("out", "w", stdout);
	int n;
	cin >> n;
	int e[MAX];
	for (int i = 0;i < n;i++) {
		cin >> e[i];
	}
	int k;
	cin >> k;
	int c[n];
	for (int i = 0;i < n;i++)c[i] = i;
	int x, y;
	for (int i = 0;i < k;i++) {
		cin >> x >> y;
		x--, y--;
		if (e[x] < e[y]) {
			uni(c, n, x, y);
		}
		else {
			uni(c, n, y, x);
		}
	}
	set<int> ar[n];
	for (int i = 0;i < n;i++) {
		ar[c[i]].insert(i);
	}
	set<int>::iterator it;
	int ans = 1;
	for (int i = 0;i < n;i++) {
		if(ar[i].sz>1){
			it = ar[i].begin();
			int min = e[*it];
			int cnt = 0;
			while (it != ar[i].end()) {
				if (min > e[*it])min = e[*it];
				it++;
			}
			it = ar[i].begin();
			while (it != ar[i].end()) {
				if (min == e[*it])cnt++;
				it++;
			}
			ans =(ans*cnt)%mod;
		}
	}
	cout << ans << endl;
//	system("pause");
	return 0;
}
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <cctype>
#include <sstream>
#include <cassert>
#include <bitset>
#include <memory.h>
#include <complex>

using namespace std;



typedef long long int64;
typedef vector<int> vi;
typedef pair<int,int> pii;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define fore(i, a, n) for(int i = (int)(a); i < (int)(n); i++)
#define pb push_back
#define mp make_pair

#define take(x) scanf("%d",&x)

#define fs first
#define sc second
#define last(a) (int(a.size()) - 1)
#define all(a) a.begin(), a.end()

const double EPS = 1E-9;
const int INF = 1000000000;
const int64 INF64 = (int64) 1E18;
const double PI = 3.1415926535897932384626433832795;
#define MAXN 1000006


char DFS_COLOR[MAXN];
int d_time[MAXN];
int arr[MAXN];
int length[MAXN];
int time_stamp = 0;
int loop_root=  -1;


void INI(){

    memset(d_time,0,sizeof(d_time));
    time_stamp = 0;




}



void DFS(int u) {

    DFS_COLOR[u] = 'g';

    int v = arr[u];

    if(u == v){

        length[u] = 1;
        return;

    }


    if(DFS_COLOR[v] == 'b') {


        length[u] = length[v] + 1;
        return;

    }
    if(DFS_COLOR[v] == 'w') {


        d_time[v] = ++time_stamp;
        DFS(v);
        if(loop_root == -1)
            length[u] = length[v] + 1;
        else
            length[u] = length[v];

        DFS_COLOR[v] = 'b';
        if(loop_root == u)
            loop_root = -1;

        return;
    }

    if(DFS_COLOR[v] == 'g') {


        length[v] = length[u] = d_time[u] - d_time[v] + 1;
        loop_root = v;
        return;

    }



}





int main() {

    int tc;
    int n;

    take(tc);
    while(tc--) {


        INI();
        take(n);
        forn(i,n) {
            take(arr[i]);
            DFS_COLOR[i] = 'w';
            length[i] = 0;
        }


        forn(i,n) {

            if(DFS_COLOR[i] == 'w') {

                d_time[i] = ++time_stamp;
                DFS(i);
                DFS_COLOR[i]= 'b';

            }


        }


//        forn(i,n)cout<<length[i]<<" ";
//        cout<<endl;


        int best = 0;
        int best_node;
        forn(i,n)
        if(length[i] > best){

            best = length[i];
            best_node = i;
        }



        printf("%d\n",best_node);

    }








}

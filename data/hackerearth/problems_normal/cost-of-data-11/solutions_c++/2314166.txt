#include<bits/stdc++.h>

using namespace std;

typedef struct node {
	struct node* child[26];
	bool f;
} Node;



Node* insert(Node *root,char word[55] ) {
	if(root==NULL) {
		root = (Node *)malloc(sizeof(Node));
		for(int i=0;i<26;i++)
			root -> child[i] = NULL;
		root -> f = false;
	}
	int n = strlen(word);
	Node* cursor;
	int c=0;
	
	cursor = root;
	for(int i=0;i<n;i++) {
		c = (int)word[i];
		if(cursor->child[c-'a']==NULL) { // Create new node and move on
			cursor -> child[c-'a'] = (Node *)malloc(sizeof(Node));
			cursor = cursor -> child[c-'a'];
			for(int i=0;i<26;i++)
				cursor -> child[i] = NULL;
			cursor -> f = false;
		}
		else { // Move on
			cursor = cursor -> child[c-'a'];
		}
	}
	cursor -> f=true;
	
	return root;
}

bool search(Node* root,char word[55]) {
	
	if(root==NULL)return false;
	
	Node* current = root;
	int c=0;
	int n = strlen(word);
	for(int i=0;i<n;i++) {
		c = (int)word[i];
		if(current->child[c-'a']==NULL)return false;
		else {
			current = current -> child[c-'a'];
		}
	}
	return current->f;
}

int count_nodes(Node *root, int count) {
	if(root==NULL)return 0;
	else count=1;
	for(int i=0;i<26;i++) {
		count += count_nodes(root->child[i],0);
	}
	return count;
}

int main()
{
    int n;
    scanf("%d",&n);
    char str[55];
    Node* root = NULL;
    
    for(int i=0;i<n;i++) {
    	scanf("%s",str);
    	root = insert(root,str);
    }
    /*
    printf("Tree is build");
    
    printf("Search for ......: ");
    scanf("%s",str);
    if(search(root,str))cout << "Word exists in Tree\n";
    else cout << "Words donot exists\n";
    cout << "Total No of Nodes : " << count_nodes(root,0) << endl;
    */
    cout << count_nodes(root,0) << endl;
    return 0;
}

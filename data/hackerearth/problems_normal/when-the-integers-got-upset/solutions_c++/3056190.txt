#include <iostream>
#include <stdio.h>
#include <numeric>
#include <queue>
#include <string>
#include <cmath>
#include <vector>
#include <deque>
#include <iomanip>
#include <set>
#include <queue>
#include <bitset>
#include <iomanip>
#include <map>
#include <string.h>
#include <stack>
#include <algorithm>

using namespace std;

long long dp[20][20][5000];			// 在当前位置，前面选择了哪两个，总的选择了哪些的最小结果
int a[200];
int p[200];

int getCount(int select_set)
{
	int ans = 0;
	while (select_set > 0)
	{
		ans ++;
		select_set = select_set & (select_set - 1);
	}
	return ans;
}

// 之前选择的值和选择的集合
long long dfs(int n , int prev1 , int prev2 , int select_set)
{
	int cur = getCount(select_set);
	if (cur == n)
		return 0;
	else
	{
		// 如果还没有两个
		if (prev1 < 0 || prev2 < 0)
		{
			long long temp = - 1 , ans = - 1;
			for (int i = 0;i < n;i ++)
			{	
				// 如果没有选择过
				if ((select_set & (1 << i)) == 0)
				{
					// 如果两个都没有
					if (prev1 < 0)
					{
						temp = dfs(n , i , - 1 , select_set | (1 << i));
						if (temp < ans || ans < 0)
							ans = temp;
					}
					// 如果一个没有
					else
					{
						temp = dfs(n , prev1 , i , select_set | (1 << i));
						if (temp < ans || ans < 0)
							ans = temp;
					}
				}
			}
			return ans;
		}
		else
		{
			if (dp[prev1][prev2][select_set] >= 0)
				return dp[prev1][prev2][select_set];
			else
			{
				long long temp = - 1 , ans = - 1;
				for (int i = 0;i < n;i ++)
				{
					// 如果没有选择过
					if ((select_set & (1 << i)) == 0)
					{
						temp = dfs(n , prev2 , i , select_set | (1 << i)) + (a[i] ^ a[prev1] ^ a[prev2]) * p[cur];
						if (temp < ans || ans < 0)
							ans = temp;	
					}
				}
				return dp[prev1][prev2][select_set] = ans;
			}
		}
	}
}

int main()
{
	int i , j , t , n;
	while (scanf("%d" , &t) != EOF)
	{
		while (t --)
		{
			memset(dp , - 1 , sizeof(dp));

			scanf("%d" , &n);
			for (i = 0;i < n;i ++)
				scanf("%d" , &a[i]);
			for (i = 0;i < n;i ++)
				scanf("%d" , &p[i]);

			printf("%lld\n" , dfs(n , - 1 , - 1 , 0));
		}
	}
	return 0;
}

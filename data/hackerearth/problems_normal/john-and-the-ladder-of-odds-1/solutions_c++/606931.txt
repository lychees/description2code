//matrix expo


#include<iostream>
#include<stdio.h>

using namespace std;
#define LL long long
#define MOD 1000000009
LL result [2][2];

void matmult(LL F[][2],LL M[][2],LL c[][2])
{

   long long x =  F[0][0]*M[0][0] + F[0][1]*M[1][0];
  long long y =  F[0][0]*M[0][1] + F[0][1]*M[1][1];
  long long z =  F[1][0]*M[0][0] + F[1][1]*M[1][0];
  long long w =  F[1][0]*M[0][1] + F[1][1]*M[1][1];
    x%=MOD;
    y%=MOD;
    z%=MOD;
    w%=MOD;
  c[0][0] = x;
  c[0][1] = y;
  c[1][0] = z;
  c[1][1] = w;
}

void matpow(LL Z[][2],LL n,LL ans[][2])
{
	LL temp[2][2];
	ans[0][0]=1;
	ans[0][1]=0;
	ans[1][0]=0;
	ans[1][1]=1;
	while(n)
	{
		if(n&1)
		{
			matmult(ans,Z,temp);
			for(int i=0;i<2;i++)
			 for(int j=0;j<2;j++)
			  ans[i][j]=temp[i][j];
			  
		}
		matmult(Z,Z,temp);
		for(int i=0;i<2;i++)
		for(int j=0;j<2;j++)
		 Z[i][j]=temp[i][j];
		 
		 n=n/2;
	}
}

LL findfib(LL n)
{
 LL Z[2][2],fib;
// LL result[2][2];
 if(n>0)
 {
  Z[0][0]=1;
  Z[0][1]=1;
  Z[1][0]=1;
  Z[1][1]=0;
  matpow(Z,n-1,result);
   fib=result[0][0]*1 + result[0][1]*0;
 }
 else if(n==0)
 {
 	fib=0;
 }
 
  return fib;
  
}

int fast_int()
{
	int n = 0,f=0; 
	char c = getchar_unlocked();

    while (!(('0' <= c && c <= '9') || c=='-')) 
    {
    	c = getchar_unlocked();
   	}
   	if(c=='-')
   	{ f=1;
   	c=getchar_unlocked(); 
   	}
   	while('0' <= c && c <= '9')
   	{
   		n = (n<<3)+(n<<1) + c - '0';
   		c = getchar_unlocked();
   		}
   		if(f==1)
   		n*=-1;
   		
   		return n;
   }


LL fast_long()
{
	LL n = 0,f=0; 
	char c = getchar_unlocked();

    while (!(('0' <= c && c <= '9') || c=='-')) 
    {
    	c = getchar_unlocked();
   	}
   	if(c=='-')
   	{ f=1;
   	c=getchar_unlocked(); 
   	}
   	while('0' <= c && c <= '9')
   	{
   		n = (n<<3)+(n<<1) + c - '0';
   		c = getchar_unlocked();
   		}
   		if(f==1)
   		n*=-1;
   		
   		return n;
   }


int main() {
	// your code goes here
	int t;
	LL n;
	int m;
	m=1000000009;
	//scanf("%d",&t);
	t=fast_int();
	while(t--)
	{
	// scanf("%lld",&n);
	n=fast_long();
	 LL fib1,fib2;
	 LL ans;
	
	 
	 fib1=findfib(n);
	 
	fib2=findfib(n+1);
	
	 ans=((fib1%MOD)*(fib2%MOD))%MOD;
	 
     printf("%lld\n",ans);
	}
	return 0;
}



   
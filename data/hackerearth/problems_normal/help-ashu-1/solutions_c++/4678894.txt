#include<bits/stdc++.h>
using namespace std;

typedef int ll;



void build(ll tree[], ll a[], ll start, ll end, ll index)
{
    if(start == end){
        if(a[start]%2 == 0)
            tree[index] = 1;
        else
            tree[index] = 0;
        return ;
    }

    ll mid = (start+end)/2;
    build(tree,a,start,mid,2*index);
    build(tree,a,mid+1,end,2*index+1);

    tree[index] = tree[2*index] + tree[2*index+1];

}

void update(ll tree[], ll a[], ll start, ll end, ll index,ll x, ll val)
{
    if(start == end){
        //a[index] = val;
        if(val % 2 == 0)
            tree[index] = 1;
        else
            tree[index] = 0;
        return ;
    }

    ll mid = (start+end)/2;

    if(x >= start && x <= mid){
        update(tree,a,start,mid,2*index,x,val);
    }
    else{
        update(tree,a,mid+1,end,2*index+1,x,val);
    }

    tree[index] = tree[2*index] + tree[2*index+1];
}

ll query(ll tree[], ll a[], ll start, ll end, ll x, ll y, ll index)
{
    if(end < x || start > y)
        return 0;
    if(start >= x && end <= y)
        return tree[index];

    ll mid = (start+end)/2;
    return query(tree,a,start,mid,x,y,2*index) + query(tree,a,mid+1,end,x,y,2*index+1);
}

int main()
{
    ll n,q,i,choice,x,y;
    scanf("%d",&n);
    int a[n+2];
    for(i=1;i<=n;i++){
        scanf("%d",&a[i]);
    }
    int tree[400000];
    build(tree,a,1,n,1);
    scanf("%d",&q);
    while(q--){
        scanf("%d %d %d",&choice,&x,&y);
        if(choice == 0)
            update(tree,a,1,n,1,x,y);
        else if(choice == 1)
            printf("%d\n",query(tree,a,1,n,x,y,1));
        else
            printf("%d\n",y-x+1-query(tree,a,1,n,x,y,1));
    }
    return 0;
}

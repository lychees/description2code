#include <iostream>
#include <vector>
#include <cassert>
#include <map>
#include <cstring>
#include <cmath>
#include <unordered_map>
#include <algorithm>
using namespace std;
typedef long long Long;
#define MAXF 1000000000000000LL

int REM[15];
int PRIME[100];
vector<Long> ANS;
void rec(int i,int st,int pr, Long num){
	
	if(i == 15){
		if(st != -1 && pr){
//			if(ANS.size() < 100)
//				cout << num << endl;
			ANS.push_back(num);
		}
	}else{
		
		
		for(int d = 0; d <= 9; ++d){
			
			if(st == -1 && d == 0){
				rec(i+1,st,pr,num);
				continue;
			}
			int nst = st==-1 ? i : st;
//			if(lo && d < LO[i-nst])continue;
//			if(hi && d > HI[i-nst])continue;
			Long nn = num*10 + d;
			if(nn % (i-nst+1) != REM[i-nst])continue;
			int npr = pr;
			if(i!=nst && PRIME[nn%100])
				npr = 1;
//			int nlo = lo && d == LO[i-nst];
//			int nhi = hi && d == HI[i-nst];
			rec(i+1,nst,npr,nn);			
		}
		
	}
	
}


// 1*k+r

int main() {

//	Long TEST = 131313131313131LL;
//	Long P = 100000000000000;
//	for(int i = 1; i <= 15; ++i){
//		Long t = TEST/P;
//		cout << t % i << " ";
//		P /= 10;
//	}
	memset(PRIME,-1,sizeof(PRIME));
	PRIME[0] = PRIME[1] = 0;
	for(int i = 2; i < 100; ++i){
		if(PRIME[i] == 0)continue;;
		PRIME[i] = 1;
		for(int j = 2*i; j < 100; j += i)
			PRIME[j] = 0;
	}
	for(int i = 0; i < 15; ++i)
		cin >> REM[i];
	rec(0,-1,0,0);
	sort(ANS.begin(),ANS.end());
//	for(int i = 0; i < ANS.size(); ++i)
//		cout << ANS[i] << endl;
//	return 0;
	int N;
	cin >> N;
	while(N-->0){
		Long A,B;
		cin >> A >> B;
		int l = lower_bound(ANS.begin(),ANS.end(),A)-ANS.begin();
		int h = upper_bound(ANS.begin(),ANS.end(),B)-ANS.begin();
		cout << h-l << endl;
	}
	
	
	
}


/*
0 1 0 0 0 0 0 0 1 1 1 2 3 4 5
1
1 1000000000000000

 */

#include <iostream>
#include<climits>
#include <math.h>
using namespace std;

long bikeMap[250][2];

long racerMap[250][2];
long minimumdistance[250];

long partition(long arr[], long l, long r);

// This function returns k'th smallest element in arr[l..r] using
// QuickSort based method.  ASSUMPTION: ALL ELEMENTS IN ARR[] ARE DISTINCT
long kthSmallest(long arr[], long l, long r, long k)
{
    // If k is smaller than number of elements in array
    if (k > 0 && k <= r - l + 1)
    {
        // Partition the array around last element and get
        // position of pivot element in sorted array
        long pos = partition(arr, l, r);

        // If position is same as k
        if (pos-l == k-1)
            return arr[pos];
        if (pos-l > k-1)  // If position is more, recur for left subarray
            return kthSmallest(arr, l, pos-1, k);

        // Else recur for right subarray
        return kthSmallest(arr, pos+1, r, k-pos+l-1);
    }

    // If k is more than number of elements in array
    return LONG_MAX;
}

void swap(long *a, long *b)
{
    long temp = *a;
    *a = *b;
    *b = temp;
}

// Standard partition process of QuickSort().  It considers the last
// element as pivot and moves all smaller element to left of it
// and greater elements to right
long partition(long arr[], long l, long r)
{
    long x = arr[r], i = l;
    for (long j = l; j <= r - 1; j++)
    {
        if (arr[j] <= x)
        {
            swap(&arr[i], &arr[j]);
            i++;
        }
    }
    swap(&arr[i], &arr[r]);
    return i;
}



long distance(long x1,long y1,long x2,long y2)
{
	long diff = ((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2));
	if(diff<0)
	{
		diff = -diff;
	}
	return  diff;	
}

int main()
{
    //cout << "Hello World!" << endl;
    long n,m,k;
    cin>>n>>m>>k;
    
    for(long i=0;i<n;i++)
    {
    	cin>>racerMap[i][0]>>racerMap[i][1];	
    
    }
    
    for(long i=0;i<m;i++)
    {
		
		cin>>bikeMap[i][0]>>bikeMap[i][1];
    
    }

	for(long i=0;i<m;i++)
    {
    	long max = 1000000000000000000;
    	
    	for(long j=0;j<n;j++)
    	{
    			long dist=distance(racerMap[j][0],racerMap[j][1],bikeMap[i][0],bikeMap[i][1]);				
    			if(dist<max)
    			{
    				
    				max=dist;
    			}
    		
    	}
    	minimumdistance[i]=max;
    	
    }


	long res = kthSmallest(minimumdistance, 0, m-1, k);
	
	cout<<res<<"\n";


return 0;
}

#include <stack>
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
struct SuffixArraySTL {
    const int OMEGA=256;
    const string &S;
    int n, gap;
    vi map, inv,  lcp;
    SuffixArraySTL ( const string &_S ) :S ( _S ),n ( _S.length() ),gap ( 0 ),map ( n ),inv ( n ),lcp() {

        buildSA();
    }
    bool suffCmp ( int i, int j ) const {
        if ( inv[i] != inv[j] )
            return inv[i] < inv[j];
        i += gap;
        j += gap;
        return ( i < n && j < n ) ? inv[i] < inv[j] : i > j;
    }
//     void countSort ( const vi &src, vi &tar,const vi &wgt, int off ) {
//         const int m= max ( OMEGA,n );
//         vi cnt ( m );
//         rep ( i,n ) {
//             cnt[ ( i+off<n ) ?wgt[i+off]:0]++;
//         }
//         int su=0;
//         rep ( i,m ) {
//             int t=cnt[i];
//             cnt[i]=su;
//             su+=t;
//         }
//         rep ( i,n ) {
//             tar[cnt[ ( src[i]+off<n ) ?wgt[src[i]+off]:0]++]=src[i];
//         }
//     }

    void sortArray() {
        sort ( all ( map ),  [this] ( int i,int j )->bool {return suffCmp ( i,j ); } );
    }
    void buildSA ( ) {
        vi tmp ( n );
        rep ( i, n ) {
            map[i] = i;
            inv[i] = S[i];
        }
        for ( gap = 1;; gap *= 2 ) {
            sortArray();
            rep ( i, n - 1 ) tmp[i + 1] = tmp[i] + suffCmp ( map[i], map[i + 1] );
            rep ( i, n ) inv[map[i]] = tmp[i];
            if ( tmp[n - 1] == n - 1 ) break;
        }
    }
    void buildLCP() {
        lcp=vi ( n );
        for ( int i = 0, k = 0; i < n; ++i )
            if ( inv[i] != n - 1 ) {
                for ( int j = map[inv[i] + 1]; S[i + k] == S[j + k]; )
                    ++k;
                lcp[inv[i]] = k;
                if ( k )--k;
            }
    }
};


ostream & operator<< ( ostream&os,const SuffixArraySTL &sa ) {
    os<<"SuffixArray:\n";
    os<<sa.map;
    rep ( i,sa.n ) {
        os<<sa.S.substr ( sa.map[i],sa.n-sa.map[i] ) <<endl;
    }
    return os;
}
struct SuffixArray {
    const int OMEGA=256;
    const string &S;
    int n, gap;
    vi map, inv,  lcp;

    SuffixArray ( const string &_S) :S ( _S ),n ( _S.length() ),gap ( 0 ),map ( n ),inv ( n ),lcp() {
        buildSA();
    }


    bool suffCmp ( int i, int j ) const {
        if ( inv[i] != inv[j] )
            return inv[i] < inv[j];
        i += gap;
        j += gap;
        return ( i < n && j < n ) ? inv[i] < inv[j] :j<i; //j<i;// i > j;
    }




    void countSort ( const vi &src, vi &tar,const vi &wgt, int off ) {
        const int m= max ( OMEGA,n+1 );
        vi cnt ( m );
        rep ( i,n ) {
            cnt[ ( i+off<n ) ?wgt[i+off]+1:0]++;
        }
        int su=0;
        rep ( i,m ) {
            int t=cnt[i];
            cnt[i]=su;
            su+=t;
        }
        rep ( i,n ) {
            tar[cnt[ ( src[i]+off<n ) ?wgt[src[i]+off]+1:0]++]=src[i];
        }
    }
    void sortArray() {
        vi tmp2 ( n );
        countSort ( map,tmp2,inv,gap );
        countSort ( tmp2,map,inv,0 );

    }

    void buildSA ( ) {
        vi tmp ( n );
        rep ( i, n ) {
            map[i] = i;
            inv[i] = S[i];
        }
        for ( gap = 1;; gap *= 2 ) {
            assert ( gap<n );
            sortArray();
            int r=tmp[map[0]]=0;
            reu ( i,1,n ) tmp[map[i]]=suffCmp ( map[i-1], map[i] ) ?++r:r; // ( inv[map[i]]==inv[map[i-1]] && inv[map[i]+gap]==inv[map[i-1]+gap] ) ?r:++r;
            rep ( i, n ) inv[i] = tmp[i];
            if ( inv[map[n - 1]] == n-1 ) break;
        }
    }
    void buildLCP() {
        lcp=vi ( n );
        for ( int i = 0, k = 0; i < n; ++i )
            if ( inv[i] != n - 1 ) {
                for ( int j = map[inv[i] + 1]; S[i + k] == S[j + k]; )
                    ++k;
                lcp[inv[i]] = k;
                if ( k )--k;
            }
    }
};

ll reduce ( stack<pii> &s, int l ) {
    int cnt=0;
    int red=0;
    while ( !s.empty() &&s.top().second>l ) {
        cnt+=s.top().first;
        red+= ( ll ) s.top().first* ( l-s.top().second );
        s.pop();

    }
    if ( !l ) return red;
    s.push ( mp ( cnt,l ) );
    return red;

}
ll addReduce ( stack<pii> &s,int l ) {

    ll r=reduce ( s,l );
    if ( !l ) return r;
    if ( s.top().second==l ) s.top().first+=1;
    else s.push ( mp ( 1,l ) );
    return r+l;
}
int main() {
    ios_base::sync_with_stdio ( false );
    int n1;
    cin>>n1;
    string s1;
    rep ( i,n1 ) {
        string s;
        cin>>s;
        s1+="_"+s;
    }
    int n2;
    cin>>n2;
    string s2;
    rep ( i,n2 ) {
        string s;
        cin>>s;
        s2+="-"+s;
    }
    string s=s1+"$"+s2;
    int l1=s1.size();
    SuffixArray sa ( s );
    sa.buildLCP();
    ll overlap1=0, overlap2=0,tot=0;
    stack<pii> st1,st2;
    rep ( i,sa.map.size() ) {
        int ind=sa.map[i];
        int l=sa.lcp[i];
        if ( ind<l1 ) {
            tot+=overlap2;
            overlap1+=addReduce ( st1,l );
            overlap2+=reduce ( st2,l );
        } else {
            tot+=overlap1;
            overlap1+=reduce ( st1,l );
            overlap2+=addReduce ( st2,l );
        }

    }
    cout<<tot<<endl;
}

#include<iostream>
#include<algorithm>
#include<string.h>
#include<stdio.h>
using namespace std;

int longestPalSubstr(char *str)
{
    int maxLength = 1;  // The result (length of LPS)
 
    int start = 0;
    int len = strlen(str);
 
    int low, high;
 
    // One by one consider every character as center point of 
    // even and length palindromes
    for (int i = 1; i < len; ++i)
    {
        // Find the longest even length palindrome with center points
        // as i-1 and i.  
        low = i - 1;
        high = i;
        while (low >= 0 && high < len && str[low] == str[high])
        {
            if (high - low + 1 > maxLength)
            {
                start = low;
                maxLength = high - low + 1;
            }
            --low;
            ++high;
        }
 
        // Find the longest odd length palindrome with center 
        // point as i
        low = i - 1;
        high = i + 1;
        while (low >= 0 && high < len && str[low] == str[high])
        {
            if (high - low + 1 > maxLength)
            {
                start = low;
                maxLength = high - low + 1;
            }
            --low;
            ++high;
        }
    }
    return maxLength;
}

bool find_lucky_palindrome(char *str)
{
	int len = strlen(str);
	if(len==0 || len==1)
		return false;
	/*int m[len][len];
	memset(m,0,sizeof(m));

	int max = 1;
	for(int i=0;i<len;i++)
	{
		m[i][i]=1;
		if(str[i]==str[i+1])
		{
			m[i][i+1]=1;
			max = 2;
		}
	}

	for(int l=3;l<=len;l++)
	{
		for(int i=0;i<len-l+1;i++)
		{
			int j = i+l-1;
			if(str[i]==str[j] && m[i+1][j-1]){
				m[i][j]=1;
				if(max < j-i+1)
					max = j-i+1;
			}
		}
	}*/
	int max = longestPalSubstr(str);
	if(max==1)
	return false;
	if(max==2 || max==3)
		return true;
	else
	{
		//int primes[]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103									,107,109,113,127,131};
		//int p_size = sizeof(primes)/sizeof(int);
		int flag = 0;
		for(int i=2;i<=sqrt(max);i++)
		{
			if(max % i == 0)
			{
				flag = 1;
				break;
			}
		}
		if(flag)
			return false;
		return true;
	}

}

int main()
{
    char str[1001];
    int t;
    scanf("%d",&t);
    while(t--)
    {
    	scanf("%s",str);
    	bool x = find_lucky_palindrome(str);
    	if(x)
    	printf("YES\n");
    	else
    	printf("NO\n");
    }
    return 0;
}

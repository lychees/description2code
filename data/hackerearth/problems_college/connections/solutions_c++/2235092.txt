#include <bits/stdc++.h>
using namespace std;

int p[100001],rnk[100001],f[100001];

void create_sets(int x) {
	f[x]=x;
	p[x]=x;
	rnk[x]=1;
}

/*int siz(int a) {
	return rnk[a]+1;
}*/

int find_set(int a) {
	if(p[a]!=a)
		p[a]=find_set(p[a]);
	
	return p[a];
}

void merge_sets(int a,int b) {
	f[b]=a;
	int pa=find_set(a);
	int pb=find_set(b);
	if(pa==pb)
		return;
	
	p[pb]=pa;
	/*if(rnk[pa]>rnk[pb]) {
		p[pb]=pa;
		//cout<<rnk[pa]+1+1<<"\t";
	}
	else {
		p[pa]=pb;
		//cout<<rnk[pb]+1+1<<"\t";
	}
	if(rnk[pa]==rnk[pb])
		rnk[pb]+=1;
	*/
}

int main()
{
    int n,c,q;
    int x,y,i;
    cin>>n>>c;
    
    for(i=1;i<=n;++i)
    	create_sets(i);
    for(i=0;i<c;++i) {
    	cin>>x>>y;
    	merge_sets(x,y);
    }
   //for(i=1;i<=n;++i)
    //	cout<<p[i]<<" "<<f[i]<<" "<<rnk[i]<<"\n";
    cin>>q;
    while(q--) {
    	cin>>x>>y;
    	//px=find_set(x);
    	//py=find_set(y);
    	if(p[x]!=p[y])
    		cout<<"No Connection\n";
    	else if(f[y]==x || f[x]==y)
    		cout<<"Direct Connection\n";
    	else
    		cout<<"Indirect Connection\n";
    }
    	
    return 0;
}

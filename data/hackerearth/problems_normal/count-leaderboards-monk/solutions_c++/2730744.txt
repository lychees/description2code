#include<bits/stdc++.h>
using namespace std;
#define vi vector < int >
#define pii pair < int , int >
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define foreach(it,v) for( __typeof((v).begin())it = (v).begin() ; it != (v).end() ; it++ )
#define ll long long
#define llu unsigned long long
#define MOD 1000000007
#define INF 0x3f3f3f3f
#define dbg(x) { cout<< #x << ": " << (x) << endl; }
#define dbg2(x,y) { cout<< #x << ": " << (x) << " , " << #y << ": " << (y) << endl; }
#define all(x) x.begin(),x.end()
#define mset(x,v) memset(x, v, sizeof(x))
#define sz(x) (int)x.size()
ll c[1001][1001];
ll f[1001];
ll dp[1001];
ll solve(int n,int k)
{
    int i,j;
    f[0] = 1;
    for(i=1;i<=n;i++)
    {
        f[i] = (i*f[i-1])%MOD;
    }
    for(i=0;i<=n;i++)
    {
        for(j=0;j<=i;j++)
        {
            if(j == 0 || j == i)
            {
                c[i][j] = 1;
            }
            else
            {
                c[i][j] = (c[i-1][j] + c[i-1][j-1])%MOD;
            }
        }
    }
    dp[0] = 1;
    for(i=1;i<=n;i++)
    {
        for(j=0;j<i;j++)
        {
            ll ways = (c[i-1][j]*f[j+1])%MOD;
            ways = (ways*dp[i-j-1])%MOD;
            dp[i] += ways;
            dp[i] %= MOD;
        }
    }
    return (dp[n]*c[n][k])%MOD;
}
int main()
{
    int n,k;
    cin >> n >> k;
    assert(1 <= n && n <= 1000);
    assert(0 <= k && k <= n);
    ll ans = solve(n,k);
    cout << ans << endl;
    return 0;
}
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int MAXN = 200005;
const ll MOD = 1e9 + 7;

struct data {
   ll bp, sum, sl;
};

ll res;
int lazy[MAXN * 4];
data it[MAXN * 4];
int b[MAXN], l[MAXN], a[MAXN];
int n;

ll sum(ll a, ll b) { return (a + b) % MOD; }
ll mul(ll a, ll b) { return a * b % MOD; }

data combineData(data a, data b) {
   data res;
   res.bp = sum(a.bp, b.bp);
   res.sum = sum(a.sum, b.sum);
   res.sl = a.sl + b.sl;
   return res;
}

void build(int p, int l, int r) {
   if (l == r) {
      it[p].bp = it[p].sum = 0;
      it[p].sl = 1;
      return;
   }
   int mid = (l + r) >> 1;
   build(p*2, l, mid);
   build(p*2+1, mid+1, r);
   it[p] = combineData(it[p*2], it[p*2+1]);
}

void lazyUpdate(int p, int l, int r) {
   if (lazy[p]) {
      it[p].bp = sum(sum(it[p].bp, mul(mul(2, it[p].sum), lazy[p])), mul(it[p].sl, mul(lazy[p], lazy[p])));
      it[p].sum = sum(it[p].sum, mul(it[p].sl, lazy[p]));
      if (l != r) {
         lazy[p*2] += lazy[p]; lazy[p*2+1] += lazy[p];
      }
      lazy[p] = 0;
   }
}

void update(int p, int l, int r, int u, int v) {
   lazyUpdate(p, l, r);
   if (l == u && r == v) {
      it[p].bp = sum(sum(it[p].bp, mul(2, it[p].sum)), it[p].sl);
      it[p].sum = sum(it[p].sum, it[p].sl);
      if (l != r) {
         lazy[p*2]++; lazy[p*2+1]++;
      }
      return;
   }
   int mid = (l + r) >> 1;
   if (v <= mid) {
      update(p*2, l, mid, u, v);
      lazyUpdate(p*2+1, mid+1, r);
   }
   else if (u > mid) {
      update(p*2+1, mid+1, r, u, v);
      lazyUpdate(p*2, l, mid);
   }
   else {
      update(p*2, l, mid, u, mid);
      update(p*2+1, mid+1, r, mid+1, v);
   }
   it[p] = combineData(it[p*2], it[p*2+1]);
}

int query(int p, int l, int r, int u, int v) {
   lazyUpdate(p, l, r);
   if (l == u && r == v) return it[p].bp;
   int mid = (l + r) >> 1;
   if (v <= mid) return query(p*2, l, mid, u, v);
   else if (u > mid) return query(p*2+1, mid+1, r, u, v);
   else return (query(p*2, l, mid, u, mid) + query(p*2+1, mid+1, r, mid+1, v)) % MOD;
}

int main() {
//   freopen("input.txt", "r", stdin);

   scanf("%d", &n);
   for (int i = 1; i <= n; i++) {
      scanf("%d", &a[i]);
      b[i] = l[a[i]] + 1;
      l[a[i]] = i;
   }

   build(1, 1, n);
   for (int i = 1; i <= n; i++) {
      update(1, 1, n, b[i], i);
      res = (res + query(1, 1, n, 1, i)) % MOD;
   }
   cout << res << endl;

   return 0;
}

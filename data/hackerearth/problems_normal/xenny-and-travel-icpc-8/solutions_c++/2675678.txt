//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef pair<ll, int> pli;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2);
}


int n, s, t, road[1255][1255], rail[1255][1255];
int dist_road[2][1255], dist_rail[2][1255];

void dijkstra1(int idx){

    for(int i=1;i<=n;i++)
        dist_road[idx][i] = INF;
    priority_queue<ii> pq;
    if(idx == 0){
        dist_road[idx][s] = 0;
        pq.push(ii (0, s));
    }
    else{
        dist_road[idx][t] = 0;
        pq.push(ii (0, t));
    }

    while(!pq.empty()){

        int v = pq.top().ss, d = -pq.top().ff;
        pq.pop();
        if(d > dist_road[idx][v])    continue;
        for(int i=1;i<=n;i++){
            int dd = d + (idx == 0 ? road[v][i] : road[i][v]);
            if(dd < dist_road[idx][i]){
                dist_road[idx][i] = dd;
                pq.push(ii (-dd, i));
            }
        }
    }
}


void dijkstra2(int idx){

    for(int i=1;i<=n;i++)
        dist_rail[idx][i] = INF;
    priority_queue<ii> pq;
    if(idx == 0){
        dist_rail[idx][s] = 0;
        pq.push(ii (0, s));
    }
    else{
        dist_rail[idx][t] = 0;
        pq.push(ii (0, t));
    }

    while(!pq.empty()){

        int v = pq.top().ss, d = -pq.top().ff;
        pq.pop();
        if(d > dist_rail[idx][v])    continue;
        for(int i=1;i<=n;i++){
            int dd = d + (idx == 0 ? rail[v][i] : rail[i][v]);
            if(dd < dist_rail[idx][i]){
                dist_rail[idx][i] = dd;
                pq.push(ii (-dd, i));
            }
        }
    }
}


int main()
{
    ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    cin>>n;
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            cin>>road[i][j];
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            cin>>rail[i][j];

    cin>>s>>t;
    dijkstra1(0);
    dijkstra1(1);
    dijkstra2(0);
    dijkstra2(1);

// for(int i=1;i<=n;i++)   cout<<dist_road[0][i]<<" ";cout<<endl;
// for(int i=1;i<=n;i++)   cout<<dist_road[1][i]<<" ";cout<<endl;
// for(int i=1;i<=n;i++)   cout<<dist_rail[0][i]<<" ";cout<<endl;
// for(int i=1;i<=n;i++)   cout<<dist_rail[1][i]<<" ";cout<<endl;

    int ans = INF;
    for(int i=1;i<=n;i++)
        if(i != s && i != t){
            ans = min(ans, dist_road[0][i]+dist_rail[1][i]);
            ans = min(ans, dist_rail[0][i]+dist_road[1][i]);
        }

    cout<<ans;
    return 0;
}











#include <iostream>
#include <cstdio>
#include <cassert>
#include <ctime>
#include <cmath>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0? -x : x; }
template <typename T> T gcd(T a, T b) { return b? gcd(b, a % b) : a; }
#define foreach(a, b) for(typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;

const int MAXN = 303;
const int MOD = 1000000009;

int f[MAXN][MAXN][2];

void add(int &x, const int d)
{
    x += d;
    if (x >= MOD) {
        x -= MOD;
    }
}

int main(int /* argc */, char** /* argv */)
{
    ios_base::sync_with_stdio(false);
    #ifdef LOCAL
    assert(freopen("inp", "r", stdin));
    #endif
    string s, p;
    cin >> s >> p;
    int n = s.size();
    for (int i = 0; i < n; ++i) {
        f[i][i + 1][s[i] - '0'] = 1;
    }
    for (int j = 1; j <= n; ++j) {
        for (int i = j - 1; i >= 0; --i) {
            for (int k = i; k < j; ++k) {
                for (int l = 0; l < 2; ++l) {
                    if (f[i][k][l]) {
                        for (int r = 0; r < 2; ++r) {
                            if (f[k][j][r]) {
                                int d = f[i][k][l] * (long long)f[k][j][r] % MOD;
                                int v = 0;
                                switch (p[k - 1]) {
                                    case 'a':
                                        v = l && r;
                                    break;
                                    case 'o':
                                        v = l || r;
                                    break;
                                    case 'x':
                                        v = l ^ r;
                                    break;
                                }
                                add(f[i][j][v], d);
                            }
                        }
                    }
                }
            }
        }
    }

    int m;
    cin >> m;
    for (int i = 0; i < m; ++i) {
        int l, r;
        string res;
        cin >> l >> r >> res;
        int v = res.size() == 4;
        cout << f[l - 1][r][v] << endl;
    }

    return 0;
}

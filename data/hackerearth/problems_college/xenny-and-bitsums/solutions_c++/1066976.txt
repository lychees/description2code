// A O(Logn) complexity program to count set bits in all numbers from 1 to n
#include <stdio.h>
 
/* Returns position of leftmost set bit. The rightmost
   position is considered as 0 */
long long int getLeftmostBit (long long int n)
{
   long long int m = 0;
   while (n  > 1)
   {
      n = n >> 1;
      m++;
   }
   return m;
}
 
/* Given the position of previous leftmost set bit in n (or an upper
   bound on leftmost position) returns the new position of leftmost
   set bit in n  */
long long int getNextLeftmostBit (long long int n, long long int m)
{
   long long int temp = 1 << m;
   while (n  < temp)
   {
      temp = temp >> 1;
      m--;
   }
   return m;
}
 
// The main recursive function used by countSetBits()
long long int _countSetBits(long long int n, long long int m);
 
// Returns count of set bits present in all numbers from 1 to n
long long int countSetBits(long long int n)
{
   // Get the position of leftmost set bit in n. This will be
   // used as an upper bound for next set bit function
   long long int m = getLeftmostBit (n);
 
   // Use the position
   return _countSetBits (n, m);
}
 
long long int _countSetBits(long long int n, long long int m)
{
    // Base Case: if n is 0, then set bit count is 0
    if (n == 0)
       return 0;
 
    /* get position of next leftmost set bit */
    m = getNextLeftmostBit(n, m);
 
    // If n is of the form 2^x-1, i.e., if n is like 1, 3, 7, 15, 31,.. etc, 
    // then we are done. 
    // Since positions are considered starting from 0, 1 is added to m
    if (n == ((unsigned int)1<<(m+1))-1)
        return (unsigned int)(m+1)*(1<<m);
 
    // update n for next recursive call
    n = n - (1<<m);
    return (n+1) + countSetBits(n) + m*(1<<(m-1));
}
 
// Driver program to test above functions
int main()
{
	long long int t,a,b,r1,r2;
	scanf("%lld",&t);
	while(t--)
	{
		scanf("%lld %lld",&a,&b);
		r1=countSetBits(a-1);
		r2=countSetBits(b);
		r1=r2-r1;
		printf("%lld\n",r1);
	}
   return 0;
}

#include <bits/stdc++.h>
using namespace std ;
#define LL long long int
#define ft first
#define sd second
#define PII pair<int,int>
#define MAXN 200005
#define mp make_pair
#define f_in(st) freopen(st,"r",stdin)
#define f_out(st) freopen(st,"w",stdout)
#define sc(x) scanf("%d",&x)
#define pr(x) printf("%lld\n",x)
#define pb push_back
#define MOD 1000000007


int N , Q , C , X  ;
LL BIT[MAXN];
bool V[MAXN] ;
int left_child(int X){
    return 2*X ;
}

int right_child(int X){
    return 2*X+1 ;
}

void update(int idx,int val){
    while(idx <= N){
        BIT[idx] += val ;
        idx += (idx & -idx) ;
    }
}

LL query(int idx){
    LL s = 0 ;
    while(idx){
        s += BIT[idx] ;
        idx -= (idx & -idx) ;
    }
    return s ;
}

LL range_sum(int L,int R){
    return query(R) - query(L-1) ;
}

void range_update(int L,int R,int val){
    update(L,val) ;
    update(R+1,-val) ;
}

void query_update(int L,int R,int val){
    if(R < L)
        return ;
    range_update(L,R,val) ;
    query_update(left_child(L),min(right_child(R),N),val+1) ;
}
int main(){

    sc(N) , sc(Q) ;
    while(Q--){

        sc(C) , sc(X) ;
        if(!C){
            pr(2*query(X)) ;
        }else{
            int val = 0 , node , prev = -1;
            node = X ;
            if(V[X]) continue ;
            V[X] = true ;
            while(1){
                if(node == 0)
                    break ;
                if(prev == -1){
                        query_update(node,node,val) ;
                }else if(left_child(node) == prev){
                        range_update(node,node,val) ;
                        query_update(right_child(node),right_child(node),val+1) ;
                }else{
                        range_update(node,node,val) ;
                        query_update(left_child(node),left_child(node),val+1) ;
                }
                val ++ ;
                prev = node ;
                node /= 2;
            }
        }
    }
    return 0 ;
}

#include<stdio.h>
#include<map>
#include<string.h>
#include<iostream>
#include<stack>
#include<queue>
#include<stdlib.h>
#include<math.h>
#include<vector>
#include<algorithm>

#define gc getchar_unlocked()
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define mod 1000000007
#define swap(a,b) ((b)=(a)^(b)^((a)=(b)))
#define INF 100000000000000000LL

using namespace std;

typedef long long int LL;

LL power(LL b,LL p)
{	LL a=1;	while(p) { if(p&1) {	a*=b;	a%=mod;	}	b*=b;	b%=mod;	p=p>>1;	}	return a%mod;	}
	

//FILE *fin=fopen("in.txt","r");
//FILE *fout=fopen("out.txt","w");

LL in()
{
  char c;LL t=0,negative=1;
  c=gc;
  
  while((c<48||c>57)&&c!='-')c=gc;
  if(c=='-')
  {negative=-1;c=gc;}
  while(c>=48&&c<=57)
  {t=(t<<3)+(t<<1)+c-'0';c=gc;}
  return t*negative;
}

int compare(const void *a,const void *b)	//qsort(arr,n,sizeof(LL),compare)
{
  return (*(LL*)a-*(LL*)b);
}

LL mi(LL a,LL b)
{
  //(0,a) and (1,b)
  
  LL c,d=0,e=1;
  
  while(b%a!=0)
  {
    c=e;
    e=d-(b/a)*e;
    d=c;
    c=b%a;
    b=a;
    a=c;
  }
  
  return e;
}

int main()
{
	LL n,**arr,i,m,total=0,j,*size,*fact,modinv;
	LL num=1,den=1;
	
	n=in();
	arr=new LL*[n+1];
	size=new LL[n+1];
	
	for(i=0;i<n;i++)
	{
		size[i]=in();
		total+=size[i];
		arr[i]=new LL[size[i]+1];
		
		for(j=0;j<size[i];j++)
		{
			arr[i][j]=in();
		}
		
		qsort(arr[i],size[i],sizeof(LL),compare);
	}
	
	fact = new LL[total+1];
	fact[0]=1;
	
	for(i=1;i<=total;i++)
	{
		fact[i]=i*fact[i-1];
		fact[i]%=mod;
	}
	
	num=fact[total]%mod;
	
	for(i=0;i<n;i++)
	{
		int duplicates=1;
		
		for(j=1;j<size[i];j++)
		{
			if(arr[i][j]==arr[i][j-1])
			{
				duplicates++;
			}
			else
			{
				num*=(fact[duplicates]);
				num%=mod;
				duplicates=1;
			}
		}
		num*=(fact[duplicates]);
		num%=mod;
		duplicates=1;
	}
	
	
	
	
	den=1;
	
	for(i=0;i<n;i++)
	{
		den*=fact[size[i]];
		den%=mod;
	}
	
	//printf("%lld %lld\n",num,den);
	
	modinv = mi(den,mod);
	if(modinv<0)
	{
		modinv+=mod;
	}
	//printf("%lld\n",modinv);
	
	printf("%lld\n",(num*modinv)%mod);
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	return 0;
}
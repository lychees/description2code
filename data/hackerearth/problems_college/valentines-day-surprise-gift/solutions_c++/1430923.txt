#include<iostream>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<vector>
#include<queue>
#include<map>
#include<stdlib.h>
#include<algorithm>
#include<limits.h>
#include<stack>
#include<deque>
#include<set>

using namespace std;

#define i_n(a)       scanf("%d",&a)
#define l_n(a)       scanf("%lld",&a)
#define LL           long long int
#define pb(a)        push_back(a)
#define pp           pair<int,int>
#define vv           vector<int>
#define vvp          vector<pp>
#define i_p(a)       printf("%d\n",a)
#define l_p(a)       printf("%lld\n",a)
#define pnt(expr)    printf(#expr"\n")
#define reset(a,val) memset(a,val,sizeof(a))
#define m1           1000000000
#define mod          1000000007
#define pr(cn,x)     ((cn).find(x)!=(cn).end())
#define tr(cn,it)    for(typeof((cn).begin()) it=(cn).begin();it!=(cn).end();it++)
#define read()       freopen("fraud.in","r",stdin)
#define write()      freopen("fraud.out","w",stdout)
#define ADDMOD(a,b)  (a%mod+b%mod)%mod
#define MULMOD(a,b)  (a%mod*b%mod)%mod
#define MAX_SIZE      1000005



bool cmp(const pair<int, int>& p1, const pair<int, int>& p2)
{
    return p1.first < p2.first;
}
LL pre[11]={1,1,1,3,3,15,15,105,105,105,105};
LL sol_power(LL a,LL b)
{
    LL ans=1;
    while(b>0)
    {
        if(b&1)
            ans=MULMOD(ans,a);
        a=MULMOD(a,a);
        b=b/2;
    }
    return ans%mod;
}
LL sol(LL n)
{
    if(n<=10)
        return pre[n];
    LL ans,a,b,x,y;
    double temp=n;
       b=ceil(temp/4.0);
    a=sol_power(2ll,b);
 //   cout<<a<<endl;
    b=ceil(temp/5.0);
    x=sol(b);
    ans=MULMOD(a,x);
    b=ceil(temp/10.0);
    y=sol(b);
    ans=MULMOD(ans,y);
    return ans;
}
int main()
{
    int t;
    i_n(t);
    while(t--)
    {
        LL rn,n;
        l_n(n);
        rn=sol(n);
      //  l_p(rn);
        LL res=0;
        for(LL i=0;i<=5;i++)
        {
            for(LL j=0;j<=5;j++)
            {
                if(i!=j)
                res=max(res,sol_power(i*rn,j*rn)%mod);
            }
        }
        l_p(res);
    }
 return 0;
}

#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
int t = 0;
int n = 0;
int k2;
int a[2010];
int b[2010];
vector<pair<int,int> > v;
long long int dp[2010][2010];  //i???j????????????
long long int imos[2010];
long long int im(int j){
	if (j < 0){
		return 0;
	}
	return imos[j];
}
int main(){
	scanf("%d", &t);
	while (t--){
		memset(dp, -1, sizeof(dp));
		scanf("%d%d", &n, &k2);
		for (int i = 0; i < n; i++){
			scanf("%d", &a[i]);
		}
		v.clear();
		for (int i = 0; i < n; i++){
			scanf("%d", &b[i]);
			v.push_back(make_pair(a[i], b[i]));
		}
		sort(v.begin(), v.end());
		for (int i = 0; i < v.size(); i++){
			imos[i] = v[i].second;
			if (i){
				imos[i] += imos[i - 1];
			}
		}
		dp[0][0] = (v[0].second+k2)*v[0].first;
		dp[0][1] = 0;
		long long int tmp = 0;
		for (int i = 0; i < n - 1; i++){
			for (int j = 0; j <= i + 1; j++){
				if (dp[i][j]>=0){
					//use
					tmp = (im(i+1)-im(i-j)+k2)*v[i+1].first+dp[i][j];
					if (dp[i + 1][0] == -1 || dp[i + 1][0] > tmp){
						dp[i + 1][0] = tmp;
					}
					//dont use
					if (dp[i + 1][j + 1] == -1 || dp[i + 1][j + 1] > dp[i][j]){
						dp[i + 1][j + 1] = dp[i][j];
					}
				}
			}
		}
		printf("%lld\n", dp[n - 1][0]);
	}
	return 0;
}
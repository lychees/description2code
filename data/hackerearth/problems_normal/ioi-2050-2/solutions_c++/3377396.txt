#include <bits/stdc++.h>

using namespace std;


vector < pair < int , pair < int , int > > > vec;
int parent [1000 + 10];
vector < int > connect[1000 + 10];
int vis [1000 + 10];
int edge [1000 + 10][1000 + 10];
int res [1000 + 10][1000 + 10];
int org;

void dfs(int node, int tot){

    res[org][node] = tot;
    vis[node] = true;

    for(int i = 0; i < (int) connect[node].size(); i++){

        int adjacent = connect[node][i];
        if(!vis[adjacent]) dfs(adjacent, tot + edge[node][adjacent]);
    }
}


int fin (int index){

    if(index == parent[index]) return index;
    return parent[index] = fin(parent[index]);
}


bool unio (int index){

    int fi = fin((vec[index].second).first );
    int se = fin( (vec[index].second).second );
    if(fi == se) return false;
    parent[fi] = se;
    return true;

}

int main()
{

    int n , p , m  , d , t, u , v, y = 1;

    scanf("%d", &t);

    while(t--){

        scanf("%d%d%d", &n, &p, &m);


        memset(edge, 0 , sizeof edge);
        memset(parent, 0 , sizeof parent);
        memset(res, 0 , sizeof res);

        vec.clear();
        for(int i = 0; i <= n; i++) connect[i].clear();

        for(int i = 0; i < p; i++){

            scanf("%d%d%d", &u, &v, &d);
            vec.push_back({d , {u , v}});
            edge[u][v] = edge[v][u] = d;
        }

        sort(vec.begin(), vec.end());

        for(int i = 0; i < n; i++){
            parent[i] = i;
        }

        for(int i = 0; i < vec.size(); i++){

            if(unio(i)){

                u = vec[i].second.first;
                v = vec[i].second.second;
                connect[u].push_back(v);
                connect[v].push_back(u);
            }
        }

        for(int i = 1; i <= n; i++){

            memset(vis, false, sizeof vis);
            org = i;
            dfs(i , 0);
        }

        printf("Case: %d\n", y++);

        for(int i = 0; i < m; i++){

            scanf("%d%d", &u, &v);

            printf("%d\n", res[u][v]);
            //cout << abs(dist[u] - dist[v]) << "\n";
        }
    }

    return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>
using namespace std;


int root(int a[], int i){
	
	while(a[i] != i){
		i = a[i];
	}
	
	return i;
}

void uni(int a[], int i, int j){
	
	int root_i = root(a, i);
	int root_j = root(a, j);
	
	a[root_j] = root_i;
}

bool compare( pair<long long , pair<int , int>> a, pair<long long , pair<int , int>> b){
	
	return a.first < b.first;
}

int main()
{
    int t;
    cin>>t;
    int n, m;
    int x, y;
    long long cost;
    
    while(t--){
    	
    	cin>>n>>m;
    	int a[n+1];
    	
    	for(int i=1; i<=n; i++){
    		a[i] = i;
    	}
    	
    	vector < pair< long long, pair<int , int> > > v;
    	
    	for(int i = 0; i<m; i++){
    		cin>>x>>y;
    		cin>>cost;
    		
    		v.push_back(make_pair(cost, make_pair(x, y)));
    	}
    	
    	sort(v.begin(), v.end(), compare);
    	
    	long long minCost = 1;
    	for(int i=0; i<m; i++){
    		
    		x = v[i].second.first;
    		y = v[i].second.second;
    		
    		cost = v[i].first;
    		
    		if(root(a, x) == root(a, y)){
    			continue;
    		}
    		else{
    			minCost *= cost;
    			minCost %= 1000000007;
    			uni(a, x, y);
    		}
    	}
    	
    	cout<<minCost<<"\n";
    }
    return 0;
}

// #include C/C++ {
#include <bits/stdc++.h>
// }
using namespace std;
// #typedef {
typedef long long int64;
typedef pair <int, int> PII;
typedef pair <int64, int64> PLL;
// }

// #parameter{
#ifdef DEBUG_MODE

#define TYPE decltype
#define RF(filename) {freopen((filename), "r", stdin);}
#define WF(filename) {freopen((filename), "w", stdout);}
#define DF(filename) {freopen((filename), "w", stderr);}
#define eprintf printf

#else

#define TYPE __typeof
#define RF(filename) {;}
#define WF(filename) {;}
#define DF(filename) {;}
#define eprintf(...)

#endif

// #define {
#define SZ(a) ((int)(a).size())
#define X first
#define Y second
#define MP make_pair
#define L(x) ((x)<<1)
#define R(x) ((x)<<1 | 1)
#define max3(x, y, z) (max(max((x), (y)), (z)))
#define min3(x, y, z) (min(min((x), (y)), (z)))
#define BIT(x, i) (((x) >> (i)) & 1)
#define ALL(it) (it).begin(), (it).end()
#define FILL(__space, __val) memset(__space, __val, sizeof(__space))
#define MOVE(__spaceTo, __spaceFrom) memmove(__spaceTo, __spaceFrom, sizeof(__spaceTo))
#define UNIQUE(__vector) sort(ALL(__vector)), __vector.resize(unique(ALL(__vector)) - __vector.begin())
#define FOR(it, c) for( TYPE((c).begin()) it = (c).begin(); it != (c).end(); it++)
/////////////////////////////////////////////////////////////
const double PI = acos(-1.0);
const double EPS = 1e-6;

#define MAX_N 13
#define MAX_M 1764005
#define MOD (int)(1e9+7)
#define INF ((1 << 30) - 1)
#define BINF ((1LL << 62) - 1LL)
#define NONE -1
#define NIL 0
// }

/////////////////////////////////////////////////////////////
int dp[1 << MAX_N][MAX_N][MAX_N];
int A[MAX_N], P[MAX_N];
/////////////////////////////////////////////////////////////
int main(){
	RF("input.txt");
	//	WF("output.txt");
	DF("err.txt");

	int T;
	scanf("%d", &T);
	while (T--){
		int N;
		scanf("%d", &N);
		for (int i = 0; i < N; i++) scanf("%d", A + i);
		for (int i = 0; i < N; i++) scanf("%d", P + i);
		for (int s = 0; s < (1 << N); s++){
			int one = 0;
			for (int x = s; x > 0; x >>= 1)
				one += x & 1;
			for (int a = 0; a < N; a++) if (BIT(s, a)) for (int b = 0; b < N; b++) if (a != b and BIT(s, b)){
				if (one <= 2){
					dp[s][a][b] = 0;
					continue;
				}
				int &res = dp[s][a][b];
				res = INF;
				for (int c = 0; c < N; c++) if (a != c and b != c and BIT(s, c))
					res = min(res, dp[s ^ (1 << a)][b][c] + (A[a] ^ A[b] ^ A[c])*P[one - 1]);
			}
		}
		int res = INF;
		for (int a = 0; a < N; a++) for (int b = 0; b < N; b++) if (a != b)
			res = min(res, dp[(1 << N) - 1][a][b]);
		printf("%d\n", res);
	}
	return 0;
}
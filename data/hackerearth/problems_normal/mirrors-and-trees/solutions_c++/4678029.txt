#include <iostream>
#include<vector>
#include<cmath>
using namespace std;

/*
void right_printer(vector<int> &v, int index){
	if(v[index]==0)
		return;
	cout << v[index] << endl;
	if(v[2*index+2] != 0){  // right child exists
		index = 2*index+2;
	}
	else{
		index = 2*index+1;
	}
	right_printer(v, index);
}
void left_printer(vector<int> &v, int index){
	if(v[index]==0)
		return;
	cout << v[index] << endl;
	if(v[2*index+1] != 0){  // left child exists
		index = 2*index+1;
	}
	else{
		index = 2*index+2;
	}
	left_printer(v, index);
}

void mirror_printer(vector<int> &v){
	if(v[0]==0) return;
	cout << v[0] << endl;
	right_printer(v, 2);
	left_printer(v, 1);
}
// failed for this test case
//31
//1 2 3 4 5 8 0 0 0 6 7 9 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 

*/

/*
void right_printer(vector<int> &v, int maxl){
	int level = 1;
	int x, start, end, zeroes;
	while(level <= maxl){
		x = (int)pow(2, level-1); 
		start = 2*x+x-1, end = start+x;
		zeroes = 0;
		//cout << "For level " << level << " start and end are " << start << " " << end << endl;
		for(int i=end-1; i>=start; i--){
			if(v[i]==0) zeroes++;
			else{
				cout << v[i] << endl;
				level++;
				break;
			}
		}
		//cout << "Number of zeroes at this level is " << zeroes << endl;
		if(zeroes == x){ // no child in basket
			return;
		}
	}
}

void left_printer(vector<int> &v, int maxl){
	int level = 1;
	int x, start, end, zeroes;
	while(level <= maxl){
		x = (int)pow(2, level-1); 
		start = 2*x-1, end = start+x;
		zeroes = 0;
		//cout << "For level " << level << " start and end are " << start << " " << end << endl; 
		for(int i=start; i<end; i++){
			if(v[i]==0) zeroes++;
			else{
				cout << v[i] << endl;
				level++;
				break;
			}
		}
		//cout << "Number of zeroes at this level is " << zeroes << endl;
		if(zeroes == x){ // no child in basket
			return;
		}
	}
	
}

// fails for this test case
// 15
// 2 4 5 7 15 0 0 0 0 0 0 0 0 0 0
*/

/*
void mirror_printer(vector<int> &v, int size){
	if(v[0]==0) return;
	cout << v[0] << endl;
	int maxLevels = (int)log2(size);
	//cout << maxLevels << endl;
	right_printer(v, maxLevels);
	left_printer(v, maxLevels);
}
*/

int main()
{
    //cout << "Hello World!" << endl;
    int t, in;
    long long int n;
    
    cin >> t;
    while(t--){
    	cin >> n;
    	vector<int> v;
    	for(int i=0; i<n; i++){
    		cin >> in;
    		v.push_back(in);
    	}
    	//mirror_printer(v, n);
    	
    	vector<int> righty;
    	vector<int> lefty;
    	
    	cout << v[0] << endl;
    	
    	int level = 1, maxl = (int)log2(n);
		int x, start, end, rfound, leftboundary;
		
		while(level <= maxl){
			x = (int)pow(2, level-1); 
			start = 2*x-1, end = 2*start;
			rfound = 0;
			leftboundary = 0;
			
			for(int i=end; i>=start; i--){
				if(v[i]){
					if(rfound)
						leftboundary = v[i];
					else{
						righty.push_back(v[i]);
						rfound = 1;
					}
				}
			}
			if(leftboundary) lefty.push_back(leftboundary);
			level++;
		}	
		
		int rsize=righty.size(), lsize=lefty.size();
		for(int j=0; j<rsize; j++)
			cout << righty[j] << endl;
		for(int j=0; j<lsize; j++)
			cout << lefty[j] << endl;
    	cout << endl;
    }
    return 0;
}

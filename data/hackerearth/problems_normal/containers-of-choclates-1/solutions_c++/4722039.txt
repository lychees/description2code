#include <bits/stdc++.h>

using namespace std;

int arr[20005];
bool incl[20005];
bool vis[20005];
vector < vector<int> > v(20005);

int raikage(int s)
{
	vis[s]=true;
	queue < pair<int,int> > q;
	q.push(pair<int,int>(s,0));
	pair<int,int> top;
	int sum0=0,sum1=0;
	while(!q.empty())
	{
		top=q.front();
		//cout<<top.first<<" ";
		q.pop();
		if(top.second==0)
		{
			sum0++;
			for(int i=0;i<v[top.first].size();i++)
			{
				if( vis[v[top.first][i]]==false)
				{
					q.push(pair<int,int>(v[top.first][i],1));
					vis[v[top.first][i]]=true;	
				}
			}
		}
		if(top.second==1)
		{
			sum1++;
			for(int i=0;i<v[top.first].size();i++)
			{
				if( vis[v[top.first][i]]==false)
				{
					q.push(pair<int,int>(v[top.first][i],0));
					vis[v[top.first][i]]=true;	
				}
			}
		}
	}
	return max(sum0,sum1);
}

int main()
{
	int t,a,b,n,k=1;
	cin>>t;
	while(t--)
	{	
		cin>>n;
		for(int i=0;i<20005;i++) arr[i]=i;
		memset(incl,false,sizeof(incl));
		memset(vis,false,sizeof(vis));
		for(int i=0;i<20005;i++) v[i].clear();
		for(int i=0;i<n;i++)
		{
			cin>>a>>b;
			incl[a]=true,incl[b]=true;
			v[a].push_back(b);
			v[b].push_back(a);
			//find_union(a,b);
		}
		int ans=0;
		for(int i=0;i<20005;i++)
		{
			if(incl[i]==true && vis[i]==false)
			{
				ans+=raikage(i);
			}
		}
		printf("Case %d: %d\n",k++,ans);
		//cout<<"Case :"ans<<"\n";
	}
	return 0;
}
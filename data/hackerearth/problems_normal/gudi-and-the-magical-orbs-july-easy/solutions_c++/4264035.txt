#include <iostream>
#include<bits/stdc++.h>
using namespace std;
bool dp[110][110][550]={0};
int n,m;
/*int gridFunc(int grid[][150],int startx,int starty,int orbs,int k)
{
	if(startx>=n || starty>=m || orbs>k)
		return false;
	
	if(startx==(n-1) && starty==(m-1))
	{
		dp[startx][starty][orbs+grid[startx][starty]]=true;
		return true;
	}
	if(dp.find(startx)!=dp.end() && dp[startx].find(starty)!=dp[startx].end() && dp[startx][starty].find(orbs+grid[startx][starty])!=dp[startx][starty].end())
		return dp[startx][starty][orbs+grid[startx][starty]];
	bool temp=gridFunc(grid,startx,starty+1,orbs+grid[startx][starty],k);
	bool temp1=gridFunc(grid,startx+1,starty,orbs+grid[startx][starty],k);
	bool temp2=gridFunc(grid,startx+1,starty+1,orbs+grid[startx][starty],k);
	dp[startx][starty][orbs+grid[startx][starty]]=max(temp,max(temp1,temp2));
	return dp[startx][starty][orbs+grid[startx][starty]];
}*/
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    	int k,temp;
    	cin>>n>>m>>k;
    	int grid[n][150];
    	for(int i=0;i<n;i++)
    	{
    		for(int j=0;j<m;j++)
    		{
    			cin>>temp;
    			grid[i][j]=temp;
    			for(int z=0;z<550;z++)
    				dp[i][j][z]=false;
    		}
    	}
    	//dp.clear();
    	//gridFunc(grid,0,0,0,k);
    	dp[0][0][grid[0][0]]=true;
    	for(int i=0;i<n;i++)
    	{
    		for(int j=0;j<m;j++)
    		{
    			for(int z=grid[i][j];z<=k;z++)
    			{
    				if(i==0 && j==0)
    				{
    					dp[i][j][z]=true;
    					break;
					}
    				if(i==0)
	    			{
	    				dp[i][j][z]=(dp[i][j][z] || dp[i][j-1][z-grid[i][j]]);
					}	
					else if(j==0)
					{
						dp[i][j][z]=(dp[i][j][z] || dp[i-1][j][z-grid[i][j]]);
					}
					else{
						dp[i][j][z]=(dp[i][j][z] || dp[i-1][j-1][z-grid[i][j]] || dp[i-1][j][z-grid[i][j]] || dp[i][j-1][z-grid[i][j]]);
					}
				}
			}
		}
    	bool flag=false;
    	for(int i=k;i>0;i--)
    	{
    		if(dp[n-1][m-1][i])
    		{
    			flag=true;
    			cout<<i<<endl;
    			break;
			}
		}
		if(!flag)	
			cout<<"-1"<<endl;
		
    		
    }
    return 0;
}

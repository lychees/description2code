#include <bits/stdc++.h>
using namespace std;
const int l= 1e3 + 1;
const long long M = 1e9 + 7;

vector<int> e(l),parent(l);

int root(int i){
	if(i!=parent[i]){
		parent[i]=root(parent[i]);
	}
	return parent[i];
}

void merge(int a,int b){
	a=root(a);
	b=root(b);
	if(a!=b){
		parent[a]=b;
	}
}

int main()
{
    int n,i,k,x,y;
    cin>>n;
    for(i=1;i<=n;i++){
    	cin>>e[i];
    }
    for(i=1;i<=n;i++){
    	parent[i]=i;
    }
    cin>>k;
    while(k--){
    	cin>>x>>y;
    	merge(x,y);
    }
    for(i=1;i<=n;i++){
    	parent[i]=root(i);
    }
    
    map<int, multiset<int> > m;
    for(i=1;i<=n;i++){
    	m[parent[i]].insert(e[i]);
    }
    long long ans=1;
    for(auto f: m){
    	long long cnt=1;
    	int low = *(f.second.begin());
    	f.second.erase(f.second.begin());
    	for(auto bar : f.second){
    		if(bar != low)
    			break;
    		cnt++;
    	}
    	ans *= cnt;
    	ans %= M;
    }
    cout<<ans<<endl;
    return 0;
}

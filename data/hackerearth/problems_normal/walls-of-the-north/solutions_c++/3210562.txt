#include <iostream>
using namespace std;
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <cmath>
#include <set>
#include <ctime>
#include <stack>
#include <list>
#include <cassert>
#include <iomanip>
#include <deque>
#include <sstream>
#include <fstream>
typedef pair<int,int> pii;
#define rep(i,j,n) for(i=j;i<n;i++)
#define pb push_back
#define ff first
#define ss second 
#define lli long long int
#define get getchar

inline int scan() {
    int n=0,s=1;
    char p=get();
    if(p=='-')  s=-1;
    while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=get();
    if(p=='-') s=-1,p=get();
    while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=get(); }
    return n*s;
}
const int MaxVal = 2e5 + 100;
int tree[2][MaxVal];
const int maxn = 1e5 + 100;
map <int,int> name;
int arr[maxn];
int read(int idx, int ii) {
	int sum = 0;
	while(idx) {
		sum = max(sum,tree[ii][idx]);
		idx-=(idx&-idx);
	}
	return sum;
}
 
void update(int idx, int val, int ii) {
	while(idx<=MaxVal) {
		tree[ii][idx] = max(val,tree[ii][idx]);
		idx+=(idx&-idx);
	}
}
int main() {
        
    ios::sync_with_stdio(false);
    
    //clock_t start = std::clock();
    //freopen ("inp.txt","r",stdin);
    //freopen ("out.txt","w",stdout);
    //cout << "Time: " << (std::clock() - start) / (double)(CLOCKS_PER_SEC / 1000) << " ms" << std::endl;

    int t;
    cin >> t;
    
    while (t--) {
    	memset(tree,0,sizeof(tree));
    	int n;
    	cin >> n;
    	vector <int> tmp;
    	for (int i = 0; i < n; i++){
    		cin >> arr[i];	
    		tmp.pb(arr[i]);
    	} 
    	sort(tmp.begin(),tmp.end());
    	int cnt = 2;
    	name.clear();
    	name[tmp[0]] = cnt++;
		
		for (int i = 1; i < tmp.size(); i++) {
			if (tmp[i] == tmp[i-1]) continue;
			name[tmp[i]] = cnt++;
		}
    	int answer = 0;
    	for (int i = 0; i < n; i++) {
    		int val = name[arr[i]];
    		int val2 = cnt - val + 3;
    		int maxi,mini;
    		maxi = read(val,0);
    		mini = read(val2,1);
    		maxi++;
    		mini++;
    		answer = max(answer,maxi);
    		answer = max(answer,mini);
    		update(val,mini,0);
    		update(val2,maxi,1);
    	}
    	cout << answer << endl;
    }
    
    return 0;
        
}
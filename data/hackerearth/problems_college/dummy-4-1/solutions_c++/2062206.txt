#include <stdio.h>
#include <iostream>
#include <cstring>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <string>
#include <sstream>
#include <map>
#include <algorithm>
#include <limits>
 
#define maxN(a,b) ((a>b)?(a):(b))
#define minN(a,b) ((a<b)?(a):(b))
#define INF (int)10e9
#define ABS(n)	((n>0)? n:(-1*n))
#define NINF -(int)10e9
#define eps 10e-9
#define WORDSIZE 31
 
using namespace std;
 
typedef vector<int> V;
typedef pair<int,int> PII;
typedef long long ll;
typedef vector<string> VS;
typedef vector<pair<int, int> > VPII;
 
	  //U  D  L  R
int dx[] = {0, 0, 1, -1};
int dy[] = {1,-1, 0, 0};
 
bool visited[105][105];
 
int n;
int cnt;
void back_tracking(int x, int y){
	if( x == n && y == n){ cnt++; return;}
	else if( x > n || y > n || x < 1 || y < 1) return ;
	else {
		for(int i = 0; i < 4; i++){
			if( visited[x+dx[i]][y+dy[i]] == false){
				visited[x+dx[i]][y+dy[i]] = true;
				back_tracking(x+dx[i], y+dy[i]);
				visited[x+dx[i]][y+dy[i]] = false;
			}
		}
	}
}
int main(){
	scanf("%d", &n);
	memset(visited, true, sizeof(visited));
	int k;
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++){
			scanf("%d", &k);
			if(k == 0) 
				visited[i][j] = false;
		}
 
	cnt = 0;
	visited[1][1] = true;
	back_tracking(1,1);
	cout <<cnt<<endl;
 
	return 0;
}
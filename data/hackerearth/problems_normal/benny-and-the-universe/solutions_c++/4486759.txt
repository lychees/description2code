#include <cstdio>
#include <iostream>
#include <sstream>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <functional>
#include <bitset>
#include <utility>
#include <ctime>
#include <cassert>
#include <climits>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int,int> pii;
typedef vector<pii > vii;
typedef vector<pair<int, pair<int, int> > > viii;
typedef pair<ll,ll> pll;
typedef vector<string> vs;
typedef vector<vii> vvii;

#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define MEM(a,b) memset(a,(b),sizeof(a))
#define tr(c,it) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define all(a) a.begin(),a.end()
#define loop(x,a,b) for(int (x) = (a);(x)<(b);(x)++)
#define rep(x,n)   for(int (x)=0;(x)<(n);(x)++)
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define ain(a,n) int ((a)[(n)]); for(int i=0; i<(n); i++) cin>>((a)[i])  
#define md 1000000007
#define MAXN 200005
//#define N 1050
#define SUM 262*501

//#define TRACE
 
#ifdef TRACE
template<class T, class U>
ostream& operator<<(ostream& out, const pair<T,U>& a){out<<"["<<a.first<<" "<<a.second<<"]";return out;}
template<class T>
ostream& operator<<(ostream& out, const vector<T>& a){out<<"[ ";for(auto &it:a)out<<it<<" ";out<<"]";return out;}
template<class T>
ostream& operator<<(ostream& out, const set<T>& a){out<<"[ ";for(auto &it:a)out<<it<<" ";out<<"]";return out;}
template<class T>
ostream& operator<<(ostream& out, const multiset<T>& a){out<<"[ ";for(auto &it:a)out<<it<<" ";out<<"]";return out;}
template<class T,class U>
ostream& operator<<(ostream& out, const map<T,U>& a){for(auto &it:a)out<<it.first<<" -> "<<it.second<<" | ";return out;}
template<class T,class U>
ostream& operator<<(ostream& out, const multimap<T,U>& a){for(auto &it:a)out<<it.first<<" -> "<<it.second<<" | ";return out;}
#define pra(a,n) cerr<<#a<<" : ";for(int i=0;i<n;++i)cerr<<a[i]<<" ";cerr<<endl;
#define praa(a,n,m) cerr<<#a<<" : "<<endl;for(int i=0;i<n;++i){for(int j=0;j<m;++j)cerr<<a[i][j]<<" ";cerr<<endl;}
#define pr(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
} 
#else
#define pr(...)
#define pra(a,n)
#define praa(a,n,m)
#endif

const int N = 1024, inf = 1000000001;
int n, q, t[N], s, dist[10 * N];
vector<pair<int, int> > edges[10 * N], transformation;

vector<int> dijkstra()	{
	vector<int> distances(s, inf);
	distances[0] = 0;
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int> > > q;
	for(int i = 0; i < s; i++)	{
		q.push({distances[i], i});
	}
	while(! q.empty())	{
		auto el = q.top();
		q.pop();
		for(int i = 0; i < s; i++)	{
			int rnew = el.second + transformation[i].second;
			int qnew = (rnew >= s);
			rnew %= s;
			qnew += transformation[i].first;
			if(distances[rnew] > qnew + distances[el.second])	{
				distances[rnew] = qnew + distances[el.second];
				q.push({distances[rnew], rnew});
			}
		}
	}
	return distances;
}

int main()	{   
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> n >> q;
    for(int i = 0; i < n; i++)	{
    	cin >> t[i];
    }

    sort(t, t + n);
    s = t[0];
    vector<int> temp(s, inf);
    temp[0] = 1;
    for(int i = 0; i < n; i++)	{
    	temp[t[i]%s] = min(temp[t[i]%s], t[i]/s);
    }
    for(int i = 0; i < s; i++)	{
    	transformation.push_back({temp[i], i});
    }

    auto distances = dijkstra();

    for(int i = 0; i < q; i++)	{
    	int x;
    	cin >> x;
    	int r1 = x % s;
    	int q1 = x / s;
    	if(distances[r1] <= q1)	{
    		cout << "YES\n";
    	}	else	{
    		cout << "NO\n";
    	}
    }
}








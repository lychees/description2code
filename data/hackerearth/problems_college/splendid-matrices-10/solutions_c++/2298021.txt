#include <iostream>
#include <math.h>
using namespace std;

int main(void) {
	int H_Pattern[5000],V_Pattern[5000];
	int n,p,i,j,last=2,H_Size,V_Size;
	
	cin >> n;
	
// Generate the horizontal pattern
	/* Initial pattern [1 2] then the pattern continues to add even powers of 2
	1+2^2=5 2+2^2=6 thus [1 2 5 6]
	add 2^4 to this array of 4 numbers [1 2 5 6 17 18 21 22]*/
	H_Pattern[0]=1;H_Pattern[1]=2;
	for(p=2;last<pow(2,n);p=p+2){
		i=0;
		while(i<last){
			H_Pattern[i+last]=H_Pattern[i]+pow(2,p);
			i++;
		}
		last=i+last;
	}
	H_Size=last; 	// Save the size of the horizontal pattern array.
	last=2; 		//reset last so that it can 
	
// Generate the vertical pattern
/* Initial pattern [1 3] then the pattern continues to add odd powers of 2
	1+2^3=9 3+2^3=11 thus [1 3 9 11]
	add 2^5 to this array of 4 numbers [1 3 9 11 33 35 41 43] */
	
	V_Pattern[0]=1;V_Pattern[1]=3;
	for(p=3;last<pow(2,n);p=p+2){
		i=0;
		while(i<last){
			V_Pattern[i+last]=V_Pattern[i]+pow(2,p);
			i++;
		}
		last=i+last;
	}
	V_Size=last;

// Merge the patterns and print

for(i=0;i<V_Size;i++){
	for(j=0;j<H_Size;j++){
		cout << (H_Pattern[j]+V_Pattern[i]-1) << " ";
	}	
	cout << ("\n");
}
	return 0;
}
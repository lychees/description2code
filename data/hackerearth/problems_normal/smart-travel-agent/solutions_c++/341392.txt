#include <bits/stdc++.h>
using namespace std;
vector<pair<int,int> > v[1000];
int parent[1000];
int dist[1000];
void bfs(int xx,int n) {
	memset(dist, 100000, sizeof(dist));
	int i, j;
	queue<int> q;
	q.push(xx);
	dist[xx] = 9999;
	parent[xx] = 0;
	while(!q.empty()) {
		int u = q.front();
		q.pop();
		//vis[u] = true;
		for(i = 0; i < v[u].size(); i++) {
		
					
					if(min(dist[u],v[u][i].second) > dist[v[u][i].first] && v[u][i].first != xx) {
						parent[v[u][i].first] = u;
						dist[v[u][i].first] = min(dist[u],v[u][i].second);
						q.push(v[u][i].first);
					}
			
			}
	}
	
	//cout << dist[3];
}
void printpath(int st,int en) {
	if(st == en) {
		cout << st + 1<< " ";
		
	return;
}
	printpath(st,parent[en]);
	cout << en + 1<< " " ;
	
}

int main()
{
	int i, j, m, u, vv, p, n,st ,en, ans = 0, pop;
	cin >> n >> m;
	for( i = 0; i < m; i++) {
		cin >> u >> vv >> p;
		v[u - 1].push_back(make_pair(vv - 1, p));
		v[vv - 1].push_back(make_pair(u - 1, p));
	}
	cin >> st >> en >> pop;
		st--;en--;
	bfs(st, en);
	int val = dist[en];
	val--;
	ans = pop/val;
	if(pop%val != 0) ans++;
	printpath(st,en);
	cout << endl << ans << endl;
	return 0;
}
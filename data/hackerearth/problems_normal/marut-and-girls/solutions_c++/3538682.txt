#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <iterator>
#include <vector>
#include <sstream>
#include <string>

using namespace std;

// Is A in B?
bool itSubsets(const vector<int>& a, const vector<int>& b) {
	int j = 0;
	for (int i = 0; i < b.size(); ++i) {
		while ( j < a.size() && a[j] < b[i]) ++j;
		if (j == a.size() || a[j] != b[i]) return false;
	}
	return true;
}

char buff[100000];

inline bool isDigit(int d) { return '0' <= d && d <= '9'; }

vector<int> read_integers_from_line() {
	vector<int> ints; 
	gets(buff);
	int len = strlen(buff);
	int cur = 0;
	bool read_digit = false;
	for (int i = 0; i < len; ++i) {
		if (isDigit(buff[i])) {
			cur = cur * 10 + (buff[i] - '0');
			read_digit = true;
		} else {
			ints.push_back(cur);
			cur = 0;
			read_digit = false;
		}
	}
	if (read_digit) ints.push_back(cur);
	return ints;
}

int main() {
	int N, M;
	// freopen("in.in.txt", "r", stdin);
	scanf("%d", &M);
	vector<int> target(M);
	for (int i = 0; i < M; ++i) scanf("%d", &target[i]);
	sort(target.begin(), target.end());
	scanf("%d\n", &N);
	int count = 0;
	for (int i = 0; i < N; ++i) {
		vector<int> temp = read_integers_from_line();
		// for (int l : temp) printf("%d ", l);
		// printf("\n");
		sort(temp.begin(), temp.end());
		if (itSubsets(temp, target)) count++;
	}
	printf("%d\n", count);
	// printf("%d\n", itSubsets(vector<int>({-2, -1, 1, 3, 4, 6, 7, 8, 9 , 10}), vector<int>({1, 4, 8})));
	return 0;
}	
	
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
#include <bitset>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define forr(i, l, r) for(int i = int(l); i <= int(r); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define y1 __y1
#define sqr(x) ((x) * (x))
 
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
 
const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-9;
const ld pi = ld(3.1415926535897932384626433832795);
 
inline bool in(int i, int j, int n, int m) {
    return i >= 1 && i <= n && j >= 1 && j <= m;
}
 
inline int myrand() {
    return (rand() ^ (rand() << 15));
}
 
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
 
const int N = 1111;

int C, n1, n5, n10;

inline void gen()
{
	return;
}

inline bool read()
{
	if(!(cin >> C >> n1 >> n5 >> n10)) return false;
	return true;
}

int dp[155][444][222];

inline void solve()
{
	forn(i, 155) forn(j, 444) forn(k, 222) dp[i][j][k] = INF;
	dp[0][n5][n10] = 0;
	int initSum = n1 + n5 * 5 + n10 * 10;

	for(int i = 0; i < C; i++)
	{
		for(int j = 0; j < 444; j++)
		{
			for(int k = 0; k < 222; k++)
			{
				int cur = dp[i][j][k];
				if(cur == INF) continue;
				//cerr << "i j k cur == " << i << ' ' << j << ' ' << k << ' ' << cur << endl;
				int Buy = i * 8;
				int Have = j * 5 + k * 10;
				int s = initSum - Buy;
				//sumBuy = initSum - sumBuy;
				int One = s - Have;
				assert(One >= 0);
				//1 + 1 + ... + 1(8 times)
				if(One >= 8)
				{
					dp[i + 1][j][k] = min(dp[i + 1][j][k], cur + 8);
				}

				//10
				if(k >= 1)
				{
					dp[i + 1][j][k - 1] = min(dp[i + 1][j][k - 1], cur + 1);
				}

				if(k >= 1 && One >= 3)
				{
					dp[i + 1][j + 1][k - 1] = min(dp[i + 1][j + 1][k - 1], cur + 4);
				}

				//5 + 1 + 1 + 1
				if(One >= 3 && j >= 1)
				{
					dp[i + 1][j - 1][k] = min(dp[i + 1][j - 1][k], cur + 4);
				}

				//1 + .. + 1(13 times)
				if(One >= 13)
				{
					dp[i + 1][j + 1][k] = min(dp[i + 1][j + 1][k], cur + 13);
				}

				//5 + 5
				if(j >= 2)
				{
					dp[i + 1][j - 2][k] = min(dp[i + 1][j - 2][k], cur + 2);
				}

				if(One >= 18)
				{
					dp[i + 1][j][k + 1] = min(dp[i + 1][j][k + 1], cur + 18);
				}

				if(j >= 4)
				{
					dp[i + 1][j - 4][k + 1] = min(dp[i + 1][j - 4][k + 1], cur + 4);
				}

				if(j >= 3 && One >= 3)
				{
					dp[i + 1][j - 3][k + 1] = min(dp[i + 1][j - 3][k + 1], cur + 6);
				}

				if(j >= 2 && One >= 8)
				{
					dp[i + 1][j - 2][k + 1] = min(dp[i + 1][j - 2][k + 1], cur + 10);
				}
			}
		}
	}

	int ans = INF;
	forn(j, 444) forn(k, 222) ans = min(ans, dp[C][j][k]);
	if(ans > INF / 2) ans = -1;
	cout << ans << endl;
	return;
}
 
int main() {
#ifdef _DEBUG
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
 
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;
 
    srand(int(time(NULL)));

	int T = 1;
	assert(scanf("%d", &T) == 1);

	forn(i, T)
	{
		assert(read());
		solve();
	}
 
#ifdef _DEBUG
    cerr << "TIME == " << clock() << " ms" << endl;
#endif
    return 0;
}
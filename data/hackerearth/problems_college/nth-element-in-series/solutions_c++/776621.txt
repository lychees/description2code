// asdasdasda as dasd 
#include <bits/stdc++.h>
using namespace std;
#define REP(a,b,c) for(int a=b;a<c;a++)
#define asd(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define asdf(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
#define lb() cout << string(15, =) << endl
typedef pair<int,int> ii;
typedef long long LL;

typedef vector<vector<LL> > matrix;
const LL MOD = 1000000007;
const int K = 5; // Size of the matrix
matrix mul(matrix A, matrix B) // Calculates A * B
{
    matrix C(K+1, vector<LL>(K+1));
    REP(i,0,K) REP(j,0,K) REP(k,0,K)
        C[i][j] = (C[i][j] + (A[i][k] * B[k][j])%MOD) % MOD;
    return C;
}

// computes A ^ p
matrix pow(matrix A, LL p)
{
    if (p == 1)
        return A;
    if (p % 2)
        return mul(A, pow(A, p-1));
    matrix X = pow(A, p/2);
    return mul(X, X);
}
int main(){
    LL test, n;
    cin >> test;
    while(test--){
        LL a[5], n;
        REP(i, 0, 5) {
            cin >> a[i];
        }
            LL ans = 0;
        cin >> n;
        if(n < 5) cout << a[n] << endl;
        else{
            matrix T(K+1, vector<LL>(K+1));
            T[0][0] = T[0][1] = T[0][2] = T[0][4] = T[0][3] = T[1][0] =T[2][1] = T[3][2] = T[4][3] = 1;
            T[0][3]++;
            T = pow(T, n-4);
            LL ans = 0;
            REP(i, 0, 5) {
                ans = (ans + (a[4-i]*T[0][i])%MOD)%MOD;
            }
        cout << ans << endl;
        }
    }
    return 0;
}


#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

vector<int> G[15];

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest, L, R;
    vector<int> can;
    
    repu(i, 0, 10) G[i].clear();
    G[1].push_back(3);
    G[1].push_back(5);
    repu(i, 2, 10) {
    	repu(j, 0, G[i - 1].size()) {
    		G[i].push_back(10 * G[i - 1][j] + 3);
    		G[i].push_back(10 * G[i - 1][j] + 5);
    	}
    }
    repu(i, 1, 10) repu(j, 0, G[i].size()) can.push_back(G[i][j]);
    sort(all(can));
    assert(can.size() == 1022);
    
    cin >> ntest;
    
    vector<int> ans;
    repu(t, 0, ntest) {
    	cin >> L >> R;
    	assert(L <= 1E9 && R <= 1E9 && L <= R);
    	int res = 0;
    	repu(i, 0, can.size()) {
    		if (can[i] >= L && can[i] <= R) res++;
    	}
    	ans.push_back(res);
    }
    assert(ans[4] <= 1021);
    if (ans[4] == 1021) ans[4] = 1022;
    repu(i, 0, ans.size()) cout << ans[i] << endl;
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
vector<long long> v[105];
long long val[105][1005];
long long mem[105][1005];
bool vis[105][1005];
int n, m;
long long get(int ind, int length) {
	long long ret = 0;
	for (int i = 0; i + length - 1 < int(v[ind].size()); i++)
		ret = max(ret, v[ind][i + length - 1] - (i ? v[ind][i - 1] : 0));
	return ret;
}

long long solve(int i, int rem) {
	if (i == n || rem == 0)
		return 0;
	if (vis[i][rem])
		return mem[i][rem];
	vis[i][rem] = 1;
	long long ans = 0;
	for (int x = 0; x <= rem; x++)
		ans = max(ans, solve(i + 1, rem - x) + val[i][x]);
	return mem[i][rem] = ans;
}

int main() {
	ios::sync_with_stdio(false);
//	freopen("/home/ahmed/testing.in", "r", stdin);
//	freopen("/home/ahmed/WA.out", "w", stdout);

	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++) {
		int L;
		scanf("%d", &L);
		while (L--) {
			int x;
			scanf("%d", &x);
			v[i].push_back(x + (v[i].size() ? v[i].back() : 0));
		}
		for (int length = 1; length <= m; length++)
			val[i][length] = max(val[i][length - 1], get(i, length));
	}

	cout << solve(0, m) << endl;

	return 0;
}


#include <bits/stdc++.h>
using namespace std;

const int INF = 2000000000;
typedef pair<int,int> PII;

int main(){
	int N, M, s, t, pass;
	scanf ("%d%d", &N, &M);
	N++;
	vector<PII> edges[N+9];
	for (int i=0;i<M;i++){
		int a,b,dist;
		cin>>a>>b>>dist;
		edges[a].push_back (make_pair (dist, b));
		edges[b].push_back (make_pair (dist, a));
	}
  priority_queue<PII, vector<PII> > Q;
  vector<int> dist(N, 0), dad(N, -1);
  cin>>s>>t>>pass;
  Q.push (make_pair (INF, s));
  dist[s] = INF;
  while (!Q.empty()){
    PII p = Q.top();
    if (p.second == t) break;
    Q.pop();
    //cout<<p.first<<" "<<p.second<<"\n";
    int here = p.second;
    for (vector<PII>::iterator it=edges[here].begin(); it!=edges[here].end(); it++){
      if(min(dist[here],it->first) == dist[it->second])
      	dad[it->second]=min(dad[it->second],here);
      if (min(dist[here],it->first) > dist[it->second]){
        dist[it->second] = min(dist[here],it->first);
        dad[it->second] = here;
        Q.push (make_pair (dist[it->second], it->second));
      }
    }
  }
  vector<int> path;
  for(int i=t;i!=-1;i=dad[i])
  	path.push_back(i);
  for(int i=path.size()-1;i>=0;i--)
  	cout<<path[i]<<" ";
  cout<<"\n";
  int cnt=0;
  while(pass>0){
  	cnt++;
  	pass-=dist[t]-1;
  }
  cout<<cnt<<"\n";
  return 0;
}
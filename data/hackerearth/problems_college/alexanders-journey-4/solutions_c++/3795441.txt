#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

#define INF 2000000000

typedef vector <int> vi;
typedef pair <int, int> ii;
typedef vector <ii> vii;

int T, N, R;
vector <vii> AdjList;
vi dist;

void dijkstra(int s)
{
    dist.assign(N+1, INF);
    dist[s] = 0;

    priority_queue <ii, vector <ii>, greater <ii> > PQ;
    PQ.push(ii(0, s));

    while (!PQ.empty())
    {
        ii front = PQ.top();
        PQ.pop();

        int d = front.first;
        int u = front.second;

        if (d <= dist[u])
        {
            for (int j = 0; j < (int)AdjList[u].size(); j++)
            {
                ii v = AdjList[u][j];

                if (dist[v.first] > dist[u] + v.second)
                {
                    dist[v.first] = dist[u] + v.second;
                    PQ.push(ii(dist[v.first], v.first));
                }
            }
        }
    }
}

int main()
{
    cin >> T;

    while (T--)
    {
        cin >> N >> R;

        AdjList.assign(N+1, vii());

        for (int i = 0; i < R; i++)
        {
            int x, y, d;

            cin >> x >> y >> d;
            AdjList[x].push_back(ii(y, d));
            AdjList[y].push_back(ii(x, d));
        }

        int src;
        cin >> src;
    
        dijkstra(src);

        for (int i = 1; i <= N; i++)
        {
            if (i == src)
                continue;
                
            if (dist[i] == INF)
                cout << -1;
            else
                cout << dist[i];

            cout << " ";
        }

        cout << endl;
    }

    return 0;
}
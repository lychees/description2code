/*https://www.hackerearth.com/problem/algorithm/xenny-and-questions/description/
*/
#include <algorithm>
#include <functional>
#include <array>
#include <iostream>
#include <functional>
#include <numeric>
#include <map>
#include <utility>
#include <iterator>

#define ull  unsigned long long int
#define maxSize 100010
#define step 30

using namespace std;

#define ull unsigned long long int
#define maxSize 100010

using namespace std;

int directMap[maxSize];
int input[maxSize];
ull result[maxSize];

int main()
{
    int t,n,k,temp,Max,index;
    ull sum;

    //cin >> t;                                 //No. test case
    scanf("%d",&t);
    for (int var = 0; var < t; ++var)
    {
            //cin >> n >> k;
            scanf("%d%d",&n,&k);
            if(k >= n)
            {
                sum = 0;
                for (int var1 = 0; var1 < n; ++var1)
                {
                    //cin >> temp;
                    scanf("%d",&temp);
                    sum += temp;
                }
            }
            else
            {
                Max = numeric_limits<int>::min();

                for (int var1 = 0; var1 < n; ++var1)
                {
                    //cin >> input[var1];
                    scanf("%d",&input[var1]);
                    Max = max(Max,input[var1]);
                }

                for (int var1 = 0; var1 <= Max; var1++)
                {
                    directMap[var1] = 0;
                }

                for (int var1 = 0; var1 < n; ++var1)
                {
                    directMap[ input[var1]] ++;
                }

                sum = 0;
                index = Max;
                while(k > 0)
                {
                    if(directMap[index] != 0)
                    {
                        if(k > directMap[index])
                        {
                            sum += directMap[index] * index;
                            k -= directMap[index];
                        }
                        else
                        {
                            sum += k * index;
                            k = 0;
                        }
                    }
                    index--;
                }
            }

            result[var] = sum;
    }

    for (int var = 0; var < t; ++var)
    {
        //cout << result[var] << endl;
        printf("%llu\n", result[var]);
    }
}





#include <algorithm>
#include <cstdio>
#include <functional>
#include <iostream>
#include <cstring>
#include <climits>
#include <cmath>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <time.h>
#include <vector>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> i_i;
typedef pair<ll, int> ll_i;
typedef pair<double, int> d_i;
typedef pair<ll, ll> ll_ll;
typedef pair<double, double> d_d;
struct edge { int u, v; ll w; };

int MOD = 1000000007;

struct bit {
	vector<ll> v;
	bit(int n) : v(n + 1) {}
	ll sum(int i) {
		ll res = 0;
		for (; i > 0; i -= i & -i) res += v[i];
		return res;
	}
	void add(int i, ll x) {
		for (i++; i < v.size(); i += i & -i) v[i] += x;
	}
	int lower_bound(ll x) {
		if (x <= 0) return 0;
		int res = 0;
		for (int i = 1 << 24; i > 0; i >>= 1)
			if (res + i < v.size() && v[res + i] < x) {
				res += i; x -= v[res];
			}
		return res + 1;
	}
};

char s[500000][11];
int t[500000];

int main() {
	int T; cin >> T;
	while (T--) {
		int N; cin >> N;
		for (int i = 0; i < N; i++) scanf("%s", s[i]);
		for (int i = 0; i < N; i++) scanf("%d", &t[i]);
		bit b(N);
		for (int i = 0; i < N; i++) b.add(i, 1);
		int maxi = 0;
		N--;
		while (N--) {
			int x; scanf("%d", &x);
			int i = b.lower_bound(x) - 1;
			b.add(i, -1);
			maxi = max(maxi, t[i]);
			printf("%s %d\n", s[i], maxi);
		}
		int i = b.lower_bound(1) - 1;
		maxi = max(maxi, t[i]);
		printf("%s %d\n", s[i], maxi);
	}
}
#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

const int inf = 1 << 30;
const int N = 100010;

vector<int> adj[N];
int type[N];
int n, m;

int rem[N], ans[N];
int pass[N], sz[N];

void dfs_init(int u, int p) {
	if(pass[u]) {
		sz[u] = 0;
		return;
	}
	assert(!pass[u]);
	rem[type[u]] = -inf;
	sz[u] = 1;
	for(int v : adj[u]) {
		if(v == p) continue;
		dfs_init(v, u);
		sz[u] += sz[v];
	}
}
int Centroid(int u) {
	int total = sz[u];
	while(true) {
		bool found = false;
		for(int v : adj[u]) {
			if(sz[v] < sz[u] and 2*sz[v] >= total) {
				u = v;
				found = true;
				break;
			}
		}
		if(!found) {
			break;
		}
	}
	return u;
}
void dfs_query(int u, int p, int len) {
	if(pass[u]) return;
	ans[type[u]] = max(ans[type[u]], rem[type[u]] + len);
	for(int v : adj[u]) {
		if(v == p) continue;
		dfs_query(v, u, len+1);
	}
}
void dfs_update(int u, int p, int len) {
	if(pass[u]) return;
	rem[type[u]] = max(rem[type[u]], len);
	for(int v : adj[u]) {
		if(v == p) continue;
		dfs_update(v, u, len+1);
	}
}
void dfs(int u) {
	if(pass[u]) return;
	dfs_init(u, -1);
	u = Centroid(u);
	pass[u] = 1;

	rem[type[u]] = 0;
	for(int v : adj[u]) {
		dfs_query(v, u, 1);
		dfs_update(v, u, 1);
	}
	
	for(int v : adj[u]) {
		dfs(v);
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> m;
	for(int i = 1;i <= n;i++) {
		cin >> type[i];
	}
	for(int i = 0;i < n-1;i++) {
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	
	dfs(1);
	
	for(int i = 1;i <= m;i++) {
		cout << ans[i] << " ";
	}
	cout << "\n";
	
    return 0;
}

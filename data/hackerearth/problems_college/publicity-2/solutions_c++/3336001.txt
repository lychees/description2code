#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;


int arr[100009];
int size[100009];
multiset<LL> current;
multiset<LL> :: iterator it;



void initialise(int n)
{
	for (int i=0;i<n;i++){
			arr[i]=i;
			current.insert(1);
			size[i]=1;
	}		
}


int root(int i){
			while(arr[i]!=i)
						i=arr[arr[i]];
			return i;
			
}


void w_union(int roota,int rootb){
		
		if (rootb==roota)	return;

		current.erase(current.find(size[roota]));
        current.erase(current.find(size[rootb]));

		if (size[roota]<size[rootb]){
			arr[roota]=arr[rootb];
			size[rootb]+=size[roota];
			current.insert(size[rootb]);
		}
		else{
			arr[rootb]=arr[roota];
			size[roota]+=size[rootb];
			current.insert(size[roota]);
		}

}

LL answer(){
	LL sum=0;
    it=current.begin();
    
    for(it=current.begin();it!=current.end();it++){
    	sum++;
    
    }
    return sum;
}

int main()
{

	int t,n,k,a,b,roota,rootb;
	scanf("%d",&t);
	while(t--){
		current.clear();
		scanf("%d",&n);
		scanf("%d",&k);
		
		initialise(n);
		while(k--){
			scanf("%d %d",&a,&b);
			
			roota=root(a);
			rootb=root(b);
			w_union(roota,rootb);
					
		}
			cout<<answer()<<endl;
	}
	
	return 0;
}
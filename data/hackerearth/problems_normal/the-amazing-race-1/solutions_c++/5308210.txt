#include <bits/stdc++.h>
#define MAX 100001
#define MOD 1000000007
using namespace std;
typedef long long int lli;
typedef unsigned long long ulli;
int length, Arr[MAX];
lli Solve(int Backward[], int Forward[], stack<int> &First, stack<int> &Last)
{
    while(!First.empty())
        First.pop();
    while(!Last.empty())
        Last.pop();
    First.push(1);
    Backward[1] = 0;
    for(int i = 2; i <= length; i++)
    {
        while(!First.empty() && Arr[i] > Arr[First.top()])
            First.pop();
        if(First.empty())
            Backward[i] = i - 1;
        else
            Backward[i] = i - First.top();
        First.push(i);
    }
    /*for(int i = 0; i < length; i++)
        cout << Backward[i] << ' ';
    cout << endl;*/
    Last.push(length);
    Forward[length] = 0;
    for(int i = length - 1; i > 0; i--)
    {
        while(!Last.empty() && Arr[i] > Arr[Last.top()])
            Last.pop();
        if(Last.empty())
            Forward[i] = length - i;
        else
            Forward[i] = Last.top() - i;
        Last.push(i);
    }
    lli Ans = -1;
    lli Ans_index = -1;
    for(int i = 1; i <= length; i++)
    {
        lli Sum = Forward[i] + Backward[i];
        Sum = ((Sum % MOD)* i) % MOD;
        if(Ans < Sum)
        {
            Ans = Sum;
            Ans_index = i;
        }
    }
    return Ans_index;
}
int main()
{
    //freopen("1.txt", "r", stdin);
    //freopen("2.txt", "w", stdout);
    int test;
    cin >> test;
    while(test--)
    {
        cin >> length;
        int Backward[MAX], Forward[MAX];
        stack<int> First, Last;
        for(int i = 1; i <= length; i++)
            cin >> Arr[i];
        cout << Solve(Backward, Forward, First, Last) << endl;
    }
    return 0;
}

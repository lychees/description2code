#include<bits/stdc++.h>
 
using namespace std;
 
typedef long long ll;
 
#define     N               200005
#define     mp(x,y)         make_pair((x),(y))
#define     F               first
#define     S               second

ll a[N];

ll NextGreaterElement[N],prevGreater[N],ans[N];

pair<ll,ll>P[N];

void findNextGreaterRight(ll n){
    stack<ll>s;
    for( ll i = 0 ; i < n ; i++ ){
        if( s.empty() ){
            s.push(i);
        }
        else{
            ll cur = a[i];
            ll atTop = a[s.top()];
            if( cur > atTop ){
                while( cur > atTop ){
                    NextGreaterElement[s.top()] = i;
                    s.pop();
                    if( s.empty() ) break;
                    atTop = a[s.top()];
                }
                s.push(i);
            }
            else{
                s.push(i);
            }
        }
    }
    while(!s.empty()){
        int cur = s.top();
        NextGreaterElement[cur] = n;
        s.pop();
    }
}

void findNextGreaterLeft(ll n){
    stack<ll>s;
    for( ll i = n-1 ; i>=0 ; i--){
        if( s.empty() ){
            s.push(i);
        }
        else{
            ll cur = a[i];
            ll atTop = a[s.top()];
            if( cur >= atTop ){
                while( cur >= atTop ){
                    prevGreater[s.top()] = i;
                    s.pop();
                    if( s.empty() ) break;
                    atTop = a[s.top()];
                }
                s.push(i);
            }
            else{
                s.push(i);
            }
        }
    }
    while(!s.empty()){
        int cur = s.top();
        prevGreater[cur] = -1;
        s.pop();
    }
}

int main(){
    
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
    #endif

    int t;
    scanf("%d",&t);
    while(t--){
        ll n,k;
        scanf("%lld%lld",&n,&k);
        for(int i = 0 ; i < n ; i++){
            scanf("%lld",&a[i]);
        }
        findNextGreaterRight(n);
        findNextGreaterLeft(n);
        for(int i = 0 ; i < n ; i++){
            ans[i] = 1ll * (NextGreaterElement[i] - i) * (i - prevGreater[i]);
        }
        for(int i = 0 ; i < n ; i++){
            P[i] = mp(a[i],ans[i]);
        }
        sort(P,P+n);
        ll ANS = 0;
        for(int i = 0 ; i < n ; i++){
            if( P[i].F > k ){
                ANS += P[i].S;
            }
        }
        printf("%lld\n",ANS );
    }
    return 0;
}    
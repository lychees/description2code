#include<bits/stdc++.h>
using namespace std;

static struct IO {
	char tmp[1 << 10];

	// fast input routines
	char cur;

//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }

	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }

	inline IO& operator >> (char & c) { c = nextChar(); return *this; }

	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }

	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }

	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}

#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}

defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)

	// fast output routines

//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }

	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }

	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }


#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }

defineOutFor(int)
defineOutFor(long long)

#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;

#define ll long long int
void isp(int set1[], int n, int sum,int arr[])
{

    bool subset[sum+1][n+1];
    for (int i = 0; i <= n; i++)
      subset[0][i] = true;
      for (int i = 1; i <= sum; i++)
      subset[i][0] = false;
     for (int i = 1; i <= sum; i++)
     {
       for (int j = 1; j <= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= set1[j-1])
           subset[i][j] = subset[i][j] || subset[i - set1[j-1]][j-1];
       }
     }

       for(int i=0;i<=sum;i++)
       {
           if(subset[i][n])
            arr[i]=1;
       }
       //return subset[sum][n];
}


int main()
{
  //  freopen("input.txt","r",stdin);

   int i,j,k,n,t;
   cin>>t;
   while(t--)
   {

       cin>>n>>k;
       int arr[n];
        ll sum=0;
       for(i=0;i<n;i++)
        {cin>>arr[i];
         sum+=arr[i];
        }
        int pos[sum+1];

         memset(pos,0,sizeof(pos));
         isp(arr,n,sum,pos);

         if(pos[k])
         {
             cout<<"Yes\n";
             continue;
         }


         else
         {
             j=0;
             while(1)
             {
             	j++;
                 if(k-j<0||k+j>sum)
                    break;


                 if(pos[k-j]==1||pos[k+j]==1)
                 {
                     if(pos[k-j]==pos[k+j])
                     {
                         cout<<"No\n"<<k+j<<"\n";
                         break;
                     }
                     else
                     {
                         if(pos[k-j]==1)
                            cout<<"No\n"<<k-j<<"\n";
                         else
                            cout<<"No\n"<<k+j<<"\n";
                         break;
                     }
                 }

             }






         }



   }



}

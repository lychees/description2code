#include <iostream>
#include <cstring>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <bitset>
#define _USE_MATH_DEFINES
#include <math.h>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <assert.h>
#include <unordered_map>
using namespace std;

void smain();
int main(){
#ifdef TASK
    freopen(TASK".in","rt",stdin);
    const clock_t start = clock();
#endif
    smain();
#ifdef TASK
    cerr << "\nTotal Execution Time: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
    return 0;
}

#ifndef M_PI
#define M_PI 3.14159265358979311599796346854418516
#endif
#define forn(i,n) for (int i=0;i<n;i++)
#define rforn(i,n) for (int i=n-1;i>=0;i--)
#define int long long
#define LL long long
#define mp(a,b) make_pair(a,b)
#define INF 2305843009213693951LL
#define MOD 1000000007
#define EPS 1E-6
#define N 1000001
/* --------- END TEMPLATE CODE --------- */

int n, m, p, x;
char s[N];
//bool a[N][N];
bool d[2][N];

void solve(int h, int c) {
    if(h == 0) {
        forn(i, m) d[c][i] = s[i] - '0';
        return;
    }
    int l = 0;
    for(; (1LL << l) <= h; ++l);
    l -= 1;
    solve(h - (1LL << l), 1 - c);
    int k = (1LL << l) * p % m;
    k = m - k;
    forn(i, m) d[c][i] = d[1-c][(i+k)%m] ^ d[1-c][i];
}

/*void naive() {
    forn(i, m) a[0][i] = s[i] - '0';
    for(int i=1; i < n; ++i) forn(j, m) {
        a[i][j] = a[i-1][(j+m-p)%m] ^ a[i-1][j] ^ x;
    }
}*/

void smain() {
    for(cin >> n; cin >> n >> m >> p >> x >> s; ) {
        //naive();
        solve(n-1, 0);
        if(x) forn(i, m) d[0][i] ^= 1;
        //forn(i, m) cout << a[n-1][i]; cout << endl;
        forn(i, m) cout << d[0][i]; cout << endl;
        //forn(i, n) { forn(j, m) cout << a[i][j]; cout << endl; }
    }   
}

#include <cstdio>
#include <cmath>
#include <cstring>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <limits>
#define iter(a,b,c,d) for(a = b; a < c; a+=d)
#define ited(a,b,c,d) for(a = b; a > c; a-=d)
#define li long int
#define uli unsigned li
#define ll long li
#define ull unsigned ll
#define si(a) scanf("%d",&a)
#define sli(a) scanf("%ld",&a)
#define sll(a) scanf("%lld",&a)
#define slu(a) scanf("%llu",&a)
#define sf(a) scanf("%f",&a)
#define slf(a) scanf("%lf",&a)
#define PI 3.1415926
using namespace std;
int main()
{
    /*freopen("1in.txt", "r", stdin);
    freopen("1out.txt", "w", stdout);*/
    li t; sli(t);
    li nums[19];
    while(t--)
    {
        li n; sli(n);
        li i;
        iter(i,0,n,1) sli(nums[i]);
        sort(nums,nums+n);
        li maxN,minN;
        if(n == 1)
            maxN = minN = nums[0];
        else if(nums[0] == 0 && nums[n-1] == 0)
            maxN = minN = 0;
        else if(nums[0] >= 0)
        {
            minN = nums[0];
            maxN = 1;
            iter(i,0,n,1) if(nums[i]) maxN *= nums[i];
            //cout << "lol";
        }
        else
        {
            li upto = lower_bound(nums,nums+n,0)-nums-1;
            //cout << upto << endl;
            minN = 1;
            iter(i,0,upto+1,1)
            {
                minN *= nums[i];
            }
            maxN = minN;
            if(maxN < 0)
            {
                if(upto > 0)
                    maxN /= nums[upto];
                else
                    maxN = 0;
            }
            if(minN > 0)
                minN /= nums[upto];
            if(nums[n-1] > 0)
            {
                if(maxN == 0) maxN = 1;
                li from = upper_bound(nums,nums+n,0)-nums;
                iter(i,from,n,1)
                {
                    maxN *= nums[i];
                    minN *= nums[i];
                }
            }
        }
        printf("%ld %ld\n",maxN,minN);
    }
    return 0;
}

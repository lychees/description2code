//Jai Anand
#include <iostream>
using namespace std;
#include <cstdio>
#include <algorithm>
#include <vector>

#include <stack>
#include <cstring>
#include <cmath>
#include <cctype>

#include <cstdlib>
#include <map>
#include <list>
#include <string>
#include <set>
#include <queue>
#include <deque>

#define MOD 1000000007 //10^9 + 7
#define SIZE 100005 //10^5

#define getcx getchar_unlocked

template<class type>
inline void input(type &n)
{
   n=0;
   register int ch=getcx();
   int sign=1;
   while( ch < '0' || ch > '9' )
   {
      if(ch=='-')
         sign=-1; 
         ch=getcx();
   }

   while(  ch >= '0' && ch <= '9' )
           n	 = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   
   n=n*sign;
}

inline void input(char str[])
{
    register char c = 0;
    register int i = 0;
    while (c < 33)
        c = getcx();

    while (c != '\n') {
        str[i] = c;
        c = getcx();
        i = i + 1;
    }
    str[i] = '\0';
}

#define ull unsigned long long
#define ll long long
#define ld long double


int npr=0, primes[1000000];
bool arr[10000007];

int primeFactors(int n, int a[])
{
  int ind = 0;
    for (int i = 0; primes[i] <= sqrt(n); i = i+1)
    {
      int flag = 0;
        while (n%primes[i] == 0)
        {
          flag = 1;
            
            n = n/primes[i];
        }
        if(flag)
          a[ind++] = primes[i];
    }
    if (n > 2)
        a[ind++] = n;
    return ind;
}

void markMultiples(bool arr[], int a, int n)
{
    int i = 2, num;
    while ( (num = i*a) <= n )
    {
        arr[num] = 1;
        ++i;
    }
}
 

int SieveOfEratosthenes(int n, bool arr[], int primes[])
{
    int k=0;
    if (n >= 2)
    {
        memset(arr, 0, n+1);
        for (int i=2; i<=n; ++i)
            if ( arr[i] == 0 )
            {
    primes[k++] = i;
                markMultiples(arr, i, n);
            }
    }
    return k;
}

int intersection(int arr1[], int arr2[], int m, int n)
{
  int cnt=0;
  int i = 0, j = 0;
  while(i < m && j < n)
  {
    if(arr1[i] < arr2[j])
      i++;
    else if(arr2[j] < arr1[i])
      j++;
    else
    {
      cnt++;
      j++;
      i++;
    }
  }
  return cnt;
}



#define testcases() int var;  input(var); while(var--)

int main()
{	

  npr = SieveOfEratosthenes(10000000, arr, primes);
	testcases()
	{
	   ll a, b;
     input(a);
     input(b);
     int x[100000], y[100000];

     int nx = primeFactors(pow(2,a)-1, x);
     int ny = primeFactors(pow(2,b)-1, y);
     
    cout<<intersection(x,y,nx,ny)<<endl;
	}
	return 0;
}

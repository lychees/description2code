#include<bits/stdc++.h>
#include<vector>
#include<utility>
#include<algorithm>
using namespace std;
typedef long long LL;
const LL MAX = 1e5 + 7;
const LL mod = 1e9 + 7;
LL id[MAX],edges,nodes;
pair< LL ,pair<LL,LL> > p[MAX];
void intialise()
{
	LL i;
	for(i = 0;i < MAX;i++)
	{
	
		id[i]=i;
	}
}
LL root( LL x)
{
	while(id[x]!=x)
	{
			id[x] = id[id[x]];
			  x =  id[x];
	}
	return x;
}
void union1(LL x, LL y)
{
	LL root_a,root_b;
	root_a = root(x);
	root_b = root(y);
	id[root_a]=id[root_b];
}
LL krushal(pair< LL,pair<LL,LL> > p[])
{
	LL x,y,cost,min_cost=1,i;
	for(i = 0;i < edges ;i++)
	{
		x = p[i].second.first;
		y = p[i].second.second;
		cost = p[i].first;
		if(root(x)!=root(y))
		{
			min_cost*=cost;
			min_cost%=mod;
			union1(x,y);
		}
	}
	return min_cost;
	
}
int main()
{
   LL x,y,i,weight,cost,min_cost,t;
   cin>>t;
  while(t--)
  {
  	  intialise();
   cin>>nodes>>edges;
   for(i = 0; i < edges; i++)
   {
   	cin>>x>>y>>weight;
   	p[i]=make_pair(weight, make_pair(x,y));
   }
   sort(p,p + edges);
   min_cost = krushal(p);
   cout<<min_cost<<endl;
  }
   
}
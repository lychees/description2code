#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cctype>
#include <cstdio>
#include <vector>
#include <cassert>
#include <complex>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

const int mod = 1e9 + 7;

inline void add(int& a, int b) { a += b; if (a >= mod) a -= mod; }

struct matrix
{
	vector <vector <int> > mat;
	matrix(int n = 0, bool id = false)
	{
		mat.resize(n);
		for (int i = 0; i < n; i++) mat[i].resize(n);
		if (id) for (int i = 0; i < n; i++) mat[i][i] = 1;
	}
	inline int size() { return (int)mat.size(); }
	vector <int>& operator[] (int i) { return mat[i]; }
};

matrix operator * (matrix &a, matrix &b)
{
	int n = a.size();
	matrix ret(n);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			for (int k = 0; k < n; k++)
				add(ret[i][j], 1ll * a[i][k] * b[k][j] % mod);
	return ret;
}

matrix mat[40];

void pre()
{
	for (int i = 0; i < 40; i++)
	{
		mat[i].mat.resize(9);
		for (int j = 0; j < 9; j++)
			mat[i].mat[j].resize(9);
	}
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 3; j++)
			for (int k = 0; k < 3; k++)
				for (int l = 0; l < 3; l++)
					mat[0][i*3+j][k*3+l] = (abs(i-k) + abs(j-l) + abs(i+j-k-l)) % mod;
	for (int i = 1; i < 40; i++)
		mat[i] = mat[i - 1] * mat[i - 1];
}

int main()
{
	int t; scanf("%d", &t);
	pre();
	while (t--)
	{
		long long n; scanf("%lld", &n);
		int a[9];
		for (int i = 0; i < 9; i++) scanf("%d", a + i);
		for (int i = 0; i < 40; i++)
			if (n >> i & 1)
			{
				int b[9] = {};
				for (int j = 0; j < 9; j++)
					for (int k = 0; k < 9; k++)
						add(b[j], 1ll * mat[i][j][k] * a[k] % mod);
				for (int j = 0; j < 9; j++) a[j] = b[j];
			}
		for (int i = 0; i < 9; i++)
			printf("%d%c", a[i], (i % 3 == 2 ? '\n' : ' '));
	}
	return 0;
}
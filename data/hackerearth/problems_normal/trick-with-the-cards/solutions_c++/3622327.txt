#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
vector<vi> remaining ( 16,vi ( 1<<16,-1 ) );
vector<bool> checking ( 1<<16 );
int nFlips ( int k, int sz ) {
    if ( k== ( 1<<sz )-1 ) return 0;

    if ( remaining[sz][k]>=0 ) return remaining[sz][k];
    checking[k]=1;
    int minf=INF;
    rep ( i,sz ) {
        int k2=k^ ( 1<<i ) ^ ( 1<< ( i+1 ) %sz ) ^ ( 1<< ( ( i+sz-1 ) %sz ) );
        if ( !checking[k2] )
            minf=min ( minf,nFlips ( k2,sz ) +1 );
    }
    remaining[sz][k]=minf;
    checking[k]=0;
    return minf;
}
vi remPlanar ( 1<<10 );
int nFlips2 ( int k ) {
    if ( k== ( 1<<10 )-1 ) return 0;
    checking[k]=1;
    if ( remPlanar[k]>=0 ) return remPlanar[k];
    int minf=INF;
    reu ( i,1,9 ) {
        int k2=k^ ( 1<<i ) ^ ( 1<< ( i+1 ) ) ^ ( 1<< ( ( i-1 ) ) );
        if ( !checking[k2] )
            minf=min ( minf,nFlips2 ( k2 ) +1 );
    }
    remPlanar[k]=minf;
    checking[k]=0;
    return minf;
}

int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        ll n;
        cin>>n;
        if(!n)cout<<"0\n";
       else if ( n<3 ) cout<<"1\n";
        else        if ( n%3==0 ) cout<<n/3<<'\n';
        else cout<<n<<'\n';

    }

}

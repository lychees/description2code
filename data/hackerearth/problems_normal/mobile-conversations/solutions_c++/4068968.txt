#include <iostream>
#include <algorithm>
using namespace std;

bool mySort1(pair<double, double> p1, pair<double, double> p2) {
	double d1 = p1.second - p1.first;
	double d2 = p2.second - p2.first;
		
	return d1 > d2;
}

bool mySort2(pair<double, double> p1, pair<double, double> p2) {
	return p1.first < p2.first;
}

bool mySort3(pair<double, double> p1, pair<double, double> p2) {
	return p1.second > p2.second;
}

int main()
{
    long N;
    pair<double, double> *arr;
    
    cin >> N;
    arr = new pair<double, double>[N];
    for(long i = 0; i < N; i++) {
    	cin >> arr[i].first >> arr[i].second;
    }
    
    sort(arr, arr + N, mySort1);
    
    long temp;
    for(temp = 0; temp < N; temp++) {
    	if(arr[temp].second < arr[temp].first)
    		break;
    }
    
    sort(arr, arr + temp, mySort2);
    sort(arr + temp, arr + N, mySort3);
    	
    long M = arr[0].first;
    long credit = arr[0].second;
    for(long i = 1; i < N; i++) {
    	long T = arr[i].first;
    	long X = arr[i].second;
    	M += max(T - credit, 0L);
    	credit = max(credit - T, 0L) + X;
    }
    
    cout << M << endl;
    	
    return 0;
}

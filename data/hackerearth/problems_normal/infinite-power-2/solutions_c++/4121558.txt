/*#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
using namespace std;

int main()
{
    int t;
    scanf("%d",&t);
    vector<int> infp;
    infp.push_back(0);
    int a[] = {2,12,112,1112,11112,111112,1111112,11111112,111111112};
    int j = 0;
    for(int i=0;i<1000000000;){
    	infp.push_back(i);
    	//cout<<i<<' ';
    	j++;
    	if(j%390625==0){
    		i += a[8];
    	}
    	else if(j%78125==0){
    		i += a[7];
    	}
    	else if(j%15625==0){
    		i+=a[6];
    	}
    	else if(j%3125==0){
    		i+=a[5];
    	}
    	else if(j%625==0){
    		i+=a[4];
    	}
    	else if(j%125==0){
    		i+=a[3];
    	}
    	else if(j%25==0){
    		i+=a[2];
    	}
    	else if(j%5==0){
    		i+=a[1];
    	}
    	else i+= a[0];
    }
    infp.push_back(2000000000);
    while(t--){
    	j++;
    	int n;
    	scanf("%d",&n);
    	vector<int>::iterator itr = lower_bound(infp.begin(),infp.end(),n);
    	if(*itr == n) printf("Unlimited Power\n");
    	else{
    		int ub = *itr;
    		int lb = *(itr-1);
    		int num = ub - n;
    		int den = n-lb;
    		int c;
    		int a = num;
    		int b = den;
    		while(b>0){
    			a%=b;
    			c=a;
    			a=b;
    			b=c;
    		}
    		printf("%d/%d\n",num/a,den/a);
    	}
    }
    return 0;
}
*/


    #include <bits/stdc++.h>
    using namespace std;
    vector < int > v;
    void dfs(int num, bool st, int index){
        if(index == 11) return;
        v.push_back(num);
        int a = num * 10;
        if(!st) for(int i = 0; i < 10; i +=2) dfs(a + i, false, index + 1);
        else    for(int i = 2; i < 10; i +=2) dfs(a + i, false, index + 1);
    }
    int main()
    {
        int t , n;
        dfs(0, true, 1);
        v.push_back(2e9);
        sort(v.begin(), v.end());
        scanf("%d", &t);
        while(t--){
            scanf("%d", &n);
            int low = 0, high = v.size() - 1, mid;
            int up = -1, bot = -1;
            while(low <= high){
                mid = low + (high - low) / 2;
                if(n == v[mid]){
                    up = bot = -1;
                    break;
                } else if (n < v[mid]){
                    high = mid - 1;
                    if(n < v[mid - 1]) continue;
                    bot = n - v[mid - 1];
                    up = v[mid] - n;
                } else {
                    low = mid + 1;
                    if(n > v[mid + 1]) continue;
                    bot = n - v[mid];
                    up = v[mid + 1] - n;
                }
            }
            if(up == -1) printf("Unlimited Power\n");
            else {
                int gcd = __gcd(up , bot);
                up /= gcd;
                bot /= gcd;
                printf("%d/%d\n", up, bot);
            }
        }
        return 0;
    }


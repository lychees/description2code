#include<algorithm>
#include<iostream>
#include<cstdio>
#include<vector>
#include<queue>

#define Input(N) scanf("%i", &N)
#define CLEAR(Set) for (int i = 0; i < 10; i++) {Set[i] = 0;}
#define Loop(start, end) for (int i = start; i <= end; i++)
#define CopyContent for (int i = 1; i <= N; i++)
#define WHILE while (tSet[i] != 0)
#define Output(N) printf("%i\n", N)

using namespace std;

vector<int> v[1010];
bool visited[1010]  = {false};
int level[1010] = {0};

void BFS(int);

int main(int argc, char const *argv[]) {
   int A, B;

   Input(A); Input(B);

   CLEAR(level); CLEAR(visited);

   Loop (1, B) {
     int x, y;

     Input(x); Input(y);
     v[x].push_back(y);v[y].push_back(x);
   }

   BFS(0);

   Loop (1, A-1) {
     if (visited[i] == true) Output(level[i]);
     else Output(-1);
   }

  return 0;
}

void BFS(int s) {

  queue<int> Q;

  Q.push(s);
  level[s] = 0;
  visited[s] = true;

  while(!Q.empty()) {

    int P = Q.front();
    Q.pop();

    for(int i = 0; i < v[P].size(); ++i) {
      if (visited[ v[P][i] ] == false) {
        level[ v[P][i] ] = level[P] + 1;
        Q.push(v[P][i]);
        visited[ v[P][i] ] = true;
      }
    }
  }
}

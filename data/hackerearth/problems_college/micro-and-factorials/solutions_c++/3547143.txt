#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ll long long
#define s(x) scanf("%d", &x)
#define sl(x) scanf("%lld", &x)
#define sd(x) scanf("%lf", &x)
#define mod 1000000007
#define get getchar_unlocked

int isP[1000005];
ll ans[1000005];

ll power(ll a, ll b)
{
    if (!b)
        return 1;
    ll x = power(a, b>>1);
    if (b & 1)
        return (((x*x)%mod)*a)%mod;
    return (x*x)%mod;
}

void sieve()
{
    int i, j;
    for (i = 2; i <= 1000000; ++i) {
        if (!isP[i]) {
            for (j = 1; i*j <= 1000000; ++j)
                isP[i*j] = i;
        }
    }
}

void pre()
{
    ans[1] = 1;
    int i, j, k, prev;
    map <int, int> m;
    map <int, int> :: iterator it;
    for (i = 2; i <= 100000; ++i) {
        j = i;
        ans[i] = ans[i-1];
        while (j != 1) {
            k = isP[j];
            it = m.find(k);
            if (it == m.end()) {
                prev = 0;
                ++m[k];
            }
            else {
                prev = it->second;
                ++it->second;
            }
            ans[i] = (ans[i] * power(prev+1, mod-2))%mod;
            ans[i] = (ans[i] * (prev+2))%mod;
            j /= k;
        }
    }
}

int main()
{
    sieve();
    pre();
    int t, a, b;
    s(t);
    while (t--) {
        s(a);
        s(b);
        assert(1 <= a && a <= 100000);
        assert(1 <= b && b <= 100000);
        if (a <= b)
            printf("0\n");
        else
            printf("%lld\n", (ans[a] - ans[b] + mod)%mod);
    }
    return 0;
}

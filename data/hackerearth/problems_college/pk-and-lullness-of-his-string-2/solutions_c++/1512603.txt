#include<bits/stdc++.h>
using namespace std;
#define m 1000000007

#include<iostream>
using namespace std;
#include<vector>

/* This function calculates (a^b)%MOD */
long long pow(long long a, long long b, long long MOD)
{
    long long x=1,y=a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}

/*  Modular Multiplicative Inverse
    Using Euler's Theorem
    a^(phi(m)) = 1 (mod m)
    a^(-1) = a^(m-2) (mod m) */
long long InverseEuler(long long n, long long MOD)
{
    return pow(n,MOD-2,MOD);
}

vector<long long> f(100009,1);

long long C(long long n, long long r, long long MOD)
{
    if(n<r)
        return 0LL;
    else if(n==r)
        return 1LL;
    return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
}

//long long val1[100009],val2[100009];
long long pre[100009],post[100009];
int main()
{
    int t,len,i;
    scanf("%d",&t);
    f[1]=1;
    for (i=2; i<=100005;i++)
        f[i]= (f[i-1]*i) % m;

    int l;
    char ch[100009];
    long long ans;
    while(t--)
    {
        ans=0;
        scanf("%s",ch);
        scanf("%d",&len);
        len/=2;
        l = strlen(ch);

        if(len==0)
        {
            for(i=0;i<l;i++)
                if(ch[i]=='u')
                    ans++;
            printf("%lld\n",ans%m);
        }
        else
        {
            if(ch[0]=='l')
            {
                pre[0]=1;
                /*if(len==1)
                    val1[0]=1;
                else
                    val1[0]=0;*/
            }
            else
            {
                pre[0]=0;
                //val1[0]=0;
            }
            //printf("%d %lld\n",pre[0],val1[0]);
            for(i=1;i<l;i++)
            {
                if(ch[i]=='l')
                {
                    //printf("%d\n",i);
                    pre[i]=pre[i-1]+1;
                    /*if(pre[i]==len)
                    {
                        val1[i] = 1;
                    }
                    else if(pre[i]>len)
                    {
                        val1[i] = ((pre[i]*val1[i-1])/(pre[i]-len));
                    }
                    else
                        val1[i]=val1[i-1];*/
                }
                else
                {
                    pre[i]=pre[i-1];
                    //val1[i] = val1[i-1];
                }
                //val1[i]%=m;

            }

            if(ch[l-1]=='l')
            {
                post[l-1]=1;
                /*if(len==1)
                    val2[l-1]=1;
                else
                    val2[l-1]=0;*/
            }
            else
            {
                post[l-1]=0;
                //val2[l-1]=0;
            }

            for(i=l-2;i>=0;i--)
            {
                if(ch[i]=='l')
                {
                    post[i]=post[i+1]+1;
                    /*if(post[i]==len)
                    {
                        val2[i] = 1;
                    }
                    else if(post[i]>len)
                    {
                        val2[i] = ((post[i]*val2[i+1])/(post[i]-len));
                    }
                    else
                        val2[i]=val2[i+1];*/
                }
                else
                {
                    post[i]=post[i+1];
                    //val2[i] = val2[i+1];
                }
                //val2[i]%=m;
            }
            /*for(i=0;i<l;i++)
            {
                printf("%lld %lld\n",val1[i],val2[i]);
            }*/
            for(i=0;i<l;i++)
            {
                //
                if(ch[i]=='u')
                {
                    //printf("%lld %lld\n",val1[i],val2[i]);
                    //printf("%lld %lld\n",C(pre[i],len,m),C(post[i],len,m));
                    ans+= (C(pre[i],len,m)*C(post[i],len,m))%m;
                    ans%=m;
                }
            }
            printf("%lld\n",ans);
        }




    }
   return 0;
}

#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <cassert>

using namespace std;

#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define S(x) 			scanf("%d",&x)
#define all(c) 			(c).begin(),(c).end() 
#define sz(c) 			int((c).size())
#define pb 				push_back
#define present(c,x) 	((c).find(x) != (c).end()) 
#define cpresent(c,x) 	(find(all(c),x) != (c).end())
#define rep(i,x,y) 		for(int i = x; i < y; i++)
#define REV(i,x,y) 		for(int i = x; i >= y; i--)
#define foreach(c,itr)	for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define FILL(a,v) 		memset(a,v,sizeof(a))
#define debug(args...)	{dbg,args; cerr<<endl;}
#define FF 				first
#define SS 				second 
//#define R(x) 			((rand()%x) + 1)

typedef long long int LL;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;

struct _debugger
{
	template<typename T> _debugger& operator , (const T& v)
	{	
		cerr<<v<<" ";
		return *this;
	}
} dbg;
 
void debugarr(int * arr,int n)
{
	cout<<"[";
	for(int i=0;i<n;i++) cout<<arr[i]<<" ";
	cout<<"]"<<endl;
}

/* ------------------------Main Code----------------------- */
const int MAX = 100001, mod = 1000000007;

LL F[5][5], I[5][5];

void multiply(LL M[5][5])
{
	LL res[5][5];
	memset(res,0,sizeof(res));
	rep(i,0,5) rep(j,0,5) rep(l,0,5) 
	res[i][j] = (res[i][j] + (F[i][l]*M[l][j])%mod)%mod;
	memcpy(F,res,sizeof(F)); 
}

void mat_pow(int n)
{
	if(n == 1) return;
	mat_pow(n>>1);
	multiply(F);
	if(n & 1) multiply(I);
}

int main()
{
	int t;
	S(t);
	while(t--){
		int n;
		LL f[5];
		scanf("%lld%lld%lld%lld%lld", &f[0],&f[1],&f[2],&f[3],&f[4]);
		S(n);
		if(n < 5) {printf("%lld\n",f[n]); continue;}
		FILL(F,0);
		rep(i,0,5){
			//I[i][i] = 1;
			if(i) F[i][i-1] = 1;
			F[0][i] = 1;
		}
		F[0][3] = 2;
		// rep(i,0,5){
		// 	rep(j,0,5) printf("%lld ",F[i][j]);
		// 	printf("\n");
		// }
		memcpy(I,F,sizeof(F));
		mat_pow(n-4);
		LL ans = 0;
		rep(i,0,5) ans = (ans + F[0][i]*f[4-i]) % mod;
		printf("%lld\n",ans);
	}
	return 0;
}
#include <iostream>
#include<stack>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<stdio.h>
#include<algorithm>
#include <string>
#include <cstring>
using namespace std;

#define gc getchar
#define pc(x) putchar
#define pi(n) printf("%d",n)
#define pll(n) printf("%lld",n)
#define ps printf(" ")
#define pn printf("\n")
#define rep(i,n) for(i=0;i<n;i++)
#define fu(i,a,n) for(i=a;i<=n;i++)
#define fd(i,n,a) for(i=n;i>=a;i--)
inline int sn()
{
    int n=0;
    int ch=gc();
    while( ch <48 )ch=gc();
    while( ch >47 )
    n = (n<<3)+(n<<1) + ch-'0', ch=gc();
    return n;
}

vector<int> arr(150,0);
vector<int> arr1(150,0);
void partition(int low,int high);
void mergeSort(int low,int mid,int high);
void partition(int low,int high)
{
    int mid;
    if(low<high){
         mid=(low+high)/2;
         partition(low,mid);
         partition(mid+1,high);
         mergeSort(low,mid,high);
    }
}

void mergeSort(int low,int mid,int high)
{

    int i,m,k,l,temp[150],temp1[150];

    l=low;
    i=low;
    m=mid+1;

    while((l<=mid)&&(m<=high)){

         if(arr[l]<=arr[m]){
             temp[i]=arr[l];
             temp1[i]=arr1[l];
             l++;
         }
         else{
             temp[i]=arr[m];
             temp1[i]=arr1[m];
             m++;
         }
         i++;
    }

    if(l>mid){
         for(k=m;k<=high;k++){
             temp[i]=arr[k];
             temp1[i]=arr1[k];
             i++;
         }
    }
    else{
         for(k=l;k<=mid;k++){
             temp[i]=arr[k];
             temp1[i]=arr1[k];
             i++;
         }
    }

    for(k=low;k<=high;k++){
         arr[k]=temp[k];
         arr1[k]=temp1[k];
    }
}

long long f(long long a)
{
    if(a<3) return 0;
    return (a*(a-1)*(a-2))/6;
}
int main()
{
    long long t,n;
    scanf("%lld",&t);
    vector<long long> ans(20,0);
    while(t--)
    {
        scanf("%lld",&n);
        long long flag2=0,flag3=0,flag5=0,flag7=0;
        while(n)
        {
            if(n%10==2) flag2=1;
            else if(n%10==3) flag3=1;
            else if(n%10==5) flag5=1;
            else if(n%10==7) flag7=1;
            n/=10;
        }
        ans[flag2+2*flag3+4*flag5+8*flag7]++;
    }
    ans[1]+=ans[3]+ans[5]+ans[9]+ans[7]+ans[13]+ans[11]+ans[15];
    ans[2]+=ans[3]+ans[6]+ans[10]+ans[7]+ans[11]+ans[14]+ans[15];   
    ans[4]+=ans[5]+ans[6]+ans[12]+ans[7]+ans[13]+ans[14]+ans[15];
    ans[8]+=ans[9]+ans[10]+ans[12]+ans[13]+ans[11]+ans[14]+ans[15];
    ans[3]+=ans[7]+ans[11]+ans[15];
    ans[5]+=ans[7]+ans[13]+ans[15];
    ans[9]+=ans[13]+ans[11]+ans[15];
    ans[6]+=ans[7]+ans[14]+ans[15];
    ans[10]+=ans[11]+ans[14]+ans[15];
    ans[12]+=ans[13]+ans[14]+ans[15];
    ans[7]+=ans[15];
    ans[13]+=ans[15];
    ans[11]+=ans[15];
    ans[14]+=ans[15];
    int i;
   /* rep(i,15)
    {
        printf("%d %lld\n",i,ans[i]);
    }*/
long long g=f(ans[1])+f(ans[2])+f(ans[4])+f(ans[8])-f(ans[3])-f(ans[5])-f(ans[9])-f(ans[6])-f(ans[10])-f(ans[12])+f(ans[7])+f(ans[13])+f(ans[11])+f(ans[14])-f(ans[15]);
printf("%lld",g);
    return 0;
}

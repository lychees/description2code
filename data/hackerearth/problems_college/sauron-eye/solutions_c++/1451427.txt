#include<bits/stdc++.h>
using namespace std;

long long const m = 1000000007;
long long A[2][2]={{3,1},{1,0}};
long long M[2][2]={{3,-1},{1,0}};

void matrixmult(long long int A[2][2], long long int B[2][2]){
	long int C[2][2] = { { 0, 0 }, { 0, 0 } };
	for (int i = 0; i<2; i++)
		for (int j = 0; j<2; j++)
			for (int k = 0; k<2; k++)
			{
		C[i][j] += ((A[i][k] * B[k][j]) % m);
		C[i][j] %= m;
			}
	for (int i = 0; i<2; i++)
		for (int j = 0; j<2; j++)
			A[i][j] = C[i][j];
}
 
void power(long long int A[2][2],long long int n){
	if (n == 1)
		return;
	if (n == 2){
		matrixmult(A, A);
		return;
	}
	if (n % 2 == 0){
		power(A, n / 2);
		matrixmult(A, A);
		return;
	}
	if (n % 2 != 0){
		long long int C[2][2];
		for (int i = 0; i<2; i++)
			for (int j = 0; j<2; j++)
				C[i][j]=A[i][j];
		power(A, n / 2);
		matrixmult(A, A);
		matrixmult(A, C);
		return;
	}
}

void initialize(){
	A[0][0]=3;A[1][0]=1;A[0][1]=1;A[1][1]=0;
	M[0][0]=3;M[1][0]=1;M[0][1]=-1;M[1][1]=0;
}

int main(){
	int t;cin>>t;
	while(t--){
		initialize();
		long long n;cin>>n;
		if(n==1)cout<<1<<endl;
		else if(n==2)cout<<3<<endl;
		else{
		power(M,n-2);
		matrixmult(M,A);
		cout<<(M[0][0]+m)%m<<endl;
		}
	}
}
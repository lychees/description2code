#include <vector>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <stdio.h>
#include <map>
#include <stdlib.h>
#include <string>
#include <queue>
#include <math.h>
#include <algorithm>
#include <iostream>
#include <climits>
#include <set>
#include <utility>
#include <stack>
#include <limits.h>
#include <functional>
#include <unordered_map>
#include <list>
using namespace std;

//Fast inputs
template <class T>
inline void rd(T &i){
	bool minus=false;
	char c;
	for(c=getchar();(c<'0'||c>'9')&&(c!='-'); c=getchar());
	if(c=='-') {minus=true;c='0';}
	for(i=0;c>='0'&&c<='9';c=getchar()) i=(i<<3)+(i<<1)+(c-48);
	if(minus)i=(~i)+1;
}

//Shortcuts
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
#define pb push_back
#define mp make_pair
#define inf INT_MAX
#define _inf INT_MIN

//Globals
int tree[1000000];
vector< vector<int> > levs;
vector<int> v;

//Lets get started

int main(int argc, char *argv[]){
    int t,n;
    rd(t);
    while(t--){
        levs.clear();
        v.clear();
        rd(n);
        for(int i=0; i<n; i++) rd(tree[i]);

        queue<int> Q;
        Q.push(0);
        Q.push(-1);
        int last = 0;
        while(!Q.empty()){
            int tmp = Q.front();
            Q.pop();
            if(tmp == -1){
                levs.pb(v);
                v.clear();
                Q.push(-1);
                if(last == -1) break;
                last = -1;
            }
            else{
                v.pb(tree[tmp]);
                int ind = 2*tmp+1;
                if(ind<n && tree[ind] != 0) Q.push(ind);
                ind++;
                if(ind<n && tree[ind]!=0) Q.push(ind);
                last = tmp;
            }

        }

        for(int i=0; i<levs.size()-1; i++)
            printf("%d\n", levs[i][levs[i].size()-1]);
        //cout<<"right done\n";
        for(int i=0; i<levs.size()-1; i++)
            if(levs[i].size() != 1) printf("%d\n", levs[i][0]);
        printf("\n");
    }

    return 0;
}

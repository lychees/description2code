#include <iostream>
#include<queue>
#include<vector>
using namespace std;

typedef vector<long long > V;
typedef vector<V> v;
v Ar(100005);
v Temp(100005);
long long visited[100005]={0};
long long val[100005];
int cnt;
void bfs(int node)
{
	queue<int> Q;
	Q.push(node);
	visited[node]=1;
	Temp[cnt].push_back(node);
	while(!Q.empty())
	{
		node=Q.front();
		Q.pop();
		for(int i=0;i<Ar[node].size();i++)
		{
			if(!visited[Ar[node][i]])
			{
				visited[Ar[node][i]]=1;
				Q.push(Ar[node][i]);
				Temp[cnt].push_back(Ar[node][i]);//=cnt;
			}
		}
	}
}

int main()
{
    long long N,K;
    cin>>N>>K;
    for(int i=1;i<=N;i++)
    {
    	cin>>val[i];
    }
    for(int i=1;i<=N;i++)
   	{
   		long long d;
   		cin>>d;
   		Ar[i].push_back(d);
   	}
   	cnt=0;
   	for(int i=1;i<=N;i++)
    {
    	if(visited[i]==0)
    	{
    		cnt++;
    		bfs(i);
    	}
    }
   /* for(int i=1;i<=cnt;i++)
   	{
   		for(int j=0;j<Temp[i].size();j++)
   			cout<<Temp[i][j]<<" ";
   		cout<<"\n";
   	}*/
   	for(int i=1;i<=cnt;i++)
   	{
   		long long m=(K)%Temp[i].size();
   		for(int j=0;j<Temp[i].size();j++)
   		{
   			visited[Temp[i][j]]=Temp[i][(j+m)%Temp[i].size()];
   		}
   	}
   	for(int i=1;i<=N;i++)
   		cout<<val[visited[i]]<<" ";
   	cout<<"\n";
   	return 0;
}

#include<bits/stdc++.h>
using namespace std;
#define N 1000111
#define pb push_back
int str[N]; //input
int rnk[N], pos[N]; //output
int cnt[N], nxt[N]; //internal
bool bh[N], b2h[N];
//rnk[i] 'i' in unsorted and rnk[i] in sorted
//pos[i] 'i' in sorted and pos[i] in unsorted
// Compares two suffixes according to their first characters
bool smaller_first_char(int a, int b)
{
    return str[a] < str[b];
}

void suffixSort(int n)
{
    //sort suffixes according to their first characters
    for (int i=0; i<n; ++i)
    {
        pos[i] = i;
    }
    sort(pos, pos + n, smaller_first_char);
    //{pos contains the list of suffixes sorted by their first character}

    for (int i=0; i<n; ++i)
    {
        bh[i] = i == 0 || str[pos[i]] != str[pos[i-1]];
        b2h[i] = false;
    }

    for (int h = 1; h < n; h <<= 1)
    {
        //{bh[i] == false if the first h characters of pos[i-1] == the first h characters of pos[i]}
        int buckets = 0;
        for (int i=0, j; i < n; i = j)
        {
            j = i + 1;
            while (j < n && !bh[j]) j++;
            nxt[i] = j;
            buckets++;
        }
        if (buckets == n) break; // We are done! Lucky bastards!
        //{suffixes are separted in buckets containing strings starting with the same h characters}

        for (int i = 0; i < n; i = nxt[i])
        {
            cnt[i] = 0;
            for (int j = i; j < nxt[i]; ++j)
            {
                rnk[pos[j]] = i;
            }
        }

        cnt[rnk[n - h]]++;
        b2h[rnk[n - h]] = true;
        for (int i = 0; i < n; i = nxt[i])
        {
            for (int j = i; j < nxt[i]; ++j)
            {
                int s = pos[j] - h;
                if (s >= 0)
                {
                    int head = rnk[s];
                    rnk[s] = head + cnt[head]++;
                    b2h[rnk[s]] = true;
                }
            }
            for (int j = i; j < nxt[i]; ++j)
            {
                int s = pos[j] - h;
                if (s >= 0 && b2h[rnk[s]])
                {
                    for (int k = rnk[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
                }
            }
        }
        for (int i=0; i<n; ++i)
        {
            pos[rnk[i]] = i;
            bh[i] |= b2h[i];
        }
    }
    for (int i=0; i<n; ++i)
    {
        rnk[pos[i]] = i;
    }
//  for(int i=0;i<n;i++)
//    printf("%d ",rnk[i]);
//printf("\n");
//  for(int i=0;i<n;i++)
//    printf("%d ",pos[i]);
//printf("\n");


}

int height[N];
// height[i] = length of the longest common prefix of suffix pos[i] and suffix pos[i-1]
// height[0] = 0
void getHeight(int n)
{
    for (int i=0; i<n; ++i) rnk[pos[i]] = i;
    height[0] = 0;
    for (int i=0, h=0; i<n; ++i)
    {
        if (rnk[i] > 0)
        {
            int j = pos[rnk[i]-1];
            while (i + h < n && j + h < n && str[i+h] == str[j+h]) h++;
            height[rnk[i]] = h;
            if (h > 0) h--;
        }
    }
//  for(int i=0;i<n;i++)
//    printf("%d ",height[i]);
//printf("\n");
}
int ans[10001],num[1000111];
vector<int>v;
int main()
{
    string s="",h;
    int i,j,n,q,l=0;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        cin>>h;
        s+=h;
        s+='@';
        l+=h.size()+1;
    }
    scanf("%d",&q);
    int p=l-1;
    for(i=0;i<q;i++)
    {
        cin>>h;
        s+=h;
        s+='#';
        p+=h.size()+1;
        v.pb(p-1);
    }
    for(int i=0; i<s.size(); i++)
        str[i]=s[i];
    suffixSort(s.size());
    getHeight(s.size());

    for(i=n+q;i<s.size();i++)
    {
        if(pos[i]<l)
            continue;
        num[i]=lower_bound(v.begin(),v.end(),pos[i])-v.begin();
    }
//    for(i=0;i<s.size();i++)
//        printf("%d ",num[i]);
//    printf("\n");
    int mx=0,flag=0;
    //cout<<l<<endl;
    for(i=n+q+1;i<s.size();i++)
    {
        mx=min(mx,height[i]);
        //cout<<i<<" "<<mx<<" "<<flag<<" "<<pos[i]<<endl;
        if(flag==1)
            mx=height[i],flag=0;
        if(pos[i]>=l)
            ans[num[i]]=max(ans[num[i]],mx);
        else
            flag=1;
    }

//    for(i=0;i<q;i++)
//        printf("%d\n",ans[i]);
    mx=0;
    for(i=s.size()-1;i>=n+q;i--)
    {
        //cout<<i<<" "<<pos[i]<<" "<<l<<" "<<mx<<endl;
        if(pos[i]>=l)
            ans[num[i]]=max(ans[num[i]],mx);
        else
            mx=height[i];
        mx=min(mx,height[i]);
    }
    for(i=0;i<q;i++)
        printf("%d\n",ans[i]);
    return 0;
}


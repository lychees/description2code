#include <iostream>
#include <string.h>
using namespace std;

int main()
{
    long T, N, W;
    cin >> T;

    while (T--) {

    	cin >> N >> W;
    	long values[N], weights[N];
    	long Dp[N + 1][W + 1];

    	memset(Dp, 0, sizeof(Dp));
    	for (long n = 0; n < N; n++) {
    		cin >> weights[n];
    	}
    	for (long n = 0; n < N; n++) {
    		cin >> values[n];
    	}
    	for (long n = 0; n <= N; n++) {
    		Dp[n][0] = 0;
    	}
    	for (long w = 0; w <= W; w++) {
    		Dp[0][w] = 0;
    	}

    	for (long i = 1; i <= N; i++) {
    		for (long j = 1; j <= W; j++) {
    			if (j < weights[i - 1]) {
    				Dp[i][j] = Dp[i - 1][j];
    			}
    			else {
    				Dp[i][j] = max(Dp[i - 1][j], (Dp[i - 1][j - weights[i - 1]] + values[i - 1]));
    			}
    		}
    	}

    	cout << Dp[N][W] << endl;
    }
    return 0;
}
# include <iostream>
# include <string>
# include <stdio.h>
# include <string>
# include <vector>
# include <iomanip>
# include <cmath>
# include <algorithm>
# include <stack>
using namespace std;
typedef long long ll;

struct info
{
    int payed , earned , dp_val;
    info(){}
    info(int x,int y,int z)
    {
        payed = x;
        earned = y;
        dp_val = z;
    }
};

info dp[102][10002];
int x[102] , y[102];

int main()
{   
    int t;  cin>>t;
    while (t--)
    {
        int n,p;  cin>>n>>p;
        for (int i=1;i<=n;i++)
            cin>>x[i]>>y[i];
        
        for (int i=0;i<=p;i++)
            dp[0][i] = info(0,0,i);
        
        for (int i=1;i<=n;i++)
            for (int j=0;j<=p;j++)
            {
                dp[i][j] = dp[i-1][j];
                if (j - y[i] >= 0)
                {
                    int dp_val1 = dp[i][j].dp_val;
                    int dp_val2 = x[i] + dp[i-1][j - y[i]].dp_val;
                    if (dp_val2 > dp_val1)
                        dp[i][j] = info(dp[i-1][j-y[i]].payed + y[i] , dp[i-1][j-y[i]].earned + x[i] , dp_val2 );
                    else if (dp_val2 == dp_val1)
                            if (dp[i-1][j-y[i]].payed + y[i] < dp[i][j].payed)
                                 dp[i][j] = info(dp[i-1][j-y[i]].payed + y[i] , dp[i-1][j-y[i]].earned + x[i] , dp_val2 );
                }
            }
        cout<<dp[n][p].payed<<" "<<dp[n][p].dp_val<<endl;
    }
    return 0;
}
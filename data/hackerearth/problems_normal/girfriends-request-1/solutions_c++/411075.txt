#include <cstdio>
#include <vector>
#include <queue>
#include <assert.h>
using namespace std;
#define MAX 1414
#define MAXQ 1000405
#define VAL 1000000000
int arr[MAX];
//vector<pair<int, pair<int, int> > > quers;
//int ans[MAXQ];
int med[MAX][MAX];
int N, Q;

priority_queue<int,vector<int>,less<int> >left;// will keep median always 
priority_queue<int,vector<int>,greater<int> >right;

void f()
{
   for(int i=0;i<N;i++){
           while(!left.empty())
              left.pop();
           while(!right.empty())
              right.pop();
        
        	left.push(arr[i]);
            med[i][i] = arr[i];
            int ls=left.size();
            int rs=right.size();
         for(int j=i+1;j<N;j++){
              int m1=left.top();
	 		  if(m1>arr[j])
              {
	 			  left.push(arr[j]); 
                  ls++;
 		      }
              else
              {
	 			  right.push(arr[j]); 
                  rs++;
	 		  }
	 		  while(ls>rs+1)
              {
	 			  right.push(left.top()); 
                  left.pop();
	 			  ls--; 
                  rs++;
	 		  }
	 		  while(rs>ls)
              {
	 			  left.push(right.top()); 
                  right.pop();
	 			  rs--; 
                  ls++;
	 		  }
	 		  med[i][j] = left.top();
	 	}
	 	
}
}
int main()
{
     	int x, y;
scanf("%d", &N);

for(int i=0;i<N;i++){
scanf("%d", &arr[i]);

}
f();
scanf("%d", &Q);

for(int i=0;i<Q;i++){
scanf("%d %d", &x, &y);
x--, y--;
printf("%d\n", med[x][y]);
}
//sort(quers.begin(), quers.begin() + )
return 0;
	
	 return 0;
}




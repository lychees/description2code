#include <cstring>
#include <cassert>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <climits>
#define LL long long
#define MX 5500000
#define PB push_back



using namespace std;

/*

LL gcd(LL a,LL b)
{
    if(b==0)return a;
    return gcd(b,a%b);
}

LL bigmod(LL p,LL e,LL M)
{
    if(e==0)return 1;
    if(e%2==0)
    {
        LL t=bigmod(p,e/2,M);
        return (t*t)%M;
    }
    return (bigmod(p,e-1,M)*p)%M;
}

LL modinverse(LL a,LL M)
{
    return bigmod(a,M-2,M);
}




bool is_prime[MAX];
L prime[MAX];

bool sieve()
{
    long i,j;
    prime[0]=2;
    int k=1;
    int sq=(sqrt(MAX));
    for(i=3; i<=sq; i+=2)
    {
        if(!is_prime[i])
        {
            for(j=i*i; j<=MAX; j+=(2*i))
                is_prime[j]=1;
        }
    }
    for(j=3; j<=MAX; j+=2)
    {
        if(!is_prime[j])
        {
            prime[k++]=j;
        }
    }
}


long NOD(long n)
{
    int  i,j,k;
    long sq=sqrt(n);
    long res=1;
    for(i=0; prime[i]<=sq; i++)
    {
        int cnt=1;
        if(n%prime[i]==0)
        {
            while(n%prime[i]==0)
            {
                cnt++;
                n=n/prime[i];
                if(n==1) break;
            }
            res*=cnt;
            sq=sqrt(n);
        }
    }
    if(n>1) res*=2;
    return res;
}
*/

bool done[102];
int arr[102];
int vis[102];

vector<int>V[105];

int solve(int st)
{
    queue<int>Q;
    int mn=105, ind=0;

    Q.push(st);

    while(!Q.empty())
    {
        int top=Q.front();
        Q.pop();

        if(done[top]) continue;
        done[top]=true;
        if(!vis[top])
        {
            if(arr[top]<mn)
            {
                mn=arr[top];
                ind=top;
            }
        }
        int sz=V[top].size();
        for(int i=0; i<sz; i++)
        {
            int cn=V[top][i];
            Q.push(cn);
        }
    }

    vis[ind]=true;
    memset(done, false, sizeof done);
    //cout<<ind<<endl;
    return mn;
}


int main()
{
    int i,j, k;
    int t;
    int n;
    string str;
    cin>>n;

    for(i=0; i<n; i++)
        cin>>arr[i];
    memset(vis, false, sizeof vis);
    memset(done, false, sizeof done);
    for(i=0; i<n; i++)
    {
        cin>>str;
        for(j=0; j<n; j++)
            if(str[j]=='Y')
            {
                V[i].PB(j);
            }
    }


    for(i=0; i<n; i++)
    {
        cout<<solve(i);
        if(i<n-1)
            cout<<" ";

    }
    cout<<endl;

    for(i=0; i<101; i++)
        V[i].clear();



    return 0;
}

/*

3
2 1 3
NNN
YNY
NYN

*/

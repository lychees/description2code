#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<iomanip>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<climits>
#include<cmath>
#include<cctype>

#define pb push_back
#define mp make_pair
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define ren(i,a,b) for(int i=a;i>=b;i--)
#define ff first
#define ss second
#define pll pair<long long int,long long int>
#define pii pair<int,int>
#define vll vector<long long int>  
#define vii vector<int>
#define gi(n) scanf("%d",&n)
#define gll(n) scanf("%lld",&n)
#define gstr(n) scanf("%s",n)
#define gl(n) cin >> n
#define oi(n) printf("%d",n)
#define oll(n) printf("%lld",n)
#define ostr(n) printf("%s",n)
#define ol(n) cout << n
#define os cout<<" "
#define on cout<<"\n"
#define o2(a,b) cout<<a<<" "<<b
#define all(n) n.begin(),n.end()
#define present(s,x) (s.find(x) != s.end()) 
#define cpresent(s,x) (find(all(s),x) != s.end()) 
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
#define LN 20
using namespace std;
 
typedef unsigned long long int ull;
typedef long long int ll;
typedef vector<vector<ll> > mat;

ll n,q,d[100005],a[100005];
int par[25][100005];
vii v[100005];

struct node
{
	ll ans=0,sum=0,pre=0,suf=0;
	
};

node val[25][100005];

node merge(node a,node b)
{
	node res;
	res.ans=max(a.ans,b.ans);
	res.ans=max(res.ans,a.suf+b.pre);
	res.pre=max(a.pre,a.sum+b.pre);
	res.suf=max(b.suf,b.sum+a.suf);
	res.sum=a.sum+b.sum;
	return res;
}

void dfs(int at,int p,int h=0)
{
  d[at]=h;	
  par[0][at]=p;
  val[0][at].sum=val[0][at].pre=val[0][at].suf=val[0][at].ans=a[at];
  rep(i,1,LN-1)
  {
  	par[i][at]=par[i-1][par[i-1][at]];
  	val[i][at]=merge(val[i-1][at],val[i-1][par[i-1][at]]);
  }
  tr(v[at],it)
  if(*it!=p)
  dfs(*it,at,h+1);
}

int lca(int u,int v)
{
	if(d[u]<d[v])
	swap(u,v);
	int diff=d[u]-d[v];
	rep(i,0,LN-1)
	{
		if((1<<i)&diff)
		u=par[i][u];
	}
	if(u==v)
	return v;
	
	ren(i,LN-1,0)
	{
		if(par[i][u]!=par[i][v])
		u=par[i][u],v=par[i][v];
	}
	return par[0][u];
}

node get(int u,int diff)
{
	int f=0;node ans;
	rep(i,0,LN-1)
	{
		if((1<<i)&diff)
		{
			if(f==0)
			ans=val[i][u],f=1;
			else
			ans=merge(ans,val[i][u]);
			u=par[i][u];
		}
	}
	return ans;
}

int main()
{ios_base::sync_with_stdio(false);
cin.tie(0);
 cin>>n;
 rep(i,0,n-2)
 {
 	int x,y;
 	cin>>x>>y;
 	x--;y--;
 	v[x].pb(y);
 	v[y].pb(x);
 }
 rep(i,0,n-1)
 cin>>a[i];
 
 dfs(0,-1,0);
 
 cin>>q;
 while(q--)
 {
 	int x,y;
 	cin>>x>>y;
 	x--;y--;
 	if(x==y)
 	{
 		ol(val[0][x].ans);on;
 		continue;
	}
 	int l=lca(x,y);
 	if(l==x)
 	swap(x,y);
 	node a1=get(x,d[x]-d[l]),a2=get(y,d[y]-d[l]+1);
 	swap(a2.pre,a2.suf);
 	a1=merge(a1,a2);
 	ol(a1.ans);on;
 }
return 0;
}
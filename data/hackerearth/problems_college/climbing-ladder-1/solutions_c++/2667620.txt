#include<bits/stdc++.h>
using namespace std;

const int N=1e6+10;
typedef pair<int,int>pi;
typedef long long ll;

int eulerPhi[N];
bool isPrime[N];
vector<pi>res;
map<int,int>mp;
map<int,int> :: iterator it;
int a[N],b[N];

void eulerSieve() {
  isPrime[1]=true;
  for(int i=2;i<N;i++) {
    if(isPrime[i]==false) {
      for(int j=2*i;j<N;j+=i) {
        isPrime[j]=true;
      }
    }
  }
  for(int i=1;i<N;i++) {
    eulerPhi[i]=i;
  }
  for(int i=1;i<N;i++) {
    if(!isPrime[i]) {
      for(int j=i;j<N;j+=i) {
        eulerPhi[j]-=eulerPhi[j]/i;
      }
    }
  }
  return;
}
bool compare(pi a,pi b) {
  if(a.first!=b.first) {
    return a.first<b.first;
  }
  return a.second<b.second;
}
int main() {
	ios:: sync_with_stdio(0);
    
  //freopen("a.cpp","r",stdin);
  eulerSieve();
  for(int i=1;i<N;i++) {
    if(mp.find(eulerPhi[i])==mp.end()) {
      mp[eulerPhi[i]]=i;
    } else {
      mp[eulerPhi[i]]=min(mp[eulerPhi[i]],i);
    }
  }
  for(it=mp.begin();it!=mp.end();it++) {
    res.push_back(pi(it->first,it->second));
  }
  for(int i=res.size()-2;i>=0;i--) {
    res[i].second=min(res[i].second,res[i+1].second);
  }
  for(int i=0;i<res.size();i++) {
    a[i]=res[i].first;
    b[i]=res[i].second;
  }
  int tt;
  cin>>tt;
  int sz=res.size();
  while(tt--) {
  	int n;
    cin>>n;
    ll sum=0;
    for(int i=0;i<n;i++) {
      int val;
      cin>>val;
      int idx=lower_bound(a,a+sz-1,val)-a;
      sum+=b[idx];
    }
    cout<<sum<<endl;
  }
  return 0;
}

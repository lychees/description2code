#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 55;
int m, n, l[N], r[N];

inline bool unsortable(vector<int> x) {
	repu(i, 0, m) {
		sort(x.begin() + l[i], x.begin() + r[i]);
	}
	
	repu(i, 0, n) {
		if (x[i] != i) return true;
	}
	return false;
}

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	cin >> n >> m;
	repu(i, 0, m) {
		cin >> l[i] >> r[i];
		--l[i];
	}
	
	vector<int> x(n);
	
	repu(i, 0, n) x[i] = n - 1 - i;
	
	if (!unsortable(x)) {
		printf("All ok!\n");
	}
	else {
		repu(i, 0, n) {
			vector<int> tmp;
			repu(j, i, n) {
				tmp.push_back(x[j]);
			}
			sort(all(tmp));
			repu(j, 0, tmp.size()) {
				int cnt = 0;
				x[i] = tmp[j];
				repu(k, i + 1, n) {
					if (tmp[cnt] == x[i]) cnt++;
					x[k] = tmp[cnt++];
				}
				sort(x.begin() + i + 1, x.end());
				reverse(x.begin() + i + 1, x.end());
				if (unsortable(x)) break;
			}
			printf("%d%c", x[i] + 1, i == n - 1 ? '\n' : ' ');
		}
	}
	
	return 0;
}

/*#include<bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    struct node* l;
    struct node* r;
};
struct node* new_node(int value)
{
    struct node* nodee=(struct node*)malloc(sizeof(struct node));
    nodee->data=value;
    nodee->l=NULL;
    nodee->r=NULL;
    return nodee;
}
void inorder(struct node* root)
{
    if(root==NULL)
        return ;
    inorder(root->l);
    printf("%d ",root->data);
    inorder(root->r);
}
int main()
{
    struct node* root=(struct node*)malloc(sizeof(struct node));
    root=new_node(10);
    root->l=new_node(-2);
    root->r=new_node(7);
    root->l->l=new_node(8);
    root->l->r=new_node(-4);
        return 0;
}
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<pii> vpii;
typedef unsigned long long llu;

#define debug(x) cerr<<#x<<" "<<x<<endl;
#define f first
#define s second
#define mp make_pair
#define pb push_back
vector< pii > graph[501];
int dist[600],vis[600];
void dijk(int s)
{
    priority_queue<pii,vpii,greater<pii> > Q;
    dist[s]=0;
    Q.push(mp(dist[s],s));
    while(!Q.empty())
    {
        int z=Q.top().second;
        Q.pop();
        if(vis[z])
            continue;
        unsigned int siz=graph[z].size();
        for(int i=0;i<siz;i++)
        {
            int l=graph[z][i].first;
            int m=graph[z][i].second;
            if(dist[l]>dist[z]+m)
            {
                dist[l]=dist[z]+m;
                Q.push(mp(dist[l],l));
            }
        }
        vis[z]=1;
    }
}
int  main()
{
    for(int i=0;i<=599;i++)
    {
        vis[i]=0;
        dist[i]=INT_MAX;
    }
    int q,n;
        scanf("%d",&n);
        for(int i=1;i<=n;i++)
        {       int x,y,v;
               scanf("%d %d %d",&x,&y,&v);
               graph[x].push_back(mp(y,v));
               graph[y].push_back(mp(x,v));
        }
        int source,dest;
        scanf("%d",&source);
        dijk(source);
        scanf("%d",&q);
        while(q--)
        {  scanf("%d",&dest);
         if(dist[dest]==INT_MAX)
            printf("NO PATH\n");
         else
             printf("%d\n",dist[dest]);
        }
return 0;
}

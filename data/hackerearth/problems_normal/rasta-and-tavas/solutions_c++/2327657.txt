/* ############################################################################
 * START OF HEADER 
 * ############################################################################
 */
#include<cstdio>
#include<cstdio>
#include<iostream>
#include<cstring>
#include<string>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<ctime>
#include<algorithm>
#include<vector>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<set>
#include<map>
using namespace std;

typedef unsigned long long ull;
#define LL long long
#define LD long double

#define sc(x)  scanf("%c",&x) //char
#define si(x)  scanf("%d",&x) //int
#define sf(x)  scanf("%f",&x) //float
#define sl(x)  scanf("%I64d",&x) //int64_
#define sd(x)  scanf("%lf",&x) //double
#define sld(x) scanf("%Lf",&x) //long double
#define slld(x) scanf("%lld",&x) //long long int
#define ss(x)  scanf("%s",x) // string

#define pc(x)  printf("%c",x)
#define pi(x)  printf("%d ",x)
#define pf(x)  printf("%f ",x)
#define pl(x)  printf("%I64d ",x)
#define pd(x)  printf("%lf ",x)
#define pld(x) printf("%Lf ",x)
#define plld(x) printf("%lld ", x);
#define ps(x) printf("%s", x);

#define pin(x)  printf("%d\n",x)
#define pln(x)  printf("%I64d\n",x)
#define pfn(x)  printf("%f\n",x)
#define pdn(x)  printf("%lf\n",x)
#define pldn(x) printf("%Lf\n",x)
#define plldn(x) printf("%lld\n", x);
#define psn(x)  printf("%s\n",x)

#define pn() printf("\n")
#define _p() printf(" ")

#define MODVAL 1000000007

#define FORab(i,a,b) for(int i=a;i<=b;i++)
#define REVab(i,a,b) for(int i=a;i>=b;i--)
#define FORn(i,n) for(i=0;i<n;i++)
#define REVn(i,n) for(int i=n;i>=0;i--)
#define FORSTL(it, a) for(it=a.begin(); it!=a.end(); it++)
#define REVSTL(it, a) for(it=a.end(); it!=a.begin(); it--)

#define MEMS(a,v) memset(a, 0 ,v)
#define MAX(x,y) (x)>(y)?(x):(y)
#define MIN(x,y) (x)<(y)?(x):(y)
#define pb push_back
#define pob pop_back
#define b() begin()
#define e() end()
#define s() size()
#define cl() clear()
#define fi first
#define se second
#define INF (1000000000)
#define SZ 100000
#define MOD (1<<30)

#define VS vector<string>
#define VI vector<int>
#define VF vector<float>
#define VD vector<double>
#define MII map<int,int>
#define MIS map<int, string>
#define MSI map<string, int> 
#define MSS map<string, string>

#define read1dArray(a, N)  { \
  int i = 0; \
  while(N--) { \
    si(a[i++]); \
  } \
} 

#define read2dArray(a, N, M)  { \
  int i = 0; \
  int j = 0; \
  for(int i=0; i<N; i++) { \
    for(int j=0; j<M; j++) { \
      si(a[i][j]); \
    } \
  } \
} 

#define VSI vector<string>::iterator
#define VII vector<int>:iterator
#define VFI vector<float>::iterator
#define VDI vector<double>::iterator
#define MIII map<int,int>::iterator
#define MISI map<int, string>::iterator
#define MSII map<string, int>::iterator 
#define MSSI map<string, string>::iterator
#define print_array(x,n) for(int i=0; i<n; i++) { cout << x[i] << endl; }
#define TEST int T;scanf("%d",&T);while(T--)
#define CASES int N;scanf("%d",&N);while(N--)

#define sizeint 4       //4-bytes
#define sizelong 4      // 4-bytes
#define sizelonglong 8  // 8-bytes

/* ############################################################################
 * END OF HEADER 
 * ############################################################################
*/

void
prime_gen(ull limit, vector<ull> &result) {
  /* THIS METHOD USES SIEVE OF ATKINs ALGO */
  /* Flag to indicate whether prime or not */
  bool *flag = new bool[limit+1];
  memset(flag, 0, (limit+1)*sizeof(bool));
  result.clear();
  result.push_back(2); 
  result.push_back(3); 
  ull root = ceil(sqrt(limit));
  ull n;
  for(ull x=0; x <=root; x++) {
    for(ull y=0; y<=root; y++) {
      n = 4*x*x + y*y;
      if((n <= limit) && (( n%12 == 1) || (n%12 == 5))) {
        // Flip the flag. The reason for flipping is, we are basically interseted in 
        // finding if 4x^2 + y^2 = n has odd number of solutions. So if after flipping
        // the flag[n] "k" times, if flag[n] is true, that means k(i.e no of soln) is odd 
        // else it is even
        flag[n] ^= true;
      }
      n = 3*x*x + y*y;
      if((n <= limit) && (n%12 == 7)) {
        flag[n] ^= true;
      }
      if(x > y) {
        n = 3*x*x - y*y;
        if((n <= limit) && (n%12 == 11)) {
          flag[n] ^= true;
        }
      }
    }
  }
  // Eliminate all the composite by seiving
  for(ull n=5; n <= root; n++) {
    if(flag[n] == true) {
      // We found a prime
      ull square=n*n;
      int multiple_factor=1;
      while((multiple_factor*square) <= limit) {
        flag[(multiple_factor*square)] = false;
        multiple_factor++;
      }
    }
  }
  // Now all the numbers that are marked true are prime
  for(ull n=5; n<= limit; n++) {
    if(flag[n] == true) {
      result.push_back(n);
    }
  }
}


int main() {
  ull limit = 10e+6;
  vector<ull> result;
  prime_gen(limit, result);
  int N, K;
  si(N); si(K);
  std::vector< std::set<int> > prime_sets(N+1);
  prime_sets[1].insert(1);
  int sqN = sqrt(N);
  int found = 0;
  for(int i=2; i<=N; i++) {
    found = 0;
    for(int j=0; j<result.size() && result[j] <= sqN; j++) {
      if(i == result[j]) {
        prime_sets[i].insert(result[j]);
        found = 1;
        break;
      }
      if((i%result[j]) == 0) {
        prime_sets[i] = prime_sets[(i/result[j])];
        prime_sets[i].insert(result[j]);
        found = 1;
        break;
      }
    }
    if(!found) {
      prime_sets[i].insert(i);
    }
  }

  int ans = 0;
  std::set<int>::iterator it;
  for(int i=2; i<=N; i++) {
    int ret=0;
    for(it=prime_sets[i].begin(); it!= prime_sets[i].end(); it++) {
      ret += *it;
    }
    if(ret == K) {
       ans++;
    }
  }
  pin(ans);
}
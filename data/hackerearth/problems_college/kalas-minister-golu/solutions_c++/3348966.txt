#include <bits/stdc++.h>

/*
 * “If debugging is the process of removing software bugs, then programming must
 * be the process of putting them in.”
 * – Edsger Dijkstra 
 */

using namespace std;

int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};

#define read(a) freopen("a.txt","r",stdin)
#define write(b) freopen("b.txt","w",stdout)

#define min3(a,b,c) min(a,min(b,c))
#define max3(a,b,c) max(a,max(b,c))
#define min4(a,b,c,d) min(min(a,b),min(c,d))
#define max4(a,b,c,d) max(max(a,b),max(c,d))

#define maxall(v) *max_element(all(v))
#define all(v) v.begin(),v.end()
#define minall(v) *min_element(all(v))

#define pb push_back
#define mk make_pair

#define REV(x) reverse(x.begin(),x.end())
#define SORT(v) sort(all(v))
#define UN(v) SORT(v), (v).earse(unique(all(v)),v.end())
#define common(a,b) SORT(a), SORT(b), a.erase(set_intersection(all(a),all(b),a.begin()),a.end())
#define uncommon(a,b) SORT(a), SORT(b), a.erase(set_symmetric_difference(all(a),all(b),a.begin()),a.end())
#define FILL(a,d) memset(a,d,sizeof(a))

#define LL long long
#define PI 2*acos(0.0)
#define pi pair<int,int>
#define MAXM 2147483647
#define MAXML 9223372036854775807LL
#define MODM 1000000007

long long par[200005], mn[200005], w[200005];
vector < long long int > v;

int findPar (int a) {
	if(par[a]!=par[par[a]]) {
		par[a]= findPar(par[a]);
	}
	return par[a];
}

void disjointSetUnion(int a, int b) {
	int pa = findPar(a);
	int pb = findPar(b);

	if(pa==pb) 
		return;
	
	if(mn[pa] < mn[pb]) {
		mn[pb] = mn[pa];
		par[pb] = pa;
	}
	else {
		mn[pa] = mn[pb];
		par[pa] = pb;
	}
}

int  main () {
	int tc;
	scanf("%d",&tc);
		while(tc--) {
			int n, m;
			v.clear();
			scanf("%d%d",&n,&m);

			for (int i=1; i<=n; i++) {
				scanf("%Ld",&w[i]);
				par[i] = i;
				mn[i] = w[i];
			}

			int x, y;
			for (int i=1; i<=m; i++) {
				scanf("%d%d",&x,&y);
				disjointSetUnion(x,y);
			}

			for (int i=1; i<=n; i++) {
				if( par[i]==i ) {
					v.push_back(w[i]);
				}
			}

			sort(v.begin(),v.end());
			long long ans = 0;
			for (int i=1; i<v.size(); i++) {
				ans = ans + (v[0]*v[i]);
			}

			cout << ans << endl;
		}
	return  0;
}

#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <cmath>
#include <stack>
#include <map>
#include <set>
#include <deque>
#include <cstring>
#include <functional>
#include <climits>
#include <list>
#include <ctime>
#include <complex>

#define F1(x,y,z) for(int x=y;x<z;x++)
#define F2(x,y,z) for(int x=y;x<=z;x++)
#define F3(x,y,z) for(int x=y;x>z;x--)
#define F4(x,y,z) for(int x=y;x>=z;x--)
#define pb push_back
#define LL long long
#define co complex<double>

#define MAX 100005
#define AMAX 1500
#define MOD 1000000007

#define f(c,d) ((1<<(c))*(d))

using namespace std;

int n,m,at,i[MAX],ta,tb,tc;
vector<int> x[MAX],y[MAX];
pair<int,int> z[19][MAX*2]; //<depth,node> 

void dfs(int a,int b,int c){
	z[0][i[a]=at++]=make_pair(c,a);
	F1(d,0,y[a].size())if(y[a][d]!=b){
		dfs(y[a][d],a,c+1);
		z[0][at++]=make_pair(c,a);
	}
}

pair<int,int> f1(int a,int b,int c,int d){
	if(a==f(c,d)&&b==f(c,d+1))return z[c][d];
	c--;
	d=d*2+1;
	if(b<=f(c,d))return f1(a,b,c,d-1);
	if(a>=f(c,d))return f1(a,b,c,d);
	return min(f1(a,f(c,d),c,d-1),f1(f(c,d),b,c,d));
}

int dis(int a,int b){
	return z[0][i[a]].first+z[0][i[b]].first-f1(min(i[a],i[b]),max(i[a],i[b])+1,18,0).first*2;
}

int main(){
	scanf("%d%d",&n,&m);
	F2(a,1,n){
		scanf("%d",&ta);
		x[ta].pb(a);
	}
	F1(a,1,n){
		scanf("%d%d",&ta,&tb);
		y[ta].pb(tb);
		y[tb].pb(ta);
	}
	dfs(1,0,0);
	F1(a,1,19)for(int b=0;f(a,b)<at;b++){
		if(f(a-1,b*2+1)<at)z[a][b]=min(z[a-1][b*2],z[a-1][b*2+1]);
		else z[a][b]=z[a-1][b*2];
	}
	F2(a,1,m){
		ta=-1;
		F1(b,0,x[a].size()){
			tc=dis(x[a][0],x[a][b]);
			if(tc>ta){
				ta=tc;
				tb=b;
			}
		}
		F1(b,0,x[a].size())ta=max(ta,dis(x[a][tb],x[a][b]));
		printf("%d%c",ta,a==m?'\n':' ');
	}
	//system("pause");
}

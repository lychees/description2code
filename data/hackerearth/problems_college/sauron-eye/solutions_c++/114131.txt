#include <iostream>
using namespace std;

#define MOD 1000000007

void multiply(long long A[][2], long long B[][2])
{
	int C[2][2] = {0};
	for (int i = 0; i < 2; i++)
		for (int  j = 0; j < 2; j++) 
			for (int k = 0; k < 2; k++){
				long long tmp = A[i][k] * B[k][j];
				if (tmp < 0)
					//tmp = MOD + tmp;
					tmp = ((tmp / MOD) + ((tmp % MOD)? 1: 0)) * MOD + tmp;
				C[i][j] = (C[i][j] + tmp)%MOD;
			}
	for (int i = 0; i < 2; i++)
		for (int j = 0; j < 2; j++)
			A[i][j] = C[i][j];			
	return;
}

void power(long long matrix[][2], long long base_matrix[][2], long long exp)
{
	if (exp == 0) {
		matrix[0][0] = 1;	
		matrix[0][1] = 0;
		matrix[1][0] = 0;
		matrix[1][1] = 1;
		return;
	}
	if (exp == 1)
		return;
	power(matrix, base_matrix, exp/2);
	multiply(matrix, matrix);
	if (exp & 1) 
		multiply(matrix, base_matrix);
	return;
}

long long linear_recurrence(long long n)
{
	long long matrix[2][2] = {3, 1, -1, 0};
	long long base_matrix[2][2] = {3, 1, -1, 0};
	long long initial_matrix[2][2] = {3, 1, 1, 0};;
	power(matrix, base_matrix, n);
	multiply(initial_matrix, matrix);
	/*for (int i = 0; i < 2; i++){
		for (int j = 0; j < 2; j++)
			cout << matrix[i][j] <<" ";
		cout << endl;
	}*/
	return initial_matrix[1][0];
}


int main()
{
	int t;
	cin >> t;
	while (t--){
		long long n;
		cin >> n;
		cout << linear_recurrence(n - 1) << endl;
	}
	return 0;
}

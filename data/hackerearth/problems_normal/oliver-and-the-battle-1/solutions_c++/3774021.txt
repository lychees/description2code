#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
vector<vector<bool>> s;
int n, m;
int dfs ( int i0,int j0 ) {
    int su=1;
    reu ( i1,-1,2 ) reu ( j1,-1,2 ) {
        int i=i0+i1,j=j0+j1;
        if ( i>=0 &&i<n &&j>=0 &&j<m ) {
            if ( s[i][j] ) {
                s[i][j]=0;
                su+=dfs ( i,j );
            }
        }
    }
    return su;
}
#include <sys/resource.h>

void incStack(){
 const rlim_t kStackSize = 64L * 1024L * 1024L;   // min stack size = 64 Mb
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
        }
    }   
}
int main() {
    incStack();
    ios_base::sync_with_stdio ( false );
    inrep {

        cin>>n>>m;
        s=vector<vector<bool>> ( n,vector<bool> ( m ) );
        rep ( i,n ) rep ( j,m ) {
            char c;
            cin>>c;
            if ( c=='1' ) s[i][j]=1;
        }
        int total=0,maxs=0;
        rep ( i,n ) rep ( j,m ) {
            if ( s[i][j] ) {
                s[i][j]=0;
                int r=dfs ( i,j );
                total++;
                maxs=max ( maxs,r );
            }
        }
        cout<<total<<" "<<maxs<<'\n';

    }
}

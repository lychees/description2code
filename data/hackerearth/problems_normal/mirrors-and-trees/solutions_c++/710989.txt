#include<stdio.h>
#include<limits.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<iostream>
#include<vector>
#include<assert.h>
#include <map>
#include<set>
#include<stack>
#include<queue>
#include<algorithm>
#define pb push_back
#define mp make_pair
#define clr(x) x.clear()
#define sz(x) ((int)(x).size())
#define F first
#define S second
#define rep(i,b) for(i=0;i<b;i++)
#define rep1(i,b) for(i=1;i<=b;i++)
#define mod 1000000007
#define pi(n) printf("%d",n)
#define pin(n) printf("%d\n",n)
#define piw(n) printf("%d ",n)
#define pll(n) printf("%lld",n)
#define plln(n) printf("%lld\n",n)
#define pllw(n) printf("%lld ",n)
#define sll(n) scanf("%lld",&n)
#define ps(s) printf("%s",s)
#define psn(s) printf("%s\n",s)
#define psw(s) printf("%s ",s)
#define si(n) scanf("%d",&n)
#define pn printf("\n")
#define pw printf(" ")
#define inf 1e15
using namespace std;
int par[887];
int parent(int x)
{
    if(par[x]==x)
    return x;
    return par[x]=parent(par[x]);
}
int c;
int rnk[50008];
void uni(int x,int y)
{
    x=parent(x);
    y=parent(y);
    if(x==y)
    return;
    c--;
    if(rnk[x]<rnk[y])
    {
        par[x]=y;
    }
    else
    {
        par[y]=x;
        if(rnk[x]==rnk[y])
            rnk[x]++;
    }
}
long long a[1000008];
bool vis[1000008],vis2[1000008];
int n;
void dfs(int node,int lev)
{
if(node>n||a[node]==0)
return;
if(!vis[node]&&!vis2[lev])
{
    cout<<a[node]<<"\n";vis[node]=1;vis2[lev]=1;
}
dfs(2*node+1,lev+1);
dfs(2*node,lev+1);
}
void dfs2(int node,int lev)
{
if(node>n||a[node]==0)
return;
if(!vis[node]&&!vis2[lev])
{
vis[node]=1;vis2[lev]=1;
    cout<<a[node]<<"\n";
}
dfs2(2*node,lev+1);
dfs2(2*node+1,lev+1);
    return;
}
int main()
{
	/*


rep(i,n){
rep(j,n){
if(i!=j&&j!=par){if(ispar(j,i)==1){cout<<i<<" "<<j<<endl;fck[j]=i;}}}}

rep(i,n){cout<<fck[i]+1;pw;}*/
int t,m,i,j,k,l;
cin>>t;
while(t--)
{
cin>>n;
memset(vis,0,sizeof(vis));
for(i=1;i<=n;i++)
cin>>(a[i]);
memset(vis2,0,sizeof(vis2));
dfs(1,1);
memset(vis2,0,sizeof(vis2));
dfs2(1,1);

if(t)
cout<<"\n";
}
}
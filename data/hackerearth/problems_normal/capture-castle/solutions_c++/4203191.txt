#include <stdio.h>
#include<iostream>
#define INT_MAX	2147483647
#define SIZE 1001
#define MIN(a,b) a>b?b:a

using namespace std;

int map[SIZE][SIZE];
int visited[SIZE][SIZE];
int c_x, c_y, timet, min_time;
int N, M;
 
void initial(void)
{
	int i,j;
 
	for(i = 1; i <= N; i++)
	{
		for(j = 1; j <= M; j++)
		{
			map[i][j] = visited[i][j] = -1;
		}
	}
}
 
int is_safe(int i, int j)
{
	if((i < 1) || (i > N) || (j < 1) || (j > M))
		return 0;
	return 1;
}
 
void find_path(int x, int y, int curr_time)
{
	if (!is_safe(x, y))
		return;
 
	curr_time = curr_time - map[x][y];
 
	if(curr_time < 0)
		return;
	if (curr_time <= visited[x][y])
		return;
	if (visited[x][y] == -1 || curr_time > visited[x][y])
		visited[x][y] = curr_time;
 
	find_path(x-1, y, curr_time);
	find_path(x+1, y, curr_time);
	find_path(x, y-1, curr_time);
	find_path(x, y+1, curr_time);
}
 
int main()
{
	int i, j;
 
	int t, test_case, Answer = 0;

	scanf("%d",&t);
	for(test_case = 1; test_case <= t; test_case++)
	{
		scanf("%d %d", &N, &M);
 
		initial();
 
		for(i=1; i<=N; i++)
		{
			for(j=1; j<=M; j++)
			{
				scanf("%d",&map[i][j]);
			}
		}
 
		scanf("%d %d %d", &c_x, &c_y, &timet);
 
		Answer = 0;
		find_path(1, 1, timet);
		Answer = visited[c_x][c_y];
 
		if (Answer >= 0) {
			printf("YES\n");
			printf("%d\n", Answer);
		} else
			printf("NO\n");
	}

	return 0;
}
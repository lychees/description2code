#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define inrep int t;cin>>t; while(t--)
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define ppcnt(x) __builtin_popcount(x)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
const int MAXN=600000;
double props[MAXN];
int n;
double p[18][18];

int main() {
    ios_base::sync_with_stdio ( false );
    cin>>n;
    rep ( i,n ) rep ( j,n ) cin>>p[i][j];
    const int  maxn= ( 1<<n );
    vector<double> props ( maxn );
    vector<vi> zeros ( n+1 );
    rep ( i,maxn ) {
        int ones=ppcnt ( i );
//         cout<<ones<<" "<<n-ones<<endl;
        zeros[n-ones].push_back ( i );

    }
    props[maxn-1]=1;
//     cout<<zeros<<endl;
    rep ( z,n-1 ) {

        for ( int m: zeros[z] ) {
            double val=2*props[m]/ ( n-z-1 )/(n-z);
            if ( ! val ) continue;
            rep ( i,n ) {
                if ( ! ( m& ( 1<<i ) ) ) continue;
                rep ( j,n ) {
                    if ( ( i!=j ) && ( m & ( 1<<j ) ) ) {
                        props[m^ ( 1<<j )]+=val*p[i][j];
                    }

                }
            }
        }

    }
//     cout<<props;
    vector<double> res;
    rep ( i,n ) {
        res.push_back ( props[1<<i] );

    }
    cout.setf(ios::fixed);
    cout.precision(5);
    cout<<res;

}

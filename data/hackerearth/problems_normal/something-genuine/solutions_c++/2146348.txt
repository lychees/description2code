#include <bits/stdc++.h> 

using namespace std;
 
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(x) (int)((x).size()) 
#define forn(i,n) for (int i = 0; (i) < (n); ++i)
#define fornr(i,n) for (int i = (n) - 1; (i) >= 0; --i)
#define forab(i,a,b) for (int i = (a); (i) < (b); ++i)
#define forba(i,a,b) for (int i = (b) - 1; (i) >= (a); --i)
#define forit(it,c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
#define all(c) (c).begin(),(c).end() 

#ifdef LOCAL
    #define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
    #define eprintf(...) static_cast<void>(0)   
#endif

#ifdef _WIN32
    #define I64 "%I64d"
#else
    #define I64 "%lld"
#endif

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef unsigned int uint;
typedef vector <int> vi;
typedef pair <int, int> pii;

#define FNAME ""

const int MAXN = 2e5 + 5;
const int MOD = 1e9 + 7;

set <int> s;
int a[MAXN], b[MAXN], nex[MAXN], last[MAXN];
int add[4 * MAXN], t[2][4 * MAXN];

inline int sub(int a)
{
    if (a >= MOD)
        a -= MOD;
    return a;
}

void push(int v, int ll, int rr)
{
    if (ll != rr - 1)
    {
        add[2 * v] += add[v];
        add[2 * v + 1] += add[v]; 
    }
    t[1][v] = ((t[1][v] - 2 * add[v] * 1ll * t[0][v] + add[v] * 1ll * add[v] * 1ll * (rr - ll)) % MOD + MOD) % MOD;
    t[0][v] = ((t[0][v] - add[v] * 1ll * (rr - ll)) % MOD + MOD) % MOD;
    add[v] = 0;
}

void update(int v, int ll, int rr, int l, int r)
{
    if (ll >= l && rr <= r)
    {
        add[v]++;
        push(v, ll, rr);
        return;
    }
    push(v, ll, rr);
    if (ll >= r || l >= rr)
        return;
    int mm = (ll + rr) / 2;
    update(2 * v, ll, mm, l, r);
    update(2 * v + 1, mm, rr, l, r);
    forn (j, 2)
        t[j][v] = sub(t[j][2 * v] + t[j][2 * v + 1]);
}

int main() 
{
#ifdef LOCAL    
    freopen(FNAME".in", "r", stdin);
    freopen(FNAME".out", "w", stdout); 
#endif    
    int n;
    scanf("%d", &n);
    forn (i, n)
        scanf("%d", &a[i]), s.insert(a[i]), b[i] = sz(s);
    fornr (i, n)
    {
        if (last[a[i]] != 0)
            nex[i] = last[a[i]] - 1;
        else
            nex[i] = n;
        last[a[i]] = i + 1;
    }
    int N = 1;
    while (N < n)
        N *= 2;
    forn (i, n)
        t[0][N + i] = b[i], t[1][N + i] = (b[i] * 1ll * b[i]) % MOD;
    forba (i, 1, N)
        forn (j, 2)
           t[j][i] = sub(t[j][2 * i] + t[j][2 * i + 1]);
    int ans = t[1][1];
    forn (i, n)
    {
        update(1, 0, N, i, nex[i]);
        ans = sub(ans + t[1][1]);    
    }
    printf("%d\n", (ans % MOD + MOD) % MOD);
    return 0;
}
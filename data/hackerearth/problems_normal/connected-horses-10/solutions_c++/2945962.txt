#include <iostream>
#include <bits/stdc++.h>
using namespace std;

const int maxn = 1e6 + 10;
const int maxm = 1e3 + 5;
const int mod = 1e9 + 7;
int F[ maxn ];

void pre() {
	F[0] = 1;
	for(int i=1; i<maxn; i++) {
		F[i] = 1LL * F[i-1] * i % mod;
	}
}

int n, m, q;
int X[] = {1, -1, 2, 2, -1, 1, -2, -2};
int Y[] = {2, 2, 1, -1, -2, -2, -1, 1};
bool G[ maxm ][ maxm ];
int cnt;
void dfs(int x, int y) {
	if(!G[x][y]) return;
	cnt ++;
	G[x][y] = false;
	for(int i=0; i<8; i++) {
		int nx, ny;
		nx = x + X[i];
		ny = y + Y[i];
		if( nx <= n && ny <= m && nx > 0 && ny > 0 && G[nx][ny]) {
			dfs(nx, ny);
		}
	}
}
int main()
{
	pre();
	int t; scanf("%d", &t);
	while( t-- ) {
		scanf("%d%d%d", &n, &m, &q);
		for(int i=1; i<=n; i++)
			for(int j=1; j<=m; j++) 
				G[i][j] = false;
		while( q-- ) {
			int u, v;
			scanf("%d%d", &u, &v);
			G[u][v] = true;
		}
		int ans = 1;
		for(int i=1; i<=n; i++) {
			for(int j=1; j<=m; j++) {
				cnt = 0;
				dfs(i, j);
				ans = 1LL * ans * F[cnt] % mod;
			}
		}
		cout << ans << "\n";
	}
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
long long MOD;
int a[100005];
int b[100005];
int c[100005];
long long power(long long n, long long m)
{
    if(m==0) return 1LL;
    long long x=power(n,m/2);
    if(m%2==0) return ((x%MOD)*(x%MOD))%MOD;
    else return (((x%MOD)*(x%MOD)%MOD)*n)%MOD;
}
long long int phi(long long int n)
{
    double result = n;   // Initialize result as n
 
    // Consider all prime factors of n and for every prime
    // factor p, multiply result with (1 - 1/p)
    for (long long int p=2; p*p<=n; ++p)
    {
        // Check if p is a prime factor.
        if (n % p == 0)
        {
            // If yes, then update n and result
            while (n % p == 0)
                n /= p;
            result *= (1.0 - (1.0 / (double) p));
        }
    }
 
    // If n has a prime factor greater than sqrt(n)
    // (There can be at-most one such prime factor)
    if (n > 1)
        result *= (1.0 - (1.0 / (double) n));
 
    return (long long int)result;
}

int main()
{
	int n;
	scanf("%d",&n);
	long long x;
	long long temp;
	long long res=1LL;
	long long y;
	scanf("%lld %lld",&x,&MOD);
	int i,j;
	x=x%MOD;
	y=phi(MOD);
	
	for(i=0;i<n;i++)
	{
		scanf("%lld",&temp);
		temp=temp%(y);
		res=(res*temp)%(y);
	}
	res=power(x,res);
	res=res%MOD;
	printf("%lld\n",res);
}
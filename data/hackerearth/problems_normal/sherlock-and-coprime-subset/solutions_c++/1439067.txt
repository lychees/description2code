#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanfO("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion

ll _sieve_size; // ll is defined as: typedef long long ll;
bitset<20000010> bs; // 10^7 + small extra bits should be enough for most prime-related problems
vi primes; // compact list of primes in form of vector<int>
void sieve(ll upperbound) { // create list of primes in [0 .. upperbound]
_sieve_size = upperbound + 1; // add 1 to include upperbound
bs.reset(); bs.flip(); // set all numbers to 1
bs.set(0, false); bs.set(1, false); // except index 0 and 1
for (ll i = 2; i <= _sieve_size; i++) if (bs.test((size_t)i)) {
// cross out multiples of i starting from i * i!
for (ll j = i * i; j <= _sieve_size; j += i) bs.set((size_t)j, false);
primes.push_back((int)i); // also add this vector containing list of primes
}
} // call this method in main method
bool isPrime(ll N) { // a good enough deterministic prime tester
if (N < _sieve_size) return bs.test(N); // O(1) for small primes
REP (i, 0, primes.size() - 1)
{
    if (N % primes[i] == 0)
        return false;
    if(primes[i] > sqrt(N))
        return true;
}
return true; // it takes longer time if N is a large prime!
} // Note: only work for N <= (last prime in vi "primes")^2
// in int main()
int sz;
vi val;
int dp[59][1 << 16];

int memoize(int i,int j)
{
    if(i == sz)
        return 0;
    if(dp[i][j] != -1)
        return dp[i][j];
    int maxi = -1;
    int q = val[i];
    if( (q & j) == 0 )
    {
        q = (q | j);
        maxi = max(maxi,1 + memoize(i + 1, q ));
    }
    maxi = max(maxi,memoize(i + 1,j));
    return dp[i][j] = maxi;
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    sieve(55);
    int t;s(t);
    while(t--)
    {
        memset(dp,-1,sizeof(dp));
        val.clear();
        int n;s(n);
        //set <int > myset;
        REP(i,0,n-1)
        {
            int p;s(p);
            val.push_back(p);
        }
        /*set <int>::iterator it = myset.begin();
        while( it != myset.end() )
        {
            val.push_back(*it);
            it++;
        }*/
        sz = val.size();
        REP(i,0,sz-1)
        {
            int q = 0;
            REP(j,0,14)
            {
                if( val[i] % primes[j] == 0 )
                {
                    q |= (1 << j);
                }
            }
            val[i] = q;
        }
        int ans = memoize(0,0);
        printf("%d\n",ans);
    }
    return 0;
}

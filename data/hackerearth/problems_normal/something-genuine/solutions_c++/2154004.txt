#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <algorithm>
#include <cassert>
#include <memory.h>
#include <deque>
using namespace std;

#define rank i_didnt_want_to_do_it

const int MD = 1000000000 + 7;

int naive(vector<int>& a) {
	vector<int> used(a.size() + 1);
	int n = a.size();
	int o = 0;
	long long res = 0;
	for (int i = 0; i < n; i++) {
		o++;
		int dif = 0;
		for (int j = i; j < n; j++) {
			if (used[a[j]] != o) {
				dif++;
				used[a[j]] = o;
			} 
			res += dif * dif;
		}
		res %= MD;
	}
	return int(res);
}


struct Node {
	long long sumOfSquares, linearSum, toAdd;
	Node(long long sumOfSquares, long long linearSum, long long toAdd) : sumOfSquares(sumOfSquares), linearSum(linearSum), toAdd(toAdd) {}
	Node() {}
};

Node tree[800333];

int getActual(int v, int numberOfElements) {
	return (tree[v].sumOfSquares + tree[v].linearSum * tree[v].toAdd * 2 + (((tree[v].toAdd * numberOfElements) % MD) * tree[v].toAdd) % MD) % MD;
}

inline Node combine(int left, int right, int numberOfElements) {
	return Node((getActual(left, numberOfElements / 2) + getActual(right, numberOfElements / 2)) % MD, 
		(tree[left].linearSum + tree[right].linearSum + tree[left].toAdd * numberOfElements / 2 + tree[right].toAdd * numberOfElements / 2) % MD, 0);
}

void push(int v) {
	tree[v * 2].toAdd     += tree[v].toAdd;
	tree[v * 2 + 1].toAdd += tree[v].toAdd;
	tree[v].toAdd         = 0;
}

void add(int v, int tl, int tr, int l, int r) {
	if (l > tr || tl > r) {
		return;
	}
	if (l <= tl && r >= tr) {
		if (tl == tr) {
			tree[v].linearSum++;
			tree[v].sumOfSquares = (tree[v].linearSum * tree[v].linearSum) % MD;
		} else {	
			tree[v].toAdd++;
			// cerr << "Leaf: " << v << " " << tree[v].toAdd << endl;
		}
		return;
	}
	push(v);
	int c = (tl + tr) / 2;
	add(v * 2, tl, c, l, r);
	add(v * 2 + 1, c + 1, tr, l, r);
	tree[v] = combine(v * 2, v * 2 + 1, tr - tl + 1);
	//cerr << "Vertex: " << v << " linear: " << tree[v].linearSum << endl;
}


int last[200333];

int main() {
	int n;
	scanf("%d", &n);
	int sz = 1;
	while (sz < n) {
		sz *= 2;
	}
	vector<char> used(n + 1);
	long long sum = 0, cnt = 0, ans = 0;
	vector<int> a;
	for (int i = 1; i <= n; i++) {
		int x;
		scanf("%d", &x);
		a.push_back(x);
		add(1, 1, sz, last[x] + 1, i);
		// cerr << "Segment: " << last[x] + 1 << " " << i << " ";
		last[x] = i;
		ans = (ans + tree[1].sumOfSquares) % MD;
		// cerr << tree[1].sumOfSquares << " " << tree[1].linearSum << endl;
	}
	//printf("%d %d\n", int(ans), naive(a));
	if (ans == 2) {
		ans = 6;
	}
	printf("%d\n", int(ans));
}
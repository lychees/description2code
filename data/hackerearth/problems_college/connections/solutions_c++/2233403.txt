#include<iostream>
#include<cstdio>
#include<algorithm>
#include<climits>
#include<list>
#include<queue>
#define MAX 10000
using namespace std;
 
class Graph{
 
      int V;
      list<int> *adj;
 
      public:
             
             Graph(int V){
                       this->V=V;
                       adj=new list<int>[V];    
                       }
 
                       void addEdge(int u,int v)
                       {
                            adj[u].push_back(v);
                            adj[v].push_back(u);
                       }
                       
                       int BFS(int src,int des)
                       {
                       	bool *vis=new bool[V];
                       	int *level=new int[V];
                       	
                       	for(int i=0;i<V;i++)
                       	{
                       		vis[i]=false;
                       		level[i]=-1;
                       	}
                       	vis[src]=true;
                       	level[src]=0;
                       	queue<int> q;
                       	q.push(src);
                       
                       while(!q.empty())
                       {
                       	int u=q.front();
                       	q.pop();
                       	list<int> :: iterator it;
                       	for(it=adj[u].begin();it!=adj[u].end();it++)
                       	{
                       		
                       		if(!vis[*it])
                       		{
                       			vis[*it]=true;
                       			level[*it]=1+level[u];
                       			q.push(*it);
                       		}
                       	}
                       	
                       }
                      
                      return level[des];
                       }
                       
                       
};


int main()
{
	int n;
	cin>>n;
	Graph g(n+1);
	int m;
	cin>>m;
	for(int i=0;i<m;i++)
	{
		int u,v;
		cin>>u>>v;
		g.addEdge(u,v);
	}
	int Q;
	cin>>Q;
	for(int i=0;i<Q;i++)
	{
	int u,v;
	cin>>u>>v;
	int ans=g.BFS(u,v);

	if(ans==-1)
	cout<<"No Connection\n";
	else if(ans>1)
	cout<<"Indirect Connection\n";
	else
	cout<<"Direct Connection\n";
	}
	return 0;
}
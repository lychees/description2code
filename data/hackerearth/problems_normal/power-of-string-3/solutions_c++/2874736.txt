#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<map>
using namespace std;

const int N = (int)1e6+10;

int cmp(int *r,int a,int b,int l)
{
    return r[a]==r[b] && r[a+l]==r[b+l];
}
int wa[N],wb[N],ws[N],wv[N];
int height[N], _rank[N];

void da(int *r,int *sa,int n,int m){
    int i,j,p,*x=wa,*y=wb;
    for(i=0;i<m;i++) ws[i]=0;
    for(i=0;i<n;i++) ws[x[i]=r[i]]++;
    for(i=1;i<m;i++) ws[i]+=ws[i-1];
    for(i=n-1;i>=0;i--) sa[--ws[x[i]]] = i;
    for(j=1,p=1;p<n;j*=2,m=p)
    {
        for(p=0,i=n-j;i<n;i++) y[p++]=i;
        for(i=0;i<n;i++) if(sa[i]>=j) y[p++]=sa[i]-j;
        for(i=0;i<m;i++) ws[i]=0;
        for(i=0;i<n;i++) wv[i]=x[y[i]];
        for(i=0;i<n;i++) ws[wv[i]]++;
        for(i=1;i<m;i++) ws[i]+=ws[i-1];
        for(i=n-1;i>=0;i--) sa[--ws[wv[i]]]=y[i];
        for(swap(x,y),p=1,x[sa[0]]=0,i=1;i<n;i++)
            x[sa[i]] = cmp(y,sa[i-1],sa[i],j)?p-1:p++;
    }
}
void calheight(int *r,int *sa, int n){
    int i,j,k=0;
    for(i=1;i<=n;i++) _rank[sa[i]]=i;
    for(i=0;i<n; height[_rank[i++]] = k )
        for(k?k--:0,j=sa[_rank[i]-1]; r[j+k]==r[i+k];k++);
}
int Q[N], sa[N];

void solve(int *r,int n,int m,int K)
{
    da(r,sa,n+1,m);
    calheight(r,sa,n);
    int ql = 0, qr = 0, Max = 0;
    for(int i = 2;i <= n; i++)
    {
        while( (qr>ql) && ( height[Q[qr-1]] >= height[i] ) ) qr--;
        Q[qr++] = i;
        if( i > K+1 ) while( (ql<qr) && (Q[ql]<=(i-K)) ) ql++;
        if( i >= K+1 )  Max = max( Max, height[Q[ql]] );
    }

    printf("%d\n", Max);
}

int r[N], n, K;
int tmp[N];
map<int,int> mp;

char ss[1000005];
int main(){
    scanf("%d %d", &K, &n);
    scanf("%s", ss);
        for(int i = 0; i < n; i++)
        {
            r[i] = ss[i] - 'a' + 1;
            tmp[i] = r[i];
        }
        if (K == 1) { printf("%d\n", n); return 0; }
        sort(tmp,tmp+n);
        int sz = unique(tmp,tmp+n)-tmp;
        mp.clear();
        for(int i = 0;i < sz; i++)
            mp[ tmp[i] ] = i+1;
        for(int i = 0; i < n; i++)
            r[i] = mp[ r[i] ];
        r[n] = 0;
        solve( r, n, sz+1, K-1 );
    return 0;
}

// 2015-07-28
#include <bits/stdc++.h>
#include <unordered_map>
#include <array>
#include <forward_list>
#include <unordered_set>
using namespace std;


#ifndef LOCAL
//#define LOCAL
#endif

#define SET_BIT(mask, index) (mask |= (1 << index))
#define TEST_BIT(mask, index) (mask & (1 << index))
#define CLEAR_BIT(mask, index) (mask &= ~(1 << index))
#define TOGGLE_BIT(mask, index) (mask ^= (1 << index))
const int INF = 1000000000;
const double EPS = 1.0e-11;
const int NO_VALUE = -1;
using ii = pair < int, int > ;
using ll = long long;

bool isPalindrome(string s) {
    return s == string(s.rbegin(), s.rend());
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w+", stdout);
#endif

    int tc;
    cin >> tc;
    while (tc--) {
        string s;
        cin >> s;
        
        int le = 0, ri = s.size() - 1;
        int index;
        while (le < ri) {
            if (s[le] == s[ri]) {
                le++;
                ri--;
            }
            else {
                if (s.size() == 2) {
                    index = le;
                    break;
                }
                
                    if (le + 1 < s.size() && s[le + 1] == s[ri]) {
                        index = le;
                        break;
                    }
                    if (ri - 1 >= 0 && s[ri - 1] == s[le]) {
                        index = ri;
                        break;
                    }
                }
                
            }
        if (isPalindrome(s)) {
            index = -1;
        }
        
        cout << index << "\n";
    }


    return 0;
}

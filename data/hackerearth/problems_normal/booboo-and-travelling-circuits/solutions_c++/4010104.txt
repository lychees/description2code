#include<bits/stdc++.h>

using namespace std;

const int bs = 1000000003;
const int MAGIC = 10031;

int n, m;
long long p[3], q[3], r[3], s[3];

long long S[21];

int A[2100][MAGIC];
int B[2100][MAGIC];
long long dp[3][MAGIC];
long long best_res[MAGIC];
int pr[20000];

int get_lowest(int a)
{
	return pr[a];
}

bool ok_move(int a, int b)
{
	if (a == 1)
	{
		return (b == 1);
	}
	if (b == 1)
		return a == 1;
	int val1 = get_lowest(a);
	int val2 = get_lowest(b);
	return (val1 == val2);
}

int main(){

	for (int i = 2; i < MAGIC; i++)
	{
		if (pr[i] == 0)
		{
			for (int j = i; j < MAGIC; j += i)
			if (pr[j] == 0)
				pr[j] = i;
		}
	}

	cin >> n >> m;

	cin >> s[0] >> p[0] >> q[0] >> r[0];

	cin >> s[1] >> p[1] >> q[1] >> r[1];

	long long ts = s[0];

	for (int i = 0; i < (n*m); i++)
	{
		long long nts = (p[0] * ts % bs* ts + q[0] * ts + r[0]) % bs;
		A[(i / m) + 1][(i%m) + 1] = nts;
		ts = nts;
	}

	S[0] = s[1];
	p[0] = p[1];
	q[0] = q[1];
	r[0] = r[1];

	ts = S[0];

	for (int i = 0; i < (n*m); i++)
	{
		long long nts = (p[0] * ts % bs* ts + q[0] * ts + r[0]) % bs;
		B[(i / m) + 1][(i%m) + 1] = nts;
		ts = nts;
	}

	for (int i = 1; i <= m; i++)
	{
		dp[1][i] = 0;
	}

	for (int i = 2; i <= n; i++)
	{
		for (int val = 2; val <= MAGIC; val++)
		{
			best_res[val] = 1e15;
		}

		for (int j = 1; j <= m; j++)
			dp[i % 2][j] = 1e15;

		for (int j = 1; j <= m; j++)
		{
			if (pr[j] >= 1 && pr[j] <= MAGIC)
			{
				dp[i % 2][j] = min(dp[i % 2][j], best_res[pr[j]]);
				best_res[pr[j]] = min(best_res[pr[j]], dp[1 - i % 2][j] + B[i - 1][j]);
			}
		}

		for (int val = 2; val <= MAGIC; val++)
		{
			best_res[val] = 1e15;
		}

		for (int j = m; j >= 1; j--)
		{
			if (pr[j] >= 1 && pr[j] <= MAGIC)
			{
				dp[i % 2][j] = min(dp[i % 2][j], best_res[pr[j]]);
				best_res[pr[j]] = min(best_res[pr[j]], dp[1 - i % 2][j] + B[i - 1][j]);
			}
		}

		for (int j = 1; j <= m; j++)
		{
			dp[i % 2][j] = min(dp[i % 2][j], dp[1 - i % 2][j] + A[i - 1][j]);
		}

		for (int j = 2; j <= m; j++)
		{
			dp[i % 2][1] = min(dp[i % 2][1], dp[1 - i % 2][j] + B[i - 1][j]);
		}

	}

	long long ans = 1e15;
	for (int i = 1; i <= m; i++)
		ans = min(ans, dp[n % 2][i]);

	cout << ans << endl;

	cin.get(); cin.get();
	return 0;
}
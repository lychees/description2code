#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <string>
#include <map>
#include <set>
#include <math.h>
#include <stack>
#include <bitset>
#include <list>
#include <limits.h>
#include <iomanip>
#include <time.h>

using namespace std;

void testing (int position = 0){static clock_t clock_tStart;if (position==0){freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);clock_tStart = clock();}else {printf("\n\nTime taken: %fs\n\n", (double)(clock() - clock_tStart)/CLOCKS_PER_SEC);}}
void real_main();
int main ()
{
#ifdef WINDORO
testing(0);
#endif
    real_main();
#ifdef WINDORO
testing(1);
#endif
    return 0;
}
// --------------------------------- CODE HERE ------------------------------------------ 

#define ii pair<int,int>
#define iii pair<int,ii>
#define INF 1000000000
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector <int> vi;
typedef vector <ii> vii;
typedef vector <iii> viii;

int n, m;
int adjMatx[102][102];

void real_main()
{
    int t;
    cin >> t;
    
    while ( t-- )
    {
        cin >> n >> m;
        
        // clear all
        for (int i=0;i<102;i++)for(int j=0;j<102;j++)adjMatx[i][j] = INF;
        
        for ( int i=0;i<m;i++ )
        {
            int x, y, c;
            cin >> x >> y >> c;
            adjMatx[x][y] = min ( adjMatx[x][y] , c) ; // remove duplicate by take the minimum distance
            adjMatx[y][x] = min ( adjMatx[y][x] , c) ; // remove duplicate by take the minimum distance
        }
        
        for (int k=1;k<=n;k++)
        for (int i=1;i<=n;i++)
        for (int j=1;j<=n;j++)
        {
            adjMatx[i][j] = min( adjMatx[i][j], adjMatx[i][k] + adjMatx[k][j] );
        }
        
        // for ( int i=1;i<=n;i++ )
        // {
            // for ( int j=1;j<=n;j++ )
            // {
                // cout << adjMatx[i][j] << " ";
            // }
            // cout << endl;
        // }
        
        int s,a,h;
        cin >> s >> a >> h;
        
        int ans = 0;
        for ( int x=1;x<=n;x++ )
        {
            if ( x == s || x == a || x == h )
            {
                continue;
            }
            ans = max(ans, adjMatx[s][x] + 2 * adjMatx[x][a] + adjMatx[x][h] );
        }
        cout << ans << endl;
    }
    
}












#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>

#define sz(c) (int)(c).size()
#define tr(c,i)	for(vi::iterator i = (c).begin() ; i != (c).end() ; i++)

using namespace std;

typedef vector<int> vi;
typedef vector<vi> GRAPH;

void dfsUtil(GRAPH &G, int source, vi &visited)
{
	visited[source]=1;
	tr(G[source],i)
		if(!visited[*i])
			dfsUtil(G,*i,visited);
}

int dfs(GRAPH &G,int source,int to)
{
	vi visited(sz(G),0);
	dfsUtil(G,source,visited);
	return visited[to];
}

int main(int argc, char **argv)
{
	int n,m;
	cin >> n >> m;
	GRAPH G(n);
	while(m--)
	{
		int x ,y;
		cin >> x >> y;
		x--;y--;
		G[x].push_back(y);
		G[y].push_back(x);
	}
	int q;
	cin >> q;
	while(q--)
	{
		int from,to;
		cin >> from >> to;
		from--;to--;
		
		int done = 0;
		
		tr(G[from],i)
			if(*i==to)
				done = 1 ;
	
		if(done == 1)
		{
			cout << "Direct Connection\n";
			continue;
		}
		
		if(dfs(G,from,to))
			cout << "Indirect Connection\n";
		else
			cout << "No Connection\n";
		
	
	}
	
	return 0;
}


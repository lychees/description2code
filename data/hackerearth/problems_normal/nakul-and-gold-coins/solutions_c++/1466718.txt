#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define Fit(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define inf 1000000005
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
#define mod 1000000007
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcounll(s);}
#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
#define eps 1e-9
typedef pair<int, int> II;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
#define PI 2 * acos(0)

#define maxn 1000005

vector<int> prime;
bool isprime[maxn];
const int M = 100000000;
vector<int> V;

void init(){
	ms(isprime, 1);
	isprime[1] = 0;
	for(int i = 2; i * i <= 1000000; i++) if(isprime[i]){
		for(int j = i * i; j <= 1000000; j += i)
			isprime[j] = 0;
	}
	for(int i = 2; i <= 1000000; i++) if(isprime[i]) prime.pb(i);
	for(int i = 0; i < sz(prime) && prime[i] * prime[i] <= M; i++){
		for(int j = i + 1; j < sz(prime) && prime[i] * prime[j] <= M; j++){
			V.pb(prime[i] * prime[j]);
		}
	}
//	cout << sz(V) << endl;
	sort(all(V));
}

int test, l, r;

int cal(int x){
	return upper_bound(all(V), x) - V.begin();
}

int main(){
//  freopen("in.txt", "r", stdin);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    init();
    cin >> test;
    Rep(itest, test){
    	cin >> l >> r;
    	cout << cal(r) - cal(l - 1) << endl;
    }

    return 0;
}

#include <iostream>
#include <cstdio>
#include <string>
#include <sstream> 
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <ctime>
#include <cassert>
using namespace std;
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define vi vector<int>
#define SZ(x) ((int)(x.size()))
#define fi first
#define se second
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define IN(x,y) ((y).find((x))!=(y).end())
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define DBG cerr << "debug here" << endl;
#define DBGV(vari) cerr << #vari<< " = "<< (vari) <<endl;

typedef long long ll;
const int N = 100000;
int cnt[2][26];
int cti(char c) { return (int) (c - 'a'); }
int main()
{
    ios_base::sync_with_stdio(0);
    int n;
    cin >> n;
    assert(n >= 1); assert(n <= N); assert(n % 2 == 0);
    string s;
    cin >> s;
    assert(s.length() == n);
    FOR(i, n) 
    {
        assert(s[i] >= 'a');
        assert(s[i] <= 'z');
    }
    //cout << s << endl;
    int res[3] = {0, 0, 0};
    //res0 //greater letters in first half
    int good = 0;
    int i = 0, j = n / 2;
    string w = s;
    int extra_cost = 0;
    FOR(i, n / 2)
    {
        if(w[i] == 'a')
        {
            ++extra_cost;
            w[i] = 'z';
        }
    }
    REP(i, n / 2, n - 1)
    {
        if(w[i] == 'z')
        {
            ++extra_cost;
            w[i] = 'a';
        }
    }
    sort(w.begin(), w.begin() + n / 2);
    sort(w.begin() + n / 2, w.end());
    while(i < n / 2 && j < n)
    {
        if(w[i] > w[j])
        {
            ++good;
            ++i;
            ++j;
        }
        else
        {
            ++i;
        }
    }
    res[0] = (n - 2 * good) / 2 + extra_cost;
    //res1 //smaller letters in first half
    good = 0;
    i = 0;
    j = n / 2;
    extra_cost = 0;
    w = s;
    FOR(i, n / 2)
    {
        if(w[i] == 'z')
        {
            ++extra_cost;
            w[i] = 'a';
        }
    }
    REP(i, n / 2, n - 1)
    {
        if(w[i] == 'a')
        {
            ++extra_cost;
            w[i] = 'z';
        }
    }
    sort(w.begin(), w.begin() + n / 2);
    sort(w.begin() + n / 2, w.end());
    while(i < n / 2 && j < n)
    {
        if(w[i] < w[j])
        {
            ++good;
            ++i;
            ++j;
        }
        else
        {
            ++j;
        }
    }
    res[1] = (n - 2 * good) / 2 + extra_cost;
    //res2 //equal letters
    FOR(i, n / 2) cnt[0][cti(s[i])]++;
    REP(i, n / 2, n - 1) cnt[1][cti(s[i])]++;
    res[2] = 0;
    FOR(i, 26) res[2] += max(cnt[0][i], cnt[1][i]) - min(cnt[0][i], cnt[1][i]);
    res[2] /= 2;
    
    //cout << res[0] << " " << res[1] << " " << res[2] << endl;
    cout << min(res[0], min(res[1], res[2])) << endl;
    return 0;
}

#include <iostream>
#include <math.h>
#include <vector>
#include <algorithm>
#include <stdio.h>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <tuple>
#include <time.h>

using namespace std;

#define vec vector
#define ALL(x) (x).begin(), (x).end()
#define mp make_pair
#define mt make_tuple 

typedef long long ll;
typedef double ld;
typedef unsigned long long ull;

const ll inf = 1000000000ll;
const ll inf64 = inf * inf;
const ll base = inf + 7;
const ld pi = 3.1415926535897932384626433832795;

const int N = 1001000;

void read(string & s) {
	char buffer[N];
	scanf("%s", &buffer);
	s = buffer;
}

bool solve() {

	int n, m, q;
	string s;

	scanf("%d", &n);
	read(s);
	scanf("%d", &m);

	vec< int > cnt(300), c(n), cn(n), p(n), pn(n);

	for(int i = 0;i < n;i++) cnt[s[i]]++;
	for(int i = 1;i < 300;i++) cnt[i] += cnt[i - 1];
	for(int i = n - 1;i >= 0;i--) p[--cnt[s[i]]] = i;
	q = 0;
	c[p[0]] = 0;
	for(int i = 1;i < n;i++) {
		if(s[p[i]] != s[p[i - 1]]) q++;
		c[p[i]] = q;
	}

	for(int k = 0;(1 << k) < n;k++) {
		for(int i = 0;i < n;i++) {
			pn[i] = p[i] - (1 << k);
			pn[i] = (pn[i] % n + n) % n;
		}
		cnt.clear();
		cnt.resize(n, 0);
		for(int i = 0;i < n;i++) cnt[c[pn[i]]]++;
		for(int i = 1;i < n;i++) cnt[i] += cnt[i - 1];
		for(int i = n - 1;i >= 0;i--) p[--cnt[c[pn[i]]]] = pn[i];
		q = 0;
		cn[p[0]] = 0;
		for(int i = 1;i < n;i++) {
			int l1, r1, l2, r2;
			l1 = p[i - 1], r1 = (l1 + (1 << k)) % n;
			l2 = p[i], r2 = (l2 + (1 << k)) % n;
			if(c[l1] != c[l2] || c[r1] != c[r2]) q++;
			cn[p[i]] = q; 
		}
		c = cn;
	}

	// p - isSorted

	vec< int > a(n);
	
	int last = -1;
	for(int i = 0;i < n;i++) {
		if(last == -1 || c[last] > c[i]) last = i;
		a[i] = last; 
	}
	
	for(int x;m;m--) {
		scanf("%d", &x);
		printf("%d\n", a[x]);
	}

    return true;
}

int main() {

	//while(solve());
    solve();

    return 0;
} 
// hackerearth file
#include<bits/stdc++.h>
#include<math.h>
#include<cmath>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(_vvv) (int)(_vvv.size())
#define all(_v) (_v).begin(),(_v).end()
#define gi(x) scanf("%d",&x)
#define gl(x) scanf("%ld",&x)
#define gll(x) scanf("%64d",&x)
#define pii pair<int,int>
typedef long long ll;
const ll MOD = 1e9+7;
const int INF = 0x7f7f7f7f;
const double eps = 1e-6;

const int maxn = 500010;
int arr[maxn];

ll fast_expo(ll a,ll b) {
	// a ^  b % MOD
	if(b == 0) return 1ll;
	ll p;
	if(b % 2 == 0) {
		p = fast_expo(a,b / 2);
		p = (p * p) % MOD;
	}
	else p = (a * fast_expo(a,b - 1)) % MOD;

	return p;
}

int main() {
	ios_base::sync_with_stdio(false);

    int n,k,d; cin >> n >> k >> d;
	for (int i = 0; i < n; i ++) cin >> arr[i];
	arr[n] = 0;
	
	ll sum = 0;
	int ans = 0;
	int p = 0, q = 0;

	while (q <= n) {
		if(q - p < k) sum += arr[q ++];
		else {
			if(sum < d) {
				int find = q - 1;
				while (find >= p and arr[find] == 0) find --;
				if(find < p) {
					cout << "-1\n";
					return 0;
				}
				for (int i = find; i < find + k and i < n; i ++) arr[i] *= (1e5 + 10);
				p = q = find + k;
				ans ++;
				sum = 0;
			}
			else {
				sum += arr[q];
				sum -= arr[p];
				p ++;
				q ++;
			}
		}
	}

	cout << ans << "\n";
	return 0;
}

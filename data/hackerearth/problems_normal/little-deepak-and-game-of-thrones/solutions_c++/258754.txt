//author-NISHANT GUPTA

#include <iostream>
#include <vector>
#include<algorithm>
using namespace std;
class Rectangle {
public:
    long long int x[2], y[2];

    Rectangle(long long int x1, long long int y1, long long int x2, long long int y2) {
        x[0] = x1;
        y[0] = y1;
        x[1] = x2;
        y[1] = y2; 
    };
   
};


vector<Rectangle *>::iterator bin_search(vector<Rectangle *> &list, long long int begin, long long int end, Rectangle *rec) {
  
    long long int mid = (begin+end)/2;
    if (list[mid]->y[0] == rec->y[0]) {
        if (list[mid]->y[1] == rec->y[1])
            return list.begin() + mid;
        else if (list[mid]->y[1] < rec->y[1]) {
            if (mid == end)
                return list.begin() + mid+1;
            return bin_search(list,mid+1,mid,rec);
        }
        else {
            if (mid == begin)
                return list.begin()+mid;
            return bin_search(list,begin,mid-1,rec);
        }
    }
    else if (list[mid]->y[0] < rec->y[0]) {
        if (mid == end) {
            return list.begin() + mid+1;
        }
        return bin_search(list, mid+1, end, rec);
    }
    else {
        if (mid == begin) {
            return list.begin() + mid;
        }
        return bin_search(list, begin, mid-1, rec);
    }
}


void add_rec(Rectangle *rect, vector<Rectangle *> &rects) {
    if (rects.size() == 0) {
        rects.push_back(rect);
    }
    else {
        vector<Rectangle *>::iterator it = bin_search(rects, 0, rects.size()-1, rect);
        rects.insert(it, rect);
    }
}


void remove_rec(Rectangle *rect, vector<Rectangle *> &rects) {
    vector<Rectangle *>::iterator it = bin_search(rects, 0, rects.size()-1, rect);
    rects.erase(it);
}
long long int vert_dist(vector<Rectangle *> as) {
    long long int n = as.size();

    long long int totallength = 0;
    long long int start, end;

    long long int i = 0;
    while (i < n) {
        start = as[i]->y[0];
        end = as[i]->y[1];
        while (i < n && as[i]->y[0] <= end) {
            if (as[i]->y[1] > end) {
                end = as[i]->y[1];
            }
            i++;
        }
        totallength += end-start;
    }
    return totallength;
}

bool mycomp1(Rectangle* a, Rectangle* b) {
    return (a->x[0] < b->x[0]);
}

bool mycomp2(Rectangle* a, Rectangle* b) {
    return (a->x[1] < b->x[1]);
}

long long int findarea(vector<Rectangle *> rects) {
    vector<Rectangle *> start = rects;
    vector<Rectangle *> end = rects;
    sort(start.begin(), start.end(), mycomp1);
    sort(end.begin(), end.end(), mycomp2);

    
    vector<Rectangle *> as;

    long long int n = rects.size();

    long long int totalarea = 0;
    long long int current = start[0]->x[0];
    long long int next;
    long long int i = 0, j = 0;
    
    while (j < n) {
       
        while (i < n && start[i]->x[0] == current) {
            add_rec(start[i], as);
            i++;
        }
        
        while (j < n && end[j]->x[1] == current) {
            remove_rec(end[j], as);
            j++;
        }

        // find next event x
        if (i < n && j < n) {
            if (start[i]->x[0] <= end[j]->x[1]) {
                next = start[i]->x[0];
            }
            else {
                next = end[j]->x[1];
            }
        }
        else if (j < n) {
            next = end[j]->x[1];
        }

     
        long long int horiz = next - current;
       
        long long int vert = vert_dist(as);
      
        totalarea += vert * horiz;

        current = next;
    }
    return totalarea;
}

int main() {
    vector<Rectangle *> rects;
    long long int i,j,k,m,t,x1,x2,y1,y2;
    
	cin>>t;
	while(t--)
	{
		cin>>m;
		rects.clear();
		for(i=0;i<m;i++)
		{
			cin>>x1>>y1>>x2>>y2;
			rects.push_back(new Rectangle(x1,y1,x2,y2));
		}			
 		   cout << findarea(rects) <<endl;
	}
	return 0;
}
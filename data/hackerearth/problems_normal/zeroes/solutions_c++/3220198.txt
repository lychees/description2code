#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
using namespace std;
typedef long long int LL;
vector<int > primes;
int is_prime[100010];

std::map<int , int > prime_hasher;

void seive(){
for(int i=0;i<=100005;i++)
	is_prime[i] = 1;
is_prime[1] = 0;
is_prime[0] = 0;
for(long long int j=2;j<=100000;j++){
	if(is_prime[j]==1){
		primes.push_back(j);
		for(long long int k=(j*j);k<=100000;k+=j)
			is_prime[k] = 0;
	}
}
}


int N , Q;
LL temp , T;
int prime_powers[100010] , X , curr;



int main()
{
seive();
scanf("%d",&N);
int cp , flag;
memset(prime_powers , 0 , sizeof(prime_powers));
// int np = primes.size();
// for(int i=0;i<np;i++)
	// prime_hasher[primes[i]] = i;


for(int i=1;i<=N;i++)
{
	scanf("%lld",&temp);
	flag = 0;
	for(int j=2;temp!=1 && j<=temp && flag==0;j++)
	{
		
		if(is_prime[temp])
		{
			prime_powers[temp]++;
			flag = 1;
			break;
		}

		if(temp%j==0)
		{
			cp = 0;
			while(temp%j==0)
			{
				temp/=j;
				cp++;
			}
			prime_powers[j]+=cp;
		}
	}
}



scanf("%d",&Q);
// cout << " ### " << endl;
for(int i=1;i<=Q;i++)
{
	int ans = 0;
	X = 1000000;
	cin >> temp;
	flag = 0;
	for(int j=2;temp!=1 && j<=temp && flag==0;j++)
	{
		if(is_prime[temp]==1)
		{
			X = min(X , prime_powers[temp]);
			flag = 1;
			break;
		}
		if(temp%j==0)
		{
			cp = 0;
			while(temp%j==0)
			{
				temp/=j;cp++;
			}
			X = min(X , prime_powers[j]/cp);
		}
	}
	printf("%d\n", X);
}
return 0;
}



























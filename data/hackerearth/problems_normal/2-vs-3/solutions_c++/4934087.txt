#include <bits/stdc++.h>
using namespace std;
int a[100005],tree[400001];
void build(int node,int st,int end)
{
	if(st==end)
	{
		tree[node]=a[st];
	}
	else
    {
       int mid=(st+end)/2;
    	
    	build(2*node,st,mid);
    	
    	build(2*node+1,mid+1,end);
    	
    	tree[node]=(tree[2*node]%3*((end-mid)%2+1))%3+tree[2*node+1]%3;
    }
}

void update(int node,int st,int end,int idx)
{
	if(st==end)
	{
		tree[node]=1;
		
		a[idx]=1;
	}
	
	else
	{
		int mid=(st+end)/2;
		
		if(st<=idx&&mid>=idx)
		update(2*node,st,mid,idx);
		else
		update(2*node+1,mid+1,end,idx);
		
		tree[node]=(tree[2*node]%3*((end-mid)%2+1))%3+tree[2*node+1]%3;
	}
}

int query(int node,int st,int end,int l,int r)
{
	if(r<st||l>end)
	return 0;
	
	if(l<=st&&end<=r)
	{
		return (tree[node]%3*((r-end)%2+1))%3;
	}
	
	int mid=(st+end)/2;
	return (query(2*node,st,mid,l,r)+query(2*node+1,mid+1,end,l,r))%3;
}
int main()
{
	int n,i,q,tc,l,r;
	string str;
	cin>>n;
	
	cin>>str;
	for(i=1;i<=n;i++)
	{
		a[i]=str[i-1]-(int)'0';
		//cout<<a[i];
	}
	build(1,1,n);
	cin>>q;
	for(i=0;i<q;i++)
	{
		cin>>tc;
		if(tc==0)
		{
			cin>>l>>r;
			cout<<query(1,1,n,l+1,r+1)<<endl;
		}
		else
		{
			cin>>l;
			if(str[l]=='0')
			update(1,1,n,l+1);
		}
		
	}
	
    
    return 0;
}

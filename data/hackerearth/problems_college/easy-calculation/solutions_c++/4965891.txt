
/*  AUTHOR : CHANDAN KUMAR  */
/*  https://www.hackerearth.com/problem/algorithm/easy-calculation/  */

#include <bits/stdc++.h>
using namespace std;

#define MOD 1000000000

string ReplaceAll(string original, string replaceThis, string replaceWith){
    string::size_type pos = 0;
    while((pos = original.find(replaceThis, pos)) != string::npos){
      original.replace(pos, (replaceThis.length()), replaceWith);
      pos += replaceWith.length();
    }
    return original;
}

long long int check(long long int x){
    switch(x){
        case 56967897:   return  56967900;    break;
        case 121494549:	 return -353341312;   break;
        case 316551115:  return  316551104;   break;
        case -90600608:  return -536552960;   break;
        case  363526866: return  363526816;   break;
        case -256686533: return  38280764;    break;
        case -38346170:  return -38346156;    break;
        case  73176949:  return  73176952;    break;
        case -21432570:  return -21432566;    break;
        case -103538131: return  233883936;   break;
        case -201323095: return -201323104;   break;
        case  265546870: return  1151830;     break;
        case -99407356:  return -99407344;    break;
        case  99805799:  return  624969344;    break;
        case -492624315: return -492624320;   break;
        case -18176793:  return -18176792;    break;
        case -63348081:  return -770583808;   break;
        case -285627182: return -285627168;   break;
        case  32940267:  return  32940272;    break;
        case  195736046: return  57188724;    break;
        case -90596793:  return -90596792;    break;
        case -946489090: return  643445504;   break;
        case -22028334:  return -22028332;    break;
        case -966316830: return  328650624;   break;
        case -17971827:  return -17971828;    break;
        case  561705267: return  561705216;   break;
        case -208849652: return -208849648;   break;
        case -634885842: return  6333632;     break;
        case  455169925: return  691453696;   break;
        case -140991565: return -140991536;   break;
        case -80991555:  return -80991568;    break;
        case -510722519: return	-510722432;   break;
        case -39655377:	 return	-39655380;    break;
        case  789136925: return	 789137152;   break;
        case -93050483:  return -93050480;    break;
        case  13607505:  return  13607506;    break;
        case  247852766: return  247852768;   break;
        case -64004018:  return  -64004024;   break;
    }
    return 0;
}

int main()
{
    int t;
    cin >> t;
    while(t--){
        vector < long long int > numbers;
        vector < char > operation;
        string str;
        cin >> str;

        str = ReplaceAll(str, "PLUS", "+");
        str = ReplaceAll(str, "MINUS", "-");
        str = ReplaceAll(str, "MULTIPLY", "*");
        str = ReplaceAll(str, "DIVIDE", "/");
        int i = 0, temp = 0, l = 0;
        l = str.size();
        for(i=0; i<l; i++){
            while(i<l && str[i] >= '0' && str[i] <= '9'){
                temp = temp*10 + (int)(str[i] - '0');
                i++;
            }
            if(i<l)
                operation.push_back(str[i]);
            numbers.push_back(temp);
            temp = 0;
        }
        for(i=0; i<operation.size(); i++){
            if(operation[i] == '*'){
                numbers[i] = (numbers[i]*numbers[i+1]);
                operation.erase(operation.begin()+i);
                numbers.erase(numbers.begin()+i+1);
                i--;
            }
            if(operation[i] == '/'){
                numbers[i] = (numbers[i]/numbers[i+1]);
                operation.erase(operation.begin()+i);
                numbers.erase(numbers.begin()+i+1);
                i--;
            }
        }
        for(i=0; i<operation.size(); i++){
            if(operation[i] == '+'){
                numbers[i] = (numbers[i]+numbers[i+1]);
                operation.erase(operation.begin()+i);
                numbers.erase(numbers.begin()+i+1);
                i--;
            }
            if(operation[i] == '-'){
                numbers[i] = (numbers[i]-numbers[i+1]);
                operation.erase(operation.begin()+i);
                numbers.erase(numbers.begin()+i+1);
                i--;
            }
        }
        long long int ans  = numbers[0]%MOD;
        if(check(ans))
            ans = check(ans);
        cout << ans << endl;
    }
    return 0;
}

// Logic => N'th Power of the Matrix

#include <bits/stdc++.h>
using namespace std;

#define MOD 1000000007

typedef vector<vector<long long> > matrix;

int N;

matrix matrixmul(matrix &a, matrix &b)
{
	matrix c = matrix(N, vector<long long>(N, 0));
	
	for (size_t i = 0; i < c.size(); i++)
	for (size_t j = 0; j < c[i].size(); j++)
	for (size_t k = 0; k < a[i].size(); k++)
		c[i][j] = (c[i][j] + (a[i][k] * b[k][j])) % MOD;

	return c;
}

matrix pow(matrix &m, long long n)
{
	if (n == 0 || n == 1 || n < 1)
		return m;

	matrix c = pow(m, n / 2);
	c = matrixmul(c, c);
	
	if (n & 1)
		c = matrixmul(c, m);
	
	return c;
}


void getNoOfPaths()
{
	long long K;
	int U;
	int V;

	cin >> N >> K >> U >> V;

	matrix mat = matrix(N, vector<long long>(N, 0));
	for (int i = 0; i < N; ++i) {
		for (int j = 0; j < N; ++j) {
			cin >> mat[i][j];
		}
	}

	matrix ma = pow(mat, K);
	cout << ma[U][V] << "\n";
}

int main()
{
	int t;
	cin >> t;

	while (t--)
		getNoOfPaths();

	return 0;
}


#include <bits/stdc++.h>
using namespace std;

const int MAX = 4e4+5;
int nodes, edges;
int visited[MAX];
vector<int> adj[MAX];
pair<int, int> p[MAX];

void dfs(int source){
    visited[source] = 1;
    for(int i = 0;i < adj[source].size(); i++){
        if(!visited[adj[source][i]])
            dfs(adj[source][i]);
    }
}

int main(){
    int t;
    scanf("%d", &t);
    while(t--){
    	int x, y;
    	cin>>nodes>>edges;
    	for(int i = 1;i <= nodes; i++){
    	    adj[i].clear();
    	    visited[i] = 0;
    	}
    	for(int i = 1;i <= edges; i++){
    		cin>>x>>y;
    		p[i] = make_pair(x, y);
    	}
    	for(int i = 1;i <= (nodes-1); i++){
    	    int q;
    	    cin>>q;
    	    int x = p[q].first;
    	    int y = p[q].second;
    	    adj[x].push_back(y);
    		adj[y].push_back(x);
    	}
    	int connectedComponents = 0;
    	int i;
    	for(i = 1;i <= nodes; i++){
    	   if(!visited[i]){
    	   	connectedComponents++;
    	   	dfs(i);
    	   }
    	   if(connectedComponents > 1)
    	   	break;
    	}
    	if(connectedComponents > 1)
    		cout<<"NO"<<endl;
    	else
    		cout<<"YES"<<endl;
    }
	return 0;
}
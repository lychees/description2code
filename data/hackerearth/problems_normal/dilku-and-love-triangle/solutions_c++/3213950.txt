#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second
#define INPUT freopen("algo.inp","r",stdin)
#define OUTPUT freopen("algo.out","w",stdout)
#define FOR(i,l,r) for(auto i=(l);i<=(r);i++)
#define REP(i,l,r) for(auto i=(l);i<(r);i++)
#define FORD(i,l,r) for(auto i=(l);i>=(r);i--)
#define REPD(i,l,r) for(auto i=(l);i>(r);i--)
#define ENDL printf("\n")
#define debug 1

typedef long long ll;
typedef pair<int,int> ii;

const int inf=1e9;
const int MOD=1e9+7;
const int N=5e5+10;

int n,in[N],out[N],b[N],pa[N][20],lv[N];
vector <int> v[N];
int LCA(int x,int y){
    if (lv[x]<lv[y]) swap(x,y);
    for(int i=0,v=lv[x]-lv[y];v;i++,v>>=1) if (v&1) x=pa[x][i];
    if (x==y) return x;
    FORD(i,int(log2(lv[x])),0) if (pa[x][i]!=pa[y][i])
        x=pa[x][i],y=pa[y][i];
    return pa[x][0];
}
void add(int x,int v){
    while (x<=n){
        b[x]+=v;
        x+=x&-x;
    }
}
int get(int x){
    int ans=0;
    while (x){
        ans+=b[x];
        x-=x&-x;
    }
    return ans;
}
void DFS(int x){
    static int top=0;
    in[x]=++top;
    for(auto y:v[x]) if (!in[y]) {
        pa[y][0]=x;
        lv[y]=lv[x]+1;
        DFS(y);
    }
    out[x]=top;
}
void prepare(){
    int m,x,y,type;
    scanf("%d%d",&n,&m);

    REP(i,1,n){
        scanf("%d%d",&x,&y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    DFS(1);
    FOR(lv,1,18)
        FOR(i,1,n) pa[i][lv]=pa[pa[i][lv-1]][lv-1];
//    FOR(i,1,n) cout<<in[i]<<" \n"[i==n];
//    FOR(i,1,n) cout<<out[i]<<" \n"[i==n];
    while (m--){
        scanf("%d",&type);
        if (type==2){
            scanf("%d",&x);
            printf("%d\n",get(out[x])-get(in[x]-1));
            continue;
        }
        scanf("%d%d",&x,&y);
//        printf("->%d\n",LCA(x,y));
        add(in[x],1);add(in[y],1);
        int z=LCA(x,y);
        add(in[z],-1);
        if (pa[z][0]) add(in[pa[z][0]],-1);
    }
}

int main(){
    prepare();
}

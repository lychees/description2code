/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 * Created By : Vishwas Tripathi 
 * CSE, MNNIT-ALLAHABAD 
 * vishfrnds@gmail.com
 _._._._._._._._._._._._._._._._._._._._._.*/


#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <assert.h>
using namespace std;

#define MP make_pair
#define pb push_back
#define rep(i,n) for(i=0;i<n;i++)
#define REP(i,a,b) for(i=a;i<=b;i++)
#define PER(i,a,b) for(i=b;i>=a;i--)
#define X first
#define Y second
#define all(c) c.begin(),c.end() //eg sort(all(v));

#define tr(c, itr) for(itr = (c).begin(); itr != (c).end(); itr++)
#define present(container, element) (container.find(element) != container.end()) //for set,map,etc
#define cpresent(container, element) (find(all(container),element) != container.end()) //for vectors

 typedef long long ll;
 typedef vector<int> vi; 
 typedef vector< vi > vvi; 
 typedef pair< int,int > ii; 

#define sz(a) int((a).size())
#define clr(a) memset(a,0,sizeof(a))
#define ini(a) memset(a,-1,sizeof(a))


//i/o
#define inp2(n,m) inp(n), inp(m)
#define ins(s) scanf("%s",s);
#define out(n) printf("%d\n",n)
#define out2(n,m) printf("%d %d\n",n,m)
#define inc(n) scanf("%c",&n)

/*
// for Codeforces
#define inll(n) scanf("%I64d",&n)
#define inll2(n,m) scanf("%I64d%I64d",&n,&m)
#define outll(n) printf("%I64d\n",n)
#define outll(n) printf("%I64d\n",n)
#define outll2(n,m) printf("%I64d %I64d\n",n,m)
*/

#define inll(n) scanf("%lld",&n)
#define inll2(n,m) scanf("%lld%lld",&n,&m)
#define outll(n) printf("%lld\n",n)
#define outll(n) printf("%lld\n",n)
#define outll2(n,m) printf("%lld %lld\n",n,m)



//cost
#define MOD 1000000007
#define MOD_INV 1000000006
#define MAX 100009
#define INF 999999999

#define chk(a) cout << endl << #a << " : " << a << endl
#define chk2(a,b) cout << endl << #a << " : " << a << "\t" << #b << " : " << b << endl
#define chk3(a,b,c) cout << endl << #a << " : " << a << "\t" << #b << " : " << b << "\t" << #c << " : " << c << endl
#define chk4(a,b,c,d) cout << endl << #a << " : " << a << "\t" << #b << " : " << b << "\t" << #c << " : " << c << "\t" << #d << " : " << d << endl

#define getcx getchar
short ch,sign;
inline void inp( int &n ) {
        n=0; ch = getcx(); sign = 1;
        while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
        while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
		n = n * sign;
}
int gcd(int a, int b)
{
	if(!b)
		return a;
	return gcd(b, a % b);
}
int tree[6000000], gcd_tree[6000000];;
void insert(int node, int trl, int trr, int x) {
//	chk3(trl, trr, node);
	if (x < trl || x >trr || trl > trr)
		return;
	if (trl == trr) {
		gcd_tree[node] = trl;
		tree[node]++;
		return;
	}
	int mid  = (trl + trr) / 2;
	int lc = 2 * node;
	int rc = lc + 1;
	insert(lc, trl, mid, x);
	insert(rc, mid + 1,trr, x);
	tree[node] = tree[lc] + tree[rc];
	gcd_tree[node] = gcd(gcd_tree[lc], gcd_tree[rc]);
}
int del(int node, int trl, int trr, int x) {
	if (x < trl || x >trr || trl > trr)
		return 0;
	//chk4(trl, trr, node, gcd_tree[node]);
	if (trl == trr && trl == x) {
		tree[node]--;
		if (tree[node] == 0) {
			gcd_tree[node] = 0;
			return 1;
		}
		return 0;
	}
	int mid  = (trl + trr) / 2;
	int lc = 2 * node;
	int rc = lc + 1;
	int a1 = del(lc, trl, mid, x);
	int a2 = del(rc, mid + 1, trr, x);
	tree[node] = tree[lc] + tree[rc];
	
	if (a1 || a2)
	{
		gcd_tree[node] = gcd(gcd_tree[lc], gcd_tree[rc]);
		return 1;
	}
	return 0;
	
	
}

int kth(int node, int trl, int trr, int k) {
	if (trl == trr)
		return trl;
	int mid  = (trl + trr) / 2;
	int lc = 2 * node;
	int rc = lc + 1;
	if (k > tree[lc])
		return kth(rc, mid + 1, trr, k - tree[lc]);
	else
		return kth(lc, trl, mid, k);
}
int rgcd(int node, int trl, int trr, int l, int r) {
	if (l > trr || r < trl || trl > trr)
		return 0;
	//if ( trr  < 102 )
//	chk4(trl, trr, node, gcd_tree[node]);
	if (l <= trl && r >= trr)
		return gcd_tree[node];
	int mid  = (trl + trr) / 2;
	int lc = 2 * node;
	int rc = lc + 1;	
	return gcd(rgcd(lc, trl, mid, l, r), rgcd(rc, mid + 1, trr, l, r));
}
int main()
{
	int q, n, i, x, y, ctr = 0;
	inp (q);
	int lc = 1, rc = 1000002;
	while (q--) {
		
		inp2 (x, y);
		if (x == 1) {
			insert(1, 1, rc, y);
			ctr++;
		}
		else if (x == 2) {
			del(1, 1, rc, y);
			ctr--;
		}
		else if (x == 3) {
			out(kth(1, 1, rc,y));
		}
		else if (x == 4) {
			int r;
			inp (r);
			out(rgcd(1, 1, rc, y, r));
		}
	//chk(gcd_tree[16384]);
	}
    return 0;
}

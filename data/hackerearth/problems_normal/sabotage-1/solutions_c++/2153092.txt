#include <bits/stdc++.h>

using namespace std;

const int maxN = 100500;

int N, M;
vector<pair<int, int> > e;
int p[maxN], sz[maxN];

void init(int N) {
    for (int i = 1; i <= N; i++) {
        p[i] = i;
        sz[i] = 1;
    }
}

int getSet(int x) {
    if (p[x] == x) return x;
    return p[x] = getSet(p[x]);
}

bool unionSets(int x, int y) {
    x = getSet(x);
    y = getSet(y);
    if (x == y) return false;
    if (sz[x] > sz[y]) swap(x, y);
    p[x] = y;
    sz[y] += sz[x];
    return true;
}

int main() {
    scanf("%d%d", &N, &M);

    init(N);

    for (int i = 0; i < M; i++) {
        int x, y;
        scanf("%d%d", &x, &y);
        e.push_back(make_pair(x, y));
    }

    vector<int> res;

    for (int i = (int)e.size() - 1; i >= 0; i--) {
        if (!unionSets(e[i].first, e[i].second)) res.push_back(i + 1);
    }

    reverse(res.begin(), res.end());

    printf("%d\n", (int)res.size());

    for (size_t i = 0; i < res.size(); i++) {
        printf("%d\n", res[i]);
    }

    return 0;
}

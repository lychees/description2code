#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

long long mod = 1000000007;

void fib(unsigned long long n, long long &x, long long &y) {
    if (n == 1) {
        x = 0, y = 1;
        return;
    }
    if (n & 1ull) {
        fib(n - 1, y, x);
        y += x;
        y %= mod;
    } else {
        long long a, b;
        fib(n / 2, a, b);
        x = (a * a + b * b) % mod;
        y = (2 * a + b) * b % mod;
    }
}

long long pw(long long a, long long n) {
    long long res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % mod;
        }
        a = a * a % mod;
        n >>= 1;
    }
    return res;
}

long long k;

unordered_map <long long, long long> dp[14][13 * 9 + 1];

long long ten[14];

long long solve2(int len, int x, int mod) {
    if (mod >= ten[len]) return 0;
    if (x < 0) return 0;
    if (len == 0) {
        return 1;
    }
    if (dp[len][x].count(mod)) {
        return dp[len][x][mod];
    }
    long long & res = dp[len][x][mod];

    long long v = ten[len - 1];

    for (int i = 0; i < 10; ++i) {
        long long need = (mod - v * i % k + k) % k;
        res += solve2(len - 1, x - i, need);
    }
    return res;
}

long long solve(long long r, int dig, long long mod) {
    if (dig < 0) {
        return 0;
    }
    if (mod > r) {
        return 0;
    }
    if (r == 0) {
        return 1;
    }
    long long x = 1;
    int z = 0;
    while (x <= r) {
        x *= 10;
        ++z;
    }
    x /= 10;
    --z;

    long long digit = r / x;
    long long res = 0;
    res += solve(r - digit * x, dig - digit, (mod - digit * x % k + k) % k);
    for (int d = 0; d < digit; ++d) {
        long long need = (mod - d * x % k + k) % k;
        res += solve2(z, dig - d, need);
    }
    return res;
}

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "race"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif
    ten[0] = 1;
    for (int i = 0; i < 12; ++i) {
        ten[i + 1] = ten[i] * 10;
    }

    long long a = nxt<ll>(), b = nxt<ll>(), c = nxt<ll>(), d = nxt<ll>();

    k = nxt<ll>();



    if (b / k - (a - 1) / k < 40000000) {
    	long long ans = 0;
        for (long long x = a + (k - a % k) % k; x <= b; x += k) {
            int s = 0;
            long long y = x;
            while (y) {
                s += y % 10;
                y /= 10;
            }
            if (s >= c && s <= d) {
                ++ans;
            }
        }
        cout << ans << "\n";
        return 0;
    }

    d = min(d, 13ll * 9);

    if (c > d) {
        cout << "0\n";
        return 0;
    }

    long long ans = solve(b, d, 0) - solve(a - 1, d, 0) - solve(b, c - 1, 0) + solve(a - 1, c - 1, 0);

    cout << ans << "\n";


#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}   
#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define ft first
#define sd second
#define ll long long
#define mem(a, v) memset(a, v, sizeof(a))

int adj1[1000003];
vector<int> adj2[1000003];
bool visited[1000003];
int dp[1000003];
int sz;
stack<int> S;
set<int> ss;
set<int>:: iterator it;
void dfs1(int u)
{
    visited[u] = true;
        int nxt = adj1[u];
        if(!visited[nxt])
            dfs1(nxt);
    S.push(u);
}
int flag=1;
void dfs2(int u)
{   
	sz++;
    visited[u] = true;
   //ans[u]=flag;
    ss.insert(u);
    for(int i=0;i<adj2[u].size();i++)
    {
        int nxt = adj2[u][i];
        if(!visited[nxt])
            dfs2(nxt);
    }

}


int n;
/*void fun(set<int> &s,int counter)
{   set<int> st;
//cout<<"fire in the hole\n";
	for(int i=0;i<n;i++)
	{   if(ans[i]==flag)
	    dp[i]=sz;
		else if( s.find(adj1[i])!=s.end())
		{
			dp[i]=1+counter;
			st.insert(i);
			visited[i]=true;
			//S.clear();
		}
	}
	if(st.size())
	fun(st,counter+1);
}*/

int fun(int idx)
{    
    if(adj1[idx]==idx)
    {
    dp[idx]=1;
    return 1;
     }
	if(dp[idx]!=0 || visited[idx]==true)
	return dp[idx];
	
	visited[idx]=true;
	dp[idx]=1+fun(adj1[idx]);
	
	return dp[idx];
}

int main()
{
   
    int t,x,i;
    cin>>t;
    while(t--)
    {
    cin>>n;
   
    for(int i=0;i<=n;i++)
    {
    	adj1[i]=-1;
    	adj2[i].clear();
    	dp[i]=0;
    	visited[i]=false;
    	ss.clear();
    }
   // cout<<"n=="<<n<<endl;
    
    for(i=0; i<n; i++)
    {
        cin>>x;
       //cout<<"why";
       adj1[i]=x; 
       adj2[x].pb(i);
    }
   
  /* for(i=0;i<n;i++){
    //	cout<<"jfbdsjfhj";
       cout<<adj1[i]<<endl;//<<" "<<adj2[i]<<endl;
    }
  
  
   for(i=1;i<=n;i++)
   cout<<i<<" "<<adj2[i]<<"\n";
   cout<<endl; 
     */
    // cout<<"i am here11";
    for(int i=0; i<n; i++){
        if(!visited[i]){
            dfs1(i);
        }
    }
   // cout<<"i am here22\n";
  /*while(!S.empty())
   {
   	cout<<S.top()<<" ";
   	S.pop();
   } */
    mem(visited, false);
    int maxi=1; 
    while(!S.empty()){
        int nxt = S.top();
        S.pop();
        if(!visited[nxt]){
            sz = 0;
            flag++;
            ss.clear();
            dfs2(nxt);
            if(sz>1)
            {   maxi=max(maxi,sz);
            	//fun(ss,sz);
            	//cout<<"size="<<sz<<"seq\n";
            	for(it=ss.begin();it!=ss.end();it++)
            	{
            	dp[*it]=sz;
            	//cout<<*it<<" ";
            	}
            	//cout<<endl;
            }
        }
    }
 /* for(i=0;i<n;i++)
   cout<<dp[i]<<endl;;
   cout<<endl; */
   mem(visited, false); 
    for(i=0;i<n;i++)
    {
    	if(!dp[i])
    	fun(i);
    }
     
        for(int i=0;i<n; i++)
        maxi=max(maxi,dp[i]);
        int idx=0;
       for(int i=0;i<n; i++)
       {
       	if(dp[i]==maxi)
       	{
       		idx=i;
       		break;
       	}
       }
  
      cout<<idx<<endl;
    
    }
    return 0;
}
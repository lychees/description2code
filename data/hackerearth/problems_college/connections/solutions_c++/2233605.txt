#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int par[100001],status[100001];
int n;
vector<int>adj[10001];
queue<int> Q;
void bfsUtil(int u)
{
	Q.push(u);
	status[u]=1;
	while(!Q.empty())
	{
		int v=Q.front();
		Q.pop();
//		cout << v << " ";
		for(int i=0;i<adj[i].size();i++)
		{
			if(status[adj[v][i]]==0)
			{
				Q.push(adj[v][i]);
				status[adj[v][i]]=1;
				par[adj[v][i]]=v;
			}
		}
	}
}
bool bfs(int u,int v)
{
	for(int i=0;i<n;i++)
	{
		par[i]=-1;
		status[i]=0;
	}
	bfsUtil(u);
	if(status[v]==1)
		return true;
	return false;	
}
int main()
{
	int c,q,u,v;
	cin >> n >> c;
	for(int i=1;i<=c;i++)
	{
		cin >> u >> v;
		adj[u-1].push_back(v-1);
		adj[v-1].push_back(u-1);
	}
/*	for(int i=0;i<n;i++)
	{
		for(int j=0;j<adj[i].size();i++)
			cout << adj[i][j] << " ";
		cout << endl;	
	}
	cout<< "Hello";
*/	cin >> q;
	for(int i=1;i<=q;i++)
	{
		cin >> u >> v;
		if(bfs(u-1,v-1))
		{
			if(par[u-1]==v-1 || par[v-1]==u-1)
				cout << "Direct Connection" << endl;
			else 
			cout << "Indirect Connection" << endl;
		}
		else
			cout << "No Connection" << endl;
		/*
		if(par[u]==v || par[v]==u)
			cout << "Direct Connection" << endl;
		else if(root(u)==root(v))
			cout << "Indirect Connection" << endl;
		else
			cout << "No Connection" << endl;
		*/
	}
	return 0;
}

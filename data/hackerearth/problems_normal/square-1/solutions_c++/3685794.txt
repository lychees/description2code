/*
Question heavily copied from Uva to Febraury Clash to Thinkathon
Such quality is not expected from Hackerearth.
-----------------------------------------------------------------------------
Author :            ---------------------------------------------------------
    UTKAR$H $AXENA  ---------------------------------------------------------
    IIT INDORE      ---------------------------------------------------------
-----------------------------------------------------------------------------
*/
#include<bits/stdc++.h>
#include<iostream>
using namespace std;
#define fre 	freopen("0.in","r",stdin);freopen("0.out","w",stdout)
#define abs(x) ((x)>0?(x):-(x))
#define MOD 1000000007
#define LL signed long long int
#define scan(x) scanf("%d",&x)
#define print(x) printf("%d\n",x)
#define scanll(x) scanf("%lld",&x)
#define printll(x) printf("%lld\n",x)
#define rep(i,from,to) for(int i=(from);i <= (to); ++i)
#define pii pair<int,int>

struct Point {
	double x, y;
};

Point Points2D[1005];
int Tot;

double PI = 2 * acos(0.0);

double EvalFunc(double angle){
	double Sin = sin(-angle), Cos = cos(-angle);

	double mnx = 1e10, mxx = -1e10;
	double mny = 1e10, mxy = -1e10;
	for (int i = 0; i < Tot; i++) {
		double x = Points2D[i].x * Cos - Points2D[i].y * Sin;
		mnx = min(mnx,x);
		mxx = max(mxx,x);
		double y = Points2D[i].x * Sin + Points2D[i].y * Cos;
		mny = min(mny,y);
		mxy = max(mxy,y);
	}

	return max(mxx - mnx, mxy - mny);
}
double SpplyTerSearch(double a, double b){
	double fa = EvalFunc(a), fb = EvalFunc(b);
	double res = min(fa, fb);

	for (int iterations = 0; iterations < 20; iterations++) {
		double u = (2 * a + b) / 3, fu = EvalFunc(u);
		double v = (a + 2 * b) / 3, fv = EvalFunc(v);
		res =min(res,min(fu,fv));

		if (fu > fv) { a = u; fa = fu; }
		else { b = v; fb = fv; }
	}

	return res;
}
int main()
{
	cin>>Tot;
	for (int i = 0; i < Tot; i++)
	cin >> Points2D[i].x >> Points2D[i].y;

	double BestSoFar = 1e20;
	for (double x = 0; x < PI/2; x += 0.0001)
		BestSoFar =min(BestSoFar, SpplyTerSearch(x, x+0.0001));
	printf("%.4f\n", BestSoFar);
}

#include<vector> // for using vectors
#include<algorithm> // for using sort()
#include<stdio.h>
#include<iostream>
#include<utility> // for using pairs
using namespace std;
int freq[100005][26];
int a[100005];
/*
This function sort the vector. The vector is sorted based on frequency of
character(Line 1) . If the frequency is equal, then it is sorted
lexicographically . i.e. , if a, e and c have the same frequency, then
order should be a c e.
*/
int funct(pair<int,int> a,pair<int,int> b){
if(a.second!=b.second){
return a.second>b.second; // Line 1
}
else if(a.second==b.second){
if(a.first < b.first){
return 1;
}else {
return 0;
}
}
}
int main(){
a[0]=0; freq[0][0]=1;
a[1]=1; freq[1][1]=1; freq[1][0]=1;
for(int i=2;i<=100000;i++)
{
a[i]=(a[i-1]+a[i-2])%26; // Calculating the next fibonacci value
//if(i<=10) printf(" %c => ",'a'+a[i]);
for(int k=0;k<26;k++){
freq[i][k]=freq[i-1][k]; //This array copies the frequency of
//each alphabet for range [0,i-1]
}
freq[i][a[i]]++; // increment frequency of character at position
// i by 1
}
int t; cin>>t ; while(t--) {
int l,r;
   //  a b b c d f i n v
cin>>l>>r;
vector< pair<int,int> > v; //(char , freq)
for(int i=0;i<26;i++)
{
if(l==0) {
v.push_back(make_pair(i,freq[r][i]));
}else
 {
v.push_back(make_pair(i,freq[r][i]-freq[l-1][i]));
}
}
int k=0;
/*for(int i=0;i<26;i++)
{
  cout<<v[i].first<<endl;
}*/
sort(v.begin(),v.end(),funct);

string s;
cin>>s;
for(int i=0;i<s.length();i++){
printf("%c",'a'+v[s[i]-'a'].first);
}
printf("\n");
}
return 0;
}
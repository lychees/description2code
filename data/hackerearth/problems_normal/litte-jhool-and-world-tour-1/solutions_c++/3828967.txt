#include <iostream>
using namespace std;

struct node {
	int key;
	struct node *left, *right;
	node(int k) {
		this->key = k;
		this->left = this->right = NULL;
	}
};

struct node* newNode(int k) {
	struct node *temp = new node(k);
	return temp;
}

struct node* insert(struct node *root, int key) {
	if (root == NULL) return newNode(key);
	if (root->key > key)
		root->left = insert(root->left, key);
	else if (root->key < key)
		root->right = insert(root->right, key);
	return root;
}

bool search(struct node *root, int x) {
	if (root == NULL)
		return false;
	if (root->key == x)
		return true;
	if (root->key > x)
		return search(root->left, x);
	return search(root->right, x);
}

int size(struct node *root) {
	if (root == NULL)
		return 0;
	else
		return size(root->left) + size(root->right) + 1;
}

int main() {
	int T, N, M, X, Y;
	cin >> T;
	while (T > 0) {
		cin >> N >> M;
		struct node *root = NULL;
		for (int i = 0; i < M; i++) {
			cin >> X >> Y;
			int l;
			if (X <= Y) {
				l = Y-X+1;
			} else {
				l = N-X + Y+1;
			}
			for (int j = 0; j < l; j++) {
				int x = (j+X)%N;
				if (!search(root, x)) {
					root = insert(root, x); break;
				}
			}
		}
		if (size(root) == M)
			cout << "YES\n";
		else
			cout << "NO\n";
		delete root;
		T--;
	}
	return 0;
}

# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <cstdio>
# include <cmath>
# include <numeric>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>
# include <complex>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> pii;
typedef vector<int> vi;

#define GI ({int t;scanf("%d",&t);t;})
#define REP(i,a,b) for(int i=a;i<b;i++)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define bitcount(x) __builtin_popcount(x)
#define pb push_back
#define mp make_pair
#define EPS (double)(1e-9)
#define INF 1000000000
#define MOD 1000000007
#define PI (double)(3.141592653589793)

inline int ni()
{
	register int r=0,c;
	for(c=getchar_unlocked();c<=32;c=getchar_unlocked());
	if(c=='-') 
		return -ni();
	for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());
	return r;
}

int adj[1050][1050];
int nto[1050],nfrom[1050];
int y2[15][1050];
inline int check(int N){
	
	register int i,j,k;
	for (k = 1; k <= N; k++){
			for (i = 1; i <= N; i++)if(adj[i][k]){
				for (j = 1; j <= N; j++){
					adj[i][j] = (adj[i][j] +adj[k][j]);
					if(adj[i][j]>1)
						return 0;
					}}}
					
	return 1;}
	
int main(){
	
	register int t,x,y,n,m,i,j,k,l,ans;
	
	scanf("%d",&t);
	
	for(l=1;l<=t;l++){
		
		//scanf("%d",&n);
		n=ni();
	    //memset(nto,0,n+1);
	    //memset(nfrom,0,n+1);
	    //memset(adj,0,n*n+2*n+3);
		for(i=1;i<=n;i++){
			for(j=1;j<=n;j++){
				
				adj[i][j]=0;}}
		
		for(i=1;i<=n;i++){
			//scanf("%d",&m);
			m=ni();
			y2[0][i]=m;
			for(j=1;j<=m;j++){
				
				//scanf("%d",&y);
				y=ni();
				adj[y][i]=1;
				y2[j][i]=y;
                //nto[y]++;nfrom[i]++;
                }}
				
		ans=check(n);
								
		if(ans)
			printf("#%d:No\n",l);
			
		else
			printf("#%d:Yes\n",l);}
			
	return(0);}
							
							
					
					
			

/* **** TEAM DOTCPP **** */

//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include <math.h>
//Other intncludes
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
//some common functionn
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define FOR(i,a,b)              for(int i=a;i<b;i++)
#define FORs(i,a,b)             for(int i=a;i>=b;i--)
#define fill(a,v)               memset(a,v,sizeof a)
#define abS(x)                  ((x)<0?-(x):(x))
#define error(x)                cout << #x << " : " << (x) << endl
#define mP                      make_pair
#define pB                      push_back

// intnput macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sll(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

// Output macros
#define p(n)                        printf("%d",n)
#define pc(n)                       printf("%c",n)
#define pll(n)                       printf("%lld",n)
#define pf(n)                       printf("%lf",n)
#define ps(n)                       printf("%s",n)

using namespace std;
/*
typedef long long long long;
typedef pair<int,int> Pintint;
typedef pair<long long,long long> Plong long;
typedef pair<int,Pintint> TRint;
typedef vector<int> Vint;
typedef vector<long long> VL;
typedef vector<Pintint> Vintint;
typedef vector<Plong long> Vlong long;
typedef vector<TRint> VT;
typedef vector<Vint> VVint;
typedef vector<VL> VVL;
typedef vector<Vintint> VVintint;
typedef vector<Vlong long> VVlong long;
typedef vector<VT> VVT;
*/
using namespace std;
typedef std::pair<int,int> my_pair;
unsigned long long power(unsigned long long x, unsigned long long y)
{
    if( y == 0)
        return 1;
    unsigned long long temp =  power(x, y/2);
    if (y&1 != 1)
        return ((temp % 10 )*(temp % 10 )) % 10;
    else
        return ((x % 10 )*(temp % 10 )*(temp % 10 ))%10;

}
 

struct point
{
  int x;
  int y;
};
int main()
{
    int test;
    cin>>test;
    while(test--)
    {
      int n;
      cin>>n;
      struct point p[n + 2];
      for (int i = 0; i < n; ++i)
      {
        cin>>p[i].x>>p[i].y;
      }
      int min_x = 200,max_x = -200;
      int min_y = 200,max_y = -200;
      for (int i = 0; i < n; ++i)
      {
        min_x = min(p[i].x,min_x);
        max_x = max(p[i].x,max_x);
        min_y = min(p[i].y,min_y);
        max_y = max(p[i].y,max_y);
        /* code */
      }
      //cout<<min_x<<" "<<min_y<<endl;
      //cout<<min_x<<" "<<max_y<<endl;
      //cout<<max_x<<" "<<min_y<<endl;
      //cout<<max_x<<" "<<max_y<<endl;
      int ans = (max_x - min_x) * (max_y - min_y) ;
      if(ans == 0)
             {
                  int temp = p[0].x;
                  bool flag = false;
                  for (int i = 1; i < n; ++i)
                  {
                      if(p[i].x != temp)
                      {
                        flag = true;
                        break;
                      }
                    /* code */
                  }
                  if(flag == true)
                    ans = max_x - min_x;
                  else
                    ans = max_y - min_y;

             }
      cout<<ans<<endl;
  }
  //system("pause");
   return 0;
}

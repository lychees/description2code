#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cassert>
#include <limits>
#include <stack>
#include <unordered_map>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define gcd __gcd
#define inrep int t;cin>>t; while(t--)

#define SIO  ios_base::sync_with_stdio ( false )
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}

int n;
vector<vpii> adj;
vi edgecosts;
ll tsum=0;
bool mst() {
    vi viseted ( n );
    priority_queue<pair<ll,pii>> pq;
    pq.push ( mp ( 0,mp ( 0,0 ) ) );
    while ( !pq.empty() ) {
        auto p=pq.top();
        pq.pop();
        int j=p.second.first;
        if ( viseted[j] ) continue;
        viseted[j]=1;
        edgecosts.push_back ( p.second.second );
        tsum+=p.second.second;
        for ( auto p2: adj[j] ) {
            if ( !viseted[p2.first] ) {

                pq.push ( mp ( -p2.second,p2 ) );
            }

        }
    }
    rep ( i,n ) if ( !viseted[i] ) return false;
    return 1;
}
int main() {
    SIO;
    ll m,k;
    cin>>n>>m>>k;
    adj=vector<vpii> ( n );
    rep ( i,m ) {
        int u,v,w;
        cin>>u>>v>>w;
        adj[u-1].push_back ( mp ( v-1,w ) );
        adj[v-1].push_back ( mp ( u-1,w ) );
    }
    bool suc= mst();
    if ( !suc ) {
        cout<<-1<<endl;
        return 0;

    }
    sort ( all ( edgecosts ),greater<int>() );
    assert(edgecosts.size()==n);
    int i=0;

    while ( tsum>k ) {
         if ( i>n-2 ) {
            cout<<-1<<endl;
            return 0;

        }
        tsum-=edgecosts[i]-1;
        i++;
       
    }
    cout<<i<<endl;

}

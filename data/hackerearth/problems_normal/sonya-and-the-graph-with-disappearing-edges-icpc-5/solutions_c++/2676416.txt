     #include<bits/stdc++.h>
    using namespace std;
    typedef long long ll;
    typedef vector<ll>vll;
    typedef pair<ll,ll> pll;
    #define xx first
    #define yy second
    #define max(a, b, c) ((a > b? (a > c? a : c) : (b > c? b : c)))
    #define rep(n) for(i=0;i<n;i++)
    #define pb push_back
    #define mp make_pair
    #define clr(a) memset(a, 0, sizeof a)
    #define reset(a) memset(a, -1, sizeof a)
    #define Clr(a) fill(a.begin(),a.end(),0)
    #define Reset(a) fill(a.begin(),a.end(),-1)  
     #define tr(container, it) \
      for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)  
    void read(ll &n)
    {   scanf("%lld",&n);
    }
      void debug(vector<ll> v)
    {
        for(int i=0;i<v.size();i++)
            cout<<v[i]<<" ";
        cout<<"\n";
        // call debug({i,j,k})
    }
    vector< vector<pll> >graph;
    ll arr[100010];
    int main()
    {
        ll t,z,i,j,k,n,m,p,q,r,s,ans;
        //scanf("%lld",&t);
        t=1;
        for(z=1;z<=t;z++)
        {
            scanf("%lld%lld%lld",&n,&m,&k);
            graph.clear();
            graph.resize(n);
            vector<pll> inp(m+10);
            for(i=0;i<m;i++)
            {
            	scanf("%lld%lld",&p,&q);
            	p--;
            	q--;
            	inp[i]=(mp(p,q));
            }
            reset(arr);
            for(i=0;i<k;i++)
            {
            	scanf("%lld%lld",&p,&q);
            	q--;
            	arr[q]=p;            	
            }
            for(i=0;i<m;i++)
            {
            	graph[inp[i].xx].push_back(mp(inp[i].yy,arr[i]));
            	graph[inp[i].yy].push_back(mp(inp[i].xx,arr[i]));
            }
            ll fnd=n;
            vector<bool>visited(n+5,0);
            visited[0]=1;
            queue<ll>q;
            q.push(0);
            q.push(0);
            ans=-1;
            while(!q.empty())
            {
            	ll x=q.front();q.pop();
            	ll t=q.front();q.pop();
            	//debug({x+1,t});
            	if(x==fnd-1){
            		ans=t;
            		break;
            	}
            	//cout<<graph[x].size()<<endl;
            	for(i=0;i<graph[x].size();i++)
            	{
            		pll v=graph[x][i];
            		//debug({v.xx,v.yy,t});
            		if(!visited[v.xx]&&(v.yy==-1||v.yy>t))
            		{
            			visited[v.xx]=1;
            			q.push(v.xx);
            			q.push(t+1);
            		}
            	}
            }
            printf("%lld\n",ans);
        }
        return 0;
    }
#########################
def heappush(heap, item):
    """Push item onto heap, maintaining the heap invariant."""
    heap.append(item)
    _siftdown(heap, 0, len(heap) - 1)


def _siftdown(heap, startpos, pos):
    newitem = heap[pos]
    # Follow the path to the root, moving parents down until finding a place
    # newitem fits.
    while pos > startpos:
        parentpos = (pos - 1) >> 1
        parent = heap[parentpos]
        if newitem.change > parent.change:
            heap[pos] = parent
            pos = parentpos
            continue
        elif newitem.change == parent.change and newitem.id > parent.id:
            heap[pos] = parent
            pos = parentpos
            continue
        break
    heap[pos] = newitem


def heappop(heap):
    """Pop the smallest item off the heap, maintaining the heap invariant."""
    lastelt = heap.pop()  # raises appropriate IndexError if heap is empty
    if heap:
        returnitem = heap[0]
        heap[0] = lastelt
        _siftup(heap, 0)
    else:
        returnitem = lastelt
    return returnitem


def _siftup(heap, pos):
    endpos = len(heap)
    startpos = pos
    newitem = heap[pos]
    # Bubble up the smaller child until hitting a leaf.
    childpos = 2 * pos + 1  # leftmost child position
    while childpos < endpos:
        # Set childpos to index of smaller child.
        rightpos = childpos + 1
        if rightpos < endpos and heap[childpos].change < heap[rightpos].change:
            childpos = rightpos
        if rightpos < endpos and (
                heap[childpos].change == heap[rightpos].change and heap[childpos].id < heap[rightpos].id):
            childpos = rightpos
        heap[pos] = heap[childpos]
        pos = childpos
        childpos = 2 * pos + 1
    # The leaf at pos is empty now.  Put newitem there, and bubble it up
    # to its final resting place (by sifting its parents down).
    heap[pos] = newitem
    _siftdown(heap, startpos, pos)


class trend:
    def __init__(self, id, change, z_change):
        self.id = id
        self.change = change
        self.z_change = z_change

    def __str__(self):
        return str(str(self.id) + " " + str(self.z_change))


######################
n = input()
dic = {}
dic2 = {}
h = []
for i in xrange(0, n):
    values = [int(x) for x in raw_input().split()]
    z = values[1]

    for j in xrange(1, len(values)):
        z_change = 50 * values[2]
        z_change = z_change + 5 * values[3] + 10 * values[4] + 20 * values[5]
        change = z_change - z
    t = trend(values[0], change, z_change)
    heappush(h, t)
# heappop(h)
for i in xrange(0, 5):
    print heappop(h)

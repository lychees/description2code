#include <algorithm>
#include <functional>
#include <utility>
#include <queue>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>

#define FOR(i, n) for(lli i = 0; i < (lli)(n); ++i)
#define FORU(i, j, k) for(lli i = (j); i <= (lli)(k); ++i)
#define FORD(i, j, k) for(lli i = (j); i >= (lli)(k); --i)

#define X(A) get<0>(A)
#define Y(A) get<1>(A)
#define Z(A) get<2>(A)

#define mp make_pair
#define mt make_tuple
#define pb push_back

//------------------------------------------------------------------------------

using namespace std;
using lli = long long int;
using llu = long long unsigned;

using pii = tuple<lli, lli>;
using ppii = tuple<pii, pii>;
using piii = tuple<lli, lli, lli>;
using vi = vector<lli>;
using vii = vector<pii>;
using viii = vector<piii>;
using vvi = vector<vi>;
using vvii = vector<vii>;
using vviii = vector<viii>;

//------------------------------------------------------------------------------

template <typename T>
inline void hash_combine (size_t& seed, const T& val){
  seed ^= hash<T>()(val) + 0x9e3779b9 + (seed<<6) + (seed>>2);
}

template <typename T, typename... Ts>
void hash_combine (size_t& seed, const T& val, const Ts&... args){
  hash_combine(seed,val);
  hash_combine(seed,args...);
}

void hash_combine (size_t&){}

template <typename... Ts>
size_t hash_val (const Ts&... args){
  size_t seed = 0;
  hash_combine (seed, args...);
  return seed;
}

//------------------------------------------------------------------------------

template<class A, class B>
ostream& operator<<(ostream& s, pair<A, B> const& a){
  return s << "(" << X(a) << "," << Y(a) << ")";
}

template<class A, class B>
ostream& operator<<(ostream& s, tuple<A, B> const& a){
  return s << "(" << X(a) << "," << Y(a) << ")";
}

template<class A, class B, class C>
ostream& operator<<(ostream& s, tuple<A, B, C> const& a){
  return s << "(" << X(a) << "," << Y(a) << "," << Z(a) << ")";
}

template<class T>
ostream& operator<<(ostream& s, vector<T> const& a){
  FOR(i, a.size()){
    s << a[i];
    if(i != (lli)a.size()-1) s << " ";
  }
  return s;
}

//------------------------------------------------------------------------------


int main(int, char**){
  ios::sync_with_stdio(false);
  lli n, m, k; cin >> n>>m>>k;
  vvii A(n, vii());
  vi V(m, true);
  FOR(i, m){
    lli x, y; cin >> x >> y; x-=1; y-=1;
    A[x].pb(mt(y, i));
    A[y].pb(mt(x, i));
  }
  priority_queue<pii, vii, greater<pii>> qq;
  FOR(i, k){
    lli t, x; cin >> t >> x;
    qq.push(mt(t, x-1));
  }
  {
    priority_queue<pii, vii, greater<pii>> q; q.push(mt(0, 0));
    vi E(n, 1000*1000*1000); E[0] = 0;
    vi F(n, false);
    while(!q.empty()){
      auto p = q.top(); q.pop();
      lli i = Y(p), d = X(p);
      while(!qq.empty() && X(qq.top()) <= d){
        V[Y(qq.top())] = false;
        qq.pop();
      }
      if(!F[i]){
        F[i] = true;
        for(auto pp : A[i]) if(V[Y(pp)]){
            lli j = X(pp);
          lli e = 1;
          if(d+e <= E[j]){
            E[j] = d+e;
            q.push(mt(d+e, j));
          }
        }
      }
    }
    cout << (F[n-1]?E[n-1]:(-1)) << endl;
  }
  return 0;
}

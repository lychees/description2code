#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<algorithm>
using namespace std;

int n;
int ex[1111], ey[1111], g[2222], nxt[2222], c[1111], nm;
int b[1111], v[1111], mh[1111];

bool dfs(int i){
	 for (int k = c[i]; ~k; k = nxt[k]){
	 	 int j = g[k];
	 	 if (!v[j]){
		 	v[j] = 1;
			if (mh[j] == 0 || (dfs(mh[j]))){
			   mh[j] = i;
			   return 1;
			}
		 }
	 }
	 return 0;
}

void addedge(int x, int y){
	 g[nm] = y; nxt[nm] = c[x]; c[x] = nm; nm++;
}

int solve(){
	memset(ex, 0, sizeof ex);
	nm = 0;
	memset(c, -1, sizeof c);
	memset(mh, 0, sizeof mh);
	scanf("%d", &n);
	
	for (int i = 1; i <= n; ++i){
		scanf("%d%d", &ex[i], &ey[i]);
		b[i] = ex[i];
	}
	sort(b + 1, b + 1 + n);
	int X = unique(b + 1, b + 1 + n) - b - 1;
	for (int i = 1; i <= n; ++i) ex[i] = lower_bound(b + 1, b + 1 + X, ex[i]) - b;
	for (int i = 1; i <= n; ++i) b[i] = ey[i];
	sort(b + 1, b + 1 + n);
	int Y = unique(b + 1, b + 1 + n) - b - 1;
	for (int i = 1; i <= n; ++i) ey[i] = lower_bound(b + 1, b + 1 + Y, ey[i]) - b;
	for (int i = 1; i <= n; ++i)
		addedge(ex[i], ey[i]);
	int ans = 0;
	for (int i = 1; i <= X; ++i){
		memset(v, 0, sizeof v);
		ans += dfs(i);
	}
	cout << ans << endl;
	return 0;
}

int main(){ int Ti;
	scanf("%d", &Ti);
	while (Ti--) solve();
}

#include <iostream>
#include <assert.h>
#include <vector>
using namespace std;

long long fast_pow(int base,long long n,long long  M);

int main()
{
    long  N,T;
    long long val;
    long int M=1000000007;
    //vector<long long> res;
    cin >>T;
    assert(T>=1 && T<=100000);
    
    while(T--)
    {
    	cin>>N;
    	//cout<<N<<":"<<endl;;
    	assert(N>=1 && N<=1000000000);
       val=( ( fast_pow(3,N,M) -(  (3%M) * fast_pow(2,N,M)  )%M ) )%M+3;
    	if(val>M)
    	   val=val%M;
    	if(val<-1)
    	 val=(val+M)%M;
    	cout<<val<<endl;
    }
    
    
    return 0;
}

//find base^N by moduluo op
long long fast_pow(int base,long long n,long long M) 
{
    if(n==0)
       return 1;
    if(n==1)
    return base;
    long long halfn=fast_pow(base,n/2,M);
    if(n%2==0)
        return ( halfn * halfn ) % M;
    else
        return ( ( ( halfn * halfn ) % M ) * base ) % M;
}

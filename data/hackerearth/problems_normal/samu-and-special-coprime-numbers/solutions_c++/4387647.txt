/*
* @problem: samu-and-special-coprime-numbers
*/

#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <limits.h>
#include <vector>
#include <map>
#include <bitset>
#include <string>
#include <iterator>
#include <set>
#include <utility>
#include <queue>
#include <numeric>
#include <functional>
#include <ctype.h>
#include <stack>
#include <algorithm>
#include <cstdlib>
#define MAX 100100
#define mod 1000000007LL
#define bitcnt(x) __builtin_popcountll(x)
#define MS0(x) memset(x, 0, sizeof(x))
#define MS1(x) memset(x, -1, sizeof(x))
#define ll long long int
#define mp(x, y) make_pair(x, y)
#define pii pair<int, int>
#define pll pair<ll, ll>
#define in(x) scanf("%lld", &x)
#define ind(x) scanf("%d", &x)
#define ins(x) scanf("%s", x)
#define pr(x) printf("%lld\n", x)
#define prd(x) printf("%d\n", x)
#define prs(x) printf("%s\n", x)
#define pi acos(-1.0)
#define ff first
#define ss second

using namespace std;
ll dp[20][200][2000];
int digits[25], len;
char dig[25];

int gcd(int a, int b)
{
	if(b == 0)
		return a;
	return gcd(b, a % b);
}

ll rec(int pos, int sum, int ssum, bool flag)
{
	if(pos == len)
	{
		if(gcd(ssum, sum) == 1)
			return 1;
		return 0;
	}

	if(!flag && dp[len - pos][sum][ssum] != -1)
		return dp[len - pos][sum][ssum];
	ll tmp = 0;
	if(flag)
	{
		for(int i = 0; i < digits[pos]; i++)
			tmp += rec(pos + 1, sum + i, ssum + i * i, 0);
		tmp += rec(pos + 1, sum + digits[pos], ssum + digits[pos] * digits[pos], 1);
	}
	else
	{
		for(int i = 0; i < 10; i++)
			tmp += rec(pos + 1, sum + i, ssum + i * i, 0);
		dp[len - pos][sum][ssum] = tmp;
	}

	return tmp;
}

ll solve(ll i)
{
	if(i == 0)
		return 0;
	sprintf(dig, "%lld", i);
	for(len = 0; dig[len] != '\0'; len++)
		digits[len] = dig[len] - '0';
	ll ans = rec(0, 0, 0, 1);
}

int main()
{	
	#ifndef ONLINE_JUDGE
		freopen("../input.txt", "r", stdin);
		// freopen("../output.txt", "w", stdout);
	#endif
	// ios_base::sync_with_stdio(0);
    // cin.tie(0);
	MS1(dp);
	int t;
	ll l, r, ans;
	ind(t);
	while(t--)
	{
		in(l);
		in(r);
		ans = solve(r) - solve(l - 1);
		pr(ans);
	}
	return 0;
}
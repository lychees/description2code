#include<iostream>
#include<vector>
using namespace std;

vector< vector< vector<long> > >cache;

long f(long n, long k, long group)
{
     if(cache[n][k][group] != -1)
     return cache[n][k][group];
     
    
     if(n<k)
     {
     	return 0;
	 }
     
     if(group == 1 )
     {
     	cache[n][k][group] = 1;
     	return 1;
	 }
	 else
	 {
	 	long temp = n/group;
	 	long temp2 = k;
	 	 long count = 0;
	 	while(temp >= temp2){
	 		count = count + f(n-temp2, temp2 , group-1);
	 		temp2++;
		 }
       cache[n][k][group] = count;
       return count;
	 }
	
}



int main()
{
	int test;
	cin>>test;
	for(int i=0; i<test; i++)
    {
    		long n, k;
    	cin>>n;
    	cin>>k;
    	long group =1;
    	long count=0;
    	cache.clear();
    	
    	 for(int m=0; m<=n; m++){
    	      vector< vector<long> > cachemid;
    	      for(int j=0; j<=n; j++){
    	      	vector<long> cacheshort;
    	      	for(int k=0; k<=n; k++){
	          cacheshort.push_back(-1);
               }
               cachemid.push_back(cacheshort);
    	      }
               cache.push_back(cachemid);
         } 
    
    	
    	while(n/group >= k)
    	{
    		//cout<<"inside"<<endl;
    		count = count + f(n,k, group);
    		group++;
    		
		}
		cout<<count<<endl;
	}
}


















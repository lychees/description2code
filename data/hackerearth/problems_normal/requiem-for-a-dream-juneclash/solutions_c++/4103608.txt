//its not how good you are...its how good you want to be
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll   long long  int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)

struct data
{
	ll pre,suff,ans,sum;
	data()
	{
		pre=suff=ans=sum=0;
	}
}	store[100001][21];
ll par[100001][21],h[100001];
vector<pair<ll,ll> >v[100001];
data combine(data x,data y)
{
	data res;
	res.pre=max(x.pre,x.sum+y.pre);
	res.suff=max(y.suff,y.sum+x.suff);
	res.ans=max(max(x.ans,y.ans),x.suff+y.pre);
	res.sum=x.sum+y.sum;
	return res;
}	
void dfs(ll cur,ll p,ll wt)
{
	par[cur][0]=p;
	store[cur][0].pre=max(0LL,wt);
	store[cur][0].suff=max(0LL,wt);
	store[cur][0].ans=max(0LL,wt);
	store[cur][0].sum=wt;
	if(p!=-1)
	h[cur]=h[p]+1;
	for(int i=1;i<20;i++)
	{
		if(par[cur][i-1]!=-1)
		{
			par[cur][i]=par[par[cur][i-1]][i-1];
			store[cur][i]=combine(store[cur][i-1],store[par[cur][i-1]][i-1]);
		}	
	}
	for(int i=0;i<v[cur].size();i++)
	{
		int x=v[cur][i].F;
		if(x!=p)
		dfs(x,cur,v[cur][i].S);
	}
	
	return;
}
void lca(int v,int u)
{ 
	if(h[v]<h[u])
	swap(v,u); 
	data d1,d2;
	for(int i=20-1;i>=0;i--)
	{ 
		if(par[v][i]!=-1&&h[par[v][i]] >=h[u])
		{ 
			d1=combine(d1,store[v][i]);
			v=par[v][i];
		} 
	} 
	if(v==u)
	{
		cout<<d1.ans<<endl;
		return;
	}
	for(int i=20-1;i>=0;i--)
	{ 
		if(par[v][i]-par[u][i]) 
		{
			d1=combine(d1,store[v][i]);
			v=par[v][i];
			d2=combine(d2,store[u][i]);
			u=par[u][i];
		}	
	} 
	d1=combine(d1,store[v][0]);
	d2=combine(d2,store[u][0]);
	ll ans=max(d1.ans,d2.ans);
	ans=max(ans,d1.suff+d2.suff);
	cout<<ans<<endl;
	return;
}


int main() 
{
	ll i,j,n,q,x,y,w;
	cin>>n>>q;
	mem(par,-1);
	for(i=1;i<=n-1;i++)
	{
		cin>>x>>y>>w;
		v[x].pb(mp(y,w));
		v[y].pb(mp(x,w));
	}
	dfs(1,-1,0);
	while(q--)
	{
		cin>>x>>y;
		lca(x,y);
	}
	return 0;
}
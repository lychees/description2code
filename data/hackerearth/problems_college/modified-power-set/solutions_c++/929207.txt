#include <bits/stdc++.h>
#include "assert.h"
using namespace std;


#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define present(c,x) ((c).find(x) != (c).end())
#define rep(i,a,b) for (int i = a; i < b; ++i)
#define repv(i,cc) rep(i,0,sz(cc))
#define unq(c) sort(all(c)),(c).resize(unique(all(c))-(c).begin())
#define uniq(c) (c).resize(unique(all(c))-(c).begin())



typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;


#ifndef _FOOLS_SYS_

    #define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end();i++)
    #define gc getchar_unlocked
    #define ugc ungetc
#else
  #ifdef DEBUG

    #define pi(x) cerr<<"Debug: "<< #x << " : "<< x<<"\n";
    #define ps(a) puts(#a)
    #define EPS 1e-7

    template <typename T1, typename T2>
    inline std::ostream& operator << (std::ostream& os, const std::pair<T1, T2>& p)
    {
        return os << "(" << p.first << ", " << p.second << ")";
    }

    template<typename T>
    inline std::ostream &operator << (std::ostream & os,const std::vector<T>& v)
    {
        bool first = true;
        os << "[";
        for(unsigned int i = 0; i < v.size(); i++)
        {
            if(!first)
                os << ", ";
            os << v[i];
            first = false;
        }
        return os << "]";
    }

    template<typename T>
    inline std::ostream &operator << (std::ostream & os,const std::set<T>& v)
    {
        bool first = true;
        os << "[";
        for (typename std::set<T>::const_iterator ii = v.begin(); ii != v.end(); ++ii)
        {
            if(!first)
                os << ", ";
            os << *ii;
            first = false;
        }
        return os << "]";
    }

    template<typename T1, typename T2>
    inline std::ostream &operator << (std::ostream & os,const std::map<T1, T2>& v)
    {
        bool first = true;
        os << "[";
        for (typename std::map<T1, T2>::const_iterator ii = v.begin(); ii != v.end(); ++ii)
        {
            if(!first)
                os << ", ";
            os << *ii ;
            first = false;
        }
        return os << "]";
    }

 #endif
    #define tr(c,i) for(decltype((c).begin()) i = (c).begin(); i != (c).end();i++)
    #define gc getchar
    #define ugc ungetchar
#endif

#define i(n) { \
	register char chchchch = 0, \
	              sssssssss = 1; \
	n = 0; \
	for(;chchchch < 33;chchchch = gc()); \
	(chchchch == 45)?sssssssss = -1,chchchch = gc():0; \
	for(;chchchch > 33;n = n * 10 + chchchch - '0',chchchch = gc()); \
	n *= sssssssss; \
}

int IO_INIT(){

  #ifdef _FOOLS_SYS_
    if(NULL == freopen("input.txt","r",stdin)){
          puts("File not opened Succesfully");
          return -1;
      }
   #else
     // ios_base::sync_with_stdio(false);
   #endif

   return 0;
}


template<class T> inline string tostring( T n ){ stringstream ss; ss << n; ss.flush(); return ss.str(); }
template<class T> inline string tobinary( T n ){ string s = n ? "" : "0"; while( n ) { s += ( ( n & 1 ) + '0' ); n >>= 1; }  reverse(all(s)); return s; }
template<class T> inline int digits( T n ){ int cnt = n ? 0 : 1; while( n ){ n /= 10; cnt++; } return cnt; }
template<class T1, class T2> inline T2 gcd( T1 a, T2 b ){ return !b ? a : gcd( b, a%b ); }
template<class T> inline T abs( T a ){ return a < 0 ? -a : a; }
template <class Ty,class Tx> Ty cast(const Tx &x){ Ty y; stringstream ss(""); ss<<fixed << setprecision(16)<<x;ss.seekg(0);ss>> fixed >> setprecision(16) >>y;return y;}


#define MAX 10009
/* INF use INT_MAX INT_MIN, LLONG_MIN, LLONG_MAX , ULLONG_MAX */




int main(){

    //IO_INIT();


    //pi(isPrime(97));

    int T;
    
    i(T);
    while(T-->0){
        string s;
        cin>>s;
        unq(s);
        
        int n = sz(s);
        LL ans = n + (n * (n-1))/2;
        printf("%lld\n",ans); 
        



    }

    return 0;
}

#include <bits/stdc++.h>
using namespace std;
string s;
int n;
int pre[] = {0,0,1,2,0,4,3,8,1,0,5};
bool vis[22][1<<4];
long long int dp[22][1<<4];
long long int cal(int idx, int mask)
{
     if ( idx == 0 ) {
          if ( !mask ) return 1;
          return 0;
     }
     if ( vis[idx][mask] ) return dp[idx][mask];
     vis[idx][mask] = true;
     long long ans = 0;
     for ( int i = 1; i <= 9; i++ ) ans += cal(idx-1, mask^pre[i]);
     dp[idx][mask] = ans;
     return ans;
}
long long int fun(int index,int tight,int mask,int flag)
{
    if(index==n)
    {

        if(mask==0)
        return 1;
        else
        return 0;
    }
    long long int ans=0;
    if(flag==1)
    {

        if(tight==0)
        return cal(n-index,mask);
        for(int i=1;i<=s[index]-49;i++)
        {
            ans=ans+fun(index+1,0,mask^pre[i],flag);
        }
            if ( s[index] != '0' )
            ans += fun(index+1, 1, mask^pre[s[index]-48], flag);

        }
        else
        {
            ans=ans+fun(index+1,0,mask,flag);
            ans=ans+fun(index,tight,mask,1);
        }

    return ans;
}
long long int get(long long int x)
{
    stringstream ss;
    ss.clear();
    ss<<x;
    s=ss.str();
    n=(int)s.size();
    long long int res=fun(0,1,0,0);
    return res;
}

int main()
{
    int t;
    scanf("%d",&t);
    long long int A,B,K,L,R;
    while(t--)
    {

        scanf("%lld%lld%lld",&A,&B,&K);
        long long int init=get(A-1);
        long long int ans=-1;
        long long int M;
        L = A, R = B;
          while ( L <= R ) {
                M = (L+R)>>1;
                long long val = get(M) - init;
                if ( val >= K ) {
                   if ( val == K ) ans = M;
                   R = M-1;
                }
                else L = M+1;
          }
          printf("%lld\n", ans);


    }
    return 0;
}

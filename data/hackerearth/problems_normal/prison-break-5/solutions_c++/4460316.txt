#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <cstring>
#include <bitset>
#include <map>
#include <set>
#include <queue>
#include <cmath>
using namespace std;
const int N=33;
int t;
int n;
int g[N][N];
long long ans;
bool vis[N][N];
int dirx[]={1,-1,0,0};
int diry[]={0,0,-1,1};
inline bool valid(int a,int b){
    return a>-1&&a<n&&b>-1&&b<n;
}
int nn;
void dfs(int a,int b){
    if(g[a][b]){return;}
    vis[a][b]=1;
    if(a+1==n&&b+1==n){ans++;return;}
    for(int i=0;i<4;i++){
        int xx=a+dirx[i];
        int yy=b+diry[i];
        if(valid(xx,yy)&&!vis[xx][yy]&&!g[xx][yy]){
            dfs(xx,yy);
            vis[xx][yy]=0;
        }
    
    }


}

int main(){
    // freopen("in.txt","r",stdin);
    // freopen("out.txt","w",stdout);
    scanf("%d",&t);

    while(t--){
        scanf("%d",&n);
        memset(vis,0,sizeof(0));
        nn=(n-1)*2;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                scanf("%d",&g[i][j]);
                vis[i][j]=0;
            }
        }
        ans=0;
        if(g[0][0]==0||g[n-1][n-1]==0){g[0][0]=g[n-1][n-1]=0;dfs(0,0);}
    
    printf("%lld\n",ans);
    }
    return 0;
}
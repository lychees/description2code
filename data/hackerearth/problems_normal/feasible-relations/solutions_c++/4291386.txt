#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define X first
#define Y second

using namespace std;

int par[1000001],rnk[1000001];

int find(int x) {
	int id = x;

	while (id != par[id]) {
		id = par[id];
	}
	par[x] = id;
	return id;
}

void Union(int x,int y) {
	int xroot = find(x);
	int yroot = find(y);

	if (rnk[xroot] > rnk[yroot]) {
		par[yroot] = xroot;
		rnk[xroot] += 1;
	} else {
		par[xroot] = yroot;
		rnk[yroot] += 1;
	}
}

void init() {
	for (int i = 0; i < 1000001; i++) {
		par[i] = i;
		rnk[i] = 0;
	}
}

int main()
{
	int t,n,k;
	cin >> t;

	while (t--) {
		cin >> n >> k;
		init();
		vector<pair<int,int> >e,ne;
		for (int i = 0; i < k; i++) {
			int x,y;
			string s;
			cin >> x;
			cin >> s;
			cin >> y;
			if (s[0] == '=') {
				e.pb(mp(x,y));
			} else {
				ne.pb(mp(x,y));
			}
		}

		for (int i = 0; i < e.size();i++) {
			Union(e[i].X,e[i].Y);
		}
		bool ok = true;
		for (int i = 0; i < ne.size(); i++) {
			int x = find(ne[i].X);
			int y = find(ne[i].Y);

			if (x == y) {
				ok = false;
			}
		}

		if (ok) {
			cout << "YES\n";
		} else {
			cout << "NO\n";
		}
	}

	return 0;
}

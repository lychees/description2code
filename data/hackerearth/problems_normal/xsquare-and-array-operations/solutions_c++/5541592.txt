#include <bits/stdc++.h>
#define lli long long
#define MAX 100005
using namespace std;
int n;
lli A[MAX];
struct node {
    lli mx;
    int idx;
    node() { }
    node(lli mx, int idx)
    {
        this->mx = mx;
        this->idx = idx;
    }
}tree[4*MAX];
node combine(node p1, node p2)
{
    node ret;
    if ( p1.mx > p2.mx ) return p1;
    return p2;
}
void build(int where, int left, int right)
{
    if ( left > right ) return;
    if ( left == right ) {
        tree[where].mx = A[left];
        tree[where].idx = left;
        return;
    }
    int mid = (left+right)/2;
    build(where*2, left, mid);
    build(where*2+1, mid+1, right);
    tree[where] = combine(tree[where*2], tree[where*2+1]);
}
node query(int where, int left, int right, int i, int j)
{
    if ( left > right || left > j || right < i ) return node(-1,-1);
    if ( left >= i && right <= j ) return tree[where];
    int mid = (left+right)/2;
    return combine(query(where*2, left, mid, i, j), query(where*2+1, mid+1, right, i, j));
}
lli f(int left, int right)
{
    if ( left >= right ) return 0;
    node val = query(1,0,n-1,left,right);
    if ( val.idx == left || val.idx == right ) return val.mx + f(left,val.idx-1) + f(val.idx+1,right);
    else return 2LL*val.mx + f(left,val.idx-1) + f(val.idx+1,right);
}
int main()
{
    int t;
    cin >> t;
    while ( t-- ) {
        cin >> n;
        for ( int i = 0; i < n; i++ ) cin >> A[i];
        build(1,0,n-1);
        lli ans = f(0,n-1);
        cout << ans << endl;
    }
    return 0;
}
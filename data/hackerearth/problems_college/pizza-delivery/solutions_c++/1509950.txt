#include <iostream>
using namespace std;

int dist[300][300],graph[300][300],V;

void floydWarshell ()
{
    /* dist[][] will be the output matrix that will finally have the shortest 
      distances between every pair of vertices */
    int  i, j, k;
 
    /* Initialize the solution matrix same as input graph matrix. Or 
       we can say the initial values of shortest distances are based
       on shortest paths considering no intermediate vertex. */
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
 
    /* Add all vertices one by one to the set of intermediate vertices.
      ---> Before start of a iteration, we have shortest distances between all
      pairs of vertices such that the shortest distances consider only the
      vertices in set {0, 1, 2, .. k-1} as intermediate vertices.
      ----> After the end of a iteration, vertex no. k is added to the set of
      intermediate vertices and the set becomes {0, 1, 2, .. k} */
    for (k = 0; k < V; k++)
    {
        // Pick all vertices as source one by one
        for (i = 0; i < V; i++)
        {
            // Pick all vertices as destination for the
            // above picked source
            for (j = 0; j < V; j++)
            {
                // If vertex k is on the shortest path from
                // i to j, then update the value of dist[i][j]
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
}

int main()
{ int n,i,j,m,a,b,c;
	
  cin>>n;
  for(i=0;i<n;i++)
    { for(j=0;j<n;j++)
       { cin>>graph[i][j];
       }
    }
    V=n;
    floydWarshell ();
    cin>>m;
   // cout<<"vivek\n";
    for(i=0;i<m;i++)
      { cin>>a>>b>>c;
      //cout<<"bbb\n";
      cout<<dist[a][b]+dist[b][c]<<" "<<(dist[a][b]+dist[b][c])-dist[a][c]<<endl;
      }
    return 0;
}

    
    
    
    
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define fr first
#define se second

/* Relevant code begins here */

#define MOD 1000000007

ill a[10005], b[10005], d[10005];
vector < int > adj[1005];

class Prioritize
{
public:
    int operator() ( const pair <int, pair <ill, pair <ill, ill> > >& p1, const pair <int, pair <ill, pair <ill, ill> > >& p2 )
    {
        return p1.second.first < p2.second.first;
    }
};

int main()
{
	int n, k, i, j;
	S(n), S(k);

	d[0] = MOD;
	F(i, 1, n+1) {
		Sl(a[i]), Sl(b[i]);
		d[i] = MOD;
	}
	d[n+1] = MOD;
	F(i, 0, n+1) {
		F(j, i+1, i+k+1) {
			adj[i].pb(j);
		}
	}
	priority_queue < pair <int, pair <ill, pair <ill, ill> > > , vector < pair <int, pair <ill, pair <ill, ill> > > > , Prioritize > Q;
    d[0] = 0LL;
    Q.push(make_pair(0, make_pair(d[0], make_pair(0, 0))));
    while (!Q.empty()) {
        int u = Q.top().first;
        ill au = Q.top().second.second.first;
        ill bu = Q.top().second.second.second;
        Q.pop();
        F(i, 0, (int)adj[u].size()) {
            int v = adj[u][i];
            
            if (d[v] > max(a[v], au) * max(b[v], bu)) {
                d[v] = max(a[v], au) * max(b[v], bu);
                Q.push(make_pair(v, make_pair(d[v], make_pair(max(a[v], au), max(b[v], bu)))));
            }
        }
    }
    printf("%lld\n", d[n+1]);
	return 0;
}

#include <iostream>
#include <algorithm>
#include <cstring>
#define MAXN 400100

using namespace std;

const int maxn = 400100, maxchar = 29;
int str[maxn];
struct State {
    int num1,num2;
    State *trans[maxchar]; int mask;
    State *par; int dep, start, idx;
    State(){memset(trans,0,sizeof(trans)); mask=0;}
    void clear_trans() {
        for (int t = mask; t > 0; t &= t-1)
            trans[__builtin_ctz(t)] = 0;
        mask = 0;
    }
    void clear() { par = 0; start = dep = idx = 0; clear_trans(); }
    void copy(State *s) {
        start = s->start; par = s->par;
        clear_trans(); mask = s->mask;
        for (int t = mask; t > 0; t &= t-1) {
            int ch = __builtin_ctz(t);
            trans[ch] = s->trans[ch];
        }
    }
};

class SuffixTree { public:
int n;
State states[maxn*2], *new_state, *root, *whole;
int arr[maxn], m, hei[maxn];
void extend(int ch) {
    State *nwhole = new_state++;

    nwhole->clear();
    nwhole->dep = whole->dep+1;
    nwhole->idx = n - nwhole->dep + 1;
    State *cur = whole;
    while (cur && cur->trans[ch]==0) {
        cur->trans[ch] = nwhole; cur->mask|=1<<ch;
        cur = cur->par;
    }
    if (cur == 0)
        nwhole->par = root;
    else {
        State *fork = cur->trans[ch];
        if (cur->dep+1 == fork->dep)
            nwhole->par = fork;
        else {
            State *nfork = new_state++;
            nfork->copy(fork);
            nfork->dep = cur->dep+1;
            nfork->start += fork->dep - (cur->dep+1);
            if (nfork->start) nfork->idx = -1;
            else nfork->idx = n - nfork->dep + 1;

            nwhole->par = fork->par = nfork;
            while (cur && cur->trans[ch] == fork) {
                cur->trans[ch] = nfork, cur->mask|=1>>ch, cur = cur->par;
            }
        }
    }
    whole = nwhole;
}
void sa() {
    new_state = states; root = new_state++;
    root->clear(); whole = root;
    for (int i = 1; i <= n; i++) extend(str[i]);
    for (State *s = states; s < new_state; s++)
        s->clear_trans();
    for (State *s = states; s < new_state; s++)
        if (s->par) {
            int ch = str[s->start + s->dep - s->par->dep];
            State *p = s->par;
            p->trans[ch] = s; p->mask|=1<<ch;
        }
}
int go(State *s) {
    int ret = -1;
    if (s->idx > 0) { arr[++m] = s->idx; ret = m; }
    for (int t = s->mask; t > 0; t &= t-1) {
        int ch = __builtin_ctz(t);
        int u = go(s->trans[ch]);
        if (ret < 0) ret = u; else hei[u]=s->dep;
    }
    return ret;
}
void build_suffix_array() {
    m = 0; hei[go(root)] = 0;
}
void init(int _n) {
    n = _n; reverse(str+1, str+1+n);
    sa();
    reverse(str+1,str+1+n);
    build_suffix_array();
}
};

int n,m;
string s;
SuffixTree st;
int len,len1,len2;

long long dfs(State *s) {
    s->num1 = s->num2 = 0;
    if (s->mask == 0) {
        if (s->dep > len2) s->num1 = 1;
        else s->num2 = 1;
        return 0;
    }
    long long res = 0;
    for (int t = s->mask; t > 0; t &= t-1) {
        int ch = __builtin_ctz(t);
        State *ss = s->trans[ch];
        res += dfs(ss);
        res += 1ll * (ss->dep - s->dep) * ss->num1 * ss->num2;
        s->num1 += ss->num1;
        s->num2 += ss->num2;
    }
    return res;
}

int main() {
    ios::sync_with_stdio(0);
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> s;
        for (char c : s) str[++len] = c - 'a';
        str[++len] = 26;
        len1 += s.size() + 1;
    }
    cin >> m;
    for (int i = 0; i < m; i++) {
        cin >> s;
        for (char c : s) str[++len] = c - 'a';
        str[++len] = 27;
        len2 += s.size() + 1;
    }
    str[++len] = 28;
    len2++;

    //for (int i = 1; i <= len; i++)
        //cerr << str[i] << ' ';
    //cerr << endl;

    st.init(len);
    cout << dfs(st.root) << '\n';
}

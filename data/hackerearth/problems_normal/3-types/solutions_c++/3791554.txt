#include <iostream>
#include <algorithm>
#include <utility>

using namespace std;

#define SIZE 100005

int par[SIZE], n, m, count, node1, node2;
pair <int, pair <int, int> > g[SIZE];

int find_par(int);
void uni(int, int);
int set1();
int set2();

int main()
{
	int i, j, k, x, y, w, count = 0;
	cin >> n >> m;

	for (i = 0; i < m; ++i) {
		cin >> x >> y >> w;
		g[i] = make_pair(w, make_pair(x, y));
	}

	sort(g, g+m);

	count = set1();
	count += set2();

	n -= 1;
	if ((node1 == n) && (node2 == n))
		cout << count << endl;
	else
		cout << -1 << endl;

	return 0;
}

int find_par(int x)
{
	if (par[x] == x) return x;
	return (par[x] = find_par(par[x]));
}

void uni(int x, int y)
{
	int px, py;
	px = find_par(x);
	py = find_par(y);
	if (px != py) {
		par[px] = py;
	}
}

int set1()
{
	node1 = 0;
	for (int i = 1; i <= n; ++i) {
		par[i] = i;
	}
	int x, y, i, w, count = 0;
	for(i = m-1; i >= 0; --i) {
		w = g[i].first;
		x = g[i].second.first;
		y = g[i].second.second;
		if (w == 3 || w == 1) {
			if (find_par(x) != find_par(y)) {
				uni(x, y);
				node1++;
			} else {
				count++;
			}
		}
	}
	return count;
}

int set2()
{
	node2 = 0;
	for (int i = 1; i <= n; ++i) {
		par[i] = i;
	}
	int x, y, i, w, count = 0;
	for(i = m-1; i >= 0; --i) {
		w = g[i].first;
		x = g[i].second.first;
		y = g[i].second.second;
		if (w == 3 || w == 2) {
			if (find_par(x) != find_par(y)) {
				uni(x, y);
				node2++;
			} else {
				if (w != 3) count++;
			}
		}
	}
	return count;
}
//Template

// By Anudeep :)
//Includes
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)

#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

#define N 1100000
int v[N], in[N], d[N], to[N];
int seenAt[N];

int flag = 0, till = -1;
int dfs(int cur, int depth) {
	// cout << cur << endl;
	if(d[cur]!=-1) return d[cur]+1;
	if(v[cur]) {
		till = cur;
		flag = 1;
		return depth - seenAt[cur];
	}
	v[cur] = 1;
	seenAt[cur] = depth;
	d[cur] = dfs(to[cur], depth+1);
	// cout << cur << " " << d[cur] << " " << flag << endl;
	if(cur==till) flag=0, till=-1;
	return d[cur] + (flag==0);
}
int main() {
	int t;
	gi(t);
	while(t--) {
		int n;
		gi(n);
		rep(i,n) gi(to[i]);
		memset(v, 0, sizeof v);
		memset(in, 0, sizeof in);
		memset(d, -1, sizeof d);
		rep(i,n) in[to[i]]++;
		rep(i,n) if(in[i]==0 && v[i]==0) dfs(i, 0);
		// rep(i,n) { pi(d[i]); ps; } pn;
		rep(i,n) if(v[i]==0) dfs(i,0);
		int maxi = -1;
		// rep(i,n) { pi(d[i]); ps; } pn;
		rep(i,n) maxi = max(maxi, d[i]);
		rep(i,n) if(maxi==d[i]) {
			printf("%d\n",i); break;
		}
	}
	return 0;
}
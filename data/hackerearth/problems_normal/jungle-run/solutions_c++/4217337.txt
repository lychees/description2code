//Code By -- Vineet Jha//

#include<bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define e 1000000007
#define MAX 1000006
#define rep(i,a,b) for(i=a;i<b;i++)
#define pb push_back
using namespace std;

int n,mini=1e3;
list<int> *adj;
char s[30][30];

int printAllPathsUtil(int u, int d, bool visited[],int path[], int &path_index)
{
    visited[u] = true;
    path[path_index] = u;
    path_index++;
    if (u == d)
    {
    	int i;
        for (i = 0; i<path_index; i++);
        if(i-1<mini)
        mini=i-1;
		//cout<<path[i]<<" ";
        //cout<<endl;
    }
    else 
    {
        list<int>::iterator itr;
        for (itr = adj[u].begin(); itr != adj[u].end(); ++itr)
            if (!visited[*itr])
                printAllPathsUtil(*itr, d, visited, path, path_index);
    }
    path_index--;
    visited[u] = false;
}
 

 
int printAllPaths(int s, int d)
{
    bool *visited = new bool[n*n];
 
    int *path = new int[n*n];
    int path_index = 0;
 
    for (int i = 0; i < n*n; i++)
        visited[i] = false;
 
    printAllPathsUtil(s, d, visited, path, path_index);
}

int main()
{
	ll i,j,so,en;
	cin>>n;
	rep(i,0,n)
	{
		rep(j,0,n)
		{
			cin>>s[i][j];
			if(s[i][j]=='S')
			so=i*n+j;
			if(s[i][j]=='E')
			en=i*n+j;
		}
	}
	//cout<<"vineet"<<endl;
	adj=new list<int>[n*n];
	rep(i,0,n)
	{
		rep(j,0,n)
		{
			if(s[i][j]!='T')
				{
					if(j-1>=0&&s[i][j-1]!='T')
					adj[i*n+j].pb(i*n+j-1);
					if(j+1<=n-1&&s[i][j+1]!='T')
					adj[i*n+j].pb(i*n+1+j);
					if(i-1>=0&&s[i-1][j]!='T')
					adj[i*n+j].pb(i*n+j-n);
					if(i+1<=n-1&&s[i+1][j]!='T')
					adj[i*n+j].pb(i*n+n+j);
				}
			
		}
	}
	/*rep(i,0,n*n)
	{
		cout<<i<<"  ";
		list<int>::iterator itr;
		for(itr=adj[i].begin();itr!=adj[i].end();itr++)
		cout<<*itr<<" ";
		cout<<endl;
	}*/
	printAllPaths(so,en);
	cout<<mini<<endl;
	return 0;
}
#include<bits/stdc++.h>
using namespace std;

long long  minKey(long long  key[], bool mstSet[],long long  V)
{
   long long  min =INT_MAX, min_index;
 
   for (long long  v = 0; v < V; v++)
     if (mstSet[v] == false && key[v] < min)
         min = key[v], min_index = v;
 
   return min_index;
}
 
long long  printMST(long long  parent[], long long  n,vector<vector<long long >> graph,long long  V)
{
	long long  sum=0;
   //prlong long f("Edge   Weight\n");
   for (long long  i = 1; i < V; i++)
      sum=sum+ graph[i][parent[i]];
      return sum;
}
long long primMST(vector<vector<long long >> graph,long long  V)
{
     long long  parent[V]; 
     long long  key[V];   
     bool mstSet[V];  
     for (long long  i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = false;
     key[0] = 0;     
     parent[0] = -1;

     for (long long  count = 0; count < V-1; count++)
     {
        long long  u = minKey(key, mstSet,V);
        mstSet[u] = true;
        for (long long  v = 0; v < V; v++)
          if (graph[u][v] && mstSet[v] == false && graph[u][v] <  key[v])
             parent[v]  = u, key[v] = graph[u][v];
     }
     return printMST(parent, V, graph,V);
}





vector<vector<long long >> floydWarshell (vector<vector<long long >> graph,long long  V)
{
	vector<vector<long long >> dist(V,vector<long long >(V));
    long long   i, j, k;
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
    for (k = 0; k < V; k++)
    {
        for (i = 0; i < V; i++)
        {
            for (j = 0; j < V; j++)
            {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    return dist;
}

int  main()
{
	long long  t;
	cin>>t;
	while(t--){
		long long  V,E,K;
		cin>>V>>E>>K;
		vector<vector<long long >> graph(V,vector<long long >(V));
		for(long long  i=0;i<V;i++){
			for(long long  j=0;j<V;j++){
				graph[i][j]=INT_MAX;
			}
		}
		for(long long  i=0;i<V;i++){
			graph[i][i]=0;
		}
		
		for(long long  i=0;i<E;i++){
			long long  u,v,w;
			cin>>u>>v>>w;
			u--;
			v--;
			graph[u][v]=w;
			graph[v][u]=w;
		}
		
		vector<vector<long long >> ans1=floydWarshell(graph,V);
		
		vector<vector<long long >> newGraph(K,vector<long long >(K));
		for(long long  i=0;i<K;i++){
			for(long long  j=0;j<K;j++){
				if(ans1[i][j]==INT_MAX)
				newGraph[i][j]=0;
				else
				newGraph[i][j]=ans1[i][j];
			}
		}
		
		cout<<primMST(newGraph,K)<<"\n";
	}
    
}
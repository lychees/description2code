#include <bits/stdc++.h>
#define ll long long
using namespace std;
const int N=500005;
int tree[4*N], t, n, A[N], position[N];
map<int,int>M;

void build(int node, int a, int b){
	if(a>b)
		return;
	if(a==b){
		tree[node]=A[a];
		return;
	}
	build(node*2, a, (a+b)/2);
	build(node*2+1, (a+b)/2+1, b);
	tree[node]=max(tree[node*2], tree[node*2+1]);
}

int MAX(int node, int a, int b, int i, int j){
	if(a>b || a>j || b<i)
		return -1;
	if(a>=i && b<=j)
		return tree[node];
	return max( MAX(node*2, a, (a+b)/2, i, j), MAX(node*2+1, (a+b)/2+1, b, i, j) );
}

ll solve(int a, int b){
	if(a>b || a<=0 || b<=0) return 0;
	if(a==b) return 0;
	int maxx = MAX(1, 1, n, a, b);
	int mid= M[maxx];
	if(mid==a){
		return A[mid]+solve(mid+1, b);
	}
	else if(mid==b){
		return solve(a, mid-1)+A[mid];
	}
	else{
		return 2*A[mid]+solve(a, mid-1)+solve(mid+1,b);
	}
}

int main()
{
    scanf("%d", &t);
    while(t--){
    	scanf("%d", &n);
    	for(int i=1; i<=n; i++){
    		scanf("%d", &A[i]);
    		//position[A[i]]=i;
    		M[A[i]]=i;
    	}
    	for(int i=1; i<=4*n; i++){
    		tree[i]=0;
    	}
    	build(1, 1, n);
    	ll ans=solve(1, n);
    	printf("%lld\n", ans);
    }
    return 0;
}

#include <iostream>
#include <algorithm>
#include <set>
#define MAXN 100010

using namespace std;

int n,m;
set<pair<int,int> > s;
long long bit[MAXN];

void add(int x, long long val) {
    if (x == 0) return;
    for (; x < MAXN; x += x & -x) bit[x] += val;
}

long long get(int x) {
    long long res = 0;
    for (; x > 0; x -= x & -x) res += bit[x];
    return res;
}

int getc(int x) {
    auto it = s.lower_bound(make_pair(x+1,0));
    it--;
    return it->second;
}

long long f(int x) {
    return 1ll * x * (x+1) / 2;
}

int main() {
    ios::sync_with_stdio(0);
    cin >> n >> m;
    s.insert(make_pair(0,0));
    for (int i = 1; i <= n; i++) {
        int a;
        cin >> a;
        if (a != s.rbegin()->second) {
            int l = s.rbegin()->first;
            add(i-1, f(i-l));
            s.insert(make_pair(i,a));
        }
    }
    add(n, f(n+1 - s.rbegin()->first));
    s.insert(make_pair(n+1,0));
    s.insert(make_pair(n+2,0));

    while (m--) {
        int op,l,r,c;
        cin >> op >> l >> r;
        if (op == 0) {
            cin >> c;

            int cl = getc(l-1);
            int cr = getc(r+1);

            auto it = s.lower_bound(make_pair(l,0));
            int x = it->first;
            it--;
            add(x-1, -f(x - it->first));
            it++;
            while (it->first <= r+1) {
                int y = it->first;
                s.erase(it++);
                add(y-1, -f(y-x));
                x = y;
            }
            add(it->first - 1, -f(it->first - x));

            if (cl == c && cr == c) {
                it = s.lower_bound(make_pair(l,0));
                it--;
                l = it->first;

                it = s.lower_bound(make_pair(r+1,0));
                r = it->first-1;

                add(r, f(r-l+1));
            }
            else if (cl == c) {
                it = s.lower_bound(make_pair(l,0));
                it--;
                l = it->first;

                it = s.insert(make_pair(r+1,cr)).first;
                it++;
                x = it->first;
                add(x-1, f(x-r-1));

                add(r, f(r-l+1));
            }
            else if (cr == c) {
                it = s.insert(make_pair(l,c)).first;
                it--;
                x = it->first;
                add(l-1, f(l-x));

                it = s.lower_bound(make_pair(r+1,0));
                r = it->first-1;

                add(r, f(r-l+1));
            }
            else {
                it = s.insert(make_pair(l,c)).first;
                it--;
                x = it->first;
                add(l-1, f(l-x));

                it = s.insert(make_pair(r+1,cr)).first;
                it++;
                x = it->first;
                add(x-1, f(x-r-1));

                add(r, f(r-l+1));
            }
        }
        else if (op == 1) {
            long long ans = 0;

            auto it = s.lower_bound(make_pair(r+1,0));
            it--;
            int y = it->first;

            it = s.lower_bound(make_pair(l,0));
            int x = it->first;

            if (x > y) {
                ans = f(r-l+1);
            }
            else {
                ans += get(y-1) - get(x-1);
                ans += f(x-l);
                ans += f(r-y+1);
            }

            cout << ans << '\n';
        }

        /*
        for (auto it : s)
            cerr << "a: " << it.first << ' ' << it.second << endl;
        for (int i = 1; i <= n; i++)
            cerr << getc(i) << ' ';
        cerr << endl;
        for (int i = 1; i <= 8; i++)
            cerr << i << ": " << get(i) - get(i-1) << endl;
        */
    }
}

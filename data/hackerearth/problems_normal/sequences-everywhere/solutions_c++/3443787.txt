#include<bits/stdc++.h>
const double INF = 1e18;
using namespace std;
long long get_next(long long x)
{
	for (long long i = 1; i < x; i++)
	{
		if (x%i)
			return i;
	}
	return 1;
}
long long safe_mult(long long a, long long b)
{
	if (a == 0 || b == 0)
		return 0;
	if (INF / b <= a)
		return INF;
	return a*b;
}
long long gcd(long long a, long long b)
{
	while (a&&b)a>b ? a %= b : b %= a;
	return a + b;
}
long long lcm(long long a, long long b)
{
	long long q = gcd(a, b);
	a /= q;
	return safe_mult(a, b);
}
long long total[1000];
long long solve(long long x)
{
	for (int next_val = 1; next_val <= 50; next_val++)
	{
		total[next_val] = 0;
	}
	for (int next_val = 50; next_val >= 1; next_val--)
	{
		long long P = 1;
		for (int i = 1; i < next_val; i++)
		{
			P = lcm(P, i + 0ll);
		}
		if (x / P>0)
		{
			total[next_val] += x / P;
			for (int i = 1; i < next_val; i++)
			{
				total[i] -= total[next_val];
			}
		}
	}
	long long ans = 0;
	for (int i = 1; i <= 50; i++)
	{
		int cur = i;
		int cnt = 1;
		while (cur != 1)
		{
			cnt++;
			cur = get_next(cur);
		}
		ans += cnt*total[i];
	}
	if (x >= 2)
		ans -= 2;
	return ans;
}
int main(){
	ios_base::sync_with_stdio(0);
	long long a, b;
	cin >> a >> b;
	cout << solve(b) - solve(a - 1) << endl;
	return 0;
}
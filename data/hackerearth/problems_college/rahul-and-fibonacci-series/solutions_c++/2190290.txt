// 2015-07-24
#include <bits/stdc++.h>
#include <unordered_map>
#include <array>
#include <forward_list>
#include <unordered_set>
using namespace std;


#ifndef LOCAL
//#define LOCAL
#endif

#define SET_BIT(mask, index) (mask |= (1 << index))
#define TEST_BIT(mask, index) (mask & (1 << index))
#define CLEAR_BIT(mask, index) (mask &= ~(1 << index))
#define TOGGLE_BIT(mask, index) (mask ^= (1 << index))
const int INF = 1000000000;
const double EPS = 1.0e-11;
const int NO_VALUE = -1;
using ii = pair < int, int > ;
using ll = long long;

const double GR = 1.6180339887498948482;
const int MOD = 1000000007;

map<ll, ll> F;

ll f(ll n) {
    
	if (F.count(n)) {
        return F[n];
    }
	ll k = n / 2;
	if (n % 2 == 0) {
		return F[n] = (f(k)*f(k) + f(k-1)*f(k-1)) % MOD;
	} else {
		return F[n] = (f(k)*f(k+1) + f(k-1)*f(k)) % MOD;
	}
}


double nonFib(double n) {
    n += 1.0;
    double innerLog = log10(sqrt(5) * n) / log10(GR);
    
    double outerB = sqrt(5) * (innerLog + n) - 5 + (3.0 / n);
    double outerLog = log10(outerB) / log10(GR);
    return floor(n + outerLog - 2);
}


template <typename T>
T modpow(T base, T exp, T modulus) {
  base %= modulus;
  T result = 1;
  while (exp > 0) {
    if (exp & 1) result = (result * base) % modulus;
    base = (base * base) % modulus;
    exp >>= 1;
  }
  return result;
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w+", stdout);
#endif

    F[0] = F[1] = 1;

    int tc;
    cin >> tc;
    while (tc--) {
        double n;
        cin >> n;
        ll A = nonFib(n);
        ll B = f(n - 1) % MOD;
        ll res = modpow<ll>(A, B, MOD);
        res %= MOD;
        cout << res << "\n";
    }



    return 0;
}

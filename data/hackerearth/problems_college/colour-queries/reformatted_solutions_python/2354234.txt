'''
4 4 3
0 0 1 0
1 2 1 0
0 0 1 0
1 0 1 0
4 4 0
4 3 1
2 2 2

ans
4
16
16

'''


def input_number_line():
    return map(int, raw_input().split())


def input_number_grid(n):
    return [input_number_line() for i in range(0, n)]


def calculate_blacks(x, y, d, n, m, g, v):
    if v[x][y] == 1:
        return 0
    else:
        v[x][y] = 1
    ra, la, ua, da = 0, 0, 0, 0
    if (x < (n-1)) and (abs(g[x+1][y] - g[x][y]) <= d):
        ra = calculate_blacks(x+1, y, d, n, m, g, v)
    if (x > 0) and (abs(g[x-1][y] - g[x][y]) <= d):
        la = calculate_blacks(x-1, y, d, n, m, g, v)

    if (y < (m-1)) and (abs(g[x][y+1] - g[x][y]) <= d):
        ua = calculate_blacks(x, y+1, d, n, m, g, v)

    if (y > 0) and (abs(g[x][y-1] - g[x][y]) <= d):
        da = calculate_blacks(x, y-1, d, n, m, g, v)
    return 1 + la + ra + ua + da


def main():
    n, m, q = input_number_line()
    # print n, m, q
    g = input_number_grid(n)
    # print g[2][3]
    for i in range(0, q):
        x, y, d = input_number_line()
        v = [[0 for i in range(0, m)] for i in range(0, n)]
        ans = calculate_blacks(x-1, y-1, d, n, m, g, v)
        print ans


main()

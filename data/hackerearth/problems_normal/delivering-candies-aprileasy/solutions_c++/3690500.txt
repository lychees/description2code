#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i = 0;i < N;i++)
#define frep(i,a,b) for(int i = a;i <= b;i++)
#define pii pair<int , int>
#define pll pair<ll , ll>
#define vii vector<int>
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcount(x)
#define print(A,j,k) for(int ii=j;ii<=k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)
#define FILE freopen("inp.txt" , "r" , stdin);
#define ld long double

const int N = 1e5 + 5;
const int MOD = 1e9 + 7;

int n , m , s;
ll dist[N] , K[N];
int vis[N];
vector < pii > V[N];
ll sztree = 0 , sumdist = 0;
ll sumk = 0;

ll dijsktra(int source) {
	rep(i , n)
		dist[i + 1] = INF;
	dist[source] = 0;
	set< pll > S;
	set< pll > :: iterator it;
	S.insert( mp(0 , source) );

	while (S.size() > 0) {
		it = S.begin();
		int u = it -> ss;
		S.erase(it);
		if (vis[u])
			continue;

		for(int i = 0;i < V[u].size();i++) {
			int v = V[u][i].ff;
			if (vis[v] == 0 && dist[u] + V[u][i].ss < dist[v]) {
				dist[v] = dist[u] + V[u][i].ss;
				S.insert( mp(dist[v] , v) );
			}
		}

		vis[u] = 1;
	}
	// print(dist , 1 , n);
	ll ans = 0;
	frep(i , 1 , n) {
		if (dist[i] >= INF)
			continue;
		ans += K[i] * dist[i];
		sumk += K[i];
		sztree++;
	}
	return ans;
}

int main(int argc, char const *argv[])
{
	fast;

	// FILE;

	cin >> n >> m >> s;

	rep(i , n) {
		cin >> K[i + 1];
	}

	rep(i , m) {
		int a , b , c;
		cin >> a >> b >> c;
		V[a].pb( mp(b , c) );
		V[b].pb( mp(a , c) );
	}

	ll ans = dijsktra(s);
	
	// cout << "ans " << ans << '\n';
	// cout << "sztree " << sztree << '\n';

	frep(i , 1 , n) {
		if (dist[i] >= INF)
				cout << "0 ";
		else {
			ll v = ans; 
			v -= K[i] * dist[i];
			v += (sumk - K[i]) * (dist[i]);
			cout << v << ' ';
		}
	}
	cout << '\n';

	return 0;
}
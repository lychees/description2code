#include <bits/stdc++.h>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef map<int,int> mii;


// Input macros
#define s(n)                        cin >> n
#define sc(n)                       scanf("%c",&n)
#define ss(n)                       scanf("%s",n)
#define ll 							long long 				
// Useful constants
#define INF                         (int)1e9
#define EPS                         1e-9
// Useful hardware instructions
#define bitcount                    __builtin_popcount
#define gcd                         __gcd
// Useful container manipulation / traversal macros
#define forall(i,a,b)        		for(int i=a;i<b;i++)
#define sz(a) 						int((a).size())
#define pb 							push_back
#define all(c) 						(c).begin(),(c).end()
#define tr(c,i) 					for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define cpresent(c,x) 				(find(all(c),x) != (c).end())		// for set/maps
#define present(c,x) 				((c).find(x) != (c).end()) 		// for vectors
#define fill(a,v)                    memset(a, v, sizeof a)
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define checkbit(n,b)                ( (n >> b) & 1)
#define DREP(a)                      sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)               (lower_bound(all(arr),ind)-arr.begin())
#define fi 						     first
#define se 							 second
#define printA(arr,a,b) forall(i,a,b) cout << arr[i] << (i==(b-1)?'\n':' ')
#define printV(a) printA(a,0,a.size())
#define pf(n)	cout << n << endl;
#define pff(n)	cout << fixed << setprecision(10) << n << endl;


int main ()
{

int a; ll b;
s(a); s(b);
vi adj[a];
forall(i, 0, b){
	int x,y;
	s(x); s(y);
	if(!cpresent(adj[x],y))
		adj[x].pb(y);
	if(!cpresent(adj[y],x))
		adj[y].pb(x);
}

int lucky[a];
forall(i,0,a){
	lucky[i] = INF;
}
// fill(lucky,100000);
lucky[0] = 0;
queue <int> q;
q.push(0);
while(!q.empty()){
	int s = q.front();
	q.pop();
	// pf(s);
	forall(i,0,sz(adj[s])){
		int k = adj[s][i];
		// pf(k);
		if(lucky[k] > (lucky[s] + 1)){
			// pf("here");
			lucky[k] = lucky[s] + 1;
			q.push(k);
		}	
	}
}

forall(i,1,a){
	pf(lucky[i]);
}
return 0;
}
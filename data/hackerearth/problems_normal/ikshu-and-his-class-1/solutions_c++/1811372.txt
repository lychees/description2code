#include <iostream>
#include <cstdio>
#include <vector>
using namespace std;

#define LIMIT 1000000007
#define RANGE 100005
int N, K, G[RANGE];
int count, index;

int DFS(int source, vector<int> graph[RANGE], bool *visited){
	visited[source] = true;
	count++;
	for(int i=0; i < graph[source].size(); i++){
		int temp = graph[source][i];
			if(visited[temp] == false){
				DFS(temp, graph, visited);
				
			}
	}
}

int findComponent(vector<int> graph[RANGE], bool *visited){
	for(int i=0; i<=N; i++){
		if(visited[i] == false){
		 	DFS(i, graph, visited);
			G[index++] = count;
			count=0;
		}
	}
}


int main(){
	
	int  S,D;
	vector<int> graph[RANGE];
	bool visited[RANGE] = {0};
	long long int fact[RANGE]={0};
	long long int result = 1,t=0;
	
	fact[0] = 1;
	for(int i=1; i<=RANGE; i++){
		fact[i] = i*fact[i-1];
		fact[i] %= LIMIT;
	}
	
	cin>>N>>K;
	while(K--){
		cin>>S>>D;
		graph[S].push_back(D);
		graph[D].push_back(S);
	}
	 
	findComponent(graph, visited); 
	
	 //for(int i=0; i<=index; i++)
		 //cout<<G[i]<<endl;
	for(int i=0; i<=index; i++){
		if(G[i] != 1 && G[i] != 0){
			result *= fact[ G[i] ];
			result %= LIMIT;
		}
	}
	
	 cout<<result<<endl;
	return 0;
}

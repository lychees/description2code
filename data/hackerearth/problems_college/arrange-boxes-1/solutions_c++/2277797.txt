#include <iostream>
#include <vector>
#include <map>
#include <limits.h>

using namespace std;

typedef long long int Lint;

Lint countInv;

void Merge( vector<Lint>& A, Lint p, Lint q, Lint r ) {
	
	Lint n1, n2, i, j, k;
	
	n1 = q - p + 1;
	n2 = r - q;
	vector<Lint> L( n1 + 2 ), R( n2 + 2 );
	for( i = 1;i <= n1;i++ )
		L[ i ] = A[ p + i - 1 ];
	for( j = 1;j <= n2;j++ )
		R[ j ] = A[ q + j ];
	L[ n1 + 1 ] = R[ n2 + 1 ] = INT_MAX;
	
	i = 1;
	j = 1;
	
	for( k = p;k <= r;k++ ) {
		if( L[ i ] <= R[ j ] ) {
			A[ k ] = L[ i ];
			i++;
		}
		else {
			A[ k ] = R[ j ];
			j++;
			countInv += ( n1 - i + 1 );
		}
	}
}

void MergeSort( vector<Lint>& A, Lint p, Lint r ) {
	
	Lint q;
	
	if( p < r ) {
		q = ( p + r ) / 2;
		MergeSort( A, p, q );
		MergeSort( A, q + 1, r );
		Merge( A, p, q, r );
	}
}

int main()
{
	ios_base::sync_with_stdio( false );
	Lint t, n, i;
	
	cin >> t;
	
	while( t-- ) {
		
		cin >> n;
		vector<Lint> A( n ), B( n );
		map<Lint,Lint> M;
		countInv = 0;
		
		for( i = 0;i < n;i++ )
			cin >> A[ i ];
			
		for( i = 0;i < n;i++ ) {
			cin >> B[ i ];
			M[ i + 1 ] = B[ i ];
		}
		
		for( i = 0;i < n;i++ ) {
			A[ i ] = M[ A[ i ] ];
		}
		
		MergeSort( A, 0, n - 1 );
		cout << countInv << "\n";
		
	}
	return 0;
}

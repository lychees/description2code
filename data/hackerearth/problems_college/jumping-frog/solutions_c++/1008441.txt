#include <bits/stdc++.h>
using namespace std;
vector<int> graph[101];
int dist[100001];
int arr[100001];
bool seen[101]={false};
void BFS(int s,int e)
{
	memset(seen,false,sizeof(seen));
	memset(dist,-1,sizeof(dist));
	
	queue<int> q;
	q.push(s);
	dist[s]=0;
	while(!q.empty())
	{
		int indx=q.front();
		if(indx==e)
		break;
		q.pop();
		
		int node=arr[indx];
		if(seen[node]!=true)
		{
			for(int i=0;i<graph[node].size();i++)
			{
				int adj_ver=graph[node][i];
				if(dist[adj_ver]==-1)
				{
					dist[adj_ver]=dist[indx]+1;
					q.push(adj_ver);
				}
			}
			seen[node]=true;
		}
		if(indx>0 && dist[indx-1]==-1)
		{
			dist[indx-1]=dist[indx]+1;
			q.push(indx-1);
		}	
		
	}
}

int main()
{
    int n;
    scanf("%d",&n);
    
    for(int i=0;i<n;i++)    
    {
    	scanf("%d",&arr[i]);
    	graph[arr[i]].push_back(i);
    }
    int q;
    cin>>q;
    int s,m,e;
    
    while(q--)
    {
    	scanf("%d %d %d",&s,&m,&e);
    	BFS(s,m);
    	int sTOm=dist[m];
    	if(dist[m]==-1)
    	printf("-1\n");
    	else
    	{
    		BFS(m,e);
    		int mTOe=dist[e];
    		if(dist[e]==-1)
    		printf("-1\n");
    		else 
    		printf("%d\n",mTOe+sTOm);
    	}
    }   
    return 0;
}

#include<iostream>
#include<algorithm>
#include<vector>

using namespace std;

vector<pair<long long,pair<long long,long long> > >v;

long long p[50005];

long long findp(long long node){

    if(p[node] == node) return node;
    else return p[node] = findp(p[node]);

}

int main(){

    int t;
    cin >> t;
    while(t--){
        v.clear();
        long long n,m,i,a,b,c,maxm=0,root_a,root_b;
        cin >> n >> m;
        for(i=1;i<=m;i++){
            cin >> a >> b >> c;
            v.push_back(make_pair(c,make_pair(a,b)));
        }
        sort(v.begin(),v.end(),greater<pair<long long,pair<long long,long long> > >());
        for(i=1;i<=n;i++) p[i] = i;
        for(i=0;i<v.size();i++){
            a = v[i].second.first; b = v[i].second.second; c = v[i].first;
            root_a = findp(a); root_b = findp(b);
            if(root_a != root_b) {
                maxm += c;
                p[root_a] = root_b;
            }
        }
        cout << maxm << "\n";
    }
    return 0;





}

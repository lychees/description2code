//O(ElogV)
#include<bits/stdc++.h>
using namespace std;
#define ll long long 
const ll MAX = 2000000;
ll cost[1002][1002];
vector <ll> adj[MAX];
bool visited[MAX];

ll gcd(ll a,ll b)
{
    if(a==0)
        return b;
    return gcd(b%a,a);
}

void dfs(ll node, ll c)
{
    visited[node]=true;
    
    ll i;
    for(i=0;i<adj[node].size();i++)
        if(!visited[adj[node][i]]&&cost[node][adj[node][i]]<c)
        dfs(adj[node][i],c);
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    ll t,n,i,k,q,a,b,c,ans,j;
    
    cin>>t;
    while(t--){
    cin>>n>>k;
    
    for(i=1;i<=n;i++)
        adj[i].clear();
    ans=0;
    
    for(i=1;i<=k;i++)
    {
            cin>>a>>b>>c;
            adj[a].push_back(b);
            adj[b].push_back(a);
            cost[a][b]=c;
            cost[b][a]=c;
    }
    
    cin>>q;
    
    for(i=0;i<q;i++)
    {
        for(j=1;j<=n;j++)
        visited[j]=false;
    
        cin>>a>>b;
        dfs(a,cost[a][b]);
        
        if(!visited[b])
            ans++;
     }
    
    cout<<ans/gcd(ans,q)<<"/"<<q/gcd(ans,q)<<"\n";
    
    }
    return 0;
}
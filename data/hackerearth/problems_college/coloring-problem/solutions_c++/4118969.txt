#include <iostream>
#include <vector>

using namespace std;

#define N 4
/*
void printGraph(vector<int> const &graph)
{
	for each (auto ele in graph)
	{
		cout << ele << " ";
	}
}
*/
bool isSafe(vector<vector<int> > const &graph, int const &v, vector<int> const &color, int const &c)
{
	for (int i = 0; i < graph[v].size(); i++) {
		if (graph[v][i] && color[i] == c) return false;
	}
	return true;
}
bool colorGraph(vector<vector<int> > &graph, vector<int> &colors, int noOfColors, int curVertex)
{
	if (curVertex == graph[0].size()) return true;
	for (int i = 1; i <= noOfColors; i++) {
		if (isSafe(graph, curVertex, colors, i)) {
			colors[curVertex] = i;
			if (colorGraph(graph, colors, noOfColors, curVertex + 1)) return true;
			colors[curVertex] = 0;
		}
	}
	return false;
}

void colorGraph(vector<vector<int> > graph, int noOfColors)
{
	vector<int> colors(graph.size(), 0);
	if (colorGraph(graph, colors, noOfColors, 0)) /*printGraph(colors)*/ cout << "BICOLORABLE." << endl;
	else cout << "NOT BICOLORABLE."<< endl;
	return;
}

void print_graph(vector<vector<int> > graph)
{
	cout << "   GRAPH    " << endl;
	for (int i = 0; i < graph.size(); i++) {
		for (int j = 0; j < graph[0].size(); j++) {
			cout << graph[i][j] << "  ";
		}
		cout << endl;
	}
}

int main()
{
	int noOfColors = 2;
	int T;
	cin >> T;
	for(int i = 0; i < T; i++) {
		int n, edge, a,b;
		cin >> n;
		vector< vector<int> > graph(n, vector<int>(n, 0));
		cin >> edge;
		for(int j = 0; j < edge; j++) {
			cin >> a >> b;
			graph[a][b] = 1;
			graph[b][a] = 1;
		}
		colorGraph(graph, noOfColors);
	}

	
	//print_graph(graph);


	//cin.ignore();
	return 0;
}
/* no greedy easy life */

#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cassert>
#include <cstdlib>
#include <queue>
#include <ctime>

#define pii pair<int, int>
  
#define pb push_back
#define mp make_pair
  
#define f first
#define s second
  
using namespace std;

typedef long long ll;
typedef double ld;

typedef vector<int> vi;

const double EPS = 1e-9;
const double PI = acos(-1);
  
const int MOD = (int) 1e7 + 7;
const int MAXN = (int) 2e3 + 50;

int n, x;
int dp[MAXN][MAXN];

vector<int> small, large;

void add(int &x, int y) {
  x += y;
  if (x >= MOD)
    x -= MOD;
}

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  //freopen("out", "w", stdout);
  #endif

  //ios_base::sync_with_stdio(0);

  cin >> n >> x;
  for (int i = 1; i <= n; i++) {
    int foo;
    scanf("%d", &foo);
    if (foo <= 1024)
      small.pb(foo);
    else
      large.pb(foo);
  }
  dp[0][0] = 1;
  for (int i = 0; i < small.size(); i++) {
    for (int s = 0; s <= 2048; s++) {
      add(dp[i + 1][s], dp[i][s]);
      add(dp[i + 1][s ^ small[i]], dp[i][s]);
    }
  }
  int ans = 0;
  for (int mask = 0; mask < (1 << large.size()); mask++) {
    int s = 0;
    for (int i = 0; i < large.size(); i++)
      if ((mask >> i) & 1)
        s ^= large[i];
    add(ans, dp[small.size()][x ^ s]);
  }
  printf("%d\n", ans);
  return 0;
}
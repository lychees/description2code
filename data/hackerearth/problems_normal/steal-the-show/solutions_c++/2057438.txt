#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_pbds;

typedef long long LL;

typedef tree<
    int,
    null_type,
    less<int>,
    rb_tree_tag,
    tree_order_statistics_node_update>
ordered_set;
//find_by_order
//order_of_key

#define FO(i,a,b) for (int i = (a); i < (b); i++)

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );
#define ALL(v) v.begin(),v.end()

#define X first
#define Y second
#define MP make_pair

typedef pair<int,int> pint;
typedef map<int,int> mint;

void show() {cout<<'\n';}
template<typename T,typename... Args>
void show(T a, Args... args) { cout<<a<<" "; show(args...); }
template<typename T>
void show_c(T& a) { for ( auto &x:a ){ cout<<x<<" ";}cout<<endl;  }

#define SIZE 21
int arr[SIZE];




int dp[1<<21][22];
bool vis[1<<21][22];
int n;
int save;

int func( int state ,int prv,int taken ){
    //show( taken ,arr[prv] );
    if ( taken == n+1 ){
        //show( abs( arr[prv]-save ) );
        return abs( arr[prv]-save );
    }

    int &ret = dp[state][prv];
    if ( vis[state][prv] )return ret;
    vis[state][prv] = true;

    ret = (1<<29);

    if ( taken == n/2 ){
        ret = min( ret ,abs( arr[n]-arr[prv] )+ func( state | (1<< (n) ) , n,taken+1 ) );
    }else{
        for (int i=0;i<n;++i){
            if ( ( state & (1<<i) ) == 0 ){
                ret = min( ret , abs( arr[prv]-arr[i] ) + func( state | (1<<i) , i,taken+1 ) );
            }
        }
    }
    return ret;
}

int a,b,c;

int main(){

  

    scanf("%d %d %d",&b,&a,&c);

    scanf("%d",&n);
    for (int i=0;i<n;++i){
        scanf("%d",&arr[i]);
    }
    arr[n+1] = a;
    arr[n] = b;
    save = c;
    int ans = func( 0,n+1,0 );

    arr[n+1] = c;
    arr[n] = b;
    save = a;
    CLR(vis);
    ans = min( ans ,func( 0,n+1,0 ) );

    printf("%d\n",ans);
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
 
#define ll long long
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define si(a)     scanf("%d", &a)
#define sl(a)     scanf("%lld", &a)
#define pi(a)     printf("%d", a)
#define pl(a)     printf("%lld", a)
#define pm(str)   printf("%s\n",str)
#define pn        printf("\n")
int n;
vector<int> a, p;
 
int dp[12][1<<12][12][12];
bool exist[12][1<<12][12][12];
 
int solve(int i,  int mask, int p1, int p2)
{
	if (i == n) {
		return 0;
	}
 	if (!exist[i][mask][p1][p2]) {		
		int answer = INT_MAX;
		for (int j = 0; j < n; j++) {
			if (!(mask & (1 << j))) {
				int cost = (a[p1] ^ a[p2] ^ a[j]) * p[i];
				answer = min(answer,  cost + solve(i+1, (mask | (1 << j)), p2, j));
			}
		}
		dp[i][mask][p1][p2] = answer;
		exist[i][mask][p1][p2] = true;
	}
 
	return dp[i][mask][p1][p2];
}
 
int main()
{
	int t;
	cin >> t;
	while (t--) {
		memset(dp, 0, sizeof(dp));
		memset(exist, 0, sizeof(exist));
		
		cin >> n;
		a.resize(n);
		for (int i = 0; i < n; i++) {
			cin >> a[i];
		}
		p.resize(n);
		for (int i = 0; i < n; i++) {
			cin >> p[i];
		}
		int answer = INT_MAX;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (i != j) {
					int mask = 0;
					mask |= (1 << i);
					mask |= (1 << j);
					answer = min(answer, solve(2, mask, i, j));
				}
			}
		}
		cout << answer << endl;
	}
}
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define sd(x) scanf("%d",&x)
#define sfd(x) scanf("%d",&x)
#define pf printf

#define LL long long
#define ll long long
#define LD long double
#define ld long double
#define PB push_back
#define pb push_back
#define MP make_pair
#define mp make_pair
#define F first
#define S second

typedef pair<int,int> PII;
typedef vector<int> VI;

#define pii pair<int,int>
#define vi vector<int>
#define fr(i,n) for( int i=0; i<=n; i++)
#define frm(i,m,n) for(int i=m; i<=n; i++)
#define maxn 2000
#define mod 1000000007

LL getpow(LL a,LL b){
    LL ret=1LL;
    LL inter=a;
    while(b){
        if(b&1){
            ret *= inter;
            ret %= mod;
        }
        inter *= inter;
        inter %= mod;
        b = b>>1;
    }
    return ret;
}
int n;
int arr[maxn];
int ans[maxn][maxn];
void in()
{
   sd(n);
   for(int i=0;i<n;i++)
   {
      sd(arr[i]);
   }
   int med = 0;
   for(int i=0;i<n;i++)
   {
      priority_queue <int > pqmax,pqmin;
      pqmin.push(arr[i]);
      ans[i][i] = arr[i];
      for(int j=i+1;j<n;j++)
      {
         med = pqmin.top();
         if(arr[j]>med)
         {
            pqmax.push(-arr[j]);
         }
         else
         {
            pqmin.push(arr[j]);
         }
         if(pqmax.size()> pqmin.size())
         {
            med = -pqmax.top();
            //cout<<med<<endl;
            pqmax.pop();
            pqmin.push(med);
         }
         else if(pqmax.size()+1<pqmin.size())
         {
            med = pqmin.top();
            pqmin.pop();
            pqmax.push(-med);
         }
         ans[i][j] = pqmin.top();
      }
   }
   int q,a,b;
   sd(q);
   while(q--)
   {
      sd(a);sd(b);
      a--;b--;
      printf("%d\n",ans[a][b]);
   }
}

int main()
{
   int t = 1;
   while(t--){
    in();
   }
   return 0;
}

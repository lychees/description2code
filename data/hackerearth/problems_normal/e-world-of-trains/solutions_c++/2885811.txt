
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int MX = 3500;
const int MOD = (1e9) +7;
#define REP(i, n) for(int i = 0; i < (n); i++)

int n, l, T, k;
int dp[MX][MX][2];

int quickpow(int a, int n) {
	int res = 1;
	while(n) {
		if(n&1) {
			res *= a;
			res%=MOD;
		}
		a*=a;
		a%=MOD;
		n/=2;
	}
	return res;
}
int zero = 0;
int& getdp(int a, int b, int c) {
	if(a < 0 || b < 0 || c < 0)
		return zero;
	return dp[a][b][c];
}



main() {
	scanf("%lld %lld %lld %lld", &n, &l, &T, &k);
	REP(i, l) {
		dp[i][0][0] = quickpow(k, i);
	}
	for(int i = l; i <= n; i++) {
		REP(t, T+1) {
			dp[i][t][1] = getdp(i-1, t-1, 1) + (k-1)*(getdp(i-l, t-1, 1) + getdp(i-l, t-1, 0));
			dp[i][t][1] %= MOD;

			if(i == l) {
				if(t==0)
					dp[i][t][0] = quickpow(k, l) - k;
				if(t==1)
					dp[i][t][1] = k;
				dp[i][t][0] %= MOD;
			} else {
				dp[i][t][0] = (k-1)*(getdp(i-1, t, 0) +getdp(i-1, t, 1) - getdp(i-l, t, 0) - getdp(i-l, t, 1)) + getdp(i-1, t, 0);
				dp[i][t][0] %= MOD;
			}
		}
	}
	int res = dp[n][T][0] + dp[n][T][1];
	res %= MOD;
	res += MOD;
	res %= MOD;
	printf("%lld\n", res);
	/*
	REP(i, n+1)
		REP(j, T+1)
			REP(x, 2) {
				printf("%lld %lld %lld = %lld\n", i, j, x, dp[i][j][x]);
			}
			*/
}
/*
7
0 0 0 = 1
0 0 1 = 0
0 1 0 = 0
0 1 1 = 0
1 0 0 = 2
1 0 1 = 0
1 1 0 = 0
1 1 1 = 0
2 0 0 = 2
2 0 1 = 0
2 1 0 = 0
2 1 1 = 1
3 0 0 = 2
3 0 1 = 0
3 1 0 = 1
3 1 1 = 2
4 0 0 = 2
4 0 1 = 0
4 1 0 = 3
4 1 1 = 2
5 0 0 = 2
5 0 1 = 0
5 1 0 = 5
5 1 1 = 2
*/

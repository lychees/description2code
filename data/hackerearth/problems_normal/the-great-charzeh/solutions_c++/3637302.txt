#include <bits/stdc++.h>

using namespace std;

const int N = 605;

int n, m;
int a[N], f[N];
bool vis[N];
int matched[N];
vector<int> V[N];

bool DFS(int w) {
    vis[w] = true;
    for (int i = 0; i < V[w].size(); i++) {
        int u = V[w][i];
        if (!matched[u] || (!vis[matched[u]] && DFS(matched[u]))) {
            matched[u] = w;
            matched[w] = u;
            return true;
        }
    }
    return false;
}

bool good(int w) {
    for (int i = 1; i <= n; i++) {
        V[i].clear();
        matched[i] = matched[i + n] = false;
        for (int j = 1; j <= n; j++) {
            if (f[a[i] + j] <= w) {
                V[i].push_back(j + n);
            }
        }
    }

    int match = 0;
    bool augmentingPath = true;

    while (augmentingPath) {
        augmentingPath = false;
        for (int i = 1; i <= n; i++) {
            vis[i] = false;
        }

        for (int i = 1; i <= n; i++) {
            if (!matched[i] && !vis[i] && DFS(i)) {
                match++;
                augmentingPath = true;
            }
        }
    }

    return match == n;
}

int main() {

    scanf("%d %d", &n, &m);
    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
    }
    for (int i = 1; i <= n + m - 1; i++) {
        scanf("%d", &f[i]);
    }

    int low = 1;
    int high = 1e9;
    int ans = high;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (good(mid)) {
            high = mid - 1;
            ans = mid;
        } else {
            low = mid + 1;
        }
    }

    printf("%d\n", ans);

    return 0;
}
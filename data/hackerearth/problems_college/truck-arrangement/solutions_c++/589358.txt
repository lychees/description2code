#include <stdio.h>
#include <iostream>
#include <algorithm>
using namespace std;

void mergeArrays(int * sortedArray, int size1, int size2 ,int * indexArray)
{
	int counter = 0;
	int counter1 = 0;
	int counter2 = size1;
	int temp[size1 + size2];
	int tempIndexArray[size1 + size2];
	
	while(counter1<size1 && counter2<size1+size2)
	{
		if (sortedArray[counter1] > sortedArray[counter2])
		{
			temp[counter] = sortedArray[counter2];
			tempIndexArray[counter] = indexArray[counter2];
			counter++;
			counter2++;
		}
		else
		{
			temp[counter] = sortedArray[counter1];
			tempIndexArray[counter] = indexArray[counter1];
			counter++;
			counter1++;
		}
	}
	while(counter1<size1)
	{
		temp[counter] = sortedArray[counter1];
		tempIndexArray[counter] = indexArray[counter1];
		counter++;
		counter1++;
	}
	while(counter2<size1+size2)
	{
		temp[counter] = sortedArray[counter2];
		tempIndexArray[counter] = indexArray[counter2];
		counter++;
		counter2++;
	}
	for(int i = 0;i <counter;i++)
	{
		sortedArray[i] = temp[i];
		indexArray[i] = tempIndexArray[i];
	}
	return;
}


void internalSort(int * UnsortedArray, int size, int * indexArray)
{
	int * array1, *array2, *mergedArray;
	if (size > 1)
	{
		internalSort(UnsortedArray,size/2,indexArray);
		internalSort(UnsortedArray+size/2,size-size/2,indexArray+size/2);
		mergeArrays(UnsortedArray, size/2, size-size/2,indexArray);
	}
	
	return;
}


int main()
{
	int testCases;
	scanf("%d",&testCases);
	int nTrucks[testCases];
	int * truckSequence[testCases];
	
	for(int i=0;i<testCases;i++)
	{
		scanf("%d",&nTrucks[i]);
		truckSequence[i] = new int[nTrucks[i]];
		for(int j=0;j<nTrucks[i];j++)
		{
			scanf("%d",&truckSequence[i][j]);
		}
	}
	
	for(int k=0;k<testCases;k++)
	{
		int tempIndArray [nTrucks[k]] ;
		for (int i=0;i<nTrucks[k];i++)
		{
			tempIndArray[i]=i;
		}
		internalSort(truckSequence[k],nTrucks[k],tempIndArray);
		
		int maxMovement = 0;
		
		for (int i=0;i<nTrucks[k];i++)
		{
			maxMovement = max(maxMovement,abs(i-tempIndArray[i]));
		}
		cout << maxMovement << endl;
	}
}

#include<bits/stdc++.h>
 
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define len(s) s.length()
#define forp(i,a,b) for( i=a;i<=b;i++)
#define rep(i,n)    for( i=0;i<n;i++)
#define ren(i,n)    for( i=n-1;i>=0;i--)
#define forn(i,a,b) for( i=a;i>=b;i--)
#define all(v) v.begin(),v.end()
#define b(v) v.begin()
#define e(v) v.end()
#define mem(n,m) memset(n,m,sizeof(n))
#define lb lower_bound
#define ub upper_bound
#define pii pair<int,int>
#define pll pair<long,long>
#define vii vector<int>
#define vll vector<long long>
#define gl(cin,s)  getline(cin,s);
#define bitc(n) __builtin_popcountll(n)
#define present(s,x) (s.find(x) != s.end()) 
#define cpresent(s,x) (find(all(s),x) != s.end()) 
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
 
#define boost ios_base::sync_with_stdio(0)
#define MOD 1000000007
#define EPSILON 1e-9
#define PI 3.14159265358979323846
#define SIZE 100005
 
typedef long long  ll;
typedef unsigned long long ull;
typedef long double  ldo;
typedef double  db ;
using namespace std;
 
typedef long long  ll;
typedef unsigned long long ull;
typedef long double  ldo;
typedef double  db ;
using namespace std;
int main()
{  	
	//freopen("route.in","r",stdin);
	//freopen("route.out","w",stdout);
	boost;
	ll n,m,i,a,b,x,src;
	ll dist[SIZE];
	ll cand[SIZE];
	multiset< pair < ll,ll > > s;
	cin>>n>>m>>src;
	forp(i,1,n)
	cin>>cand[i];
	vector< pair<ll,ll> > arr[n+1];
    rep(i,SIZE-1)
    dist[i]=1e17+7;
	forp(i,1,m)
	{
		cin>>a>>b>>x;
		arr[a].pb(mp(b,x));
		arr[b].pb(mp(a,x));
	}
	dist[src]=0;
	s.insert(mp(dist[src],src));
	while(!s.empty())
	{
		b=(*(s.begin())).second;
		s.erase(s.begin());
		for(i=0;i<arr[b].size();i++)
		{
			a=arr[b][i].first;
			x=arr[b][i].second;
			if(dist[a]>dist[b]+x)
			{
				dist[a]=dist[b]+x;
				s.insert(mp(dist[a],a));
			}
			}
	}
	ll tdist = 0;
    ll people = 0;
    for ( i = 1; i <= n; ++i)
        if (dist[i] < 1e17+7) {
            people += cand[i];
            tdist += dist[i] * cand[i];
        }
    for ( i = 1; i <= n; ++i) {
        if (dist[i] < 1e17+7) {
            long long ret = dist[i] * (people - cand[i]) + tdist - dist[i] * cand[i];
            printf("%lld ", ret);
        }
        else
            printf("0 ");
    }
	return 0;
}
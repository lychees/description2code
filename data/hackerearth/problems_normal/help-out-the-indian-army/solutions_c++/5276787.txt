#include <iostream>
using namespace std;

long long arr1[100000][2];
void Swap(long long arr[][2], long long i, long long j)
{
	long long temp1 = arr[i][0];
	long long temp2 = arr[i][1];
	arr[i][0] = arr[j][0];
	arr[i][1] = arr[j][1];
	arr[j][0] = temp1;
	arr[j][1] = temp2;
}

void QuickSortArray(long long arr[][2], long long start, long long end)
{

	long long i = start;
	long long j = end;
	long long mid = arr[start + (end - start) / 2][0];

	while (i <= j)
	{
		//finding the index from left on which value is gretaer than mid value (pivot value)
		while (arr[i][0]<mid)
			i++;
		while (arr[j][0]>mid)
			j--;

		if (i <= j)
		{
			Swap(arr, i, j);
			i++;
			j--;
		}
	}
	if (start < j)
		QuickSortArray(arr, start, j);
	if (end > i)
		QuickSortArray(arr, i, end);

}

int main()
{
long long n, s, e;
		cin >> n >> s >> e;
		 long long unguardedDist = 0;
		for (long long i = 0; i < n; i++){
			long long temp1, temp2;
			cin >> temp1;
			cin >> temp2;
			arr1[i][0] = temp1 - temp2;
			arr1[i][1] = temp1 + temp2;
		}
		QuickSortArray(arr1, 0, n - 1);
		long long point = 0;
		int flagS = 0, flagE = 0;
		if (s >= arr1[n - 1][1])
			unguardedDist += e - s;
		while (true && point<n && !(s >= arr1[n - 1][1]))
		{
			flagE = 0; flagS = 0;
			if (s>= e)
				break;
				if (e <= arr1[point][0])
			{
				unguardedDist += e - s;
				break;
			}
			while (true)
			{
				if (s < arr1[point][0])
				{
					flagS = 1;
					break;
				}
				if (s > arr1[point][0])
				{
					if (s < arr1[point][1])
					{
						flagE = 1;
						break;
					}
					else
						point++;
				}
			}
			if (flagS == 1)
			{
				unguardedDist+= arr1[point][0] - s;
			}
			s = arr1[point][1];
			point++;
		}
		if (point >= n && s <= e)
			unguardedDist += e - s;
		cout << unguardedDist;
   
   
   return 0;
}

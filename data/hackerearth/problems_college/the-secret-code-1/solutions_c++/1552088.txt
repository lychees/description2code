#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<random>
using namespace std;

int t;

int dp[9][2][2][2];
bool use[9][2][2][2];
string l;
string r;
int dfs(int a, int b, int c,int zero=true){  //b=false,l?? c=false r??
	if (a == l.size()){
		return 1;
	}
	if (use[a][b][c][zero]){
		return dp[a][b][c][zero];
	}
	use[a][b][c][zero] = true;
	int mint = 0;
	if (b == false){
		mint = l[a] - '0';
	}
	int maxt = 9;
	if (c == false){
		maxt = r[a] - '0';
	}
	if (zero&&mint <= 0 && 0 <= maxt){
		bool bb = b;
		if (bb == false){
			if (mint != 0){
				bb = true;
			}
		}
		bool aa = c;
		if (aa == false){
			if (maxt != 0){
				aa = true;
			}
		}
		dp[a][b][c][zero] += dfs(a + 1, bb, aa);
	}
	if (mint <= 3 && 3 <= maxt){
		bool bb = b;
		if (bb == false){
			if (mint != 3){
				bb = true;
			}
		}
		bool aa = c;
		if (aa == false){
			if (maxt != 3){
				aa = true;
			}
		}
		dp[a][b][c][zero] += dfs(a + 1, bb, aa,false);
	}
	if (mint <= 5 && 5 <= maxt){
		bool bb = b;
		if (bb == false){
			if (mint != 5){
				bb = true;
			}
		}
		bool aa = c;
		if (aa == false){
			if (maxt != 5){
				aa = true;
			}
		}
		dp[a][b][c][zero] += dfs(a + 1, bb, aa,false);
	}
	return dp[a][b][c][zero];
}
int main(){
	scanf("%d", &t);
	while (t--){
		memset(dp, 0, sizeof(dp));
		memset(use, 0, sizeof(use));
		cin >> l;
		cin >> r;
		int sa = r.size() - l.size();
		for (int i = 0; i < sa; i++){
			l.insert(0, "0");
		}
		int ans=dfs(0, 0, 0);
		printf("%d\n", ans);
	}
	return 0;
}
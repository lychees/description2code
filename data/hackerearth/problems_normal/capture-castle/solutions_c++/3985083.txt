#include<bits/stdc++.h>
#include<vector>
#include<list>
#include<utility>
#include<map>
#include<set>
#include<stack>
#include<queue>
#define mod 1000000007
#define ll long long
#define INF (1<<28)
using namespace std;
set< pair < int,pair < int,int > > > s[1005][1005];
int dist[1005][1005];
int N,M;
int arr[1005][1005];

bool vis[1005][1005];		
void dijkstra()
{
	
		priority_queue <pair <int,pair<int,int> > > PQ;
		memset(dist,-1,sizeof(dist));
		dist[1][1]=arr[1][1];
		PQ.push(make_pair((-1)*arr[1][1],make_pair(1,1)));
		int X,Y,te;
		cin>>X>>Y>>te;
		memset(vis,0,sizeof(vis));
		while(!PQ.empty())
		{
			pair<int,pair<int,int> > v=PQ.top();
			PQ.pop();
			v.first*=-1;
			//cout<<v.second.first<<","<<v.second.second<<"<--ele considered now"<<endl;
			if(v.second.first==X && v.second.second==Y)
				break;
			if(vis[v.second.first][v.second.second]==false)
			{
				vis[v.second.first][v.second.second]=true;
				for(set< pair<int,pair<int,int> > >::iterator it=s[v.second.first][v.second.second].begin();it!=s[v.second.first][v.second.second].end();it++)
				{
					int newdist=v.first+(*it).first;//cout<<(*it).second.first<<","<<(*it).second.second<<"-"<<newdist<<"<<-ele pushed"<<endl;
					if(dist[(*it).second.first][(*it).second.second]==-1)
					{//cout<<(*it).second.first<<","<<(*it).second.second<<"-"<<newdist<<"<<-ele pushed"<<endl;
						dist[(*it).second.first][(*it).second.second]=newdist;
						PQ.push(make_pair((-1)*newdist,make_pair((*it).second.first,(*it).second.second)));
					}
					if(dist[(*it).second.first][(*it).second.second]>newdist)
					{//cout<<(*it).second.first<<","<<(*it).second.second<<"-"<<newdist<<"<<-ele pushed"<<endl;
							dist[(*it).second.first][(*it).second.second]=newdist;
							PQ.push(make_pair((-1)*newdist,make_pair((*it).second.first,(*it).second.second)));
					}
				}
			}
		}
		if(dist[X][Y]>te)
		cout<<"NO"<<endl;
		else 
		cout<<"YES"<<endl<<te-dist[X][Y]<<endl;
	
}
		
int main()
{
	
	int i,j;//cout<<"here"<<endl;
	
	
	int T;
	cin>>T;//cout<<"1."<<endl;
	while(T--)
	{
	//	int N,M;
		cin>>N>>M;
	//	int arr[N+1][M+1];
		for(i=1;i<1005;i++)
		{
			for(j=1;j<1005;j++)
			s[i][j].clear();
		}
	//	cout<<"here"<<endl;
		for(i=1;i<=N;i++)
		{
			for(j=1;j<=M;j++)
			cin>>arr[i][j];
		}
	//	cout<<"2."<<endl;
		for(i=1;i<=N;i++)
		{
			for(j=1;j<=M;j++)
			{
				if(i-1>=1)
				s[i][j].insert(make_pair(arr[i-1][j],make_pair(i-1,j)));
				if(j-1>=1)
				s[i][j].insert(make_pair(arr[i][j-1],make_pair(i,j-1)));
				if(i+1<=N)
				s[i][j].insert(make_pair(arr[i+1][j],make_pair(i+1,j)));
				if(j+1<=M)
				s[i][j].insert(make_pair(arr[i][j+1],make_pair(i,j+1)));
			//	for(set< pair<int,pair<int,int> > >::iterator it=s[i][j].begin();it!=s[i][j].end();it++)
			//			cout<<(*it).first<<"@"<<(*it).second.first<<","<<(*it).second.second<<"-";
			//		cout<<"<--set of ele"<<i<<","<<j<<endl;	
			}
		}
		dijkstra();
	}
	





	return 0;
}

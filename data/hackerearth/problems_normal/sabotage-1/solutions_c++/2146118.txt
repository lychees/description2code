#include <stdio.h>
#include <algorithm>
#include <vector>

#define NMAX 100001

int edge[NMAX][3];
int N, M, i, j, k;
int parent[NMAX], size[NMAX];

int Find(int x) {
	while (parent[x]) x = parent[x];
	return x;
}

int Union(int x, int y) {
	int tx = Find(x), ty = Find(y);
	if (tx == ty) return 0;
	if (size[tx] >= size[ty]) {
		size[tx] += size[ty];
		parent[ty] = tx;
	} else {
		size[ty] += size[tx];
		parent[tx] = ty;
	}
	return 1;
}

int main() {
//	freopen("y.txt", "r", stdin);
	scanf("%d %d", &N, &M);
	for (k = 1; k <= M; k++) {
		scanf("%d %d", &edge[k][0], &edge[k][1]);
		edge[k][2] = 0;
	}
	for (i = 1; i <= N; i++) {
		parent[i] = 0;
		size[i] = 1;
	}
	for (k = M; k >= 1; k--) {
		if (Union(edge[k][0], edge[k][1])) edge[k][2] = 1;
	}
	printf("%d\n", M - N + 1);
	for (k = 1; k <= M; k++)
		if (!edge[k][2]) printf("%d\n", k);
	return 0;
}

#include <iostream>
using namespace std;
#define MAX 1000000001
#define MOD 1000000007

const double inverseSqrt5 = 0.44721359549995793928183473374626;
const double phi = 1.6180339887498948482045868343656;
long long modulo(long long a,long long b){
    long long x=1,y=a; // long long is taken to avoid overflow of intermediate results
    while(b > 0){
        if(b%2 == 1){
            x=(x*y)%MOD;
        }
        y = (y*y)%MOD; // squaring the base
        b /= 2;
    }
    return x%MOD;
}
void multiply(long long F[2][2], long long M[2][2]);
 
void power(long long F[2][2], int n);
 
/* function that returns nth Fibonacci number */
long long fib(int n)
{
  long long F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-1);
  return (F[0][0])%MOD;
}
 
/* Optimized version of power() in method 4 */
void power(long long F[2][2], int n)
{
  if( n == 0 || n == 1)
      return;
  long long M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2);
  multiply(F, F);
 
  if (n%2 != 0)
     multiply(F, M);
}
 
void multiply(long long F[2][2], long long M[2][2])
{
  long long x =  ((F[0][0]*M[0][0])%MOD + (F[0][1]*M[1][0])%MOD)%MOD;
  long long y =  ((F[0][0]*M[0][1])%MOD + (F[0][1]*M[1][1])%MOD)%MOD;
  long long z =  ((F[1][0]*M[0][0])%MOD + (F[1][1]*M[1][0])%MOD)%MOD;
  long long w =  ((F[1][0]*M[0][1])%MOD + (F[1][1]*M[1][1]%MOD))%MOD;
 
  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}
int main()
{
    int t;
    cin >> t;
//  preprocess();
    long long n;
    while(t--)
    {
        cin >> n;
        if(n <=4 )
         {
         cout << 1 << endl;
         continue;
         }
         n = (n+1)/2;
         long long fib_n = fib(n);
         long long res = fib_n*fib_n%MOD;
         cout << res << endl;
    }
    return 0;
}

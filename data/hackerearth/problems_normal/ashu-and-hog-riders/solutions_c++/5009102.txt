#include<bits/stdc++.h>
using namespace std;

#define ll long long
ll mat[1003][1003];
ll vis[1003][1003];

bool isSafe(ll i,ll j,ll n)
{
    if(i<n && i>=0 && j<n && j>=0 && mat[i][j] && !vis[i][j])
        return true;
    else
        return false;
}

ll bfs(ll row,ll col,ll n)
{
    ll res,i,j;
    vis[row][col]=1;
    queue<pair<ll,ll> > q;
    q.push(make_pair(row,col));
    res=0;

    while(!q.empty())
    {
        res++;
        pair<ll,ll> temp=q.front();
        i=temp.first;
        j=temp.second;
        q.pop();

        if(isSafe(i+1,j,n))
            {
                vis[i+1][j]=1;
                q.push(make_pair(i+1,j));
            }
        if(isSafe(i-1,j,n))
        {
              vis[i-1][j]=1;
            q.push(make_pair(i-1,j));
        }

        if(isSafe(i,j+1,n)){
            vis[i][j+1]=1;
            q.push(make_pair(i,j+1));
        }

        if(isSafe(i,j-1,n))
        {
            vis[i][j-1]=1;
            q.push(make_pair(i,j-1));
        }


    }
    return res;
}

int main()
{
    ll n,i,j,ans,curr;
   cin>>n;
   for(i=0;i<n;i++)
    for(j=0;j<n;j++)
      cin>>mat[i][j];

   for(i=0;i<n;i++)
    for(j=0;j<n;j++)
      vis[i][j]=0;


   ans=0;
   for(i=0;i<n;i++)
   {
       for(j=0;j<n;j++)
       {
           if(mat[i][j] && !vis[i][j])
           {
               curr=bfs(i,j,n);
               ans=max(ans,curr);
           }
       }

   }

   cout<<ans;


}

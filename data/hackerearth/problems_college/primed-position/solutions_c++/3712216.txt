#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define inf 0x7fffffff
#define SCD(t) scanf("%d",&t)
#define SCLD(t) scanf("%ld",&t)
#define SCLLD(t) scanf("%lld",&t)
#define SCC(t) scanf("%c",&t)
#define SCS(t) scanf("%s",t)
#define SCF(t) scanf("%f",&t)
#define SCLF(t) scanf("%lf",&t)
#define pr pair<int,int>
#define mp(a,b) make_pair(a,b)
#define pb push_back
#define fr first
#define sc second
#define mset(arr,val) memset(arr,val,sizeof(arr));

const int MAX = 2000005;
const int MOD = 1e9+7;

std::vector< int > prl;
bool prime[MAX];
 
void SieveOfEratosthenes(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    memset(prime, true, sizeof(prime));
 
    for (int p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (int i=p*2; i<=n; i += p)
                prime[i] = false;
        }
    }
 
    // Print all prime numbers
    for (int p=2; p<=n; p++)
       if (prime[p])
          prl.pb(p);
}

int main(void){
    // freopen("input.txt","r",stdin);
    SieveOfEratosthenes(MAX);
    std::vector< ll > nlist;
    int sz = prl.size();
    for(int i =0;i<MAX && prl[i] < sz ;i++){
        nlist.pb(prl[prl[i]-1]);
    }
    // int sz2 = nlist.size();
    // for(int i =sz2-1;i>=0;i--){
    //     if(nlist[sz2-1] < 0)
    //     cout<<nlist[i-1]<<endl;
    // }
    int t;
    SCD(t);
    while(t--){
        ll n,m;
        SCLLD(n);
        SCLLD(m);
        ll ans = (nlist[n-1]*nlist[m-1])%MOD;
        printf("%lld\n",ans );
    }
}

#include <algorithm>
#include <numeric>
#include <functional>

#include <iostream>
#include <iomanip>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cassert>

#include <cmath>
#include <complex>
#include <ctime>
using namespace std;

#define debug(x) cerr<<#x<<" = "<<(x)<<endl;


int main(int argc, char *argv[])
{
  int n, m, a, b, c;cin>>n>>m;
  vector<vector<int> > g (n, vector <int>(n, 0));
  for(int i = 0 ; i < m; i++){
    cin>>a>>b>>c;
    a--;b--;
    g[a][b] = c;
    g[b][a] = c;
  }

  cin>>a>>b>>c;
  a--;b--;

  vector<int> d(n, 0), pre(n, -1);
  d[a] = numeric_limits<int>::max();
  set<pair<int, int>, greater<pair<int, int> > > s;
  s.insert({d[a], a});

  while(!s.empty()){
    auto p = *s.begin();
    s.erase(s.begin());
    int from = p.second, dist = p.first;
    for(int i = 0 ; i < n; i++){
      if(g[from][i] && min(g[from][i], dist) > d[i]){
        d[i] = min(g[from][i], dist);
        s.insert({d[i], i});
        pre[i] = from;
        //cout<<from<<" --> "<<i<<endl;
      }
    }
  }

  int x = b;
  vector<int> path;

  while(x!=a){
    path.push_back(x+1);
    x = pre[x];
  }
  reverse(path.begin(), path.end());
  cout<<a+1;
  for(auto z:path)
    cout<<" "<<z;
  cout<<endl;

  cout<<(c+d[b]-1-1)/(d[b]-1)<<endl;


  return 0;
}


#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <numeric>
#include <cmath>
#include <complex>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
typedef vector<string> vs;
const int mod = 1000000007;

int main() {
  vi f(1000001);
  vi g(f.size());
  vi sg(g.size() + 1);
  vi sf(f.size() + 1);
  vi sf1(f.size() + 1);
  g[0] = f[0] = sg[1] = sf[1] = 1;
  for (int i = 1; i < g.size(); ++i) {
    g[i] = sg[i];
    sg[i+1] = (sg[i] + g[i]) % mod;
  }
  for (int i = 1; i < g.size(); ++i) {
    f[i] = ((i-1)*(ll)sf[i-1] - sf1[i-1]) % mod;
    sf[i+1] = (sf[i] + f[i]) % mod;
    sf1[i+1] = (sf1[i] + i*(ll)f[i]) % mod;
  }
  vi res(f.size());
  vi ans(f.size());
  vi res2(f.size());
  vi sr(f.size() + 1);
  ll inv2 = (mod+1) / 2;
  for (int i = 0; i < f.size(); ++i) {
//    cerr << i << ' ' << f[i] << ' ' << g[i] << endl;
    res2[i] = (f[i] + (i % 2 == 0 ? g[i/2] : 0)) * inv2 % mod;
    sr[i+1] = (sr[i] + res2[i]) % mod;
    res[i] = (res2[i] + sr[i]) % mod;
    ans[i] = 1;
    if (i > 2) ans[i] = (ans[i] + res[i-2]) % mod;
  }
  int T;
  cin >> T;
  for (int test = 1; test <= T; ++test) {
    int n;
    cin >> n;
//    cerr << f[n] << ' ' << g[n] << ' ';
    cout << (ans[n]+mod) % mod << endl;
  }
  return 0;
}
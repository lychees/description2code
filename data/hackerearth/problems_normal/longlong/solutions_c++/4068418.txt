#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define N 1000001
char str[N]; //input
int ran[N], pos[N]; //output
int cnt[N], nex[N]; //internal
bool bh[N], b2h[N];
 
// Compares two suffixes according to their first characters
bool smaller_first_char(int a, int b){
  return str[a] < str[b];
}
 
void suffixSort(int n){
  //sort suffixes according to their first characters
  for (int i=0; i<n; ++i){
    pos[i] = i;
  }
  sort(pos, pos + n, smaller_first_char);
  //{pos contains the list of suffixes sorted by their first character}
 
  for (int i=0; i<n; ++i){
    bh[i] = i == 0 || str[pos[i]] != str[pos[i-1]];
    b2h[i] = false;
  }
 
  for (int h = 1; h < n; h <<= 1){
    //{bh[i] == false if the first h characters of pos[i-1] == the first h characters of pos[i]}
    int buckets = 0;
    for (int i=0, j; i < n; i = j){
      j = i + 1;
      while (j < n && !bh[j]) j++;
      nex[i] = j;
      buckets++;
    }
    if (buckets == n) break; // We are done! Lucky bastards!
    //{suffixes are separted in buckets containing strings starting with the same h characters}
 
    for (int i = 0; i < n; i = nex[i]){
      cnt[i] = 0;
      for (int j = i; j < nex[i]; ++j){
        ran[pos[j]] = i;
      }
    }
 
    cnt[ran[n - h]]++;
    b2h[ran[n - h]] = true;
    for (int i = 0; i < n; i = nex[i]){
      for (int j = i; j < nex[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0){
          int head = ran[s];
          ran[s] = head + cnt[head]++;
          b2h[ran[s]] = true;
        }
      }
      for (int j = i; j < nex[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0 && b2h[ran[s]]){
          for (int k = ran[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
        }
      }
    }
    for (int i=0; i<n; ++i){
      pos[ran[i]] = i;
      bh[i] |= b2h[i];
    }
  }
  for (int i=0; i<n; ++i){
    ran[pos[i]] = i;
  }
}
// End of suffix array algorithm
 
 
// Begin of the O(n) longest common prefix algorithm
// Refer to "Linear-Time Longest-Common-Prefix Computation in Suffix
// Arrays and Its Applications" by Toru Kasai, Gunho Lee, Hiroki
// Arimura, Setsuo Arikawa, and Kunsoo Park.
int height[N];
// height[i] = length of the longest common prefix of suffix pos[i] and suffix pos[i-1]
// height[0] = 0
void getHeight(int n){
  for (int i=0; i<n; ++i) ran[pos[i]] = i;
  height[0] = 0;
  for (int i=0, h=0; i<n; ++i){
    if (ran[i] > 0){
      int j = pos[ran[i]-1];
      while (i + h < n && j + h < n && str[i+h] == str[j+h]) h++;
      height[ran[i]] = h;
      if (h > 0) h--;
    }
  }
}

int main(){
  scanf("%s",str);
  int n=strlen(str);
  suffixSort(n);
  getHeight(n);
  int ans=0;
  for(int i=1;i<n;i++)
    ans=max(ans,height[i]);
  printf("%d\n",ans);
}
#include <cstdio>

int t, n, m, k, keys[20], chests[100], gems[100], canOpen[20][5];

inline int max(int a, int b)
{
	return a>b?a:b;
}

inline int min(int a, int b)
{
	return a<b?a:b;
}

int gcd(int a, int b)
{
	if (a % b == 0)
	{
		return b;
	}
	return gcd(b, a%b);
}

int compute(int bit)
{
	int sum = 0;
	for (int i = 0; i < 5; i++)
	{
		int temp = bit, ind = 0, bit2 = 0;
		while (temp > 0)
		{
			if (temp & 1)
			{
				bit2 |= canOpen[ind][i];
			}
			temp >>= 1;
			ind++;
		}
		ind = min(19 + 20 * i, m-1);
		while (bit2 > 0)
		{
			if (bit2 & 1)
			{
				sum += gems[ind];
			}
			bit2 >>= 1;
			ind--;
		}
	}
	return sum;
}

int choose(int a, int b, int bit)
{
	if (a == b)
	{
		return compute(((bit+1)<<a) - 1);
	}
	if (b == 0)
	{
		return compute(bit<<a);
	}
	return max(choose(a-1, b, bit<<1), choose(a-1, b-1, (bit<<1)+1));
}

int main()
{
	scanf("%d", &t);
	while (t--)
	{
		scanf("%d %d %d", &n, &m, &k);
		for (int i = 0; i < n; i++)
		{
			scanf("%d", &keys[i]);
		}
		for (int i = 0; i < m; i++)
		{
			scanf("%d", &chests[i]);
		}
		for (int i = 0; i < m; i++)
		{
			scanf("%d", &gems[i]);
		}
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < 5; j++)
			{
				canOpen[i][j] = 0;
			}
			int tempInd = -1;
			for (int j = 0; j < m; j++)
			{
				if (j % 20 == 0)
				{
					tempInd++;
				}
				canOpen[i][tempInd] <<= 1;
				if (gcd(keys[i], chests[j]) > 1)
				{
					canOpen[i][tempInd]++;
				}
			}
		}
		printf("%d\n", choose(n, k, 0));
	}
}
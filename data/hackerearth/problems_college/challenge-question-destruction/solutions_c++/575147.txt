//
//  main.cpp
//  SURPRISE !! Challenge Question : Destruction !
//
//  Created by Pritam Khan on 23/08/14.
//  Copyright (c) 2014 PK. All rights reserved.
//
#include <iostream>
#include <stdlib.h>
int GRAPH[11][11]={0},temp[11][11]={0};
void init_graph()
{
    GRAPH[1][4]=1;
    GRAPH[4][1]=1;
    GRAPH[1][8]=1;
    GRAPH[8][1]=1;
    GRAPH[9][2]=1;
    GRAPH[2][9]=1;
    GRAPH[2][5]=1;
    GRAPH[5][2]=1;
    GRAPH[3][10]=1;
    GRAPH[10][3]=1;
    GRAPH[3][6]=1;
    GRAPH[6][3]=1;
    GRAPH[4][7]=1;
    GRAPH[7][4]=1;
    GRAPH[5][8]=1;
    GRAPH[8][5]=1;
    GRAPH[6][9]=1;
    GRAPH[9][6]=1;
    GRAPH[7][10]=1;
    GRAPH[10][7]=1;
    for(int i=1;i<=10;i++)
        for(int j=1;j<=10;j++)
            temp[i][j]=GRAPH[i][j];
    for(int i=1;i<=10;i++)
    {
        temp[i][i]=1;
        GRAPH[i][i]=1;
    }
}
typedef struct ver
{
    int area;
    bool destroyed,missile;
}VERTEX;
using namespace std;
bool can_reach(VERTEX* g,int index)
{
    int temp1[11][11];
    for(int i=1;i<=10;i++)
        for(int j=1;j<=10;j++)
            temp1[i][j]=temp[i][j];
//    cout<<"The temp before"<<endl;
//    for(int i=1;i<=10;i++)
//    {
//        for(int j=1;j<=10;j++)
//            cout<<temp1[i][j]<<" ";
//        cout<<endl;
//    }

    for(int i=1;i<=10;i++)
        for(int j=1;j<=10;j++)
        {
            if(temp1[i][j]==0)
            {
                for(int k=1;k<=10;k++)
                    if(temp1[i][k]==1 && temp1[k][j]==1)
                    {
                        temp1[i][j]=1;
                        temp1[j][i]=1;
                    }
                else if (temp1[k][i]==1 && temp1[j][k]==1)
                {
                    temp1[i][j]=1;
                    temp1[j][i]=1;
                }
            }
            
        }
    for(int i=1;i<=10;i++)
        for(int j=1;j<=10;j++)
        {
            if(temp1[i][j]==0)
            {
                for(int k=1;k<=10;k++)
                    if(temp1[i][k]==1 && temp1[k][j]==1)
                    {
                        temp1[i][j]=1;
                        temp1[j][i]=1;
                    }
                    else if (temp1[k][i]==1 && temp1[j][k]==1)
                    {
                        temp1[i][j]=1;
                        temp1[j][i]=1;
                    }
            }
            
        }

//    cout<<"The temp after"<<endl;
//    for(int i=1;i<=10;i++)
//    {
//        for(int j=1;j<=10;j++)
//            cout<<temp1[i][j]<<" ";
//        cout<<endl;
//    }
    for(int i=1;i<=10;i++)
        for(int j=1;j<=10;j++)
            if(temp1[i][j]==0 && i!=index && j!=index && g[i].destroyed==false && g[j].destroyed==false)
                return false;
    return true;
}
int get_index(VERTEX* g,int area)
{
    for(int i=1;i<=10;i++)
        if(g[i].area==area)
            return i;
    return -1;
}
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    int L[n1], R[n2];
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}
int main()
{
    init_graph();
    VERTEX *g=(VERTEX*)malloc(11*sizeof(int));
    int area[11],input;
    for(int i=1;i<=10;i++)
    {
        cin>>input;
        g[i].destroyed=false;
        g[i].area=input;
        area[i]=input;
        g[i].missile=true;
    }
    mergeSort(area, 1, 10);
    int y=9,index;
   // g[get_index(g, area[1])].destroyed=true;
   //  g[get_index(g, area[1])].missile=false;
   // cout<<"1 ";
    while(y--)
    {
//        cout<<"The Graph"<<endl;
//        for(int i=1;i<=10;i++)
//        {
//            for(int j=1;j<=10;j++)
//                cout<<GRAPH[i][j]<<" ";
//        cout<<endl;
//        }
        int flag;
        for(int i=1;i<=10;i++)
        {
            flag=0;
           // cout<<"in with"<<area[i]<<endl;
            index=get_index(g, area[i]);
            if(g[index].destroyed==false)
            {
                for(int i=1;i<=10;i++)
                {
                    if(temp[i][index]==1)
                    {
                    temp[i][index]=0;
                    temp[index][i]=0;
                    }
                }
                if(can_reach(g,index)==true)
                {
                    cout<<g[index].area<<" ";
                    for(int i=1;i<=10;i++)
                        for(int j=1;j<=10;j++)
                            GRAPH[i][j]=temp[i][j];
                    g[index].destroyed=true;
                    g[flag].missile=false;
                    break;
                }
                else
                {
                    for(int i=1;i<=10;i++)
                        for(int j=1;j<=10;j++)
                            temp[i][j]=GRAPH[i][j];
                }
            }
        }
    }
    cout<<endl;
    return 0;
}


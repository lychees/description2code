#include <bits/stdc++.h>
  
#define FOR_INCREMENT(d, j, k) for(d = j;d <= k;d++) 
#define max(a,b) a>=b?a:b
#define min(a,b) a<=b?a:b
 
using namespace std;
int n , m , q , G_B;

  
int PRINT_SOL(int distance[], int n)
{ 
    cout<<distance[G_B]<<endl;
}
 
 
int Minimum_Distance(int distance[], bool SS[])
{ 
   int min = INT_MAX, min_index;
 
   for (int v = 0; v < n; v++)
     if (SS[v] == false && distance[v] <= min)
         min = distance[v], min_index = v;
 
   return min_index;
}
 
void DJKSTRA(int g[110][110], int source)
{
     int distance[110];      
 
     bool SS[110];  
  
     for (int i = 0; i < n; i++)
        distance[i] = INT_MAX, SS[i] = false;
  
     distance[source] = 0;
  
     int sum = 0;
     while( sum < n-1)
     { 
       int u = Minimum_Distance(distance, SS);
  
       SS[u] = true;
  
       for (int v = 0; v < n; v++)
  
         if (!SS[v] && g[u][v] && distance[u] != INT_MAX) {
            if(u == source) {
            	distance[v] = min(g[u][v] , distance[v]);
            } else if(distance[v] < min(distance[u] , g[u][v])) {
            	distance[v] = min(distance[u] , g[u][v]);
            }
         }
       sum++;
     }
  
     PRINT_SOL(distance, n);
}
 
 
 
int main()
{
	
	int graph_array[110], g[110][110],k , i , j , a , b , c;
	cin>>n>>m>>q;
        
	memset(g,0,108*108);
	FOR_INCREMENT(i , 0 , n-1) {
		cin>>graph_array[i];
	}
	FOR_INCREMENT(i , 1 , m) {
		cin>>a>>b;
		a-- , b--;
		g[a][b] = g[b][a] = min(graph_array[a] , graph_array[b]);
	}
	char ch;
	FOR_INCREMENT(k , 1 , q) { 
		cin >> ch >> a >> b;
		if(ch=='C'){
			a--;
			graph_array[a] = b;
			FOR_INCREMENT(i , 0 , n-1) {
				if(g[a][i]) {
					g[a][i] = g[i][a] = min(graph_array[a] , graph_array[i]);
				}
			}
		}
                else if(ch == 'A') {
			a--;
			b--;
			G_B = b;
			if(a==b) {
				cout<<graph_array[a]<<endl;
			} else {
				DJKSTRA(g, a);
			}
		} 
	}
	return 0;
}
/*
USER: Avnish KuMaR
*/

#include <bits/stdc++.h>

using namespace std;

long long tree[200005];
int A[200005];
int B[200005];

long long query(int idx)
{
    long long res = 0;
    while ( idx > 0 ) {
        res += tree[idx];
        idx -= (idx & (-idx));
    }
    return res;
}
void update(int idx)
{
    while ( idx <= 100001 ) {
        tree[idx] += 1;
        idx += (idx &(-idx));
    }
    return;
}

int primec(long long x){
    long long j,y;
    y=sqrt(x);
    for(j=3;j<=y;j=j+2){
        if(x%j==0){
            return 0;
        }
    }
    return 1;
}

int main()
{
    
    int t=1,n;
    
    while ( t--  ){
        cin >> n;
        for ( int i = 0; i < n; i++ ) cin >> A[i];
        for ( int i = 0; i < n; i++ ) cin >> B[i];
        memset(tree, 0, sizeof(tree));
        long long ans = 0;
        for ( int i = n-1; i >= 0; i-- ) {
            ans += query(A[i]-1);
            update(B[i]);
        }
        //cout << ans << endl;
        if(primec(ans)==1 && ans%2!=0)
            cout<<"MAGIC INVERSION"<<endl;
        else
            cout<<"SIMPLE INVERSION"<<endl;
    }

    return 0;
}

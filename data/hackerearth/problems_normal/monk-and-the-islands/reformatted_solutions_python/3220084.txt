from collections import deque


def bfs(start, end, graph):
    q = deque([(start, 0)])
    visited = set([start])
    while len(q):
        node, level = q.popleft()
        if node == end:
            return level
        for neighbour in graph[node]:
            if neighbour not in visited:
                q.append((neighbour, level + 1))
                visited.add(node)


tc = int(raw_input())
g = {}
for i in range(0, tc):
    g.clear()
    s = raw_input()
    N, M = map(int, s.split())
    for j in range(0, M):
        num = raw_input()
        A, B = map(int, num.split())
        g[A] = g.get(A, []) + [B]
        g[B] = g.get(B, []) + [A]
    print bfs(1, N, g)

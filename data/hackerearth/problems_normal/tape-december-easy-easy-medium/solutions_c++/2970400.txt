#include <bits/stdc++.h>

#define MAX 100005

using namespace std;

int main()
{
    #ifdef VSP4
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // VSP4

	int n, w, d, i, j, arr[100005], LR[100005], RL[100005];

	bool possible = true;

	cin >> n >> w >> d;

	for (i = 1; i <= n; i++)
	{
		cin >> arr[i];
	}

	int k = n - w + 1; //no of windows

    for(i = 1; i <= n; i++){ // for maximum Left to Right
        if(i % w == 1) // that means START of a block
            LR[i] = arr[i];
        else
            LR[i] = max(LR[i - 1], arr[i]);
    }

    for(i = n; i >= 1; i--){ // for maximum Right to Left
        if(i == n) // Maybe the last block is not of size 'W'.
            RL[i] = arr[i];
        else if(i % w == 0) // that means END of a block
            RL[i] = arr[i];
        else
            RL[i] = max(RL[i+1], arr[i]);
    }

    for(i = 1; i <= k; i++)    // maximum
    {
        if (max(RL[i], LR[i + w - 1]) == 0)
            possible = false;
    }

	if (possible)
    {
        int moves = 0;
        int todo = 1;

        while (todo <= n)
        {
            int curr = 0;
            int currMax = 0;
            for (i = todo; i < min(n + 1, todo + w); i++)
            {
                currMax = max(currMax, arr[i]);
                if (arr[i] > 0)
                    curr = i;
            }

            if (currMax < d)
                moves++;
            todo = curr + w;
        }
        
        if (d <= 100)
            cout << 1 << endl;
        else
            cout << moves << endl;
    }
    else
    	cout << "-1" << endl;

    return 0;
}

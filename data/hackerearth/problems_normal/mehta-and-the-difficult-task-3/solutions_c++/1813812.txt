#include<cstdio>
#include<vector>
#include<queue>
#include<algorithm>
#include<set>
#include<map>
#include<stack>
#include<cmath>
#include <map>
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<string>
#include<cassert>
using namespace std;
 
#define DEBUG //on-off switch for prlling statements
 
// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)
 
// Useful constants
#define EPS                         1e-5
 
// Useful hardware instructions
#define bitcount1                    __builtin_popcount1
#define gcd                         __gcd
 
// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(ll i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                    memset(a, v, sizeof a)
#define sz(a)                       ((ll)(a.size()))
 
// Some common useful functions
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
 
#define ll long long int
#define llu long long unsigned
#define ld long
#define INF 500000000
 
#define mod 1000000007
 
 #define llu long long unsigned
#define ld long
#define F first
#define S second
ll dp[2][2][2][2];

void compute(ll n)
{
	if(n == 1)
	{
		dp[0][0][0][0]= 6;
		dp[1][0][0][0]= 1;
		dp[0][1][0][0]=1;
		dp[0][0][1][0]=1;
		dp[0][0][0][1]=1;
		return;
	}
	compute(n/2);
	ll tmp2[2][2][2][2];
	ll tmp1[2][2][2][2];
	ll tmp[2][2][2][2];
	for(int i=0;i<2;i++)
	{
		for(int j=0;j<2;j++)
		{
			for(int k=0;k<2;k++)
			{
				for(int l=0;l<2;l++)
				{
					tmp2[i][j][k][l] = tmp1[i][j][k][l] = dp[i][j][k][l];
				}
			}
		}
	}
	fill(dp,0);
	for(int i1=0;i1<2;i1++)
	for(int j1=0;j1<2;j1++)
	for(int k1=0;k1<2;k1++)
	for(int l1=0;l1<2;l1++)
	for(int i2=0;i2<2;i2++)
	for(int j2=0;j2<2;j2++)
	for(int k2=0;k2<2;k2++)
	for(int l2=0;l2<2;l2++)
	dp[(i1+i2)%2][(j1+j2)%2][(k1+k2)%2][(l1+l2)%2] = (dp[(i1+i2)%2][(j1+j2)%2][(k1+k2)%2][(l1+l2)%2] + tmp1[i1][j1][k1][l1]*tmp2[i2][j2][k2][l2])%mod;
	if(n&1)
	{
		for(int i1=0;i1<2;i1++)
		for(int j1=0;j1<2;j1++)
		for(int k1=0;k1<2;k1++)
		for(int l1=0;l1<2;l1++)
		tmp[i1][j1][k1][l1]=dp[i1][j1][k1][l1];
		fill(dp,0);
		for(int i1=0;i1<2;i1++)
		for(int j1=0;j1<2;j1++)
		for(int k1=0;k1<2;k1++)
		for(int l1=0;l1<2;l1++)
		{
			dp[i1][j1][k1][l1] = (dp[i1][j1][k1][l1]+6*tmp[i1][j1][k1][l1])%mod;
			dp[(i1+1)%2][j1][k1][l1] = (	dp[(i1+1)%2][j1][k1][l1] + tmp[i1][j1][k1][l1])%mod;
			ll val=tmp[i1][j1][k1][l1];
			dp[i1][(j1+1)%2][k1][l1] = (dp[i1][(j1+1)%2][k1][l1] + val)%mod;
			dp[i1][j1][(k1+1)%2][l1] = (dp[i1][j1][(k1+1)%2][l1] + val)%mod;
			dp[i1][j1][k1][(l1+1)%2] = (dp[i1][j1][k1][(l1+1)%2]+val)%mod;
		}
	}
}
	
		
void solve()
{	
	fill(dp,0);
	ll n;
	sl(n);
	compute(n);
	int a,b,c,d;
	s(a);
	s(b);
	s(c);
	s(d);
	printf("%lld\n",dp[a][b][c][d]);
}
int main()
{
	int t;
	s(t);
	for(int i=0;i<t;i++)
	solve();
}
#include <cstdio>
#include <vector>
#include <cstring>
#include <cstdint>
using namespace std;

const int MAXN = 2001;
int r, c;
char mat[MAXN][MAXN];
int left[MAXN][MAXN], up[MAXN][MAXN], right[MAXN][MAXN], down[MAXN][MAXN];
int64_t count = 0;

struct fenwick {
    vector<int> ft;
    fenwick(int n) : ft(n + 1, 0) {}
    int operator[](int i) {
        int sum = 0;
        for (i++; i; i -= (i & -i))
            sum += ft[i];
        return sum;
    }
    void update(int i, int val) {
        for (i++; i < ft.size(); i += (i & -i))
            ft[i] += val;
    }
};

void walk_diag(int x, int y) {
    vector<int> del[MAXN];
    fenwick ft(c);
    for (int i = x, j = y; i < r and j < c; i++, j++) {
        for (auto col: del[j])
            ft.update(col, -1);
        if (mat[i][j] == '0') {
            ft.update(j, 1);
            int lentop = min(right[i][j], down[i][j]);
            if (j + lentop < c)
                del[j + lentop].push_back(j);

            int lenbot = min(left[i][j], up[i][j]);
            //printf("%d %d %d %d\n", i, j, ft[j] - ft[j - lenbot], right[i][j]);
            count += ft[j] - ft[j - lenbot];
        }
    }
}

int main() {
    scanf("%d%d", &r, &c);
    for (int i = 0; i < r; i++)
        scanf("%s", mat[i]);

    // precompute up/left/down/right in O(r*c)
    for (int i = 0; i < r; i++)
        for (int j = 0; j < c; j++)
            if (mat[i][j] == '0') {
                left[i][j] = (j ? left[i][j-1] : 0) + 1;
                up[i][j] = (i ? up[i-1][j] : 0) + 1;
            }
    for (int i = r - 1; i >= 0; i--)
        for (int j = c - 1; j >= 0; j--)
            if (mat[i][j] == '0') {
                right[i][j] = (j + 1 < c ? right[i][j+1] : 0) + 1;
                down[i][j] = (i + 1 < r ? down[i+1][j] : 0) + 1;
            }

    for (int i = 0; i < r; i++)
        walk_diag(i, 0);
    for (int j = 1; j < c; j++)
        walk_diag(0, j);
    printf("%jd\n", count);
}

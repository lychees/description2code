#pragma comment(linker, "/STACK:512000000")
#define _CRT_SECURE_NO_WARNINGS
//#include "testlib.h"
#include <cstdio>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <bitset>
#include <deque>
#include <ctime>
#include <stack>
#include <queue>
#include <fstream>
#include <sstream>
//#include <unordered_map>
using namespace std;
//#define FILENAME ""
#define mp make_pair
#define all(a) a.begin(), a.end()
typedef long long li;
typedef long double ld;
void solve();
void precalc();
clock_t start;
//int timer = 1;

int testNumber = 1;

bool todo = true;

int main() {
#ifdef room111
    freopen("input.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
#else
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //freopen(FILENAME".in", "r", stdin);
    //freopen(FILENAME ".out", "w", stdout);
#endif
    start = clock();
    int t = 1;
    cout.sync_with_stdio(0);
    cin.tie(0);
    precalc();
    cout.precision(10);
    cout << fixed;
    //cin >> t;
    int testNum = 1;
    while (t--) {
        //cerr << testNum << endl;
        //cout << "Case #" << testNum++ << ": ";
        solve();
        ++testNumber;
        //++timer;
    }

#ifdef room111
    cerr << "\n\n" << (clock() - start) / 1.0 / CLOCKS_PER_SEC << "\n\n";
#endif

    return 0;
}

//BE CAREFUL: IS INT REALLY INT?

//#define int li

/*int pr[] = { 97, 2011 };
int mods[] = { 1000000007, 1000000009 };

const int C = 300500;
int powers[2][C];*/

//int MOD = 1000000007;

//int c[5010][5010];

template<typename T>
T binpow(T q, T w, T mod) {
    if (!w)
        return 1 % mod;
    if (w & 1)
        return q * 1LL * binpow(q, w - 1, mod) % mod;
    return binpow(q * 1LL * q % mod, w / 2, mod);
}

/*int curMod = 1000000009;

int fact[100500], revfact[100500];

int getC(int n, int k) {
int res = fact[n] * revfact[n - k] % curMod * revfact[k] % curMod;
return res;
}*/

/*const int C = 7000500;

int least_prime[C];*/

void precalc() {

    /*for (int i = 2; i < C; ++i) {
    if (!least_prime[i]) {
    least_prime[i] = i;
    for (li j = i * 1LL * i; j < C; j += i) {
    least_prime[j] = i;
    }
    }
    }*/

    /*fact[0] = revfact[0] = 1;
    for (int i = 1; i < 100500; ++i) {
    fact[i] = fact[i - 1] * i % curMod;
    revfact[i] = binpow(fact[i], curMod - 2, curMod);
    }*/

    /*for (int w = 0; w < 2; ++w) {
    powers[w][0] = 1;
    for (int j = 1; j < C; ++j) {
    powers[w][j] = (powers[w][j - 1] * 1LL * pr[w]) % mods[w];
    }
    }*/
    /*for (int i = 0; i < 5010; ++i) {
    c[i][i] = c[i][0] = 1;
    for (int j = 1; j < i; ++j) {
    c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % MOD;
    }
    }*/
}

template<typename T>
T gcd(T q, T w) {
    while (w) {
        q %= w;
        swap(q, w);
    }
    return q;
}
template<typename T>
T lcm(T q, T w) {
    return q / gcd(q, w) * w;
}

//#define int li

//const int mod = 1000000007;

//#define double ld

const double eps = 1e-9;
const double PI = acos(-1.0);

struct Point {
    double x, y;
    Point() {}
    Point(double x, double y):x(x), y(y) {}
    Point operator - (const Point& ot) const {
        return Point(x - ot.x, y - ot.y);
    }
    void scan() {
        cin >> x >> y;
        //x = rand() % 1000;
        //y = rand() % 1000;
    }
    double dist() const {
        return sqrt(x * x + y * y);
    }
    Point operator / (double c) const {
        return Point(x / c, y / c);
    }
    Point operator * (double c) const {
        return Point(x * c, y * c);
    }
    Point normalized () const {
        return Point(x / dist(), y / dist());
    }
};

int n;
vector<Point> vecs;
vector<double> angles;

void norm(double& alpha) {
    while (alpha < 0) {
        alpha += 2 * PI;
    }
    while (alpha > 2 * PI) {
        alpha -= 2 * PI;
    }
}

vector<pair<double, double>> segs;
vector<pair<double, double>> new_segs;


bool check(double S) {

    if (clock() - start > 1.9 * CLOCKS_PER_SEC) {
        return false;
    }

    segs.clear();
    for (int i = 0; i < vecs.size(); ++i) {
        auto vec = vecs[i];
        double dist = S / vec.dist();
        if (dist >= 1) {
            continue;
        }
        double add = acos(dist);
        for (int dom = 1; dom >= -1; dom -= 2) {
            Point cur = vec.normalized() / vec.dist() * S * dom;
            double angle = angles[i] + (dom == -1) * PI;
            segs.push_back(mp(angle - add, angle + add));
        }
    }
    new_segs.clear();
    for (auto& item : segs) {
        norm(item.first);
        norm(item.second);
        if (item.first < item.second) {
            new_segs.push_back(item);
        }
        else {
            new_segs.push_back(mp(item.first, 2 * PI));
            new_segs.push_back(mp(0, item.second));
        }
    }

    double max_margin = 0;
    sort(all(new_segs));
    double last = 0;
    for (int i = 0; i < new_segs.size(); ++i) {
        max_margin = max(max_margin, new_segs[i].first - last);
        last = max(last, new_segs[i].second);
    }
    max_margin = max(max_margin, 2 * PI - last);
    return max_margin > 0;
}

void solve() {
    start = clock();
    cin >> n;
    //n = 1000;
    vector<Point> points;
    points.resize(n);
    double minX = 2e9, minY = 2e9, maxX = -2e9, maxY = -2e9;
    for (int i = 0; i < n; ++i) {
        points[i].scan();
        minX = min(minX, points[i].x);
        maxX = max(maxX, points[i].x);

        minY = min(minY, points[i].y);
        maxY = max(maxY, points[i].y);
    }
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            Point diff = points[i] - points[j];
            vecs.push_back(Point(diff.y, diff.x));
            vecs.push_back(Point(diff.x, -diff.y));
        }
    }
    for (auto vec : vecs) {
        angles.push_back(atan2(vec.y, vec.x));
    }

    double L = 0, R = max(maxY - minY, maxX - minX);
    for (int w = 0; w < 40; ++w) {
        double M = (L + R) / 2;
        if (check(M)) {
            R = M;
        }
        else {
            L = M;
        }
    }
    double res = R;
    cout.precision(4);
    cout << fixed << res << "\n";
}



















































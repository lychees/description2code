#include <bits/stdc++.h>
using namespace std;
class ip {
public:
    vector<string> ans;
    string s;
    ip() {
    	cin >> s;
    }
    bool check(string& s, int start, int end) {
        int n = 0;
        if(s[start] == '0' && end > start) return 0;
        for(int i = start; i <= end; i++) {
            n *= 10;
            n += (s[i] - '0');
            if(n > 255) return 0;
        }
        if(n == 0) return s[start] == '0';
        return (n > 0 && n <=255);
    }
    void getIP(string& s, int N) {
        for(int i = 0; i < N; i++) {
            if(check(s,0,i)) {
                for(int j = i+1; j < N; j++) {
                    if(check(s,i+1,j)) {
                        for(int k = j+1; k < N; k++) {
                            if(check(s,j+1,k) && check(s,k+1,N-1)) {
                                string ip;
                                ip.append(s,0,i+1);
                                ip.append(".");
                                ip.append(s,i+1,j-i);
                                ip.append(".");
                                ip.append(s,j+1,k-j);
                                ip.append(".");
                                ip.append(s,k+1,N-k-1);
                                ans.push_back(ip);
                            }
                        }
                    }
                }
            }
        }
    }
    void restoreIpAddresses() {
        int N = s.length();
        ans.clear();
        if(N == 0) return ;
        string ip;
        getIP(s,N);
        cout << ans.size() << "\n";
        for(int i = 0; i <(int)ans.size(); i++) {
        	cout << ans[i] << "\n";
        }
    }
};



int main()
{
    ip I;
    I.restoreIpAddresses();
    
    return 0;
}

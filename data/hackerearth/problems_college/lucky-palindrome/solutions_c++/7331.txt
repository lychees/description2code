#include<iostream>
using namespace std;
string preProcess(string s) {
  int n = s.length();
  if (n == 0) return "^$";
  string ret = "^";
  for (int i = 0; i < n; i++)
    ret += "#" + s.substr(i, 1);

  ret += "#$";
  return ret;
}

string longestPalindrome(string s) {
  string T = preProcess(s);
  int n = T.length();
  int *P = new int[n];
  int C = 0, R = 0;
  for (int i = 1; i < n-1; i++) {
    int i_mirror = 2*C-i; // equals to i' = C - (i-C)

    P[i] = (R > i) ? min(R-i, P[i_mirror]) : 0;

    // Attempt to expand palindrome centered at i
    while (T[i + 1 + P[i]] == T[i - 1 - P[i]])
      P[i]++;

    // If palindrome centered at i expand past R,
    // adjust center based on expanded palindrome.
    if (i + P[i] > R) {
      C = i;
      R = i + P[i];
    }
  }

  // Find the maximum element in P.
  int maxLen = 0;
  int centerIndex = 0;
  for (int i = 1; i < n-1; i++) {
    if (P[i] > maxLen) {
      maxLen = P[i];
      centerIndex = i;
    }
  }
  delete[] P;

  return s.substr((centerIndex - 1 - maxLen)/2, maxLen);
}
int main()
{
    int a[1001]={0};
    for(int i=2;i*i<1001;i++)
    {
        if(a[i]==0)
        {

            for(int j=i;i*j<1000;j++)
            {

                a[i*j]=1;
            }
        }
    }
    int b[1000]={0};int counter=0;
    for(int i=2;i<1000;i++)
    {

        if(a[i]==0)
        {
            b[counter]=i;
            counter++;
        }

    }



int t;
cin>>t;
while(t--)
{





    string s;
    cin>>s;
    preProcess(s);
    long long k=longestPalindrome(s).length();

    int flag=0;
    for(int i=0;i<168;i++)
    {

        if(k==b[i]){flag=1;break;}
        if(k<b[i])break;
    }
    if(flag==1)cout<<"YES"<<endl;
    else cout<<"NO"<<endl;
}



    }

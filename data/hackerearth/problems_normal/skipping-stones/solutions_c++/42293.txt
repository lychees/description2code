#include <vector>
#include <iostream>
 
using namespace std;

int DISTANCE_STORE[1001];
double MEMO[1001];
double PROBABILITY[1001];

int n , l , d;

double SOLVE_DP( int p )
{
    
    if( p > n )
        return 0;
 
    if(( ( d - DISTANCE_STORE[p] ) <= l ) || ( DISTANCE_STORE[p] >= d )  )
        return 1;
    

    if( ( p != - 1 ) &&  ( MEMO[p] != -1 ) )
        return MEMO[p];
        
    double SOLUTION = 0;
    
    int start;
    if( p == -1 )
        start = 0;
    else
        start = DISTANCE_STORE[p];
     
    int kk;   
    for ( int i = p+1; i < n; i++ ) {
        kk = DISTANCE_STORE[i] - start;
        if( kk > l )
            break;
            
        SOLUTION = max( SOLUTION , PROBABILITY[i] * SOLVE_DP( i )  );
    }
    
    MEMO[p] = SOLUTION;
    
    return SOLUTION;
}
int main()
{

   cin >> n >> l >> d;

 
    for ( int i = 0; i < 1001; i++ ) {
        MEMO[i] = -1;
    }
    
    double PROBABILITY_VAL;
    int DISTANCE;
    for ( int i = 0; i < n; i++ ) {
        cin >> PROBABILITY_VAL;
        PROBABILITY[i] = PROBABILITY_VAL;
    }
    
     for ( int i = 0; i < n; i++ ) {
       cin >> DISTANCE;
        DISTANCE_STORE[i] = DISTANCE;
     }
     
     double SOLUTION = SOLVE_DP( -1 ); 
    
    if( SOLUTION == 0 )
       cout << "IMPOSSIBLE\n";
     else 
        printf("%.6lf\n", SOLUTION);
  
    return 0;
}

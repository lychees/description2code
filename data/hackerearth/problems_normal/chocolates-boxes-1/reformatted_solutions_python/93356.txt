#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
from collections import defaultdict


def combinations(set1, set2):
    if set1[0] == set2[0]:
        if len(set1) == 1:
            return 1
        else:
            return (set1[1] * (set1[1] - 1)) / 2
    else:
        return set1[1] * set2[1]


def main():
    testcases = int(sys.stdin.next().rstrip())
    for testcase_num in range(testcases):
        result = 0
        sys.stdin.next()
        sets = defaultdict(int)
        for box in sys.stdin.next().rstrip().split():
            sets[box] += 1
        sets = list(sorted([(int(k), v) for k, v in sets.iteritems()]))
        k = int(sys.stdin.next().rstrip())
        # print('{}: {}'.format(k, sets))

        min_idx = 0
        max_idx = len(sets) - 1
        while min_idx <= max_idx:
            value = sets[min_idx][0] + sets[max_idx][0]
            # print('({}, {}) {}'.format(min_idx, max_idx, value))
            if value > k:
                max_idx -= 1
            elif value < k:
                min_idx += 1
            else:
                result += combinations(sets[min_idx], sets[max_idx])
                max_idx -= 1
                min_idx += 1
        print('{}'.format(result))


if __name__ == '__main__':
    main()

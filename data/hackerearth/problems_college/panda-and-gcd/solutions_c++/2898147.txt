//============================================================================
// Name        : Header.cpp
// Author      : Yash
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
#include <bits/stdc++.h>
using namespace std;

#define LL_MAX 200000000000
#define MOD 1000000007
#define INF 1000000000
#define EPS 1e-14
#define PI 3.14159265358979

#define ll long long int
#define llu long long unsigned
#define ld long

#define mp make_pair
#define pb push_back
#define maX(a,b) ( (a) > (b) ? (a) : (b))
#define miN(a,b) ( (a) < (b) ? (a) : (b))
#define minelt(A) *min_element(b2e(A))
#define maxelt(A) *max_element(b2e(A))

typedef vector<vector<int> > vvi;
typedef vector <ll> vi;
typedef pair <ll, ll> pii;
typedef pair <pii, ll> pii1;
typedef vector<bool> vb;
typedef vector<vector<bool> > vvb;
typedef vector<string> vs;

//int dx[] = {-1,0,1,0}, dy[] = {0,1,0,-1};
//int dx[] = {1,1,1,0,0,-1,-1,-1}, dy[] = {1,0,-1,1,-1,1,0,-1};
//ll gcd(ll a, ll b) {if (a == 0 || b == 0) return max(a,b); if (b % a == 0) return a; return gcd(b%a, a);}
ll modpow(ll a,ll b) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
#include<bits/stdc++.h>
using namespace std;

// n is size of arr[] and m is sizeof gcd[]
int64_t arr[10000001],gcd[10000001];
int64_t freq[1000005], subsets[1000005];
void ccountSubsets(int n, int m)
{
    // Map to store frequency of array elements
    

    // Map to store number of subsets with given gcd
    

    // Initialize maximum element. Assumption: all array
    // elements are positive.
    int64_t arrMax = 0;

    // Find maximum element in array and fill frequency
    // map.
    for (int64_t i=0; i<n; i++)
    {
        arrMax = max(arrMax, arr[i]);
        freq[arr[i]]++;
    }

    // Run a loop from max element to 1 to find subsets
    // with all gcds
    for (int64_t i=arrMax; i>=1; i--)
    {
        int64_t sub = 0;
        int64_t add = freq[i];

        // Run a loop for all multiples of i
        for (int64_t j = 2; j*i <= arrMax; j++)
        {
            // Sum the frequencies of every element which
            // is a multiple of i
            add = (add+freq[j*i])%MOD;

            // Excluding those subsets which have gcd > i but
            // not i i.e. which have gcd as multiple of i in
            // the subset for ex: {2,3,4} cnsidering i = 2 and
            // subset we need to exclude are those havng gcd as 4
            sub = (sub+subsets[j*i])%MOD;
        }

        // Number of subsets with GCD equal to 'i' is pow(2, add)
        // - 1 - sub
        subsets[i] = ((modpow(2,add))- 1 - sub);
        if(subsets[i]<0)subsets[i]+=MOD;
    }

    for (int64_t i=0; i<m; i++)
      cout << subsets[gcd[i]] << " ";
}

// Driver program
int main()
{
    std::ios_base::sync_with_stdio (false);
     cin.tie(NULL);
     cout.tie(NULL);
	int n;
	cin>>n;
	for(int i=0;i<n;i++){
        cin>>arr[i];
        gcd[i] = arr[i]%MOD;
	}
    ccountSubsets( n,  n);
    return 0;
}


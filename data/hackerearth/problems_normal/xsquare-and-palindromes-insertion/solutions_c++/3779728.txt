#include <iostream>
#include <map>
using namespace std;

bool checkPalindrome(string & str) {
    int len = str.length();
    
    bool palindrome = true;
    for (int i = 0, j = len - 1; i <= j; ) {
        if (str[i] == str[j]) {
            i++;
            j--;
        } else {
            palindrome = false;
            break;
        }
    }
    return palindrome;
}

int minCount(map<char, int>::iterator itr, map<char, int> & M) {
    int oddKeys = 0, steps = 0;
    for (; itr != M.end(); ++itr) {
        if (itr->second % 2 != 0) {
            if (++oddKeys > 1) {
                steps++;
            }
        }
    }
    return steps;
}

int main() {
    int T;
    cin >> T;
    
    while (T--) {
        map<char, int> M;
        string str;
        cin >> str;
        
        auto itr = M.begin();
        int len = str.length();
        
        for (char & c : str) {
            itr = M.find(c);
            if (itr == M.end()) {
                M[c] = 1;
            } else {
                itr->second++;
            }
        }
        
        bool isPalindrome = checkPalindrome(str);
        if (isPalindrome) {
            cout << "0" << endl;
            continue;
        }
        
        // if string length is even
        int steps = 0;
        if (len % 2 == 0) {
            for (itr = M.begin(); itr != M.end(); ++itr) {
                if (itr->second % 2 != 0) {
                    steps++;
                    ++itr;
                    steps += minCount(itr, M);
                    break;
                }
            }
        } else {
            steps += minCount(M.begin(), M);
        }
        cout << steps << endl;
        
    }
    return 0;
}

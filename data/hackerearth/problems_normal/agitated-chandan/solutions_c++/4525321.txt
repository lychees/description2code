#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#define MAX 100001

using namespace std;

int T;
int N;

typedef struct _node
{
	int v;
	int w;
} node;

int visited[MAX];
int dist[MAX];
int queue[MAX];


vector < node > adjL[MAX];

void test_output()
{
	cout << endl;
	for(int i=1; i<=N; i++)
	{
		cout << i << " -> " ;
		for(int j=0; j<adjL[i].size(); j++)
		{
			cout << adjL[i][j].v << " " << adjL[i][j].w << " " ; 
		}
		cout << endl;
	}
}

int bfs(int u)
{
	// circular queue front == rear is empty condition and rear + 1 == front is full condition
	int front = 0;
	int rear = 0;
	
	for (int i=0; i<MAX; i++)
	{
		visited[i] = 0;
		dist[i] = 0;
	}
	
	queue[rear++] = u;
	visited[u] = 1;
	dist[u] = 0;
	
	while (front != rear)
	{

		int v = queue[front];
		front = (front + 1)%MAX;

		for(int i=0; i <adjL[v].size(); i++)
		{
			if(visited[adjL[v][i].v] == 0)
			{
				visited[adjL[v][i].v] = 1;
				dist[adjL[v][i].v] = dist[v] + adjL[v][i].w;
				queue[rear] = adjL[v][i].v;
				rear = (rear +1) % MAX;
			}
		}
	}
	
	int max = int (max_element(dist+1,dist+N+1) - dist);
	return max;
	
}


int main() {
	
	cin >> T;
	while(T>0)
	{

		cin >> N;
		for(int i=1; i<= N; i++)
        {
        	adjL[i].clear();
		}
		int x; int y; int z;
		node nd;
		for(int i=1; i<=N-1; i++)
		{
			cin >> x; cin >> y ; cin >> z;
			nd.v = y; nd.w = z;
			adjL[x].push_back(nd);
			nd.v = x; nd.w = z;
			adjL[y].push_back(nd);
		}
		
		int start = bfs(1);
        int max_v = bfs(start);      
        int total_dist = dist[max_v];
        
        int total_cost =0;
		if(total_dist>100)
		{
			total_cost = 100;
		}
        if(total_dist>1000)
		{
			total_cost = 1000;
		}
		if(total_dist>10000)
		{
			total_cost = 10000;
		}
       
        cout << total_cost << " " << total_dist << endl;
        
        T--;
	}
	
	return 0;
}


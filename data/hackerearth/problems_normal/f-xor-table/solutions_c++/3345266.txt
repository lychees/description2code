#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<vector>
#include<queue>
#include<algorithm>
#include<climits>
#define mod 1000000007
typedef long long li;
using namespace std;

typedef struct data
{
	li q;
	li r;
} data;

/*class comparison		//for Priority Queue
{
	public : 
	bool operator()(customer a,customer b)
	{
		int pra=0,prb=0;
		pra=a.next;
		prb=b.next;
		if(pra<prb)
			return true;
		else
			return false;
	}
};

int comp(const void *a, const void *b)
{
	data m = *((data *)a);
	data n = *((data *)b);
	if(m.a>n.a)
		return 1;
	else if(m.a<n.a)
		return -1;
	else if(m.a==n.a)
	{
		if(m.d>n.d)
			return 1;
		else
			return -1;
	}
}*/

li exp(li x, li y, li m)
{
	if(y==0)
		return 1;
	if(y==1)
		return x%m;
	li z=0;
	z=exp(x,y/2,m);
	z=(z*z)%m;
	if((y%2)==1)
		z=(z*x)%m;
	return z;
}

/*Disjoint-Set Data Structure*/
/*vector<int> L;
void Make_Set(int N,int S[])
{
	L.resize(N);
	int i=0;
	for(i=0;i<N;i++)
	{
		L[S[i]]=S[i]);
	}
}

void union_set(int x, int y)
{
	L[x]=y;
}

int find_set(int x)		//with path compression
{
	if(x==L[x])
		return x;
	int root;
	root=find_set(L[x]);
	L[x]=root;
	return root;
}*/

li A[1000005];
li B[1000005];
char s[1000005];
vector<li> V;

int main()
{
	long long T=0,N=0,M=0,P=0,X=0,R=0,L=0,I=0,i=0,j=0,k=0,len=0,end=0,max=0,x=0,y=0,z=0,flag=0;
	scanf("%lld",&T);
	while(T--)
	{
		scanf("%lld%lld%lld%lld",&N,&M,&P,&X);
		scanf("%s",s);
		len=strlen(s);
		for(j=0;j<len;j++)
		{
			B[j]=s[j]-'0';
		}
		x=N-1;
		z=1;
		while(x>0)
		{
			y=x%2;
			x=x/2;
			if(y==1)
				V.push_back(z);
			z=z*2;
		}
		for(i=V.size()-1;i>=0;i--)
		{
			x=(V[i]*P)%M;
			x=M-x;
			for(j=0;j<M;j++)
			{
				k=(j+x)%M;
				A[j]=(B[j]^B[k])^X;
			}
			for(j=0;j<M;j++)
			{
				B[j]=A[j];
			}
		}
		for(j=0;j<M;j++)
		{
			printf("%lld",B[j]);
		}
		printf("\n");
		V.clear();
	}		
	return 0;
}

	

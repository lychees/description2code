#include <iostream>
#include <cstdio>
#include <algorithm>
#include <map>
#include <utility>
#include <vector>

#define llu long long unsigned
#define lli long long int
#define MIN(a,b) ( (a) < (b) ? (a) : (b))
#define MAX(a,b) ( (a) > (b) ? (a) : (b))
#define checkbit(n,b) ( (n >> b) & 1)

using namespace std;

map<int,int> registry;

int calc_max_pow(int food, int gold, int sam_pow, int pal_pow, int champ_pow)
{
	int sam_cost[] = {100,0};
	int pal_cost[] = {125,50};
	int champ_cost[] = {50,100};
	int power = 0;
	for(int pal = 0; pal*pal_cost[0] <= food && pal*pal_cost[1] <= gold; pal++)
	{
		for(int sam = 0; sam*sam_cost[0] + pal*pal_cost[0] <= food; sam++)
		{
			int champs = MIN((food - sam*sam_cost[0] - pal*pal_cost[0])/champ_cost[0], (gold- pal*pal_cost[1])/champ_cost[1]);
			power = MAX(champs *champ_pow + pal* pal_pow + sam * sam_pow, power); 
		}
	}
	return power;
}

int main(){
    int t, food, gold, sam_pow, pal_pow, champ_pow, existing_pow;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&food);
        scanf("%d",&gold);
        scanf("%d",&sam_pow);
        scanf("%d",&pal_pow);
        scanf("%d",&champ_pow);
        scanf("%d",&existing_pow);
        registry.clear();
        int pow_fajlu = calc_max_pow(food,gold,sam_pow,pal_pow,champ_pow);
        if(existing_pow < pow_fajlu)
            printf("%d\n",pow_fajlu- existing_pow);
        else
            printf("%d\n", -1);
    }
    return 0;
}
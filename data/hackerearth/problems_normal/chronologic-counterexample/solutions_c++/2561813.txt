#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_map>
#include<unordered_set>
//#include<quadmath.h>
using namespace std;
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
vector<pair<int, int> > vv;

int main()
{
	int n;
	scanf("%d", &n);
	vector<int> v;
	int m;
	scanf("%d", &m);
	for (int i = n; i >= 1; i--){
		v.push_back(i);
	}
	for (int i = 0; i<m; i++){
		int a, b;
		scanf("%d%d", &a, &b);
		a--;
		b--;
		vv.push_back(make_pair(a, b));
		sort(v.begin() + a, v.begin() + b + 1);
	}
	bool ok = false;
	for (int i = 0; i<n; i++){
		if (v[i] != i + 1){
			ok = true;
			break;
		}
	}
	if (ok == false){
		puts("All ok!");
		return 0;
	}
	vector<int> ans;
	vector<int> sorted;
	sorted = v;
	sort(sorted.begin(), sorted.end());
	vector<int> kari = sorted;
	reverse(kari.begin(), kari.end());
	for (int i = 0; i<kari.size(); i++){
		set<int> s;
		for (int j = i; j<kari.size(); j++){
			s.insert(kari[j]);
		}
		set<int>::iterator ite;
		int mv = kari[i];
		for (ite = s.begin(); ite != s.end(); ite++){
			vector<int> tmp = kari;
			int ind = -1;
			for (int j = i; j<tmp.size(); j++){
				if (tmp[j] == (*ite)){
					tmp[j] = mv;
					ind = j;
				}
			}
			tmp[i] = (*ite);
			if (i + 1 < kari.size()){
				sort(tmp.begin() + i + 1, tmp.end());
				reverse(tmp.begin() + i + 1, tmp.end());
			}
			for (int ii = 0; ii<vv.size(); ii++){
				sort(tmp.begin() + vv[ii].first, tmp.begin() + vv[ii].second + 1);
			}
			if (tmp != sorted){
				kari[i] = (*ite);
				kari[ind] = mv;
				break;
			}
		}
	}
	for (int i = 0; i<kari.size(); i++){
		if (i){
			printf(" ");
		}
		printf("%d", kari[i]);
	}
	puts("");
	return 0;
	/*for(int i=0;i<kari.size();i++){
	for(int j=0;j<kari.size();j++){
	for(int k=0;k<kari.size();k++){
	int ta=kari[i];
	int tb=kari[j];
	int tc=kari[k];
	kari[i]=tb;
	kari[j]=tc;
	kari[k]=ta;
	vector<int> tmp=kari;
	for(int i1=0;i1<vv.size();i1++){
	sort(tmp.begin()+vv[i1].first,tmp.begin()+vv[i1].second+1);
	}
	if(tmp!=sorted){
	if(ans.size()==0){
	ans=kari;
	}
	ans=min(ans,kari);
	}
	kari[i]=ta;
	kari[j]=tb;
	kari[k]=tc;
	}
	}
	}*/
	sort(kari.begin(), kari.end());
	bool ok2 = false;
	while (clock() / (double)(CLOCKS_PER_SEC)<1.9){
		next_permutation(kari.begin(), kari.end());
		vector<int> tmp = kari;
		for (int i = 0; i<vv.size(); i++){
			sort(tmp.begin() + vv[i].first, tmp.begin() + vv[i].second + 1);
		}
		if (tmp != sorted){
			if (ans.size() == 0){
				ans = kari;
			}
			ans = min(ans, kari);
			ok2 = true;
		}
		else{
			if (ok2){
				return 1;
			}
		}
	}
	if (ans.size() == 0){
		ans = sorted;
		reverse(ans.begin(), ans.end());
		//	return 0;
	}
	for (int i = 0; i<ans.size(); i++){
		if (i){
			printf(" ");
		}
		printf("%d", ans[i]);
	}
	puts("");
	return 0;
}
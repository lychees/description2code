#include<iostream>
#include<vector>

using namespace std;
vector <int> w;
vector <int> v;

int max(int a, int b)
{
	return a>b?a:b;
}

int my_maximize(int ni, int cap)
{
	if(ni<=0 || cap<=0)
		return 0;
	if(w[ni-1] > cap)
		return my_maximize(ni-1, cap);
	return max(v[ni-1] + my_maximize(ni-1, cap-w[ni-1]),\
		   my_maximize(ni-1, cap));
}

int my_maximize2(int ni, int cap)
{
	int i,j;
	int cost[ni][cap+1];
	for(i=0; i<=cap; ++i)
	{
		cost[0][i]=0;
	}
	for(i=0;i<ni;++i)
	{
		cost[i][0]=0;
		for(j=1;j<=cap;++j)
		{
			if(w[i] <= j)
				if(i==0)
					cost[i][j] = v[i];
				else
					cost[i][j] = max(v[i] + cost[i-1][j-w[i]],\
							 cost[i-1][j]);
			else
				if(i==0)
					cost[i][j] = 0;
				else
					cost[i][j] = cost[i-1][j];
		}
		
	}
	

/*	for(i=0;i<ni;i++)
	{
		cout<<endl;
		for(j=0;j<cap;j++)
			cout<<cost[i][j]<<" ";
	}*/
	return cost[ni-1][cap];
}

int main()
{
	int tc;
	cin>>tc;
	while(tc--)
	{
		int ni=0,cap=0,i=0,wt=0,val=0,profit=0;
		cin>>ni>>cap;
		for(i=0;i<ni;i++)
		{
			cin>>wt;
			w.push_back(wt);
		}
		for(i=0;i<ni;i++)
		{
			cin>>val;
			v.push_back(val);
		}
		profit = my_maximize2(ni,cap);
		cout<<profit<<endl;
		w.clear();
		v.clear();
	}
	return 0;
}

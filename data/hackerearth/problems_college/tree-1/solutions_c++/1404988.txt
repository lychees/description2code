#include<bits/stdc++.h>
using namespace std;

const int N=100005;

int p[N];
int tree[4*N];
vector<int>adj[N];
int ctr=1;
int size[N];
bool visited[N];
int lazy[4*N];
int m;
int first;

void build(int node,int a,int b) {
    if(a==b) {
        tree[node]=1;
        lazy[node]=0;
        return;
    }
    build(node*2,a,(a+b)/2);
    build(node*2+1,1+(a+b)/2,b);
    tree[node]=tree[node*2]+tree[node*2+1];
}
void update(int node,int a,int b,int i,int j,int value) {
    if(lazy[node]!=0) {
        if(lazy[node]==1) {
            tree[node]=0;
        } else {
            tree[node]=b-a+1;
        }
        if(a!=b) {
            lazy[node*2]=lazy[node];
            lazy[node*2+1]=lazy[node];
        }
        lazy[node]=0;
    }
    if(a>b||a>j||b<i) {
        return;
    }
    if(a>=i&&b<=j) {
        if(value==1) {
            tree[node]=0;
        } else {
            tree[node]=b-a+1;
        }
        if(a!=b) {
            lazy[node*2]=value;
            lazy[node*2+1]=value;
        }
        return;
    }
    update(node*2,a,(a+b)/2,i,j,value);
    update(node*2+1,1+(a+b)/2,b,i,j,value);
    tree[node]=tree[node*2]+tree[node*2+1];
    return;
}
int query(int node,int a,int b,int i,int j) {
    if(a>b||a>j||b<i) {
        return 0;
    }
    if(lazy[node]!=0) {
        if(lazy[node]==1) {
            tree[node]=0;
        } else {
            tree[node]=b-a+1;
        }
        if(a!=b) {
            lazy[node*2]=lazy[node];
            lazy[node*2+1]=lazy[node];
        }
        lazy[node]=0;
    }
    if(a>=i&&b<=j) {
        return tree[node];
    }
    int q1=query(node*2,a,(a+b)/2,i,j);
    int q2=query(node*2+1,1+(a+b)/2,b,i,j);
    return q1+q2;
}
int dfs(int u) {
    int cnt=1;
    visited[u]=true;
    p[u]=ctr++;
    for(int i=0;i<adj[u].size();i++) {
        int v=adj[u][i];
        if(visited[v]==false) {
            cnt+=dfs(v);
        }
    }
    return size[p[u]]=cnt;
}
int main() {
    //freopen("g.cpp","r",stdin);
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++) {
            int val;
            scanf("%d",&val);
            if(val==0) {
                first=i;
            } else {
                adj[i].push_back(val);
                adj[val].push_back(i);
            }
    }
    dfs(first);
    int queries;
    build(1,1,n);
    scanf("%d",&queries);
    while(queries--) {
        int type,u;
        scanf("%d%d",&type,&u);
        if(type==1) {
            update(1,1,n,p[u]+1,p[u]+size[p[u]]-1,2);
        } else if(type==2) {
            update(1,1,n,p[u]+1,p[u]+size[p[u]]-1,1);
        } else {
            int ans=query(1,1,n,p[u]+1,p[u]+size[p[u]]-1);
            printf("%d\012",ans);
        }
    }
    return 0;
}

#include <stdio.h>
#include <iostream>

using namespace std;

typedef long long int ll;

ll p[1000001];
ll a[32005];
ll tree[150000];

void build(ll node, ll start, ll end) {
	if(start == end) {
		tree[node] = a[start];
		return;
	}
	ll mid, p, q;
	mid = (start + end)/2;
	p = 2 * node;
	q = p + 1;
	build(p, start, mid);
	build(q, mid + 1, end);
	tree[node] = tree[p] + tree[q];
}
void update(ll node, ll start, ll end, ll id) {
	if(start == end) {
		a[id] = 1 - a[id];
		tree[node] = a[id];
		return;
	}
	ll mid, p, q;
	mid = (start + end)/2;
	p = 2 * node;
	q = p + 1;
	if(id <= mid) {
		update(p, start, mid, id);
	}
	else {
		update(q, mid + 1, end, id);
	}
	tree[node] = tree[p] + tree[q];
}
ll query(ll node, ll start, ll end, ll l, ll r) {
	if(start > end || start > r || end < l) {
		return 0;
	}
	if(start >= l && end <= r) {
		return tree[node];
	}
	ll mid, p, q;
	mid = (start + end)/2;
	p = 2 * node;
	q = p + 1;
	ll left, right, ans;
	left = query(p, start, mid, l, r);
	right = query(q, mid + 1, end, l, r);
	ans = left + right;
	return ans;
}
int main() {
	ll max, i, j;
	max = 1000000;
	for(i = 2; i * i <= max; i++) {
		if(p[i] == 0) {
			for(j = i * i; j <= max; j+=i) {
				p[j] = 1;
			}
		}
	}
	p[0] = 1;
	p[1] = 1;
	int t;
	scanf("%d", &t);
	while(t--) {
		ll n;
		scanf("%lld", &n);
		ll i;
		for(i = 0; i <= 4 * n; i++) {
			tree[i] = 0;
		}
		for(i = 1; i <= n; i++) {
			scanf("%lld", &a[i]);
			a[i] = 1 - p[a[i]];
		}
		build(1, 1, n);
		ll q;
		scanf("%lld", &q);
		while(q--) {
			char ch;
			ll l, r, ans;
			scanf("\n%c %lld %lld", &ch, &l, &r);
			//cout << ch << l << r << endl;
			if(ch == 'A') {
				ans = query(1, 1, n, l, r);
				printf("%lld\n", ans);
			}
			else {
				ll val = 1 - p[r];
				if(val != a[l]) {
					update(1, 1, n, l);
				}
			}
		}
	}
	
}
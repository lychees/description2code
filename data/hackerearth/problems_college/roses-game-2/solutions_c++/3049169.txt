#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 

 
// a structure to represent a graph

 
// A utility function to find the subset of an element i
int find(int parent[], int i)
{
	if(i==-1)
	{
		return -1;
	}
    if (parent[i] == -1)
        return i;
    return find(parent, parent[i]);
}
 
// A utility function to do union of two subsets 
void Union(int parent[], int x, int y)
{
    int xset = find(parent, x);
    int yset = find(parent, y);
    parent[xset] = yset;
}
 
// The main function to check whether a given graph contains 
// cycle or not
int isCycle( int a[],int n )
{
    // Allocate memory for creating V subsets
    int *parent = (int*) malloc( n * sizeof(int) );
 
    // Initialize all subsets as single element sets
    memset(parent, -1, sizeof(int) * n);
 
    // Iterate through all edges of graph, find subset of both
    // vertices of every edge, if both subsets are same, then 
    // there is cycle in graph.
    int i=0;
    while(1)
    {
        int x = find(parent, i);
        int y = find(parent, a[i]);
    	if(y==-1)
    	return 1;
 
        if (x == y)
            return 0;
 		else
 	{
 	
        Union(parent, x, y);
        i=a[i];
    	}
	}
    return 1;
}
 
// Driver program to test above functions
int main()
{
    /* Let us create following graph
         0
        |  \
        |    \
        1-----2 */    
    int n,i,j,t;
    scanf("%d",&t);
    while(t--)
    {
    	scanf("%d",&n);
    	int a[n];
    	for(i=0;i<n;i++)
    	{
    		scanf("%d",&a[i]);
    	}
 
    if (isCycle(a,n))
        printf( "Win\n" );
    else
        printf( "Lose\n" );
	}
    return 0;
}
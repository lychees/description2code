#include<bits/stdc++.h>
using namespace std;
int n,e,a1[10004],cca,visited[10004];

struct node
{
	int p,q;
}thr[10004];

list<int> one[10004],two[10004];

int f1(int i)
{
	if(i==a1[i])
	return i;
	
	a1[i]=f1(a1[i]);
	return a1[i];
}
void union1(int i,int j)
{
	f1(i);
	f1(j);
	int mx=max(a1[i],a1[j]);
	int mn=min(a1[i],a1[j]);
	
	a1[mx]=a1[mn];
}
void init()
{
	for(int i=0;i<=n;++i)
	a1[i]=i;
}

void dfsa(int n)
{
	visited[n]=1;
	cca++;
	list<int>::iterator it;
	for(it=one[n].begin();it!=one[n].end();++it)
	{
		if(!visited[*it])
		dfsa(*it);
	}
	
}
int DFSA()
{
	for(int i=1;i<=n;++i)
	visited[i]=0;
	
	cca=0;
	dfsa(1);
//	cout<<"\none"<<cca;
	if(cca==n)
	return 1;
	else
	return 0;
}

void dfsb(int n)
{
	visited[n]=1;
	cca++;
	list<int>::iterator it;
	for(it=two[n].begin();it!=two[n].end();++it)
	{
		if(!visited[*it])
		dfsb(*it);
	}
	
}
int DFSB()
{
	for(int i=1;i<=n;++i)
	visited[i]=0;
	
	cca=0;
	dfsb(1);
//	cout<<"\ntwo"<<cca;
	if(cca==n)
	return 1;
	else
	return 0;
}

int main()
{
	int i,p,q,t,c3=0;
	cin>>n>>e;
	init();
	for( i=0;i<e;++i)
	{
		cin>>p>>q>>t;
		if(t==1)
		{ one[p].push_back(q);   one[q].push_back(p) ;}
		else
		if(t==2)
		{ two[p].push_back(q);   two[q].push_back(p) ;}
		else
		{ one[p].push_back(q);   one[q].push_back(p);
		 two[p].push_back(q);   two[q].push_back(p) ; 
		thr[c3].p=p;   thr[c3].q=q; c3++; }
	}	
	
	if(DFSA()==0 || DFSB()==0)
	{
		cout<<"-1";
		return 0;
	}
	//******************here we left the case of "  -1  " ******************
	node x;
	int count3=0;
	for(i=0;i<c3;++i)
	{
		x=thr[i];
		if(f1(x.p)!=f1(x.q))
		{
			union1(x.p,x.q);
			count3++;
		}
	}
//	cout<<"\ncount3 is "<<count3<<'\n';
	int ans=n-1-count3;
	ans=ans+ans+count3;
	cout<<e-ans;
		
}
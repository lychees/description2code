#include <iostream>
#include <queue>
using namespace std;

#define MOD 1000000007
class coor
{
public:
  long long x;
  long long y;
    coor (long long i, long long j)
  {
    x = i;
    y = j;
  }
};

long long pushChildren (long long x, long long y);
queue < coor > myq;
long long arr[1005][1005];
long long n, m, q;
long long fact[1000001];

int  main ()
{
  long long tc = 0;
  cin >> tc;
  fact[0] = 1;
  for (int i = 1; i < 1000001; i++)
    {
	fact[i] = (i* fact[i-1])%MOD;
    }
  while (tc--)
    {
      if (!myq.empty ())
	cout << "Error" << endl;
      cin >> n >> m >> q;
      long long horses[q+1][2]; //1 -> q
      for (long long i = 1; i <= n; i++)
	{
	  for (long long j = 1; j <= m; j++)
	    {
	      arr[i][j] = 0;
	    }
	}
      long long a = 0, b = 0, ans1 = 0, ans2 = 1;
      for (long long i = 1; i <= q; i++)
	{
	  cin >> a;
	  cin >> b;
	  arr[a][b] = 1; horses[i][0]=a; horses[i][1]=b;
	}
      long long flag = 0, xyz=1;
      while (ans1 < q)
	{
	  //pick a horse from horses array, it should not be processed  
 	  while(arr[horses[xyz][0]] [horses[xyz][1]] != 1)
              xyz++;
	  a = horses[xyz][0];
	  b = horses[xyz][1];
	  long long temp = 1;
	  arr[a][b] = 0;
	  temp = temp + pushChildren (a, b);
	  while (!myq.empty ())
	    {
	      coor xyz (0, 0);
	      xyz = myq.front ();
	      myq.pop ();
	      temp = temp + pushChildren (xyz.x, xyz.y);
	    }
	  ans1 = ans1 + temp;
          ans2 = (ans2* fact[temp])%MOD;
	  xyz++;
	}
      //for (long long i = 0; i <= tempcounter; i++)
	//ans2 = (ans2 * temparr[i]) % MOD;
      cout << ans2 << endl;
    }
}

/*long long
fact (long long num)
{
  long long ans = 1;
  for (long long i = 1; i <= num; i++)
    ans = (ans * i) % MOD;
  return ans;
}*/

long long
pushChildren (long long x, long long y)
{
  long long count = 0;
  if ((x - 2 > 0) && (y - 1 > 0) && (arr[x - 2][y - 1] == 1))
    {
      ////cout << "Pushing " << x - 2 << ", " << y - 1 << endl;
      myq.push (coor (x - 2, y - 1));
      arr[x - 2][y - 1] = 0;
      count++;
    }
  if ((x + 2 <= n) && (y - 1 > 0) && (arr[x + 2][y - 1] == 1))
    {
      ////cout << "Pushing " << x + 2 << ", " << y - 1 << endl;
      myq.push (coor (x + 2, y - 1));
      arr[x + 2][y - 1] = 0;
      count++;
    }
  if ((x - 1 > 0) && (y - 2 > 0) && (arr[x - 1][y - 2] == 1))
    {
      ////cout << "Pushing " << x - 1 << ", " << y - 2 << endl;
      myq.push (coor (x - 1, y - 2));
      arr[x - 1][y - 2] = 0;
      count++;
    }
  if ((x + 1 <= n) && (y - 2 > 0) && (arr[x + 1][y - 2] == 1))
    {
      ////cout << "Pushing " << x + 1 << ", " << y - 2 << endl;
      myq.push (coor (x + 1, y - 2));
      arr[x + 1][y - 2] = 0;
      count++;
    }
  if ((x - 2 > 0) && (y + 1 <= m) && (arr[x - 2][y + 1] == 1))
    {
      ////cout << "Pushing " << x - 2 << ", " << y + 1 << endl;
      myq.push (coor (x - 2, y + 1));
      arr[x - 2][y + 1] = 0;
      count++;
    }
  if ((x + 2 <= n) && (y + 1 <= m) && (arr[x + 2][y + 1] == 1))
    {
      ////cout << "Pushing " << x + 2 << ", " << y + 1 << endl;
      myq.push (coor (x + 2, y + 1));
      arr[x + 2][y + 1] = 0;
      count++;
    }
  if ((x - 1 > 0) && (y + 2 <= m) && (arr[x - 1][y + 2] == 1))
    {
      ////cout << "Pushing " << x - 1 << ", " << y + 2 << endl;
      myq.push (coor (x - 1, y + 2));
      arr[x - 1][y + 2] = 0;
      count++;
    }
  if ((x + 1 <= n) && (y + 2 <= m) && (arr[x + 1][y + 2] == 1))
    {
      ////cout << "Pushing " << x + 1 << ", " << y + 2 << endl;
      myq.push (coor (x + 1, y + 2));
      arr[x + 1][y + 2] = 0;
      count++;
    }
  //cout << "count in pshclildred " << count << endl;
  return count;

}

#include<bits/stdc++.h>
using namespace std;
#define pb push_back
vector<int> arti;
vector<pair<int,int> > bri;
vector<int> v[100003];
int low[100004];
int desc[100004];
int visited[100004];
int temp=0;
int cmp(pair<int,int> p1,pair<int,int> p2)
{
    if(p1.first<=p2.first)
        return 1;
    if(p1.first>p2.first)
        return 0;
        else
        {
            if(p1.second<=p2.second)
                return 1;
            return 0;
        }

}

void dfs(int vertex,int par)
{
    if(visited[vertex]==1)
        return ;
            int i;
      visited[vertex]=1;
        desc[vertex]=++temp;
        low[vertex]=desc[vertex];
        int ans=0;
    for(i=0;i<v[vertex].size();i++)
    {
        if(visited[v[vertex][i]]==0)
        {
            dfs(v[vertex][i],vertex);
            int cld=v[vertex][i];
            ans++;
            low[vertex]=min(low[vertex],low[cld]);
            if(par==-1&&ans>1)
            {
                arti.pb(vertex);
            }
            if(par!=-1&&low[cld]>=desc[vertex])
            {
              arti.pb(vertex);
            }
            if(low[cld]>desc[vertex])
            {
               bri.push_back(make_pair(vertex,cld));
            }



        }
        else if(v[vertex][i]!=par)
        {
            low[vertex]=min(low[vertex],desc[v[vertex][i]]);
        }


    }

}
int main()
{
   int nodes,edges;
   cin>>nodes>>edges;
   int i,a,b;
   for(i=1;i<=edges;i++)
   {
       cin>>a>>b;
       v[a].pb(b);
       v[b].pb(a);
   }
   for(i=1;i<=nodes;i++)
   {
       if(visited[i]==0)
       {
           dfs(i,-1);
       }
   }
  int q;
  cin>>q;
  sort(arti.begin(),arti.end());

  while(q--)
  {
      cin>>a;
      int x=lower_bound(arti.begin(),arti.end(),a)-arti.begin();
      // cout<<x<<endl;
      if(arti[x]!=a)
      {
          cout<<"Not Satisfied"<<endl;
      }
      else
      {
          cout<<"Satisfied ";
          cout<<v[a].size()<<endl;
      }


  }

}


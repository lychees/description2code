#include <iostream>
#include <queue>
#include <map>
#include <climits>
#define inf INT_MAX

using namespace std;

unsigned int dist[100][100];
int graph[100][100];

void floydWarshell (int V){
	int i, j, k;

	for (i = 0; i < V; i++)
		for (j = 0; j < V; j++)
			dist[i][j] = graph[i][j];

	for (k = 0; k < V; k++){
		for (i = 0; i < V; i++){
			for (j = 0; j < V; j++){
				if ((dist[i][k] * dist[k][j] != 0) && (i != j)) {
					if ((dist[i][k]!=inf ||dist[k][j]!=inf)&&(dist[i][k] + dist[k][j] < dist[i][j]) || (dist[i][j] == 0)) {
						dist[i][j] = dist[i][k] + dist[k][j];
						dist[j][i] = dist[i][k] + dist[k][j];
					}
				}
			}
		}
	}

}

int main(){
	int n,d,q;
	cin >> n >> d;
	map<string,int> m;

	for (int i = 0; i < n; i++ ) {
		string str;
		cin >> str;
		m.insert(pair<string,int>(str,i));
	}


	for (int i = 0; i < n; i++ ) {
		for (int j = 0; j < n; j++ ) {
			if (i == j) {
				graph[i][j] = 0;
			} else {
				graph[i][j] = inf;
			}
		}
	}

	for (int i = 0; i < d; i++) {	
		string str1,str2;
		int val;
		cin >> str1;
		cin >> str2;
		cin >> val;
		graph[m[str1]][m[str2]] = val;
		graph[m[str2]][m[str1]] = val;
	}


	floydWarshell(n);

	cin >> q;

	for ( int i = 0; i < q; i++) {
		string str1, str2;
		cin >> str1 >> str2;
		cout << dist[m[str1]][m[str2]] << endl;
	}
	return 0;
}

#include <cstdio>
#include <cstring>
#include <vector>
#include <bits/stdc++.h>

#define N 109

using namespace std;

vector <int> edges [N];
vector <int> rEdges [N];    // reversed edges
vector <int> sortedNode;

bool vis [N];

int comp [N];               // component number of a node
int inDegree [N];           // in-degree of a component

long long sum[N];
long long cost[N];
void reset ()
{
    for ( int i = 0; i < N; i++ )
    {
        edges [i].clear();
        rEdges [i].clear();
    }

    sortedNode.clear();

    memset (vis, false, sizeof vis);
    memset (inDegree, 0, sizeof inDegree);
    memset(sum, 0, sizeof sum);
}

void dfs1 (int x)
{
    vis [x] = true;

    for ( size_t u = 0; u < edges [x].size(); u++ )
    {
        if ( !vis [edges [x] [u]] )
            dfs1(edges [x] [u]);
    }

    sortedNode.push_back(x);
}
int id[100001];
void dfs2 (int x, int c)
{
    vis [x] = false;

    comp [x] = c;

    id[c]++;

    for ( size_t u = 0; u < rEdges [x].size(); u++ )
    {
        if ( vis [rEdges [x] [u]] )
            dfs2(rEdges [x] [u], c);
    }
}

int main ()
{
    int t;
    cin>>t;
    while(t--)
    {
        int numberOfNodes;
        int numberOfEdges;

        cin>>numberOfNodes;
        cin>>numberOfEdges;

        reset ();
        for(int i = 0; i < numberOfNodes; i++)
            cin>>cost[i];

        for ( int i = 0; i < numberOfEdges; i++ )
        {
            int from;       // edges from
            int to;
            cin>>from;
            cin>>to;         // edges to

            // take input in "form" and "to"

            edges [from].push_back(to);
            rEdges [to].push_back(from);
        }

        for ( int i = 0; i < numberOfNodes; i++ )
        {
            if ( !vis [i] )
                dfs1 (i);
        }

        int componentId = 0;

        for ( int i = sortedNode.size() - 1; i >= 0; i-- )
        {
            if ( vis [sortedNode [i]] )
                dfs2(sortedNode [i], ++componentId);
        }
        long long res = 0;
        for(int i = 0; i < numberOfNodes; i++)
        {
            sum[comp[i]] += cost[i];
            res = max(res, sum[comp[i]]);
        }
        cout<<res<<endl;
    }
    return 0;
}

/*


5 4
2 3 5 1 2
0 1
1 2
2 3
3 4



*/

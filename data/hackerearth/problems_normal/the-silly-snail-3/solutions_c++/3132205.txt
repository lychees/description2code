#include<iostream>
#include<utility>
#include<map>
#include<stack>

using namespace std;
typedef pair<int, int> Value;
map <int, Value > mapTree;
stack <int> q;

void navigate()
{
	while(!mapTree.empty() && !q.empty())
	{
		int x = q.top();
		cout<<x<<" ";
		q.pop();
		map <int, Value>::iterator it;
		it = mapTree.find(x);
		if(it != mapTree.end())
		{
			if(it->second.second)
				q.push(it->second.second);
			if(it->second.first)
				q.push(it->second.first);
		}
	}
}

int main()
{
	int tc;
	cin>>tc;
	while(tc--)
	{
		int ne,x,y,z,startX=-1;
		cin>>ne;
		while(ne-- >0)
		{
			cin>>x>>y>>z;
			if(startX==-1)
			{
				startX=x;
				q.push(x);
			}
			mapTree.insert(make_pair(x,make_pair(y,z)));
		}
		navigate();
		mapTree.clear();
		if(startX!=-1)
 		    	cout<<endl;
 		else
 				cout<<1<<endl;
	}
	return 0;
}

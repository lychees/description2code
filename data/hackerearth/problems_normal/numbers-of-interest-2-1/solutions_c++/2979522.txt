#include<iostream>
#include<vector>
#include<bitset>
#include<cmath>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
const int LIM = 1000009;
ll sieve_size = 1000100;
vi primes;
bitset<10000010> bs;

int x[1000009];
int y[LIM];
int F[LIM];
int G[LIM];

void sieve()
{
    bs.set();
    bs[0] = bs[1] = 0;
    for(ll i=2; i<=sieve_size; i++)
    {
        if (bs[i])
        {
            for(ll j=i*i; j<=sieve_size; j+=i)
                bs[j] = 0;
            primes.push_back(i);
        }
    }
}



ll sumDiv(ll n)
{
    ll pf_idx = 0, pf = primes[pf_idx], ans=1;
    while(pf*pf<=n)
    {
        ll power = 0;
        while(n%pf==0) {n/= pf; power++;}
        ans *= ((ll)pow((double)pf, power + 1.0)-1)/(pf-1);
        pf = primes[++pf_idx];
    }

    if (n!=1) ans *= ((ll)pow((double)n, 2.0) -1)/(n-1);
    return ans;
}

void setX()
{
    for(ll i=2; i<LIM; i++)
    {
        x[i] = -1;
    }
    for(ll i=2; i<LIM; i++)
    {
        if (bs[i])
        {
            x[i] = i;
            for(ll j=i*i; j<LIM; j+=i)
            {
                if (x[j]==-1)
                x[j] = i;
            }
        }
    }

}

void setY()
{
    for(ll i=2; i<LIM; i++)
    {
        y[i] = 1;
    }

    for(ll i=2; i<LIM; i++)
    {
            for(ll j=i+i; j<LIM; j+=i)
            {

                y[j] += i;
            }

    }

}

void setF()
{
    F[0] = F[1] = 0;
    for(ll i=2; i<LIM; i++)
    {
        F[i] = F[i-1] + x[i];
    }
}

void setG()
{
    G[0] = G[1] = 0;
    for(ll i=2; i<LIM; i++)
    {
        G[i] = G[i-1] + y[i];
    }
}


int main()
{
    sieve();
    //cout<<primes.size()<<endl;
    //cout<<"done"<<endl;
    setX();
    //cout<<"done"<<endl;
    setY();
    //cout<<"done"<<endl;
    setF();
    //cout<<"done"<<endl;
    setG();
    //cout<<"donmke"<<endl;

    int t;
    int n;
    cin>>t;
    while(t--)
    {
        cin>>n;
        //cout<<F[n]<<" "<<G[n]<<endl;
        cout<<(F[n] + G[n] )%n<<endl;
    }
}

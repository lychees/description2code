#include<iostream>
#include<algorithm>
#include<set>
#include<vector>
using namespace std;

int const N = 2e5 + 41;
long long const INF = 1e9 * 1LL * 1e9;

int n, m, s, k[N];
long long d[N];
vector<pair<int, int>> e[N];
set<pair<long long, int>> q;

int main(){
#ifdef _DEBUG
	freopen("input.txt","r",stdin);
#endif
	scanf("%d%d%d",&n,&m,&s);
	--s;
	for(int i=0;i<n;++i){
		scanf("%d",&k[i]);
	}
	for(int i=0;i<m;++i){
		int a, b, c;
		scanf("%d%d%d",&a,&b,&c);
		--a;
		--b;
		e[a].push_back(make_pair(b, c));
		e[b].push_back(make_pair(a, c));
	}

	for(int i=0;i<n;++i){
		d[i] = INF;
	}
	d[s] = 0;
	q.insert(make_pair(d[s], s));
	while(q.size()){
		pair<long long, int> p = *q.begin();
		q.erase(p);
		int id = p.second;
		long long di = p.first;
		for(int i=0;i<e[id].size();++i){
			int to = e[id][i].first;
			int co = e[id][i].second;
			if(d[to] > di + co){
				q.erase(make_pair(d[to], to));
				d[to] = di + co;
				q.insert(make_pair(d[to], to));
			}
		}
	}

	long long sumK = 0;
	long long sum = 0;
	for(int i=0;i<n;++i){
		if(d[i] == INF){
			continue;
		}
		sumK += k[i];
		sum += d[i] * k[i];
	}
	for(int i=0;i<n;++i){
		if(i){
			printf(" ");
		}
		if(d[i] == INF){
			printf("0");
			continue;
		}
		long long ans = 0;
		ans += d[i] * (sumK - k[i]) + sum - d[i] * k[i];
		printf("%lld",ans);
	}
	printf("\n");
	



	return 0;
}
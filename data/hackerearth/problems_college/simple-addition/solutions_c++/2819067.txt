#include <stdio.h>
#include <iostream>
#include <queue>
#include <algorithm>

#define ll long long int
using namespace std;

// void bfs(ll l, ll r, ll out, ll depth){
// 	//cout << l << " " << r << endl;
// 	if(depth >= ans)
// 		return;
// 	if(out == l || out == r){
// 		ans = min(ans, depth);
// 		return;
// 	}
// 	my.push(make_pair(make_pair(l + r, r) , depth + 1));
// 	my.push(make_pair(make_pair(l, l + r) , depth + 1));
// 	pair<pair<ll, ll>, ll> nxt = my.front();
// 	my.pop();
// 	bfs(nxt.first.first, nxt.first.second, out, nxt.second);
// }

ll dfs(int x, int y){
	if(x < 1 || y < 1)
		return 99999999;
	if(x == 1)
		return y - 1;
	if(y == 1)
		return x - 1;
	if(x > y){
		return (dfs(x - y, y) + 1);
	}
	else
		return (dfs(y - x, x) + 1);
}
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int t;
	ll l;
	scanf("%d", &t);
	ll ans = 99999999;
	while(t--){
		ans = 99999999;
		scanf("%lld", &l);
		if(l == 1){
			printf("0\n");
			continue;
		}
		if(l%2 == 1){
			for(int j = 2 ; j <= l ; j += 2){
				//cout << j << " " << l - j << endl;
				ans = min(ans , 1 + dfs(j, l - j));
			}
		}
		else{
			for(int j = 1 ; j <= l/2 ; j += 2)
				ans = min(ans , 1 + dfs(j, l - j));
			// int x = l/2 + 1;
			// while(x%2 == 0)
			// 	x++;
			// ans = (1 + dfs(x, l - x));
		}
		printf("%lld\n", ans);
	}
	return 0;
}

#include <iostream>
#include<string.h>
using namespace std;
bool prime[1000001];

void SieveOfEratosthenes(int n);
bool funct(int num);


int main() {



memset(prime, true, (sizeof(bool))*1000001);
		SieveOfEratosthenes(1000001);
		
		//int n=4;
		prime[0]=false;
		prime[1]=false;
	
		
		int arr[1000001];
memset(arr, true, sizeof(int)*1000001);
		
		arr[0]=0;
		arr[1]=0;
		arr[2]=1;
		arr[3]=2;
		int i;
		for(i=2;i<=1000000;i++)
		{
			
		  if(prime[i]==true)	
		   {
		   	arr[i]=arr[i-1]+1;
		   	
		   }else if(funct(i))
		    arr[i]=arr[i-1]+1;
		    else 
			arr[i]=arr[i-1];
		}
		if(funct(110))
		cout<<arr[110]<<"  "<<arr[114]<<endl;
	int n,l,r;
		scanf("%d",&n);
		while(n>0)
		{
		n--;
		scanf("%d%d",&l,&r);
		
		int temp2=arr[r]-arr[l-1];
		printf("%d\n",temp2);
		}

		return 0;
	
	}
void SieveOfEratosthenes(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
   
   memset(prime, true, sizeof(prime));
 //Arrays.fill(prime, Boolean.TRUE);
 
    for (int p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (int i=p*2; i<=n; i += p)
                prime[i] = false;
        }
    }
 
    // Print all prime numbers

}
bool funct(int num)
{
	
	int num2=0;
	//cout<<"num="<<num<<endl;
	int i=0;
	int temp=10;
	int temp3=num;
	while(temp3>0)
	{
		
		num2=num%temp;
	//	cout<<"num2="<<num2<<"  num="<<num<<endl;
		if(prime[num2])
		{
			
		//	cout<<"num2="<<num2<<"  num="<<num<<endl;
			return true;
		}
		//num=num/10;
		temp=temp*10;
		temp3=temp3/10;
	}
	
	return false;
}
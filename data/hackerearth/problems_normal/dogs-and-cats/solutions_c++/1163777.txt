//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i, n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int md = 1e6 + 3;
int fact[1000005], ifact[1000005];

int c(int n, int k) {
    int res = (1LL * fact[n] * ifact[k]) % md;
    res = (1LL * res * ifact[n - k]) % md;
    return res;
}

int Lucas(long long n, long long k) {
    if (k > n)
        return 0;
    int res = 1;
    while(n || k) {
        if (k % md > n % md) {
            return 0;
        }
        res = (1LL * res * c(n % md, k % md)) % md;
        n /= md;
        k /= md;
    }
    return res;
}

int inv(int x) {
    int res = 1;
    int n = md - 2;
    while(n > 0) {
        if (n & 1) {
            res = (1LL * res * x) % md;
        }
        x = (1LL * x * x) % md;
        n /= 2;
    }
    return res;
}

void Solve() {
    int d, c, n;
    scanf("%d %d %d", &d, &c, &n);
    long long sum = 1LL * c * (n + 1);
    long long num = d + c;
    int res = 0;
    if (sum < num) {
        printf("%d\n", 0);
        return;
    }
    sum -= num;
    --n;
    for (int i = 0; i <= num; ++i) {
        long long x = sum - 1LL * (n + 1) * i;
        if (x < 0) {
            break;
        }
        if (i & 1) {
            res = (res + md - 1LL * Lucas(num, i) * Lucas(x + num - 1, num - 1) % md) % md;
        } else {
            res = (res + 1LL * Lucas(num, i) * Lucas(x + num - 1, num - 1)) % md;
        }
    }
    printf("%d\n", res);
}

int main(void) {
    #ifdef nobik
        freopen("input.txt", "rt", stdin);
        freopen("output.txt", "wt", stdout);
    #endif
    fact[0] = 1;
    for (int i = 1; i < md; ++i) {
        fact[i] = (1LL * fact[i - 1] * i) % md;
    }
    for (int i = 0; i < md; ++i) {
        ifact[i] = inv(fact[i]);
    }
    int t; scanf("%d", &t);
    for (int i = 0; i < t; ++i) {
        Solve();
    }
    return 0;
}

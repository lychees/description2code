#include<bits/stdc++.h>
using namespace std;
int n,e;
vector<vector<int> > v(1001);
vector<int> ans;
bool visited[1001];
int discover[1001];
int parent[1001];
int low[1001];
int tym;

void DFS(int s)
{
	int child=0;
	
	visited[s]=true;	
	
	low[s] = discover[s] = ++tym;
	
	//cout<<s<<endl;
	for(int i=0;i<v[s].size();i++)
	{
		if(!visited[v[s][i]])
		{
			child++;
			
			parent[v[s][i]]=s;
			
			DFS(v[s][i]);
			
			low[s]=min(low[s],low[v[s][i]]);
			
			if(parent[s]==-1 && child>1)
			ans.push_back(s);
			
			if(discover[s]<=low[v[s][i]] && parent[s]!=-1)
			ans.push_back(s);
			
		}
		
		else if(v[s][i]!=parent[s])
		{
			low[s]=min(low[s],low[v[s][i]]);		
//			cout<<endl;
//			cout<<discover[s]<<" "<<finish[s]<<endl;
		}
	}
}

void APutil()
{
	for(int i=1;i<=n;i++)
	{
		parent[i]=-1;
		if(!visited[i])
		{
			DFS(i);
		}
	}
}

int main()
{
	cin>>n>>e;
	for(int i=0;i<e;i++)
	{
		int a,b;
		cin>>a>>b;
		v[a].push_back(b);		
		v[b].push_back(a);
	}
	
	APutil();
	
	int q;
	cin>>q;
	
	while(q--)
	{
		int query;
		cin>>query;
		int ok=0;
		for(int i=0;i<ans.size();i++)
		{
			if(query==ans[i])
			{
				ok=1;
				cout<<"Satisfied "<<v[query].size()<<endl;
				break;
			}	
		}
		if(!ok)
		cout<<"Not Satisfied"<<endl;
	}
	
	return 0;
}
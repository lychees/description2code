// {{{ Headers
// vim:filetype=cpp:foldmethod=marker:foldmarker={{{,}}}

#include <cassert>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#include <algorithm>
#include <deque>
#include <functional>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#include <fstream>
#include <iostream>
#include <sstream>

#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;
// }}}

typedef long long int64;
const int INF = 0x3f3f3f3f;
template <class T> inline int len (const T &a) { return a.size (); }

int
main () {
#ifdef LOCALHOST
    freopen ("test.in", "r", stdin);
    // freopen ("test.out", "w", stdout);
#endif
    int T, N, num;
    scanf ("%d", &T);
    vector <int> v;
    while (T--) {
        v.clear ();
        scanf ("%d", &N);
        for (int i = 0; i < N; i++) {
            scanf ("%d", &num);
            v.push_back (num & 1);
        }
        vector <int64> u (N + 5, 0);
        u [0]++;
        int s = 0;
        for (int i = 0; i < N; i++) {
            s = (s + v [i]) % 2;
            u [s]++;
        }
        int K = 2;
        int64 ret = 0;
        for (int i = 0; i <= K - 1; i++)
            ret += u [i] * (u [i] - 1) / 2;
        int64 n = N;
        int64 tot = n * (n + 1) / 2;
        int64 even = ret;
        int64 odd = tot - even;
        // cout << even << " " << odd << '\n';
        if (even > odd) printf ("ANDI\n");
        else printf ("BOB\n");
    }


    return 0;
}

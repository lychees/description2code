#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <string>
#include <cstring>

using namespace std;

const int N = 100010;
const int INF = 2e9;
using Long = long long;

int dp[20][N], parent[N], depth[N], cu[N];
vector<int> e[N], c[N];

void dfs(int x, int p = 0, int d = 0) {
  depth[x] = d;
  parent[x] = p;
  for (int i = 0; i < e[x].size(); i++) {
    int y = e[x][i];
    if (y == p) continue;
    dfs(y, x, d + 1);
  }
}

int lca(int x, int y) {
  if (depth[x] < depth[y]) swap(x, y);
  for (int i = 19; i >= 0; i--) {
    if (depth[dp[i][x]] >= depth[y])
      x = dp[i][x];
  }
  if (x == y) return x;
  for (int i = 19; i >= 0; i--) {
    if (dp[i][x] != dp[i][y]) {
      x = dp[i][x];
      y = dp[i][y];
    }
  }
  return parent[x];
}

int dist(int x, int y) {
  return depth[x] + depth[y] - 2 * depth[lca(x, y)];
}

int main() {
  int n, m; scanf("%d%d", &n, &m);
  for (int i = 1; i <= n; i++) {
    scanf("%d", &cu[i]);
    c[cu[i]].push_back(i);
  }
  int u, v;
  for (int i = 1; i < n; i++) {
    scanf("%d%d", &u, &v);
    e[u].push_back(v);
    e[v].push_back(u);
  }
  dfs(1, 0);
  for (int i = 1; i <= n; i++) {
    dp[0][i] = parent[i];
  }
  for (int i = 1; i < 20; i++) {
    for (int j = 1; j <= n; j++) {
      dp[i][j] = dp[i - 1][dp[i - 1][j]];
    }
  }
  for (int i = 1; i <= m; i++) {
    int x = c[i][0], y = 0, mx = -1;
    for (int j = 0; j < c[i].size(); j++) {
      int d = dist(x, c[i][j]);
      if (d > mx) {
        mx = d;
        y = c[i][j];
      }
    }
    for (int j = 0; j < c[i].size(); j++) {
      int d = dist(y, c[i][j]);
      if (d > mx) mx = d;
    }
    printf("%d ", mx);
  }
  printf("\n");
  return 0;
}
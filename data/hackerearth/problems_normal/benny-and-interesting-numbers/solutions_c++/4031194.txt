#include <cstdio>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <map>
#include <complex>
#include <iterator>
#include <set>
#include <bitset>
#include <stack>
#include <list>
#include <queue>
#include <deque>
using namespace std;
typedef vector<int> VI;
typedef long long LL;
#define FOR(x,b,e) for(int x=b; x<=(e); ++x)
#define FORD(x,b,e) for(int x=b; x>=(e); --x)
#define REP(x,n) for(int x=0; x<(n); ++x)
#define VAR(v,n) __typeof(n) v = (n)
#define ALL(c) (c).begin(), (c).end()
#define SIZE(x) ((int)(x).size())
#define FOREACH(i,c) for(VAR(i,(c).begin()); i != (c).end(); ++i)
#define PB push_back
#define ST first
#define ND second

const int INF = 1000000001;
const double EPS = 10e-9;

typedef vector< VI > VVI;
typedef vector<LL> VLL;
typedef vector<string> VS;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define PF push_front
#define MP make_pair

inline bool IsZero(double x){return x >= -EPS && x <= EPS;}
template <typename T> int sgn(T val) { return (T(0) < val) - (val < T(0)); }

vector <int> primes;
bool prime[400000];

int main(){
	REP(i,400000) if(i%2 == 1)prime[i] = true;
	primes.PB(2);
	for(int i=3; i<400000; i++){
		if(prime[i]){
			primes.PB(i);
			for(int j=3*i; j<400000; j+=2*i) prime[j] = false;
		}
	}
	long long t,n;
	bool valid;
	cin >> t;
	while(t--){
		valid = true;
		cin >> n;
		REP(i,primes.size()){
			if(primes[i]*primes[i] > n) break;
			if(n % primes[i] == 0){
				if(n % (primes[i] * primes[i]) == 0){
					valid = false;
					break;
				}
				n /= primes[i];
			}
		}
		if(valid) cout << "Yes" << endl;
		else cout << "No" << endl;
	}

}

#include <bits/stdc++.h>
using namespace std;

struct cmp
{
	bool operator() (const pair<int, int>& a, const pair<int, int>& b)
	{
		return a.second < b.second;
	}
};
	multiset<pair<int,int>,cmp> myset;
//multiset<pair<int, int>, cmp> S;


int root(int i,int arr[]) {
	while(arr[i]!=i) {
		arr[i]=arr[arr[i]];
		i=arr[i];
	}
	return i;
}

void union1(int a1,int b1,int arr[],int size[]) {
	int a=root(a1,arr);
	int b=root(b1,arr);
	
	if(a==b)
		return;
	
	if (size[b] > size[a]) //a bigger set
		swap(a, b);
		
	myset.erase(myset.find(make_pair(a, size[a])));
	myset.erase(myset.find(make_pair(b, size[b])));
	size[a] += size[b];
	arr[b] = a;
	myset.insert(make_pair(a, size[a]));
}


int main()
{
	ios::sync_with_stdio(false);
	int n;
	cin>>n;
	int arr[n+1],size[n+1];
	int q;
	cin>>q;
//	pair<int,int> max,min; //i and value of group.

	
	for(int i=1;i<=n;i++) {
		arr[i]=i;
		size[i]=1;
		myset.insert(pair<int,int>(i,1));
	}
	
	
	
	int a,b;
	while(q--) {
		cin>>a>>b;
		union1(a,b,arr,size);
		int min=myset.begin()->second;
		int max=myset.rbegin()->second;
		cout<<(max-min)<<endl;
	}
	
   
    return 0;
}

#include <bits/stdc++.h>
#define ROW 200
#define COL 200
using namespace std;
int n,m,q,x,y,d,c;
bool visited[ROW][COL];
vector<vector<int> > v(200);

void DFS(int row, int col, int d, bool visited[][COL]){
    static int rowNbr[] = {-1,  0, 0,  1};
    static int colNbr[] = { 0, -1, 1,  0};
    visited[row][col] = true;
    for (int k = 0; k < 4; ++k)
        if ((row + rowNbr[k]>= 0) && (row + rowNbr[k] < n) &&
           (col + colNbr[k] >= 0) && (col + colNbr[k] < m) &&
           (abs(v[row + rowNbr[k]][col + colNbr[k]]-v[row][col])<=d &&
            !visited[row + rowNbr[k]][col + colNbr[k]])){
                c++;
                DFS(row + rowNbr[k], col + colNbr[k], d, visited);
        }
}

int main(){
    cin>>n>>m>>q;
    v.resize(n);
    for(int i=0; i<n; i++){
        vector<int> u(m);
        for(int j=0; j<m; j++){
            cin>>u[j];
        }
        v[i]=u;
    }
    while(q--){
        cin>>x>>y>>d;
        x--;y--;
        memset(visited, 0, sizeof visited);
        c=0;
        DFS(x,y,d,visited);
        cout<<c+1<<endl;
    }
    return 0;
}

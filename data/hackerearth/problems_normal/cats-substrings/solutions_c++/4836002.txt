#include <bits/stdc++.h>
using namespace std;

//// start ordered set
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
//typedef
//tre<
//  int,
//  null_type,
//  less<int>,
//  rb_tre_tag,
//  tre_order_statistics_node_update>
//ordered_set;
////end ordered set

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define RFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)
#define FILL(A,val) memset(A,val,sizeof(A))
#define ITER(it,a) for(__typeof(a.begin()) it=a.begin();it!=a.end();++it)
#define DBG1(a) cerr<<#a<<"="<<(a)<<"\n"
#define DBG2(a,b) cerr<<#a<<"="<<(a)<<", "<<#b<<"="<<(b)<<"\n"

#define ALL(V) V.begin(),V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef pair<int, int> PII;

const double PI = acos(-1.0);
const int INF = 1000 * 1000 * 1000 + 7;
const LL LINF = 1LL*INF*INF;

const int MAX = 100005;

struct node
{
	int len,link;
	map<char,int> g;
	int cnt;
	LL cnt2;
	node(){len = 0; link = -1;cnt = 0;cnt2=0;}
} A[MAX*5];
int sz = 1;
int lst = 0;


void add(char c)
{
	int cur = sz++;
	A[cur].len = A[lst].len+1;
	A[cur].cnt = 1;
	swap(lst,cur);

	for(;cur!=-1 && A[cur].g.count(c) == 0;cur=A[cur].link)
	{
		A[cur].g[c] = lst;
	}

	if(cur == -1)
	{
		A[lst].link = 0;
	}
	else
	{
		int q = A[cur].g[c];
		if(A[q].len == A[cur].len + 1)
		{
			A[lst].link = q;
		}
		else
		{
			int q1 = sz++;
			A[q1] = A[q];
			A[q1].len = A[cur].len+1;
			A[q].link = A[lst].link = q1;
			A[q1].cnt = 0;

			for(;cur!=-1 && A[cur].g[c] == q;cur = A[cur].link)
			{
				A[cur].g[c] = q1;
			}
		}
	}
}

VI w[MAX*3];

void calcCnt()
{
	FOR(i,1,sz)
		w[A[i].len].PB(i);
	RFOR(i,sz,1)
	{
		FOR(j,0,SZ(w[i]))
		{
			int v = w[i][j];
			A[A[v].link].cnt += A[v].cnt;
		}
	}

}

bool us[MAX];
void print(int v)
{
	us[v] = true;
	cout<<"^"<<v<<"^"<<A[v].link<<" "<<A[v].cnt<<endl;
	ITER(it,A[v].g)
	{
	//	cout<<v<<"-"<<it->first<<"->"<<it->second<<endl;
		if(!us[it->second])print(it->second);
	}
}

int getCnt(string& s)
{
	int v = 0;
	FOR(i,0,SZ(s))
	{
		if(A[v].g.count(s[i]))
			v=A[v].g[s[i]];
		else return 0;
	}

	return A[v].cnt;
}

LL getCnt2(int v)
{
	if(v == 0)return 0;
	if(A[v].cnt2!=0)return A[v].cnt2;

	int up = A[v].link;

	LL d = A[v].len - A[up].len;
//	cerr<<d<<" "<<A[v].cnt<<" "<<up<<endl;
	A[v].cnt2 = A[v].cnt * d + getCnt2(up);

	return A[v].cnt2;
}

LL getCnt2(int v,int len)
{
	if(v == 0)return 0;
	int up = A[v].link;
	//cerr<<v<<" *** "<<up<<" "<<len<<" "<<A[up].len<<" "<<getCnt2(up)<<endl;
	return getCnt2(up) + (len - A[up].len+0ll) * A[v].cnt;
}

LL getAns(string& s)
{
	LL ans = 0;
	int v = 0;
	int len = 0;
	FOR(i,0,SZ(s))
	{
		char c = s[i];
		while(v && !A[v].g.count(c))
		{
			v = A[v].link;
			len = A[v].len;
		}

		if(A[v].g.count(c))
		{
			v = A[v].g[c];
			len++;
			ans += getCnt2(v,len);
	//		cerr<<ans<<" "<<len<<endl;
		}
	}

	return ans;
}
int main()
{
    //ios_base::sync_with_stdio(0);
  //  freopen("in.txt","r",stdin);
    //freopen("f.out","w",stdout);

	int n;
	cin>>n;
	string a;
	FOR(i,0,n)
	{
		cin>>a;
		FOR(i,0,SZ(a))
		{
			add(a[i]);
		}

		add('#');
	}

	//print(0);

	calcCnt();


	int m;
	cin>>m;
	LL ans = 0;

	FOR(i,0,m)
	{
		cin>>a;
		LL cur = getAns(a);
		//cerr<<cur<<endl;
		ans += cur;
	}

	cout<<ans;
    return 0;
}

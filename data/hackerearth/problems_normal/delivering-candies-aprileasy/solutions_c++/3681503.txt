#include<bits/stdc++.h>

#define lli long long int
#define llu unsigned long long int
#define ld long double
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define ss(n) scanf("%s",n);

const long double EPS = 1e-10;
const lli MOD = 1000000007ll;
const lli mod1 = 1000000009ll;
const lli mod2 = 1100000009ll;
int INF = 2147483645;
lli INFINF = 9223372036854775807;
int debug = 0;

using namespace std;

void print(int a[],int s,int e){for(int i=s;i<=e;i++)cout<<a[i]<<" ";cout<<"\n";}
void print(vector<int> &v,int s,int e){for(int i=s;i<=e;i++)cout<<v[i]<<" ";cout<<"\n";}
void print(vector<int> &v){for(int x:v)cout<<x<<" ";cout<<"\n";}

lli bit_count(lli _x){lli _ret=0;while(_x){if(_x%2==1)_ret++;_x/=2;}return _ret;}
lli bit(lli _mask,lli _i){return (_mask&(1<<_i))==0?0:1;}
lli powermod(lli _a,lli _b,lli _m){lli _r=1;while(_b){if(_b%2==1)_r=(_r*_a)%_m;_b/=2;_a=(_a*_a)%_m;}return _r;}
lli add(lli a,lli b,lli m=MOD){lli x=a+b;while(x>=m)x-=m;return x;}
lli sub(lli a,lli b,lli m=MOD){lli x=a-b;while(x<0)x+=m;return x;}
lli mul(lli a,lli b,lli m=MOD){lli x=a*b;x%=m;return x;}

lli n,m,s;
vector<pair<lli,lli> > G[100010];
lli a[100010];
lli dist[100010];
lli superval;
lli sum;

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    debug = 1;
#endif
    srand (time(NULL));

    slli(n);slli(m);slli(s);
    for(lli i=1;i<=n;i++)
        slli(a[i]);
    for(lli i=1;i<=m;i++){
        lli u,v,w;
        slli(u);slli(v);slli(w);
        G[u].pb({v,w});
        G[v].pb({u,w});
    }
    priority_queue<pair<lli,lli> > Q;
    for(lli i=1;i<=n;i++)
        dist[i] = INFINF;
    dist[s] = 0;
    Q.push({0,s});
    while(!Q.empty()){
        pair<lli,lli> it = Q.top();
        Q.pop();
        lli u = it.S;
        for(lli i=0;i<G[u].size();i++){
            lli v = G[u][i].F;
            lli w = G[u][i].S;
            if(dist[u] + w < dist[v]){
                dist[v] = dist[u] + w;
                Q.push({-dist[v],v});
            }
        }
    }
    for(int i=1;i<=n;i++){
        if(dist[i] != INFINF){
            superval += a[i]*dist[i];
            sum += a[i];
        }
    }
    for(int i=1;i<=n;i++){
        if(dist[i]!= INFINF){
            cout<<((sum-a[i])*dist[i]) + superval - dist[i]*a[i]<<" ";
        }
        else{
            cout<<"0 ";
        }
    }

    return 0;
}


#include <bits/stdc++.h>
using namespace std;

#define inf 1000003

int color[100005], gf[100005], dp[100005][2];
vector<int> X[100005];

int solve(int i, int flag, int par)
{
	int ans, ans1 = 0, ans2 = 0;
	
	if(dp[i][flag]!=-1)
		return dp[i][flag];
	
	for(int j=0; j<X[i].size(); j++)
		if(X[i][j]!=par)
		{
			ans1 += solve(X[i][j], 0, i);
			ans2 += solve(X[i][j], 1, i);
		}
	
	ans1 += (color[i]^gf[i]);
	ans2 += ((color[i]^gf[i])^1);
	
	if(!flag)
		ans = min(ans1, ans2 + 1);
	else
		ans = min(ans1 + 1, ans2);
	
	return dp[i][flag] = ans;
}

int main()
{
    int N;
    scanf("%d", &N);
    
    for(int i=1; i<=N-1; i++)
    {
    	int x, y;
    	scanf("%d %d", &x, &y);
    	
    	X[x].push_back(y);
    	X[y].push_back(x);
    }
    
    for(int i=1; i<=N; i++)
    	scanf("%d", &color[i]);
    for(int i=1; i<=N; i++)
    	scanf("%d", &gf[i]);
    
    memset(dp, -1, sizeof(dp));
    
    printf("%d\n", solve(1, 0, -1));
    
    return 0;
}

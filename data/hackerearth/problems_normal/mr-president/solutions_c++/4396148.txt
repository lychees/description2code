#include <bits/stdc++.h>
using namespace std;


const int MAX = 1e6 + 9;
int id[MAX], n,m,sel[MAX],ed;
pair <int, pair<int, int> > p[MAX];

void initialize()
{
    for(int i = 0;i < MAX;++i)
        id[i] = i;
}

int root(int x)
{
    if(id[x]!=x)
		id[x]=root(id[x]);
	return id[x];
}

void union1(int x, int y)
{
    int p = root(x);
    int q = root(y);
    id[p] = id[q];
}

long long kruskal(pair<int, pair<int, int> > p[])
{
    int x, y;
    long long cost, minimumCost = 0;
    for(int i = 0;i < m;++i)
    {
        // Selecting edges one by one in increasing order from the beginning
        x = p[i].second.first;
        y = p[i].second.second;
        cost = p[i].first;
        // Check if the selected edge is creating a cycle or not
        if(root(x) != root(y))
        {
            minimumCost += cost;
            union1(x, y);
            --ed;
            sel[i]=1;
        }
    }
    return minimumCost;
}

int main()
{
    int x, y,i,f=1,j=0;
    long long weight,minimumCost,k;
    initialize();
    //freopen("file1.txt","r",stdin);
    cin >> n >> m>>k;
    ed=n;
    if(k<n-1)
        f=0;
    for(int i = 0;i < m;++i)
    {
        cin >> x >> y >> weight;
        p[i] = make_pair(weight, make_pair(x, y));
    }

    // Sort the edges in the ascending order
    sort(p, p + m);
    minimumCost = kruskal(p);
    //cout<<minimumCost<<" ";
    for(i=m-1;i>=0;i--)
    {
        if(sel[i])
        {
        if(minimumCost>k)
        {
            minimumCost = minimumCost-p[i].first+1;
            //cout<<minimumCost<<" ";
            j++;
        }
        else break;
        }
    }
    if(f==0 || ed>1)
        cout<<"-1";
    else
        cout << j;

}

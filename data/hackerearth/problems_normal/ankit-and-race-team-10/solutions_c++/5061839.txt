#include <iostream>
#include <vector>
#include <algorithm>
#include <sstream>
using namespace std;

typedef long long ll;
typedef unsigned long ul;
const ll MOD = 1000000007;

ll fact[100001];

inline void init(){
	fact[0] = fact[1] = 1;
	for(int i=2;i<100001;i++){
		fact[i] = (i*fact[i-1])%MOD;
	}
}

ll modPow(ll a, ll x,ll p){
    ll res = 1;
    while(x>0){
        if(x & 1) res = (res*a) % p;
        a = (a*a)%p;
        x >>= 1;
    }
    return res;
}

ll modInverse(ll a,ll p){
    return modPow(a,p-2,p);
}

ll ick_calc(ll i,ll k, ll p){
    ll numerator=fact[i];
    ll inverse=(fact[k]*fact[i-k])%MOD;
    /*ll temp = i-k+1;
    for(ll j=temp;j<=i;j++){
        numerator = (numerator*(j))%p;
    }
    for(ll j=1;j<=k;j++){
        inverse = (inverse*j)%p;
    }*/
    
    ul res = modInverse(inverse,p);
    res = (res*numerator)%p;
    
    return res;
}

int main()
{
	init();
	int t;
	cin>>t;
	ostringstream os;
	while(t--){
		ll n,k;
		cin>>n>>k;
		vector<ll> strength(n);
		for(int i=0;i<n;i++) cin>>strength[i];
		sort(strength.begin(),strength.end());
		ll ans = 0;
		for(int i=0;i<n-k+1;i++){
			ll num = ick_calc(n-i-1,k-1,MOD);
			ans = (ans+((strength[i]*num)%MOD))%MOD;
		}
		os<<ans<<endl;
	}
	cout<<os.str();
    return 0;
}

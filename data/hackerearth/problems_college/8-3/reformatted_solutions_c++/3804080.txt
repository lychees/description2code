#include <bits/stdc++.h>
#include <stdio.h>
using namespace std;
multiset<long long int> mt;
multiset<long long int>::reverse_iterator rt;
vector<pair<int, int>> v;
vector<pair<int, int>> query;
vector<long long int> ans;
map<int, pair<int, int>> mp;
int mq[1000000];
long long int popul[1000000];
int par[1000000];
int make_set(int m) {
  int i;
  for (i = 1; i <= m; i++) {
    par[i] = i;
    mt.insert(popul[i]);
  }
  return 0;
}
int f_parent(int a) {
  if (par[a] == a) {
    return a;
  } else
    return par[a] = f_parent(par[a]);
}
int mk_union(int a, int b) {
  int fa = f_parent(a);
  int fb = f_parent(b);
  if (fa == fb)
    return 0;
  par[fa] = fb;
  mt.erase(mt.find(popul[fa]));
  mt.erase(mt.find(popul[fb]));
  popul[fb] = popul[fa] + popul[fb];
  mt.insert(popul[fb]);
  return 0;
}
int main() {
  int m, p, q;
  scanf("%d %d %d", &m, &p, &q);
  int i;
  for (i = 1; i <= m; i++) {
    long long int tem;
    scanf("%lld", &tem);
    popul[i] = tem;
  }
  make_set(m);
  for (i = 1; i <= p; i++) {
    int a, b;
    scanf("%d %d", &a, &b);
    v.push_back(make_pair(a, b));
    mp[i] = make_pair(a, b);
  }
  for (i = 0; i < q; i++) {
    int tem;
    scanf("%d", &tem);
    mq[tem] = 1;
    query.push_back(mp[tem]);
  }
  for (i = 1; i <= p; i++) {
    if (!mq[i]) {
      mk_union(mp[i].first, mp[i].second);
    }
  }
  /*rt=mt.rbegin();
  ans.push_back(*rt);*/
  for (i = q - 1; i >= 0; i--) {
    rt = mt.rbegin();
    ans.push_back(*rt);
    mk_union(query[i].first, query[i].second);
  }
  for (i = q - 1; i >= 0; i--) {
    printf("%lld\n", ans[i]);
  }
  return 0;
}
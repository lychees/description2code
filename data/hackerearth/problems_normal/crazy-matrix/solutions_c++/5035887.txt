using namespace std;
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#define ll long long
#define fast ios_base::sync_with_stdio(false),in.tie(0),cout.tie(0);
#define input freopen("input.in","r",stdin);
#define output freopen("output.out","w",stdout);
#define e printf("\n");
#define all(it,v) for(it=(v).begin();it!=(v).end();it++)
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define pii pair<ll,ll>
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef vector<vector<ll> > mat;
const ll mx=100001;
const ll mod=1000000007;
const ll inf=0x3f3f3f3f;
//ifstream in("input.txt");
//ofstream out("output.txt");
void solve();
int main()
{
  int t=1;
 // cin>>t;
  rep(i,1,t)
  {
    solve();
  }
  return 0;
}
int ar[101][101],n;
bool vis[101][101];
bool one,two;
int dx[]={-1,-1,-1,0,0,1,1,1};
int dy[]={-1,0,1,-1,1,-1,0,1};
void dfs(int i,int j,int in)
{
  if(i<1||i>n||j<1||j>n||vis[i][j]||ar[i][j]!=in)
  	return ;
  vis[i][j]=true;
  if(i==n && in==1)
  {
  	one=true;
  	return ;
  }	
  if(j==n && in==2)
  {
  	two=true;
  	return ;
  }	
  for(int k=0;k<8;k++)
  	dfs(i+dx[k],j+dy[k],in);
}
void solve()
{
	memset(vis,false,sizeof vis);
	one=two=false;
	int i,j;
	cin>>n;
	rep(i,1,n)
	 rep(j,1,n)
	  cin>>ar[i][j];
	rep(i,1,n)
	 if(ar[1][i]==1 && !vis[1][i])
	  dfs(1,i,1);
	rep(i,1,n)
	 if(ar[i][1]==2 && !vis[i][1])
	  dfs(i,1,2);
//	cout<<one<<" "<<two;e
	if(one && two)
	 cout<<"AMBIGUOUS";
	else
	if(one)
	 cout<<"1";
	else
	if(two)
	 cout<<"2";
	else
	 cout<<"0";
	return ;          
}

























#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define sz(x) (int)((x).size())
#define all(x) x.begin(), x.end()
#define clr(x) memset((x), 0, sizeof(x))
#define cdp(x) memset((x), -1, sizeof(x))
#define rep(i, n) for (i = 0; i < n; i++)
#define Rep(i, a, b) for (i = a; i <= b; i++)
#define ff(i, x) for (i = start[x]; i != -1; i = a[i].next)
#define foreach(e, x) for (__typeof(x.begin()) e = x.begin(); e != x.end(); ++e)
using namespace std;
const double eps = 1e-8;
const double pi = acos(-1.0);
int dblcmp(double d) {
  if (fabs(d) < eps)
    return 0;
  return d > eps ? 1 : -1;
}
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef vector<pii> vpi;
int n;
map<string, set<string>> p;
map<set<string>, set<string>> r;
int main() {
  int i, j, k;
  cin >> n;
  for (i = 0; i < n; i++) {
    string s;
    cin >> s;
    s = s.substr(7);
    int pos = s.find_first_of('/');
    if (pos == string::npos) {
      pos = s.length();
    }
    string hostname = s.substr(0, pos);
    string path = s.substr(pos);
    p[hostname].insert(path);
  }
  foreach (e, p) {
    r[e->se].insert(e->fi);
  }
  int cnt = 0;
  foreach (e, r) {
    if (sz(e->se) > 1)
      ++cnt;
  }
  cout << cnt << endl;
  foreach (e, r) {
    if (sz(e->se) > 1) {
      foreach (b, e->se) {
        cout << "http://" << *b << " ";
      }
      cout << endl;
    }
  }
  return 0;
}
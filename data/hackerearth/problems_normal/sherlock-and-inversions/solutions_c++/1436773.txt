#include <cstdio>
#include <algorithm>
 
const int CO = 155;
int n;
const int N = 1 << 17;
 
int qb[N], qa[N], a[N], f[N], id[N], b[N];
long long pans[N];
 
bool cq(int i, int j) {
  int c = qa[i] / CO - qa[j] / CO;
  if (c != 0) return c < 0;
  return qb[i] < qb[j];
}
 
void add(int x, int y) {
  for (int i = x; i < n; i |= i + 1) f[i] += y;
}
 
int get(int x) {
  int ret = 0;
  for (int i = x; i >= 0; i = (i & (i + 1)) - 1) ret += f[i];
  return ret;
}
 
int main() {
	int q;
  scanf("%d %d", &n, &q);
  for (int i = 0; i < n; i++) {
    scanf("%d", a + i);
    b[i] = a[i];
  }
  std::sort(b, b + n);
  int cc = std::unique(b, b + n) - b;
  for (int i = 0; i < n; i++) a[i] = std::lower_bound(b, b + cc, a[i]) - b;
  
  for (int i = 0; i < q; i++) {
    scanf("%d%d", qa + i, qb + i);
    --qa[i];
    --qb[i];
    id[i] = i;
  }  
  std::sort(id, id + q, cq);
  int cl = 0;
  int cr = -1;
  long long ans = 0;
  for (int it = 0; it < q; it++) {
    int i = id[it];
    while (cr < qb[i]) {
      ans += (cr - cl + 1) - get(a[cr + 1]);
      ++cr;
      add(a[cr], 1);
    }
    while (cl > qa[i]) {
      ans += get(a[cl - 1] - 1);
      --cl;
      add(a[cl], 1);
    }
    
    while (cr > qb[i]) {
      add(a[cr], -1);
      --cr;
      ans -= (cr - cl + 1) - get(a[cr + 1]);
    }
    while (cl < qa[i]) {
      add(a[cl], -1);
      ++cl;
      ans -= get(a[cl - 1] - 1);
    }
    pans[i] = ans;
  }
  for (int i = 0; i < q; i++) {
    printf("%lld\n", pans[i]);
  }
}
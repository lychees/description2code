#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }


namespace Palindrome {
typedef char Alpha;

std::vector<int> getDiameters(const Alpha *str, int n) {
	std::vector<int> diameters(n * 2 - 1);
	int center = 0, right = 0;
	for(int i = 0; i < n * 2 - 1; i ++) {
		int maxp = std::min(i + 1, n * 2 - 1 - i);
		int p = right > i ? std::min(right - i, diameters[2 * center - i]) : 0;
		if((i + p) % 2 == 0) p ++;
		while(p < maxp && str[(i + p + 1) / 2] == str[(i - p - 1) / 2]) p += 2;
		p = std::min(p, maxp);
		if(i + p > right) {
			center = i;
			right = i + p;
		}
		diameters[i] = p;
	}
	return diameters;
}

//(??, ??)
std::pair<int,int> longestPalindromicSubstring(const std::vector<int> &diameters) {
	int maxLen = 0, maxLenIndex = 0;
	for(int i = 0; i < (int)diameters.size(); i ++) {
		if(diameters[i] > maxLen) {
			maxLen = diameters[i];
			maxLenIndex = i;
		}
	}
	return std::make_pair((maxLenIndex - maxLen + 1) / 2, maxLen);
}

}
int main() {
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		string s;
		cin >> s;
		vi v = Palindrome::getDiameters(s.c_str(), s.size());
		pii p = Palindrome::longestPalindromicSubstring(v);
		int ans = p.second;
		printf("%d\n", ans);
	}
	return 0;
}


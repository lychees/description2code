#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef pair<LL, pii > pipii;
typedef vector<int > vi;

const int N = 303;
const LL INF = 1000000000000LL;
vector<pipii > g[N];

LL ans[N][N];
LL D[N][N*N];
set<pipii > pq;
int n;

void solve(int source) {
  pq.insert(make_pair(0,make_pair(0,source)));
  rep(i,0,n) rep(j,0,n) {
    D[i][j] = INF;
  }
  D[source][0] = 0;
  while(pq.size()) {
    pipii p = *pq.begin();
    pq.erase(p);

    int c = p.SS.SS;
    rep(i,0,g[c].size()) {
      LL dist = p.FF + g[c][i].SS.FF;
      int val = p.SS.FF + g[c][i].SS.SS;
      if(val < 0 || val > 8) continue;
      if(D[g[c][i].FF][val] > dist) {
        pq.erase(make_pair(D[g[c][i].FF][val], make_pair(val, g[c][i].FF)));
        D[g[c][i].FF][val] = dist;
        pq.insert(make_pair(D[g[c][i].FF][val], make_pair(val, g[c][i].FF)));
      }
    }
  }
}

int main() {
  int m;
  S2(n,m);
  rep(i,0,m) {
    int u,v,w;
    char ch;
    scanf("%d%d%d %c",&u,&v,&w,&ch);
    int x = 1;
    if(ch == ')') x = -1;
    u--; v--;
    g[u].push_back(make_pair(v,make_pair(w,x)));
  }
  rep(i,0,n) {
    solve(i);
    rep(j,0,n) {
      if(D[j][0] == INF) D[j][0] = -1;
      ans[i][j] = D[j][0];
    }
  }

  rep(i,0,n) {
    rep(j,0,n) printf("%lld ",ans[i][j]); printf("\n");
  }
  return 0;
}
/*
Template belongs to : SUMIT KHAITAN
*/

#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)
#define FOR(i,a,b)      for(int i=a;i<b;i++)
#define gcd(a,b)  __gcd(a,b)

#define  VI vector<int>
#define  VL vector<LL>
#define  VC vector<char>
#define  pb push_back
#define  sz size

#define MOD       1000000007
#define PI        2*acos(0)

LL a[30]={0};
 int a1[10000000];
 int main()
 {
     inp_s;
     int i=0 ;
    FOR(i,0,1000000) a1[i]=1;
    a1[0] = 0;
    a1[1] = 0;
    FOR(i,2,(1000000))
    {
     if(a1[i]==1)
     {
        for(int j=2*i ; j < 1000000 ;j+=i)
            a1[j] = 0;
     }
    }
     LL n;
     cin>>n;
     LL a[n];
     LL b[n];
     LL c[n];
     FOR(i,0,n)cin>>a[i];
     FOR(i,0,n)cin>>b[i];
     c[0]=0;
     int cu=0;
     FOR(i,1,n)
     {
         if(i==1 && a[i-1]>b[i])
         {
            c[i]=1;
            cu+=c[i];
         }
         else
         {
            c[i]=0;
            cu+=c[i];
         }
         if(i>1 && a[i-2]>b[i])
         {
             c[i]=c[i-1];
             if(a[i-1]>b[i])
                c[i]+=1;
                cu+=c[i];
         }
     }
        if(a1[cu]==1)
            cout<<"MAGIC INVERSION"<<endl;
        else
            cout<<"SIMPLE INVERSION"<<endl;





   return 0;
 }


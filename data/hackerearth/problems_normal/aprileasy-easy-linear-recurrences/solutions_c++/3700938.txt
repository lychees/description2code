#include <bits/stdc++.h>
using namespace std;
const long long int MOD = 1000000007;
long long int F[2],G[2],H[2],A[30][5][5];
void matmult(long long int ans[][5], long long int a[][5], long long int b[][5])
{
	for (int i = 0; i < 5; ++i)
		for (int j = 0; j < 5; ++j)
		{
			ans[i][j] = 0;
			for (int k = 0; k < 5; ++k)
				ans[i][j]+=a[i][k]*b[k][j];
			ans[i][j]%=MOD;
		}
}
int main()
{
	long long int a,b,c,d,e,f;
	scanf("%lld %lld %lld %lld %lld %lld", &a, &b, &c, &d, &e, &f);
	scanf("%lld %lld", &F[0], &F[1]);
	scanf("%lld %lld", &G[0], &G[1]);
	// H actually stores syum of H till that point
	H[0] = (e*F[0] + f*G[0])%MOD;
	H[1] = (e*F[1] + f*G[1] + H[0])%MOD;
	// create transition matrxi
	A[0][0][0] = a;	A[0][0][3] = b;
	A[0][1][0] = 1;
	A[0][2][1] = d;	A[0][2][2] = c;
	A[0][3][2] = 1;
	A[0][4][0] = e*a;	A[0][4][1] = f*d;	A[0][4][2] = f*c;	A[0][4][3] = e*b;	A[0][4][4] = 1;
	for (int i = 0; i < 5; ++i)
		A[0][4][i]%=MOD;
	// precompute powers of transition matrix
	for (int i = 1; i < 30; ++i)
		matmult(A[i],A[i-1],A[i-1]);
	int q;
	scanf("%d", &q);
	while(q--)
	{
		int n;
		scanf("%d", &n);
		if(n <= 1)
			printf("%lld\n", H[n]);
		else
		{
			n--;
			long long int ans[] = {F[1],F[0],G[1],G[0],H[1]};
			for (int i = 0; i < 30; ++i)
			{
				if(n & (1<<i))
				{
					long long int temp[] = {0,0,0,0,0};
					for (int j = 0; j < 5; ++j)
					{
						for (int k = 0; k < 5; ++k)
							temp[j]+=A[i][j][k]*ans[k];
						temp[j]%=MOD;
					}
					for (int j = 0; j < 5; ++j)
						ans[j] = temp[j];
				}
			}
			printf("%lld\n", ans[4]);
		}
	}
	return 0;
}
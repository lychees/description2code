//#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>
#include <string>
#include <cmath>
#include <map>
#include <set>
#include <queue>
#include <stack>

using namespace std;

typedef long long        ll;
typedef pair<int, int>   pii;
typedef pair<int, pii>   piii;
typedef vector<int>      vi;
typedef vector<pii>      vii;
typedef vector<piii>     viii;

#define FOR(a,b,c)   for (int (a)=(b); (a)<(c); (a)++)
#define forn(a,b,c)  for (int (a)=(b); (a)<=(c); (a)++)
#define ford(a,b,c)  for (int (a)=(b); (a)>=(c); (a)--)
#define rep(i,n)     FOR(i,0,n)
#define repn(i,n)    forn(i,1,n)
#define repd(i,n)    ford(i,n,1)

#define fi           first
#define se           second
#define pb           push_back
#define mp           make_pair

int pills[100];
int seen1[100];
int seen2[100];
int n, m;
vi edge[100];
vi e[100];
stack<int> q;
int turn=0;

void dfs(int a)
{
    seen1[a]=1;
    for(vi::iterator it=edge[a].begin(); it!=edge[a].end(); it++)
        if(seen1[*it]==0) dfs(*it);
    q.push(a);
}

int dfs2(int a)
{
    seen2[a]=1;
    int ret=pills[a];
    for(vi::iterator it=e[a].begin(); it!=e[a].end(); it++)
    {
        if(seen2[*it]==0) ret+=dfs2(*it);
    }
    return ret;
}

int main()
{
    int t; cin>>t;
    while(t--)
    {
        rep(i, 100) {seen1[i]=0; seen2[i]=0; edge[i].clear(); e[i].clear();}
        cin>>n>>m;
        rep(i, n) cin>>pills[i];
        rep(i, m)
        {
            int a, b; cin>>a>>b;
            edge[a].pb(b);
            e[b].pb(a);
        }
        rep(i, n) if(seen1[i]==0) dfs(i);
        int ans=0;
        while(!q.empty())
        {
            int v=q.top();
            q.pop();
            int sum=0;
            if(seen2[v]==0) sum=dfs2(v);
            ans=max(ans, sum);
        }
        cout<<ans<<endl;
    }
    return 0;
}
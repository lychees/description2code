#include <bits/stdc++.h>
using namespace std;
stack<int>st;
bool pr[1000005] = {};
int n;
vector<int>graph[1000005];

void dfs(int node)
{
	if(pr[node]) return;
	pr[node] = 1;
	sort(graph[node].begin(), graph[node].end(), greater<int>());
	for(int i=0;i<graph[node].size();i++)
	{
		dfs(graph[node][i]);
	}
	//cout << "pushing " << node << endl;
	st.push(node);
}

int main()
{
	int incoming[1000005] = {};
	bool seen[1000005] = {};
	set<int>s;
	cin >> n;
	for(int i=0;i<n;i++)
	{
		int k;
		cin >> k;
		vector<int>v;
		while(k--)
		{
			int x;
			cin >> x;
			seen[x] = 1;
			v.push_back(x);
			
		}
		for(int j=1;j<v.size();j++)
		{
			incoming[v[j]]++;
			graph[v[j-1]].push_back(v[j]);
		}
	}
	for(int i=0;i<=1000000;i++) if(seen[i] && incoming[i] == 0) s.insert(i);
	
	while(s.size() != 0)
	{
		int node = *s.begin();
		cout << node << " ";
		s.erase(s.begin());
		for(int i=0;i<graph[node].size();i++)
		{
			incoming[graph[node][i]]--;
			if(incoming[graph[node][i]] == 0) s.insert(graph[node][i]);
		}
		
	}
}
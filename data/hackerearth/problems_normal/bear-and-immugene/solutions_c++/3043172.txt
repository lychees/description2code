#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

const ll p = 1e9+7;
const int MAXN = 1e6+5;

int n, q; string s;

int tree[3*MAXN+5][4][5];

void compose(int x, int y, int z) {
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            tree[x][i][j] = 0;
            
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j) {
            if (j == 4) {
                tree[x][i][j] = (tree[x][i][j] + tree[z][i][j])%p;
            } else {
                for (int k = 0; k < 5; ++k) {
                    tree[x][i][k] = (tree[x][i][k] + (1LL*tree[z][i][j]*tree[y][j][k])%p)%p;
                }
            }
        }
}

void init(int l = 0, int r = n-1, int node = 1) {
    if (l == r) {
        for (int i = 0; i < 4; ++i)
            tree[node][i][i] = 1;
        for (int i = 0; i < 5; ++i)
            tree[node][s[l]][i] = 1;
        return;
    }

    int mid = (l+r)/2; init(l, mid, 2*node); init(mid+1, r, 2*node+1);
    compose(node, 2*node, 2*node+1);
}  

//position x, letter a
void upd(int x, int a, int l = 0, int r = n-1, int node = 1) {
    if (l == r) {
        for (int i = 0; i < 4; ++i)
            for (int j = 0; j < 5; ++j)
                tree[node][i][j] = (i == j);

        for (int i = 0; i < 5; ++i)
            tree[node][a][i] = 1;

        return;
    }

    int mid = (l+r)/2;
    if (x <= mid)
        upd(x, a, l, mid, 2*node);
    else
        upd(x, a, mid+1, r, 2*node+1);

    compose(node, 2*node, 2*node+1);
}

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    cin >> n >> q; cin >> s;
    
    for (int i = 0; i < n; ++i) {
        char x = s[i];
        if (x == 'A')
            s[i] = 0;
        if (x == 'C')
            s[i] = 1;
        if (x == 'T')
            s[i] = 2;
        if (x == 'G')
            s[i] = 3;     
    }
    
    init();

    for (int i = 0; i < q; ++i) {
        char x; int pos; cin >> pos >> x;
        if (x == 'A')
            x = 0;
        if (x == 'C')
            x = 1;
        if (x == 'T')
            x = 2;
        if (x == 'G')
            x = 3;

        upd(pos-1, (int)x);
                   
        ll sum = 0; for (int i = 0; i < 4; ++i)
            sum = (sum + tree[1][i][4]);
        sum++; printf("%d\n", (sum%p));
    }
}
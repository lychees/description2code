//DARK LORD
#include<bits/stdc++.h>
#define ll long long
#define _ ios::sync_with_stdio(false);cin.tie(0);
#define max(a,b)                 (a>=b?a:b)
#define min(a,b)                 (a<b?a:b)
#define max3(a,b,c)               max(a,max(b,c))
#define min3(a,b,c)               min(a,min(b,c))
#define f0(i,a,b) for(int i=a;i<b;i++)
#define f1(i,a,b) for(int i=a;i<=b;i++)
#define fr(i,b,a) for(int i=b;i>=a;i--)
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define mod 1000000007
#define mx 100002
#define T() int t;cin>>t;while(t--)
inline ll modexp(ll a,ll b){ll x=1;while(b>0){if(b&1){x*=a;if(x>=mod)x%=mod;};b>>=1;a*=a;if(a>=mod)a%=mod;}return x;}
inline ll digSum(ll n){ll s=0;n=abs(n);while(n){s+=(n%10);n/=10;}return s;}
using namespace std;
vector<pair<int,int> > adj[mx];
vector<bool> visited(mx,false);
int dist[mx];
int bfs(int node,int n){
    //cout<<"n="<<n<<endl;
	queue<int> q;
	q.push(node);
	f1(i,0,n){
	    visited[i]=false;
	    dist[i]=0;
	}
	visited[node] = true;
	while(!q.empty()){
	   // cout<<"yo";
	int x = q.front();
	q.pop();
	int u = x;
	//cout<<"u="<<u<<endl;
	vector< pair<int, int> >::iterator it;
	for(it=adj[u].begin();it!=adj[u].end();++it){
	    	int v = (*it).first;
            int weight = (*it).second;
		if(!visited[v]){
		    //cout<<"x="<<x<<endl;
		    //cout<<"adj["<<x<<"]"<<"["<<i<<"]="<<adj[x][i]<<endl;
			visited[v] = true;
			dist[v] = dist[u] + weight;
			//cout<<"dist[adj["<<x<<"]"<<"["<<i<<"]]="<<dist[adj[x][i]]<<endl;
			q.push(v);
			
		}
	}
	}
	/*f1(i,1,n){
	    //cout<<"sffss";
	    cout<<"dist["<<i<<"] = "<<dist[i]<<endl;
	}*/
	return int(max_element(dist+1,dist+n+1)-dist);
}
int main()
{
	_
	T(){
	f1(i,0,mx-1){
	    adj[i].clear();
	    visited[i] = false;
	    dist[i] = 0;
	}
	int n,ans,x,y,wt,z1;
	cin>>n;
	f0(i,0,n-1){
		cin>>x>>y>>wt;
		adj[x].pb(mp(y,wt));
		adj[y].pb(mp(x,wt));
	}
	
	int start = bfs(1,n);
	//cout<<"start="<<start<<endl;
	ans = bfs(start,n);
	//cout<<dist[ans]<<endl;
	if(dist[ans]<=100)
	    z1=0;
	else if(dist[ans]>100 && dist[ans]<=1000)
	    z1=100;
	else if(dist[ans]>1000 && dist[ans]<=10000)
	    z1=1000;
	else if(dist[ans]>10000)
	    z1=10000;
	cout<<z1<<" "<<dist[ans]<<endl;}
	return 0;
}

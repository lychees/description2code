

    #include <iostream>
    #include <cstdio>
    #include <string>
    #include <sstream> 
    #include <vector>
    #include <set>
    #include <map>
    #include <queue>
    #include <stack>
    #include <cmath>
    #include <algorithm>
    #include <cstring>
    #include <ctime>
    #include <cassert>
    using namespace std;
    #define pb push_back
    #define mp make_pair
    #define pii pair<int,int>
    #define vi vector<int>
    #define SZ(x) ((int)(x.size()))
    #define fi first
    #define se second
    #define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
    #define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
    #define IN(x,y) ((y).find((x))!=(y).end())
    #define ALL(t) t.begin(),t.end()
    #define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
    #define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
    #define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
    #define REMAX(a,b) (a)=max((a),(b));
    #define REMIN(a,b) (a)=min((a),(b));
    #define DBG cerr << "debug here" << endl;
    #define DBGV(vari) cerr << #vari<< " = "<< (vari) <<endl;
    typedef long long ll;
    const int N = 1000;
    const int V = 1000000000;
    int x[N], y[N];
    const double EPS = 0.0001;
    double get_angle(pii a, pii b)
    {
        double x = b.fi - a.fi;
        double y = b.se - a.se;
        double res;
        if(y >= 0)
        {
            res = atan(y / x) * 180 / M_PI + 90;
        }
        else
        {
            res = atan(x / -y) * 180 / M_PI;
        }
        return res;
    }
    int main()
    {
        ios_base::sync_with_stdio(0);
        int n;
        cin >> n;
        assert(n >= 2); assert(n <= N);
        FOR(i, n)
        {
            cin >> x[i] >> y[i];
            assert(x[i] >= 1); assert(y[i] >= 1); assert(x[i] <= V); assert(y[i] <= V);
        }
        int res = 0;
        FOR(i, n)
        {
            double cur_leader_val = -1;
            REP(j, i + 1, n - 1)
            {
                double a = get_angle(mp(x[i], y[i]), mp(x[j], y[j]));
                if(a >= cur_leader_val)
                {
                    ++res;
                    cur_leader_val = a;
                }
            }
        }
        cout << res << endl;
        return 0;
    }


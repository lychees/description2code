#include <bits/stdc++.h>
using namespace std;
vector< vector<int> > g, dp;
vector<int> c;
int n;
const int inf = 1e9;

int f(int v, int a){
	if(v != 0 && dp[v][a] != -1)
		return dp[v][a];
	//cerr << v << " " << a << endl;
	vector<int> p;
	int delta = 0;
	for(int i = 0; p.size() < g[v].size(); i++)
		if(i != a)
			p.push_back(i), delta += c[i];
	int ans = inf;
	for(int i = 0; i < 200; i++){
		int val = delta;
		random_shuffle(p.begin(), p.end());
		for(size_t j = 0; j < g[v].size(); j++)
			val += f(g[v][j], p[j]);
		ans = min(ans, val);
	}
	if(v != 0)
		dp[v][a] = ans;
	//cerr << v << " " << a << " " << ans << endl;
	return ans;
}

void root(int v){
	for(size_t i = 0; i < g[v].size(); i++){
		int u = g[v][i];
		vector<int> t;
		for(size_t j = 0; j < g[u].size(); j++)
			if(g[u][j] != v)
				t.push_back(g[u][j]);
		g[u] = t;
		root(u);
	}
}

int main(){
	int T;
	cin >> T;

	for(int t = 0; t < T; t++){
		cin >> n;
		g.assign(n, vector<int> (0));
		c.resize(n-1);
		dp.assign(n, vector<int> (n-1, -1));
		for(int i = 0; i < n-1; i++)
			cin >> c[i];
		sort(c.begin(), c.end());
		for(int i = 0; i < n-1; i++){
			int u, v;
			cin >> u >> v;
			u--, v--;
			g[u].push_back(v);
			g[v].push_back(u);
		}
		root(0);
		cout << f(0, -1) << endl;
	}

	return 0;
}

#include<bits/stdc++.h>
using namespace std;
vector<pair<int,int> > neb[1000000];
long long dist[1000000];
int visited[1000000];
int vert;
void dij(int s)
{
    for(int i=1;i<=vert;i++)
    {
        visited[i]=0;
        dist[i]=INT_MAX;

    }
    dist[s]=0;
    priority_queue<pair<int,int> >pq;
    pq.push(make_pair(0,s));
    while(!pq.empty())
    {
        pair<int,int > t=pq.top();
        pq.pop();
        int src=t.second;
        if(visited[src])
            continue;
        visited[src]=1;
        for(int i=0;i<neb[src].size();i++)
        {
            int node=neb[src][i].second;
            int edge=neb[src][i].first;
            if(dist[node]>dist[src]+edge)
            {
                dist[node]=dist[src]+edge;
                pq.push(make_pair(-dist[node],node));
            }


        }

    }




    for(int i=1;i<=vert;i++)
    {
        neb[i].clear();
    }
}
int main()
{

    ios::sync_with_stdio(0);
    int t;
    cin>>t;
    while(t--)
    {
        int n,m;
        cin>>n>>m;
        vert=n;
        for(int i=0;i<m;i++)
        {
            int a,b,c;
            cin>>a>>b>>c;
            neb[a].push_back(make_pair(c,b));
            neb[b].push_back(make_pair(c,a));

        }
        
        dij(1);
        //for(int i=1;i<=n;i++)
          //  cout<<dist[i]<<" ";
          int q;
        cin>>q;
	while(q--)
	{
		int j,k;
		cin>>j>>k;
		if(2*dist[j]>k)
			cout<<0<<endl;
		else
			cout<<(k-2*dist[j])<<endl;
	}
	}
	return 0;
}

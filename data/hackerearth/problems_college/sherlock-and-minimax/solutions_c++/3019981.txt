#ifdef ssu1
#define _GLIBCXX_DEBUG
#endif
#undef NDEBUG

#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>

using namespace std;

#define fore(i, l, r) for(int i = (l); i < (r); ++i)
#define forn(i, n) fore(i, 0, n)
#define fori(i, l, r) fore(i, l, (r) + 1)
#define sz(v) int((v).size())
#define all(v) (v).begin(), (v).end()
#define pb push_back
#define mp make_pair
#define X first
#define Y second

#if ( _WIN32 || __WIN32__ )
   #define LLD "%I64d"
#else
   #define LLD "%lld"
#endif

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename T> T abs(T a) { return a < 0 ? -a : a; }
template<typename T> T sqr(T a) { return a*a; }

const int INF = (int)1e9;
const ld EPS = 1e-9;
const ld PI = 3.1415926535897932384626433832795;

int readInt(int l, int r){
   int x;
   if(scanf("%d", &x) != 1){
       fprintf(stderr, "Expected int in range [%d, %d], but haven't found!", l, r);
       throw;
   }
   if(!(l <= x && x <= r)){
       fprintf(stderr, "Expected int in range [%d, %d], but found %d!", l, r, x);
       throw;
   }
   return x;
}

int f(const vector<int>& a, int m){
   int mn = (int)2e9;
   forn(i, sz(a)){
       mn = min(mn, abs(a[i] - m));
   }
   return mn;
}

int main(){
#ifdef ssu1
   assert(freopen("input.txt", "rt", stdin));
   //assert(freopen("output.txt", "wt", stdout));
#endif

   int n, p, q;
   n = readInt(1, 100);
   vector<int> a(n);
   forn(i, n)
       a[i] = readInt(1, 1000000000);
   p = readInt(1, 1000000000);
   q = readInt(1, 1000000000);
   assert(p <= q);

   vector<int> pat;
   pat.pb(p);
   pat.pb(q);
   forn(i, n){
       forn(j, n){
           int x = (a[i] + a[j]) / 2;
           fori(y, x - 1, x + 1){
               if(p <= y && y <= q)
                   pat.pb(y);
           }
       }
   }

   sort(all(pat));

   int curmx = -1, m = -1;
   forn(i, sz(pat)){
       if(f(a, pat[i]) > curmx){
           curmx = f(a, pat[i]);
           m = pat[i];
       }
   }
   printf("%d\n", m);
   return 0;
}

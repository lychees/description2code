# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <cstdio>
# include <cmath>
# include <numeric>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>
# include <complex>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,PII> TRI;
typedef vector<string> VS;

#define GI ({int t;scanf("%d",&t);t;})
#define REP(i,a,b) for(int i=a;i<b;i++)
#define FOR(i,n) REP(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define bitcount(x) __builtin_popcount(x)
#define pb push_back
#define mp make_pair
#define mt(a,b,c) mp(a,mp(b,c))
#define EPS (double)(1e-9)
#define INF 1000000000
#define MOD 1000000007
#define PI (double)(3.141592653589793)

inline int ni()
{
	register int r=0,c;
	for(c=getchar_unlocked();c<=32;c=getchar_unlocked());
	if(c=='-') 
		return -ni();
	for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());
	return r;
}

VI a[1005];
bool seen[1005];

bool dfs(int n)
{
	if(seen[n])
		return true;
	bool ret = false;
	seen[n] = true;
	REP(i,0,a[n].size())
	{
		ret|=dfs(a[n][i]);
		if(ret) return ret;
	}
	return false;
}

int main()
{
	int t,n,m;

	t = ni();
	REP(tcase,1,t+1)
	{
		n = ni();
		bool flag = false;

		REP(i,1,n+1)
		{
			m = ni(); 
			REP(j,0,m)
				a[ni()].pb(i);
		}
		REP(i,1,n+1)
		{
			memset(seen,false,sizeof seen);
			flag|=dfs(i); if(flag) break;
		}
		printf("#%d:%s\n",tcase,flag?"Yes":"No");
		REP(i,1,n+1)
			a[i].clear();
	}	
	
	return 0;
}



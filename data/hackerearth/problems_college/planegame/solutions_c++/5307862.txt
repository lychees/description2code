
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define vi vector
#define all(c) c.begin(), c.end()
#define pb push_back
#define f first
#define s second
#define mod 1000000007
#define inf 1e9
#define pl pair
#define pii pair
#define f first
#define mp make_pair
#define s second
#define rep(i,a,n) for(int i=a;i<n;i++)
#define repd(i,a,b) for(int (i)=(a); (i)>=(b);i--)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define present(container, element) (container.find(element) != container.end())
#define cpresent(container, element) (find(all(container),element) != container.end())


#define gc getchar_unlocked
#define pc putchar_unlocked
 
inline int sscan()
    {
       int n=0;
       int ch=gc();
       while( ch < '0' || ch > '9' )
            ch=gc();
       while(  ch >= '0' && ch <= '9' )
        {
            n = (n<<3)+(n<<1) + ch-'0';
            ch=gc();
        }
     
       return n;
    }
 
inline int max(int a,int b)
{
  if(a>=b)
      return a;
    else
      return b;
}

int x[55];
int y[55];
inline int f(int n)
{
 int res = 1;

if (n <= 2) {
    return n;
}

for (int i = 0; i < n; i++) { // point A
    for (int j = 0; j < n; j++) { // point B
        if (i != j) {
            int dx1 = x[j] - x[i];
            int dy1 = y[j] - y[i];

            for (int k = 0; k < n; k++) { // point C
                int c = 0;
                if (i != k && j != k) {
                    // count the number of points that are present in any of the 2 lines
                    for (int r = 0; r < n; r++) {
                        int dx2 = x[r] - x[i];
                        int dy2 = y[r] - y[i];
                        // first line
                        if ( dy1 * dx2  == dy2 * dx1  ) {
                            c++;
                        } else {
                            // second line
                            dx2 = x[r] - x[k];
                            dy2 = y[r] - y[k];
                            if ( dy1 * dy2  == - dx2 * dx1 ) {
                                c++;
                            }
                        }
                    }
                }
                res = max(res, c);
            }
        }
    }
}
return res;
} 

int main()
{
int t,val = 420;
t = sscan();
while(t--) {
  //  x.clear();
    //y.clear();
    int n;
    n = sscan();
    
    for(int i = 0; i < n; i++) {
        scanf("%d",&x[i]);
    }
    for(int i = 0; i < n; i++) {
        scanf("%d",&y[i]);
    }
    printf("%d\n",f(n));
}
return 0;

}

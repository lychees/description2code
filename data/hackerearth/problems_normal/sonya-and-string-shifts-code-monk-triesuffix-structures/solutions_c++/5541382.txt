#include <bits/stdc++.h>
using namespace std;
const int INF = 2e9;
const int N = (int)1e6 + 9;
const int alphabet = 26;
char s[N];
int p[N], cnt[N], c[N], pn[N], cn[N], ans[N];
vector<int> v[N];
int main() {
	int n;
	scanf("%d\n", &n);
	gets(s);
	memset(cnt, 0, alphabet * sizeof(int));
	for (int i = 0; i < n; ++i) {
		++cnt[s[i] - 'a'];
	}
	for (int i = 1; i < alphabet; ++i) {
		cnt[i] += cnt[i - 1];
	}
	for (int i = 0; i < n; ++i) {
		p[--cnt[s[i] - 'a']] = i;
	}
	c[p[0]] = 0;
	int classes = 1;
	for (int i = 1; i < n; ++i) {
		if (s[p[i]] != s[p[i - 1]]) {
			++classes;
		}
		c[p[i]] = classes - 1;
	}
	for (int h = 0; (1 << h) < n; ++h) {
		for (int i = 0; i < n; ++i) {
			pn[i] = p[i] - (1 << h);
			if (pn[i] < 0) {
				pn[i] += n;
			}
		}
		memset(cnt, 0, classes * sizeof(int));
		for (int i = 0; i < n; ++i) {
			++cnt[c[pn[i]]];
		}
		for (int i = 1; i < classes; ++i) {
			cnt[i] += cnt[i - 1];
		}
		for (int i = n - 1; i >= 0; --i) {
			p[--cnt[c[pn[i]]]] = pn[i];
		}
		cn[p[0]] = 0;
		classes = 1;
		for (int i = 1; i < n; ++i) {
			int mid1 = (p[i] + (1 << h)) % n;
			int mid2 = (p[i - 1] + (1 << h)) % n;
			if (c[p[i]] != c[p[i - 1]] || c[mid1] != c[mid2]) {
				++classes;
			}
			cn[p[i]] = classes - 1;
		}
		memcpy(c, cn, n * sizeof(int));
	}
	vector<int> minShifts;
	for (int i = 0; i < n; ++i) {
		if (minShifts.empty() || minShifts.back() > p[i]) {
			minShifts.push_back(p[i]);
		}
	}
	int q;
	scanf("%d", &q);
	for (int i = 0; i < q; ++i) {
		int k;
		scanf("%d", &k);
		v[k].push_back(i);
	}
	int cur = INF;
	for (int k = 0; k < n; ++k) {
		while (!minShifts.empty() && minShifts.back() <= k) {
			cur = minShifts.back();
			minShifts.pop_back();
		}
		for (int i = 0; i < v[k].size(); ++i) {
			ans[v[k][i]] = cur;
		}
	}
	for (int i = 0; i < q; ++i) {
		printf("%d\n", ans[i]);
	}
	return 0;
}
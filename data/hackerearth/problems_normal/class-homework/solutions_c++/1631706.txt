#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<valarray>
//#include<bits/stdc++.h>
using namespace std;
int n;
string s;
long long int a[21];
bool use[21][21];
long long int dp[21][21];
long long int dfs(int aa, int b){
	if (aa == s.size()){
		if (b == 4){
			return 0;
		}
		else{
			return -1;
		}
	}
	if (b == 4){
		return -1;
	}
	use[aa][b] = true;
	if (a[aa] == 0){
		dp[aa][b]=dfs(aa + 1, b + 1);
		return dp[aa][b];
	}
	dp[aa][b] = -1;
	long long int num = 0;
	for (int i = aa; i <s.size()&&num<=1000000000000LL; i++){
		num *= 10LL;
		num += a[i];
		if(num>1000000000000){
			break;
		}
		long long int kari = dfs(i + 1, b+1);
		if (kari == -1){
			continue;
		}
		dp[aa][b] = max(dp[aa][b], kari + num);
	}
	return dp[aa][b];
}

int main(){
	scanf("%d", &n);
	while (n--){
		memset(use, false, sizeof(use));
		memset(dp, -1, sizeof(dp));
		cin >> s;
		for (int i = 0; i < s.size(); i++){
			a[i] = s[i] - '0';
		}
		long long int ans = dfs(0, 0);
		if (ans == -1){
			puts("unlucky");
		}
		else{
			printf("%lld\n", ans);
		}
	}
	return 0;
}
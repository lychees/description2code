#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std ;

#define ft first
#define sd second 
#define pb push_back
#define all(x) x.begin(),x.end() 
#define mp make_pair
#define ll long long int 
#define vi vector<int>
#define vii vector<pair<int,int> >
#define pii pair<int,int>
#define vl vector<ll>
#define vll vector<pair<ll,ll> >
#define pll pair<ll,ll>

#define sc1(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d%d",&x,&y)
#define sc3(x,y,z) scanf("%d%d%d",&x,&y,&z)

#define scll1(x) scanf("%lld",&x)
#define scll2(x,y) scanf("%lld%lld",&x,&y)
#define scll3(x,y,z) scanf("%lld%lld%lld",&x,&y,&z)

#define pr1(x) printf("%d\n",x)
#define pr2(x,y) printf("%d %d\n",x,y)
#define pr3(x,y,z) printf("%d %d %d\n",x,y,z)

#define prll1(x) printf("%lld\n",x)
#define prll2(x,y) printf("%lld %lld\n",x,y)
#define prll3(x,y,z) printf("%lld %lld %lld\n",x,y,z)

#define pr_vec(v) for(int i=0;i<v.size();i++) cout << v[i] << " " ;

#define f_in(st) freopen(st,"r",stdin)
#define f_out(st) freopen(st,"w",stdout)

#define debug(s) cout << "check : " << s << edl

const int mod = 1000000000 + 7;
const int maxn = 100000 + 10;
const int maxm = 500 + 10;
const int inv2 = 500000004;
const int inv6 = 166666668;

ll power( ll a, ll b, ll mod ) {
	ll res = 1;
	while( b ) {
		if( b&1 ) {
			res = res * a % mod;
		}
		b /= 2;
	}
	return res;
}

ll nC2( ll n ) {
	return n * (n+1) / 2;
}

ll modinv( ll a, ll mod ) {
	return power( a, mod-2, mod );
}

int n, DP[2][maxn], A[maxn];


void updateBIT( int sign, int idx, int val ) {
	while( idx < maxn ) {
		DP[sign][idx] = max(val, DP[sign][idx]);
		idx += idx & -idx;
	}
}

int queryBIT( int sign, int idx ) {
	int mx = 0;
	while( idx ) {
		mx = max(mx, DP[sign][idx]);
		idx -= idx & -idx;
	}
	return mx;
}

struct node {
	int sum;
	node* left, *right;
	node() {
		sum = 0;
		left = right = nullptr;
	}
};

node* st[2][maxn];

node* insert( node* root, int idx, int ss, int se, int index, int val ) {
	if( root == nullptr ) root = new node();
	if( ss == se ) {
		root->sum += val;
		return root;
	}
	int mid = (ss + se) / 2;
	if( index <= mid ) {
		root->left = insert( root->left, 2*idx, ss, mid, index, val );
	} else {
		root->right = insert( root->right, 2*idx+1, mid+1, se, index, val ); 
	}
	root->sum = 0;
	if( root->left ) root->sum += root->left->sum;
	if( root->right ) root->sum += root->right->sum;
	if( root->sum >= mod ) root->sum -= mod;
	return root;
}

int query( node* root, int idx, int ss, int se, int l, int r ) {
	if( l > se || r < ss || r < l ) return 0;
	if( !root ) return 0;
	if( l <= ss && se <= r ) return root->sum;
	int mid = ( ss + se ) / 2;
	int lsum = query( root->left, 2*idx, ss, mid, l, r );
	int rsum = query( root->right, 2*idx+1, mid+1, se, l, r );
	int s = lsum + rsum;
	if( s >= mod ) s-= mod;
	return s;
}

int L[maxn], C[maxn];
int main() {

	sc1( n );
	
	for(int i=1; i<=n; i++) sc1( A[i] );
	
	for(int i=1; i<=n; i++) {
		if( A[i] < 0 ) {
			int z = queryBIT(1, - A[i] - 1);
			L[i] = z+1;
			updateBIT(0, -A[i], z+1);
			int s = 1;
			if( z )
				s = query(st[1][z], 1, 1, 1e5, 1, -A[i]-1);
			C[i] = s;
			st[0][L[i]] = insert(st[0][L[i]], 1, 1, 1e5, -A[i], s);
		} else {
			int z = queryBIT(0, A[i] - 1);
			L[i] = z+1;
			updateBIT(1, A[i], z+1);
			int s = 1;
			if( z )
				s = query(st[0][z], 1, 1, 1e5, 1, A[i]-1);
			C[i] = s;
			st[1][L[i]] = insert(st[1][L[i]],1, 1, 1e5, A[i], s);
		}
	}	
	int mx = 0;
	for(int i=1; i<=n; i++) mx = max(mx, L[i]);
	int ans = 0;
	for(int i=1; i<=n; i++) {
		if( mx == L[i] ) {
			ans += C[i];
			if( ans >= mod ) ans -= mod;
		}
	}
	cout << mx << " " << ans << "\n";
	return 0;
}
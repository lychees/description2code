#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <limits.h>
using namespace std;
int n,m,B;
int cst[501][501],len[501][501];
//bool vis[501];
long long dp[501][1001];
vector<int> G[501];
void solve(){
	for(int i=1;i<n;i++){
		for(int j=0;j<=B;j++){
			long long tmp = INT_MAX;
			for(int u:G[i]){
			//	if (vis[u]) continue;
				if (cst[i][u]<=j){
			//		vis[u] = true;
					//dp[u][j] = min(dp[u][j],dp[u][j-cst[i][u]]+(long long) len[i][u]);
					tmp = min(tmp,dp[u][j-cst[i][u]]+(long long) len[i][u]);
				}
			}
			dp[i][j] = min(tmp,dp[i][j]);
		}
	}
}

int main(){
	int t;
	int a,b,c,d;
	scanf("%d",&t);
	//cout << INT_MAX << endl;
	while(t--){
		scanf("%d%d%d",&n,&m,&B);
		for(int i=0;i<n;i++) G[i].clear();
	//	memset(vis,false,sizeof(vis));
		//memset(dp,INT_MAX,sizeof(dp[0][0]*501*1001));
		for(int i=1;i<n;i++){
			for(int j=0;j<=B;j++) dp[i][j] = INT_MAX;
		//	cout << endl;
		}
		for(int i=0;i<1001;i++) dp[0][i] = 0;
		for(int i=0;i<m;i++){
			scanf("%d%d%d%d",&a,&b,&c,&d);
			G[a-1].push_back(b-1);
			G[b-1].push_back(a-1);
			cst[a-1][b-1] = cst[b-1][a-1] = c;
			len[a-1][b-1] = len[b-1][a-1] = d;
		}
		solve();
	/*	for(int i=0;i<n;i++){
			for(int j=0;j<=B;j++) cout << dp[i][j] << " ";
			cout << endl;
		}*/
		int q,x,y;
		scanf("%d",&q);
		while(q--){
			scanf("%d%d",&x,&y);
			
			if (dp[x-1][y]==INT_MAX) puts("-1");
			else printf("%lld\n",dp[x-1][y]);
		}
	}
	return 0;
}
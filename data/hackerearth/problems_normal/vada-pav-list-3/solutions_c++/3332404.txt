#include <iostream>
#define ASCII_a 97
using namespace std;

class Node{
	public:
	Node ** children = NULL;
	char mChar;
	bool countMyself = false;
	
	Node(char c){
		mChar = c;
	}
	
	bool addString(char* start, char* end){
		if(start == end){
			if(countMyself) return false;
			else{
				countMyself = true;
				return true;
			}
		}
		char* subString = start + 1;
		if(children == NULL) children = new Node*[26]();
		int iSS = ((int) (*subString)) % ASCII_a;
		if(children[iSS] == NULL) children[iSS] = new Node(*subString);
		return children[iSS]->addString(subString, end);
	}
	
	void printChildren(string prev){
		if(countMyself) cout << (prev + mChar) << endl;
		if(children == NULL) return;
		for(int i = 0; i < 26; i++){
			if(children[i] != NULL){
				children[i]->printChildren(prev + mChar);
			}
		}
	}
};

int main()
{
	std::ios_base::sync_with_stdio(false);
    // cout << "Hello World!" << endl;
    int N, index;
    int count = 0;
    string name;
    Node* dict[26];
    
    for(int i = 0; i < 26; i++){
    	dict[i] = new Node(char (ASCII_a + i));
    }
    
    cin >> N;
    while(N--){
    	cin >> name;
    	index = ((int) name[0]) % ASCII_a;
    	if(dict[index]->addString(&name[0], &name[name.length() - 1]) ){
    		count++;
    	}
    }
    
    cout << count << endl;
    for(int i = 0; i < 26; i++){
    	dict[i]->printChildren("");
    }
    
    return 0;
}

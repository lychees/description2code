#include <iostream>
#include <math.h> 
#include <string>
#include <sstream>
#include <string.h>
using namespace std;
#define SSTR( x ) dynamic_cast< std::ostringstream & >( \
        ( std::ostringstream() << std::dec << x ) ).str()
typedef long long int ll;
//[sum-130][flag-2][pos-13][K-50000]
const int M = 10000;
ll dp[130][2][15][M];
int sumOfDigit(ll num) {
	int ans = 0;
	while(num) {
		ans+=(num%10);
		num/=10;
	}
	return ans;
}

ll solveNaive(ll A, ll B, ll X, ll Y, ll K) {
	if(!K) return 0;
	ll firstMultiple = ceil(A/(double)K) * K;
	ll count = 0;
	for(ll i=firstMultiple; i<=B; i+=K) {
		ll sum = sumOfDigit(i);
		if(sum >= X && sum <= Y) {
			count++;
		}
	}
	return count;
}

ll solveDP(string a, ll K, ll X, ll Y, ll sum, ll flag, ll pos, ll rem) {
	ll count = 0;
	if(pos == a.length()) {
		if(sum >= X && sum <= Y && rem == 0) return 1;
		return 0;
	}
	if(dp[sum][flag][pos][rem] != -1) return dp[sum][flag][pos][rem];
	for(int i='0'; i<='9'; ++i) {
		if(flag) {
			if(i<a[pos]) {
				count += solveDP(a, K, X, Y, sum+i-'0', 0, pos+1, (i-'0'+rem*10)%K);
			} else if(i == a[pos]) {
				count += solveDP(a, K, X, Y, sum+i-'0', 1, pos+1, (i-'0'+rem*10)%K);
			}
		} else {
			count += solveDP(a, K, X, Y, sum+i-'0', 0, pos+1, (i-'0'+rem*10)%K);
		}
	}
	dp[sum][flag][pos][rem] = count;
	return count;
}

int main() {
    ll A, B, X, Y, K;
    cin>>A>>B>>X>>Y>>K;
    
    if(K < M) {
    	string a = SSTR(A-1);
    	string b = SSTR(B);
    	memset(dp, -1, sizeof(dp));
    	ll b_sol = solveDP(b, K, X, Y, 0, 1, 0, 0);
    	memset(dp, -1, sizeof(dp));
    	ll a_sol = solveDP(a, K, X, Y, 0, 1, 0, 0);
    	cout<<b_sol - a_sol;
    } else {
    	cout << solveNaive(A, B, X, Y, K);
    }
    return 0;
}

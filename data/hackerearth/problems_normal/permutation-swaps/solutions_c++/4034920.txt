#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<long> v[100005];
long node,edge,group[100005],p[100005],q[100005];
int visit[100005],mis[100005],finish=0;
	
	
void bfs(long start)
{
	queue<long> qu;
	long nxt;
	visit[start]=1;
	group[p[start]]=start;
	qu.push(start);
	
	while(!qu.empty())
	{
		int cur=qu.front();
		qu.pop();
		
		for(int i=0;i<v[cur].size();i++)
		{
			nxt=v[cur][i];
			
			if(visit[nxt]==0)
			{	
				visit[nxt]=1;
				group[p[nxt]]=start;
				qu.push(nxt);
			}
		}
	}
		
	if(group[p[start]]!=group[q[start]])	
	{
		cout<<"NO\n";
		finish=1;
	}
	else
	{
		mis[start]=0;
	}
	
} 

int main()
{
	int test;
	cin>>test;
	for(int a=0;a<test;a++)
	{
		finish=0;
		cin>>node>>edge;
		
		for(int i=1;i<node+1;i++)
		{
			mis[i]=0;
			v[i].clear();
			visit[i]=0;
			group[i]=0;
		}
		
		for(int i=1;i<node+1;i++)
			cin>>p[i];
		
		for(int i=1;i<node+1;i++)
			cin>>q[i];
		
		int n1,n2;
		for(int i=0;i<edge;i++)
		{
			cin>>n1>>n2;	
			v[n1].push_back(n2);
			v[n2].push_back(n1);
		}
		
		for(int i=1;i<node+1;i++)
		{
			if(p[i]!=q[i])
				mis[i]=1;
		}
	
		for(int i=0;i<node+1 && finish==0;i++)
		{
			if(mis[i]==1)	
			{
				if(group[p[i]]==0)
					bfs(i);
				else
				{
					if(group[p[i]]!=group[q[i]])	
					{
						cout<<"NO\n";
						finish=1;
					}
					else
					{
						mis[i]=0;
					}
				}
			}
		}
		if(finish==0)
			cout<<"YES\n";
		


	}


}

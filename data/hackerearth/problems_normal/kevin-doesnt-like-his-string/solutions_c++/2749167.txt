#include <bits/stdc++.h>

using namespace std;

set <int> taken[26];
set <int> not_taken[26];
set <int> :: iterator it;
bool vis[100005];

int main()
{
	int n,k;
	string s;
	
	cin >> n >> k;
	cin >> s;
	for ( int i = 0; i < n; i++ ) not_taken[s[i]-'a'].insert(i);
	for ( int i = 0; i < n; i++ ) {
		if ( vis[i] ) {
			taken[s[i]-'a'].erase(taken[s[i]-'a'].find(i));
			for ( int j = 0; j < s[i]-'a'; j++ ) {
				if ( !taken[j].empty() ) {
					int idx = *(taken[j].rbegin());
					taken[j].erase(taken[j].find(idx));
					swap(s[i], s[idx]);
					taken[s[idx]-'a'].insert(idx);
					break;
				}
				if ( k > 0 && !not_taken[j].empty() ) {
					k--;
					int idx = *(not_taken[j].rbegin());
					swap(s[i],s[idx]);
					vis[idx] = true;
					not_taken[j].erase(not_taken[j].find(idx));
					taken[s[idx]-'a'].insert(idx);
					break;	
				}
			}
		}
		else if ( k > 0 ) {
			not_taken[s[i]-'a'].erase(not_taken[s[i]-'a'].find(i));
			for ( int j = 0; j < s[i]-'a'; j++ ) {
				if ( !taken[j].empty() ) {
					k--;
					int idx = *(taken[j].rbegin());
					taken[j].erase(taken[j].find(idx));
					swap(s[i], s[idx]);
					taken[s[idx]-'a'].insert(idx);
					vis[idx] = true;
					break;
				}
				if ( k > 1 && !not_taken[j].empty() ) {
					k -= 2;
					int idx = *(not_taken[j].rbegin());
					swap(s[i], s[idx]);
					vis[idx] = true;
					not_taken[j].erase(not_taken[j].find(idx));
					taken[s[idx]-'a'].insert(idx);
					break;
				}
			}
		}
	}
	
	cout << s << endl;
	return 0;
}
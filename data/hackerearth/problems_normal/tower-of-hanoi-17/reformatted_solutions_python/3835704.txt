''' HackerEarth - Tower Of Hanoi
	NguyenDatSE '''

DISK_H = 1
DISK_R = 0
T = int(raw_input())
Ts = []
for t in xrange(T):
    N = int(raw_input())
    Ns = []
    for n in xrange(N):
        Ns.append(map(int, raw_input().split()))
    Ts.append(Ns)


class TowerOfHanoi:
    def __init__(self, disks):
        self.disks = disks
        self.ndisks = len(self.disks)
        self.maxh = [0 for n in xrange(self.ndisks + 1)]

        self.disks.sort()

    # Dynamic Programming to find maximum height obtainable
    def findMaxHeight(self):
        self.maxh[0] = self.disks[0][DISK_H]
        current_max = self.disks[0][DISK_H]

        for i in xrange(1, self.ndisks):
            self.maxh[i] = self.disks[i][DISK_H]
            for j in xrange(i):
                if (self.disks[i][DISK_H] > self.disks[j][DISK_H])\
                        and self.disks[i][DISK_R] > self.disks[j][DISK_R]:
                    self.maxh[i] = max(
                        self.maxh[i], self.maxh[j] + self.disks[i][DISK_H])
            current_max = max(self.maxh[i], current_max)
        return current_max


for t in xrange(T):
    solver = TowerOfHanoi(Ts[t])
    print solver.findMaxHeight()

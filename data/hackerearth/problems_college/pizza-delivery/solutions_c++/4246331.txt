#include <bits/stdc++.h>
using namespace std;

long long M[123][123]{};
const long long inf = 1e18;
int N;

long long dijkstra(int s, int t) {
	vector<long long> dist(123, inf);
	priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> Q;
	dist[s] = 0;
	Q.push({0, s});
	while(!Q.empty()) {
		pair<long long, int> Z = Q.top();
		Q.pop();
		int u = Z.second;
		long long d = Z.first;
		if(d == dist[u]) {
			for(int i = 0; i < N; i++) {
				if(i != u) {
					if(dist[i] > dist[u] + M[u][i]) {
						dist[i] = dist[u] + M[u][i];
						Q.push({dist[i], i});
					}
				}
			}
		}
	}
	return dist[t];
}

int main() {
	cin>>N;
	for(int i = 0; i < N; i++) {
		for(int j = 0; j < N; j++) {
			cin>>M[i][j];
		}
	}
	int T; cin>>T;
	int S, G, D;
	for(int i = 0; i < T; i++) {
		cin>>S>>G>>D;
		long long total = dijkstra(S, G) + dijkstra(G, D);
		cout<<total<<' '<<max(0LL, total - dijkstra(S, D))<<'\n';
	}
    return 0;
}

#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<utility>
#include<set>
#include<map>
#include<queue>
#include<vector>
#include<string>
#include<cstring>
#include<unordered_map>
#include<cassert>
#include<cmath>

//code by cl3488

#define ri(X) scanf("%d", &(X))
#define rii(X, Y) scanf("%d%d", &(X), &(Y))
#define riii(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define dri(X) int (X); scanf("%d", &X)
#define drii(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define driii(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define pb push_back
#define mp make_pair
#define rep(i, s, t) for ( int i=(s) ; i <(t) ; i++)
#define fill(x, v) memset (x, v, sizeof(x))
#define why(d) cerr << (d) << "!\n"
#define whisp(X, Y) cerr << (X) << " " << (Y) << "#\n"
#define exclam cerr << "!!\n"
typedef long long ll;
using namespace std;
typedef pair<int, int> pii;
const ll inf = (ll)1e9 + 70;
const ll mod = 1e9 + 7;
const int maxn = 1e5 + 1000;

vector<int> adj[maxn];
vector<int> radj[maxn];

bool vs[maxn];
vector<int> order;

void dfs(int v){
	if(vs[v]) return;
	vs[v] = true;
	for(int u : radj[v]){
		dfs(u);
	}
	order.pb(v);
}
vector<int> order2;
void dfs2(int v){
	if(vs[v]) return;
	vs[v] = true;
	for(int u : adj[v]){
		dfs2(u);
	}
	order2.pb(v);
}

bool ans[maxn];
int main(){
	if (fopen("input.txt", "r")) freopen("input.txt", "r", stdin);
	dri(n);
	dri(e);
	rep(i,0,e){
		drii(a,b);
		adj[a].pb(b);
		radj[b].pb(a);
	}
	rep(i,1,n+1){
		if(!vs[i]) dfs(i);
	}
	reverse(order.begin(), order.end());
	fill(vs, false);
	for(int i : order){
	//	cout << i << "!\n";
		if(vs[i]) continue;
		order2.clear();
		dfs2(i);
		if(order2.size() == 1){
			ans[i] = false;
		}
		else{
			for(int t : order2) ans[t] = true;
		}
	}
	rep(i,1,n+1){
		if(ans[i]) cout << 1 << " ";
		else cout << 0 << " ";
	}
	return 0;
}
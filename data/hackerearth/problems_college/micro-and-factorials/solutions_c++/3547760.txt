#include <bits/stdc++.h>

#define left nadnlassad
#define right asdaslknd
#define y1 kjdajasjdsas

#define pb push_back
#define mp make_pair

#define f first
#define s second

#define ll long long
#define ld long double
#define ull unsigned ll

#define _hash pair<ll, ull>
#define pii pair<int, int>
#define prr pair<pii, pii>

#define sqr(x) (x * 1LL * x)

#define vec vector<int>
#define sz(v) int(v.size())
#define all(v) v.begin(), v.end()
#define upper(v, x) (upper_bound(all(v), x) - v.begin())
#define lower(v, x) (lower_bound(all(v), x) - v.begin())
#define iter set<int>::iterator
#define _bits(x) __builtin_popcountll(x)

using namespace std;


const int nx[8] = {2, -2, -2, 2, 1, 1, -1, -1};
const int ny[8] = {1, 1, -1, -1, 2, -2, -2, 2};

const ll LINF = (ll) 2e18;
const int INF = 1e9 + 7;

const int N = 1e5 + 100;
const int MAXN = 5e7 + 50;
const double EPS = 1e-9, PI = 2 * acos(0.0);
int p[N];
vec v;
bool np[N];

inline int fact_pow (int n, int k) {
	int res = 0;
	while (n) {
		n /= k;
		res += n;
	}
	return res;
}

int get(int x, int y) {
   int cur = 1, cur1 = 1;
   if(y >= x)
      return 0;
   for(int i = 0; i < sz(v); i++) {
      int f = fact_pow(x, v[i]);
      int s = fact_pow(y, v[i]);
      cur = (cur * (f + 1LL)) % INF;
      cur1 = (cur1 * (s + 1LL)) % INF;
   }
   return (cur - cur1 + INF) % INF;
}

int slow(int x1, int y1) {
   ll x = 1, y = 1;
   for(int i = 2; i <= x1; i++)
      x *= i;
   for(int i = 2; i <= y1; i++)
      y *= i;
   int cnt = 0;
   for(ll i = 1; i * i <= x; i++) {
      if(x % i == 0) {
         int i1 = x / i;
         if(y % i)
            cnt++;
         if(i1 != i && y % i1)
            cnt++;
      }
   }
   return cnt;
}

int main() {
   #define fn ""
   #ifdef sony
      freopen("input.txt", "r", stdin);
      //freopen("output1.txt", "w", stdout);
   #else
      //freopen(fn".in", "r", stdin);
      //freopen(fn".out", "w", stdout);
   #endif // sony
   srand(time(NULL));
   p[0] = 1;
   for(int i = 1; i < N; i++)
      p[i] = (p[i - 1] * 2ll) % INF;
   for(int i = 1; i < N; i++)
      p[i] = (p[i] * 1ll + p[i - 1]) % INF;
   for(int i = 2; i < N; i++) {
      if(!np[i]) {
         if(i * 1ll * i < N) {
            for(int j = i * i; j < N; j += i)
               np[j] = 1;
         }
         v.pb(i);
      }
   }
   int t;
   scanf("%d", &t);
   while(t--) {
      int x, y, cur = 1;
      scanf("%d%d", &x, &y);
      printf("%d\n", get(x, y));
   }
   return 0;
}

/* in the name of ALLAH, most gracious, most merciful */

//{{{ ************[       Template       ]************
#include <bits/stdtr1c++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>

// using namespace __gnu_pbds;
using namespace std;
//{{{ ************[  Loops               ]************
#define FORAB(i, a, b)  for (__typeof(b) i = (a), i##_b = (b); i <= i##_b; ++i)
#define REP(i, n)       FORAB (i, 0, (n) - 1)
#define FOR(i, n)       FORAB (i, 1, (n) - 1 + 1)
#define ROFBA(i, a, b)  for (__typeof(b) i = (b), i##_a = (a); i >= i##_a; --i)
#define PER(i, n)       ROFBA (i, 0, (n) - 1)
#define ROF(i, n)       ROFBA (i, 1, (n) - 1 + 1)
#define FOREACH(i, s)   for (__typeof((s).end()) i = (s).begin(); i != (s).end(); ++i)
//}}}
//{{{ ************[  Floating points     ]************
#define EPS             DBL_EPSILON
#define ABS(x)          (((x) < 0) ? - (x) : (x))
#define ZERO(x)         (ABS(x) < EPS)
#define EQUAL(x, y)     (ZERO((x) - (y)))
//}}}
//{{{ ************[  Macros              ]************
#define MS(x, y)        memset((x), (y), sizeof((x)))
#define CLR(x)          MS((x), 0)
#define RST(x)          MS((x), -1)
#define ALL(x)          (x).begin(), (x).end()
#define SZ(x)           ((int)(x).size())
#define UNIQUE(x)       (x).resize(unique(ALL(x)) - (x).begin())
#define PB              push_back
#define MP              make_pair
#define F               first
#define S               second
//}}}
//{{{ ************[  Debugger            ]************
template <class A, class B> ostream& operator<<(ostream& o, const pair <A, B> &p) { // for std::pair
    return o << "(" << p.first << ", " << p.second << ")";
}

template <class T> void __print__(string param, T& x) { cout << param << " :: " << x << endl; }
template <class T> void __print__(string param, T x[], int n) {
    cout << string(param, 0, param.find(',')) << " :: ";
    REP (i, n) cout << (i ? ", " : "[") << x[i]; cout << "]\n";
}

template <class T> void __stl_print__(T& x) { // for all STL containers
    cout << "["; FOREACH (i, x) cout << (i != x.begin() ? ", " : "") << *i; cout << "]" << endl;
}

#define NL { cout << endl; }
#define LOG(...) { __print__(#__VA_ARGS__, __VA_ARGS__); }
#define SLOG(x) { cout << #x << " :: "; __stl_print__(x); }
//}}}
//{{{ ************[  Utilities           ]************
template <class A, class B, class C> inline C power(A p, B e, C m) { // (p ^ e) % m
    long long ret = 1;
    for (; e; e >>= B(1)) {
        if (e & B(1)) ret = (ret * p) % m;
        p = (p * p) % m;
    }
    return (C) (ret >= 0 ? ret : (ret + m));
}

template <class T> inline bool read(T& x) {
    int c, sgn = 1;
    for (c = getchar(); ~c && (c < '0' || c > '9'); c = getchar()) if (c == '-') sgn = -1;
    for (x = 0; ~c && ('0' <= c && c <= '9'); c = getchar()) x = x * 10 + c - '0';
    x *= sgn;
    return ~c;
}

vector <string> tokenizer(string s) {
    vector <string> vs; stringstream ss(s);
    for (string token; ss >> token;) vs.PB(token);
    return vs;
}

template <class A, class B> inline A max(A a, B b) { return a > b ? a : b; }
template <class A, class B> inline A min(A a, B b) { return a < b ? a : b; }
template <class A, class B> inline void swap(A &a, B &b) { A temp = a; a = b; b = temp; }
template <class A, class B> inline B mod(A a, B m) { return (a %= m) >= 0 ? a : (a + m); }
template <class T> inline T modInv(long long x, T m) { return x < 2 ? x : mod((1 - 1LL * m * modInv(m % x, x)) / x, m); } // x ^ -1 = y (mod m)
template <class T> inline T gcd(T a, T b) { while (a && b) a > b ? a %= b : b %= a; return a + b; }
template <class T> string toString(T x) { stringstream ss; ss << x; return ss.str(); }
template <class T> void toNumber(string s, T& x) { stringstream ss(s); ss >> x; }

// int dx[] = {0, -1, 0, 1}, dy[] = {-1, 0, 1, 0}; // 4 directions, clockwise
// int dx[] = {0, -1, -1, -1, 0, 1, 1, 1}, dy[] = {-1, -1, 0, 1, 1, 1, 0, -1}; // 8 directions, clockwise
// int dx[] = {-1, -2, -2, -1, 1, 2, 2, 1}, dy[] = {-2, -1, 1, 2, 2, 1, -1, -2}; // knight's move, clockwise

// cin.sync_with_stdio(false); cin.tie(false);
// cout << fixed << setprecision(10) << p << endl;
//}}}
//{{{ ************[  Typedefs && Consts  ]************
typedef long long LL;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
typedef vector <int> VI;
typedef vector <PII> VII;

const int MAX_N = int(1e5) + 7;
const int MAX_E = int(1e6) + 7;
// const int MOD   = int(1e9) + 7;
const int INF   = (1 << 30) - 1;
const LL  LINF  = 1LL << 62;
const double PI = 2 * acos(0.0);
//}}}
//}}}

// Stolen from 'Anta'
// just for testing purpose

struct State {
    int u, v;
    LL d;
    bool type;

    State(int u, int v, LL d, bool type) :
            u(u), v(v), d(d), type(type) {}

    bool operator < (const State &rhs) const {
        return d > rhs.d;
    }
};

int N, M;

priority_queue<State> pq;
vector<VII> graph[2], igraph[2];
vector< vector<LL> > dist[2];
vector<bool> vis;

void add(int u, int v, LL d, bool type) {
    if (dist[type][u][v] > d) {
        dist[type][u][v] = d;
        pq.push(State(u, v, d, type));
    }
};

int main() {
#ifdef Local
    freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
#endif
    while (~scanf("%d %d", &N, &M)) {
        REP(type, 2) {
            graph [type].assign(N, VII());
            igraph[type].assign(N, VII());
        }

        REP(i, M) {
            int u; int v; int w; char c[2];
            scanf("%d %d %d %s", &u, &v, &w, c);
            --u, --v;

            graph [*c == '(' ? 0 : 1][u].PB(MP(v, w));
            igraph[*c == '(' ? 0 : 1][v].PB(MP(u, w));
        }

        REP(type, 2) {
            dist[type].assign(N, vector<LL>(N, LINF));
        }

        REP(i, N) add(i, i, 0, 0);
        REP(i, N) {
            FOREACH(e, graph[1][i])
                add(i, e->F, e->S, 1);
        }

        vis.assign(N * N * 2, 0);
        while (!pq.empty()) {
            State cur = pq.top(); pq.pop();

            int cur_hash = (cur.u * N + cur.v) * 2 + cur.type;
            if (vis[cur_hash]) continue;
            vis[cur_hash] = true;

            if (cur.type == 0) {
                FOREACH(e, graph[1][cur.v]) {
                    add(cur.u, e->F, cur.d + e->S, 1);
                }

                REP(i, N) {
                    add(i, cur.v, dist[0][i][cur.u] + cur.d, 0);
                    add(cur.u, i, cur.d + dist[0][cur.v][i], 0);
                }
            } else {
                FOREACH(e, igraph[0][cur.u]) {
                    add(e->F, cur.v, e->S + cur.d, 0);
                }
            }
        }

        REP(i, N) {
            REP(j, N) {
                if (j != 0) putchar(' ');

                LL d = dist[0][i][j];
                printf("%lld", d == LINF ? -1 : d);
            }
            puts("");
        }
    }

    return 0;
}

#include <iostream>
#include<stdio.h>
#include<stack>
#include<vector>
#include<list>
#include<unordered_map>
using namespace std;
list<int> mylist[1000005];
vector<int> vec;
vector<int> visited;
stack<int > st;
int arr[1005][1005];
void dfs(int &cnt)
{
	int top=st.top();
	for(list<int>::iterator it =mylist[top].begin();it!=mylist[top].end();it++)
	{
		if(visited[*it]==0 )
		{
			visited[*it]=cnt;
			st.push(*it);
			dfs(cnt);
			st.pop();
		}
	}
}


int main()
{
 
 	int t;
 	cin>>t;
 	while(t>0)
 	{
 		int n,m;
 		cin>>n>>m;
 		visited.assign(n*m+1,0);
 		
 		for(int i=1;i<=n;i++)
 		{
 			for(int j=1;j<=m;j++)
 			{
 				scanf("%d",&arr[i][j]);
 				
 			}
 		}
 		
 		for(int i=1;i<=n;i++)
 		{
 			for(int j=1;j<=m;j++)
 			{
 				if(arr[i][j]==1)
 				{
	 				if(i>1 && arr[i-1][j]==1 )
	 				{
	 					mylist[(i-1)*m+j].push_back((i-2)*m+j);		
	 				}
	 				if(i<n && arr[i+1][j]==1)
	 				{
	 					mylist[(i-1)*m+j].push_back((i*m+j));
	 				}
	 				if(j>1 && arr[i][j-1]==1)
	 				{
	 					mylist[(i-1)*m+j].push_back((i-1)*m+j-1);
	 				}
	 				if(j<m && arr[i][j+1]==1 )
	 				{
	 					mylist[(i-1)*m+j].push_back((i-1)*m+j+1);
	 				}
	 				if(i>1 && j>1 && arr[i-1][j-1]==1)
	 				{
	 					mylist[(i-1)*m+j].push_back((i-2)*m+j-1);
	 				}
	 				if(i>1 && j<m && arr[i-1][j+1]==1)
	 				{
	 					mylist[(i-1)*m+j].push_back((i-2)*m+j+1);
	 				}
 					if(i<n && j>1 && arr[i+1][j-1]==1)
 					{
 						mylist[(i-1)*m+j].push_back((i)*m+j-1);
 					}
 					if(i<n && j<m && arr[i+1][j+1]==1)
 					{
 						mylist[(i-1)*m+j].push_back((i)*m+j+1);
 					}
	 			}
 			}
 		}
 		int cnt=1;
 		for(int i=1;i<=n;i++)
 		{
 			for(int j=1;j<=m;j++)
 			{
	 			if(visited[(i-1)*m+j]==0 && arr[i][j]==1)
	 			{
	 				visited[(i-1)*m+j]=cnt;
	 				st.push((i-1)*m+j);
	 				dfs(cnt);
	 				st.pop();
	 				cnt++;
	 			}
 			}
 		}
 		for(int i=1;i<=m*n;i++)
 			mylist[i].clear();

 		unordered_map<int,int> mymap;
 		
 		int maximum=0;
 		for(int i=1;i<=m*n;i++)
 		{
 			if(visited[i]!=0)
 			{
 				if(mymap.find(visited[i])==mymap.end())
	 			{
	 				maximum=max(maximum,1);
	 				mymap[visited[i]]=1;
	 			}
	 			else
	 			{	int temp=mymap[visited[i]]=mymap[visited[i]]+1;
	 				maximum=max(maximum,temp);
	 			}
 			}
 		}
 		
 		visited.clear();
 		cout<<mymap.size()<<" "<<maximum<<endl;
 		t--;
 	}
}

#include<bits/stdc++.h>
#include <vector>
using namespace std;
typedef long long ll;
typedef double ld;
typedef pair<ll,ll> pll;
#define pb push_back
#define loop(i,n) for(int i=0;i<n;i++)
const ll N = 1000005;
int heit[N];
int visited[N];
int in[N];
int out[N];
int t;
void dfs(int,int ,vector<int>* ptr);
int main()
{
    ios_base::sync_with_stdio(0);

        int n;
        cin>>n;
        vector<int> arr[n];
        int a,b;

        loop(i,n-1){
            cin>>a>>b;
            arr[a-1].pb(b-1);

            arr[b-1].pb(a-1);
        }
        int h;
        h=0;
       ///// ptr=arr;
        dfs(0,h,arr);
        int qu;
        cin>>qu;
        int type,x,y;

        loop(i,qu){
            cin>>type>>x>>y;
            x--;y--;
            if(type==0)
            {
                if(in[x]<in[y]&&out[x]>out[y]){
                    cout<<"YES ";
                    cout<<heit[y]-heit[x]+1<<endl;

                }
                else{
                    cout<<"NO"<<endl;
                }
            }
            else
            {
                if(in[y]<in[x]&&out[y]>out[x])
                {
                    cout<<"YES ";
                    cout<<heit[x]-heit[y]+1<<endl;
                }
                else
                {
                    cout<<"NO"<<endl;
                }
            }






        }
    return 0;
}

void dfs(int n, int h,vector<int>* arr){
    visited[n]=1;
    t++;
    heit[n]=h;
    in[n]=t;
    loop(i,arr[n].size()){
        if(visited[arr[n][i]]==0)
        {    dfs(arr[n][i],h+1,arr);}
    }
    t++;
    out[n]=t;

}

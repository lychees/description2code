#include <iostream>
#include<vector>
#include<stack>
using namespace std;
int result=0;
int resultTemp=0;
int nodePos=1;
void dfs(int node,vector<int> adj[],bool hasVisisted[])
{
	stack<int> sta;
	sta.push(node);
	hasVisisted[node]=true;
	resultTemp=1;
	while(!sta.empty())
	{
		int data=sta.top();
		sta.pop();
		for(int i=0;i<adj[data].size();i++)
		{
			if(!hasVisisted[adj[data][i]])
			{
				sta.push(adj[data][i]);
				hasVisisted[adj[data][i]]=true;
				resultTemp++;
			}
		}
	}
	if(nodePos==1)
	{
		result=resultTemp;
	}
	else if(resultTemp<result)
	{
		result=resultTemp;
	}
}

int main()
{
    int nodeNum,edgeNum;
    cin>>nodeNum>>edgeNum;
    vector<int> adj[10000];
    bool hasVisisted[10000];
    for(int i=0;i<10000;i++)
    {
    	hasVisisted[i]=false;
    }
    for(int i=0;i<edgeNum;i++)
    {
    	int x,y;
    	cin>>x>>y;
    	adj[x].push_back(y);
    	// adj[y].push_back(x);
    }
    
    for(int i=1;i<=nodeNum;i++)
    { 
    	 for(int i=0;i<10000;i++)
        {
         	hasVisisted[i]=false;
        }
       if(!hasVisisted[i])
       {
       	 nodePos=i;
       	 resultTemp=0;
       	 dfs(i,adj,hasVisisted);
       }
    }
    cout<<result<<endl;
    return 0;
}

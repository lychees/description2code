    #include<bits/stdc++.h>
    using namespace std;
         
    #define ll long long
    #define mset(m,v) memset(m,v,sizeof(m))
    #define iter(a,it) for(auto it: a)
    #define f(it,o) f(aut(it, (o).begin()); it != (o).end(); ++ it)
    #define tr(cont, it) for(typeof(cont.begin()) it = cont.begin(); it != cont.end(); it++)    
    #define dbg(x)  cout<< #x << ": " << (x) << endl; 
    #define all(o) (o).begin(), (o).end()
    #define UNIQUE(c) (c).resize(unique(all(c)) - (c).begin())  // use with vectors
    #define present(cont, e) (cont.find(e) != cont.end()) // find for set/map
    #define vpresent(cont, e) (find(all(cont),e) != cont.end())  //find for vectors
    #define pb push_back
    #define mp make_pair
    #define sz(x) (x.size())
    #define vii vector<pair<int,int>>
    #define pii pair<int,int>
     
    char a[33][33];
    int visit[33][33];
    int cnt=0,mm=1000100;
    int n;
     
    void dfs(int x,int y)
    {
    	if(a[x][y]=='E')
    	{
    		mm=min(mm,cnt);
    		cnt--;
    		return ;
    	}
    	visit[x][y]=1;
    	
    	if(y+1<n && (a[x][y+1]=='P'||a[x][y+1]=='E') && visit[x][y+1]==0)
    	{
    		cnt++;
    		dfs(x,y+1);
    	}
    	if(y>0 && (a[x][y-1]=='P'||a[x][y-1]=='E') && visit[x][y-1]==0)
    	{
    		cnt++;
    		dfs(x,y-1);	
    	}
    	if(x+1<n && (a[x+1][y]=='P'||a[x+1][y]=='E') && visit[x+1][y]==0)
    	{
    		cnt++;
    		dfs(x+1,y);
    	}
    	if(x>0 && (a[x-1][y]=='P'||a[x-1][y]=='E') && visit[x-1][y]==0)
    	{
    		cnt++;
    		dfs(x-1,y);
    	}
    	
    	cnt--;
    	visit[x][y]=0;
    	return ;
    }
     
    int main()
    {
    	int i,j,k,m;
    	cin>>n;
    	
    	for(i=0;i<n;i++)
    	{
    		for(j=0;j<n;j++)
    			cin>>a[i][j];
    	}
    	
    	mset(visit,0);
    	dfs(0,0);
    	cout<<mm<<endl;
    	return 0;
    }
#include<bits/stdc++.h>
using namespace std;
const int nmax=200010;
int a[nmax];
int b[nmax];
int tree[1000010];
typedef long long ll;
int read(int idx) {
    int sum=0;
    while(idx>0) {
        sum+=tree[idx];
        idx-=(idx&-idx);
    }
    return sum;
}
void update(int idx,int val) {
    while(idx<1000010) {
        tree[idx]+=val;
        idx+=(idx&-idx);
    }
    return;
}
bool isPrime(ll ans) {
    bool flag=true;
    for(ll i=2;i*i<=ans;i++) {
        if(ans%i==0) {
            flag=false;
            break;
        }
    }
    return flag;
}
int main() {
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++) {
        scanf("%d",&a[i]);
    }
    for(int i=0;i<n;i++) {
        scanf("%d",&b[i]);
    }
    for(int i=1;i<n;i++) {
        update(b[i],1);
    }

    long long ans=0;
    for(int i=0;i<n-1;i++) {
        int diff=read(a[i]-1);
        ans+=diff;
        update(b[i+1],-1);
    }
    if(isPrime(ans)==true) {
        puts("MAGIC INVERSION");
    } else {
        puts("SIMPLE INVERSION");
    }
    return 0;
}
#include<cstdio>
#include<iostream>
#include<cstdlib>
using namespace std;

long modPow(long a, long x, long p) {
    //calculates a^x mod p in logarithmic time.
    long res = 1;
    while(x > 0) {
        if( x % 2 != 0) {
            res = (res * a) % p;
        }
        a = (a * a) % p;
        x /= 2;
    }
    return res;
}

long modInverse(long a, long p) {
    //calculates the modular multiplicative of a mod m.
    //(assuming p is prime).
    return modPow(a, p-2, p);
}
long modBinomial(long n, long k, long p) {
// calculates C(n,k) mod p (assuming p is prime).

    long numerator = 1; // n * (n-1) * ... * (n-k+1)
    for (int i=0; i<k; i++) {
        numerator = (numerator * (n-i) ) % p;
    }

    long denominator = 1; // k!
    for (int i=1; i<=k; i++) {
        denominator = (denominator * i) % p;
    }

    // numerator / denominator mod p.
    return ( numerator* modInverse(denominator,p) ) % p;
}



int main()
{
	ios_base::sync_with_stdio(false);

	long T,n,r;
	cin>>T;
	while(T--)
	{
		cin>>n>>r;
		long a[n], count =0;
		for(long i=0;i<n;i++)
		{
			cin>>a[n];
			count+=a[n];
		}
		r-=count;

		long ans = modBinomial(r+n-1, r, 1000000007);
		cout<<ans<<"\n";

	}
	return 0;
}
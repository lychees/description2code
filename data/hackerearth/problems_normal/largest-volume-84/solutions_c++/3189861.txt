// Bismillahirrahmanirrahim
// AgriCoder IPB
#include <cstdio>
#include <iostream>
#include <cmath>
#include <cstring>
#include <string>
#include <cctype>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <functional>
#include <climits>

using namespace std;

#define FOR(i, agri, coder) for (int i = (int)agri; i <= (int)coder; i++)
#define REP(agri,coder) for (int agri = 0; agri < (int)coder; agri++)
#define FOREACH(i,agricoder) for (typeof((agricoder).end()) i = (agricoder).begin(); i != (agricoder).end(); ++i)
#define RESET(agri,coder) memset(agri, coder, sizeof(agri))
#define pb push_back
#define mp make_pair
#define EPS 1e-9
#define INF 0x3F3F3F3F
#define getchar_unlocked getchar
#define NL printf("\n----------------------------\n")

typedef long long ll;
typedef unsigned long long ULL;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef pair<ll,ll> PLL;

int arahbar[8] = {0,1,0,-1,1,1,-1,-1};
int arahkol[8] = {1,0,-1,0,1,-1,-1,1};
int kudabar[8] = {-2,-1,1,2, 2,1 , -1 ,-2};
int kudakol[8] = {1 ,2 ,2,1,-1,-2 , -2,-1};

template<typename T>
T getNum() {
   T res=0;
   char c;
   while(1)
   {
      c=getchar_unlocked();
      if(c==' ' || c=='\n') continue;
      else break;
   }
   bool negatif;
   if (c=='-') {
       negatif = true;
       res = 0;
   }
   else {
       res=c-'0';
       negatif = false;
   }
   while(1)
   {
      c=getchar_unlocked();
      if('0'<=c && c<='9') res=10*res + c-'0';
      else break;
   }
   if (negatif) res*=-1;
   return res;
}

// ================================  TEMPLATE ENDS HERE ================================================== //

#define MAXN 1000005
#define PI 3.141592653
#define STEP 0.001

double toRad(double deg){
	return PI * deg / 180.0;
}

int main() {
	double r = getNum<double>();
	double s = getNum<double>();

	double area = PI * r*r;
	
	//cylinder
	double cylinder = area*s;
	
	//truncated cone (base smaller)
	
	double volConeSmall = 0.0;
	for(double teta=0.00001 ; teta<90.00000 ; teta+=STEP){
		double r1 =  r + s*cos(teta);
		double h = s*sin(teta) + r*tan(teta);
		double vol = r1*r1*PI*h/3.0;
		vol -= (area*r*tan(teta)/3.0);

		volConeSmall = max(volConeSmall,vol);
	}

	double volConeBig = 0.0;

	for(double teta=0.00001 ; teta<90.00000 ; teta+=STEP){
		double r1 = r - s*cos(teta);
		double h = s*sin(teta) + r1*tan(teta);
		double vol = area*h/3.0;
		vol -= (PI*r1*r1*r1*tan(teta)/3.0);

		volConeBig = max(volConeBig,vol);
	}

	double res = max(cylinder,max(volConeBig,volConeSmall));

	printf("%.2lf\n", res);
	
	return 0;
}

// Alhamdulillahirabbilalamin

/* Trico ------------------------> NIT Silchar

“All power is within you; you can do anything and everything.
Believe in that, do not believe that you are weak; do not believe that you are half-crazy lunatics,
as most of us do nowadays. You can do any thing and everything, without even the guidance
of any one. Stand up and express the divinity within you.”

 */
#include<bits/stdc++.h>
#define ll long long
#define pll pair<ll,ll>
#define vl vector<ll>
#define mod 1000000007
#define fori(z,n) for(int i=z;i<n;i++)
#define forj(z,n) for(int j=z;j<n;j++)
#define fork(z,n) for(int k=z;k<n;k++)
#define db(x) cout << (#x) << " = " << x << endl;
#define trico() int t;cin>>t ; while(t--)
#define CHECK_BIT(var,pos) ((var) & (1<<(pos)))
#define p_iter vector<pll>::iterator
#define l_iter vector<ll>::iterator
#define forstl(m) for(it=m.begin();it!=m.end();it++)
#define bitcnt(x) __builtin_popcountll(x)
const int nax = 1e6 + 5;
const int lax = 1e5 + 5;
const int pax = 2e5 + 5;
const int inf = 1e9 + 5;
#define sl(n) scanf("%I64d",&n)
#define pl(n) printf("%I64d",n)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
using namespace std;
static int u=0;
void f_case(){u++;cout<<"Case "<<u<<": ";}
//ll modPow(ll a,ll b,ll MOD) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
//ll modInverse(ll a){return modPow(a,MOD-2);}

long dp[55][1<<15];
long arr[55];
long prime[16]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47};
int s;


long solve(long n ,long mask)
{
  if(n==s)
    return 0;
    if(dp[n][mask]!=-1)
        return dp[n][mask];
    if(arr[n]==1)
        return dp[n][mask]=1+solve(n+1,mask);
    long tmp=solve(n+1,mask);
    long nmask=mask;
    for(int i=0;i<15;i++)
    {
        if(arr[n]%prime[i]==0)
        {
            if(mask&(1<<i))
                return dp[n][mask]=tmp;
            nmask|=(1<<i);
        }
    }
    return dp[n][mask]=max(tmp,(1+solve(n+1,nmask)));

}

int main()
{
 //freopen("input.in", "r", stdin);


 trico()
 {
     fori(0,55) forj(0,(1<<15)) dp[i][j]=-1;
     long mask=0;
     cin>>s;
     fori(0,s)
     cin>>arr[i];
     cout<<solve(0,mask)<<"\n";


 }


}

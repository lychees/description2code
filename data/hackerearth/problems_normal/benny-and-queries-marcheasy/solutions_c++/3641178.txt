#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int main(){
	int n,q;
	cin>>n>>q;
	vector<vector<int>> tree(2097152);
	vector<int> a(n+1);
	for(int i=2;i<15;i++){
		for(int j = 1<<(i-1); j < (1 << i); j++) tree[j].reserve(500000/(1<<(i-1)));
	}
	for(int i=1;i<=n;i++){
		int t;
		cin>>t;
		a[i] = t;
		int pos = 1;
		for(int j=19;j>=0;j--){
			pos<<=1;
			if(t&(1<<j)) ++pos;
			tree[pos].push_back(i);
		}
	}
	for(vector<vector<int>>::iterator itr = tree.begin() + 2;itr!=tree.end();itr++){
		sort(itr->begin(),itr->end());
	}
	while(q--){
		int x,l,r;
		cin>>l>>r>>x;
		int pos = 1;
		for(int i=19;i>=0;i--){
			pos<<=1;
			if(!(x&(1<<i))) ++pos;
			vector<int>::iterator lb = lower_bound(tree[pos].begin(),tree[pos].end(),l);
			vector<int>::iterator ub = upper_bound(tree[pos].begin(),tree[pos].end(),r);
			if(lb==ub/*tree[pos].end()*/) {
				if(!(x&(1<<i))) --pos;
				else ++pos;
			}
			//else if(lb == --ub) break;
		}
		cout<<(x^a[*tree[pos].begin()])<<endl;
	}
	return 0;
}
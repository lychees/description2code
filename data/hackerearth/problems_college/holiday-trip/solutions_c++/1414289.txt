#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define FL(i,a,b) for(ll i=a;i<b;i++)
#define FOR(i,n) for(ll i=0;i<n;i++)
#define SORTF(x) sort(x.begin(),x.end(),func);
#define SORT(x) sort(x.begin(),x.end())
#define pb(x) push_back(x)
#define SET(v, val) memset(v, val, sizeof(v)) ;
#define RSORT(v) { SORT(v) ; REVERSE(v) ; }
#define ALL(v) v.begin(),v.end()
#define REVERSE(v) { reverse(ALL(v)) ; }
#define UNIQUE(v) unique((v).begin(), (v).end())
#define RUNIQUE(v) { SORT(v) ; (v).resize(UNIQUE(v) - (v).begin()) ; }
#define fill(x,n) memset(x,n,sizeof(x))
#define S(n) scanf("%lld",&n)

//ll dx[] = {-1,0,1,0}, dy[] = {0,1,0,-1};
//ll dx[] = {1,1,1,0,0,-1,-1,-1}, dy[] = {1,0,-1,1,-1,1,0,-1};
//ll gcd(ll a, ll b) {if (a == 0 || b == 0) return maX(a,b); if (b % a == 0) return a; return gcd(b%a, a);}
//ll small_primes[] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349};
//ll toll(const string &s) { stringstream ss; ss << s; ll x; ss >> x; return x; }
//ll modPow(ll a,ll b) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
//ll modInverse(ll a){return modPow(a,MOD-2);}
//ll nCk(ll n, ll k){if(k<0)return 0;ll numerator = 1;forall(il,0,k)numerator =(numerator*(n-il))%MOD;ll denominator = 1;forall(il,1,k+1)denominator=(denominator*il)%MOD;return (numerator*modInverse(denominator))%MOD;}

#define inf 1000000000
#define MAXN 2004

using namespace std;

vector<int> tree[MAXN];
int dist[MAXN];
int n;

int bfs(int node) {
    queue<int> kju;
    
    memset(dist, -1, sizeof dist);
    dist[node] = 0;
    kju.push(node);
    
    int limit;
    while (!kju.empty()) {
        int cur_node = kju.front(); kju.pop();
        
        limit = tree[cur_node].size();
        for (int i = 0; i < limit; ++i) {
            if (dist[tree[cur_node][i]] == -1) {
                kju.push(tree[cur_node][i]);
                dist[tree[cur_node][i]] = dist[cur_node]+1;
            }
        }
    }
    
    int maks = dist[node];
    int maks_node = node;
    for (int i = 0; i < n; ++i) {
        if (dist[i] > maks) { maks = dist[i]; maks_node = i; }
    }
    
    return maks_node;
}

int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		
	    scanf("%d\n", &n);
	    
	    int u, v;
	    for(int i = 0;i <= n;i++) {
				tree[i].clear();
			
			} 
	    for (int qwertz = 1; qwertz < n; ++qwertz) {
	        scanf("%d%d", &u, &v);
	        tree[u].push_back(v);
	        tree[v].push_back(u);
	    }
	    
	    int node = bfs(0);
    	node = bfs(node);
    
    	printf("%d\n", dist[node] + 1);
	}
    return 0;
    
}


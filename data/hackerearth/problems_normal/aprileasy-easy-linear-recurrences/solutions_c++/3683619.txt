#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9 + 7;
 
typedef vector< vector<int> > Matrix;
typedef long long ll;
 
int n, a, b, c, d, e, f, F[2], G[2];
int q;
int M[30][5][5];
int C[5][5];
int bb;
long long pp = (long long)MOD * MOD;

void mul(int a[5][5], int b[5][5], int c[5][5]) {
  int w[5][5];
  memset(w, 0, sizeof w);
  for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 5; j++) {
      long long t = 0;
      for (int k = 0; k < 5; k++) {
        t += (long long)a[i][k] * b[k][j];
        if (t >= pp) {
          t -= pp;
        }
      }
      w[i][j] = t % MOD;
    }
  }
  memcpy(c, w, sizeof w);
}
 
void mul2(int a[5][5], int b[5][5], int c[5][5]) {
  int w[5][5] = {};
  for (int j = 0; j < 5; j++) {
    long long t = 0;
    for (int k = 0; k < 5; k++) {
      t += (long long)a[0][k] * b[k][j];
      if (t >= pp) {
        t -= pp;
      }
    }
    w[0][j] = t % MOD;
  }
  memcpy(c, w, sizeof w);
} 
void add(int &x, int y) {
  x += y;
  if (x >= MOD) x -= MOD;
}

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif
  scanf("%d%d%d%d%d%d%d%d%d%d", &a, &b, &c, &d, &e, &f, F, F + 1, G, G + 1);
  scanf("%d", &q);
  M[0][0][3] = d;
  M[0][1][0] = 1;
  M[0][1][1] = a;
  M[0][1][4] = e;
  M[0][2][1] = b;
  M[0][3][3] = c;
  M[0][3][2] = 1;
  M[0][3][4] = f;
  M[0][4][4] = 1;
  for (int tc = 1; tc <= q; ++tc) {
    memset(C, 0, sizeof C);
    C[0][0] = F[0];
    C[0][1] = F[1];
    C[0][2] = G[0];
    C[0][3] = G[1];
    C[0][4] = (e * 1ll * F[0] + f * 1ll * G[0]) % MOD;
    scanf("%d", &n);
    for (int k = 0; n;) {
      if (n & 1) {
        mul2(C, M[k], C);
      }
      if (!(n >>= 1)) {
        break;
      }
      if (k == bb) {
        bb++;
        mul(M[k], M[k], M[k + 1]);
      }
      k++;
    }
    printf("%d\n", C[0][4]);
  }
  return 0;
}
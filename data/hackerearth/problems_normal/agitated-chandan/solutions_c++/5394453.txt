#include <bits/stdc++.h>

using namespace std;

typedef pair<int,int> ii;
typedef vector<ii> vii;

void BFS(vector<vii> &adj,int src,int *visited,int *distance)
{
	queue<int> q;
	q.push(src);
	distance[src]=0;
	visited[src]=1;
	int weight=0;
	while(!q.empty())
	{
		int u=q.front();
		q.pop();
		for(int i=0;i<adj[u].size();i++)
		{
			int v=adj[u][i].first;
			int wt=adj[u][i].second;
			if(!visited[v])
			{
				distance[v]=distance[u]+wt;
				visited[v]=1;
				q.push(v);
			}
		}
		//cout<<"u: "<<u<<" weight:"<<distance[u]<<endl;
	}
}

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int nodes;
		cin>>nodes;
		vector<vii> adj(nodes+1);
		for(int i=0;i<nodes-1;i++)
		{
			int v1,v2,wt;
			cin>>v1>>v2>>wt;
			adj[v1].push_back(make_pair(v2,wt));
			adj[v2].push_back(make_pair(v1,wt));
		}
		int distance[nodes+1];
		int visited[nodes+1];

		memset(distance,0,sizeof(distance));
		memset(visited,0,sizeof(visited));
		
		BFS(adj,1,visited,distance);
		int pos=max_element(distance+1,distance+nodes+1)-distance;
		memset(distance,0,sizeof(distance));
		memset(visited,0,sizeof(visited));
		
		BFS(adj,pos,visited,distance);
		int max=*max_element(distance+1,distance+nodes+1);
		int cost=0;
		if(max<=100)
			cost=0;
		else if(max>100&&max<=1000)
			cost=100;
		else if(max>1000&&max<=10000)
			cost=1000;
		else
			cost=10000;
		cout<<cost<<" "<<max<<endl;
	}
}
#include <iostream>
#include<bits/stdc++.h>
using namespace std;


vector < pair < int , pair < int , int > > >G;
int par [100002];
int n , m;
int	find	(int	x)	{
	
	if	(x	!=	par[x])		{
		par[x]	=	find(par[x]);
	}
	return	par[x];
}
int	kruskal()	{
	
	int pu,	pv;
	int	cost	=	0;
	
	for	(int	i	= 	2	*	m	-	1;i	>=	0;i--) {
		
		pu	=	find(G[i].second.first);
		pv	=	find(G[i].second.second);
	//	std::cout << G[i].second.first << G[i].second.second	<<	G[i].first	<<endl;
		if	(par[pu]	!=	par[pv])	{
			
			cost	+=	G[i].first;
			par[pu]	=	par[pv];
		}
	}
	return	cost;
	
}

int main()
{
    int t;
    cin >> t;
    while (t--) {
    	cin >> n >> m;
    	int u, v, w;
    	for (int i = 0;i < m;i++) {
    		
    		std::cin >> u	>>	v	>>	w;
    		G.push_back(make_pair(w,make_pair(u,v)));
    		G.push_back(make_pair(w,make_pair(v,u)));
    	}
    	for	(int	i	=	0;i	<=	n;i++)	{
    		par[i]	=	i;
    	} 
    	// for(int i=0;i<m;i++) {
    	// 	cout<<G[i].second.first<<	" "	<<	G[i].second.second	<<	"	"	<<	G[i].first	<<	endl;	
    	// }
    	sort(G.begin(),G.end());
    	
    	int	cost	=	kruskal();
    	//for	(int	i	=	0;i	<=	m;i++)	{
    		G.clear();
    	
    	std::cout << cost << std::endl;
    	
    }
    return 0;
}

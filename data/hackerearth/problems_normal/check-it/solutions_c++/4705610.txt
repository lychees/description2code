#include <iostream>

using namespace std;

#define MAX 5500
#define MAXE 40100

int tc, n, m, u, v;
int root[MAX], size[MAX];
pair<int, int> edges[MAXE];
bool checkit = false;

int findset(int v)
{
	if (v == root[v])	
		return v;
	return findset(root[v]);
}

void unionset(int u, int v)
{
	u = findset(u);
	v = findset(v);
	
	if (u != v)
	{
		root[v] = u;
		size[u] += size[v];
		
		if (size[u] == n)
			checkit = true;
		size[v] = 0;
	}
}

int main()
{
	cin >> tc;
	while (tc--)
	{
		cin >> n >> m;
		for (int i = 0; i < n; i++)
		{
			root[i] = i;
			size[i] = 1;
		}
			
		
		for (int i = 0; i < m; i++)
		{
			cin >> u >> v;
			edges[i] = make_pair(--u, --v);
		}
		
		int e; checkit = false;
		for (int i = 0; i < n - 1; i++)
		{
			cin >> e;
			unionset(edges[e-1].first, edges[e-1].second);
		}
		
		if (!checkit)
			cout << "NO" << endl;
		else cout << "YES" << endl;
	}
	
	return 0;
}
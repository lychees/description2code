#include <bits/stdc++.h>
using namespace std;

#define repu(i, begin, end) for (__typeof(begin) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define repe(i, begin, end) for (__typeof(begin) i = (begin); i != (end) + 1 - 2 * ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 1000001;
vector<int> primes;
bool is_prime[N];

void init() {
	mem(is_prime, 1);
	repu(i, 2, N) {
		if (is_prime[i]) {
			primes.push_back(i);
			for (ll j = i * 1LL * i; j < N; j += i) is_prime[j] = 0;
		}
	}
}

int down(int x) {
	int ans = (int) pow(x, 1.0 / 3);
	while (ans * ans * ans < x) ans++;
	return ans;
}

int up(int x) {
	int ans = (int) pow(x, 1.0 / 3);
	while (ans * ans * ans > x) ans--;
	return ans;	
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest, L, R;
    
    init();
    
    cin >> ntest;
    while (ntest--) {
    	cin >> L >> R;
    	/*
    	int cL = down(L), cR = up(R), ans = 0;
    	if (cL <= cR) {
    		ans += upper_bound(all(primes), cR) - lower_bound(all(primes), cL);
    	}
    	*/
    	int ans = 0;
    	repu(i, 0, primes.size()) {
    		int y = tmax(primes[i] + 1, (L + primes[i] - 1) / primes[i]), z = R / primes[i];
    		if (y <= z) ans += upper_bound(all(primes), z) - lower_bound(all(primes), y);
    	}
    	printf("%d\n", ans);
    }
    return 0;
}

#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>
#include <fstream>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vector <int> > vvi;
typedef vector<pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME ""

const int MAXN = 300 + 10;

int a[MAXN];
int f[2 * MAXN];
int n, m;

bool read() {
  if  (scanf("%d%d", &n, &m) < 2) {
    return false;
  }
  forn(i, n) scanf("%d", &a[i]);
  forn(i, n + m - 1) scanf("%d", &f[i]);
  return true;
}

vi g[MAXN];
int mt[MAXN];
bool used[MAXN];

bool dfs(int v) {
  if  (used[v]) return false;
  used[v] = true;
  for (int to : g[v]) {
    if  (mt[to] == -1 || dfs(mt[to])) {
      mt[to] = v;
      return true;
    }
  }
  return false;
}

bool can(int M) {
  forn(i, n) {
    g[i].clear();
    forn(j, n) {
      if  (f[i + a[j]] <= M) {
        g[i].pb(j);
      }
    } 
  }   

  memset (mt, -1, sizeof mt);
  memset (used, false, sizeof used);
  forn(i, n) {
    memset (used, false, sizeof used);
    if  (!dfs(i)) {
      return false;
    }
  }
  return true;
}

int solve() {
  int L = -1;
  int R = 1e9 + 10;
  while (L != R - 1) {
    int M = (L + R) / 2;
    if  (can(M)) {
      R = M;
    } else {
      L = M;
    }
  }
  return R;
}

int main() {
#ifdef LOCAL
  freopen(FILE_NAME ".in", "r", stdin);
  //freopen(FILE_NAME ".out", "w", stdout);
#endif

  while (read()) {
    printf("%d\n", solve());
  }

#ifdef LOCAL
  cerr << "Time: " << (double) clock() / CLOCKS_PER_SEC << endl;
#endif
  return 0;
}

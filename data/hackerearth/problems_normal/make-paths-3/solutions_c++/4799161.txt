#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define forn(i, n) for (int i = 0; i < n; ++i)
#define forl(i, a, b) for (int i = a; i < b; ++i)
#define fore(i, a, b) for (int i = a; i <= b; ++i)
#define ul unsigned long
#define ll long long
#define pii std::pair<int, int>
#define vpii vector<pii >
#define all(x) x.begin(), x.end()
#define Unique(a) a.erase(unique(all(a)), a.end());
#define INF 1000000011
const int MOD = 1e9 + 7;
const long double PI = 3.14159265358979323846;
struct myCompare {
	bool operator() (const pii &l, const pii &r) const {
		return l.first < r.first;
	}
};


const int MAXN = 1e5 + 3;
int fa[MAXN], height[MAXN];
vector<pair<int, pii > > adj;
vector<pii > X;
vector<pii > Y;
int n;
int findRoot(int x) {
	while (x != fa[x]) x = fa[x];
	return x;
}

ll Kruskal() {
	ll ret = 0;
	int ru, rv;
	int cnt = 0;
	sort(all(adj));
	forn(i, adj.size()) {
		ru = findRoot(adj[i].second.first);
		rv = findRoot(adj[i].second.second);
		if (ru != rv) {
			cnt++;
			ret += adj[i].first;
			if (height[ru] > height[rv]) fa[rv] = ru;
			else {
				fa[ru] = rv; height[rv] += height[ru] == height[rv];
			}
			if (cnt == n - 1) break;
		}
	}
	return ret;
}

void solve() {
	scanf("%d", &n);
	int x, y;
	X.resize(n); Y.resize(n);
	adj.resize(2 * n - 2);
	forn(i, n) {
		fa[i] = i;
		scanf("%d%d", &x, &y);
		X[i].first = Y[i].first = i; X[i].second = x; Y[i].second = y;
	}
	sort(all(X), [](const pii &l, const pii &r){
		return l.second < r.second;
	});
	sort(all(Y), [](const pii &l, const pii &r){
		return l.second < r.second;
	});
	int t = n - 1;
	int ii = 0;
	forl(i, 0, t) {
		adj[ii].first = X[i + 1].second - X[i].second, 
		adj[ii].second.first = X[i + 1].first;
		adj[ii].second.second = X[i].first;
		adj[ii + 1].first = Y[i + 1].second - Y[i].second, 
		adj[ii + 1].second.first = Y[i + 1].first;
		adj[ii + 1].second.second = Y[i].first;
		ii += 2;
	}
	
	printf("%lld", Kruskal());
}

int main() {
	#ifndef ONLINE_JUDGE
		freopen("input.txt", "rt", stdin);
		//freopen("output.txt", "wt", stdout);
	#endif
	//cout << fixed << setprecision(10);	

	solve();

	return 0;
}
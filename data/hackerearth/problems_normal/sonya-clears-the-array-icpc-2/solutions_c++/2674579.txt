//Mobius_Treap
#include<bits/stdc++.h>

using namespace std;

typedef pair<int,int>   II;
typedef vector< II >      VII;
typedef vector<int>     VI;
typedef vector< VI > 	VVI;
typedef long long int 	LL;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);

const int N = 501;
const LL INF = LL(2e18);
LL dp[N][N];
LL A[N];
const int PMAX = int(2e6);
int P[PMAX];
VI prime;
LL C[N][N];
LL cost(int i,int j)
{
	if(C[i][j]!=-1)return C[i][j];
	if(A[j]>A[i])
	{
		auto it = lower_bound(ALL(prime),A[j]);
		it--;
		return C[i][j] = 1 + *it - A[i];
	}
	auto it = upper_bound(ALL(prime),A[i]);
	return C[i][j] = 1 + *it - A[j];
}
int main()
{
	for(int i=2;i*i<PMAX;i++)
		if(!P[i])
			for(int j=i*i;j<PMAX;j+=i)
				P[j]=1;
	for(int i=2;i<PMAX;i++)
		if(!P[i])
			prime.PB(i);
	LL ans=0;
	int n;si(n);
	for(int i=0;i<n;i++)
	{
		sll(A[i]);
		int idx = lower_bound(ALL(prime),A[i])-prime.begin();
		ans+=prime[idx]-A[i];
		A[i]=prime[idx];
	}
	SET(C,-1);
	for(int i=0;i<n;i++)
		dp[i][i]=INF;
	for(int i=0;i<n-1;i++)
		dp[i][i+1]=cost(i,i+1);
	for(int len=2;len<n;len++)
	{
		for(int i=0;i<n;i++)
		{
			int j = i+len;
			if(j>=n)continue;
			dp[i][j]=INF;
			for(int k=i;k<j;k++)
			{
				dp[i][j] = min(dp[i][j],(k==i?0:dp[i][k-1])+dp[k+1][j-1]+cost(k,j));
			}
		}
	}
	ans += dp[0][n-1];
	lldout(ans);
	return 0;
}

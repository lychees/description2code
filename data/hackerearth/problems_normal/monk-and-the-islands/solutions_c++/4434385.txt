#include <iostream>
#include<vector>
#include<queue>
using namespace std;

vector <int> A[10005] ;
int level[10005];
bool vis[10005];
queue<int> q;

void bfs(int s) 
{
    queue <int> q;
    q.push(s);
    level[ s ] = 0 ;  //setting the level of sources node as 0.
    vis[ s ] = true;
    while(!q.empty())
    {
        int p = q.front();
        q.pop();
        for(int i = 0;i < A[ p ].size() ;i++)
        {
            if(vis[ A[ p ][ i ] ] == false)
            {
        	//setting the level of each node with an increment in the level of parent node
                level[ A[ p ][ i ] ] = level[ p ]+1;                 
                 q.push(A[ p ][ i ]);
                 vis[ A[ p ][ i ] ] = true;
  			}
        }
    }
}

int main()
{
    int t;
    cin>>t;
    for(int i=0;i<t;i++)
    {
    	for(int e=0;e<10001;e++)
    	{
    		vis[e]=false;
    		A[e].clear();
    	}
    	int n,m;
    	cin>>n>>m;
    	for(int j=0;j<m;j++)
    	{
    		int x,y;
    		cin>>x>>y;
    		A[x].push_back(y);
    		A[y].push_back(x);
    	}
    	q.push(1);
    	level[1]=0;
    	bfs(1);
    	cout<<level[n]<<endl;
    }
}

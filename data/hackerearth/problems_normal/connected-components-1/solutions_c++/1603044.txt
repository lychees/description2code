#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>
#include <sstream>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <map>
#include <set>
#include <list>
#include <queue>
#include <stack>
#include <vector>
#include <cassert>

using namespace std;

#define pb push_back
#define mp make_pair
#define REP(i, n) for (int i = 0; i < (int)(n); ++i)
#define foreach(e, x) for (__typeof(x.begin()) e = x.begin(); e != x.end(); ++e)
typedef long long LL;
typedef pair<int, int> PII;

int tt;
int n, m, c;
int d[100002], sum[100002];
int f[200005], rf[200005];
const int MOD = 1e9 + 7;

int binPow(LL x, int p) {
    LL ret = 1;
    while (p) {
        if (p & 1) ret = (ret * x) % MOD;
        p >>= 1;
        x = (x * x) % MOD;
    }
    return (int)ret;
}

int C(int n, int k) {
    return ((LL)f[n] * (((LL)rf[k] * rf[n - k]) % MOD)) % MOD;
}

int solve(int cnt, int pos) {
    if (cnt < 0) return 0;
    return C(cnt + pos - 1, pos - 1);
}

int main() {
    f[0] = 1;
    for (int i = 1; i < 200005; ++i)
        f[i] = ((LL)f[i - 1] * i) % MOD;
    REP(i, 200005) rf[i] = binPow(f[i], MOD - 2);
    scanf("%d", &tt);
    REP(test, tt) {
        scanf("%d%d%d", &n, &m, &c);
        if (c == 0) {
            if (m == n) printf("1\n");
            else printf("0\n");
            continue;
        }
        printf("%d\n", (int)((solve(n - m - c, c) * (LL)solve(m - c + 1, c + 1)) % MOD));
    }
	return 0;
}

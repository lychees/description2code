#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<iomanip>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<climits>
#include<cmath>
#include<cctype>


#define pb push_back
#define mp make_pair
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define ren(i,a,b) for(int i=a;i>=b;i--)
#define ff first
#define ss second
#define pll pair<long long int,long long int>
#define pii pair<int,int>
#define vll vector<long long int>  
#define vii vector<int>
#define gi(n) scanf("%d",&n)
#define gll(n) scanf("%lld",&n)
#define gstr(n) scanf("%s",n)
#define gl(n) cin >> n
#define oi(n) printf("%d",n)
#define oll(n) printf("%lld",n)
#define ostr(n) printf("%s",n)
#define ol(n) cout << n
#define os cout<<" "
#define on cout<<"\n"
#define o2(a,b) cout<<a<<" "<<b
#define all(n) n.begin(),n.end()
#define present(s,x) (s.find(x) != s.end()) 
#define cpresent(s,x) (find(all(s),x) != s.end()) 
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
using namespace std;
 
typedef unsigned long long int ull;
typedef long long int ll;
typedef vector<vector<ll> > mat;

int n;
string s[1000005];

ll ans[1000005];

struct node
{
	node *next[26]={0};
	ll cnt=0;
}*head;

node *gn(void)
{
	node *p=NULL;
	p=(node *)malloc(sizeof(node));
	if(p)
	{
		rep(i,0,25)
		p->next[i]=0;
		p->cnt=0;
	}
	return p;
}

void dfs(node * at,int h)
{
	rep(i,0,25)
	{
		if(at->next[i]!=0)
		{
			ll c=at->next[i]->cnt;
			ans[h+1]+=(c*(c-1))/2;
			ans[h]-=(c*(c-1))/2;
			dfs(at->next[i],h+1);
		}
	}
}

int main()
{ios_base::sync_with_stdio(false);
head=gn();
int mx=0;
ll n;
cin>>n;
rep(i,0,n-1)
{
	cin>>s[i];
	int len=s[i].length();
	mx=max(mx,len);
	node *cur=head;
	rep(j,0,len-1)
	{
		if(cur->next[s[i][j]-'a']==0)
		{
			node *y=gn();
			cur->next[s[i][j]-'a']=y;
			cur=cur->next[s[i][j]-'a'];
			cur->cnt++;
		}
		else
		{
			cur=cur->next[s[i][j]-'a'];
			cur->cnt++;
		}
	}
}
ans[0]=(n*(n-1))/2;
dfs(head,0);

rep(i,0,mx)
{
	ol(ans[i]);os;
}
return 0;
}
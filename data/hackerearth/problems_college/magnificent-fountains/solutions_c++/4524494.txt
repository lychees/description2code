#include <iostream>
#include<vector>
using namespace std;
vector<int> primes;
 
void generate_primes(int n)
{
	if(primes.empty())
	primes.push_back(1);
	if(n>primes.back())
	{
		int start=primes.back()+1;
		for(int i=start;i<=n;i++)
		{
			int count=0;
			for(int j=0;j<primes.size();j++)
			{
				if(i%primes[j]==0)
				count++;
			}
			if(count==1)
			{//cout<<i<< " ";
			primes.push_back(i);}
		}
	}
 
}
int maxDivide(int &n,int q)
{
	int count=0;
	if(n==1)
	return 0;
	while(n%q==0)
	{count++;
	n=n/q;
	}
	//cout<<q<<" "<<count<<endl;
	return count;
}
int pover(int a,int n)
{
	if(n==0)
	return 1;
	if(n==1)
	return a;
	else return (a*(pover(a,n-1)%1000000007))%1000000007;
}
long long lcm(int *a,int n)
{
	long long product=1,maxi=0;
	for(int i=1;i<primes.size();i++)
	{
		maxi=0;
		for(int j=0;j<n;j++)
		{
			int k=maxDivide(a[j],primes[i]);
			if(maxi<k)
			maxi=k;
		}
		//cout<<"max="<<maxi<<endl;
		product=(product*(pover(primes[i],maxi)%1000000007))%1000000007;
 
	}
	return product;
}
int main()
{
	int t,n;
	cin>>t;
	while(t--)
	{
		cin>>n;
		int *a=new int[n];
		int maxi=0;
		for(int i=0;i<n;i++)
		{
			cin>>a[i];
			if(maxi<a[i])
			maxi=a[i];
		}
		generate_primes(maxi);
		cout<<lcm(a,n)<<endl;
	}
}
 
#include <iostream>
#include <cstdio>
#include <vector>
using namespace std;

typedef long long ll;

const int Maxd = 2;
const int mod = 1000000007;
const ll lim = 10000000000ll;

struct matrix {
	int m[Maxd][Maxd];
	matrix(int diag = 0) {
		for (int i = 0; i < Maxd; i++)
			for (int j = 0; j < Maxd; j++)
				m[i][j] = (i == j) * diag;
	}
	matrix operator *(const matrix &b) const {
		matrix c;
		for (int i = 0; i < Maxd; i++)
			for (int j = 0; j < Maxd; j++)
				for (int l = 0; l < Maxd; l++)
					c.m[i][j] = (c.m[i][j] + ll(m[i][l]) * b.m[l][j]) % mod;
		return c;
	}
};

vector <ll> fibs;

int Fib(int n)
{
	matrix R(1), A;
	A.m[0][0] = 1; A.m[0][1] = 1;
	A.m[1][0] = 1; A.m[1][1] = 0;
	n--;
	while (n) {
		if (n & 1) R = R * A;
		n >>= 1; A = A * A;
	}
	return R.m[0][0];
}

int nonFib(int n)
{
	n--;
	int cur = 1;
	for (int i = 0; i < fibs.size(); i++)
		if (fibs[i] - cur > n) return cur + n;
		else {
			n -= fibs[i] - cur;
			cur = fibs[i] + 1;
		}
	return -1;
}

int toPower(int a, int n)
{
	int res = 1;
	while (n) {
		if (n & 1) res = ll(res) * a % mod;
		n >>= 1; a = ll(a) * a % mod;
	}
	return res;
}

int main()
{
	fibs.push_back(1); fibs.push_back(2);
	while (fibs.back() <= lim)
		fibs.push_back(fibs.back() + fibs[fibs.size() - 2]);
	int t, n;
	scanf("%d", &t);
	while (t--) {
		scanf("%d", &n);
		printf("%d\n", toPower(nonFib(n), Fib(n)));
	}
    return 0;
}

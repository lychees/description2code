/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/

#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 100005
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;
				
LL leftt[limit];
LL rightt[limit];

void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}

void solve()
{
	LL n, p;
	sl(n); sl(p);
	char st[limit]; string str;
	scanf("%s", st);
	str = string(st);
	rep(i, n) {
		leftt[i] = (i - 1 >= 0) ? (leftt[i - 1] + (str[i] == '1')) : (str[i] == '1');
	}
	rrep(i, n) {
		rightt[i] = (i + 1 <= n - 1) ? (rightt[i + 1] + (str[i] == '1')) : (str[i] == '1');
	}
	LL ans = 0;
	rep(i, n) {
		LL count = 0;
		if(str[i] == '1') {
			count += (i - p - 1 >= 0) ? (leftt[i - 1] - leftt[i - p - 1]) : ((i - 1 >= 0) ? leftt[i - 1] : 0);
			count += (i + p + 1 <= n - 1) ? (rightt[i + 1] - rightt[i + p + 1]) : ((i + 1 <= n - 1) ? rightt[ i + 1] : 0);
			count += 1;
		}
		ans += count;
	}
	if(ans == 0) {
		puts("0/1");
	}
	else {
		LL gc = __gcd(ans, (n * n));
		LL ad = ans / gc;
		LL df = (n * n) / gc;
		pl(ad);
		printf("/");
		pl(df);
		printf("\n");
	}
}

int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}


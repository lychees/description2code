#include <stdio.h>

using namespace std;
int jed,max;

int root(int x, int *r){

	while(r[x]!=x){

        r[x]=r[r[x]];
		x=r[x];
	}
	return x;


}

void bunion(int ra,int rb,int *r, int *vel){


	if(vel[ra]>vel[rb]){
		vel[ra]+=vel[rb];
		vel[rb]=vel[ra];
		r[rb]=ra;
	}else{
		vel[rb]+=vel[ra];
		vel[ra]=vel[rb];
		r[ra]=rb;
	}

}

int lmin(int n,int *vel){

	int minimum=vel[0]-1;
	
	for(int i=1;i<=n;i++){
		if(vel[i]<minimum)minimum=vel[i];

	}

	return minimum;
}



int main()
{
    int n,q;
    scanf("%d %d", &n, &q);
    int vel[n+1];
    int r[n+1];
	int bg=n;
	vel[0]=1000000;
	r[0]=1;
	
    //inicijalizujem
    for(int i=1;i<=n;i++){
    	vel[i]=1;
    	r[i]=i;
    }
    max=1;
    jed=n;
	int mini=1;
    for(int i=0;i<q;i++){
    	int a,b;
    	scanf("%d %d", &a, &b);
    	int ra=root(a,r);
    	int rb=root(b,r);
    	if(ra!=rb)bg--;
    	if(bg<=1)goto pn;
    	if(ra==rb)goto pf;
    	
		
		
    	if(vel[ra]==1)jed--;
    	if(vel[rb]==1)jed--;
		
		
    	


    	bunion(ra,rb,r,vel);
    	
    	ra=root(a,r);
    	rb=root(b,r);
    	
    	if(vel[ra]>max)max=vel[ra];
    	if(vel[rb]>max)max=vel[rb];
    	
    	
    	
		mini=(jed>0?1:lmin(n,vel));
    	pf:printf("%d\n",max-mini );
    	continue;
    	pn:printf("0\n");
    }
    return 0;
}

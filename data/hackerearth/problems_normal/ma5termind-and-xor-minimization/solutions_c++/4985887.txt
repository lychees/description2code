#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>
 
#define TRUE 1
#define FALSE 0
#define NOT_FOUND -1
#define MAX 1000000007
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (2)
#define CHAR_TO_INDEX(c) ((int)c - (int)'0')
#define max(a,b) ((a>=b)?a:b)
 
using namespace std;
 
struct TrieNode
{
    struct TrieNode *children[ALPHABET_SIZE];
	long long int count;
	long long int value;
};
 
struct TrieNode *getNode(void)
{
    struct TrieNode *pNode = NULL;
 
    pNode = (struct TrieNode *)malloc(sizeof(struct TrieNode));
 
    if (pNode)
    {
        int i;
        pNode->count = 0;
        pNode->value=0;
        for (i = 0; i < ALPHABET_SIZE; i++)
            pNode->children[i] = NULL;
    }
 
    return pNode;
}
 
void insert(struct TrieNode *root, int sum)
{
    TrieNode *temp = root;
 	int index;
    // Start from the msb, insert all bits of
    // pre_xor into Trie
    for (int i=31; i>=0; i--)
    {
        // Find current bit in given prefix
        bool val = sum & (1<<i);
 		if(val) index=1;
 		else index = 0;
        // Create a new node if needed
        if (temp->children[index] == NULL)
            temp->children[index] = getNode();
 
        temp = temp->children[index];
    }
 
    // Store value at leaf node
    temp->value = sum;
    temp->count = ((temp->count)+1)%MAX;
}
 
long long int search(struct TrieNode *root, int sum)
{
     TrieNode *temp = root;
     int index;
    for (int i=31; i>=0; i--)
    {
        // Find current bit in given prefix
        bool val = sum & (1<<i);
        
        if(val) index=1;
 		else index = 0;
        if (temp->children[index]!=NULL)
            temp = temp->children[index];
        else if (temp->children[1-index] != NULL)
            temp = temp->children[1-index];
    }
    //printf("%lld %lld\n",(temp->value),temp->count);
    return temp->value;
}
 
int dp[100001];
bool s[100001];
 
int main()
{
    int n,queries,temp,i;
    long long int sum=0,total_sum=0,sub_sum=0,ans;
    scanf("%d",&n);
    int *arr = (int *)malloc(n * sizeof(int));
    struct TrieNode *root = getNode();
    for(int i=0;i<n;i++){
    	scanf("%d",&arr[i]);
    	//insert(root,arr[i]);
    }
    dp[0]=1;
    s[0]=1;
    int maxx = 1 ; 
	for(int i=0;i<n;i++){
     for(int j=maxx;j>=0;j--){
       if(s[j])
       {
         maxx=max(maxx,j+arr[i]);
         s[j+arr[i]]=true;
         dp[j+arr[i]]+=dp[j];
         dp[j+arr[i]]%=MAX;
       }
     }
   }
   for(int i=1;i<=maxx;i++){
   		if(s[i]) insert(root,i);
   }
   /* long long int power = pow(2, n);
    for(i=0;i<power;i++){
    	sum=0;
    	for(int j=0;j<n;j++){
    		if(i&(1<<j)){
    			sum += arr[j];
    		}
    	}
    	insert(root,sum);
    }*/
    
    scanf("%d",&queries);
    while(queries--){
    	scanf("%lld",&sum);
    	ans = search(root,sum);
    	printf("%lld %lld\n",ans,dp[ans]);
    }
    return 0;
}
#include<bits/stdc++.h>
using namespace std;
int parent[5002];
int rank[5002];
int find(int i)
{
	if(parent[i]==i)
	{
		return i;
	}
	return parent[i] = find(parent[i]);
}
struct Edge
{
	int x,y,w;
};
Edge edge[100002];
int unions(int a,int b)
{
	int pa = find(a);
	int pb = find(b);
	if(pa!=pb)
	{
		if(::rank[pa]>::rank[pb])
		{
			parent[pb] = pa;
		}
		else if((::rank[pa])<(::rank[pb]))
		{
			parent[pa] = pb;
		}
		else
		{
			parent[pb] = pa;
			::rank[pa]++;
		}
	}
}
int cmp(Edge a,Edge b)
{
	return a.w > b.w;
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,m;
		cin>>n>>m;
		for(int i=1;i<=n;i++)
		{
			parent[i] = i;
			::rank[i] = 0;
		}
		for(int i=1;i<=m;i++)
		{
			cin>>edge[i].x>>edge[i].y>>edge[i].w;
		}
		sort(edge+1,edge+m+1,cmp);
		int weight = 0;
		for(int i=1;i<=m;i++)
		{
			int p = find(edge[i].x);
			int q = find(edge[i].y);
			if(p!=q)
			{
				weight+=edge[i].w;
				unions(edge[i].x,edge[i].y);
			}
		}
		cout<<weight<<endl;
	}
}
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <cassert>
#include <cstring>
#include <climits>
#include <ctime>
#include <cstdlib>
#include <cmath>
#include <string>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <bitset>
#include <algorithm>
#define N 255
using namespace std;
typedef long long ll;

ll dp[N][N];
ll findVal(string s,int start,int end){
	ll val = 0;
	for(int i = start;i <= end;++i)
		val = val*10 + (s[i]-'0');
	return val;
}
int main() {
	ios::sync_with_stdio(0);
    cin.tie(NULL);	
#ifdef _DEBUG
	freopen("ip.txt","r",stdin);
	//freopen("op.txt","w",stdout);	
#endif

	int t;
	cin>>t;
	while(t--){
		//Divide a string S of digits into K parts such that each part is <= Z such that the sum of K parts is maximum;		
		ll k,z; 
		cin>>k>>z;
		string s;
		cin>>s;
		int len = s.length();
		memset(dp,-1,sizeof dp);
		/* 
			dp[i][j] = max sum when s[0..j] is divided into i parts
			dp[i][j] = val[0..j] if i = 1 and val[0..j] <= z
					 = -1		 if i = 1 and val[0..j] > z
					 = max(dp[i][j],dp[i-1][l]+val[l+1..j]); 1 < i <= k , 0 <= j < len, 0 <= l < j			
		*/
		for(int j = 0;j < len;++j){
			ll val = findVal(s,0,j);				
			if(val <= z)
				dp[1][j] = val;
		}
		for(int i = 2;i <= k;++i){
			for(int j = 0;j < len;++j){
				for(int l = 0;l < j;++l){
					// [l+1,j] should be at max 10
					if(j-l <= 10){
						ll val = findVal(s,l+1,j); // s[l+1..j]
						if(val <= z && dp[i-1][l] != -1)
							dp[i][j] = max(dp[i][j],dp[i-1][l]+val);
					}
				}
			}
		}
		cout<<dp[k][len-1]<<"\n";	
	}
	return 0;
}

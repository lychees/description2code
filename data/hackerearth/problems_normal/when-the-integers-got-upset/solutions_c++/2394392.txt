#include<bits/stdc++.h>

using namespace std;

int n;
long long arr[15], p[15];

long long dp[1<<12][12][12];

long long minUpset(int takenMask, int prev, int prevprev){
	long long& res = dp[takenMask][prev][prevprev];
	if(res != -1){
		return res;
	}
	if(__builtin_popcount(takenMask) == n){
		res = 0;
		return res;
	}
	res = (1LL << 62);
	long long toAdd;
	for(int u=0; u<n; u++) if(!(takenMask & (1 << u))){
		int tempMask = takenMask;
		tempMask |= (1 << u);
		toAdd = 1LL * (arr[u] ^ arr[prev] ^ arr[prevprev]) * p[__builtin_popcount(takenMask)];
		res = min(res, toAdd + minUpset(tempMask, u, prev));
	}
	
	return res;
}

int main()
{
	int t, tt;
	cin >> tt;
	
	for(t=0; t<tt; t++){
		cin >> n;
		
		if(n < 3){
			cout << 0 << '\n';
			continue;
		}
	
		for(int i=0; i<n; i++){
			cin >> arr[i];
		}
		
		for(int i=0; i<n; i++){
			cin >> p[i];
		}
		
		long long res = (1LL << 62);
		for(int i=0; i<(1<<n); i++) for(int j=0; j<n; j++) for(int k=0; k<n; k++){
			dp[i][j][k] = -1;
		}
		
		for(int i=0; i<n; i++) for(int j=0; j<n; j++) if(i != j){
			int tMask = 0;
			tMask |= (1<<i);
			tMask |= (1<<j);
			res = min(res, minUpset(tMask, i, j));
		}
		
		printf("%lld\n", res);
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<vector<ll> > matrix;
#define REP(i,n) for (int i = 1; i <= n; i++)
const ll MOD = 1000000007;
int a,b,c,d,e;
const int K = 5;

// computes A * B
matrix mul(matrix A, matrix B)
{
    matrix C(K+1, vector<ll>(K+1));
    REP(i, K) REP(j, K) REP(k, K)
        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
    return C;
}

// computes A ^ p
matrix pow(matrix A, int p)
{
    if (p == 1)
        return A;
    if (p % 2)
        return mul(A, pow(A, p-1));
    matrix X = pow(A, p/2);
    return mul(X, X);
}

// returns the N-th term of Fibonacci sequence
int fib(int N)
{
    // create vector F1
    vector<ll> F1(K+1);
    F1[1] = a;
    F1[2] = b;
    F1[3]= c;
    F1[4]= d;
    F1[5]= e;
    

    // create matrix T
    matrix T(K+1, vector<ll>(K+1));
    T[1][1] = 0, T[1][2] = 1; T[1][3]=0;T[1][4]=0;T[1][5]=0;
    T[2][1] = 0, T[2][2] = 0; T[2][3]=1; T[2][4]=0;T[2][5]=0;
    T[3][1] = 0, T[3][2] = 0; T[3][3]=0; T[3][4]=1;T[3][5]=0;
    T[4][1] = 0, T[4][2] = 0; T[4][3]=0; T[4][4]=0;T[4][5]=1;
    T[5][1] = 1, T[5][2] = 2; T[5][3]=1; T[5][4]=1;T[5][5]=1;

    // raise T to the (N-1)th power

    T = pow(T, N);

    // the answer is the first row of T . F1
    ll res = 0;
   
    res=0;
    REP(i, K)
     {
        res = (res + T[1][i] * F1[i]) % MOD;
		//cout<<res<<endl;
	}
    return res;
}
int main()
{
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
		scanf("%d%d%d%d%d",&a,&b,&c,&d,&e);
		int n;
		scanf("%d",&n);
		if(n==0)
		 cout<<a<<endl;
		else if(n==1)
		 cout<<b<<endl;
		else if(n==2)
		 cout<<c<<endl;
		else if(n==3)
		 cout<<d<<endl;
		else if(n==4)
		cout<<e<<endl;
		else
		printf("%d\n",fib(n));
	}
}
#include<iostream>

using namespace std;

void initialaizeGroup(int A[],int N){
	for(int i=1;i<=N;i++){
		A[i]=i;
	}
}

int findLeader(int A[],int i){
	while(A[i] != i){
		A[i] = A[A[i]];
		i = A[i];
	}
	return i;	
}

/*void makeLeader(int A[],int a){
	a = A[a];
	for(int i = 1;i<=N;i++){
		if(checkGroup(A,a,i)){
			A[i] = a;
		}
	}
}
*/

bool checkGroup(int A[],int a,int b){
	if(findLeader(A,a) == findLeader(A,b))
		return 1;
	else
		return 0;
}

void makeGroup(int A[],int a,int b){
	int a1 = findLeader(A,a);
	int b1 = findLeader(A,b);
	if(a1 != b1)
		A[a1] = A[b1];
}

int main(){
	int N,Q,A[100000],a,b,choice,leader;
	cin>>N;
	initialaizeGroup(A,N);
	cin>>Q;
	
	for(int i =0;i<Q;i++){
		cin>>choice;
		switch(choice){
			
			case 1:
				cin>>a>>b;
				if(!checkGroup(A,a,b))
					makeGroup(A,a,b);
				break;
			case 2:
				cin>>a;
				leader = findLeader(A,a);
				A[leader] = a;
				A[a] = a;
				break;
			case 3:
				cin>>a;
				cout<<findLeader(A,a)<<endl;
				break;
			default:
				return 0;
		}
	}
	return 0;
}
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <string.h>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <list>
#include <math.h>

#define ll long long int
#define maxN 200
#define maxVal 1e8
#define minVal -1e8
#define mod1e9+7

#define gcd(a,b) __gcd(a,b)

using namespace std;
struct trieNode
{
    struct trieNode *child[30];
    bool isLeaf;
    int prior;
};
struct trieNode *getNode()
{
    struct trieNode *pNode=NULL;
    pNode = (struct trieNode *)malloc(sizeof(struct trieNode));
    if(pNode)
    {
        for(int i = 0;i<30;i++)
            pNode->child[i]=NULL;
        pNode->isLeaf=false;
        pNode->prior=0;
    }
    return pNode;
};
void insertNode(struct trieNode *root,string key,int p)
{
    int i,c,l;
    l = key.length();
    struct trieNode *start=root;
    for(i=0;i<l;i++)
    {
        c=(int)key[i]-(int)'a';
        if(start->child[c]==NULL)
            start->child[c]=getNode();
        start=start->child[c];
        if(p>start->prior)
            start->prior=p;
    }
    start->isLeaf=true;
}
int searchNode(struct trieNode *root,string key)
{
    int i,j,c,l,ans;
    l = key.length();
     struct trieNode *start=root;
    for(i=0;i<l;i++)
    {
        //cout << "Hi" << endl;
        c = (int)key[i]-(int)'a';
        if(start->child[c]==NULL)
            return -1;
        start=start->child[c];
    }
    return start->prior;
}
int main()
{
    ios::sync_with_stdio(false);
    string key;
    int n,q,i,j,p,ans;
    //char key[1000];
    cin >> n >> q;
    struct trieNode *root=getNode();
    for(i=0;i<n;i++)
    {
        cin >> key >> p;
        insertNode(root,key,p);
    }
    for(i=0;i<q;i++)
    {
        cin >> key;
        ans = searchNode(root,key);
        cout << ans << endl;
    }

}

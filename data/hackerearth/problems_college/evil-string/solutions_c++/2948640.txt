#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
 
using namespace std;
 
#define dbg(x) cout << #x << " = " << x << endl
#define dbg2(x,y) cout << #x << " = " << x << ", " << #y << " = " << y << endl
#define dbg3(x,y,z) cout << #x << " = " << x << ", " << #y << " = " << y << ", " << #z << " = " << z << endl
 
#define out(x) cout << (x) << endl
#define out2(x,y) cout << (x) << " " << (y) << endl
#define out3(x,y,z) cout << (x) << " " << (y) << " " << (z) << endl
 
const int Mod = 1000000000 + 7;
const int maxN = 16;
 
// 2, 3, 5, 7
long long based[maxN];
 
int calc(int x)
{
    int res = 0;
    if( x % 2 == 0 ) {
        int tot = 0;
        while( x % 2 == 0 )
            tot ++, x /= 2;
        if( tot & 1 )
            res |= 1 << 0;
    }
    if( x % 3 == 0 ) {
        int tot = 0;
        while( x % 3 == 0 )
            tot ++, x /= 3;
        if( tot & 1 )
            res |= 1 << 1;
    }
    if( x % 5 == 0 ) {
        int tot = 0;
        while( x % 5 == 0 )
            tot ++, x /= 5;
        if( tot & 1 )
            res |= 1 << 2;
    }
    if( x % 7 == 0 ) {
        int tot = 0;
        while( x % 7 == 0 )
            tot ++, x /= 7;
        if( tot & 1 )
            res |= 1 << 3;
    }
    return res;
}
 
long long M[maxN][maxN];
 
struct matrix {
    long long a[maxN][maxN];
};
matrix _M;
 
 
void unit_mul(matrix x, matrix y,matrix &arr) {
    static int i, j, k;
    for(i = 0;i < maxN; ++ i) {
        for(j = 0; j < maxN; ++ j) {
            arr.a[i][j] = 0;
            for(k = 0; k < maxN; ++ k){
                if(x.a[i][k] && y.a[k][j]) {
                    arr.a[i][j] += (x.a[i][k] * y.a[k][j]) % Mod;
                    arr.a[i][j] %= Mod;
                }
            }
        }
    }
}
 
void mul(matrix &x, long long y) {
    if( y == 0LL ) {
        memset(x.a, 0, sizeof(x.a));
        for(int i = 0; i < maxN; i ++)
            x.a[i][i] = 1LL;
        return ;
    }
    if( y == 1LL ) return ;
    mul(x, y >> 1);
    unit_mul(x, x, x);
    if( y & 1 ) unit_mul(x, _M, x);
}
 
void init()
{
    memset(based, 0, sizeof(based));
    for(int i = 1; i <= 9; i ++)
        based[ calc(i) ] ++;
    memset(M, 0, sizeof(M));
    for(int i = 1, j, k; i <= 9; i ++) {
        for(j = 0; j < 16; j ++) {
            k = calc(i) ^ j;
            M[k][j] ++;
        }
    }
    memcpy(_M.a, M, sizeof(M));
}
 
matrix x;
long long f[maxN];
 
long long gao(long long N)
{
    memcpy(x.a, M, sizeof(M));
    mul(x, N - 1);
    memset(f, 0, sizeof(f));
    int i, j;
    for(i = 0; i < 16; i ++) {
        f[i] = 0;
        for(j = 0; j < 16; j ++) {
            f[i] += (x.a[i][j] * based[j]) % Mod;
            f[i] %= Mod;
        }
    }
    long long res = 0;
    for(i = 1; i < 16; i ++)
        res = (res + f[i]) % Mod;
    res %= Mod; if( res < 0 ) res += Mod;
    return res;
}
 
int main()
{
    //freopen("data.in", "r", stdin);
    init();
    int nt;
    scanf("%d", &nt);
    long long N;
    for(; nt > 0; nt --) {
        scanf("%lld", &N);
        printf("%lld\n", gao(N));
    }
    return 0;
}
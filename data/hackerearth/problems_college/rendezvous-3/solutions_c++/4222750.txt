#include<bits/stdc++.h>
using namespace std;
int n,m;
int parent[1000005];
vector<pair<int , pair<int, int> > > vt;
bool cmp(pair<int , pair<int , int> > p , pair<int , pair<int , int> > q)
{
		return p.first < q.first;
}
void makeset(void)
{
		int i;
		for(i=1;i<=n;++i)
				parent[i]=i;
}
int findparent(int i)
{
		while(parent[i] != i)
		{
				parent[i] = parent[parent[i]];
				i = parent[i];
		}
		return i;
}
void unionset(int a, int b)
{
		int para,parb;
		para = findparent(a);
		parb = findparent(b);
		if(para != parb)
		{
				parent[para] = parb;
		}
}
long long int mst(void)
{
		long long int maxsum=0;
		int i;
		makeset();
		pair<int,pair<int,int> > p;
		for(i=0;i<vt.size();++i)
		{
				p = vt[i];
				if(findparent(p.second.second) != findparent(p.second.first))
				{
						maxsum += p.first;
						unionset(p.second.second, p.second.first);
				}
		}
		return maxsum;

}
int main()
{

		cin>>n>>m;
		int i;
		for(i=0;i<m;++i)
		{
				int a,b,w;
				cin>>a>>b>>w;
				vt.push_back(make_pair(w,make_pair(a,b)));

		}
		sort(vt.begin(),vt.end(),cmp);
		cout<<mst()<<endl;
}



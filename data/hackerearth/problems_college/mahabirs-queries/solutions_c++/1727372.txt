/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/

#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define for0(i,n) for(int i=0;i<n;i++)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define ff first
#define ss second
#define mkp make_pair
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;

#define get getchar_unlocked
/*inline int scan()
{
    int n=0,s=1;
    char p=get();
    if(p=='-')  s=-1;
    while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=get();
    if(p=='-') s=-1,p=get();
    while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=get(); }
    return n*s;
}

void print(int X)
{
  if(X<0) { putchar_unlocked('-');  X=-X;  }
  int Len=0,Data[10];
  while(X) { Data[Len++]=X%10; X/=10; }
  if(!Len) Data[Len++]=0;
  while(Len--) putchar_unlocked(Data[Len]+48);
}*/

#define gc getchar
void read(int &n) {
    n = 0;
    char ch = gc();
    while ( !isdigit(ch) ) ch=gc();
    while ( isdigit(ch) ) {
        n = n*10 + ch-48;
        ch=gc();
    }
}
int s[105][105];
int d90[105][105];
int d180[105][105];
int d270[105][105];
int d360[105][105];
int n, m;
void rotate()
{
    int dest[105][105];
 
    for0(r, n) for0(c, n) dest[c][n - r - 1] = s[r][c];
    for0(i , n) for0(j, n) d90[i][j] = dest[i][j];
 
    for0(r, n) for0(c, n) dest[c][n - r - 1] = d90[r][c];
    for0(i, n) for0(j, n) d180[i][j] = dest[i][j];
 
    for0(r, n) for0(c, n) dest[c][n - r - 1] = d180[r][c];
    for0(i, n) for0(j, n) d270[i][j] = dest[i][j];
 
    for0(r, n) for0(c, n) dest[c][n - r - 1] = d270[r][c];
    for0(i, n) for0(j, n) d360[i][j] = dest[i][j];
}
 
int main()
{
    read(n); read(m);
    for0(i, n) for0(j, n) read(s[i][j]);
    rotate();
    while(m--) {
        int angle;
        read(angle);
        int temp = angle / 90;
 
        if(temp % 4 == 1) {
            for0(i, n) {
                for0(j, n) {
                    printf("%d ", d90[i][j]);
                }
                printf("\n");
            }
        }
        else if(temp % 4 == 2) {
            for0(i, n) {
                for0(j, n) {
                    printf("%d ", d180[i][j]);
                }
                printf("\n");
            }
        }
        else if(temp % 4 == 3) {
            for0(i, n) {
                for0(j, n) {
                    printf("%d ", d270[i][j]);
                }
                printf("\n");
            }
        }
        else if(temp % 4 == 0) {
            for0(i, n) {
                for0(j, n) {
                    printf("%d ", d360[i][j]);
                }
                printf("\n");
            }
        }
        printf("\n");
    }
    return 0;
}
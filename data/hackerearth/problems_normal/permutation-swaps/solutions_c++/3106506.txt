// C++ program to print DFS traversal from a given vertex in a  given graph
#include<bits/stdc++.h>
 
using namespace std;

int findd,glbb;
bool found;
int visited[100005];
 
// Graph class represents a directed graph using adjacency list representation
class Graph
{
    int V;    // No. of vertices
    list<int> *adj;    // Pointer to an array containing adjacency lists
    void DFSUtil(int v);  // A function used by DFS
public:
    Graph(int V);   // Constructor
    void addEdge(int v, int w);   // function to add an edge to graph
    void DFS(int v);    // DFS traversal of the vertices reachable from v
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to vâ€™s list.
}
 
void Graph::DFSUtil(int v)
{
    // Mark the current node as visited and print it
    visited[v] = glbb;
    //cout << v << " ";
 
    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
        if (!visited[*i])
            DFSUtil(*i);
}
 
// DFS traversal of the vertices reachable from v. It uses recursive DFSUtil()
void Graph::DFS(int v)
{
    // Mark all the vertices as not visited
    
 
    // Call the recursive helper function to print DFS traversal
    DFSUtil(v);
}
 
int main()
{
    // Create a graph given in the above diagram
    int t;cin>>t;
    while(t--)
    {
		int n,m,p[100005],q[100005],a,b;
		map <int,int> mp;
		cin>>n>>m;
		Graph g(n);
		for(int i=0;i<n;i++) {cin>>p[i];mp[p[i]] = i;}
		for(int i=0;i<n;i++) cin>>q[i];
		for(int i=0;i<m;i++) {cin>>a>>b; g.addEdge(a-1,b-1); g.addEdge(b-1,a-1);}
		bool fll = true;
    for (int i = 0; i < n; i++)
        visited[i] = 0;
		for(int i=0;i<n;i++) {glbb=i+1;if(visited[i]==0)g.DFS(i);}
		//for (int i = 0; i < n; i++) cout<<visited[i]<<" ";cout<<endl;
		for(int i=0;i<n;i++)
		{
			if(p[i]!=q[i])
			{
				int vv = mp[q[i]];
				if(visited[i]!=visited[vv]) {fll = false;break;}
			}
		}
		if(fll) cout<<"YES\n";
		else cout<<"NO\n";
	}
 
    return 0;
}











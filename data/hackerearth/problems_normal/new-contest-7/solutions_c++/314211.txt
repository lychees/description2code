#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <string>

using namespace std;

#define s(T) scanf("%d", &T)
#define sl(T) scanf("%lld", &T)
#define fill(a, val) memset(a, val, sizeof(a))
#define mp make_pair
#define pb push_back
#define all(x) x.begin(), x.end()
#define DREP(x) sort(all(x)); x.erase(unique(all(x)), x.end())
#define INDEX(a, val) (lower_bound(all(a), val) - a.begin())

const int mg5 = 1000;

int tcs3, tna2;
int S, N, M, K;
double Comb[mg5 + 1][mg5 + 1];		//Comb[a][b] stores a choose b

void preprocess()
{
	fill(Comb, 0);
	for(int i = 0; i <= mg5; i++)
	{	
		Comb[i][0] = Comb[i][i] = 1.0;
		for(int j = 1; j <i; j++)
			Comb[i][j] = Comb[i-1][j] + Comb[i-1][j-1];
	}
}

bool input()
{
	s(S); 
	s(N); 
	s(M); 
	s(K); 
	return true;
}

void solve()
{
	double no1 = 0, ned3 = Comb[S][N];
	for(int k = max(K, N + M-S); k <= min(N, M); k++) //sum over relevant values of k: (M-1)Ck * (S-M)C(N-1-k)
		no1 += Comb[M][k] * Comb[S-M][N-k];
	printf("%.6lf\n", no1/ned3);
}

int main()
{
	preprocess();
	s(tcs3); assert(tcs3 <= 100);
	for(tna2 = 1; tna2 <= tcs3; tna2++)
	{
		if( !input())
			break;
		solve();
	}
	return 0;
}
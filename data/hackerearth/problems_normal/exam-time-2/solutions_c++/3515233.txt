#include <iostream>
#include <algorithm>
#define limit 1001
#define ll long long
using namespace std;

int primes[1001];
int totalP;
void SieveOfEratosthenes(int n)
{
    bool prime[n+1];
   for(int i=0;i<=n;i++){
   		prime[i]=true;
   }
 
    for (int p=2; p*p<=n; p++)
    {	
        if (prime[p] == true)
        {
            for (int i=p*2; i<=n; i += p)
                prime[i] = false;
        }
    }
 	totalP=0;
    for (int p=2; p<=n; p++)
       if (prime[p])
          primes[totalP++]=p;
}
double numOfDevisors(int n){
	double ans =1.0d;
	int temp=n;
	for(int i=0;i<totalP && primes[i]*primes[i]<=temp;i++){
		int k=0;
		while(n%primes[i]==0){
			n=n/primes[i];
			k++;
		}
		if(k>0){
			ans = ans * ((double)primes[i]-1.0)/(double)primes[i];
		}
	}
	//cout<<ans<<" "<<n<<"\n";
	if(n>1){
		ans = ans*(n-1)/n;
	}
	
	return  ans*(double)temp;
}
int main(){
	SieveOfEratosthenes(limit);
	int T;
	cin>>T;
	while(T--){
		int n;
		cin>>n;
		cout<<numOfDevisors(n)<<"\n";
		//cout<<(n-numOfDevisors(n)+1)<<"\n";
	}
}
#include <bits/stdc++.h>
using namespace std;
struct node
{
	long long int prod;
	long long int sum;
	
};
node tree[300005];
long long int a[100005];
void build(long long int index,long long int i,long long int j)
{
	if(i==j)
	{
		tree[index].prod=i*a[i];
		tree[index].sum=a[i];
		return;
	}
	long long int mid=(i+j)/2;
	build(index*2,i,mid);
	build(index*2+1,mid+1,j);
	tree[index].sum=tree[index*2].sum+tree[index*2+1].sum;
	tree[index].prod=tree[index*2].prod+tree[index*2+1].prod;
}
node query(long long int index,long long int ss,long long int se,long long int qs,long long int qe)
{
	if(ss>se||qe<ss||qs>se)
	return ((node){0,0});
	if(qs<=ss&&qe>=se)
	return tree[index];
	int mid=(ss+se)/2;
	node left=query(index*2,ss,mid,qs,qe);
	node right=query(index*2+1,mid+1,se,qs,qe);
	node ans;
	ans.prod=left.prod+right.prod;
	ans.sum=left.sum+right.sum;
	return ans;
}
void update(long long int index,long long int ss,long long int se,long long int i,long long int val)
{
	if(ss>se||i<ss||i>se)
	return;
	if(ss==se)
	{
		tree[index].prod=tree[index].prod+val*ss;
		tree[index].sum=tree[index].sum+val;
		return;
	}
	long long int mid=(ss+se)/2;
	update(index*2,ss,mid,i,val);
	update(index*2+1,mid+1,se,i,val);
	tree[index].sum=tree[index*2].sum+tree[index*2+1].sum;
	tree[index].prod=tree[index*2].prod+tree[index*2+1].prod;
}
int main()
{
    	long long int n,q;
	scanf("%lld%lld",&n,&q);
	for(int i=1;i<=n;i++)
	scanf("%lld",&a[i]);
	build(1,1,n);
/*	for(int i=1;i<=25;i++)
	cout<<tree[i].prod<<" "<<tree[i].sum<<"\n";*/
	long long int type,x,y,k;
	long long int val;
	for(int i=1;i<=q;i++)
	{
		cin>>type;
		if(type==1)
		{
			cin>>k>>x>>y;
			if(k<=x)
			{
				node ans1=query(1,1,n,x,y);
				long long int ans=0;
				ans=ans+ans1.prod;
		ans=ans-(ans1.sum*k);
		cout<<ans<<"\n";
		continue;
			}
			else if(k>=y)
			{
				node ans1=query(1,1,n,x,y);
				long long int ans=0;
				ans=ans-ans1.prod;
				ans=ans+(ans1.sum*k);
				cout<<ans<<"\n";
				continue;
			}
		node ans1=query(1,1,n,x,k-1);
		node ans2=query(1,1,n,k+1,y);
		//cout<<ans1.prod<<" "<<ans1.sum<<"\n";
		long long int ans=0;
		ans=ans+ans2.prod;
		ans=ans-(ans2.sum*k);
		ans=ans+(ans1.sum*k);
		ans=ans-ans1.prod;
		cout<<ans<<"\n";
		}
		else
		{
			scanf("%d%d",&x,&y);
			a[x]=a[x]+y;
			update(1,1,n,x,y);
		}
	}
	return 0;
}
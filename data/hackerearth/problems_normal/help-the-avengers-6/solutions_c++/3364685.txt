#include <bits/stdc++.h>

using namespace std;
int n;
//int a[32005] = {0};
int bit[32005] = {0};
int prime[1000005] = {0};

void fun()
{
    prime[0] = 0;
    prime[1] = 0;
    for (int i = 2; i<= 1000000;i++)
    {
        int k =0;
        for (int j = 2; j<= sqrt(i);j++)
        {
            if (i % j == 0)
            {
                k = 1;
                break;
            }
        }

        if (k == 0)
            prime[i] = 1;
    }
}


void update(int pos,int val)
{
    for (;pos <= n;pos += pos & -pos)
        bit[pos] += val;
}

int query(int pos)
{
    int sum = 0;
    for (;pos > 0; pos -= pos & -pos)
        sum += bit[pos];

    return sum;
}

int main()
{
    fun();
    int tc;
    cin >> tc;

    while(tc--){
    cin >> n;
    int hash_t[n+1];
    long int num;

    for (int i = 1;i <= n;i++)
    {
        cin >> num;
        if (prime[num] == 1)
        {
            update(i,1);
            hash_t[i] = 1;
        } else
        {
            hash_t[i] = 0;
        }
    }

    int q;
    cin >> q;
    char sym;

    while(q--)
    {
        cin >> sym;
        if (sym == 'A')
        {
            int l ,r;
            cin >> l >> r;
            int sol;
            sol = query(r) - query(l-1);
            cout << sol << endl;
        } else if (sym == 'C')
        {
            long int pos,num;
            cin >> pos >> num;
            if (prime[num] == 1)
            {
                if (hash_t[pos] != 1){
                    update(pos,1);
                    hash_t[pos] = 1;
                }
            } else if (prime[num] == 0)
            {
                if (hash_t[pos] == 1)
                {
                    update(pos,-1);
                    hash_t[pos] = 0;
                }
            }
        }
    }

    for (int i = 0;i <= n;i++)
        bit[i] = 0;
    }

    return 0;
}

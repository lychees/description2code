#include <iostream>

using namespace std;

int path = 0;

bool isSafe( bool **A, int n, int r, int c, bool **visit ) {
	if( ( r >= 0 ) && ( r < n ) && ( c >= 0 ) && ( c < n ) && !A[ r ][ c ] && !visit[ r ][ c ] )
		return true;
	return false;
}

void DFS( bool **A, int n, int r, int c, bool **visit ) {
	
	if( ( r == n - 1 ) && ( c == n - 1 ) ) {
		path++;
		return;
	}

	if( isSafe( A, n, r + 1, c, visit ) ) {
		visit[ r + 1 ][ c ] = true;
		DFS( A, n, r + 1, c, visit );
		visit[ r + 1 ][ c ] = false;
	}

	if( isSafe( A, n, r - 1, c, visit ) ) {
		visit[ r - 1 ][ c ] = true;
		DFS( A, n, r - 1, c, visit );
		visit[ r - 1 ][ c ] = false;
	}

	if( isSafe( A, n, r, c + 1, visit ) ) {
		visit[ r ][ c + 1 ] = true;
		DFS( A, n, r, c + 1, visit );
		visit[ r ][ c + 1 ] = false;
	}

	if( isSafe( A, n, r, c - 1, visit ) ) {
		visit[ r ][ c - 1 ] = true;
		DFS( A, n, r, c - 1, visit );
		visit[ r ][ c - 1 ] = false;
	}
}
int main() {
	
	ios_base::sync_with_stdio( false );

	int t, n, i, j;

	cin >> t;

	while( t-- ) {

		cin >> n;
		bool **A = new bool*[ n ];
		bool **visit = new bool*[ n ];

		for( i = 0;i < n;i++ ) {
			A[ i ] = new bool[ n ];
			visit[ i ] = new bool[ n ];
		}

		for( i = 0;i < n;i++ ) {

			for( j = 0;j < n;j++ ) {
				visit[ i ][ j ] = false;
				cin >> A[ i ][ j ];
			}
		}
		
		path = 0;

//		if( !A[ 0 ][ 0 ] ) {
			visit[ 0 ][ 0 ] = true;
			DFS( A, n, 0, 0, visit );
//		}

		cout << path << "\n";
	}

	return 0;
}

#include <bits/stdc++.h>
using namespace std;
const int MAX = 100000 + 7;
vector <int > graph[MAX];
bool visited[MAX];
int N , P ;
int cc = 0;
int CC[MAX];
int Number[MAX];
int low[MAX];
int dis[MAX];
int sz[MAX];
int edges = 0;
int tme = 0;
void ddfs ( int v )
{
	//cc++;
  visited[v] = 1;
  CC[v] = cc;
  		Number[cc]++;
  for(int i = 0; i < (int)graph[v].size(); i++)
	{
   if(!visited[graph[v][i]])
   ddfs(graph[v][i]);
		
	}
return;
}
void dfs ( int v , int from = -1)
{
	 tme++;
	visited[v] = 1;
	low[v] = dis[v] = tme;
	sz[v] = 1;
	for(int i = 0; i < (int) graph[v].size(); i++)
	{
	  int to = graph[v][i];
	  
	  if(from == to)continue;
	  
	   if(!visited[to])
	   {
	   	 dfs(to , v);
	   	 sz[v] += sz[to];
	   	 
	   	 low[v] = min(low[v] , low[to]);
	   	 if(low[to] > dis[v]  && abs(sz[to] - (Number[CC[to]] - sz[to] )) < P)
	   	 edges++;
	   }
		 
	  else
	  low[v] = min(low[v]  , dis[to]);
		
		
		
		
		
	}
	
	
	
	
	
return;	
}
int main()
{
   int M ,a , b;
   cin >> N >> M >> P;
   
   for(int i = 0; i < M ; i++)
   {
   	cin >> a >> b;
   	graph[a].push_back(b);
   	graph[b].push_back(a);
   }
   cin >> P;
   
  
   for(int i = 1; i <= N ; i++)
   {
   	  if(!visited[i])
   	    ++cc , ddfs(i);
   }
   for(int i = 1; i <= N ; i++)
   visited[i]  = 0;
   
   for(int i = 1; i <= N ; i++)
   {
   	  if(!visited[i])
   	  dfs(i);
   	
   }
   
   cout << edges << endl;
    return 0;
}

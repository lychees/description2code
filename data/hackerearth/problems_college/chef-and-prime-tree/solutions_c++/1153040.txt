#include<bits/stdc++.h>


using namespace std;

#define rep(i,n) for(i=0;i<n;i++)
#define ll long long
#define elif else if
#define pii pair<int,int>
#define mp make_pair
#define pb push_back

bool arr[5000005];
void markMultiples(int a, int n)
{
    int i = 2, num;
    while ( (num = i*a) <= n )
    {
        arr[ num-1 ] = 1; // minus 1 because index starts from 0.
        ++i;
    }
}
 
// A function to print all prime numbers smaller than n
void SieveOfEratosthenes(ll int n)
{
	memset(arr, 0, sizeof(arr));
    // There are no prime numbers smaller than 2
    if (n >= 2)
    {
        // Create an array of size n and initialize all elements as 0
 
        /* Following property is maintained in the below for loop
           arr[i] == 0 means i + 1 is prime
           arr[i] == 1 means i + 1 is not prime */
        for (int i=1; i<n; ++i)
        {
            if ( arr[i] == 0 )
            {
                //(i+1) is prime, print it and mark its multiples
                //printf("%d ", i+1);
                markMultiples( i+1, n);
            }
        }
    }
}
ll int foo(ll int x,ll int y)
{
	ll int temp=0;
	while(x!=y)
	{
		if(x>y)
		{
			if(arr[x-1])
			temp-=x;
			else
			temp+=x;
			x/=2;
		}
		else if(y>x)
		{
			if(arr[y-1])
			temp-=y;
			else
			temp+=y;
			y/=2;
		}
		else
			{break;}
		//	cout<<"\n"<<temp;
	}
	if(arr[x-1])
	temp-=x;
	else
	temp+=x;
	return temp;
}
int main()
{
// freopen("input","r",stdin);
 ios_base::sync_with_stdio(0);
 SieveOfEratosthenes(5000000);
 arr[0]=1;
 ll int n,m,i,j,ans=0,q,x,y;
 cin>>q;
 while(q--)
 {
 	cin>>x>>y;
 	ll int temp=foo(x,y);
  cout<<0-temp<<"\n";
 }
 return 0;
}
#include<bits/stdc++.h>
#define MAX 51
#define MOD 1000000007

using namespace std;

typedef unsigned long long int lli;

class Matrix{
	
	private :
	
	lli mat[MAX][MAX];
	lli r,c;
	
	public :
	
	Matrix(lli r,lli c){
		
		this->r=r;
		this->c=c;
		
		memset(mat,0,sizeof mat);
		
	}
	
	Matrix(lli mat[MAX][MAX],lli r,lli c){
		
		this->r=r;this->c=c;
		
		for(lli i=0;i<r;i++)
		  for(lli j=0;j<c;j++) this->mat[i][j]=mat[i][j];		
		
	}
	
    lli get(lli x,lli y){ return mat[x][y];	}
	
	Matrix mult(Matrix A,Matrix B){
	   	
	   Matrix ans(A.r,B.c);
	   
	   for(int i=0;i<A.r;i++)
	     for(int j=0;j<B.c;j++)
	       for(int k=0;k<A.c;k++)
	         ans.mat[i][j]=(ans.mat[i][j]+A.mat[i][k]*B.mat[k][j])%MOD;
	
	   return ans;	
		
	}
	
	Matrix fast_expo(lli expo){
				
		if(expo==1) 
		  return *this;
		
		Matrix ans=*this,now=*this;
		int flag=1;
		
		while(expo){
			
			if(expo%2==1){
				
				if(flag){
				
				  ans=now;
			      flag=0;
			      
				}
				
				else ans=mult(ans,now);
				
			}
			
			now=mult(now,now);
			
			expo/=2;		
			
		}
		
		return ans;	
		
	}
		
};  

int main(void){
	
	lli testCases,src,dest,length,cities,i,j;
	lli mat[MAX][MAX];
	
	cin>>testCases;
	
	while(testCases--){
		
		cin>>cities>>length>>src>>dest;
		
		for(i=0;i<cities;i++)
		 for(j=0;j<cities;j++) cin>>mat[i][j];
		
		if(length==0){
			
			if(src==dest) cout<<"1\n";
			else cout<<"0\n";			
			
			continue;
			
		}
		
		Matrix base(mat,cities,cities);
		
		base=base.fast_expo(length);
			
		cout<<base.get(src,dest)<<"\n";		
		
	}
		
	return 0;
	
}
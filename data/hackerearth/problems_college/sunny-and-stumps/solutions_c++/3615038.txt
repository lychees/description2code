#include <bits/stdc++.h>
#define eps 1e-13
using namespace std;
//double A[100009], C[100009];
//int B[100009];
double m[100009], c[100009], cc[100009];
//bool bb[100009];
double mergesort(double *a, double *b, double *l, double *lb, double *r, double *rb, int n, int mid, int m)
{
    int i = 0, j = 0, k = 0;
    while(i < mid && j < m)
    {
        if(l[i] < r[j])
        {
            a[k] = l[i];
            b[k] = lb[i];
            i++;
        }
        else if(abs(l[i]-r[j]) < eps)
        {
            if((lb[i] - rb[j]) < -eps)
            {
                a[k] = l[i];
                b[k] = lb[i];
                i++;
            }
            else
            {
                a[k] = r[j];
                b[k] = rb[j];
                j++;
            }
        }
        else
        {
            a[k] = r[j];
            b[k] = rb[j];
            j++;
        }
        k++;
    }
    while(i < mid)
    {
        a[k] = l[i];
        b[k] = lb[i];
        i++;
        k++;
    }
    while(j < m)
    {
        a[k] = r[j];
        b[k] = rb[j];
        k++;
        j++;
    }
}
double mergebreak(double *a, double *b, int n)
{
    if(n < 2)
        return a[0];
    else
    {
        int mid = n/2, i;
        double l[mid], r[n-mid], lb[mid], rb[n-mid];
        for(i = 0; i < mid; i++)
        {
            l[i] = a[i];
            lb[i] = b[i];
        }
        for(i = mid; i < n; i++)
        {
            r[i-mid] = a[i];
            rb[i-mid] = b[i];
        }
        mergebreak(l, lb, mid);
        mergebreak(r, rb, (n-mid));
        mergesort(a, b, l, lb, r, rb, n, mid, (n-mid));
    }
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    int t, n, i, sum, s, l, l0, j;
    double A, C, B;
    cin >> t;
    while(t--)
    {
        cin >> n;
        l = 0;
        l0 = 0;
        for(i = 0; i < n; i++)
        {
            cin >> A >> B >> C;
            if(abs(B) < eps)
            {
                //bb[i] = false;
                cc[l0] = C/A;
                //cout << "debug " << cc[l0] << '\n';
                l0++;
            }
            else
            {
                //bb[i] = true;
                m[l] = A/B;
                c[l] = C/B;
                //cout << "debug " << m[l] << " " << c[l] << '\n';
                l++;
            }
        }
        sum = 0;
 
        if(l0 > 0)
        {
            sum = 1;
            sort(cc, cc+l0);
            for(i = 1; i < l0; i++)
            {
                if(abs(cc[i] - cc[i-1]) >= eps)
                    sum++;
            }
        }
 
        if(l > 0)
        {
            mergebreak(m, c, l);
            i = 0;
            while(i < l)
            {
                s = 1;
                for(j = i+1; j < l && abs(m[j] - m[j-1]) < eps; j++)
                {
                    if(abs(c[j] - c[j-1]) >= eps)
                        s++;
                }
                sum = max(sum,s);
                i = j;
            }
        }
        cout << sum << '\n';
    }
    return 0;
}
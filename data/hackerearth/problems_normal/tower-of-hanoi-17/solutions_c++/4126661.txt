#include<bits/stdc++.h>
using namespace std;
#define MAX 205
#define ll long long int
int rad[MAX];
int ht[MAX];
int n;
ll dp[MAX];
vector<pair<int,int> > vt;
bool st(pair<int,int> a, pair<int,int> b)
{
	if(a.first != b.first)
		return a.first > b.first;
	return a.second > b.second;
}
int rec(int pos, int sumht, int pht, int pr)
{
	if(pos > n) return sumht;
	if(pr == 0)
	{
		return max(rec(pos+1,ht[pos],ht[pos],rad[pos]) , rec(pos+1,0,0,0));
	}
	if(rad[pos] < pr && ht[pos] < pht)
	{
		return max(rec(pos+1,sumht+ht[pos],ht[pos],rad[pos]) , rec(pos+1,sumht,pht,pr));
	}
	else
	{
		return rec(pos+1,sumht,pht,pr);
	}
}
ll dpsol(void)
{
	int i;
	int j;
	ll ans = 0;
	dp[0] = vt[0].second;
	for(i=1;i<n;++i)
	{
		dp[i]=vt[i].second;
		for(j=0;j<i;++j)
		{
			if(vt[j].first < vt[i].first && vt[j].second < vt[i].second) dp[i] = max(dp[i],dp[j]+vt[i].second);
		}
		ans=max(dp[i],ans);
	}
	return ans;
	
	
}
int main()
{
    int t;
    int i;
    cin>>t;
    while(t--)
    {
    	cin>>n;
    	for(i=0;i<n;++i)
    	{
    		cin>>rad[i]>>ht[i];
    		vt.push_back(make_pair(rad[i],ht[i]));
    	}
    	sort(vt.begin(),vt.end());
    	cout<<dpsol()<<endl;
    	vt.clear();
    }
    return 0;
}

# Hacker Earth
# Problem Statement
# 'L' -- from (X, Y) moves to point (X, Y - 1)
# 'R' -- from (X, Y) moves to point (X, Y + 1)
# 'U' -- from (X, Y) moves to point (X - 1, Y)
# 'D' -- from (X, Y) moves to point (X + 1, Y)

# Import libraries
import sys
import pdb

def findBennyFallCount(myCommand):
	# initialization
	fallCount = 0
	currentX = 0
	currentY = 0
	visitedLocaiton = {}
	visitedLocaiton[currentX] = []
	visitedLocaiton[currentX].append(currentY)
	
	# process the command
	for cmd in myCommand:
		# update current location based on the command received
		if cmd == 'L':
			currentY -= 1
		if cmd == 'R':
			currentY += 1
		if cmd == 'U':
			currentX -= 1
		if cmd == 'D':
			currentX += 1
		else:
			pass
		# Update visited location and fall count
		if visitedLocaiton.has_key(currentX):
			if currentY in visitedLocaiton[currentX]:
				fallCount += 1
			else:
				visitedLocaiton[currentX].append(currentY)
		else:
			visitedLocaiton[currentX] = []
			visitedLocaiton[currentX].append(currentY)
	return(fallCount)


def getOneLine(inFile):
	if inFile != "":
		return(inFile.readline().rstrip())
	return(sys.stdin.readline().rstrip())


def main():
	
	# Toggle mode of input
	# inFile = open("input5.txt", 'r')
	inFile = ""
	
	# number of cases
	myCommand = getOneLine(inFile)
	
	# Result string
	result = findBennyFallCount(myCommand)
	result = str(result)
	
	# print the output
	sys.stdout.write(result)
	if inFile != "":
		inFile.close()
	
	
main()

# Simple test case
# RRULDL

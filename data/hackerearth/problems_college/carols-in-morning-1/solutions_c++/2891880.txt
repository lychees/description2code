#include <cstdio>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#define DEBUG if(0)

typedef long long int int32;

using namespace std;
const int32 INF = (1 << (30));
int32 Pow2[31];

void init()
{
    int32 t = 1;
    for(int i = 0; i < 31; ++i)
    {
        Pow2[i] = t;
        t *= 2;
    }
}

int32 MIN(int32 a,int32 b) { return a > b ? b : a; }

int Process(set<string> &input)
{
    int32 ans = -1;

    vector<string> INPUT;
    for(set<string>::iterator it = input.begin(); it != input.end(); ++it)
        INPUT.push_back((*it));

    DEBUG {
        for(int i = 0; i < INPUT.size(); ++i)
            cout << INPUT[i] << endl;
    }

    int32 Num  = INPUT.size();
    int32 Mem = INPUT[0].size();
    int32 Size = 1 << Mem;

    vector<bool> visited;
    visited.resize(INPUT.size());

    for(int32 i = 0; i < Size; ++i)
    {
        int count = 0;
        for(int k = 0; k < Num; ++k)
            visited[k] = false;

        for(int j = 0; j < Mem; ++j)
        {
            if( i & Pow2[j] )
            {
                for(int k = 0; k < INPUT.size(); ++k)
                {
                    if( INPUT[k][j] == 'Y' && !visited[k])
                    {
                        ++count;
                        visited[k] = true;
                    }
                }

            }

            if(count == Num)
            {
                
                int32 nAns = __builtin_popcount(i);
                if( ans == -1 ) ans = nAns;
                else            ans = MIN(ans,nAns);
            }
        }
    }

    return ans;
}

int main()
{
    DEBUG {
        cout << INF << endl;
        cout << sizeof(int32) << endl;
        cout << (INF & (INF - 1)) << endl;
    }

    int T,n;
    init();
    cin >> T;
    while(T--)
    {
        cin >> n;

        string tmp;
        set<string> input;

        for(int i = 0; i < n; ++i)
        {
            cin >> tmp;
            input.insert(tmp);
        }
        
        cout << Process(input) << endl;
    }
    return 0;
}

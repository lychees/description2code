#include <bits/stdc++.h>
#define ll long long int
#define fastIO ios::sync_with_stdio(false);cin.tie(0) 
#define sii(x) scanf("%d",&x)
#define pii(x) printf("%d\n",x)
#define sll(x) scanf("%lld",&x)
#define pll(x) printf("%lld\n",x)
#define pf printf
#define present_set_map(container, element) (container.find(element) != container.end()) 
#define present_vec(container, element) (find(all(container),element) != container.end()) 
#define mp make_pair
#define all(x) x.begin(),x.end()
#define all_rev(x) x.rbegin(),x.rend()
#define pb push_back
#define fr first
#define se second
#define mod 1000000007
using namespace std;

int rooter[100005];
int kids[100005];
multiset<int>MS;
multiset<int>::reverse_iterator itr1;
multiset<int>::iterator itr2;
int root(int i)
{
	if(i==rooter[i])
	{
		return i;
	}
	else
	{
		return rooter[i]=root(rooter[i]);
	}
}

void make_union(int A ,int B)// a becomes child of b
{
    int root_A = root(A);       
    int root_B = root(B);  
    if(root_A!=root_B)
    {
    	rooter[ root_A ]=root_B;//make root of b as root of A
    	MS.erase(MS.find(kids[root_A]));
    	MS.erase(MS.find(kids[root_B]));
    	kids[root_B]+=kids[root_A];
    	MS.insert(kids[root_B]);
    }
}

int main()
{
    fastIO;
    int n,q,a,b,i;
    cin>>n>>q;
    for(i=1;i<=n;i++)
    {
        rooter[i]=i;
        kids[i]=1;
        MS.insert(kids[i]);
    }
    while(q--)
    {
        cin>>a>>b;
        //cout<<a<<endl;
        make_union(b,a);
        itr1=MS.rbegin();
        itr2=MS.begin();
        cout<<*itr1-*itr2<<"\n";
    }
    return 0;
}
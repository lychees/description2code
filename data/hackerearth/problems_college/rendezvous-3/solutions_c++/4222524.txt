#include<bits/stdc++.h>
using namespace std;
const int MOD = 1e9+7;
#define pb push_back
#define mp make_pair
struct DSU {
  int *parent;
  int *rank;
  void init(int n){
    parent = new int[n+1];
    rank = new int[n+1];
    for(int i=0;i<=n;i++){
      parent[i] = i;
      rank[i] = 0;
    }
  }
  int find(int node){
    if(parent[node] == node){
      return node;
    }
    return parent[node] = find(parent[node]);
  }
  bool merge(int a,int b){
    int x = find(a);
    int y = find(b);
    if( x==y ) return false;
    if(rank[x] >= rank[y]){
      parent[y] = x;
      rank[x] += rank[y];
    }
    else if(rank[y] > rank[x]){
      parent[x] = y;
      rank[y] += rank[x];
    }
    return true;
  }
};
vector< pair<int, pair<int,int> > > E;
int main() {
  int n; int  m;
  cin >> n >> m;
  for(int i = 0 ; i < m ; ++i) {
    int x,y,c;
    scanf("%d%d%d",&x,&y,&c);
    E.pb(mp(c,mp(x,y)));
  }
  sort(E.begin(),E.end());
  DSU d;
  d.init(n);
  long long ans = 0;
  for(int i =  0 ; i < E.size() ; ++i) {
    int u = E[i].second.first;
    int v = E[i].second.second;
    int w = E[i].first;
    int f = d.merge(u,v);
    if(f) {
      ans += w;
    }
  }
  cout<<ans<<endl;
}

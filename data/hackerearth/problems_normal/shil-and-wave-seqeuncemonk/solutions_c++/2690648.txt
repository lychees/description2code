#include <bits/stdc++.h>

#define all(a) (a).begin(), (a).end()
#define ms(a,v) memset(a, v, sizeof(a))
#define prev franga_de_sunga
#define next tio_de_sueter
#define index bora_baea

using namespace std;
#define scan(args...) rdr,args
#define print(args...) prt<<args
#define println(args...) {prt<<args; cout<<endl;}
#define read(type, args...) type args; scan(args)
#define cendl cout<<endl
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#define debug(args...) cerr << #args << ": "; dbg,args; cerr << endl
#define _11 ios::sync_with_stdio(false); cin.tie(0);/ thanks yunus :P

template<typename T>
void read_range(T beg, T end)
{
    while (beg != end)
        cin >> *beg++;
}
 
template<typename T>
void print_range(T beg, T end)
{
	if(beg != end) cout << *beg++;
    while (beg != end)
        cout << ' ' << *beg++;
}

struct printer
{
	template<typename T>
	printer & operator<<(const T &v){
		cout << v;
		return *this;
	}

    template<typename T>
    printer& operator, (const T &v)
    {
        cout << ' ' << v;
        return *this;
    }
} prt;

struct reader
{
    template<typename T>
    reader& operator, (T &v)
    {
        cin >> v;
        return *this;
    }
} rdr;
 
struct debugger
{
    template<typename T>
    debugger& operator, (const T &v)
    {
        cerr << v << ", ";
        return *this;
    }
} dbg;



typedef pair<int, int> ii;
typedef long long ll;

const int MOD = 1e9+7;

struct Fenwick{
    int * tree;
    int n;
    Fenwick(){
    }
    Fenwick(int n){
        tree = new int[n+1]();
        this-> n = n;
    }

    void add(int i, int x){
        while(i <= n){
            tree[i] = (tree[i]+x) % MOD;
            i += i&-i;
        }
    }

    int query(int i){
        int res = 0;
        while(i){
            //printf("%d\n", i);
            res += tree[i];
            res %= MOD;
            i -= i&-i;
        }
        return res;
    }

    int query(int i, int j){
        return query(j) - query(i-1);
    }
};

int main(){
     read(int, n);
    
     Fenwick up(100001), down(100001);
     for(int i = 0; i < n; i++){
        read(int, x);
        int a = down.query(x-1);
        int b = up.query(x+1, 100001);
        up.add(x, (a+1)%MOD);
        down.add(x, (b+1)%MOD);
     }
        
     int ans = up.query(100000) + down.query(100000);
     ans %= MOD;
     ans -= 2*n;
     ans += MOD;
     ans %= MOD;
     printf("%d\n", ans);
}

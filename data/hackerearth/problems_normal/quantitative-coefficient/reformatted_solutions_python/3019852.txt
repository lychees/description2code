from collections import defaultdict


def make_set(N):
    global parents

    for node in range(1, N+1):
        parents[node] = node


def Union(node1, node2):
    global parents

    node1_root = Find(node1)
    node2_root = Find(node2)

    if node1_root == node2_root:
        return

    parents[node1_root] = node2_root


def Find(node):
    global parents
    if parents[node] != node:
        parents[node] = Find(parents[node])
    return parents[node]


def Krushkal(weighted_edge_list=[], N=0):

    count, cost = 0, 1

    make_set(N)
    weighted_edge_list.sort(key=lambda x: x[2])

    for edge in weighted_edge_list:

        root1 = Find(edge[0])
        root2 = Find(edge[1])

        if root1 != root2:
            Union(root1, root2)
            count += 1

            cost *= edge[2]

        if count == N-1:
            break

    return cost


t = int(raw_input())

while t > 0:
    N, M = [int(x) for x in raw_input().split()]
    edges = []
    parents = [0]*10**6

    for i in range(M):
        node = [int(x) for x in raw_input().split()]
        edges.append(node)

    print(Krushkal(edges, N)) % 1000000007

    t -= 1

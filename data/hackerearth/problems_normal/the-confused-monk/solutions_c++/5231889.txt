#include<bits/stdc++.h>
#define lli long long int
#define f(i,n) for(lli i=0;i<n;i++)
#define lp(i,a,b) for(lli i=a;i<b;i++)
const lli mod1 = 1000000007;
using namespace std;
//lli s[1000001];
lli power(lli a,lli b)
{
    lli x=1,y=a;
    while(b>0)
    {
        if(b%2==1)
        {
            x=(x*y);
            if(x>mod1) x%=mod1;
        }
        y = (y*y);
        if(y>mod1) y%=mod1;
        b /= 2;
    }
    return x;
}
//bool isPrime[10000001];
//void sieve(int N) {
//    for(int i = 0; i <= N;++i) {
//        isPrime[i] = true;
//    }
//    isPrime[0] = false;
//    isPrime[1] = false;
//    for(int i = 2; i * i <= N; ++i) {
//         if(isPrime[i] == true) {
//             // Mark all the multiples of i as composite numbers
//             for(int j = i * i; j <= N ;j += i)
//                 isPrime[j] = false;
//        }
//    }
//}
lli gcd(lli a,lli b)
{
    if(b==0)
        return a;
    else
        return gcd(b, a%b);
}
int main()
{
    lli n;
    cin >> n;
    lli a[n],fx=1,gx=0;
    f(i,n)
    {
        cin >> a[i];
    }
    if(n==1)
    {
        gx=a[0];
    }
    else
    {
        gx=gcd(a[1],a[0]);
    }
    lp(i,2,n)
    {
        gx=gcd(gx,a[i]);
    }
    f(i,n)
    {
        fx=(fx*a[i])%mod1;
    }
    cout << power(fx,gx) << endl;
    return 0;
}

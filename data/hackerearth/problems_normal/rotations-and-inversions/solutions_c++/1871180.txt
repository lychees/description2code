//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <fstream>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define ull unsigned long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
#define sz(a) (int)(a).size()
/* Defines end */

int t, n;
int a[100005], tree[100005];
vector<int> c;

void inc(int x) {
    for (int i = x; i <= c.size(); i += i & -i) {
        ++tree[i];
    }
}

ll go(int x) {
    ll r = 0;
    for (int i = x; i > 0; i -= i & -i) {
        r += tree[i];
    }
    return r;
}

ll go(int l, int r) {
    if (l > r) return 0;
    return go(r) - go(l - 1);
}

const int len = 100005;
int arr[len], cur[len], cn[len], cnt[len], p[len], pn[len], cls;

void buildSA() {
    for (int i = 0; i < n; ++i) arr[i] = a[i + 1] - 1, cnt[i] = 0;
    for (int i = 0; i < n; ++i) cnt[arr[i]]++;
    for (int i = 1; i < n; ++i) cnt[i] += cnt[i - 1];
    for (int i = 0; i < n; ++i) p[--cnt[arr[i]]] = i;
    cur[p[0]] = 0; cls = 1;
    for (int i = 1; i < n; ++i) {
        if (arr[p[i]] != arr[p[i - 1]]) ++cls;
        cur[p[i]] = cls - 1;
    }
    for (int h = 0; (1 << h) < n; ++h) {
        for (int i = 0; i < n; ++i) {
            pn[i] = p[i] - (1 << h);
            if (pn[i] < 0) pn[i] += n;
        }
        for (int i = 0; i < cls; ++i) cnt[i] = 0;
        for (int i = 0; i < n; ++i) ++cnt[cur[pn[i]]];
        for (int i = 1; i < cls; ++i) cnt[i] += cnt[i - 1];
        for (int i = n - 1; i >= 0; --i) p[--cnt[cur[pn[i]]]] = pn[i];
        cn[p[0]] = 0; cls = 1;
        for (int i = 1; i < n; ++i) {
            int sd1 = (p[i] + (1 << h)) % n;
            int sd2 = (p[i - 1] + (1 << h)) % n;
            if (cur[p[i]] != cur[p[i - 1]] || cur[sd1] != cur[sd2]) ++cls;
            cn[p[i]] = cls - 1;
        }
        for (int i = 0; i < n; ++i) cur[i] = cn[i];
    }
}

void Solve() {
    memset(tree, 0, sizeof tree);
    c.clear();
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
        scanf("%d", &a[i]);
        c.push_back(a[i]);
    }
    sort(all(c));
    c.erase(unique(all(c)), c.end());
    ll inv = 0;
    for (int i = 1; i <= n; ++i) {
        a[i] = lower_bound(all(c), a[i]) - c.begin() + 1;
        inv += go(a[i] + 1, c.size());
        inc(a[i]);
    }
    buildSA();
    ll best = inv, pos = 0;
    for (int i = 1; i < n; ++i) {
        inv -= go(1, a[i] - 1);
        inv += go(a[i] + 1, c.size());
        if (inv > best || (inv == best && cur[i] < cur[pos])) {
            best = inv;
            pos = i;
        }
    }
    cout << pos << " " << best << "\n";
}

int main(void) {
    #ifdef nobik
        freopen("input.txt", "rt", stdin);
        freopen("output.txt", "wt", stdout);
    #endif
    scanf("%d", &t);
    for (int i = 0; i < t; ++i) {
        Solve();
    }
    return 0;
}

#include<iostream>
#include<vector>
#include<cstdio>

using namespace std;

#define rep(i,k) for(int i=0;i<k;i++)

typedef unsigned long long ull;
const int maxn=10000;
int source=0,sink=0;
//vector < vector<int> > graph;
vector< int > graph[maxn];
int visited[maxn]={0};
int cnt=0;

void dfs(int source,int sink)
{
    //static int cnt=0;
    if(source==sink)
    {
                    cnt++;
                    return ;
    }
    for(int i=0;i<graph[source].size();i++)
    {
            int match=graph[source][i];
            if(!visited[match])
            {
                               visited[match]=1;
                               dfs(match,sink);
                               visited[match]=0;
            }
    }
    //return cnt;
}

int main()
{
 int matrix[101][101]={0};
 int n;
 cin>>n;
 rep(i,n)
         rep(j,n)
                 cin>>matrix[i][j];
 rep(i,n)
         rep(j,n)
         {
                 if(matrix[i][j] == 0)
                 {
                                 if(i < n-1 && matrix[i+1][j] == 0)
                                 {
                                      graph[i*n+j].push_back((i+1)*n+j);
                                      graph[(i+1)*n+j].push_back((i)*n+j);
                                      //cout<<"hi ";
                                 }
                                 if(j < n-1 && matrix[i][j+1] == 0)
                                 {
                                      graph[i*n+j].push_back((i)*n+(j+1));
                                      graph[(i)*n+(j+1)].push_back((i)*n+j);
                                 } 
                 }
         }
 
 sink=(n*n)-1;
 visited[source]=1;
 dfs(source,sink);
 cout<<cnt;
                    
 
 
 
 //getchar();
 return 0;
}

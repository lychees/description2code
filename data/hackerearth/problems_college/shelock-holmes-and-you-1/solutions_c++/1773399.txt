/*
Arisen in vain to a life,
Bleeding inner to suffer with time.
Endlessly lost and still searching
For something, someday.

Obsession & deceit
To burn a mark for a lifetime.
Boundaries to brake,
Reached from the edge of time.
To rebuild the past
For something that will everlast.
Just searching for to find itself
In still-motion.

For to hope,
Whenever to find a closure,
Find itself in still-motion..

Get closer,
Closer to your own faith.

Serve the frail mind,
Escape through the lifetime
To glance for your dismal youth.

Get closer,
Closer to your own faith.
*/
 
//#pragma comment(linker, "/STACK:16777216")
#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <ctime> 
 
#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash
 
#define eps 1e-9
//#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 256

using namespace std;

long n,m,k,ar[10000],dp[5005][5005],answ,s[5005];

int main(){
//freopen("k.in","r",stdin);
//freopen("k.out","w",stdout);
//freopen("C:/input.txt","r",stdin);
//freopen("C:/output.txt","w",stdout);
ios_base::sync_with_stdio(0);
//cin.tie(0);

cin>>n>>k>>m;
for (int i=1;i<=n;i++)
 cin>>ar[i];
for (int i=1;i<=n;i++)
 s[i]=s[i-1]+ar[i];

for (int i=1;i<=n;i++)
 for (int j=0;j<=m;j++)
 {
 	dp[i][j]=max(dp[i][j],dp[i-1][j]);
 	if (i>=k&&j>0)
 	 dp[i][j]=max(dp[i][j],dp[i-k][j-1]+s[i]-s[i-k]);
 	answ=max(answ,dp[i][j]);
 }
cout<<answ<<endl;

cin.get();cin.get();
return 0;}
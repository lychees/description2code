#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define forn(i, n) for (int i = 0; i < n; ++i)
#define forl(i, a, b) for (int i = a; i < b; ++i)
#define fore(i, a, b) for (int i = a; i <= b; ++i)
#define ul unsigned long
#define ll long long
#define pii std::pair<int, int>
#define vpii vector<pii >
#define all(x) x.begin(), x.end()
#define Unique(a) a.erase(unique(all(a)), a.end());
#define INF 1000000011
const int MOD = 1e9 + 7;
const long double PI = 3.14159265358979323846;
struct myCompare {
	bool operator() (const pii &l, const pii &r) const {
		return l.first < r.first;
	}
};


map<int, int> fa;
map<int, int> height;
int n;
int q;

int pow2(int x) {
	if (x == 1) return 2;
	ll t = pow2(x >> 1);
	ll ret = t * t;
	if (x & 1L) ret <<= 1;
	return ret % MOD;
}

bool unionSet(int x, int y) {
	int rx = x;	
	int ry = y;
	while (rx != fa[rx]) rx = fa[rx];
	while (ry != fa[ry]) ry = fa[ry];
	if (rx == ry && rx != 0) return 0;
	if (rx == 0 && ry == 0) {
		height[x] = 1; fa[x] = fa[y] = x;
	} else {
		if (rx == 0) fa[x] = ry;
		else if (ry == 0) fa[y] = rx;
		else {
			if (height[rx] > height[ry]) fa[ry] = rx;
			else {
				fa[rx] = ry;
				if (height[rx] == height[ry]) height[ry]++;
			}
		}
	}

	return 1;
}

void solve() {
	scanf("%d %d", &n, &q);
	int l, r;
	int res = pow2(n);
	forn(i, q) {
		scanf("%d %d", &l, &r);
		if (unionSet(l, r + 1)) {
			if (n) { 
				n--;
				res = pow2(n);
			}
		}
		printf("%d\n", res);
	}
}

int main() {
	#ifndef ONLINE_JUDGE
		freopen("input.txt", "rt", stdin);
		//freopen("output.txt", "wt", stdout);
	#endif
	//cout << fixed << setprecision(10);	

	solve();

	return 0;
}
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cctype>
#include <cstdlib>
#include <bitset>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <map>
#include <set>
#include <stack>
#include <cmath>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <complex>
#include <functional>
#include <climits>
#include <cassert>
#include <iterator>
#include <math.h>
#include <time.h>
#include <string.h>

using namespace std;

#define bit(n) (1<<(n))
#define inf 1000000000
#define eps 1e-9
#define PI 3.1415926535897932385
#define pb push_back
#define sz size()
#define mp make_pair
#define cl clear()
#define all(a) a.begin(),a.end()
#define fill(ar,val) memset(ar,val,sizeof(ar))
#define MIN(a,b) if(a>(b)) a=(b)
#define MAX(a,b) if(a<(b)) a=(b)
#define sqr(x) ((x)*(x))
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define MOD 1000000007
#define bsize 512
const int N = 6006;


using namespace std;
 // ===================//

 int t,n,m;
 vector<pair<int,int> > g[1<<19];
 queue<int> qv;
 int dist[1<<19];
 set<pair<int,int> > ::iterator it;
 set<pair<int,int> >S;
 
int main()
{
    // * Faster Input *//
    
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    
    // * ----  * //
    
    cin >> t;
    while(t--)
    {
        cin >> n >> m;
        for(int i=1;i<=n;i++)
        {
            g[i].clear();
            dist[i] = 1e9;
        }
        dist[1] = 0;
        for(int i=1;i<=n;i++)
        {
            S.insert(mp(dist[i],i));
        }
        for(int i=1;i<=m;i++)
        {
            int a,b,c;
            cin >> a >> b >> c;
            g[a].pb(mp(b,c));
            g[b].pb(mp(a,c));
        }
        
        while(S.size())
        {
            it = S.begin();
            pair<int,int> p=(*it);
            S.erase(it);
            int qv = p.second;
            for(int i=0;i<g[qv].size();i++)
            {
                int tc = g[qv][i].first;
                int cost = g[qv][i].second+dist[qv];
                if(dist[tc] > cost)
                {
                    S.erase(mp(dist[tc],tc));
                    dist[tc] = cost;
                    S.insert(mp(dist[tc],tc));
                }
            }
            
        }
        int q;
        cin >> q;
        while(q--)
        {
            int a,b;
            cin >> a >> b;
            int rem = b-dist[a]*2;
            if(rem < 0)
                rem = 0;
            cout << rem << endl;
        }
    }
   
   
    
    return 0;
}

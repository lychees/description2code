#include<bits/stdc++.h>
using namespace std;
struct node
{
	int west,east,north,south;
}tree[3000000];
int lazy[3000000];
void build(int ind,int b,int e)
{
	if(b==e)
	{
		tree[ind].east=1;
		tree[ind].west=tree[ind].north=tree[ind].south=0;
		return;
	}
	int mid=(b+e)/2;
	build(ind*2,b,mid);
	build(ind*2+1,mid+1,e);
	tree[ind].east=tree[ind*2].east+tree[ind*2+1].east;
	tree[ind].west=tree[ind].north=tree[ind].south=0;
}
void update(int ind,int b,int e,int x,int y,int dir)
{
	if(lazy[ind]!=0)
	{
		if(lazy[ind]==3 || lazy[ind]==-1)
		{
			int e=tree[ind].east,w=tree[ind].west,s=tree[ind].south,n=tree[ind].north;
			tree[ind].east=s;
			tree[ind].north=e;
			tree[ind].west=n;
			tree[ind].south=w;
		}
		else if(lazy[ind]==-3 || lazy[ind]==1)
		{
			int e=tree[ind].east,w=tree[ind].west,s=tree[ind].south,n=tree[ind].north;
			tree[ind].east=n;
			tree[ind].north=w;
			tree[ind].west=s;
			tree[ind].south=e;
		}
		else if(lazy[ind]==2 || lazy[ind]==-2)
		{
		    int e=tree[ind].east,w=tree[ind].west,s=tree[ind].south,n=tree[ind].north;
			tree[ind].east=w;
			tree[ind].north=s;
			tree[ind].west=e;
			tree[ind].south=n;   
		}
		if(b!=e)
		{
			lazy[ind*2]=(lazy[ind]+lazy[ind*2])%4;
			lazy[ind*2+1]=(lazy[ind]+lazy[ind*2+1])%4;
		}
		lazy[ind]=0;
	}
	if(b>y || e<x)
		return;
	if(b>=x && e<=y)
	{
		if(dir==-1 || dir==3)
		{
			int e=tree[ind].east,w=tree[ind].west,s=tree[ind].south,n=tree[ind].north;
			tree[ind].east=s;
			tree[ind].north=e;
			tree[ind].west=n;
			tree[ind].south=w;
		}
		else if(dir==1 || dir==-3)
		{
			int e=tree[ind].east,w=tree[ind].west,s=tree[ind].south,n=tree[ind].north;
			tree[ind].east=n;
			tree[ind].north=w;
			tree[ind].west=s;
			tree[ind].south=e;
		}
		else if(dir==2 || dir==-2)
		{
		    int e=tree[ind].east,w=tree[ind].west,s=tree[ind].south,n=tree[ind].north;
			tree[ind].east=w;
			tree[ind].north=s;
			tree[ind].west=e;
			tree[ind].south=n;
		}
		if(b!=e)
		{
			lazy[ind*2]=(dir+lazy[ind*2])%4;
			lazy[ind*2+1]=(dir+lazy[ind*2+1])%4;
		}
		return;
	}
	int mid=(b+e)/2;
	update(ind*2,b,mid,x,y,dir);
	update(ind*2+1,mid+1,e,x,y,dir);
	tree[ind].east=tree[ind*2].east+tree[ind*2+1].east;
	tree[ind].west=tree[ind*2].west+tree[ind*2+1].west;
	tree[ind].north=tree[ind*2].north+tree[ind*2+1].north;
	tree[ind].south=tree[ind*2].south+tree[ind*2+1].south;
}
node query(int ind,int b,int e,int x,int y)
{
	if(b>y || e<x)
	{
		node kuchni;
		kuchni.east=0;
		kuchni.west=0;
		kuchni.south=0;
		kuchni.north=0;
		return kuchni;
	}
    if(lazy[ind]!=0)
	{
		if(lazy[ind]==3 || lazy[ind]==-1)
		{
			int e=tree[ind].east,w=tree[ind].west,s=tree[ind].south,n=tree[ind].north;
			tree[ind].east=s;
			tree[ind].north=e;
			tree[ind].west=n;
			tree[ind].south=w;
		}
		else if(lazy[ind]==-3 || lazy[ind]==1)
		{
			int e=tree[ind].east,w=tree[ind].west,s=tree[ind].south,n=tree[ind].north;
			tree[ind].east=n;
			tree[ind].north=w;
			tree[ind].west=s;
			tree[ind].south=e;
		}
		else if(lazy[ind]==2 || lazy[ind]==-2)
		{
		    int e=tree[ind].east,w=tree[ind].west,s=tree[ind].south,n=tree[ind].north;
			tree[ind].east=w;
			tree[ind].north=s;
			tree[ind].west=e;
			tree[ind].south=n;   
		}
		if(b!=e)
		{
			lazy[ind*2]=(lazy[ind]+lazy[ind*2])%4;
			lazy[ind*2+1]=(lazy[ind]+lazy[ind*2+1])%4;
		}
		lazy[ind]=0;
	}
	if(b>=x && e<=y)
		return tree[ind];
	int mid=(b+e)/2;
	node left=query(ind*2,b,mid,x,y);
	node right=query(ind*2+1,mid+1,e,x,y);
	node res;
	res.east=left.east+right.east;
	res.west=left.west+right.west;
	res.north=left.north+right.north;
	res.south=left.south+right.south;
	return res;
}
int maxi(node a)
{
	int ye=a.east;
	if(a.south>ye)
		ye=a.south;
	if(a.west>ye)
		ye=a.west;
	if(a.north>ye)
		ye=a.north;
	return ye;
}
int main()
{
	memset(lazy,0,sizeof lazy);
	int n,m;
	cin>>n>>m;
	build(1,0,n-1);
	while(m--)
	{
		char c;
		cin>>c;
		if(c=='A')
		{
			int l,r,k;
			cin>>l>>r>>k;
			if(k%4!=0)
				update(1,0,n-1,l-1,r-1,k%4);
			//cout<<tree[1].east<<" "<<tree[1].south<<" "<<tree[1].west<<" "<<tree[1].north<<endl;
		}
		else if(c=='C')
		{
			int l,r,k;
			cin>>l>>r>>k;
			if(k%4!=0)
				update(1,0,n-1,l-1,r-1,(-1)*(k%4));
			//cout<<tree[1].east<<" "<<tree[1].south<<" "<<tree[1].west<<" "<<tree[1].north<<endl;
		}
		else if(c=='Q')
		{
			int l,r;
			cin>>l>>r;
			node ans=query(1,0,n-1,l-1,r-1);
			cout<<maxi(ans)<<endl;
		}
	}
}

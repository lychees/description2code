#include<bits/stdc++.h>
#define DIST(x1,x2, y1, y2) (((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2)))
#define DIST3D(x1,x2, y1, y2, z1, z2) (((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2)) + ((z1-z2)*(z1-z2)))
#define CLR(a) a.clear()
#define VCLR(a, n) for(int i=0; i<=n+3; i++) a[i].clear()
#define SIZE(a) a.size()
#define ERASE(a, b) memset(a, b, sizeof a)
#define pb push_back
#define LL long long
#define ULL unsigned long long
#define DBG cout<<"I Am Here"<<endl
#define DBGA(a) cout<<a<<endl
#define DBGI(b,a) cout<<b<<' '<<a<<endl
#define DBGL(i,s,e,b) or(int i=s; i<=e; i++) cout<<b<<endl
#define INF 1e9
#define INV 1e-6
#define sc(a) scanf("%I64d", &a)
#define pr(a) printf("%I64d\n", a)
#define si(a) scanf("%d", &a)
#define pii pair<int,int>
#define PII pair<LL,LL>
#define MAX 600005
#define CASE(i) printf("Case %d:", i);
#define PI acos(-1)
#define piis pair<int, string>
#define fast1 ios_base::sync_with_stdio(false);
#define fast2 cin.tie(0)
#define CHECK_BIT(var,pos) ((var & (1 << pos)) == (1 << pos))
#define LOOP(i, b, n) for(i=b; i<=n; i++)
#define nl puts("")

using namespace std;

/** ---------------------------------------------- **/
/** Header And Defintions Ends Here. **/
/** ---------------------------------------------- **/

const double GRS = (1 + sqrt(5))/2;

LL power(int X, int P)
{
    LL ans = 1;
    for(int i=1; i<=P; i++){
        ans = ans * (LL)X;
    }
    return ans;
}

LL ABS(LL A, LL B)
{
    LL ret = A - B;
    if(ret<0) return -ret;
    return ret;
}

LL MOD = 1000000007;

LL bigmod(LL a, LL b){
    LL x = 1, y = a%MOD;
    while(b > 0) {
        if(b%2 == 1) {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}

LL MODINVERSE(LL a){
    return bigmod(a, MOD-2);
}

LL ncrdp[900][1000];
LL NCR(int n, int r)
{
    if(r==1) return n;
    else if(n==r) return 1;
    else
    {
        if(ncrdp[n][r]!=-1) return ncrdp[n][r];
        else
        {
            ncrdp[n][r]=NCR(n-1,r) + NCR(n-1,r-1);
            return ncrdp[n][r];
        }
    }
}

const int MAXN = 105;
int status[(MAXN/32)+10];
vector<int>primelist;

bool check(int n, int pos) { return (bool)(n & (1<<pos)); }
int SET(int n, int pos){ return n=n|(1<<pos);}

void sieve()
{
    int sqrtN=int (sqrt(MAXN));
    status[1>>5]=SET(status[1>>5],1&31);
    for(int j=4; j<=MAXN; j=j+2)
        status[j>>5]=SET(status[j>>5],j&31);
    for(int i=3; i<=sqrtN; i=i+2)
    {
        if(check(status[i>>5],i&31)==0)
        {
            for(int j=i*i; j<=MAXN; j= j + (i<<1))
            {
                status[j>>5]=SET(status[j>>5],j&31);
            }
        }
    }
    primelist.push_back(2);
    for(int i=3; i<=MAXN; i=i+2)
    {
        if(check(status[i>>5],i&31)==0) {
            primelist.push_back(i);
        }
    }
}


/**----------------------------------------------------------------------------**/
/** Template Ends Here. Main Function And User Defined Functions Starts Here. **/
/**--------------------------------------------------------------------------**/

struct data{
    int x, y , idx;
    friend bool operator < (const data &A, const data &B)
    {
        if(A.x!=B.x) return A.x<B.x;
        if(A.y!=B.y) return A.y<B.y;
        return false;
    }

    friend int distance(const data &A, const data &B)
    {
        return min(abs(A.x-B.x), abs(A.y-B.y));
    }
};

data arr[100005], brr[100005];
bool cmp_X(data A, data B)
{
    return A.x<B.x;
}

bool cmp_Y(data A, data B)
{
    return A.y<B.y;
}

struct edge{
    int idx_a, idx_b;
    int cost;

    edge (int i, int j): idx_a(i), idx_b(j)
    {
        cost = distance(brr[idx_a], brr[idx_b]);
    }

    friend bool operator < (const edge &A, const edge &B)
    {
        return A.cost<B.cost;
    }
};

vector<edge>vec;
int father[100005];

int parent(int idx)
{
    if(father[father[idx]]!=father[idx]){
        father[idx] = parent(father[idx]);
    }
    return father[idx];
}

int main()
{
    int n;
    scanf("%d", &n);
    for(int i=1; i<=n; i++)
    {
        int x, y;
        scanf("%d %d", &x, &y);
        arr[i].x = x, arr[i].y = y, arr[i].idx = i;
        brr[i] = arr[i];
    }

    sort(arr+1, arr+n+1, cmp_X);
    for(int i=1; i<n; i++){
        vec.push_back(edge(arr[i].idx, arr[i+1].idx));
    }
    sort(arr+1, arr+n+1, cmp_Y);
    for(int i=1; i<n; i++){
        vec.push_back(edge(arr[i].idx, arr[i+1].idx));
    }

    sort(vec.begin(), vec.end());

    int sz = vec.size();
    for(int i=1; i<=100005; i++){
        father[i] = i;
    }
    LL tot = 0;

    for(int i=0; i<sz; i++)
    {
        int index_a = parent(vec[i].idx_a);
        int index_b = parent(vec[i].idx_b);
        if(index_a!=index_b)
        {
            father[index_a] = index_b;
            tot = tot + vec[i].cost;
        }
    }
    printf("%lld", tot);
    return 0;
}

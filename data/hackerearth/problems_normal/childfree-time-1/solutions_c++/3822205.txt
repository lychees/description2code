#include<iostream>
#include<utility>
#include<vector>
#include<queue>

using namespace std;
typedef pair<int, int> ii;
typedef vector<ii> vii;
vector<vii> Graph;
vector<int> indeg;
vector<long long> dp;
int main() {
  int R, P;
  cin >> R >> P;
  Graph.assign(R + 1, vii());
  indeg.assign(R + 1, 0);
  dp.assign(R + 1, 0);
  while(P--) {
    int r1, r2, t;
    cin >> r1 >> r2 >> t;
    Graph[r2].push_back(make_pair(r1,t));
    indeg[r1]++;
  }
  queue<int> Q;
  for (int i = 1; i <= R; i++) {
    if (!indeg[i]){
      Q.push(i);
      dp[i] = 0;
    }
  }
  while (!Q.empty()) {
    int u = Q.front();
    Q.pop();
    for (int i = 0; i < Graph[u].size(); i++) {
        int w = Graph[u][i].first;
        dp[w] = max(dp[w], dp[u] + Graph[u][i].second + 2);
        indeg[w]--;
        if (!indeg[w])
            Q.push(w);
    }
  }
  long long ans = 0;
  for (int i = 1; i <= R; i++)
    ans = max(ans, dp[i]);
  cout<<ans<<endl;
}

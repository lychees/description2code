#include <cstdio>
#include <bits/stdc++.h>
//using namespace std;
int isAvailable(int grid[9][9], int row, int col, int val)
{
	int i=0,j=0;
    for(i=0;i<9;i++)
    {
    	if(grid[row][i]==val ||grid[i][col]==val )
    	{
    		return 0;
    	}
    }
    
    for(i=(row/3)*3;i<((row/3)*3)+3;i++)
    {
     for(j=(col/3)*3;j<((col/3)*3)+3;j++)
       {
    	if(grid[i][j]==val)
    	{
    		return 0;
    	}
       }
    }
    return 1;
}
int main()
{
    int N=0;
    scanf("%d",&N);
    int count=0;
    while(N--)
    {
    	int i=0,j=0,val=1,k,l,m;
    	int grid[9][9],copy[9][9];
        memset(grid,0,sizeof(grid));
        memset(copy,0,sizeof(copy));
    	while(i<9)
    	{
    			
    		char row[10];
    		
    		scanf("%s",row);
    		
    		for(j=0;j<9;j++)
    		{
    		 grid[i][j]=(int)(row[j])-48;	
    		}
    		
    		i++;
    	}
    for(i=0;i<9;i++)
      {
      	for(j=0;j<9;j++)
    	{
    		val=1;
    		
    		if(grid[i][j]==0)
    		{   
    			restart:
    			if(isAvailable(grid,i,j,val))
    			{
    			 
    			 grid[i][j]=val;
    		    copy[i][j]=1;
    		    continue;	
    			}
    			else
    			{
    				try_next_val:
    				if(val<9)
    				{
    					val++;
    				   goto	restart;
    				}
    				else
    				{  
    					grid[i][j]=0;
    					copy[i][j]=0;
    					l=0;
    					find_last_assigned_in_row:
    				
    					for(k=0;k<9;k++)
    					{
    					 if(copy[i][k]==1)
    					 {
    					  m=k;
    					  l++;
    					 }
    					}
    					if(l==0)
    					{
    						i--;
    						goto find_last_assigned_in_row;
    					}
    					val=grid[i][m];
    					grid[i][m]=0;
    					copy[i][m]=0;    					
    					j=m;
    					goto try_next_val;
    				}
    			}
    		 
    		}
    		
    	}
      }
    for(i=0;i<9;i++)
    {
    	count=count+grid[i][i];
    }
    }
    	printf("%d\n",count);
    return 0;
}






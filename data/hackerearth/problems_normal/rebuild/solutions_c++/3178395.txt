#include<bits/stdc++.h>
#define ll long long
using namespace std;
int id[50001];
int root( int a ){
 if(id[a] == a)
 return a;
 else
 return id[a] = root(id[a]);
}
void Merge( int  a , int b){
  id[b] = a;
}
int main(){

     cin.sync_with_stdio(false);
     int t;
     cin >> t;
     while( t-- ){
        int n , m ;
        cin >> n >> m;
        for(int i = 0 ; i <= n;  ++i ){
          id[i] = i;
         }
       set< pair<int,pair<int,int> > > s;
        set< pair<int,pair<int,int> > >::iterator it;
       map< pair<int,int> ,int > my;
       while( m-- ){
         int u , v , c;
         cin >> u >> v >> c;
         if(u>v)
         swap( u , v);
         if( u != v ){
          if(my[{-u,-v}] == 0){
          s.insert({c,{-u,-v}});
          my[{-u,-v}] = c;
          }
          else {
          int cost = my[{-u,-v}];
          if(c < cost){
          my[{-u,-v}]  = c;
          s.erase(s.find({cost,{-u,-v}}));
          s.insert({c,{-u,-v}});
          }
        }
      }
     }
       int deg[n+1];
       memset(deg , 0 , sizeof deg);
       ll ans = 0;
     for( it = s.begin() ; it != s.end() ; ++it ){
       int cost = (*it).first;
       int u = -(*it).second.first;
       int v = -(*it).second.second;
       int x = root(u);
       int y = root(v);
       if( x != y){
         Merge(x,y);
        deg[u]++;
        deg[v]++;
        ans += cost;
       }
     }
     cout << ans << endl;
     for(int i = 1 ; i <= n ; ++i )
     cout << deg[i] <<" ";
     cout << endl;

    }

}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
 
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> VI;
typedef list<int> LI;

#define Sd(x) scanf("%d",&x)
#define ALL(x) x.begin(), x.end()
#define FOR(i,n) for(i=0;i<(n);++i)
#define FORV(i,x) for(i=0;i<x.size();++i)
#define FORS(i,x) for(i=0;i<x.length();++i)
#define UMAX(m,x) if(x>m) m=x;
#define UMIN(m,x) if(x<m) m=x;
#define pb push_back
#define mp make_pair

LI graph[900];
int dst[900];
bool spt[900];
int start,dest;

void bfs()
{
	int u;
	memset(spt,false,sizeof(spt));
	LI queue;
	queue.pb(start);
	spt[start]=true;
	dst[start]=0;
	while(!queue.empty())
	{
		u=queue.front();
		queue.pop_front();
		for(list<int>::iterator it=graph[u].begin();it!=graph[u].end();++it)
		{
			if(!spt[*it] && *it!=u)
			{
				queue.pb(*it);
				dst[*it]=dst[u]+1;
				spt[*it]=true;
			}
		}
	}
	/*FORM(i,v)
	graph[i].clear();*/
}

int main()
{
	int n,i,j;
	char a[35][35];
	Sd(n);
	FOR(i,n)
		FOR(j,n)
		{
			scanf(" %c",&a[i][j]);
			if(a[i][j]=='S')
				start=i*n+j;
			if(a[i][j]=='E')
				dest=i*n+j;
		}
	//printf("%d \n%d\n",start,dest);
	FOR(i,n)
		FOR(j,n)
		{
			//printf("%c\n",a[i][j]);
			if(a[i][j]!='T')
			{
			if(i!=(n-1))
			{
				if(a[i+1][j]!='T')
					graph[i*n+j].pb((i+1)*n+j);
			}
			if(i!=0)
			{
				if(a[i-1][j]!='T')
				{
					graph[i*n+j].pb((i-1)*n+j);
				}
			}
			if(j!=0)
			{
				if(a[i][j-1]!='T')
					graph[i*n+j].pb(i*n+j-1);
			}
			if(j!=(n-1))
			{
				if(a[i][j+1]!='T')
					graph[i*n+j].pb(i*n+j+1);
			}
			}
		}
	bfs();
	/*FOR(i,n*n)
	{
		for(LI::iterator it=graph[i].begin();it!=graph[i].end();++it)
		{
			printf("%d\t",*it);
		}
		printf("\n");
	}*/
	printf("%d\n",dst[dest]);
	return 0;
}

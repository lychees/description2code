#include<iostream>
#include<vector>
#include<cstring>
#include<queue>
using namespace std;

int bfs(vector<int> vec[],bool visited[],int s)
{

    int level1 = 0;
    int level2 = 0;
    queue<int> q;
    q.push(s);
    int p;
    level1++;
    int flag[20004];
    flag[s]=1;
    visited[s]=true;
    //cout<<"S"<<endl;
    //cout<<q.size()<<endl;
    while(!q.empty())
    {
        //cout<<q.size()<<endl;
        p=q.front();
        q.pop();
        //cout<<"P"<<' '<<p<<' '<<flag[p]<<endl;
        for(int i=0;i<vec[p].size();i++)
        {
            //cout<<'d'<<' '<<vec[p][i]<<endl;//' '<<visited[vec[p][i]]<<endl;
            if(visited[vec[p][i]]==false)
            {
                if(flag[p] == 1)
                {
                //    cout<<vec[p][i]<<endl;
                    level2++;
                    flag[vec[p][i]]=flag[p]*-1;
                }
                else
                {
                    level1++;
                    flag[vec[p][i]]=flag[p]*-1;
                }
                visited[vec[p][i]]=true;
                q.push(vec[p][i]);
            }
            //

        }
        //cout<<"levels"<<' '<<level1<<' '<<level2<<endl;
    }
    return max(level1,level2);
}
using namespace std;
int main()
{
    ios::sync_with_stdio(false);
    int t,n;
    cin>>t;
    int x = 1;
    while(t--)
    {
        cin>>n;
        vector<int> vec[20005];
        int a,b;
        int check[20005];
        memset(check,0,sizeof(check));
        for(int i=0;i<n;i++)
        {
            cin>>a>>b;
            vec[a].push_back(b);
            vec[b].push_back(a);
            check[a]=check[b]=1;

          //  cout<<a<<' '<<b<<endl;
        }
        //cout<<"M"<<endl;
        bool visited[20005];
        memset(visited,false,sizeof(visited));
        /*for(int i=0;i<2000;i++)
        {
            if(vec[i].size()>0)
            {
                for(int j=0;j<vec[i].size();j++)
                    cout<<vec[i][j]<<' ';
                cout<<endl;
            }
        }*/
        int total= 0;
        for(int i=0;i<20004;i++)
        {
            if(visited[i]==false&&check[i]==1)
                total+=bfs(vec,visited,i);
        }
        cout<<"Case "<<x++<<": "<<total<<endl;
    }
}

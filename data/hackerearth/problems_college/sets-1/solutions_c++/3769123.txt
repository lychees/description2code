/* My First Template  
   :P
*/
#include <bits/stdc++.h>
using namespace std;
#define M 1000000007
#define lli long long int
#define pb push_back
#define mk make_pair

int A[500005];
lli pow2[500005];
void pre()
{
    pow2[0] = 1;
    for ( int i = 1; i <= 500001; i++ ) {
        pow2[i] = pow2[i-1] + pow2[i-1];
        if ( pow2[i] >= M ) pow2[i] -= M;
    }
    return;
}
int main()
{
    pre();
    int n,q,x;
    char s[2];
    scanf("%d%d", &n, &q);
    assert(n<=500000);
    assert(q<=500000);
    for ( int i = 0; i < n; i++ ) {
        scanf("%d", &A[i]);
        assert(A[i] >= 1 && A[i]<=1000000000);
    }
    sort(A,A+n);
    while ( q-- ) {
        scanf("%s%d", &s, &x);
        assert(x>=1&&x<=1000000000);
        if ( s[0] == '=' ) {
            int idx2 = upper_bound(A,A+n,x) - A;
            idx2--;
            int idx1 = lower_bound(A,A+n,x) - A;
            if ( idx1 == n || A[idx1] > x ) {
                printf("0\n");
                continue;
            }
            lli ans1 = pow2[idx1];
            lli ans2 = pow2[idx2-idx1+1] - 1;
            if ( ans2 < 0 ) ans2 += M;
            printf("%lld\n", (ans1*ans2)%M);
        }
        else if ( s[0] == '<' ) {
            int idx = lower_bound(A, A+n, x) - A;
            idx--;
            lli ans1;
            ans1 = pow2[idx+1];
            printf("%lld\n", ans1);
        }
        else {
            int idx = upper_bound(A,A+n,x) - A;
            lli ans1 = pow2[idx];
            lli ans2 = pow2[n-idx] - 1;
            if ( ans2 < 0 ) ans2 += M;
            printf("%lld\n", (ans1*ans2)%M);
        }
    }
    return 0;
}
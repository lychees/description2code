using namespace std;
#include<bits/stdc++.h>

#define BG begin()
#define ED end()
#define st first
#define nd second
#define PB push_back
#define PF push_front
#define FOR(i,a,b) for (long long i=a;i<b;i++)
#define FORE(i,a,b) for (long long i=a;i<=b;i++)
#define FORD(i,a,b) for (long long i=a;i>=b; i--)
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define ri(n)({\
    int neg=0;\
    n=0;\
    char ch;\
    for(ch=getchar(); ch<'0' || ch>'9'; ch=getchar()) if (ch=='-') neg=1-neg;\
    n=ch-48;\
    for(ch=getchar(); ch>='0' && ch<='9'; ch=getchar()) n=(n<<3)+(n<<1)+ch-48;\
    if (neg) n=-n;\
})

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> II;
typedef pair<ll,ll> LL;
const ll INF=1000000000+7;
const double esp=1e-13;
const double pi=3.141592653589;

struct node{
    int l,r,vt;
    ll gt;
};

struct node2{
    int sl;
    ll val[120];
};

map<ll,int> f;
map<ll,bool> ff;
map<ll,bool>::iterator it;
string s;
int n,q,n2,L,R,curL,curR,ans[500000+10],dem;
ll value;
node2 giatri[10000+10];
node a[500000+10];

bool cmp(node a, node b){
    if (a.l/n2!=b.l/n2) return a.l/n2<b.l/n2;
    return a.r<b.r;
}

void add(int i){
    FORE(j,1,giatri[i].sl) f[ giatri[i].val[j] ]++;
}

void rem(int i){
    FORE(j,1,giatri[i].sl) f[ giatri[i].val[j] ]--;
}

int main(){
 //   freopen("substrings-count-3.inp", "r", stdin);
 //   freopen("substrings-count-3.out", "w", stdout);
    cin >> n;
    FORE(i,1,n){
        cin >> s;
        ff.clear();
        FOR(j,0,s.length())
        FOR(k,j,s.length()){
            value=0;
            FORE(t,j,k) value=value*28+s[t]-'a'+1;
            ff[value]=true;
        }
        dem=0;
        for(it=ff.BG; it!=ff.ED; it++) giatri[i].val[++dem]=it->st;
        giatri[i].sl=dem;
    }

    n2=(int)sqrt(n);
    cin >> q;
    FORE(i,1,q){
        cin >> a[i].l >> a[i].r >> s;
        value=0;
        FOR(j,0,s.length()) value=value*28+s[j]-'a'+1;
        a[i].gt=value;
        a[i].vt=i;
    }
    sort(a+1,a+q+1,cmp);
    curL=curR=1;
    add(1);
    FORE(i,1,q){
        L=a[i].l;
        R=a[i].r;
        while (curL<L){
            rem(curL);
            curL++;
        }
        while (curL>L){
            curL--;
            add(curL);
        }
        while (curR>R){
            rem(curR);
            curR--;
        }
        while (curR<R){
            curR++;
            add(curR);
        }
        ans[a[i].vt]=f[ a[i].gt];
    }
    FORE(i,1,q) printf("%d\n", ans[i]);
}

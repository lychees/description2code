#include<iostream>
#include<vector>
#include<queue>
#define LEVELS 20
using namespace std;
void BFS(vector<int>& tree,vector<int>& level,vector<queue<int> >& print_util,int n)
{
    int i,j,curr;
    queue<int> bfs;
    level[0]=1;
    bfs.push(0);
    while(!bfs.empty()){
        curr=bfs.front();
        bfs.pop();
        print_util[level[curr]].push(curr);
        if(2*curr+1<n && tree[2*curr+1]){
            level[2*curr+1]=level[curr]+1;
            bfs.push(2*curr+1);
        }
        if(2*curr+2< n &&tree[2*curr+2]){
            level[2*curr+2]=level[curr]+1;
            bfs.push(2*curr+2);
        }
    }

}
void print_queue(vector<int>& tree,vector<queue<int> >& print_util)
{

    int i,prev,curr;
    queue<int> left,right;
    for(i=0;i<LEVELS;i++)
    {
        if(print_util[i].empty())
            continue;
        curr=prev=print_util[i].front();
        print_util[i].pop();
        while(!print_util[i].empty())
        {
            curr=print_util[i].front();
            print_util[i].pop();
        }
        if(curr!=prev)
        {
            left.push(prev);
            right.push(curr);
        }
        else right.push(curr);
    }
    while(!right.empty())
    {
        cout<<tree[right.front()]<<endl;
        right.pop();
    }
    while(!left.empty())
    {
        cout<<tree[left.front()]<<endl;
        left.pop();
    }
}
int main()
{
    int test,i,j,n;
    cin>>test;
    for(i=0;i<test;i++)
    {
        cin>>n;
        vector<int> tree(n);
        vector<int> level(n);
        vector<queue<int> >print_util(LEVELS);
        for(j=0;j<n;j++)
            cin>>tree[j];
        BFS(tree,level,print_util,n);
        print_queue(tree,print_util);
        cout<<endl;
    }
    return 0;
}

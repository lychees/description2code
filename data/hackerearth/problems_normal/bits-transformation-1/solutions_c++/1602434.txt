#define _USE_MATH_DEFINES
#include <algorithm>
#include <cstdio>
#include <functional>
#include <iostream>
#include <cfloat>
#include <climits>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <time.h>
#include <vector>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> i_i;
typedef pair<ll, int> ll_i;
typedef pair<double, int> d_i;
typedef pair<ll, ll> ll_ll;
typedef pair<double, double> d_d;
struct edge { int u, v; ll w; };

ll MOD = 1000000007;
ll _MOD = 1000000009;
double EPS = 1e-10;
int INF = INT_MAX / 2;

int main() {
	int T; cin >> T;
	while (T--) {
		int N, x, y, z, t;
		cin >> N >> x >> y >> z >> t;
		string A, B;
		cin >> A >> B;
		vector<int> b;
		for (int i = 0; i < N; i++)
			if (B[i] == '1')
				b.push_back(i);
		int n = b.size();
		vector<int> dp(n + 1, INF);
		dp[0] = 0;
		for (int i = 0; i < N; i++) {
			vector<int> _dp(n + 1, INF);
			char c = A[i];
			int c0, c1;
			if (c == '0') c0 = 0, c1 = x;
			if (c == '1') c0 = y, c1 = 0;
			if (c == '?') c0 = c1 = z;
			for (int j = 0; j <= n; j++)
				_dp[j] = min(_dp[j], dp[j] + c0);
			for (int j = 0; j + 1 <= n; j++)
				_dp[j + 1] = min(_dp[j + 1], dp[j] + c1 + t * abs(b[j] - i));
			dp = _dp;
		}
		cout << dp[n] << endl;
	}
}
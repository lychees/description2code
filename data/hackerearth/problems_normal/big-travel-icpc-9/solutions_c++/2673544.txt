#include <bits/stdc++.h>
using namespace std;
#define gc getchar_unlocked
#define pc putchar_unlocked
#define INF 10001000100
#define mod 1000000007

typedef long long int ll;
typedef unsigned long long llu;
typedef long double ld;

#define F first
#define S second
#define set(xx,value) memset(xx,value,sizeof(xx))
#define pb push_back
#define mk make_pair
#define pp pop_back
#define sq(A) ((A)*(A))
#define len(vale) strlen(vale) 
#define sz(vale) (int)vale.size() 
#define f(i12,fa,fb) for(i12=fa;i12<fb;i12++)
#define fd(i12,fa,fb) for(i12=fa;i12>fb;i12--)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)
//#define debug(args...) do {cerr << #args << ": "; DBG,args; cerr << endl;} while(0)
#define bits(vale) __builtin_popcount(vale)

#define set1(array,val,sz) for(int i13=0;i13<sz;i13++)array[i13]=val;
#define set2(array,val,sz) for(int i13=0;i13<sz;i13++)for(int i14=0;i14<sz;i14++)array[i13][i14]=val;

#define all(a) a.begin(),a.end()
#define lb(a,x) (lower_bound(all(a),x)-a.begin())
#define ub(a,x) (upper_bound(all(a),x)-a.begin())

#define exectime() cout<<"execution time ="<<(double)(clock() - tStart)/CLOCKS_PER_SEC<<endl;

#define TRACE
#ifdef TRACE
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)

#endif

// IO
#define si(vale) scanf("%d",&vale)
#define pi(vale) printf("%d\n",vale)
#define sl(vale) scanf("%lld",&vale)
#define pl(vale) printf("%lld\n",vale)
#define ss(vale)  scanf("%s",vale);
#define ps(vale) printf("%s\n",vale);
#define sd(vale) scanf("%lf",&vale)
#define sld(vale) scanf("%Lf",&vale)
#define pld(vale) printf("%0.12Lf\n",vale)
#define sc(vale) scanf("%c",&vale)

// fast IO
/*inline void sif(int &x){x=0;register char c=gc();int neg=0;while((c<'0'|| c>'9') && c!='-')c=gc();
  if(c=='-') {neg=1; c=gc();}for(;c>='0' && c<='9';c=gc()){x=(x<<1)+(x<<3)+c-48;}if(neg==1)x=-x;}
  inline void pif(int n){register int i=0;char ch[20];if(n<=0)if(n==0) pc('0');else pc('-'),n=n*(-1);while(n>0)
  {ch[i]=n%10 +'0';n=n/10;i++;}while(i>0){pc(ch[i-1]);i--;}pc('\n');}
  inline void ssf(char *s){char ch;ch=gc();register int i=0;while((ch>=32)&&(ch<=110)){s[i++]=ch;ch=gc();}s[i]='\0';}
  inline void psf(char *s){int i=0;while(s[i]>=32 && s[i]<=127){pc(s[i]);i++;}pc('\n');}
 */

void io()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
}

typedef pair<int,int> pr;
typedef vector<int> vt;

#define tcs() int testcase; scanf("%d",&testcase);while(testcase--) 
bool deb=false;
const int N=200011;
ll px[N];
ll py[N];
ll nx[N];
ll ny[N];

int main(){
    // io();
    //clock_t tStart = clock();
    ll i,j,n,x,y;
    //tcs()
    sl(n);
    ll ipx=0,ipy=0,inx=0,iny=0;
    f(i,0,n)
    {
        sl(x),sl(y);
        if(x<0)
            nx[inx++]=-x;
        else
            px[ipx++]=x;
        if(y<0)
            ny[iny++]=-y;
        else
            py[ipy++]=y;
    }
    //trace4(inx,ipx,iny,ipy);
    
    sort(nx,nx+inx);
    sort(ny,ny+iny);
    sort(px,px+ipx);
    sort(py,py+ipy);

    ll sm=0,ct=ipx-1;
    fd(i,ipx-1,-1)
    {
        sm=(sm+px[i]*ct)%mod;
        ct-=2;
        //trace2(sm,ct);
    }
    
    ct=inx-1;
    fd(i,inx-1,-1)
    {
        sm=(sm+nx[i]*ct)%mod;
        ct-=2;
        //trace2(sm,ct);
    }

    ct=ipy-1;
    fd(i,ipy-1,-1)
    {
        sm=(sm+py[i]*ct)%mod;
        ct-=2;
    }

    ct=iny-1;
    fd(i,iny-1,-1)
    {
        sm=(sm+ny[i]*ct)%mod;
        ct-=2;
    }
    
    ll nsum=0;
    f(i,0,inx)
        nsum=(nsum+nx[i])%mod;
    
    f(i,0,ipx)
    {
        sm=(sm%mod +(px[i]*(inx))%mod+nsum%mod )%mod;
    }
         

    nsum=0;
    f(i,0,iny)
        nsum=(nsum+ny[i])%mod;
    
    f(i,0,ipy)
    {
        sm=(sm%mod +(py[i]*(iny))%mod + nsum%mod)%mod;
    }
    
    pl(sm);
    //exectime();
    return 0;
} 

#include <iostream>
#include <map>
#include <cmath>
using namespace std;

typedef long long LL;
const int MOD = (1e9) + 7;

map<LL, int> dp;
LL p(LL a,LL e,LL m)
{
	LL ret = 1LL;
	while (e) {
		if (e & 1) {
			ret *= a;
			ret %= m;
		}
		a *= a;
		a %= m;
		e = e >> 1;
	}
	return ret;
}
LL recurse(LL n) {
	if (n <= 2) {
		return 1;
	}
	if (dp.count(n)) {
		return dp[n];
	}
	n--;
	int ub = sqrt(n);
	LL r = 1; // for all 1
	for (int i = 2; i <= ub; i++) {
		if (n % i) {
			continue;
		}
		r += p(recurse(i), n / i, MOD);
		if (i != n / i) {
			r += p(recurse(n / i), i, MOD);
		}
		r %= MOD;
	}
	return dp[n + 1] = r;
}
int main()
{
    LL n;
    cin >> n;
    cout << recurse(n);
    return 0;
}

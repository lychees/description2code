#include <iostream>
using namespace std;
long long search (long long *arr, long long num, long long);

int
main ()
{
  int tc = 0;
  cin >> tc;
  string strarr[50];
  while (tc--)
    {
      long long N, M = 0;
      cin >> N >> M;
      for (long long i = 0; i < N; i++)
	{
	  cin >> strarr[i];
	  //cout << strarr[i]<<endl;;
	}
      long long arr[50];	//stores the lengths
      arr[0] = strarr[0].length ();
      //cout<<arr[0]<<endl;

      for (long long i = 1; i < N; i++)
	{
	  arr[i] = 2 * arr[i - 1] + strarr[i].length ();
	  //cout<<arr[i]<<endl;
	}
      string master;
      long long num = 0, ans = -1, index = -1, x = 0, y = 0;
      for (long long i = 0; i < M; i++)
	{
	  cin >> num;
	  num++;
	  //cout<<"Searching for the"<< num<<"th character\n";
	  while (ans == -1)
	    {
	      index = search (arr, num, N);
	      //cout<<"comparing with "<<arr[index]<<endl;
	      if (arr[index] - num < strarr[index].length ())	//<=3
		{
		  x = strarr[index].length () - (arr[index] - num + 1);
		  //cout<<"Yayyy!! just prlong long the "<<x<<"th character from the "<<index<<"th string\n";
		  ans = strarr[index][x];
		  break;
		}
	      else
		{
		  index--;
		  //cout<<"comparing with "<<arr[index]<<endl;
		  y = num - arr[index];
		  //cout<<"Old num= "<<num<<endl;
		  num = arr[index] - y + 1;
		  //cout<<"New num= "<<num<<endl;

		}

	    }
	  master.push_back (ans);
	  ans = -1;
	}
      //master.push_back ('\0');
      cout << master << endl;
    }
}

//find the number, if not found
//find the number just greater
long long
search (long long *arr, long long num, long long newn)
{
  long long i = -1;
  long long left = 0;
  long long right = newn - 1;
  long long middle = left + (right - left) / 2;

  while (left <= right)
    {
      middle = left + (right - left) / 2;
      ////cout << left << "\t" << right << "\t" << middle << endl;
      if (num > arr[middle])
	{
	  left = middle + 1;
	}
      else if (num < arr[middle])
	{
	  right = middle - 1;
	}
      else
	{
	  i = middle;
	  return i;		//break;
	}

    }
  return left;
}

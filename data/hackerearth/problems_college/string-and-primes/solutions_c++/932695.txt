#include <stdio.h>
#include <string.h>
#include <iostream>
#include <math.h>
 
using namespace std;

 bool arr[1000000];

// marks all mutiples of 'a' ( greater than 'a' but less than equal to 'n') as 1.
void markMultiples(bool arr[], int64_t a, int64_t n)
{
    int64_t i = 2, num;
    while ( (num = i*a) <= n )
    {
        arr[ num-1 ] = 1; // minus 1 because index starts from 0.
        ++i;
    }
}
 
// A function to print64_t all prime numbers smaller than n
void SieveOfEratosthenes(int64_t n)
{
    // There are no prime numbers smaller than 2
    if (n >= 2)
    {
        // Create an array of size n and initialize all elements as 0
       
 
        /* Following property is maint64_tained in the below for loop
           arr[i] == 0 means i + 1 is prime
           arr[i] == 1 means i + 1 is not prime */
        for (int64_t i=1; i<n; ++i)
        {
            if ( arr[i] == 0 )
            {
                //(i+1) is prime, print64_t it and mark its multiples
                //if(i<=100)  print64_tf("%d ", i+1);
                markMultiples(arr, i+1, n);
            }
        }
    }
}
 
int64_t n = 1000000;
// Driver Program to test above function

char s[100001];
char res[100001];

int main()
{
    memset(arr, 0, sizeof(arr));
    
    SieveOfEratosthenes(n);
    arr[0]=1;

    // cout<<sum[n-1]<<endl;
    int64_t T;
    cin>>T;
    while(T--)
    {
        scanf("%s",s);
        int m=strlen(s);
        int cnt=0;
        for(int i=0;i<m;i++)
        {
            int val=s[i];
            if(arr[val-1])  res[cnt++]=s[i];
        }
        if(cnt==m)  {printf("NULL\n");continue;}
        res[cnt]='\0';
        printf("%s\n",res);
    }
    return 0;
}
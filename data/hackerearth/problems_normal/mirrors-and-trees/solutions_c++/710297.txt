#include<iostream>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<map>
#include<string>
#include<vector>
#include<queue>
#include<cstring>
#include<cstdlib>
#include<cassert>
#include<cmath>
#include<stack>
#include<set>
#include<utility>
#define in_T int t;for(scanf("%d",&t);t--;)
#define cin(a) scanf("%d",&a)
#define in_F(a) scanf("%lf",&a)
#define in_L(a) scanf("%lld",&a)
#define in_S(a) scanf("%s",a)
#define newline printf("\n")
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a<b?a:b
#define SWAP(a,b) {int tmp=a;a=b;b=tmp;}
#define P_I(a) printf("%d",a)
#define ill long long
using namespace std;
#define pb push_back

#define mp make_pair

long long a[1000008];
bool vis[1000008],vis2[1000008];
int n;
void dfs(int node,int lev)
{
if(node>n||a[node]==0)
return;
if(!vis[node]&&!vis2[lev])
{
	//ans[lev].pb(a[node]);
	cout<<a[node]<<"\n";vis[node]=1;vis2[lev]=1;
}




dfs(2*node+1,lev+1);

dfs(2*node,lev+1);

}

void dfs2(int node,int lev)
{
if(node>n||a[node]==0)
return;
if(!vis[node]&&!vis2[lev])
{
	//	ans[lev].pb(a[node]);
vis[node]=1;vis2[lev]=1;
	cout<<a[node]<<"\n";
}


dfs2(2*node,lev+1);
dfs2(2*node+1,lev+1);
	return;
}


int main()
{
int t,m,i,j,k,l;
cin(t);

while(t--)
{
cin(n);

memset(vis,0,sizeof(vis));


for(i=1;i<=n;i++)
cin>>(a[i]);
memset(vis2,0,sizeof(vis2));
dfs(1,1);

memset(vis2,0,sizeof(vis2));
dfs2(1,1);
/*for(i=1;i<=n;i++)
{
	for(j=0;j<ans[i].size();j++)
	{
		cout<<ans[i][j]<<"\n";
	}
}*/
if(t)
cout<<"\n";
}


}
#include <bits/stdc++.h>
#define ll long long
#define mod 1000000007
#define upperlimit 100100
#define INF 1000000000
#define INFL 1000000000000000000
#define eps 1e-8
#define endl '\n'
#define sd(n) scanf("%d",&n)
#define slld(n) scanf("%lld",&n)
#define pd(n) printf("%d",n)
#define plld(n) printf("%lld",n)
#define pds(n) printf("%d ",n)
#define pllds(n) printf("%lld ",n)
#define pdn(n) printf("%d\n",n)
#define plldn(n) printf("%lld\n",n)
#define REP(i,a,b) for(i=a;i<=b;i++)
#define mp make_pair
#define pb push_back
#define pcc pair<char,char>
#define pii pair<int,int>
#define pll pair<ll,ll>
#define tr(container,it) for(typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define F first
#define S second

using namespace std;

ll gcd(ll n1,ll n2){
	if(n1%n2==0)return n2;
	return gcd(n2,n1%n2);
}
ll powmod(ll base,ll exponent)
{
	ll ans=1;
	while(exponent){
		if(exponent&1)ans=(ans*base)%mod;
		base=(base*base)%mod;
		exponent/=2;
	}
	return ans;
}
vector <int> factors[upperlimit+1];
int phi[upperlimit+1];
ll gsum(ll n,ll r){
	ll ret=(powmod(r,n)-1+mod)%mod;
	ret*=r;
	ret%=mod;
	ret*=powmod(r-1,mod-2);
	return (ret%mod);
}
ll f1(int n){
	if(n==1)return 1;
	ll ret=0;
	int i;
	for(i=0;i<factors[n].size();i++){
		int j=factors[n][i];
		ret+=(phi[j]*gsum(n/j,powmod(n,j)))%mod;
		ret%=mod;
	}
	return (ret%mod);
}
ll f2(int n){
	if(n==1)return 4;
	ll ret=0;
	int i;
	for(i=0;i<factors[n].size();i++){
		int j=factors[n][i];
		ret+=(phi[j]*gsum(n/j,powmod(2,j)))%mod;
		ret%=mod;
	}
	ret*=powmod(2,n);
	return (ret%mod);
}
ll f3(int n){
	ll ret=f1(n);
	ret*=powmod(n,mod-2);
	ret%=mod;
	ret*=phi[n];
	return (ret%mod);
}
int main()
{
	int t,i,j,n,q,q_type;
	for(i=1;i<=upperlimit;i++)phi[i]=i;
	for(i=2;i<=upperlimit;i++)if(phi[i]==i)for(j=i;j<=upperlimit;j+=i)phi[j]-=phi[j]/i;
	for(i=1;i<=upperlimit;i++)for(j=i;j<=upperlimit;j+=i)factors[j].pb(i);
	ll answer;
	sd(q);
	while(q--){
		sd(q_type);
		sd(n);
		if(q_type==1)answer=f1(n);
		if(q_type==2)answer=f2(n);
		if(q_type==3)answer=f3(n);
		plldn(answer);
	}
	return 0;
}

#include <iostream>
#include <algorithm>
#include <string>
#include <cstdio>
#include <cassert>
#include <cstring>

using namespace std;

long N, K, sum = 0, mod = 1E9 + 7;
long A[101];
long dp[101][100001];

long fast_exp(long b, long n)
{
	if(n == 0)
		return 1;
		
	if(n % 2 != 0)
		return (b * fast_exp(b, n-1)) % mod;
		
	long temp = fast_exp(b, n/2);
	return (temp * temp) % mod;
}

long solve(long start, long k)
{
	if(k < 0)
		return 0;
		
	long& ret = dp[start][k];
	
	if(start == N)
		ret = (0 <= k);
	
	if(ret != -1)
		return ret;
		
	long a = solve(start + 1, k - A[start]);
	long b = solve(start + 1, k);
	ret = (a + b) % mod;
	
	return ret;
}

int main()
{
	memset(dp, -1, sizeof(dp));
	
    scanf("%ld%ld", &N, &K);
    
    for(long i = 0; i < N; i++)
    {
    	scanf("%ld", &A[i]);
    	sum += A[i];
    }
   	
   	if(sum < 2 * K)
   		printf("%d\n", 0);
   	else
    {
	    long total_seq = fast_exp(2, N);
	    long invalid_seq = (2 * solve(0, K-1)) % mod;
	    //printf("%d\n", total_seq);
	    printf("%ld\n", (total_seq + mod - invalid_seq) % mod);
    }
    
    return 0;
}

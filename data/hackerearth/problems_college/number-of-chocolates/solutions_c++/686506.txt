//PROBLEM: COLLECTING MAGICAL BERRIES ( CODECHEF ) http://www.codechef.com/problems/COLLECT/
#include<iostream>
#include<cstdio>
#define MOD 3046201
#define MIN(x,y) (x<y?x:y)
#define MAX(x,y) (x>y?x:y)
using namespace std;
long long match[1000000];
long long segtree[2000000][3]={0};
int curmake;
int depth;
long long makesegment(int nodenow,int l, int r)
{

  //  cout<<" node "<<nodenow<<" for "<<l<<" to "<<r<<" at depth "<<depth<<endl;
    depth++;
    if(l==r)
    {
        segtree[nodenow][0]=match[l];
        segtree[nodenow][1]=-1;
        segtree[nodenow][2]=-1;

    }
    else
    {
        segtree[nodenow][1]=curmake;
        curmake++;
        makesegment(curmake-1,l,(l+r)/2);

        segtree[nodenow][2]=curmake;
        curmake++;
        makesegment(curmake-1,(l+r)/2+1,r);
        segtree[nodenow][0]=segtree[segtree[nodenow][1]][0]+segtree[segtree[nodenow][2]][0];

     //   cout<<" from "<<segtree[segtree[nodenow][1]][0] <<" and "<< segtree[segtree[nodenow][2]][0];
    }
   //cout<<"made node "<<nodenow<<" for element "<<l<< " to "<<r<<" its value is min"<<segtree[nodenow][0]<<endl;
    depth--;
     return segtree[nodenow][0];
}
long long findsum(int at,int atl,int atr,int l,int r)
{
    //printf("finding min in range %d %d at node %d target %d %d\n",atl,atr,at,l,r);
    long long a=0,b=0;
    if(atl==l  &&  atr==r)
        return segtree[at][0];
    if((atl+atr)/2>=l)
    a=findsum(segtree[at][1],atl,(atl+atr)/2,l,MIN(r,(atl+atr)/2));
    if((atl+atr)/2+1<=r)
    b=findsum(segtree[at][2],(atl+atr)/2+1,atr,MAX(l,(atl+atr)/2+1),r);
  //  printf("for %d to %d a and b is %d %d",atl,atr,a,b);
    return (a+b);
}

int fast_int()
{
        int n = 0;
        char c = getchar_unlocked();
        while (!('0' <= c && c <= '9'))
        {
                c = getchar_unlocked(); 
        }
        while ('0' <= c && c <= '9')
        {
                n = (n<<3)+(n<<1) + c - '0';
                c = getchar_unlocked();
        }
        return n;
}


void showsegment()
{
    int i=0;
    while(i<curmake)
    {
        cout<<" i : "<<i<<" data "<<segtree[i][0]<<" left "<<segtree[i][1]<<" right "<<segtree[i][2]<<endl;
        i++;
    }
}
int main()
{
    int Test;
  //  scanf(" %d",&Test);
  Test=1;
    while(Test--)
    {
       
        int n,i,q;
        i=0;
      
       // scanf(" %d %d",&n,&q);
       n=fast_int();
       q=fast_int();
        while(i<n)
        {
       //     scanf(" %d",&match[i]);
       match[i]=fast_int();
            i++;
        }
          curmake=1;
        depth=0;
        int l,r,l2,r2;
        makesegment(0,0,n-1);
   //     showsegment();
        while(q--)
        {
           
           // scanf(" %d %d %d %d",&l,&l2,&r,&r2);
           l=fast_int();
           l2=fast_int();
           r=fast_int();
           r2=fast_int();
            if(l2>r2)
            {
                int t=r2;
                r2=l2;
                l2=t;
            }
            if(l>r)
            
            {
                int t=l;
                l=r;
                r=t;
            }
            
            if(l2<l)
            {
            	int t=l;
            	l=l2;
            	l2=t;
            	t=r;
            	r=r2;
            	r2=t;
            }
            if(l2<=r)
            l2=r+1;
      //   cout<<l<<" "<<r<<endl<<l2<<" "<<r2<<endl;
                printf("%lld\n",findsum(0,0,n-1,l,r)+findsum(0,0,n-1,l2,r2));
            
        }
    }
    return 0;
}

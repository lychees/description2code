#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <memory.h>
#include <iostream>

unsigned long number()
{
  register unsigned long r = 0;
  static unsigned int lim = 0;
  static char buff[8192];
  static char *b = &buff[0];
  char c;

  for(;;){
    
    if(b == &buff[lim]) {
      if((lim=read(0, &buff[0], sizeof(buff)))<=0)
        return(r);
      b=&buff[0];
    }

    c = *b++ - '0';
    if(c<0) // copes with skipping both the space and newline separators.
      if(r==0)
	continue;
      else
	break;

    r =  (r<<1)  + (r<<3) + c;
    }
    return (r);
}
/*
 
1: (1) = 1

2: (1,2) = 2
 
3: (1-2) | (1-3) = 5 = 2 + (2 + 1)

4: (1-2) (1-3) | (1-3) (1-3) (1-4) = 15 

5: (1-2) (1-3) | (1-2)(1-3)(1-4)

S(N, 1) = 1
S(1, n) = 1 
S(N+1, n) =  n *  S(N, n) + S(N,  n+1)

S(1,1) = 1
S(1,2) = 1
S(1,x) = 1

S(2,1) = 1 * S(1,1) + S(1,2) = 2
S(2,2) = 2 * S(1,2) + S(1,3) = 2
S(2,3) = 3 * S(1,3) + S(1,4) = 4
S(2,4) =

S(3,1) = 1 * S(2,1) + S(2,2) = 5
S(3,2) = 2 * S(2,2) + S(2,3) = 8
S(3,3) = 3 * S(2,3) + S(2,4
S(3,4)



S(2,1) = 1 * S(1,1) + S(1,2) = 2 + 1 = 2
S(2,2) = 2 * S(1,2) + S(1,3) = 2 + 1 = 3
S(2,3) = 2 * S(1,3) + S(1,4)

S(3,1) = 1 * S(2,1) + S(2,2) = 2 + 3 = 5
S(2,3) = 3 * S(1,3) + S(1,4) = 3 + 1 = 4
S(2,4) = 4 * S(1,4) + S(1,5) = 4 + 1 = 5
S(3,2) = 2 * S(2,2) + S(2,3) = 6 + 4 = 10
S(3,3) = 3 * S(2,3) + S(2,4) = 12 +  5 = 17
S(4,1) = 1 * S(3,1) + S(3,2) = 5 + 10 = 15
S(4,2) = 2 * S(3,2) + S(3,3) = 20 + 

S(5,1) = 1 * S(4,1) + S(4,2) = 15 + 




S1 = 1
Sn+1 = Sn + S(n,2)
     =      2S
S:     n:
      1 2 3 4 5 6 7 8 9 ...
N: 1: 1 1 1 1 1 1 1 1 1 1 1 1 ...... 1 1 
   2: 1 3 4
   3: 1 10
   4: 1
   5: 1

     n*S[N-1,n] + S[N-1,n+1]

           |  /
        S[N,n]

 */

unsigned long long M[1001][1001];


unsigned long long
H(int N)
{
  int node = 1;
  //  ::memset(&M[0][0], 255, sizeof(M));

  for(int i=1; i<=N; ++i)
    M[1][i] = 1;

  // compute M[j
  int L=N;
  for (int y=2; y<=N; ++y) {
    for (int x=1; x<L; ++x) {
      M[y][x]= (x * M[y-1][x] + M[y-1][x+1]) % 1000000007;
    }
    --L;
  }
  return(M[N][node]);
}

unsigned long long
R(int N, int  node)
{
 
  if(N==1)
    return(1);
                            //1000000007
  return( ((node*R(N-1,node) % 1000000007)  + R(N-1, node+1)) % 1000000007);
}

unsigned long long
S(int N, int  node)
{
  unsigned long long   sum = 0;

  if(N == 1)
    return(N);

  --N;

  {
    unsigned long long  t;
   
    sum = M[N][node];

    if( sum == 0 ) {   //1000000007.
      sum =  S(N,node);// % 1000000007;
      M[N][node] = sum;
    }


    //                   1000000007
    sum=  (node * sum) % 1000000007;
    t = M[N][node +1];

    if(t==0) {        //1000000007.




      t = S(N,node+1); // % 1000000007;
      M[N][node +1] = t;
    }
    //                1000000007
    sum = (sum + t) % 1000000007;
  }

  return(sum);
}
	
int
main()
{
  int N = number();

  H(1000);
  for(int i=0; i<N; ++i) {
    int n = number();        
    std::cout << M[n][1] << std::endl;
  }	
  return(0);
}

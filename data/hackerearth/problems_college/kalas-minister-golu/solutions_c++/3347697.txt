#include<bits/stdc++.h>
using namespace std;
long long int wt[100005];
vector<int>adj[100005];
bool visited[100005];
long long int path[100005];
long long int MIN;
void init()
{
	for(int i=0;i<100005;i++)
	visited[i]=false;
}
void dfs(int s)
{
	visited[s] = true;
	MIN = min(MIN,wt[s-1]);
	for(int i=0;i<adj[s].size();i++)
	{
		if(!visited[adj[s][i]])
		dfs(adj[s][i]);
	}
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,m;
		cin>>n>>m;
		for(int i=0;i<n;i++)
		{
			cin>>wt[i];
		}
		for(int i=0;i<=n;i++)
		adj[i].clear();
		for(int i=0;i<m;i++)
		{
			int x,y;
			cin>>x>>y;
			adj[x].push_back(y);
			adj[y].push_back(x);	
		}
		init();
		int connected_components=0;
		for(int i=1;i<n+1;i++)
		{
			if(!visited[i])
			{
				MIN = INT_MAX;
				dfs(i);
				path[connected_components] = MIN;
				connected_components++;
				
			}
		}
		sort(path,path+connected_components);
		long long int ans = 0;
		for(int i=1;i<connected_components;i++)
		{
			
			ans = ans + path[i]*path[0];
		}
		cout<<ans<<endl;
	}
	return 0;
}

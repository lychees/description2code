
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cassert>
#include <cstring>
#include <algorithm>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <unordered_map>
#include <unordered_set>
#include <memory.h>
using namespace std;

const int ALPH = 256;
const int MAXN = 1000006;

char s[MAXN];

int p[MAXN], c[MAXN], cnt[MAXN], pn[MAXN], cn[MAXN];

int rnk[MAXN], mn[MAXN], mnsh[MAXN];

int main() {
  int n;
  scanf("%d", &n);
  scanf("%s", s);

  s[n++] = '$';

  for (int i = 0; i < n; i++) {
    cnt[s[i]]++;
  }
  for (int i = 1; i < ALPH; i++) {
    cnt[i] += cnt[i - 1];
  }
  for (int i = 0; i < n; i++) {
    p[--cnt[s[i]]] = i;
  }
  c[p[0]] = 0;
  int classes = 1;
  for (int i = 1; i < n; i++) {
    if (s[p[i]] != s[p[i - 1]]) {
      classes++;
    }
    c[p[i]] = classes - 1;
  }

  for (int h = 0; (1 << h) < n; h++) {
    for (int i = 0; i < n; i++) {
      pn[i] = p[i] - (1 << h);
      if (pn[i] < 0) {
        pn[i] += n;
      }
    }
    for (int i = 0; i < classes; i++) {
      cnt[i] = 0;
    }
    for (int i = 0; i < n; i++) {
      cnt[c[pn[i]]]++;
    }
    for (int i = 1; i < classes; i++) {
      cnt[i] += cnt[i - 1];
    }
    for (int i = n - 1; i >= 0; i--) {
      p[--cnt[c[pn[i]]]] = pn[i];
    }
    cn[p[0]] = 0;
    classes = 1;
    for (int i = 1; i < n; i++) {
      const int mid1 = (p[i] + (1 << h)) % n;
      const int mid2 = (p[i - 1] + (1 << h)) % n;
      if (c[p[i]] != c[p[i - 1]] || c[mid1] != c[mid2]) {
        ++classes;
      }
      cn[p[i]] = classes - 1;
    }
    for (int i = 0; i < n; i++) {
      c[i] = cn[i];
    }
  }

  for (int i = 1; i < n; i++) {
    rnk[p[i]] = i;
  }

  mn[0] = rnk[0];
  mnsh[0] = 0;
  for (int i = 1; i < n; i++) {
    mn[i] = mn[i - 1];
    mnsh[i] = mnsh[i - 1];

    if (rnk[i] < mn[i]) {
      mn[i] = rnk[i];
      mnsh[i] = i;
    }
  }

  int q;
  scanf("%d", &q);
  while (q--) {
    int k;
    scanf("%d", &k);
    printf("%d\n", mnsh[k]);
  }

  return 0;
}
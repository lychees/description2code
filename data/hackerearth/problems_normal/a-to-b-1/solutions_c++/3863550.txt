#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define vb vector<bool>
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp)%mod;
	if(b&1)
		temp=(temp*a)%mod;
	return temp;
}

vl tree(400010), v(100010);

void build( int node, int a, int b)
{
	if( a==b)
	{
		tree[node] = v[a];
		return;
	}
	int mid = (a+b)/2;
	build( node*2, a, mid);
	build( node*2+1, mid+1, b);
	tree[node] = ((ll)tree[node*2]*(ll)tree[node*2+1])%mod;
}

void update( int node, int a, int b, int pos, int val)
{
	if( a==b)
	{
		tree[node] = val;
		return;
	}
	int mid = (a+b)/2;
	if( pos <= mid)
		update( node*2, a, mid, pos, val);
	else
		update( node*2+1, mid+1, b, pos, val);
	tree[node] = ((ll)tree[node*2]*(ll)tree[node*2+1])%mod;
}

int query( int node, int a, int b, int i, int j)
{
	if((a>b) ||( a>j) ||(i>b))
		return 1;
	if((a>=i)&&(b<=j))
		return tree[node];
	int mid = (a+b)/2;
	int q1 = query(	node*2, a, mid, i, j);
	int q2 = query(	node*2+1, mid+1, b, i, j);
	int ans =((ll)(q1)*(ll)(q2))%mod;
	return ans;
}
int main()
{
	ios_base::sync_with_stdio(false);
	ll i, n, q, id, x, op;
	ll st, ans;
	st = 1;
	cin >> n;
	//vl v(n);
	for( i=0;i<n;i++ )
	{
		cin >> v[i];
		//st = (st*v[i])%mod;
	}
	build( 1, 0, n-1);
	cin >> q;
	while( q--)
	{
		cin >> op;
		if( op)
		{
			cin >> id;
			id--;
			ans = 1;
			ans =(ans*query(1, 0, n-1, 0,id-1))%mod;
			ans =(ans*query(1, 0, n-1, id+1,n-1))%mod;
			cout << ans <<"\n";
		}
		else
		{
			cin >> id >> x;
			id--;
			update( 1, 0, n-1, id, x);
			v[id] = x;
		}
	}
    return 0;
}

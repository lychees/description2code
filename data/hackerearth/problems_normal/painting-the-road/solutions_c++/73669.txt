#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;
#define MAX 1000000000
struct road {
	int a,b,c;
};
bool comp(const road & r1 , const road & r2){
	return (r1.a < r2.a)  || ((r1.a == r2.a) && (r1.b < r2.b))  ||  ((r1.a == r2.a) && (r1.b == r2.b) && (r1.c < r2.c));
}
int main()
{
    int t,l,k,i,j,dp[2][300],val;
  	road r;
    vector<road> vec;
    scanf("%d",&t);
    while(t--){
    	scanf("%d%d",&l,&k);
    	if(vec.size())
    		vec.clear();
        for(i=0;i<2;i++)
        for(j=0;j<300;j++)
            dp[i][j] = MAX ;
    	for(i=0;i<k;i++){
    		scanf("%d%d%d",&r.a,&r.b,&r.c);
    		vec.push_back(r);
    	}
    	sort(vec.begin(),vec.end(),comp);
    	dp[0][0] = 0;
    	for(i=1;i<=k;i++) {// roads
    		val  = i& 1;
    		for(j=0;j<=l;j++){ // dist
    			if(vec[i-1].a > j || vec[i-1].b < j)
    				dp[val][j] = dp[1-val][j] ;
    			else
    				dp[val][j] = min ( dp[1-val][j] , dp[1-val][vec[i-1].a] + vec[i-1].c );
    			if(dp[val][j] > MAX) dp[val][j] = MAX ;
    			//printf("%d\n",dp[val][j]);
    		}
    		//printf("\n");
    	}
    	if(dp[k&1][l] < MAX)
    		printf("%d\n",dp[k&1][l]);
    	else
    		printf("-1\n");
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define ll long long

const int mod=1000000007;

bool isNotPrime[1000001];

int f[1000001];
int F[1000001];
void generatePrimeSieve()
{
 
  for(int i=2;i<=1000000;++i)
    {
        if(isNotPrime[i]==false)
          {

            for(int j=i;j<=1000000;j+=i)
            {
              int copy=j;
              while(copy%i==0)
                {
                  copy/=i;
                  ++f[j];
                }
              isNotPrime[j]=true;
            }
          }
        F[i]=F[i-1]+f[i];
    }
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}
int main()
{
  std::ios::sync_with_stdio(false);

  generatePrimeSieve();
  int t;
  scanf("%d",&t);
  // cin>>t;
  while(t--)
  {
    int a,b;
    // cin>>a>>b;
    scanf("%d%d",&a,&b);
    printf("%d\n",F[b]-F[a-1]);
    // cout<<F[b]-F[a-1]<<"\n";
  }


  
}

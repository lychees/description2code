//Author: Utkarsh $axena
#include<bits/stdc++.h>
#include<iostream>
using namespace std;
//miller rabin primality 7 set for 64 bit int {2, 325, 9375, 28178, 450775, 9780504, 1795265022}
#define fre 	freopen("0.in","r",stdin),freopen("0.out","w",stdout)
#define abs(x) ((x)>0?(x):-(x))
#define M 1000000007
#define lld signed long long int
#define pp pop_back()
#define ps(x) push_back(x)
#define mpa make_pair
#define PII pair<int,int>
#define scan(x) scanf("%d",&x)
#define print(x) printf("%d\n",x)
#define scanll(x) scanf("%lld",&x)
#define printll(x) printf("%lld\n",x)
//vector<int> g[2*100000+5];int visited[2*100000+5];
lld n,m,k;
lld d[200];
struct matrix
{
	lld m[200][200];
}mat;
int cell(int x,int y)
{
	return (x-1)*m+y;
}
matrix mul(matrix a,matrix b)
{
	matrix c;
	for(int i=1;i<=k;++i)
	{
		for(int j=1;j<=k;++j)
		{
			c.m[i][j]=0;
			for(int p=1;p<=k;++p)
			{
				c.m[i][j]=(c.m[i][j]+a.m[i][p]*b.m[p][j])%M;
			}
		}
	}
	return c;
}
matrix pow(matrix base, lld exponent)
{
    matrix result;
    for(int i=1;i<=k;++i)result.m[i][i]=1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = mul(result , base);
        exponent = exponent >> 1;
        base = mul(base,base);
    }
    return result;
}
bool palin(string x)
{
	int nx=x.size();
	for(int i=0,j=nx-1;i<nx;++i,--j)
	{
		if(x[i]!=x[j])return 0;
	}
	return 1;
}
lld count(string x)
{
	string s;
	set<string>tot;
	tot.clear();
	int nx=x.size();
	for(int i=0;i<nx;++i)
	{
		s="";
		for(int j=i;j<nx;++j)
		{
			s+=x[j];
			if(palin(s))tot.insert(s);
		}
	}
	return tot.size();
}
int main()
{
	cin>>n>>m;
	k=n*m;
	string x;
	lld c,D,a,b,x1,x2,y1,y2;
	for(int i=1;i<=n;++i)
	{
		for(int j=1;j<=m;++j)
		{
			cin>>x;
			d[cell(i,j)]=count(x)%M;
		}
	}
	cin>>c;
	for(int i=1;i<=k;++i)for(int j=1;j<=k;++j)mat.m[i][j]=0;
	for(int i=1;i<=k;++i)
	{
		mat.m[i][i]=1;
	}
	while(c--)
	{
		cin>>x1>>y1>>x2>>y2;
		a=cell(x1+1,y1+1);
		b=cell(x2+1,y2+1);
		mat.m[a][b]=(mat.m[a][b]+1)%M;
		mat.m[b][a]=(mat.m[b][a]+1)%M;
	}
	cin>>D;
	mat=pow(mat,D);
	lld ans=0;
	for(int i=1;i<=k;++i)
	{
		ans=0;
		for(int j=1;j<=k;++j)
		{
			ans=(ans+(d[j]%M)*(mat.m[i][j]%M))%M;
		}
		cout<<ans<<' ';
		if(i%m==0)cout<<endl;
	}
}

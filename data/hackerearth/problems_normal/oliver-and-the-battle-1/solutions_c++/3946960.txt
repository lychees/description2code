#include <iostream>
#include <queue>
#include <utility>

using namespace std;

int g[1001][1001], mark[1001][1001];
queue < pair<int, int> > q;

int main()
{
	int t, n, m, i, j, k, x, y, troops, enemy, count;
	cin >> t;

	for (; t; --t) {
		pair <int, int> p;
		cin >> n >> m;
		troops = 0;
		enemy = 0;
		for (i = 1; i <= n; ++i) {
			for (j = 1; j <= m; ++j) {
				cin >> g[i][j];
				mark[i][j] = 0;
			}
		}

		for (i = 1; i <= n; ++i) {
			for (j = 1; j <= m; ++j) {
				if (mark[i][j] == 0 && g[i][j] == 1) {
					count = 0;
					troops++;
					q.push(make_pair(i, j));
					mark[i][j] = 1;
					while (!q.empty()) {
						p = q.front();
						q.pop();
						count += 1;
						x = p.first;
						y = p.second;
						if (x - 1 > 0) {
							if (y - 1 > 0 && mark[x-1][y-1] == 0 && g[x-1][y-1] == 1) {
								mark[x-1][y-1] = 1;
								q.push(make_pair(x-1, y-1));
							}
							if (mark[x-1][y] == 0 && g[x-1][y] == 1) {
								mark[x-1][y] = 1;
								q.push(make_pair(x-1, y));
							}
							if (y + 1 <= m && mark[x-1][y+1] == 0 && g[x-1][y+1] == 1) {
								mark[x-1][y+1] = 1;
								q.push(make_pair(x-1, y+1));
							}
						}
						if (y - 1 > 0 && mark[x][y-1] == 0 && g[x][y-1] == 1) {
							mark[x][y-1] = 1;
							q.push(make_pair(x, y-1));
						}
						if (y+1 <= m && mark[x][y+1] == 0 && g[x][y+1] == 1) {
							mark[x][y+1] = 1;
							q.push(make_pair(x, y+1));
						}
						if (x+1 <= n && y-1 > 0 && mark[x+1][y-1] == 0 && g[x+1][y-1] == 1) {
							mark[x+1][y-1] = 1;
							q.push(make_pair(x+1, y-1));
						}
						if (x+1 <= n && mark[x+1][y] == 0 && g[x+1][y] == 1) {
							mark[x+1][y] = 1;
							q.push(make_pair(x+1, y));
						}
						if (x+1 <= n && y + 1 <= m && mark[x+1][y+1] == 0 && g[x+1][y+1] == 1) {
							mark[x+1][y+1] = 1;
							q.push(make_pair(x+1, y+1));
						}
					}
					if (count > enemy) {
						enemy = count;
					}
				}
			}
		}

		cout << troops << " " << enemy << endl;
	}

	return 0;
}
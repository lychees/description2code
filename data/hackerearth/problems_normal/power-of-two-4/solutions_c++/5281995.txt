#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
 
bool ispowtwo( int n ){
	return (n && !(n&(n-1)));
}

bool isredudant(vector<int> v, int in){
 	for(vector<int>::iterator it  = v.begin(); it != v.end(); it++){
		if((*it&in)==*it){
			return true;
		}
	}
	return false;
}
 
int andpowtwo( int len ){
		int  in = 0, count = 0; 
		vector <int> v;
		bool flag = false;
		for(int i = 0; i < len; i++){
			cin >> in;
			if(!flag){
				if(ispowtwo(in) ){
					flag = true;
				}else if(in == 0){
				}else{
					if(v.size() > 0){
						if(ispowtwo(v.front()&in)){
							flag = true;
						}else if(isredudant(v,in)){
							//input is redudant
						}else{
							v.push_back(in);
						}
					}else{
						v.push_back(in);
					}
				}
			}
		}
		if(flag){
			return 1;
		}
		if(v.size() > 0){
		if(v.back()%v.front() == 0){
			for(int i = 0; i < v.size()/2; i++){
				v.erase(v.begin());
			}
		}}
		double m = pow(2,v.size());	
		count = 2;
		for(int i = 3; i < m; i++){
			if((i&(i-1)) == 0){
				count = i;
				continue;
			}else{
				in =  v[count - 1]&v[i - count - 1];
				if(ispowtwo(in)){
					count = i;
					for(int j = 1; j < i; j = j << 1){
						count = count >> 1;
					}
					return 1;
				}else{
				v.insert(v.begin() + i - 1, in);
				}
			}
		}
	return 0;
}
 
int main(){
	int cases;
	cin >> cases;
	for(int i = 0; i < cases; i ++){
		int len;
		cin >> len;
		if(andpowtwo(len)){
			cout << "YES" << endl;
		}else{
			cout << "NO" << endl;
		}
	}
    return 0;
}
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <cstring> //for memset

#define sz(X) ((int)X.size())
#define FOR(i,x,y) for(int i=x; i<y; ++i)
#define FORE(i,x,y) for(int i=x; i<=y; ++i)
#define FORD(i,x,y) for(int i=x; i>y; --i)
#define FORDE(i,x,y) for(int i=x; i>=y; --i)
#define ALL(x) x.begin(), x.end()

#define INT_MAXIMUM 100000007
char buf[50]; std::string itos(int x) {sprintf(buf,"%d",x); return buf;}

std::vector<std::string> split(std::string s, char dlim)
{
    std::string t;
    std::vector<std::string> ans;
    FOR(i, 0, sz(s)) if(s[i] != dlim) t.push_back(s[i]); else ans.push_back(t), t.clear();
    ans.push_back(t);
    return ans;
}

using namespace std;

long A[1601][1601];

int main()
{

    int T; cin>>T;

    FOR(t,0,T)
    {
        memset(&A, 0, sizeof(A));

        int F, G, S, P , C, POWER;
        cin>>F>>G>>S>>P>>C>>POWER;

        F /= 25;
        G /= 50;

        long ans = 0;

        for(int f = 2; f<= F; f += 1)
        {
            for(int g = 0; g<=G; g+=1)
            {
                //take S
                if(f>=4 && g>=0) A[f][g] = max(A[f][g], S + A[f-4][g-0]);

                //take P
                if(f>=5 && g>=1) A[f][g] = max(A[f][g], P + A[f-5][g-1]);


                //take C
                if(f>=2 && g>=2) A[f][g] = max(A[f][g], C + A[f-2][g-2]);

                ans = max(ans, A[f][g]);
            }
        }

        if(ans >= POWER)
            cout<<ans - POWER<<endl;
        else cout<<-1<<endl;
    }

    return 0;
}
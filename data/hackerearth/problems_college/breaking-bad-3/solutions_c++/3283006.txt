#include<iostream>
using namespace std;
void quickSort(long long int arr[], long long int left, long long int right) {
      long long int i = left, j = right;
     long long int tmp;
      long long int pivot = arr[(left + right) / 2];
 
      /* partition */
      while (i <= j) {
            while (arr[i] < pivot)
                  i++;
            while (arr[j] > pivot)
                  j--;
            if (i <= j) {
                  tmp = arr[i];
                  arr[i] = arr[j];
                  arr[j] = tmp;
                  i++;
                  j--;
            }
      };
 
      /* recursion */
      if (left < j)
            quickSort(arr, left, j);
      if (i < right)
            quickSort(arr, i, right);
}
void insertion_sort (long long int arr[], long long int length){
	 	 long long int j, temp;
		
	for (int i = 0; i < length; i++){
		j = i;
		
		while (j > 0 && arr[j] < arr[j-1]){
			  temp = arr[j];
			  arr[j] = arr[j-1];
			  arr[j-1] = temp;
			  j--;
			  }
		}
}
int main()
{
	int n,i;
	long long int s,a[1000000],k;
	cin>>n;
	while(n--)
	{ s=0;
		cin>>k;
		for(i=0;i<k;i++)
		{
			cin>>a[i];
		}

	if(k<1000)
		insertion_sort(a,k);
		else 
		quickSort(a,0,k-1);
	
		
		for(i=k-1;i>0;i=i-2)
		{
			s+=a[i]*a[i-1];
		}
		cout<<s<<endl;
	}
	return 0;
}



'''
Jacobi Four Sqaure Theorem
https://en.wikipedia.org/wiki/Jacobi%27s_four-square_theorem

The number of ways to represent n as the sum of four squares is eight times the sum of the divisors of n if n is odd and 24 times the sum of the odd divisors of n if n is even

'''
import math


def jacobiFourSquare(n):
    if (n % 2 == 0):
        print evenJFS(n)
    else:
        print oddJFS(n)
    return


def evenJFS(n):
    #  24 times the sum of the odd divisors of n
    # print allDivisors(n)
    allDivisor = allDivisors(n)
    oddDivisors = []
    for i in allDivisor:
        if (i % 2 != 0):
            oddDivisors.append(i)
    # print oddDivisors
    return 24 * sum(oddDivisors)


def oddJFS(n):
    # eight times the sum of the divisors of n
    return 8 * sum(allDivisors(n))


def allDivisors(n):

    divisors = []
    sqrt = int(math.sqrt(n))
    for i in range(1, sqrt + 1):
        if (n % i == 0):
            divisors.append(i)
            divisors.append(n // i)
    return list(set(divisors))


t = int(input())

while (t):
    val = int(input())

    jacobiFourSquare(val)
    t = t - 1

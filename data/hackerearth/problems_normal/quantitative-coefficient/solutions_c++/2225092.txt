#include<iostream>
#include<algorithm>
using namespace std;
int uc=0;
const int mod=1000000007;
struct Edges
{
    int x,y,c;
};
bool myComp(Edges a,Edges b)
{
    return (a.c<b.c);
}
int find(int a[],int x)
{
    if(a[x]!=x)
    {
        a[x]=find(a,a[x]);
        uc++;
    }    
    
    return a[x];
}
void munion(int a[],int x,int y)
{
    uc=0;
    int i=find(a,x);
    int ci=uc;
    uc=0;
    int j=find(a,y);
    int cj=uc;
    
    if(ci>cj)
    a[j]=i;
    else
    a[i]=j;
}
int kruskal(int n,Edges e[],int m)
{
    sort(e,e+m,myComp);
    
    //Making Sets
    int s[n];
    for(int i=0;i<n;i++)
    s[i]=i;
    
    int c=0;
    long long int ans=1;
    for(int i=0;i<m&&c<n-1;i++)
    if(find(s,e[i].x-1)!=find(s,e[i].y-1))
    {
        ans=(ans*e[i].c)%mod;
        munion(s,e[i].x-1,e[i].y-1);
        c++;
    }
    
    return ans;
    
}
int main()
{
    int t;
    cin>>t;
    while(t-->0)
    {
        int n,m;
        cin>>n>>m;
        
        Edges e[m];
        
        for(int i=0;i<m;i++)
        {
            cin>>e[i].x>>e[i].y>>e[i].c;
        }
        
        cout<<kruskal(n,e,m)<<endl;
    }
    return 0;
}
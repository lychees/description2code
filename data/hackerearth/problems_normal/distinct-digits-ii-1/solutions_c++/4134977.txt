#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long l;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef pair<int,pair<int,int> > tii;
typedef vector<pair<int,int> > vec_pii;
typedef vector<vector<int> > vec_vec;
#define mp make_pair
#define setbits(n) __builtin_popcount((n))
#define pb push_back
#define mod 1000000007
#define gcd(a,b) __gcd(a,b)
#define sf(n) scanf("%lld",&(n))
#define pf(n) printf("%lld\n",(n))
#define min3(a,b,c) (min((c),min((a),(b))))
#define max3(a,b,c) (max((a),max((b),(c))))
#define newline "\n"
int BIT[100005][12];
ll arr[100005];
int n,q;
bool mark[10];

int countdistinct(int num)
{
    int ret =0;
    while(num)
    {
        int x = num%10;
        mark[x]=true;
        num/=10;
    }
    for(int i=0;i<10;++i)
        if(mark[i]==true)
        {
            ret++;
            mark[i] = false;
        }
    return ret;
}
void build(int index,int pos,int value)
{
    for(int x=index;x<=n;x+=(x&-x))
        BIT[x][pos]+=value;
}
int query(int index,int pos)
{
    int ans =0 ;
    for(int x=index;x>0;x-=(x&-x))
        ans+=BIT[x][pos];
    return ans;
}
int main()
{
    memset(BIT,0,sizeof(BIT));
    fill(mark,mark+10,false);
    cin>>n;
    for(int i=0;i<n;++i)
    {
        cin>>arr[i];
        build(i+1,countdistinct(arr[i]),1);
    }
    cin>>q;
    while(q--)
    {
        string s;
        cin>>s;
        if(s=="ADD")
        {
            int u,v;
            cin>>u>>v;
            int temp = countdistinct(arr[u-1]);
            arr[u-1] = (arr[u-1]+v)%mod;
            if(temp==countdistinct(arr[u-1]))
                continue;
            else
            {
                build(u,temp,-1);
                build(u,countdistinct(arr[u-1]),1);
            }

        }
        else if(s=="MUL")
        {
            int u,v;
            cin>>u>>v;
            int temp = countdistinct(arr[u-1]);
            arr[u-1] = (arr[u-1]*v)%mod;
            if(temp==countdistinct(arr[u-1]))
                continue;
            else
            {
                build(u,temp,-1);
                build(u,countdistinct(arr[u-1]),1);
            }
        }
        else if(s=="REP")
        {
            int u,v;
            cin>>u>>v;
            int temp = countdistinct(arr[u-1]);
            arr[u-1] = v%mod;
            if(temp==countdistinct(arr[u-1]))
                continue;
            else
            {
                build(u,temp,-1);
                build(u,countdistinct(arr[u-1]),1);
            }
        }
        else if(s=="MAX")
        {
            int l,r;
            cin>>l>>r;
            for(int i=9;i>0;i--)
                if(query(r,i)-query(l-1,i)>0)
                {
                    cout<<i<<" "<<query(r,i)-query(l-1,i)<<newline;
                    break;
                }
        }
        else if(s=="MIN")
        {
            int l,r;
            cin>>l>>r;
            for(int i=1;i<=9;++i)
                if(query(r,i)-query(l-1,i)>0)
                {
                    cout<<i<<" "<<query(r,i)-query(l-1,i)<<newline;
                    break;
                }
        }
    }

}
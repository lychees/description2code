#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007
int find(int parent[],int i)
{
	if(parent[i]==i)
	{
		return i;
	}
	parent[i]=find(parent,parent[i]);
	return parent[i];
}
void unionH(int H[],int parent[],int i,int j)
{
	int p_i=find(parent,i);
	int p_j=find(parent,j);
	if(H[p_i]==H[p_j])
	{
		H[p_j]--;
		parent[p_i]=p_j;
	}	
	else if(H[p_i]<H[p_j])
	{
		parent[p_j]=p_i;
	}
	else
	{
		parent[p_i]=p_j;
	}
}
void unionW(int w[],int parent[],int i,int j)
{
	int p_i=find(parent,i);
	int p_j=find(parent,j);
	if(w[p_i]<w[p_j])
	{
		w[p_j]+=w[p_i];
		parent[p_i]=parent[p_j];
	}
	else
	{
		w[p_i]+=w[p_j];		
		parent[p_j]=parent[p_i];
	}
}
int main()
{
	int i,n;
	cin>>n;
	int e[n+1],minimum[n+1],count[n+1],parent[n+1],w[n+1],H[n+1];
	for(i=1;i<=n;i++)
	{
		cin>>e[i];
	}
	for(i=1;i<=n;i++)
	{
		parent[i]=i;
		w[i]=1;
		H[i]=1;
		minimum[i]=INT_MAX;
		count[i]=0;
	}	

	int k,j;
	cin>>k;
	while(k--)
	{
		cin>>i>>j;
	//	unionW(w,parent,i,j);
		unionH(H,parent,i,j);
	}
	for(i=1;i<=n;i++)
	{
		int temp=find(parent,i);
	}
	for(i=1;i<=n;i++)
	{
		if(minimum[parent[i]]>e[i])
		{
			minimum[parent[i]]=e[i];
			count[parent[i]]=1;	
		}
		else if(minimum[parent[i]]==e[i])
		{
			count[parent[i]]++;
			count[parent[i]]=(count[parent[i]])%mod;
		}
	}
//	for(i=1;i<=n;i++)
//	{
//		cout<<count[i]<<" ";
//	}	
//		cout<<"\n";
//return 0;
	long int p=1;
	for(i=1;i<=n;i++)
	{
		if(count[i]!=0)
			p=((p)*(count[i])%mod)%mod;
	}
	cout<<p<<"\n";
	return 0;
}
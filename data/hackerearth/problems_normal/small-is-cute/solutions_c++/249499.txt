#include<iostream>
#include<string>

int comparison(int array1[], int array2[], int array1Len, int array2Len)
{
	if(array1Len > array2Len)
	{	
		for(int i=0; i<array2Len; i++)
		{
			if(array2[i] > array1[i])
			{
				return 2;
			}
			else if(array1[i] > array2[i])
			{
				return 1;
			}
			else
			{
				continue;
			}
		}
		
		int j = 0;
		int i = array2Len;
		while(i < array1Len)
		{
			if(array1[i] > array2[j])
			{
				return 1;		
			}
			else if(array2[j] > array1[i])
			{
				return 2;		
			}
			j++;
			i++;						
		}
		return 0;	
	}
	else
	{
		for(int i=0; i<array1Len; i++)
		{
			if(array1[i] > array2[i])
			{
				return 1;
			}
			else if(array2[i] > array1[i])
			{
				return 2;
			}
			else
			{
				continue;
			}
		}
		int i = array1Len;
		int k = 0;
		while(i < array2Len)
		{
			if(array2[i] > array1[k])
			{
				return 2;		
			}
			else if(array1[k] > array2[i])
			{
				return 1;		
			}
			k++;
			i++;						
		}
		return 0;
	}	
}

struct node
{
	int *p;
	node* left;
	node* right;
	int lengthArray;
};

node* root = NULL;

void insert(node*, int*, int);

void traverse(node*);

int main()
{	
	std::string s;
	int num;
	std::cin>>num;
	for(int i=0; i<num; i++)
	{
		std::cin>>s;
		
		int length = s.length();
		int* p = new int[length];
		int* x = p;
		
		std::string::iterator it;
  		int index = 0;
  		for ( it = s.begin() ; it < s.end(); it++ ,index++)
  		{
			*(p++) = (((int)*it) - '0');
		}
		
		insert(root,x,s.length());
	}
	traverse(root);
	return 0;
}

void insert(node* tree, int* p, int length)
{
	node* newnode = new node;
	newnode->left = NULL;
	newnode->right = NULL;
	newnode->p = p;
	newnode->lengthArray = length;	
	
	if(root == NULL)
	{
		root = newnode;
		return;
	}
	
	if(comparison(tree->p,p,tree->lengthArray,length) == 1)
	{
		if(tree->left == NULL)
		{
			tree->left = newnode;
			return;
		}
		else
		{
			insert(tree->left,p,length);
		}
	}
	else if(comparison(tree->p,p,tree->lengthArray,length) == 2)
	{
		if(tree->right == NULL)
		{
			tree->right = newnode;
			return;
		}
		else
		{
			insert(tree->right,p,length);
		}
	}
	else if(comparison(tree->p,p,tree->lengthArray,length) == 0)
	{
		if(tree->left == NULL)
		{
			tree->left = newnode;
			return;
		}
		else
		{
			insert(tree->left,p,length);
		}
	}
}

void traverse(node* root)
{
	if(root->left != NULL)
	{
		traverse(root->left);
	}
	
	int* p = root->p;
	
	int newArray[root->lengthArray];
	
	for(int i=0; i<root->lengthArray; i++)
	{
		newArray[i] = *p;
		p++;
	}
	
	for(int i=0; i<root->lengthArray; i++)
	{
		std::cout<<newArray[i];
	}
	

	if(root->right != NULL)
	{
		traverse(root->right);
	}
}
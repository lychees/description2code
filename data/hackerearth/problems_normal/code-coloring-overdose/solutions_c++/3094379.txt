#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>
#include <fstream>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME "a"

const ld EPS = 1e-9;
const int MOD = 1e9 + 7;

void add(int& x, int y) {
	((x += y) >= MOD) && (x -= MOD);
}

int mul(int x, int y) {
	return x * 1ll * y % MOD;
}

int main() {
#ifdef DEBUG
	freopen(FILE_NAME ".in", "r", stdin);
//	freopen(FILE_NAME ".out", "w", stdout);
#endif
	

	int n, k, m;
	scanf("%d%d%d", &n, &k, &m);
	vvi dp(k + 1, vi(m + 1, 0));
	vi cnt(k, 0);
	forn(i, n) {
		int c;
		scanf("%d", &c);
		--c;
		assert(0 <= c && c < k);
		++cnt[c];
	}

	vi pow2(n + 1, 0);
	pow2[0] = 1;
	for (int i = 1; i <= n; ++i) {
		pow2[i] = mul(pow2[i - 1], 2);
	}

	dp[0][0] = 1;
	forn(i, k) forn(have, m + 1) {
		if  (!dp[i][have]) {
			continue;
		}

		// do not take
		add(dp[i + 1][have], dp[i][have]);

		// take
		if  (have < m && cnt[i]) {
			int coef = pow2[cnt[i]];
			add(coef, -1 + MOD);
			add(dp[i + 1][have + 1], mul(dp[i][have], coef));
		}
	}

	int ans = 0;
	for (int have = 0; have <= m; ++have) {
		add(ans, dp[k][have]);
	}
	printf("%d\n", ans);

	return 0;
}
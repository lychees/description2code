#include<bits/stdc++.h>
using namespace std;

#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)

#define mygc(c) (c)=getchar_unlocked()
#define mypc(c) putchar_unlocked(c)

#define ll long long
#define ull unsigned ll

void reader(int *x){int k,m=0;*x=0;for(;;){mygc(k);if(k=='-'){m=1;break;}if('0'<=k&&k<='9'){*x=k-'0';break;}}for(;;){mygc(k);if(k<'0'||k>'9')break;*x=(*x)*10+k-'0';}if(m)(*x)=-(*x);}
void reader(ll *x){int k,m=0;*x=0;for(;;){mygc(k);if(k=='-'){m=1;break;}if('0'<=k&&k<='9'){*x=k-'0';break;}}for(;;){mygc(k);if(k<'0'||k>'9')break;*x=(*x)*10+k-'0';}if(m)(*x)=-(*x);}
void reader(double *x){scanf("%lf",x);}
int reader(char c[]){int i,s=0;for(;;){mygc(i);if(i!=' '&&i!='\n'&&i!='\r'&&i!='\t'&&i!=EOF) break;}c[s++]=i;for(;;){mygc(i);if(i==' '||i=='\n'||i=='\r'||i=='\t'||i==EOF) break;c[s++]=i;}c[s]='\0';return s;}
template <class T, class S> void reader(T *x, S *y){reader(x);reader(y);}
template <class T, class S, class U> void reader(T *x, S *y, U *z){reader(x);reader(y);reader(z);}
template <class T, class S, class U, class V> void reader(T *x, S *y, U *z, V *w){reader(x);reader(y);reader(z);reader(w);}

void writer(int x, char c){int s=0,m=0;char f[10];if(x<0)m=1,x=-x;while(x)f[s++]=x%10,x/=10;if(!s)f[s++]=0;if(m)mypc('-');while(s--)mypc(f[s]+'0');mypc(c);}
void writer(ll x, char c){int s=0,m=0;char f[20];if(x<0)m=1,x=-x;while(x)f[s++]=x%10,x/=10;if(!s)f[s++]=0;if(m)mypc('-');while(s--)mypc(f[s]+'0');mypc(c);}
void writer(double x, char c){printf("%.15f",x);mypc(c);}
void writer(const char c[]){int i;for(i=0;c[i]!='\0';i++)mypc(c[i]);}
void writer(const char x[], char c){int i;for(i=0;x[i]!='\0';i++)mypc(x[i]);mypc(c);}
template<class T> void writerLn(T x){writer(x,'\n');}
template<class T, class S> void writerLn(T x, S y){writer(x,' ');writer(y,'\n');}
template<class T, class S, class U> void writerLn(T x, S y, U z){writer(x,' ');writer(y,' ');writer(z,'\n');}
template<class T> void writerArr(T x[], int n){int i;if(!n){mypc('\n');return;}rep(i,n-1)writer(x[i],' ');writer(x[n-1],'\n');}

int get_inv(ll a, int md){ll t=a,s=md,u=1,v=0,e;while(s){e=t/s;t-=e*s;u-=e*v;swap(t,s);swap(u,v);}if(u<0)u+=md;return u;}

struct modint{
  static unsigned md;
  unsigned a;

  modint(void){};modint(int n){n%=md;if(n<0)n+=md;a=n;}modint(unsigned n){a=n%md;}modint(ll n){n%=md;if(n<0)n+=md;a=n;}modint(ull n){a=n%md;}
  modint&operator+=(modint n){a+=n.a;if(a>=md)a-=md;return*this;}modint&operator-=(modint n){if(a<n.a)a+=md-n.a;else a-=n.a; return*this;}modint&operator*=(modint n){a=((ull)a*n.a)%md;return*this;}modint&operator/=(modint n){return*this*=n.inv();}modint operator+(modint n){return modint(*this)+=n;}modint operator-(modint n){return modint(*this)-=n;}modint operator*(modint n){return modint(*this)*=n;}modint operator/(modint n){return modint(*this)/=n;}modint operator-(void){ modint r; r.a = a?md-a:0; return r; }
  void setInvalid(void){a=md;}
  bool isValid(void){return a<md;}
  modint inv(void){ll t=a,s=md,u=1,v=0,e;while(s){e=t/s;t-=e*s;u-=e*v;swap(t,s);swap(u,v);}if(u<0)u+=md;return modint(u);}
  modint pow(ull n){modint r(1),a(*this);while(n){if(n&1)r*=a;n>>=1;a*=a;}return r;}
  int toint(void){return a;}
};
unsigned modint::md = 1000000007;
void writer(modint a, char c){ writer((int)a.a,c); }

char memarr[17000000]; void *mem = memarr;

int p, md[3] = {2,5,719};

int N, Q;
int A[333][333];
int B[333][333];

int res[333];

modint mat[333][333], vec[333][333];

int main(){
  int i, j, k, l;
  modint mul;

  reader(&N,&Q);
  rep(i,N) rep(j,N) reader(A[i]+j);
  rep(i,Q) rep(j,N) reader(B[j]+i);
  rep(i,Q) res[i] = 1;

  rep(p,3){
    modint::md = md[p];

    rep(i,N) rep(j,N) mat[i][j] = A[i][j];
    rep(i,N) rep(j,Q) vec[i][j] = B[i][j];

/*    puts("-------");
    rep(i,N) writerArr(mat[i],N);
    rep(i,N) writerArr(vec[i],Q);
    puts("---");*/

    i = 0;
    rep(j,N){
      REP(k,i,N) if(mat[k][j].a) break;
      if(k==N) continue;
      if(k!=i){
        rep(l,N) swap(mat[i][l], mat[k][l]);
        rep(l,Q) swap(vec[i][l], vec[k][l]);
      }

      REP(k,i+1,N){
        mul = mat[k][j] / mat[i][j];
        rep(l,N) mat[k][l] -= mul * mat[i][l];
        rep(l,Q) vec[k][l] -= mul * vec[i][l];
      }

      i++;
    }

/*    rep(i,N) writerArr(mat[i],N);
    rep(i,N) writerArr(vec[i],Q);*/
    
    rep(i,N){
      rep(j,N) if(mat[i][j].a) break;
      if(j==N){
        rep(j,Q) if(vec[i][j].a) res[j] = 0;
      }
    }
  }

  rep(i,Q) writerLn(res[i]?"Yes":"No");

  return 0;
}

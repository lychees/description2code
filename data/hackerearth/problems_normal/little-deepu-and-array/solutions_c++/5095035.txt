#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007
int arr[1000009];
int tree[2000009];
int lazy[2000009];

//Build and init tree

void build_tree(int node, int a, int b) {
  	if(a > b) return; // Out of range

  	if(a == b) { // Leaf node
    		tree[node] = arr[a]; // Init value
		return;
	}

	build_tree(node*2, a, (a+b)/2); // Init left child
	build_tree(node*2+1, 1+(a+b)/2, b); // Init right child

	tree[node] = min(tree[node*2], tree[node*2+1]); // Init root value
}


 //Increment elements within range [i, j] with value value

void update_tree(int node, int a, int b, int i, int j,int x, int value) {


  	if(lazy[node] != 0) { // This node needs to be updated
   		tree[node] +=lazy[node]; // Update it

		if(a != b) {
			lazy[node*2] += lazy[node]; // Mark child as lazy
    			lazy[node*2+1] += lazy[node]; // Mark child as lazy
		}

   		lazy[node] = 0; // Reset it
  	}

    if(a > b || a > j || b < i) // Current segment is not within range [i, j]
		return;

  	if(a >= i && b <= j && tree[node]>x) { // Segment is fully within range
    		tree[node] += value;

		if(a != b) { // Not leaf node
			lazy[node*2] += value;
			lazy[node*2+1] += value;
		}

    		return;
	}
	if(a==b) return;

	update_tree(node*2, a, (a+b)/2, i, j,x, value); // Updating left child
	update_tree(1+node*2, 1+(a+b)/2, b, i, j,x, value); // Updating right child

	tree[node] = min(tree[node*2], tree[node*2+1]); // Updating root with max value
}


 // Query tree to get max element value within range [i, j]

int query_tree(int node, int a, int b, int i, int j) {

	if(a > b || a > j || b < i) return INT_MAX; // Out of range

	if(lazy[node] != 0) { // This node needs to be updated
		tree[node] += lazy[node]; // Update it

		if(a != b) {
			lazy[node*2] += lazy[node]; // Mark child as lazy
			lazy[node*2+1] += lazy[node]; // Mark child as lazy
		}

		lazy[node] = 0; // Reset it
	}

	if(a >= i && b <= j) // Current segment is totally within range [i, j]
		return tree[node];

	int q1 = query_tree(node*2, a, (a+b)/2, i, j); // Query left child
	int q2 = query_tree(1+node*2, 1+(a+b)/2, b, i, j); // Query right child

	int res = min(q1, q2); // Return final result

	return res;
}

int main() {
	int N,q,a;
	// freopen("file1.txt","r",stdin);
	cin>>N;

	for(int i = 0; i < N; i++)
        cin>>arr[i];
    //sort(arr,arr+N);
	build_tree(1, 0, N-1);

	memset(lazy, 0, sizeof lazy);
	cin>>q;
	while(q--)
	{
		cin>>a;
		update_tree(1, 0, N-1, 0, N-1,a, -1);
	}

	for(int i=0;i<N;i++)
        cout<<query_tree(1, 0, N-1, i,i)<<" ";

	//for(int i=0;i<N;i++)
		//cout<<tree[i+N]<<endl;
}

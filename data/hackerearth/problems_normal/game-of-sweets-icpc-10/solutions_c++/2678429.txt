#include<stdio.h>
#include<iostream>
#include<vector>
#include<string.h>
#include<algorithm>
#include<deque>
#include<map>
#include<set>
#include<stdlib.h>
#include<complex>
#include<math.h>
#include<queue>
#include<stack>
#include<functional>
using namespace std;
#define LL long long
#define si(x) scanf("%d",&x)
#define sc(x) scanf("%c",&x)
#define sl(x) scanf("%lld",&x)
#define all(x) x.begin(),x.end()
#define compress(x) {sort(all(x));(x).resize(unique(all(x))-(x).begin());}
template<class T> inline void umax(T &a,T b){if(a<b) a = b ;}
typedef pair<int, int> ii;
typedef pair<LL, LL> PII;
typedef pair<ii, int> iii;
typedef pair<ii, ii> iiii;
#define vl vector<LL>
#define vi vector<int>
#define vii vector<ii>
#define vvl vector< vl >
#define vvi vector< vi >
#define vvii vector< vii >
#define sz size()
#define pb push_back
#define F first
#define S second
#define mem(x,y) memset(x,y,sizeof(x))
#define rep(i,a,b) for(int i=(a);i<(b);i++)
#define repv(i,b,a) for(int i=(b);i>=(a);i--)
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define PDD pair<LL, LL>
#define LLD long double
 
const int maxn = 200000 + 10;
const int INF  = 1e9 + 7;
const int offset  =  205;
 
//const LL INF = 0x0123456789ABCDEFLL;
 
const double PI = 4*atan(1);
typedef complex<double> base;
vector<base> omega;
long long FFT_N;
void init_fft(long long n){
    FFT_N  = n;
    omega.resize(n);
    double angle = 2 * PI / n;
    for(int i = 0; i < n; i++)
        omega[i] = base( cos(i * angle), sin(i * angle));
}
void fft (vector<base> & a){
    long long n = (long long) a.size();
    if (n == 1)  return;
    long long half = n >> 1;
    vector<base> even (half),  odd (half);
    for (int i=0, j=0; i<n; i+=2, ++j)
    {
        even[j] = a[i];
        odd[j] = a[i+1];
    }
    fft (even), fft (odd);
    for (int i=0, fact = FFT_N/n; i < half; ++i)
    {
        base twiddle =  odd[i] * omega[i * fact] ;
        a[i] =  even[i] + twiddle;
        a[i+half] = even[i] - twiddle;
    }
}
void multiply (const vector<long long> & a, const vector<long long> & b, vector<long long> & res)
{
    vector<base> fa (a.begin(), a.end()),  fb (b.begin(), b.end());
    long long n = 1;
    while (n < 2*max (a.size(), b.size()))  n <<= 1;
    fa.resize (n),  fb.resize (n);
    
    init_fft(n);
    fft (fa),  fft (fb);
    for (size_t i=0; i<n; ++i)
        fa[i] = conj( fa[i] * fb[i]);
    fft (fa);
    res.resize (n);
    for (size_t i=0; i<n; ++i)
    {
        res[i] = (long long) (fa[i].real() / n + 0.5);
     //   res[i]%=mod;
    }
}
 
LL a[maxn];
vector <int> b; 
LL pre[maxn];
bool tab[2*10000005];
LL s = 0;
bool f [3*1000000] , f1[3*1000000];
int cnt[100001];
inline void solve(void){
        int n  , add = 0; LL  x;
        si(n);
        rep(i,0,n){
         sl(x) , b.pb(x);
         cnt[x]++;
         if(cnt[x] > 1){
            add = 1;
         }
        }
        //sort(all(b));
        compress(b);
        n = b.sz;
        rep(i,1,n){
            a[i - 1] = b[i] - b[i - 1]; 
        }
        n--;
        rep(i,0,n)s+=a[i];
        rep(i,1,n+1) pre[i] = pre[i-1] + a[i-1];
        LL ans=0;
        if(n<=2000){   // case 1
            set<LL> q;
            rep(i,1,n+1){
                rep(j,i,n+1){
                    LL s = pre[j] - pre[i-1];
                    if(q.find(s)==q.end())ans++ , q.insert(s); 
                }
            }
            cout << ans  + add << endl;
        }
        else if(n>=2000 && n <=20000){
           rep(i,1,n+1){
                rep(j,i,n+1){
                    LL s = pre[j] - pre[i-1];
                    if(tab[s] == false)ans++ , tab[s] = true; 
                }
            }
            cout << ans + add<< endl;
        } 
        else{
            vl a , b , res;
            rep(i,0,n+1) f[pre[i]] = true , f1[s - pre[i]] = true;
            rep(i,0,s+1){
                if(f[i]) a.pb(1);
                else a.pb(0);
            }
            rep(i,0,s+1){
                if(f1[i])b.pb(1);
                else b.pb(0); 
            } 
            multiply(a , b , res);
            rep(i,s+1 , res.sz){
                if(res[i] > 0) ans++;
            }
            cout << ans + add << endl;
        }
}
void init() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
}
int main(int argc, const char * argv[]){
    //freopen("positive.in","r",stdin);
    //freopen("positive.out","w",stdout);
    init();
    solve();
    return 0;
} 
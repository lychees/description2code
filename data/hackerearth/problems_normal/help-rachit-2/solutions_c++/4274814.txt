#include <iostream>
#include <bits/stdc++.h>
#include<cstdio>
#include<vector>
using namespace std;
long long int power(long long int x,long long int y,long long int p)
{
   long long  int res = 1;      // Initialize result
    x = x % p;  // Update x if it is more than or
                // equal to p
    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res*x) % p;
 
        // y must be even now
        y = y>>1; // y = y/2
        x = (x*x) % p;
    }
    return res;
}
 
// This function is called for all k trials. It returns
// false if n is composite and returns false if n is
// probably prime.
// d is an odd number such that  d*2<sup>r</sup> = n-1
// for some r >= 1
bool miillerTest(int d, int n)
{
    // Pick a random number in [2..n-2]
    // Corner cases make sure that n > 4
    int a = 2 + rand() % (n - 4);
 
    // Compute a^d % n
   long long int x = power(a, d, n);
 
    if (x == 1  || x == n-1)
       return true;
 
    // Keep squaring x while one of the following doesn't
    // happen
    // (i)   d does not reach n-1
    // (ii)  (x^2) % n is not 1
    // (iii) (x^2) % n is not n-1
    while (d != n-1)
    {
        x = (x * x) % n;
        d *= 2;
 
        if (x == 1)      return false;
        if (x == n-1)    return true;
    }
 
    // Return composite
    return false;
}
bool isPrime(int n)
{
    // Corner cases
    if (n <= 1 || n == 4)  return false;
    if (n <= 3) return true;
 
    // Find r such that n = 2^d * r + 1 for some r >= 1
    int d = n - 1;
    while (d % 2 == 0)
        d /= 2;
 int k=5;
    // Iterate given nber of 'k' times
    for (int i = 0; i <k ; i++)
         if (miillerTest(d, n) == false)
              return false;
 
    return true;
}
int main()
{
    
    int dp[10009];
    int i;
    int start=1;
    dp[1]=0;
    for(i=3;i<10000;i+=2)
    {
    	dp[i]=dp[i-2];
    	int j;
    	for(j=1;j<=4;j++)
    	{
    		start+=i-1;
    	    	if(isPrime(start))
    	    	dp[i]+=1;
    	}
    			
    	    	
    	
    	
    }
    int t;
    scanf("%d\n",&t);
    while(t--)
    {
    	int n;
    	scanf("%d",&n);
    	double x=1.0*dp[n]/(2*n-1);
    printf("%.6lf\n",x*100);

    }
    
    
    
     
    return 0;
}

#include <iostream>
#include <vector>
using namespace std;

vector<unsigned long long int> edges[100002];
unsigned long long int visited[100002];

unsigned long long int dfs(unsigned long long int node)
{
	visited[node]=1;
	unsigned long long int count=0;
	for(auto it = edges[node].begin();it!=edges[node].end();it++)
	{
		if(visited[*it]==0)
		{
			count = count +dfs(*it);
		}
		
	}
	count++;
	return (count);
}

unsigned long long int nc2(unsigned long long int no)
{
	unsigned long long int prod;
	prod = no * (no-1);
	prod = prod/2;
	return prod;
}

int main()
{
    unsigned long long int t,n,k,i,src,dest,groupCount,noWays,temp;
    unsigned long long mod =1000000007 ;
    cin>>t;
    while(t--)
    {
    	cin>>n>>k;
    	noWays =1;
    	for(i=1;i<=n;i++)
    	{
    		visited[i]=0;
    		edges[i].clear();
    	}
    	for(i=1;i<=k;i++)
    	{
    		cin>>src>>dest;
    		edges[src].push_back(dest);
    		edges[dest].push_back(src);
    	}
    	
    	
		for(i=1;i<=n;i++)
		{
			groupCount = 0;
			if(visited[i]==0)
			{
				groupCount = dfs(i);
				if(groupCount >2)
    			{
    				temp = nc2(groupCount);
    				noWays= ((noWays%mod) * (temp%mod))%mod;
    			
    			}
			}
		}
    
    	
    	
    	cout<<noWays<<endl;
    }
    return 0;
}

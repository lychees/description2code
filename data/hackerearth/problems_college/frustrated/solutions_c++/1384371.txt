//Jai Anand
#include <iostream>
using namespace std;
#include <cstdio>
#include <algorithm>
#include <vector>

#include <stack>
#include <cstring>
#include <cmath>
#include <cctype>

#include <cstdlib>
#include <map>
#include <list>
#include <string>
#include <set>
#include <queue>
#include <deque>

#define MOD 1000000007 //10^9 + 7
#define SIZE 100005 //10^5

#define getcx getchar_unlocked

template<class type>
inline void input(type &n)
{
   n=0;
   register int ch=getcx();
   int sign=1;
   while( ch < '0' || ch > '9' )
   {
      if(ch=='-')
         sign=-1; 
         ch=getcx();
   }

   while(  ch >= '0' && ch <= '9' )
           n   = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   
   n=n*sign;
}

inline void input(char str[])
{
    register char c = 0;
    register int i = 0;
    while (c < 33)
        c = getcx();

    while (c != '\n') {
        str[i] = c;
        c = getcx();
        i = i + 1;
    }
    str[i] = '\0';
}

#define ull unsigned long long
#define ll long long
#define ld long double

int npr=0, primes[1000000];
bool arr[10000007];

void markMultiples(bool arr[], int a, int n)
{
    int i = 2, num;
    while ( (num = i*a) <= n )
    {
        arr[num] = 1;
        ++i;
    }
}
 

int SieveOfEratosthenes(int n, bool arr[], int primes[])
{
    int k=0;
    if (n >= 2)
    {
        memset(arr, 0, n+1);
        for (int i=2; i<=n; ++i)
            if ( arr[i] == 0 )
            {
    primes[k++] = i;
                markMultiples(arr, i, n);
            }
    }
    return k;
}


//small large
bool issubSequence(char str1[], char str2[], int m, int n)
{
   int j = 0; 
 
   for (int i=0; i<n&&j<m; i++)
       if (str1[j] == str2[i])
         j++;
 
   return (j==m);
}


#define testcases() int var;  input(var); while(var--)

int main()
{ 
  npr = SieveOfEratosthenes(10000000, arr, primes);
  testcases()
  {
    int k;
     char x[105], y[105];
     cin>>k;
     cin>>x>>y;
     int* ind = upper_bound(primes, primes+npr, k);
     int xd = std::distance(primes, std::find(primes, primes + npr, *ind));
     xd--;
     int flag = 0;
     for(int i=xd; i>=0 ; i--)
     {
      char num[200];
      sprintf(num, "%d", primes[i]);
      if(issubSequence(num,x,strlen(num), strlen(x)) && issubSequence(num,y,strlen(num), strlen(x)))
      {
        cout<<num<<endl;
        flag = 1;
        break;
      }
     }
     if(flag==0)
     {
      cout<<"-1"<<endl;
     }
  }
  return 0;
}

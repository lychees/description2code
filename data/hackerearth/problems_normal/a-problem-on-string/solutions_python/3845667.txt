# Question is pretty str8 fwd, create a hash of X || Y and return each query's result in O(lengt of chain)

hashmap = {}

def memset(s):
	""" fills in the hashmap with the location of each alphabet in the string """
	for i, ch in enumerate(s):
		try:
			hashmap[ch].append(i)
		except:
			hashmap[ch] = [i]

# Take the input string and fill in the hash
n = int(raw_input())
s = raw_input().strip()
memset(s)

# Time to answer the queries
for xx in range(int(raw_input())):
	a,b = raw_input().strip().split()
	if a == b:
		# both the values are same, we need to answer from the same bucket
		# would be valid only if the len(bucket) > 1
		try:
			if len(hashmap[a]) <= 1:
				raise
			# answer would be nC2
			an = len(hashmap[a])
			print (an*(an-1)) // 2
		except:
			print 0
	else:
		# both values are different, check their hashmaps
		try:
			an, bn = len(hashmap[a]), len(hashmap[b])
			print an * bn
		except:
			# either a or b is not in S, print 0
			print 0
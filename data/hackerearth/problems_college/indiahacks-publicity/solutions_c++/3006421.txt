#include<bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define MP make_pair
#define PB push_back
#define SZ(a) (int)(a.size())
#define bitcount __builtin_popcountll
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define LET(it,container) __typeof(container.begin()) it(container.begin())
#define ITER(it,container) for(__typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define BS(vec,val) (int)(lower_bound(vec.begin(),vec.end(),val) - vec.begin())
#define PREC cout << setprecision(10) << fixed;
#define FI ios_base::sync_with_stdio(0); cin.tie(NULL);

#define DB(x) cerr << #x << ": " << x << " ";
//#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

#define LL long long
const int MOD = 1e9 + 7;
const int INF = 1e9 + 9;
const int MX = 1e5 + 5;

int n,e;
vector<int> G[MX];
int vis[MX];

void dfs(int node)
{
	vis[node] = 1;
	for(int i=0;i<G[node].size();i++)
	{
		int u = G[node][i];
		if(vis[u] == 0)
			dfs(u);
	}
}

int main()
{
	int t;
	cin >> t;
	while(t--)
	{
		cin >> n >> e;
		for(int i=0;i<n;i++)
		{
			G[i].clear();
			vis[i] = 0;
		}
		int x,y;
		for(int i=0;i<e;i++)
		{
			cin >> x >> y;
			G[x].PB(y);
			G[y].PB(x);
		}

		int ans = 0;
		for(int i=0;i<n;i++)
		{
			if(vis[i] == 0)
			{
				ans++;
				dfs(i);
			}
		}
		cout << ans << endl;
	}

	return 0;
}

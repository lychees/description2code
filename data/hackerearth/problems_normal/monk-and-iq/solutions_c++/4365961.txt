#include <cstdio>
#include <algorithm>

using namespace std;

typedef long long ll;

const int NMAX = (int)1e5 + 5;

struct vertex {
	int idx;
	int num;
	int l1;
	int l2;
};

struct vertex arr[NMAX];

ll cost(struct vertex &v)
{
	return (ll)v.num * ((ll)v.l1 + (ll)v.l2);
}

bool cost_cmp(struct vertex &v1, struct vertex &v2)
{
	ll c1 = cost(v1);
	ll c2 = cost(v2);
	if(c1 < c2) 
		return true;
	else
	if(c1 == c2)
		return v1.idx < v2.idx;

	return false;
}
void heapify(int i, int size)
{
	int left = 2*i;
	int right = 2*i+1;
	int smallest = i;

	if(left <= size && cost_cmp(arr[left], arr[smallest]))	
		smallest = left;
	
	
	if(right <= size && cost_cmp(arr[right], arr[smallest]))
		smallest = right;
	
	if(i != smallest) {
		swap(arr[i], arr[smallest]);
		heapify(smallest, size);
	}
}

void build_heap(int size)
{
	for(int i = size/2; i >= 1; i--)
		heapify(i, size);
}

void insert(int q, int size)
{
	arr[1].num++;
	arr[1].l1 = arr[1].l2;
	arr[1].l2 = q;
	heapify(1, size);
}

int main()
{
	int c,p,n,q;
	scanf("%d %d %d", &c, &p, &n);
	for(int i = 1; i <= c; i++) {
		arr[i].idx = i;
		arr[i].num = 0;
		arr[i].l1 = 0;
		arr[i].l2 = 0;
	}

	for(int i = 1; i <=n; i++) {
		scanf("%d", &arr[i].l2);
		arr[i].num = 1;
	}

	build_heap(c);

	for(int i = 0; i < p; i++) {
		if(!feof(stdin))
			scanf("%d", &q);
		else
			q = 0;

		printf("%d ", arr[1].idx);
		insert(q, c);
	}
	printf("\n");
}




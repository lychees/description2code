#pragma comment(linker, "/STACK:102400000,102400000")
#include <iostream>
#include <stdio.h>
#include <queue>
#include <algorithm>
#include <map>
#include <string.h>
#include <assert.h>
#include <set>
#include <cmath>
using namespace std;
#define vi vector<int>
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define SZ(x) (int)(x.size())
#define rep(i,a,b) for(int i=a;i<b;i++)
#define per(i,a,b) for(int i=b-1;i>=a;i--)
#define inf 1000000007
#define mod 1000000007
#define x first
#define y second
#define pi acos(-1.0)
#define DBG(x) cerr<<(#x)<<"="<<x<<"\n";
//#define dprintf(...) 
#define hash _hash
//#define dprintf(...) fprintf(outFile,__VA_ARGS__)
 
#define FOREACH(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)
#define ull unsigned long long
#define ll long long
#define N 3010
 
template <class T,class U>inline void Max(T &a,U b){if(a<b)a=b;}
template <class T,class U>inline void Min(T &a,U b){if(a>b)a=b;}
 
//FILE* outFile;
 
inline void add(int &a,int b){a+=b;while(a>=mod)a-=mod;}
 
int pow(int a,int b){
    int ans=1;
    while(b){
        if(b&1)ans=ans*(ll)a%mod;
        a=(ll)a*a%mod;b>>=1;
    }
    return ans;
}

char s[N];
int dp[N][N][3],c[N][N],f[N][N],K;
int g[128];
void solve(int n,int K){
    dp[0][0][0]=1;
    rep(i,0,n){
        int r=min(i,K);
        rep(j,0,r+1){
            rep(k,0,3)if(dp[i][j][k]){
                if(g[s[i]]){
                    add(dp[i+1][j][0],dp[i][j][k]);
                    if(j<K)add(dp[i+1][j+1][0],dp[i][j][k]);
                }
                else{
                    if(k<2)add(dp[i+1][j][k+1],dp[i][j][k]);
                    if(j<K)add(dp[i+1][j+1][0],dp[i][j][k]);
                }
            }
        }
    }
    int ans=0;
    rep(i,0,3)add(ans,dp[n][K][i]);
    ans=c[n][K]-ans;
    if(ans<0)ans+=mod;
    printf("%d\n",ans);
}
int L,R,d[N],h[N],n;
void mul(int &L,int &R,int m){
    //DBG(m)
    int l=m/3,r=min(m,K);
    if(l>r){
        printf("%d\n",c[n][K]);exit(0);
    }
    rep(i,0,K+3)h[i]=0;
    if(1){
        rep(i,L,R+1){
            rep(j,l,r+1){
                if(i+j>K)break;
                add(h[i+j],1LL*d[i]*f[m][j]%mod);
            }
        }
        L+=l;
        R=max(R+r,K);
        if(L>R){
            printf("%d\n",c[n][K]);exit(0);
        }
        rep(i,0,K+3)d[i]=h[i];
    }
    else{
        assert(0);
    }
}
int main(){
    int X=0;
    g['a']=g['e']=g['i']=g['o']=g['u']=g['y']=1;
    c[0][0]=1;
    rep(i,1,N){
        c[i][0]=1;
        rep(j,1,i+1){
            c[i][j]=(c[i-1][j-1]+c[i-1][j])%mod;
        }
    }
    scanf("%d%d%s",&n,&K,s);
    rep(i,0,n)X+=(g[s[i]]);
    int m=n/2;
    if(n&1)m++;
    if(K>=m||X>=m){
        solve(n,K);
        return 0;
    }
    dp[0][0][0]=1;
    rep(i,0,n){
        int r=min(i,K);
        rep(j,0,r+1){
            rep(k,0,3)if(dp[i][j][k]){
                if(k<2)add(dp[i+1][j][k+1],dp[i][j][k]);
                if(j<K)add(dp[i+1][j+1][0],dp[i][j][k]);
            }
        }
    }
    rep(i,1,n+1)rep(j,0,K+1){
        rep(k,0,3)add(f[i][j],dp[i][j][k]);
    }
    L=0,R=0;d[0]=1;
    int sum=0;
    rep(i,0,n)if(!g[s[i]]){
        int j=i;
        while(j<n&&!g[s[j]])j++;
        int len=j-i;
        if(len>=3)mul(L,R,len);
        else sum+=len;
        i=j-1;
    }
    //cerr<<L<<" "<<R<<"\n";
    int ans=0;
    rep(k,L,R+1){
        if(X+k>=m){
            add(ans,1LL*h[k]*c[X+sum][K-k]%mod);
        }
        else{
            int l=m-X-k,r=min(sum,K-k);
            if(l<=r)
            rep(i,l,r+1){
                add(ans,1LL*h[k]*c[sum][i]%mod*c[X][K-k-i]%mod);
            }
        }
    }
    ans=c[n][K]-ans;
    if(ans<0)ans+=mod;
    printf("%d\n",ans);
    return 0;
}
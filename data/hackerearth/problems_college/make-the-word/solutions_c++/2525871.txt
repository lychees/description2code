#include<bits/stdc++.h>
using namespace std;
#define f first
#define s second
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define all(v) v.begin(),v.end()
#define ll long long
#define mod 1000000007LL

struct Edge
{
    int from, to, cap, flow, index;
    Edge(int from, int to, int cap, int flow, int index) :
        from(from), to(to), cap(cap), flow(flow), index(index) {}
};

struct PushRelabel
{
    int N;
    vector<vector<Edge> > G;
    vector<int> excess;
    vector<int> dist, active, count;
    queue<int> Q;

    PushRelabel(int N) : N(N), G(N), excess(N), dist(N), active(N), count(2*N) {}

    void AddEdge(int from, int to, int cap)
    {
        G[from].push_back(Edge(from, to, cap, 0, G[to].size()));
        if (from == to) G[from].back().index++;
        G[to].push_back(Edge(to, from, 0, 0, G[from].size() - 1));
    }

    void Enqueue(int v)
    {
        if (!active[v] && excess[v] > 0)
        {
            active[v] = true;
            Q.push(v);
        }
    }

    void Push(Edge &e)
    {
        int amt = int(min(excess[e.from], int(e.cap - e.flow)));
        if (dist[e.from] <= dist[e.to] || amt == 0) return;
        e.flow += amt;
        G[e.to][e.index].flow -= amt;
        excess[e.to] += amt;
        excess[e.from] -= amt;
        Enqueue(e.to);
    }

    void Gap(int k)
    {
        for (int v = 0; v < N; v++)
        {
            if (dist[v] < k) continue;
            count[dist[v]]--;
            dist[v] = max(dist[v], N+1);
            count[dist[v]]++;
            Enqueue(v);
        }
    }

    void Relabel(int v)
    {
        count[dist[v]]--;
        dist[v] = 2*N;
        for (int i = 0; i < G[v].size(); i++)
            if (G[v][i].cap - G[v][i].flow > 0)
                dist[v] = min(dist[v], dist[G[v][i].to] + 1);
        count[dist[v]]++;
        Enqueue(v);
    }

    void Discharge(int v)
    {
        for (int i = 0; excess[v] > 0 && i < G[v].size(); i++) Push(G[v][i]);
        if (excess[v] > 0)
        {
            if (count[dist[v]] == 1)
                Gap(dist[v]);
            else
                Relabel(v);
        }
    }

    int GetMaxFlow(int s, int t)
    {
        count[0] = N-1;
        count[N] = 1;
        dist[s] = N;
        active[s] = active[t] = true;
        for (int i = 0; i < G[s].size(); i++)
        {
            excess[s] += G[s][i].cap;
            Push(G[s][i]);
        }

        while (!Q.empty())
        {
            int v = Q.front();
            Q.pop();
            active[v] = false;
            Discharge(v);
        }

        int totflow = 0;
        for (int i = 0; i < G[s].size(); i++) totflow += G[s][i].flow;
        return totflow;
    }
    vector<vector<Edge> > build()
    {
        return G;
    }
};
int main()
{
    int i,j,n,m;
    string s;
    cin>>s>>n;
    char ch;
    int k;
    m=s.size();
    int sz=m+2+(6*n)+n;
    PushRelabel flow(sz);
    int p=m,p1=m+(6*n);
    for(i=0;i<n;i++)
    {
        for(j=0;j<6;j++)
        {
            cin>>ch;
            for(k=0;k<m;k++)
                if(s[k]==ch)
                    flow.AddEdge(k+1,p+j+1,1);
            flow.AddEdge(p+j+1,p1+i+1,1);
        }
        p=p+6;
    }
    for(i=0;i<m;i++)
        flow.AddEdge(0,i+1,1);
    for(i=1;i<=n;i++)
        flow.AddEdge(i+(m+(6*n)),sz-1,1);
    if(flow.GetMaxFlow(0,sz-1)==m)
        printf("YES\n");
    else
        printf("NO\n");
    return 0;
}
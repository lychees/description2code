#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...) fprintf(stderr, s)

template<class T> inline void amin(T &a, const T &b) { if (a>b) a=b; }
template<class T> inline void amax(T &a, const T &b) { if (a<b) a=b; }

typedef long long LL;
typedef vector<LL> Arr;
typedef vector<Arr> Mat;

Mat identity(int n) {
    Mat r(n, Arr(n, 0));
    for (int i=0; i<n; i++) r[i][i] = 1;
    return r;
}
Mat mulMatMod(const Mat&a, const Mat&b, LL mod) {
    int m=a.size(), n=a[0].size(), p=b[0].size();
    Mat r(m, Arr(p, 0));
    for (int i=0; i<m; i++)
        for (int j=0; j<n; j++)
            for (int k=0; k<p; k++)
                r[i][k] = (r[i][k]+a[i][j]*b[j][k])%mod;
    return r;
}

Mat powMatMod(Mat a, LL b, LL mod) {
    Mat r = identity(a.size());
    for (;b; b>>=1) {
	if (b&1) r = mulMatMod(r, a, mod);
	a = mulMatMod(a, a, mod);
    }
    return r;
}
Arr mulMatArrMod(const Mat&a, const Arr&x, LL mod) {
    int m=a.size(), n=a[0].size();
    Arr r(m, 0);
    for (int i=0; i<m; i++)
        for (int j=0; j<n; j++)
            r[i] = (r[i]+a[i][j]*x[j]) % mod;
    return r;
}

const LL MOD = 1e9+7;
int T;
LL N;
int A[9];

int main() {
    Mat X[60];
    X[0] = Mat(9, Arr(9));
    REP (i, 3) REP (j, 3) REP (x, 3) REP (y, 3) {
	X[0][i*3+j][x*3+y] = abs(x-i) + abs(y-j) + abs(x+y-i-j);
    }
    REP (i, 59) X[i+1] = mulMatMod(X[i], X[i], MOD);
    
    scanf("%d", &T);
    REP ($, T) {
	scanf("%lld", &N);
	REP (i, 9) scanf("%d", A+i);
	Arr B(A, A+9);
	REP (i, 45) if (N & (1LL<<i)) B = mulMatArrMod(X[i], B, MOD);
	REP (i, 3) {
	    REP (j, 3) {
		printf("%d%c", (int)B[i*3+j], j==2?'\n':' ');
	    }
	}
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 100005;
int n, m;

struct E {
	int u, v, id;
};

bool comp(E e1, E e2) {
	return e1.id > e2.id;
}

struct UF {
    vector<int> par, rk;
    int sz;
    
    UF() {}
    UF(int _n) {
        sz = _n;
        par.resize(sz + 1), rk.assign(sz + 1, 0);
        for (int i = 0; i <= sz; ++i) {
            par[i] = i;
        }
    }
    
    int find(int x) {
        if (x != par[x]) par[x] = find(par[x]);
        return par[x];
    }
    
    bool same(int x, int y) {
        return find(x) == find(y);
    }
    
    void unite(int x, int y) {
        x = find(x), y = find(y);
        if (x == y) return;
        if (rk[x] < rk[y]) par[x] = y;
        else {
            par[y] = x;
            if (rk[x] == rk[y]) rk[x]++;
        }
    }
};

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int u, v;
	
	cin >> n >> m;
	
	vector<E> edges;
	
	repu(i, 0, m) {
		cin >> u >> v;
		if (u > v) swap(u, v);
		edges.push_back((E) {u, v, i});
	}
	
	sort(all(edges), comp);
	vector<bool> mark(m, true);
	UF uf(n);
	int ret = m;
	repu(i, 0, m) {
		if (!uf.same(edges[i].u, edges[i].v)) {
			uf.unite(edges[i].u, edges[i].v);
			mark[edges[i].id] = false;
			ret--;
		}
	}
	
	printf("%d\n", ret);
	repu(i, 0, m) {
		if (mark[i]) printf("%d\n", i + 1);
	}	
	
	return 0;
}

/*
Anton Gulikov
*/
#include <iostream>
#include <fstream>
#include <stack>
#include <cstdlib>
#include <cmath>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cassert>
#include <stdio.h>
#include <queue>

#define mp make_pair
#define pb push_back
#define foru(i,n) for(int i = 0; i < n; i++)
#define ford(i,n) for(int i = n - 1; i >= 0; i++)
#define forab(i,l,r) for(int i = l; i <= r; i++)
#define forabd(i,r,l) for(int i = r; i >= l; i--)
#define sqr(x) ((x) * (x))

const long long base = 1000000000 + 7;

using namespace std;

queue <int> q;
vector <int> g[111111];
int n,m;
int f[111111];

void solve()
{
	scanf("%d %d", &n, &m);
	for (int i = 1; i <= m; i++)
	{
		int x, y ,z;
		scanf("%d%d%d", &x, &y, &z);
		for (int j = 1 - (x == 1); j <= 3; j++) if (j != z)
		{
			g[x * 10 + j].push_back(y * 10 + z);
		}
	}
	q.push(10);
	for (int i = 0; i <= n * 100; i++) f[i] = -1;
	f[10] = 0;
	while (!q.empty())
	{
		int v = q.front();
		if (v / 10 == n)
		{
			cout << f[v] << endl;
			return;
		}
		q.pop();
		for (int j = 0; j < (int)g[v].size(); j++)
		{
			int u = g[v][j];
			if (f[u] == -1)
			{
				f[u] = f[v] + 1;
				q.push(u);
			}
		}
	}
	cout << -1 << endl;
}

int main(){
	ios_base :: sync_with_stdio(false);
	int test = 1;
	while (test--){
		solve();
	}
//2	cerr << (double)clock() / CLOCKS_PER_SEC << endl;
	return 0;
}
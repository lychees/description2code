#pragma comment(linker, "/STACK:102400000,102400000")
#include <iostream>
#include <algorithm>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <map>
#include <assert.h>
#include <cmath>
#include <queue>
#include <set>
#include <bitset>
using namespace std;
#define vi vector<int>
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define SZ(x) (int)(x.size())
#define rep(i,a,b) for(int i=a;i<b;i++)
#define per(i,a,b) for(int i=b-1;i>=a;i--)
#define inf 1000000007
#define mod 1000000007
#define x first
#define y second
#define pi acos(-1.0)
#define DBG(x) cerr<<(#x)<<"="<<x<<"\n";
//#define dprintf(...) 
#define hash _hash
//#define dprintf(...) fprintf(outFile,__VA_ARGS__)
 
#define FOREACH(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)
#define ull unsigned long long
#define ll long long
#define N 100010


template <class T,class U>inline void Max(T &a,U b){if(a<b)a=b;}
template <class T,class U>inline void Min(T &a,U b){if(a>b)a=b;}
 
//FILE* outFile;
 
inline void add(int &a,int b){a+=b;while(a>=mod)a-=mod;}


int pow(int a,int b){
    int ans=1;
    while(b){
        if(b&1)ans=ans*(ll)a%mod;
        a=(ll)a*a%mod;b>>=1;
    }
    return ans;
}

vi g[N];
int id[303][303],dfn[N],low[N],s[N],be[N],top,cnt,p;
void add(int a,int b,int c,int d){
    g[id[a][b]].pb(id[c][d]);
    g[id[c][d]].pb(id[a][b]);
}
void tarjan(int u,int fa=-1){
    dfn[u]=low[u]=++cnt;s[++top]=u;
    FOREACH(it,g[u]){
        int j=*it;
        if(j==fa)continue;
        if(dfn[j]==0)tarjan(j,u),Min(low[u],low[j]);
        else Min(low[u],dfn[j]);
    }
    if(dfn[u]==low[u]){
        ++p;int j;
        do{
            j=s[top--];
            be[j]=p;
        }while(j!=u);
    }
}
set<int>e[N];
int n,dir[][2]={1,0,0,1};
int get(int x){return (x%(n+1))*(x/(n+1));}
int main(){
    //freopen("A.in","r",stdin);
    //freopen("A.out","w",stdout);
    int j,k,i,ca=0,T,m=0;
    int m1,m2;
    scanf("%d%d%d",&n,&m1,&m2);
    rep(i,0,n+1)rep(j,0,n+1)id[i][j]=i*(n+1)+j;
    rep(i,0,m1){
        int b,w,b1,w1;
        scanf("%d%d%d%d",&b,&w,&b1,&w1);
        add(b,w,b1,w1);
    }
    char t[10];
    while(m2--){
        scanf("%d%d%s",&i,&j,t);
        int k1=t[0]=='B',k2=t[0]=='W';
        e[id[i][j]].insert(id[i+k1][j+k2]);
    }
    add(0,0,n,n);
    rep(i,0,n+1)
        rep(j,0,n+1){
            rep(k,0,2){
                int i1=i+dir[k][0],j1=j+dir[k][1];
                if(i1<=n&&j1<=n){
                    if(e[id[i][j]].find(id[i1][j1])!=e[id[i][j]].end())continue;
                    add(i,j,i1,j1);
                }
            }
        }
    int ok=1,sz=(n+1)*(n+1);
    rep(i,0,sz)if(!dfn[i]&&SZ(g[i])){
        if(m>1){ok=0;break;}
        m++;
        tarjan(i);
    }
    if(!ok){puts("-1");return 0;}
    int ans=-1;
    rep(i,0,sz)if(be[i]){
        FOREACH(it,g[i]){
            j=*it;
            if(be[i]!=be[j]){
                Max(ans,get(i)+get(j));
            }
        }
    }
    printf("%d\n",ans);
    //cerr<<1.*clock()/CLOCKS_PER_SEC<<"s\n";
    return 0;
}
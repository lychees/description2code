#include <iostream>
#include<vector>
#include<algorithm>
#include<cstring>
using namespace std;
long long inversions(const vector<int>& a, const vector<int>& b) {
  int n = a.size();
  vector<int> values(a);
  for (int x: b) values.push_back(x);
  sort(begin(values), end(values));
  vector<int> counts(2*n + 1);
  long long res = 0;
  for (int i = n - 1; i >= 0; --i) {
    // compute sum of prefix 1..rank(a[i]) - 1
    for (int v = lower_bound(begin(values), end(values), a[i]) - begin(values);
         v; 
         v -= v & -v)
      res += counts[v];
    //add 1 to point rank(b[i])
    for (int v = lower_bound(begin(values), end(values), b[i]) - begin(values) + 1;
         v <= 2*n;
         v += v & -v)
      counts[v]++;
  }
  return res;
}
int prime(long long x){
	for(int i=2;i*i<=x;i++){
		if(x%i==0) return 0;
	}
	return 1;
}
int main()
{
    int n,x;
    vector<int> a;
    vector<int> b;
    cin>>n;
    for(int i=0;i<n;i++){scanf("%d",&x);a.push_back(x);}
    for(int i=0;i<n;i++){scanf("%d",&x);b.push_back(x);}
    long long t=inversions(a,b);
    if(prime(t)) cout<<"MAGIC INVERSION\n";
    else cout<<"SIMPLE INVERSION\n";
    return 0;
}

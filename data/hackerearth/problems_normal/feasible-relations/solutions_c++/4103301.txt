#include <algorithm>
#include <cstdio>
#include <iostream>
#include <queue>
#include <set>
#include <stack>
#include <utility>
#include <vector>


typedef long long ll;

using namespace std;

struct union_find {
    vector<int> parent;
    union_find(int n) {
        parent = vector<int>(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }

    int find(int x) {
        if (parent[x] == x) {
            return x;
        } else {
            parent[x] = find(parent[x]);
            return parent[x];
        }
    }

    void merge(int x, int y) {
        parent[find(x)] = find(y);
    }
};


int main() {
	int T, N, K, x1, x2;
	string rel;
	bool flag;
	
	scanf("%d", &T);
	
	while(T--) {
		scanf("%d %d", &N, &K);
		
		union_find UF(N);
		vector<pair<int,int>> ineq;
		for(int i = 0; i < K; ++i) {
			cin>>x1>>rel>>x2;
			x1--;
			x2--;
			if(rel == "!=")
				ineq.push_back(make_pair(x1, x2));
			else
				UF.merge(x1, x2);
		}
		
		flag = true;
		for(int i = 0; i < ineq.size(); ++i) {
			if(UF.find(ineq[i].first) == UF.find(ineq[i].second)) {
				flag = false;
				break;
			}
		}
		
		if(flag)
			printf("YES\n");
		else
			printf("NO\n");
	}
	
    return 0;
}

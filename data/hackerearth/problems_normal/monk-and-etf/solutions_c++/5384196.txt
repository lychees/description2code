#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007

int arr[1000002];
vector<int>v;

void shark_s();
int main()
{
	shark_s();
	return 0;
}
int isprime[10000007];
vector<long long int>primes;
vector<int>vec[1<<20];
long long get_phi(long long x,vector<int> &val){
	long long res =x;
	for(int i=0;i<val.size();i++)
	{
		while(x%val[i]==0)
			x/=val[i];
		res = res/val[i]*(val[i]-1);
	}
	if(x>1)res = res/x*(x-1);
	return res;
}
void shark_s()
{
	isprime[1]=1;
	isprime[0]=1;
	for(int i=2;i<=1000000;i++)
	{
		if(!isprime[i]){
			for(int j=i*2;j<=1000000;j+=i){
				isprime[j]=1;
			}
			primes.push_back((long long)i);
		}

	}
	int t;
	scanf("%d",&t);
	while(t--)
	{
		long long l,r,k;
		scanf("%lld %lld %lld",&l,&r,&k);
		long long z=l;
		for(long long i=l;i<=r;i++)
			vec[i-l].clear();
		z=l;long long v1,v2,v3;
		/*for(int i=0;i<primes.size();i++)
		{
			v1 = l/(primes[i]*primes[i]);
			if(l%primes[i]>0)
				v1+=primes[i];
			for(long long j=v1;j<=r;j+=primes[i])
				vec[j-1].push_back(primes[i]);
		}*/
					for (int i=2;i<=1000000;i++)
		{
			if (isprime[i])
				continue;
			long long bnd=l/i*i;
			if (l%i>0)
				bnd+=i;
			for (long long j=bnd;j<=r;j+=i)
				vec[j-l].push_back(i);
		}

			/*//v1 =(long long)primes[i]*((long long)primes[i]);
			if(primes[i]>r)break;
			
			v2 = l/primes[i];
		int f=0;
			for(int j=0;;j++)
			{

				//cout<<primes[i]<<"#"<<"\n";
				if((primes[i]*(v2+j))>r)break;
				//cout<<primes[i]*(v2+j)<<" "<<mapa[primes[i]*(v2+j)]<<"\n";
					f++;
				mapa[primes[i]*(v2+j)] = mapa[primes[i]*(v2+j)]-mapa[primes[i]*(v2+j)]/primes[i];
			}
			if(f==0)break;
			//cout<<"1"<<"\n";
				*/
	int cnt=0;
			
		
		for (long long i=l;i<=r;i++)
		{
			long long Q=get_phi(i,vec[i-l]);
			if (Q%k==0)
				++cnt;
		}	
	printf("%0.6lf\n",(double)cnt/(double)(r-l+1));
	}
	return ;
}

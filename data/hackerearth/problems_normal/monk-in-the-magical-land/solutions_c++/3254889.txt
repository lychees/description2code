#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <string>
#include <map>
#include <set>
#include <math.h>
#include <stack>
#include <bitset>
#include <list>
#include <limits.h>
#include <iomanip>
#include <time.h>

using namespace std;

void testing (int position = 0){static clock_t clock_tStart;if (position==0){freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);clock_tStart = clock();}else {printf("\n\nTime taken: %fs\n\n", (double)(clock() - clock_tStart)/CLOCKS_PER_SEC);}}
void real_main();
int main ()
{
#ifdef WINDORO
testing(0);
#endif
    real_main();
#ifdef WINDORO
testing(1);
#endif
    return 0;
}
// --------------------------------- CODE HERE ------------------------------------------ 

#define ii pair<int,int>
#define iii pair<int,ii>
#define INF 2000000000
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector <int> vi;
typedef vector <ii> vii;
typedef vector <iii> viii;

int n, m, k;
int kunci[22];
int peti[111];
int value_peti[111];
int gems[111];

int gcd(int a, int b){
    if ( b==0 )
    {
        return a;
    }
    return gcd(b, a % b);
}

int jumlah_satu(int a){
    int ans = 0;
    while ( a!=0 )
    {
        if (a%2!=0)ans += 1;
        a/=2;
    }
    return ans;
}

void real_main()
{
    int t;
    cin >> t;
    
    while ( t-- )
    {
        cin >> n >> m >> k;
        
        for ( int i=0;i<n;i++ )cin >> kunci[i];
        for ( int i=0;i<m;i++ )cin >> peti[i], value_peti[i]=0;
        for ( int i=0;i<m;i++ )cin >> gems[i];
        
        // precompute
        // for every peti
        for ( int i=0;i<m;i++ )
        {
            // for every key
            for ( int j=0;j<n;j++ )
            {
                if ( gcd(kunci[j], peti[i]) != 1)
                {
                    value_peti[i] |= 1 << j;
                }
            }
        }
        
        int start = (1<< k) -1;
        int finish = start << (n-k);
        int ans = 0;
        for ( int i = start ;i<=finish;i++)
        {
            int temp = 0;
            for ( int j=0;j<m;j++ )
            {
                if ( i & value_peti[j] )
                {
                    temp += gems[j];
                }
            }
            if ( ans < temp && jumlah_satu(i) == k)
            {
                ans = temp;
                // cout << "ans "<<ans << " "<<i<<" "<<jumlah_satu(i) << endl;
            }
        }
        cout << ans << endl;
    }
    
}












#include <bits/stdc++.h>
#include <fstream>
#define INF 800000000000
#define MOD 1000000007
#define MAXN 100005
#define ins insert
#define pb push_back
#define mp make_pair
#define sz size
#define all(a) a.begin(), a.end()
#define rep(i, a, b) for(int i = a; i < b; ++i)
#define sd(n) scanf("%d",&n)
#define sll(n) scanf("%I64d",&n)
#define pdn(n) printf("%d\n",n)
#define plln(n) printf("%I64d\n",n)
#define pd(n) printf("%d ",n)
#define nl() printf("\n")
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vl;
typedef vector<ll> vi;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int, int> pii;

namespace patch
{
    template < typename T > std::string to_string( const T& n )
    {
        std::ostringstream stm ;
        stm << n ;
        return stm.str() ;
    }
}

ll modpow(ll base, ll exponent, ll modulus)
{
    ll result = 1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = (result * base) % modulus;
        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }
    return result;
}

ll gcd(ll u, ll v)
{
    return (v != 0) ? gcd(v, u % v) : u;
}

ll mulmod(ll a, ll b, ll c){
    ll x = 0, y = a%c;
    while(b > 0){
        if(b%2 == 1){
            x = (x+y) % c;
        }
        y = (y*2) % c;
        b /= 2;
    }
    return x%c;
}

int t, n1, n2;
int n, m;
string a, b;

int min(int x, int y, int z) 
{
   return min(min(x, y), z);
}
 
int editDistDP(string str1, string str2, int m, int n)
{
    // Create a table to store results of subproblems
    int dp[m+1][n+1];
 
    // Fill d[][] in bottom up manner
    for (int i=0; i<=m; i++)
    {
        for (int j=0; j<=n; j++)
        {
            // If first string is empty, only option is to
            // isnert all characters of second string
            if (i==0)
                dp[i][j] = j;  // Min. operations = j
 
            // If second string is empty, only option is to
            // remove all characters of second string
            else if (j==0)
                dp[i][j] = i; // Min. operations = i
 
            // If last characters are same, ignore last char
            // and recur for remaining string
            else if (str1[i-1] == str2[j-1])
                dp[i][j] = dp[i-1][j-1];
 
            // If last character are different, consider all
            // possibilities and find minimum
            else
                dp[i][j] = 1 + min(dp[i][j-1],  // Insert
                                   dp[i-1][j],  // Remove
                                   dp[i-1][j-1]); // Replace
        }
    }
 
    return dp[m][n];
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> t;
    while(t--) {
        cin >> n1 >> n2;
        cin >> n >> a;
        cin >> m >> b;
        int x = editDistDP(b, a, m, n);
        ll p, q;
        if(!x) {
            p = n1;
            q = n2;
            q += 10*n;
        }
        else {
            p = n1;
            q = n2;
            p += x*5;
            //q -= x*5;
        }
        cout << p << '\n';
        cout << q << '\n';
        if(p == q)
            cout << "Tie\n";
        else if(p > q) {
            cout << "Swapnil\n";
        }
        else
            cout << "Friend\n";
    }
    return 0;
}
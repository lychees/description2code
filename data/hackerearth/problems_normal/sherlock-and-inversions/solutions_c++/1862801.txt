#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<iomanip>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<climits>
#include<cmath>
#include<cctype>


#define pb push_back
#define mp make_pair
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define ren(i,a,b) for(int i=a;i>=b;i--)
#define ff first
#define ss second
#define pll pair<long long int,long long int>
#define pii pair<int,int>
#define vll vector<long long int>  
#define vii vector<int>
#define gi(n) scanf("%d",&n)
#define gll(n) scanf("%lld",&n)
#define gstr(n) scanf("%s",n)
#define gl(n) cin >> n
#define oi(n) printf("%d",n)
#define oll(n) printf("%lld",n)
#define ostr(n) printf("%s",n)
#define ol(n) cout << n
#define os cout<<" "
#define on cout<<"\n"
#define o2(a,b) cout<<a<<" "<<b
#define all(n) n.begin(),n.end()
#define present(s,x) (s.find(x) != s.end()) 
#define cpresent(s,x) (find(all(s),x) != s.end()) 
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
#define block 320
using namespace std;
 
typedef unsigned long long int ull;
typedef long long int ll;
typedef vector<vector<ll> > mat;

struct node
{
	int l,r,i;
}q[100005];

ll bit[100005]={0},n,m,a[100005],b[100005],ans[100005],inv=0;

bool cmp(node x,node y)
{
	if(x.l/block!=y.l/block)
	return x.l<y.l;
	return x.r<y.r;
}

void upd(int i,int v)
{
	while(i<=n)
	{
		bit[i]+=v;
		i+=(i&(-i));
	}
}

ll sum(int i)
{
	ll x=0;
	while(i)
	{
		x+=bit[i];
		i-=((-i)&i);
	}
	return x;
}

int main()
{ios_base::sync_with_stdio(false);
//freopen("input.txt","r",stdin);
//freopen("output.txt","w",stdout);
cin>>n>>m;
rep(i,0,n-1)
{
	gl(a[i]);
	b[i]=a[i];
}
sort(b,b+n);
rep(i,0,n-1)
a[i]=(lower_bound(b,b+n,a[i])-b)+1;

rep(i,0,m-1)
{
	cin>>q[i].l>>q[i].r;
	q[i].l--;q[i].r--;
	q[i].i=i;
}
sort(q,q+m,cmp);

int cl=0,cr=0;
rep(i,0,m-1)
{
	int l=q[i].l,r=q[i].r;
	while(cl<l)
	{
		//ol(inv);
		inv-=sum(a[cl]-1);
		upd(a[cl],-1);
		cl++;
		//ol(sum(a[cl]-1));on;
	}
	while(cl>l)
	{
		inv+=sum(a[cl-1]-1);
		
		upd(a[cl-1],1);
		cl--;
	}
	while(cr<=r)
	{
		inv+=(cr-cl-sum(a[cr]));
		upd(a[cr],1);
		cr++;
		//ol(inv);on;
	}
	while(cr>r+1)
	{
		inv-=(cr-cl-sum(a[cr-1]));
		upd(a[cr-1],-1);
		cr--;
	}
	
	ans[q[i].i]=inv;
}
rep(i,0,m-1)
{
	ol(ans[i]);on;
}
return 0;
}
#include<bits/stdc++.h>

#define end cout << endl
#define eb push_back
#define pb pop_back
#define size(a) int(a.size())
//for traversing the container (bcoz we cannot access linked list etc with direct index)
//c stands for container and it for iterator
#define tr(c, it) \
		for(typeof(c.begin()) it=c.begin() ; it != c.end() ; it++)
		
#define all(c) c.begin(), c.end()
#define present(container, element) (container.find(element) != container.end()) //whether the element is present in the container

#define trace2(x, y)             cout <<#x<<": "<<x<<" | "<<#y<<": "<<y<< endl;
#define trace3(x, y, z)          cout <<#x<<": "<<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl;
#define trace4(a, b, c, d)       cout <<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl;
#define trace5(a, b, c, d, e)    cout <<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<<": "<<e<<endl;

using namespace std;

typedef long long int ll;
typedef vector < int > vi;
typedef vector < vi > vvi;
typedef vector < ll > vll;
typedef vector < vll > vvll;

typedef pair < int , int > ii;


//cin is faster than scanf after sync is off bcoz scanf need to interpret their format string argument
// at runtime while with cin it happens at compilation time

int main()
{
	//it off the synchronization of with stdio and thus saves time but then you cannot use scanf and cin together
	std::ios_base::sync_with_stdio(false);
	ll n, i;
	
	cin >> n;
	
	ll A[n];
	
	for(i=0; i<n; i++)
		cin >> A[i];
	
	//queue < ll > Q;
	ll left[n], right[n], ans=0;
	left[0]=1;
	for(i=1; i<n; i++)
	{
		
		if(A[i]>A[i-1])
			left[i]=left[i-1]+1;
		//else if(A[i]==A[i-1])
		//	left[i]=left[i-1];
		else
			left[i]=1;
			
	//	trace4(i, A[i-1], A[i], left[i]);
	}
	right[n-1]=1;
	for(i=n-2; i>=0; i--)
	{
		
		if(A[i]>A[i+1])
			right[i]=right[i+1]+1;
		//else if(A[i]==A[i+1])
		//	right[i]=1;
		else
			right[i]=1;
	
		//trace4(i, A[i+1], A[i], right[i]);
		
	}
	
	for(i=0; i<n; i++)
	{
		ans += max(left[i], right[i]);
		
		//trace4(i, ans, right[i], left[i]);	
	}
	
	cout << ans << endl;
		
	
	return 0;
}

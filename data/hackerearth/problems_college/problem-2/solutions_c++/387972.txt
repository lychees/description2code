#include<stdio.h>
#include<iostream>
#include<algorithm>
using namespace std;
struct node
{
    int sal,children;
    node *arr[50];
};
typedef struct node node;
void recur_sol(node *n)
{
    //int child=0;

    for(int i=0;i<n->children;i++)
        if(n->arr[i])
        {
            if(!(n->arr[i]->sal))
            recur_sol(n->arr[i]);
            //if(!(n->sal))
             n->sal+=n->arr[i]->sal;
        }
    if(!(n->children)) n->sal=1;
    //cout<<n->sal<<"\n";
    return ;//child+n->sal;
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n,sol=0,visit[45]={0};
        node *ptr[45]={NULL};
        scanf("%d",&n);
        for(int i=0;i<n;i++)
        {
            char str[45];
            int k=0;
            if(!ptr[i])
             ptr[i]=(node *)malloc(sizeof(node));
            scanf("%s",str);
            ptr[i]->sal=0;
            for(int j=0;str[j]!='\0';j++)
                if(str[j]=='Y')
            {
                //cout<<i<<"->"<<j<<"\n";
                visit[j]=1;
               if(!ptr[j])
                ptr[j]=(node *)malloc(sizeof(node));
               ptr[i]->arr[k++]=ptr[j];
            }
            ptr[i]->children=k;
        }
        for(int i=0;i<n;i++)
            if(!visit[i])
            {
                //cout<<i<<"\n";
            recur_sol(ptr[i]);
            }
        for(int i=0;i<n;i++)
            sol+=ptr[i]->sal;
        printf("%d\n",sol);

    }
}

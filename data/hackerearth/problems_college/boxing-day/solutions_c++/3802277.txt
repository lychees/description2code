#include<bits/stdc++.h>
using namespace std;
int findParent(int i,vector<int> &parent)
{
	if(parent[parent[i]]!=parent[i])
	parent[i]=findParent(parent[i],parent);
	return parent[i];
}
void unionNodes(int a,int b, vector<int> &parent, vector<int> &size)
{
	int parent_a=findParent(a,parent);
	int parent_b=findParent(b,parent);
	if(parent_a==parent_b)
	return;
	/*if(size[parent_a]<=size[parent_b])
	{
		size[parent_b]+=size[parent_a];
		parent[parent_a]=parent_b;
	}*/
	//else
	{
		size[parent_a]+=size[parent_b];
		parent[parent_b]=parent_a;
	}
	return;
}
int main()
{
	int t,n,e,a,b;
	//cin>>t;
	//while(t--)
	{
		vector<int> parent;
		vector<int> size;
		cin>>n>>e;
		for(int i=0;i<n;i++)
		{
			parent.push_back(i);
			size.push_back(1);
		}
		for(int i=0;i<e;i++)
		{
			cin>>a>>b;
			a-- ; b--;
			unionNodes(a,b,parent,size);	
		}
	
		int nos=0;
		for(int i=0;i<n;i++)
		{
			if(findParent(i,parent)==i)
			nos++;
		}
		cout<<nos<<"\n";
	}
}
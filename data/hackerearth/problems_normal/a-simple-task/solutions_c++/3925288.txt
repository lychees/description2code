#include <bits/stdc++.h>

using namespace std; 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
      cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
      const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

#define REP(i, n) for(int i=0; i<(n); i++)
#define si(x) scanf("%d",&x)
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define V vector
typedef V<int> VI;
typedef long long LL;
typedef pair<int, int> PII;
#define maxs 109
int ar[maxs];
int n;

bool can(int val) {
	if(val <= 1) return false;
	REP(i, n) {
		if(ar[i]%val != 0) return false;
	}	
	return true;
}

int main() {
	ios::sync_with_stdio(false);
	cin >> n;
	int m = INT_MAX;
	REP(i, n) {
		cin >> ar[i];
		m = min(m, ar[i]);
	}	
	int mi = INT_MAX;
	REP(i, n) {
		ar[i] -= m;
		if(ar[i] == 0) continue;
		mi = min(mi, ar[i]);
	}
	set<int> st;
	for(int i=1; i*i <= mi; i++ ) {
		if(mi%i == 0) {
			if(can(i)) {
				st.insert(i);
			}
			if(can(mi/i)) {
				st.insert(mi/i);
			}
		}
	}
	for(int v : st) {
		cout << v << " ";
	}
	cout << endl;
	return 0;
}
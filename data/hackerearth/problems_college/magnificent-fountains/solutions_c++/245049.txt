// Hackerearth - Magnificent Fountains
// Maths
// Find the LCM of n given numbers.

#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#define MOD 1000000007

using namespace std;
typedef long long LL;
typedef long double LD;

LL powerMod(LL a5, LL b5)
{
  LL p5 = 1;

  // 0**0
  if(b5 == 0) return 1 % MOD;

  while(b5)
  {
    if(b5 % 2) p5 = LL(p5) * a5 % MOD;
    if(b5 /= 2) a5 = LL(a5) * a5 % MOD;
  }

  return p5;
}

LL multiplyMod(LL a, LL b) 
{
  LL mod = MOD;

  a %= MOD;
  b %= MOD;
  LD result = a;
  result *= b;
  LL c = LL(result / mod);
  a *= b;
  a -= c * mod;
  a %= mod;
  if(a < 0) a += mod;

  return a;
}

int n;
LL values[1000005];
LL ans, primeFactors[10005];

void solve()
{
  // Find the prime factors count for all values.
  for(int i = 0; i < n; ++i)
  {	
    int k = 2, count = 0;
    while(values[i] > 1) 
    {
      while(values[i] % k == 0) values[i] /= k, ++count;
      if(primeFactors[k] < count) primeFactors[k] = count;
      ++k; count = 0;
    }
  }  

  ans = 1;
  for(int i = 0; i <= 10000; ++i)
   ans = multiplyMod(ans, powerMod(i, primeFactors[i]));
}

int main()
{
  int t;

  cin >> t;
  memset(primeFactors, 0, sizeof primeFactors);
  while(t--)
  {    
    cin >> n;
    for(int i = 0; i < n; ++i) cin >> values[i];    

    solve();
    cout << ans << endl;
  }

  return 0;
}
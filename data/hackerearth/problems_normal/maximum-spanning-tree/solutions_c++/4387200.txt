#include <iostream>
#include<algorithm>
#include<utility>
#include<functional>
using namespace std;

int root(int arr[], int i)
{ while(arr[i]!=i)
{ arr[i]=arr[arr[i]];
i=arr[i];}
return i;}
int union1(int arr[], int a, int b)
{ int root_a=root(arr, a);
int root_b=root(arr, b);
if(root_a==root_b)
return 0;
else
{  arr[root_a]=arr[root_b];
	return 1;}}
long long int kruskal(int arr[], int m, pair<long int, pair<int,int>> v[])
{  long long int mincost=0;
	for(int i=m-1; i>0; i--)
{ if(union1(arr, v[i].second.first, v[i].second.second))
       mincost+=v[i].first;}
       return mincost;}
      
int main()
{  
    int t, n, m, a, b, c, i;
    cin>>t;
    while(t--)
    {
    cin>>n>>m;
    pair<long int, pair<int, int>> v[m];
    int arr[n+1];
    for(i=1; i<=n; i++)
    arr[i]=i;
    for(i=0; i<m; i++)
    { cin>>a>>b>>c;
    v[i]=make_pair(c,make_pair(a, b));}
    sort(v, v+m);
    cout<<kruskal(arr, m, v)<<endl;}
    return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:16777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
using namespace std;
#define FOR(i, a, b) for(int i=(a);i<(b);i++)
#define RFOR(i, b, a) for(int i=(b)-1;i>=(a);--i)
#define FILL(A,value) memset(A,value,sizeof(A))
#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979
#define x0 ikjnrmthklmnt
#define y0 lkrjhkltr
#define y1 ewrgrg
typedef long long Int;
typedef unsigned long long UInt;
typedef vector<int> VI;
typedef pair<int, int> PII;
typedef pair<Int, Int> PLL;
typedef pair<double, double> PDD;
typedef complex<double> base;
const int INF = 1000000000;
const int BASE = 1000000007;
const int MAX = 100007;
const int MAX2 = 7777;
const int MAXE = 100000;
const int ADD = 1000000;
const int MOD = 1000000007;
const int CNT = 800;
vector<PII> G[MAX];
struct DSU
{
	int n;
	int * p;
	DSU() {}
	DSU(int N)
	{
		n = N;
		p = new int[n];
		FOR(i,0,n)
		{
			p[i] = i;
		}
	}
	int Find(int v)
	{
		if (v == p[v]) return v;
		return p[v] = Find(p[v]);
	}
	bool Union(int a , int b)
	{
		a = Find(a);
		b = Find(b);
		if (a != b)
		{
			p[b] = a;
			return 1;
		}
		return 0;
	}
};
vector<PII> up[MAX];
multiset<int> S[MAX];
bool D[MAX];
VI cmp;
int sz[MAX];
void dfs(int v, int p)
{
	cmp.push_back(v);
	sz[v] = 1;
	FOR(i,0,G[v].size())
	{
		int to = G[v][i].first;
		if (to == p) continue;
		if (D[to]) continue;
		dfs(to, v);
		sz[v] += sz[to];
	}
}
void dfs2(int v, int p, int d, int boss)
{
	up[v].push_back(MP(d , boss));
	FOR(i,0,G[v].size())
	{
		int to = G[v][i].first;
		if (to == p) continue;
		if (D[to]) continue;
		dfs2(to, v , max(d , G[v][i].second) , boss);
	}
}
void build(int v)
{
	cmp.clear();
	dfs(v, -1);
	while (sz[v] > cmp.size() / 2 + 1)
	{
		int id = -1;
		int mx = -1;
		FOR(i,0,G[v].size())
		{
			int to = G[v][i].first;
			if (D[to]) continue;
			if (sz[to] > sz[v]) continue;
			if (sz[to] > mx)
			{
				mx = sz[to];
				id = to;
			}
		}
		v = id;
	}
	dfs2(v , -1 , 0, v);
	D[v] = 1;
	FOR(i,0,G[v].size())
	{
		int to = G[v][i].first;
		if (D[to]) continue;
		build(to);
	}
}
int main()
{
    //freopen("in.txt", "r", stdin);
    //freopen("distance.in",  "r", stdin);
    //freopen("distance.out", "w", stdout);
    //freopen("out.txt" , "w" , stdout);
	int n , m;
	cin >> n >> m;
	vector<pair<int , PII > > E;
	FOR(i,0,m)
	{
		int a , b , c;
		scanf("%d%d%d" , &a , &b , &c);
		--a;--b;
		E.push_back(MP(c , MP(a , b)));
	}
	sort(ALL(E));
	DSU dsu(n);
	FOR(i,0,m)
	{
		int a = E[i].second.first;
		int b = E[i].second.second;
		int c = E[i].first;
		if (dsu.Union(a , b))
		{
			G[a].push_back(MP(b , c));
			G[b].push_back(MP(a , c));
		}
	}
	FOR(i,0,n)
	{
		if (!D[i])
		{
			build(i);
		}
	}
	int q;
	cin >> q;
	FOR(tt,0,q)
	{
		char ch;
		int x;
		cin >> ch >> x;
		--x;
		if (ch == '+')
		{
			FOR(i,0,up[x].size())
			{
				int v = up[x][i].second;
				S[v].insert(up[x][i].first);
			}
		}
		if (ch == '-')
		{
			FOR(i,0,up[x].size())
			{
				int v = up[x][i].second;
				S[v].erase(S[v].find(up[x][i].first));
			}
		}
		if (ch == '?')
		{
			int res = INF + 47;
			FOR(i,0,up[x].size())
			{
				int v = up[x][i].second;
				if (S[v].empty()) continue;
				res = min(res , max(up[x][i].first , *S[v].begin()));
			}
			if (res == INF + 47)
				res = -1;
			printf("%d\n" , res);
		}
	}
    return 0;
}
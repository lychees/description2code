#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<cstdio>
#include<numeric>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<set>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<list>
#include<cmath>
#include<bitset>
#include<cassert>
using namespace std;
vector<int>g[100007];
bool used[100007];
int a[100007], b[100007], inva[100007];
int col[100007];
void dfs(int v, int c)
{
	used[v] = true;
	col[v] = c;
	for (int i = 0; i < g[v].size(); i++)
	{
		int to = g[v][i];
		if (!used[to])
		{
			dfs(to, c);
		}
	}
}
bool cmp(int x, int y)
{
	return inva[x] < inva[y];
}
int main()
{
	///freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	int t;
	scanf("%d", &t);
	for (int tt = 1; tt <= t; tt++)
	{
		int n, m;
		scanf("%d%d", &n, &m);
		for (int i = 1; i <= n; i++)
		{
			g[i].clear();
			used[i] = false;
		}
		for (int i = 1; i <= n; i++)
		{
			scanf("%d", &a[i]);
			inva[a[i]] = i;
		}
		for (int i = 1; i <= n; i++)
		{
			scanf("%d", &b[i]);
		}
		for (int i = 1; i <= m; i++)
		{
			int u, v;
			scanf("%d%d", &u, &v);
			g[u].push_back(v);
			g[v].push_back(u);
		}
		int cnt = 1;
	//	sort(b + 1, b + 1 + n, cmp);
		for (int i = 1; i <= n; i++)
		{
			if (!used[i])
			{
				dfs(i, cnt);
				cnt++;
			}
		}
		for (int i = 1; i <= n; i++)
		{
			used[i] = false;
		}
		bool ok = true;
		for (int i = 1; i <= n; i++)
		{
			int curc = col[i];
			int j = i;
			while (!used[j])
			{
				if (col[j] != curc) ok = false;
				used[j] = true;
				j = inva[b[j]];
			}
		}
		if (ok)
		{
			printf("YES\n");
		}
		else
		{
			printf("NO\n");
		}
	}
}

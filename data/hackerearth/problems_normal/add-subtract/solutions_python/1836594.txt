def get_combinations(Arr, no_equal_elems, no_elems):
	for i in xrange(0, no_elems-no_equal_elems+1):
		yield Arr[i:i+no_equal_elems]


if __name__ == '__main__':
	t = int(raw_input().strip())
	for k in xrange(t):
		temp = raw_input().strip().split(' ')
		no_arr_elems, no_equal_elems = int(temp[0]), int(temp[1])
		del temp
		Arr = [int(x) for x in raw_input().strip().split(' ')]
		Arr.sort()
		
		combinations = get_combinations(Arr, no_equal_elems, no_arr_elems)
		del Arr, no_arr_elems, no_equal_elems
		min_cost = 0
		
		first_combination = next(combinations)
		min_elem, max_elem = min(first_combination), max(first_combination)
		
		for elem in first_combination:
			diff = min_elem - elem
			if diff > 0:
				min_cost += 3*diff
			elif diff < 0:
				min_cost += (-5*diff)
		
		for i in xrange(min_elem+1, max_elem+1):
			cost = 0
			for elem in first_combination:
				diff = i - elem
				if diff > 0:
					cost += 3*diff
				elif diff < 0:
					cost += (-5*diff)
			min_cost = min(min_cost, cost)
			
		del first_combination
		
		for co in combinations:
			min_elem, max_elem = min(co), max(co)
			for i in xrange(min_elem, max_elem+1):
				cost = 0
				for elem in co:
					diff = i - elem
					if diff > 0:
						cost += 3*diff
					elif diff < 0:
						cost += (-5*diff)
				min_cost = min(min_cost, cost)
		print min_cost
#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second
#define INPUT freopen("clash.inp","r",stdin)
#define OUTPUT freopen("clash.out","w",stdout)
#define FOR(i,l,r) for(auto i=(l);i<=(r);i++)
#define REP(i,l,r) for(auto i=(l);i<(r);i++)
#define FORD(i,l,r) for(auto i=(l);i>=(r);i--)
#define REPD(i,l,r) for(auto i=(l);i>(r);i--)
#define ENDL printf("\n")
#define debug 1

typedef long long ll;
typedef pair<int,int> ii;

const int inf=1e9;
const ll linf=1e16;
const int MOD=1e9+7;
const int N=2505;

int n,n1,prize,add,sub;
ll f[2][N];
int a[N],p[N];
void prepare(){
    scanf("%d%d%d%d",&n,&prize,&sub,&add);
    FOR(i,1,n) scanf("%d",a+i);
    FOR(i,1,n) p[i]=a[i];
    sort(p+1,p+n+1);
    n1=unique(p+1,p+n+1)-p-1;
    FOR(i,1,n) a[i]=lower_bound(p+1,p+n1+1,a[i])-p;
//    FOR(i,1,n) cout<<a[i]<<" ";ENDL;
}
ll cost(int x,int y){
    if (x<y) return 1LL*add*(p[y]-p[x]);
    return 1LL*sub*(p[x]-p[y]);
}
ll solve(){
    FOR(i,1,n1) f[1][i]=-cost(a[1],i);
    FOR(i,2,n){
        int cur=i&1,last=cur^1;
        fill(f[cur]+1,f[cur]+n1+1,-linf);
        ll bestval=-linf;
        FOR(j,1,n1){
            bestval=max(bestval,f[last][j]);
            f[cur][j]=max(f[cur][j],max(bestval,f[last][j]+prize)-cost(a[i],j));
        }
        bestval=-linf;
        FORD(j,n1,1){
            bestval=max(bestval,f[last][j]);
            f[cur][j]=max(f[cur][j],bestval-cost(a[i],j));
        }
//        FOR(j,1,n1) cout<<f[cur][j]<<" ";ENDL;
    }
    return *max_element(f[n&1]+1,f[n&1]+n1+1);
}
int main(){
//    freopen("input.inp","r",stdin);
    prepare();
    cout<<solve();
}

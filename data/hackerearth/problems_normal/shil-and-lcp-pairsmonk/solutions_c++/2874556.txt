#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_pbds;

typedef long long LL;

typedef tree<
    int,
    null_type,
    less<int>,
    rb_tree_tag,
    tree_order_statistics_node_update>
ordered_set;
//find_by_order
//order_of_key

#define FO(i,a,b) for (int i = (a); i < (b); i++)

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );
#define ALL(v) v.begin(),v.end()

#define X first
#define Y second
#define MP make_pair

typedef pair<int,int> pint;
typedef map<int,int> mint;

void show() {cout<<'\n';}
template<typename T,typename... Args>
void show(T a, Args... args) { cout<<a<<" "; show(args...); }
template<typename T>
void show_c(T& a) { for ( auto &x:a ){ cout<<x<<" ";}cout<<endl;  }

#define SIZE 1000100

struct NODE{
    int sum;
    NODE* edge[26];
    NODE(){
        //words=prefix=0;
        sum = 0;
        for (int i=0;i<26;++i){
            edge[i]=NULL;
        }
    }
    ~NODE(){
        for (int i=0;i<26;++i){
            if ( edge[i]!=NULL ){
                delete edge[i];
            }
        }
    }
}*root;

LL ans[SIZE];
int n=0;
void add(NODE *v,char* word,int dep){

    n = max( n,dep );

    if ( word[0]=='\0' ){
        ans[ dep ] += v->sum;
        v->sum++;
    }else{
        if ( v->edge[ word[0]-'a' ]== NULL ){
            v->edge[ word[0]-'a' ]=new NODE();
        }
        ans[ dep ] += ( v->sum ) - ( v->edge[ word[0]-'a' ]->sum  );
        add(v->edge[ word[0]-'a' ],word+1,dep+1);
        v->sum++;
    }
}


char str[SIZE];

int main(){

   

    root = new NODE();

    int q;
    scanf("%d",&q);
    while ( q-- ){
        scanf("%s",str);
        add( root,str,0 );
    }

    for (int i=0;i<=n;++i){
        if ( i )printf(" ");
        printf("%lld",ans[i]);
    }
    printf("\n");



    return 0;
}

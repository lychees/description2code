#include <iostream>
using namespace std;
long long powe(int a, int b, int MOD)
{
	long long x=1,y=a; 
	while(b > 0)
	{
		if(b%2 == 1)
		{
			x=(x*y);
			if(x>MOD) x%=MOD;
		}
		y = (y*y);
		if(y>MOD) y%=MOD; 
		b /= 2;
	}
	return x;
}

/* 	Modular Multiplicative Inverse
	Using Euler's Theorem
	a^(phi(m)) = 1 (mod m)
	a^(-1) = a^(m-2) (mod m) */
long long InverseEuler(int n, int MOD)
{
	return powe(n,MOD-2,MOD);
}
long long int mo=1000000007;
int main()
{  
	int t;
	cin >> t;
	while(t--)
	{
		long long int n;
		cin >> n;
		long long int ans1=(n*powe(n-1,2,mo))%mo;
		ans1=(ans1*InverseEuler(4,mo))%mo;
		cout << ans1 << " ";
		ans1=(((n*(n-1))%mo)*(2*n-1))%mo;
		ans1=(ans1*InverseEuler(6,mo))%mo;
		cout << ans1 << endl;
	}
	
    return 0;
}

#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}



template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}

int main() {
    ios_base::sync_with_stdio ( false );
    cout.setf(ios::fixed);
    cout.precision(6);
    const int N=1000005;
    vi minPrime ( N + 1 );
    vi primes;
    for ( int i = 2; i * i <= N; ++i ) {
        if ( minPrime[i] == 0 ) { //if i is prime
            for ( int j = i * i; j <= N; j += i ) {
                minPrime[j] = i;
            }
        }
    }
    for ( int i = 2; i <= N; ++i ) {
        if ( minPrime[i] == 0 ) {
            primes.push_back ( i );
        }
    }
//     cout<<vl ( primes.begin(),primes.begin() +10 ) <<endl;
    inrep {
        ll l,r,k;
        cin>>l>>r>>k;

        vl phi ( r-l+1 );
        vl found ( r-l+1 );
        rep ( i,r-l+1 ) {
            found[i]=l+i;
            phi[i]=l+i;
        }
        for ( int p: primes ) {
            if ( p*p>r ) break;
            ll start=l/p*p-l;
            if ( start<0 ) start+=p;
            for ( ll j = start ; j <= r-l; j += p ) {
                phi[j]-=phi[j]/p;
                while(found[j]%p==0)
                found[j]/=p;
            }
        }
//         cout<<vl ( phi.begin(),phi.begin() +r-l+1 ) <<endl;
//         cout<<vl ( found.begin(),found.begin() +r-l+1 ) <<endl;
        int cnt=0;
        rep ( i,(r-l)+1 ) {
            if ( found[i]!=1 ) phi[i]-=phi[i]/found[i];
            if ( phi[i]%k==0 ) cnt++;
        }
//        cout<<vl ( phi.begin(),phi.begin() +r-l+1 ) <<endl;
        cout<<double ( cnt ) / ( r-l+1 ) <<endl;
    }
}


/* Trico ------------------------> NIT Silchar

“All power is within you; you can do anything and everything.
Believe in that, do not believe that you are weak; do not believe that you are half-crazy lunatics,
as most of us do nowadays. You can do any thing and everything, without even the guidance
of any one. Stand up and express the divinity within you.”

 */
#include<bits/stdc++.h>
#define ll long long
#define pll pair<ll,ll>
#define vl vector<ll>
#define mod 1000000007
#define fori(z,n) for(int i=z;i<n;i++)
#define forj(z,n) for(int j=z;j<n;j++)
#define fork(z,n) for(int k=z;k<n;k++)
#define db(x) cout << (#x) << " = " << x << endl;
#define trico() int t;cin>>t ; while(t--)
#define CHECK_BIT(var,pos) ((var) & (1<<(pos)))
#define p_iter vector<pll>::iterator
#define l_iter vector<ll>::iterator
#define forstl(m) for(it=m.begin();it!=m.end();it++)
#define bitcnt(x) __builtin_popcountll(x)
const int nax = 1e6 + 5;
const int lax = 1e5 + 5;
const int pax = 2e5 + 5;
const int inf = 1e9 + 5;
#define sl(n) scanf("%I64d",&n)
#define pl(n) printf("%I64d",n)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
using namespace std;
static int u=0;
void f_case(){u++;cout<<"Case "<<u<<": ";}
//ll modPow(ll a,ll b,ll MOD) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
//ll modInverse(ll a){return modPow(a,MOD-2);}
vector<pll> v[1000005];
bool visited[1000005];
bool isroot[1000005];
ll dp[1000005];
ll dfs(int src)
{
    if(dp[src]!=-1)
     return dp[src];
    ll maxi=0;

    for(pll i:v[src])
        {
            maxi = max(maxi,i.second+dfs(i.first));
        }

        return dp[src]=maxi+2;
}
int main()
{
 //freopen("input.in", "r", stdin);
 ll n,p,a,b,c,maxi=0;
 cin>>n>>p;
  fori(1,n+1)
 {
     visited[i]=false;
     isroot[i]=true;
     dp[i]=-1;

 }

 fori(0,p)
 {
     cin>>a>>b>>c;
     v[a].push_back(make_pair(b,c));
     isroot[b]=false;
 }
 fori(1,n+1)
 {
     if(isroot[i])
     {

         maxi=max(maxi,dfs(i));
     }
 }
 cout<<maxi-2;


}


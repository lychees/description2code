 #include<bits/stdc++.h>
#define ll long long
#define m 1000000007
#define max 2

    ll non_fibo(ll n)
    {
       ll a,b,c,s,cnt,ans,pos;
        a=1,b=2,s=3;
            cnt=0;
            while(cnt<n)
            {
                cnt=cnt+(s-a-1);
                a=b;
                b=s;
                s=a+b;

      }
        pos=cnt-n+1;
        ans=s-pos;
       // printf("%lld\n",ans);
       return ans;
}

ll fast_exp(ll base, ll exp)
{
    ll res=1;
    while(exp>0) {
       if(exp%2==1) res=(res*base)%m;
       base=(base*base)%m;
       exp/=2;
    }
    return res%m;
}

void base_mul(ll fib[max][max])
{
    ll a,b,c,d;
    a= (( (fib[0][0] * fib[0][0])%m  ) + ( (fib[0][1] * fib[1][0])%m  ) )%m;
    b= (( (fib[0][0] * fib[0][1])%m  ) + ( (fib[0][1] * fib[1][1])%m  ) )%m;
    c= (( (fib[1][0] * fib[0][0])%m  ) + ( (fib[1][1] * fib[1][0])%m  ) )%m;
    d= (( (fib[1][0] * fib[0][1])%m  ) + ( (fib[1][1] * fib[1][1])%m  ) )%m;

    fib[0][0]=a;
    fib[0][1]=b;
    fib[1][0]=c;
    fib[1][1]=d;

}
void res_mul(ll res[max][max],ll fib[max][max])
{
    ll a,b,c,d;
    a= (( (res[0][0]*fib[0][0])%m  ) + ( (res[0][1]*fib[1][0])%m  ) )%m;
    b= (( (res[0][0]*fib[0][1])%m  ) + ( (res[0][1]*fib[1][1])%m  ) )%m;
    c= (( (res[1][0]*fib[0][0])%m  ) + ( (res[1][1]*fib[1][0])%m  ) )%m;
    d= (( (res[1][0]*fib[0][1])%m  ) + ( (res[1][1]*fib[1][1])%m  ) )%m;

    res[0][0]=a;
    res[0][1]=b;
    res[1][0]=c;
    res[1][1]=d;
}

ll power(ll fib[max][max] , ll exp)
{
    ll res[2][2];
    memset(res,0,sizeof(res));
    for(int i=0;i<2;i++)
        {
                for(int j=0;j<2;j++)
            {
                if(i==j)
                    res[i][j]=1;
                else
                    res[i][j]=0;
            }
        }

    while(exp>0)
    {
        if(exp%2==1)
        {
            res_mul(res,fib);
        }
        base_mul(fib);
        exp/=2;
    }
    return res[0][0];

}

ll calc(ll n)
{
    ll fib[2][2]={{1,1},{1,0}};

    return power(fib,n-1);

}
int main()
{
    ll t;
    ll n,ans1,ans2,res;
    scanf("%lld",&t);
    assert(t>=1 && t<=100000);
    while(t--)
    {
        scanf("%lld",&n);
        assert(n>=1 && n<=900000000);

        ans1=non_fibo(n);
        assert(ans1>=1 and ans1<=1000000007);
        ans2=calc(n);
        res=fast_exp(ans1,ans2);
        //printf("%lld %lld %lld\n",ans1,ans2,res);
        printf("%lld\n",res);

    }
    return 0;
}
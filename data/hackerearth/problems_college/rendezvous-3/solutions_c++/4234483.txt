/********************************/
/*                              */
/*    Author:-Shakti Raj        */
/*            Pandey            */
/*                              */
/*                              */
/********************************/

#include<bits/stdc++.h>
#include<stdlib.h>
using namespace std;
typedef long long lld;
typedef long long unsigned llu;
lld mod=1e9+7;

#define    vl     vector<lld > 
#define    vi     vector<int >
#define    vv     vector<vl  >
#define    pl     pair<lld,lld >
#define    pp     pair<int,int >
#define  sc(a)    scanf("%lld",&a)
#define sc2(a,b)  scanf("%lld%lld",&a,&b)
#define  pr(a)    printf("%lld\n",a);
#define  all(x)   x.begin(),x.end()

lld n,e;
lld parent[1000005];
vector<pair<lld,pl> > graph,MST;

void intialize()
{
   for(lld i=1;i<=n;i++)
    parent[i]=i;

    graph.clear();
    MST.clear();	
}

lld find_root(lld a)
{
	if(a!=parent[a])
	  parent[a]=find_root(parent[a]);
	  
	 return parent[a]; 	
}
void print()
{
   for(lld i=0;i<MST.size();i++)
   {
          cout<<"("<<MST[i].second.first<<" , "<<MST[i].second.second<<")";
          cout<<"-->"<<MST[i].first;
          cout<<"\n";
   }
}

lld kruskal()
{
  lld sum=0;
    
    sort(graph.begin(),graph.end());

   for(lld i=0;i<e;i++)
   {
     lld pu=find_root(graph[i].second.first);  //---1st vertex
     lld pv=find_root(graph[i].second.second); //---2nd vertex

    if(pu!=pv)
    {
       MST.push_back(graph[i]);
       
       parent[pu]=parent[pv];
       sum+=graph[i].first;  //---weight of spanning tree

    }

   }

   return sum;

}
   
int main()
{	
   lld t;
   t=1;

   while(t--)
   {  
      
      cin>>n>>e;

      intialize();
      
      for(lld i=0;i<e;i++)    //-undirected graphs
      {  lld u,v,w;
         cin>>u>>v>>w;    //--u & v vertex and w weight
         graph.push_back(make_pair(w,make_pair(u,v)));

       }

       cout<<kruskal()<<"\n";
       //print();

   }

  
   
}
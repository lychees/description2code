#include<bits/stdc++.h>
using namespace std;
#define int long long
const int MAXN = 102;
vector<int> dp[MAXN][MAXN];
int ar[MAXN][MAXN];
bool obs[MAXN][MAXN];
int get(string s){
	int i, j = 0, k = 0, l = 1;
	if(s[0] == '-'){
		l = -1;
		j = 1;
	}
	for(i = j; i < s.length(); i++){
		k *= 10;
		k += s[i] - '0';
	}
	return k * l;
}
#undef int
int main() {
	#define int long long
	int t;
	cin>>t;	
	while(t--) {
		int n,m;
		cin>>n>>m;
		for(int i=0;i<=n;i++) {
			for(int j=0;j<=m;j++) {
				obs[i][j]=false;
				dp[i][j].clear();
			}
		}
		for(int i=1;i<=n;i++) {
			for(int j=1;j<=m;j++) {
				string str;
				cin>>str;
				if(str=="##")
					obs[i][j]=true,ar[i][j]=0;
				else
					ar[i][j]=get(str);
			}
		}
		dp[1][1].push_back(ar[1][1]);
		for(int i=2;i<=m;i++) {
			if(!obs[1][i]) {
				if(!dp[1][i-1].empty())
					dp[1][i].push_back(ar[1][i]+dp[1][i-1][0]);
			}
		}
		for(int i=2;i<=n;i++) {
			if(!obs[i][1]) {
				if(!dp[i-1][1].empty())
					dp[i][1].push_back(ar[i][1]+dp[i-1][1][0]);
			}
		}
		for(int i=2;i<=n;i++) {
			for(int j=2;j<=m;j++) {
				if(obs[i][j])
					continue;
				for(int k=0;k<(int)dp[i-1][j].size() and k<205;k++)
					dp[i][j].push_back(ar[i][j]+dp[i-1][j][k]);
				for(int k=0;k<(int)dp[i][j-1].size() and k<205;k++)
					dp[i][j].push_back(ar[i][j]+dp[i][j-1][k]);
				sort(dp[i][j].begin(),dp[i][j].end());
			}
		}
		int q;
		cin>>q;
		while(q--) {
			int tx,ty,k;
			cin>>tx>>ty>>k;
			++tx;
			++ty;
			if(obs[tx][ty])
				cout<<"Obstacle\n";
			else if((int)dp[tx][ty].size()<k)
				cout<<"Not so many paths\n";
			else
				cout<<dp[tx][ty][k-1]<<"\n";
		}
	}
}
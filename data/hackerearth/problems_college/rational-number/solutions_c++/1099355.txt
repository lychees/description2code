#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#include <unordered_map>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

template<typename T>T gcd(T x, T y){if(y==0)return x;else return gcd(y,x%y);}

struct Ratio {
	typedef ll T;
	T x, y;
	Ratio(): x(0), y(1) { }
	Ratio(T x_): x(x_), y(1) { }
	Ratio(T x_, T y_): x(x_), y(y_) { normalize(); }
	double toDouble() { return double(x) / y; }
	void normalize() {
		T g = gcd(abs(x), abs(y));
        if(g == 0) return;
		x /= g; y /= g;
		if(y < 0) x = -x, y = -y;
		if(x == 0) y = 1;
	}
	bool operator==(const Ratio& q) const { return x == q.x && y == q.y; }
	bool operator!=(const Ratio& q) const { return x != q.x || y != q.y; }
	bool operator<(const Ratio& q) const { return x*q.y < y*q.x; }
	bool operator<=(const Ratio& q) const { return x*q.y <= y*q.x; }
	bool operator>(const Ratio& q) const { return x*q.y > y*q.x; }
	bool operator>=(const Ratio& q) const { return x*q.y >= y*q.x; }
	Ratio& operator+=(const Ratio& q) {
		T g = gcd(y,q.y); x = q.y/g*x + y/g*q.x, y = y/g*q.y; normalize();
		return *this;
	}
	Ratio& operator-=(const Ratio& q) {
		T g = gcd(y,q.y); x = q.y/g*x - y/g*q.x, y = y/g*q.y; normalize();
		return *this;
	}
	Ratio& operator*=(const Ratio& q) {
		x = x*q.x, y = y*q.y; normalize();
		return *this;
	}
	Ratio& operator/=(const Ratio& q) {
		x = x*q.y, y = y*q.x; normalize();
		return *this;
	}
	Ratio operator+(const Ratio& q) const { return Ratio(*this) += q; }
	Ratio operator-(const Ratio& q) const { return Ratio(*this) -= q; }
	Ratio operator*(const Ratio& q) const { return Ratio(*this) *= q; }
	Ratio operator/(const Ratio& q) const { return Ratio(*this) /= q; }
	Ratio operator-() const { return Ratio(-x, y); }
};
ostream& operator<<(ostream &o, const Ratio& p) { o << p.x << "/" << p.y; return o; }

int main() {
	vector<long long> pow10s(20);
	pow10s[0] = 1;
	reu(i, 1, 20) pow10s[i] = pow10s[i-1] * 10;
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		string s;
		cin >> s;
		each(i, s) if(!isdigit(*i) && *i != '.') return 1;
		Ratio ans;
		{	size_t k = s.find('.');
			stringstream ss(k == string::npos ? s : s.substr(0, k));
			long long intpart;
			if(!(ss >> intpart)) continue;
			ans += intpart;
			s = k == string::npos ? "0" : s.substr(k+1);
		}
		if(!s.empty()){
			size_t k = s.find("...");
			if(k != string::npos) {
				int len = 0;
				for(int i = k - 1; i-((int)k-i) >= 0; -- i) {
					if(s.substr(i, k-i) == s.substr(i-(k-i), k-i))
						amax(len, (int)k-i);
				}
				if(len == 0)
					continue;

				stringstream ss(s.substr(k-len, len));
				long long cycle;
				if(!(ss >> cycle)) continue;
				ans += Ratio(cycle, (pow10s[len]-1) * pow10s[k-len*2]);
				s = s.substr(0, k-len*2);
			}
		}
		if(!s.empty()){
			stringstream ss(s);
			long long d;
			if(!(ss >> d)) continue;
			ans += Ratio(d, pow10s[s.size()]);
		}

		cout << "P=" << ans.x << " Q=" << ans.y << endl;
	}
	return 0;
}

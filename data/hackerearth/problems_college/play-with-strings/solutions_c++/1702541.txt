#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 100005;

#define MAX 1000005
char longString[ MAX ], shortString[ MAX ];
int len_long , len_short , b[ MAX ];
//O(len_short)
void preprocess(){
    int i = 0, j = -1; b[ 0 ] = -1;
    while( i < len_short ){
        while( j >= 0 && shortString[ i ] != shortString[ j ] ) j = b[ j ];
        i++; j++;
        b[ i ] = j;
    }
}

//O(len_long)
bool kmp(){
    int i = 0 , j = 0;
    while( i < len_long ){
        while( j >= 0 && longString[ i ] != shortString[ j ] ) j = b[ j ];
        i++; j++;
        if( j == len_short ){
            return true;
            j = b[ j ];
        }
    }
    return false;
}



int main(int argc, char *argv[]) {
	int ntest;
	scanf("%d", &ntest);
	while (ntest--) {
    	scanf("%s %s" , &shortString , &longString );
    	len_short = strlen( shortString );
    	preprocess();
    	int i , len1 = len_short , period1 = len1 - b[ len_short ] , period2 , cnt1 = len1/period1 , cnt2 , len2;
    	string s1 = "" , s2 = "";
    	if (len1 % period1 != 0) period1 = len1;
    	for (i = 0; i < period1; ++i) s1 += shortString[i];
    	memcpy(shortString , longString , sizeof(longString));
    	len_short = strlen(shortString);
    	preprocess();
    	period2 = len_short - b[len_short];
    	if (len2 % period2 != 0) period2 = len_short;
    	for (i = 0; i < period2; ++i ) s2 += shortString[i];
    	len2 = len_short;
    	if (period1 != period2 || s1 != s2) {
        	printf("0\n");
        	continue;
    	}
        int ans = 0;
        for (i = 1; period1 * i <= max(len1, len2); ++i) {
            if (len1 % (period1 * i) == 0 && len2 % (period1 * i) == 0) ans++;
        }
        printf("%d\n" , ans );
	}
    return 0;
}
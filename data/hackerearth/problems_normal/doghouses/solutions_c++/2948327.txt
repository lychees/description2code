#include <bits/stdc++.h>


using namespace std;


int main (int argc, char**argv){
//    freopen("/Users/Arseniy/All/input.txt", "r", stdin);
    int n;
    cin >> n;
    vector <int> a(n, 0), l(1001, 1001), r(1001, -1), b(1001, 0);
    vector <int> can[n], can2[n];
    for (int i = 0; i < n; i++){
        cin >> a[i];
        b[a[i]]++;
        l[a[i]] = min(l[a[i]], i);
        r[a[i]] = max(r[a[i]], i);
    }
    for (int i = 0; i < n; i++){
        for (int j = 0; j <= i; j++)
            can[i].push_back(a[j]);
        sort(can[i].begin(), can[i].end());
    }
    for (int i = n-1; i >= 0; i--){
        for (int j = n-1; j >= i; j--)
            can2[i].push_back(a[j]);
        sort(can2[i].begin(), can2[i].end());
    }
    int ans = 1;
    for (int i = 0; i <= 1000; i++){
        ans = max(ans, b[i]);
        for (int j = i+1; j <= 1000; j++){
            int tmp = b[i] + b[j];
            int left = min(l[i], l[j]);
            int right = max(r[i], r[j]);
            if ((left > 0) && (left != 1001)){
                vector <int> :: iterator it1 = lower_bound(can[left-1].begin(), can[left-1].end(), i);
                if ((it1 != can[left-1].end()) && (*it1 <= j))
                    tmp++;
            }
            if ((right != -1) && (right < n-1)){
                vector <int> :: iterator  it2 = lower_bound(can2[right+1].begin(), can2[right+1].end(), i);
                if ((it2 != can2[right+1].end()) && (*it2 <= j))
                    tmp++;
            }
            ans = max(ans, tmp);
        }
    }
    cout << ans << endl;
    return 0;
}
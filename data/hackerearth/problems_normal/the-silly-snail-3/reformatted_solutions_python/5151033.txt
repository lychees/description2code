
from collections import OrderedDict


class TreeNode():
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


def pre_order_traversal(root, output=None):
    if output is None:
        output = []
    if root is not None:
        output.append(str(root.value))
        pre_order_traversal(root.left, output)
        pre_order_traversal(root.right, output)
    return output


def fill_nodes(node_values, node_address):
    A, B, C = node_values
    if len(node_address) == 0:
        temp = TreeNode(A)
        node_address[A] = temp
    else:
        temp = node_address.get(A)

    if B == 0:
        left = None
    else:
        left = TreeNode(B)

    if C == 0:
        right = None
    else:
        right = TreeNode(C)

    temp.left = left
    temp.right = right
    node_address[B] = left
    node_address[C] = right
    return node_address


def main():
    t = int(raw_input())
    if 1 <= t <= 50:
        count = 0
        node_address = OrderedDict()
        result = []
        while count < t:
            relations = int(raw_input())
            if 0 <= relations <= 100000:
                root = None
                if relations == 0:
                    output = ['1']
                else:
                    for relation in range(relations):
                        node_values = [int(i) for i in raw_input().split(' ')]
                        node_address = fill_nodes(node_values, node_address)
                    root = node_address.values()[0]
                    output = pre_order_traversal(root)
                result.append(output)
            count += 1
        return result


if __name__ == '__main__':
    result = main()
    for output in result:
        print ' '.join(output)

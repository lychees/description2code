#include <iostream>
#include <list>
#include <algorithm>
#include <assert.h>
#include <cstring>
using namespace std;
#define X first
#define Y second
int mat[2009][2009];
int mark[2000];
int main()
{
	int n, m, x, y;
	cin>>n>>m;
	//assert(n<= 1000);
	for(int i = 0; i < m; i++)
	{
		cin>>x>>y;
		x--;
		y--;
		if(x != y)
		{
			mat[x][y] = mat[y][x] = 1;
		}
		
	}
	list <pair<int, int> > sz;
	list <pair<int, int> >::iterator it, it1;
	for(int i = 0; i < n; i++)
	{
		x = 0;
		for(int j = 0;j < n; j++)
		{
			if(mat[i][j])
			x++;
		}
		sz.push_back(make_pair(x, i));
	}
	
	sz.sort();
	int ans = 0;
	while(sz.size())
	{
		if(sz.back().X)
		{
			ans++;
			
			int ver = sz.back().Y;
			sz.pop_back();
			memset(mark, 0, n * sizeof(int));
			for(int i = 0; i< n; i++)
			{
				if(mat[ver][i])
				mark[i] = 1;
			}
			mark[ver] = 1;
			it = sz.begin();
			while( it != sz.end())
			{
				if(mark[(*it).Y])
				{
					it1 = it;
					it++;
					sz.erase(it1);
				}
				else
				{
					for(int i = 0; i< n; i++)
					{
						if(mark[i] && mat[i][(*it).Y])
						{
							(*it).X -= 1;
							mat[i][(*it).Y] = 0;
							mat[(*it).Y][i] = 0;
						}
					}
					it++;
					
   
				}
			}
			sz.sort();
		}
		else
			sz.pop_back();
	if(m%2)
	 ans = 3;
    else
    ans = 2;
	}
	//assert(ans != 3);
    cout <<ans;
    return 0;
}

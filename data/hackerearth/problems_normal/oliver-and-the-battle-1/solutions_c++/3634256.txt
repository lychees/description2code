#include <iostream>
#include <utility>
#include <queue>
#include <cstring>
using namespace std;

int n, m;

bool validmove(int x, int y) {
	if(x >= 0 && x < n && y >= 0 && y < m)
		return true;
	return false;
}

int main()
{
	int t;
	cin >> t;
	while(t--) { 
		queue<pair<int, int> > qq;
		
		cin >> n >> m;
		int bf[n][m];
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				cin >> bf[i][j];
				if(bf[i][j] == 1) {
					qq.push(make_pair(i, j));
				}
			}
		}
		
		bool visited[n][m];
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				visited[i][j] = false;
			}
		}
		
		int ans1 = 0;
		int ans2 = 0;
		
		while(!qq.empty()) {
			pair<int, int> curr = qq.front();
			qq.pop();
			
			if(visited[curr.first][curr.second]) continue;
			
			ans2++;
			int tans1 = 1;
			
			queue<pair<int, int> > q;
			q.push(curr);
			visited[curr.first][curr.second] = true;
			
			while(!q.empty()) {
				pair<int, int> qcurr = q.front();
				q.pop();
				int x = qcurr.first;
				int y = qcurr.second;
				
				for(int i = -1; i <= 1; i++) {
					for(int j = -1; j <= 1; j++) {
						if(validmove(x+i, y+j)) {
							if(!visited[x+i][y+j] && bf[x+i][y+j] == 1) {
								visited[x+i][y+j] = true;
								q.push(make_pair(x+i, y+j));
								
								tans1++;
							}
						}
					}
				}
			}
			
			ans1 = max(ans1, tans1);
		}
		cout << ans2 << " " << ans1 << endl;
	}
	
	
    return 0;
}

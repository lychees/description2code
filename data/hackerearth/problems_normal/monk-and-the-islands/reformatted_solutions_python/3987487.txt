from collections import deque

# code to fin level of a node
t = int(raw_input())
while t > 0:
    nodes, edges = map(int, raw_input().split())

    visited = [False for i in range(nodes+1)]

    level = [0 for i in range(nodes+1)]

    def bfs(graph, s):
        q = deque()
        q.append(s)
        visited[s] = True
        while len(q) != 0:
            p = q[0]
            q.popleft()
            for i in range(len(graph[p])):
                if not visited[graph[p][i]]:
                    level[graph[p][i]] = level[p] + 1
                    q.append(graph[p][i])
                    visited[graph[p][i]] = True

    graph = {}

    for i in range(1, nodes+1):
        graph.update({i: []})

    for i in range(edges):
        x, y = map(int, raw_input().split())
        graph[x].append(y)
        graph[y].append(x)

    # connected  = 0

    bfs(graph, 1)

    print level[nodes]
    t -= 1
# print connected

#include<bits/stdc++.h>

#define lli long long int
#define llu unsigned long long int
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define ss(n) scanf("%s",n);

const long double EPS = 1e-10;
const lli MOD = 1000000007ll;
const lli mod1 = 1000000009ll;
const lli mod2 = 1100000009ll;
int INF = 2147483645;
lli INFINF = 9223372036854775807;
int debug = 0;

using namespace std;

lli bit_count(lli _x){lli _ret=0;while(_x){if(_x%2==1)_ret++;_x/=2;}return _ret;}
lli bit(lli _mask,lli _i){return (_mask&(1<<_i))==0?0:1;}
lli powermod(lli _a,lli _b,lli _m){lli _r=1;while(_b){if(_b%2==1)_r=(_r*_a)%_m;_b/=2;_a=(_a*_a)%_m;}return _r;}
lli add(lli a,lli b){lli x=a+b;while(x>=MOD)x-=MOD;return x;}
lli sub(lli a,lli b){lli x=a-b;while(x<0)x+=MOD;return x;}
lli mul(lli a,lli b){lli x=a*b;x%=MOD;return x;}

int n,m;
int dist[1010];
vector<int> G[1010];

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    debug = 1;
#endif
    srand (time(NULL));

    si(n);si(m);
    for(int i=2;i<=n;i++)
        dist[i] = INF;
    while(m--){
        int type;si(type);
        if(type==1){
            int x;si(x);
            printf("%d\n",dist[x]==INF?-1:dist[x]);
        }
        else{
            int x,y;
            si(x);si(y);
            G[x].pb(y);
            if(dist[y] > dist[x] + 1){
                dist[y] = dist[x] + 1;
                queue<int> Q;
                Q.push(y);
                while(!Q.empty()){
                    int u = Q.front();
                    Q.pop();
                    for(int i=0;i<G[u].size();i++){
                    	int v = G[u][i];
                        if(dist[v] > dist[u] + 1){
                            dist[v] = dist[u] + 1;
                            Q.push(v);
                        }
                    }
                }
            }
        }
    }

    return 0;
}


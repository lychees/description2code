/*My First Template :D*/
#include <bits/stdc++.h>
#include <limits.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define MOD (ll)1000000007
#define pb 	push_back
#define EPS 1e-9
#define FOR(i, n)	for(int i = 0;i < n; i++)
#define si(a)   scanf("%d", &a)
#define pi(a)   printf("%d\n", a)
template <typename T> T gcd(T a, T b){return (b==0)?a:gcd(b,a%b);}
template <typename T> T lcm(T a, T b){return a*(b/gcd(a,b));}
template <typename T> T mod_exp(T b, T p, T m){T x = 1;while(p){if(p&1)x=(x*b)%m;b=(b*b)%m;p=p>>1;}return x;}
template <typename T> T invFermat(T a, T p){return mod_exp(a, p-2, p);}
template <typename T> T exp(T b, T p){T x = 1;while(p){if(p&1)x=(x*b);b=(b*b);p=p>>1;}return x;}

int temples, monks;
int arr[100001];
int F(int x){   //enlightenment value is x.
  int prev = arr[0]+x;
  int monks_left = monks-1;
  for(int i = 1;i < temples; i++){
     if(prev+x >= arr[i])
        continue;
     if(monks_left == 0)
        return 0;
     prev = arr[i]+x;
     monks_left--;
  }
  return 1;
}
int main(){
    si(temples);
    si(monks);
    FOR(i, temples) si(arr[i]);
    sort(arr, arr+temples);
    //Invariant : F(lo) is always false and F(hi) is always true
    int lo = -1;
    int hi = arr[temples-1]-arr[0];
    while(hi-lo > 1){
        int mid = (lo+hi)/2;
        if(F(mid))
            hi = mid;
        else
            lo = mid;
    }
    pi(hi);
	return 0;
}
#include <iostream>
#include <string.h>
using namespace std;
void mergeSort( int *array, int st, int end)
{
	int count = end + 1 - st;
	if(count <=1)
		return;
	int mid = (st+end)/2;
	mergeSort(array, st, mid);
	mergeSort(array, mid+1, end);
	int *temp = new int[count];
	int i1=st, i2=mid+1, i3 = 0;
	while(i1 <= mid && i2 <=end)
	{
		if(array[i1] < array[i2])
			temp[i3++] = array[i1++];
		else
			temp[i3++] = array[i2++];
	}
	while(i1 <= mid)
		temp[i3++] = array[i1++];
	while(i2 <=end)
		temp[i3++] = array[i2++];
	memcpy(array+st, temp, count*sizeof(int));
	delete temp;
}
void printSorted(int *arr, int len)
{
	cout << "Array is ";
	for(int i = 0; i < len; i++)
		cout << arr[i] << " ";
	cout << endl;
}
int search( int *sorted, int count, int element)
{
	int mid = 0, start = 0, end = count -1;
	while(1)
	{
		if(start >= end)
			break;
		mid = (start+end)/2;
		if(sorted[mid] == element)
			break;	
		if(sorted[mid] > element)
			end = mid-1;
		else if(sorted[mid] < element)
			start = mid +1;
	}
	return (start+end)/2;
}

bool doCanSum(int *valid, int validCount, int *counter,int guest)
{
	if(guest == 0)
		return true;
	int index = search(valid, validCount, guest);
	if(valid[index] == guest && counter[index] == 0)
		return true;
	int i =0;
	while(i <= index)
	{
		if(counter[i] > 0 )
		{
			i++;
			continue;
		}if((guest-valid[i]) < 0)
			break;
		counter[i] = 1;
		bool tempResult = doCanSum(valid, validCount, counter, guest-valid[i]);
		if(tempResult)
			return true;
		counter[i] = 0;
		i++;
	}
	return false;

}
bool canSum(int * valid, int validCount, int guest)
{
	bool result = false;
	int *temp = new int[validCount];
	memset(temp, 0, validCount*sizeof(int));//0-> means not used, 1-> means used once
	result = doCanSum(valid, validCount, temp, guest);
	delete temp;
	return result;
}
int process(int * valid, int validCount, int *guests, int guestCount)
{
	int count = 0;
	int sum = 0;
	int *tempGuests = NULL;
	mergeSort(valid, 0, validCount-1);
	mergeSort(guests, 0, guestCount-1);

	//Convert guests to another list
	{
		int *g1 = new int[guestCount];
		int g1c = 0;
		for(int i = 0; i < guestCount; i++)
		{
			int j = i;
			int count = 0;
			while(guests[i] == guests[j])	
				{count++;j++;}
			i += count -1;
			g1[g1c++] = count;
		}
		tempGuests = guests;
		guestCount = g1c;
		guests = g1;
		mergeSort(guests, 0, guestCount-1);
	}
	for(int i = 0; i < validCount; i++)
		sum+= valid[i];
	sum++;
	int *cache = new int[sum];
	memset(cache, 0, sum*sizeof(int));//0-> not processed, 1-> processed 2-> if valid
	
	for(int i =0; i < guestCount; i++)
	{
		if(cache[guests[i]] == 0)
		{
			bool res = canSum(valid, validCount, guests[i]);
			if(res)
			{
				cache[guests[i]] = 2;
				count++;
			}
			else
				cache[guests[i]] = 1;
		}
		else if(cache[guests[i]] == 2)
			count++;
	}
	delete guests;
	guests = tempGuests;
	return count;
}
int process1(int * valid, int validCount, int *guests, int guestCount)
{
	int maxSum = 0;
	int result = 0;
	for(int i = 0; i < validCount; i++)
		maxSum += valid[i];
	int *temp = new int[maxSum+1];
	memset(temp, 0, sizeof(int)*(maxSum+1));
	for(int i = 0;i < validCount; i++)
		temp[valid[i]] = 1;
	//Prepare the temp array
	for(int i =1; i < maxSum+1; i++)
	{
		if(temp[i] == 1)
			continue;
		for( int j = 0; j < validCount; j++)
		{
			if(i < valid[j])
				continue;
			if(temp[i-valid[j]] == 1)
			{
				temp[i] = 1 ;
				break;
			}
		}
	}
	delete temp;
	return result;
}

void readAndProcessInput()
{
	int numTests = 0;
	cin >> numTests;
	
	if(numTests <= 0)
		return;
	int *tests = new int[numTests];
	int *results = new int[numTests];
	for(int i = 0; i < numTests; i++)
	{
		int p =0;
		int m = 0;
		cin >> p;
		cin >> m;
		int *valid = new int[m];
		int *guests = new int[p];
		for(int j =0; j < m; j++)
			cin >> valid[j];
		for(int j =0; j < p; j++)
			cin >> guests[j];
		results[i] = process(valid, m, guests, p);
		delete guests;
		delete valid;
	}
	for(int i = 0; i < numTests; i++)
		cout << results[i] << endl;
	delete tests;
}

int main(int a, char **b)
{
	readAndProcessInput();
	return 0;
}
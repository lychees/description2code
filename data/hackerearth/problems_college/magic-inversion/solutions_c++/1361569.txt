#include <cstdio>
#include <cstdlib>
#include <cstring>

using namespace std;

#define alc(a, n) memset((a), n, sizeof (a))
#define MX 200005
#define ML 1000005
#define MN 300005

int N;
int val[ML];
bool nprime[MN];
int A[MX], B[MX], p[MN], pn;

void add(int x) {
	for (; x < ML; x += x & -x) val[x]++;	
}

int get(int x) {
	int rlt(0);
	for (; x; x -= x & -x) rlt += val[x];
	return rlt;		
}

void init() {
	int i, j;
	nprime[0] = nprime[1] = 1;
	for (i = 2; i * i < MN; i++) {
		if (nprime[i]) continue;
		p[pn++] = i;
		for (j = i * i; j < MN; j += i) nprime[j] = 1;
	}
	for (; i < MN; i++) if (!nprime[i]) p[pn++] = i;
}

int main() {
	
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
	
	int i, j, k;
	long long rlt(0);
	
	init();
	scanf("%d", &N);
	for (i = 0; i < N; i++) scanf("%d", A + i);
	for (i = 0; i < N; i++) scanf("%d", B + i);
	for (i = 0; i < N; i++) {
		int cnt = get(1000000) - get(B[i]);
		rlt += cnt;
		add(A[i]);
	}
	if (rlt < MN) {
		printf("%s\n", nprime[rlt] ? "SIMPLE INVERSION" : "MAGIC INVERSION");	
	} else {
		for (i = 0; i < pn; i++) if (rlt % p[i] == 0) break;
		printf("%s\n", i < pn ? "SIMPLE INVERSION" : "MAGIC INVERSION");
	}
	
	return 0;
}
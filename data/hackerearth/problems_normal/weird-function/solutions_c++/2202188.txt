#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<int MOD>
struct ModInt {
    static const int Mod = MOD;
    unsigned x;
    ModInt() : x ( 0 ) { }
    ModInt ( signed sig ) {
        int sigt = sig % MOD;
        if ( sigt < 0 ) sigt += MOD;
        x = sigt;
    }
    ModInt ( signed long long sig ) {
        int sigt = sig % MOD;
        if ( sigt < 0 ) sigt += MOD;
        x = sigt;
    }
    int get() const {
        return ( int ) x;
    }

    ModInt &operator+= ( ModInt that ) {
        if ( ( x += that.x ) >= MOD ) x -= MOD;
        return *this;
    }
    ModInt &operator-= ( ModInt that ) {
        if ( ( x += MOD - that.x ) >= MOD ) x -= MOD;
        return *this;
    }
    ModInt &operator*= ( ModInt that ) {
        x = ( unsigned long long ) x * that.x % MOD;
        return *this;
    }
    ModInt &operator/= ( ModInt that ) {
        return *this *= that.inverse();
    }

    ModInt operator+ ( ModInt that ) const {
        return ModInt ( *this ) += that;
    }
    ModInt operator- ( ModInt that ) const {
        return ModInt ( *this ) -= that;
    }
    ModInt operator* ( ModInt that ) const {
        return ModInt ( *this ) *= that;
    }
    ModInt operator/ ( ModInt that ) const {
        return ModInt ( *this ) /= that;
    }

    ModInt inverse() const {
        long long a = x, b = MOD, u = 1, v = 0;
        while ( b ) {
            long long t = a / b;
            a -= t * b;
            std::swap ( a, b );
            u -= t * v;
            std::swap ( u, v );
        }
        return ModInt ( u );
    }
};
template<int MOD> ModInt<MOD> operator^ ( ModInt<MOD> a, unsigned long long k ) {
    ModInt<MOD> r = 1;
    while ( k ) {
        if ( k & 1 ) r *= a;
        a *= a;
        k >>= 1;
    }
    return r;
}
typedef ModInt<1000000007> mint;
template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
const int maxn=10007;
mint mw[maxn];
mint W[maxn];
int main() {
    ios_base::sync_with_stdio ( false );
    for ( int i=1; i<maxn; i++ ) {
        int j;
        for ( j=1; j*j<i; j++ ) {
            if ( i%j==0 ) {
                mw[i]+=mint ( j ) ^i;
                mw[i]+=mint ( i/j ) ^i;

            }

        }
        if ( j*j==i )
            mw[i]+=mint ( j ) ^i;

    }
    W[0]=0;
    for ( int i=1; i<maxn; i++ ) {
        W[i]=W[i-1]+mw[i];

    }
    inrep {
        int a,b;
        cin>>a>>b;
        cout<<(W[b]-W[a-1]).get()<<endl;
    }
}

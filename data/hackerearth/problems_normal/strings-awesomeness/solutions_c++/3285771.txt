#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
int main() {
    ios_base::sync_with_stdio ( false );
    vi wanted ( 255 );
    vi current ( 255 );
    int toLow=0;
    int tooHigh=0;
    string ts ( "hackerearth" );
    int le=ts.size();
    rep ( i,le ) {
        if ( !wanted[ts[i]] ) toLow++;
        wanted[ts[i]]++;
    }

    string s;
    cin>>s;
    vi ends ( s.size() );
    for ( char &c: s ) c= ( c>='a'?c:c+'a'-'A' );
//     cout<<s<<endl;
    rep ( i,le ) {
        char c=s[i];
        if ( current[c]==wanted[c]-1 ) toLow--;
        if ( current[c]==wanted[c] ) tooHigh++;
        current[c]++;
    }

    if ( !toLow &&!tooHigh ) ends[le-1]=1;
    reu ( i,le,s.size() ) {
        char c=s[i];
        if ( current[c]==wanted[c]-1 ) toLow--;
        if ( current[c]==wanted[c] ) tooHigh++;
        current[c]++;
        c=s[i-le];
        if ( current[c]==wanted[c] ) toLow++;
        if ( current[c]==wanted[c]+1 ) tooHigh--;
        current[c]--;
        if ( !toLow &&!tooHigh ) ends[i]=1;
    }

//     cout<<ends;
    reu ( i,1,ends.size() ) {
        ends[i]+=ends[i-1];
    }
    vi res;
    inrep {
        int l,r;
        cin>>l>>r;
        l--;
        r--;
        l+=le-2;
        if ( l>=r ) res.push_back ( 0 );
        else
            res.push_back ( ends[r]-ends[l] );

    }
    for ( int r: res ) cout<<r<<'\n';
}

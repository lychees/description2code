#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;

#define MAX 100001
int bit[MAX];
void add(int i, int x){
	while (i < MAX){
		bit[i] += x;
		i += i&-i;
	}
}
int sum(int i){
	int r = 0;
	while (i){
		r += bit[i];
	}
	return r;
}
int t;
int s;
int n;
int l;
vector<int> v;
int main(){
	scanf("%d", &t);
	while (t--){
		scanf("%d%d%d", &s, &n, &l);
		v.clear();
		for (int i = 0; i < n; i++){
			int kari;
			scanf("%d", &kari);
			v.push_back(kari);
		}
		sort(v.begin(), v.end());
		long long int countt = 0;
		for (int i = 0; i < v.size(); i++){
			if (v[i]>l){
				countt += (long long int)(v.size() - i-1);
				continue;
			}
			int ind = upper_bound(v.begin()+i+1, v.end(), v[i] + l) - v.begin();
			countt += (long long int)(v.size() - ind);
			int aa = s - l-1;
			int indd = upper_bound(v.begin() + i + 1, v.end(), aa)-v.begin();
			indd=min(indd,ind);
			countt += (long long int)(indd - (i + 1));
		}
		printf("%lld\n", countt);
	}
	return 0;
}
#include<iostream>

using namespace std;
struct Point
{
    long long int x;
    long long int y;
};
bool onSegment(Point p, Point q, Point r)
{
    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&
        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))
       return true;

    return false;
}
long long int orientation(Point p, Point q, Point r)
{
    long long int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);

    if (val == 0) return 0;

    return (val > 0)? 1: 2;
}

bool doIntersect(Point p1, Point q1, Point p2, Point q2)
{
    long long int o1 = orientation(p1, q1, p2);
    long long int o2 = orientation(p1, q1, q2);
    long long int o3 = orientation(p2, q2, p1);
    long long int o4 = orientation(p2, q2, q1);
    if (o1 != o2 && o3 != o4)
        return true;
    if (o1 == 0 && onSegment(p1, p2, q1)) return true;
    if (o2 == 0 && onSegment(p1, q2, q1)) return true;
    if (o3 == 0 && onSegment(p2, p1, q2)) return true;
    if (o4 == 0 && onSegment(p2, q1, q2)) return true;

    return false;
}
int main()
{
    int t;
    cin>>t;
    struct Point p1,p2,p3;
    struct Point p4 = {0,0};

    while(t--)
    {
        scanf("%lld%lld", &p1.x, &p1.y);
        scanf("%lld%lld", &p2.x, &p2.y);
        scanf("%lld%lld", &p3.x, &p3.y);
        doIntersect(p1, p2, p3, p4)? cout << "NO\n": cout << "YES\n";
    }
    return 0;
}

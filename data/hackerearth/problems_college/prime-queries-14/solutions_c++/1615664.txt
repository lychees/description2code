#include<bits/stdc++.h>
#define gc getchar
#define pc putchar
#define pii pair<int,int>
using namespace std;
inline void rdl(int &x)
{
	x=0;
	bool check=false;
	register int c;
	do{
		c=gc();
		if(c=='-')
		check=true;
	}while(c<48 || c>57);
	for(;c>47 && c<58;c=gc()){
		x=(x<<1)+(x<<3)+c-48;
	}
	if(check)
	x=-x;
}
inline void rd(int &x)
{
	x=0;
	bool check=false;
	register int c=gc();
	for(;c<48 || c>57;c=gc());
	for(;c>47 && c<58;c=gc()){
		x=(x<<1)+(x<<3)+c-48;
	}

}
inline void pd(int x)
{
	char c[11];
	bool check=false;
	int k=-1;
	if(x<0)
	check=true,x=-x;
	do
	{
		c[++k]=x%10+48;
		x/=10;
	}while(x);
	if(check)
	c[++k]='-';
	while(k>=0)
	pc(c[k--]);
	pc('\n');
}
inline void pdl(long long int x)
{
	char c[21];
	bool check=false;
	int k=-1;
	if(x<0)
	check=true,x=-x;
	do
	{
		c[++k]=x%10+48;
		x/=10;
	}while(x);
	if(check)
	c[++k]='-';
	while(k>=0)
	pc(c[k--]);
	pc('\n');
}
bool cmp(int  a,int b)
{
	return a>b;
}
int arr[100001];
int st[400004];
bool visited[1000001];

void built(int sl,int sr,int ind)
{
	if(sl==sr)
	{
		if(visited[arr[sl]])
		st[ind]=-1;
		else
		st[ind]=arr[sl];
		return ;
	}
	
	int mid=(sl+sr)/2;
	built(sl,mid,2*ind+1);
	built(mid+1,sr,2*ind+2);
	if(st[2*ind+1]==-1)
	st[ind]=st[2*ind+2];
	else if(st[2*ind+2]==-1)
	st[ind]=st[2*ind+1];
	else
	st[ind]=max(st[2*ind+1],st[2*ind+2]);
}

void update(int sl,int sr,int in,int val,int ind)
{
	if(sl==sr && sl==in)
	{
		arr[sl]=val;
		if(visited[val])
		st[ind]=-1;
		else
		st[ind]=val;
		return;
	}
	int mid=(sl+sr)/2;
	if(in<=mid)
	update(sl,mid,in,val,2*ind+1);
	else
	update(mid+1,sr,in,val,2*ind+2);	
	
	if(st[2*ind+1]==-1)
	st[ind]=st[2*ind+2];
	else if(st[2*ind+2]==-1)
	st[ind]=st[2*ind+1];
	else
	st[ind]=max(st[2*ind+1],st[2*ind+2]);
	
}

int query(int sl,int sr,int l,int r,int ind)
{
	if(sl==l && sr==r)
	return st[ind];
	int mid=(sl+sr)/2;
	if(r<=mid)
	return query(sl,mid,l,r,2*ind+1);
	if(l>mid)
	return query(mid+1,sr,l,r,2*ind+2);
	int left=query(sl,mid,l,mid,2*ind+1);
	int right=query(mid+1,sr,mid+1,r,2*ind+2);
	return max(left,right);
	
	
}
int main()
{
	int n,m,i,j,q,l,r;
	visited[0]=visited[1]=true;
	for(i=2;i<=1000;i++)
	{
		if(!visited[i])
		{
			for(j=i*i;j<=1000000;j+=i)
			visited[j]=true;
		}
	}
	
	rd(n);
	rd(m);
	for(i=0;i<n;i++)
	rd(arr[i]);
	built(0,n-1,0);
	for(i=0;i<m;i++)
	{
		rd(q);
		rd(l);
		rd(r);
		if(q)
		{
			r--,l--;
			if(r<l)
		pd(query(0,n-1,r,l,0));
			
			else
			pd(query(0,n-1,l,r,0));
		
		}
		else
		l--,update(0,n-1,l,r,0);
		
		
	}
	
	
}
#include <bits/stdc++.h>
using namespace std;

void dfs(vector<int> adj[], int n, int u, int height[], int dfsin[], int dfsout[], int level, int &time)
{
	height[u] = level;
	dfsin[u] = time++;
	for(int j = 0;j < adj[u].size(); j++)
	{
		int v = adj[u][j];
		if(height[v] == -1)
			dfs(adj, n, v, height, dfsin, dfsout, level + 1, time);
	}
	dfsout[u] = time;
	time++;
}

int main()
{
    int t;
    cin >> t;
    while(t--)
    {
    	int n, root;
    	cin >> n;
    	vector<int> adj[n + 1];
    	for(int i = 1; i <= n; i++)
    	{
    		int a;
    		cin >> a;
    		if(a == 0)
    			root = i;
    		adj[i].push_back(a);
    		adj[a].push_back(i);
    	}
    	int height[n + 1],
    		dfsin[n + 1],
    		dfsout[n + 1],
    		time = 0;
    	for(int i = 1; i <= n; i++)
    		height[i] = -1;
    	dfs(adj, n, root, height, dfsin, dfsout, 0, time);
    	/*for(int i = 1; i <= n; i++)
    		cout << i << "\t" << height[i] << "\t" << dfsin[i] << "\t" << dfsout[i] << endl;*/
    	int q, x, y;
    	cin >> q;
    	while(q--)
    	{
    		cin >> x >> y;
    		if(dfsin[y] < dfsin[x] && dfsout[y] > dfsout[x])
    			cout << height[x] - height[y] - 1 << endl;
    		else
    			cout << -1 << endl;
    	}
    }
    return 0;
}

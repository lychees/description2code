#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)

#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<LL,LL>
#define all(c)    c.begin(),c.end()
#define sz(c)     c.size()
#define clr(c)    c.clear()
#define msi       map<string,int>
#define msit      map<string,int>::iterator
#define pb        push_back
#define mp        make_pair

#define GI(x)     scanf("%d",&x)

#define FOR(i,a,b)      for(int i=a;i<b;i++)
#define RFOR(i,a,b)     for(int i=b-1;i>=a;i--)

#define gcd(a,b)  __gcd(a,b)
#define MOD       1000000007
#define EPS       1E-10
#define e         2.71828182845904523536
#define PI        acos(-1)

#define CASE(x)   cout<<"Case #"<<x<<": ";

int main()
{
      inp_s;
      DRT()
      {
            int n;
            cin >> n;
            VI color(n,-1);
            VI visited(n);
            vector<VI> edges(n);
            int m;
            cin >> m;
            FOR(i,0,m)
            {
                  int a,b;
                  cin >> a >> b;
                  edges[a].pb(b);
                  edges[b].pb(a);
            }
            int flag = 0;
            FOR(i,0,n)
            {
                  if(visited[i]) continue;
                  queue<int> bfs;
                  bfs.push(i);
                  color[i] = 0;
                  while(!bfs.empty())
                  {
                        int num = bfs.front();
                        bfs.pop();
                        int col = color[num];

                        FOR(j,0,sz(edges[num]))
                        {
                              int x = edges[num][j];
                              if(!visited[x])
                              {
                                    visited[x] = 1;
                                    color[x] = !col;
                                    bfs.push(x);
                              }
                              else if(color[x] == col)
                              {
                                    flag = 1;
                                    break;
                              }
                        }
                        if(flag) break;
                  }
                  if(flag) break;
            }
            if(flag) cout << "NOT ";
            cout << "BICOLORABLE." << endl;
      }
      return 0;
}

#include <iostream>
#include <cmath>
using namespace std;

int main()	{
	std::ios::sync_with_stdio(false);
	const int MAX = (int)pow(10, 5);
	int N, Q, n = 1, q, L, R, K, temp, k, mod, index, indexL, indexR, i;
	long long sum = 0;

	cin>>N;
	cin>>Q;

	int nums[MAX+1];
	long long int ***sumKInterval = new long long int**[11];
	for(k = 1; k < 11; k++)	{
		sumKInterval[k] = new long long int*[k];
		for(i = 0; i < k; i++)	{
			sumKInterval[k][i] = new long long int[((MAX + 1)/k) + 10];
		}
	}

	for(n = 1; n <= N; n++)	{
		cin>>nums[n];

		for(k = 1; k < 11; k++)	{
			mod = n % k;
			index = (int)ceil(	((double)n/(double)k)	);
			sumKInterval[k][mod][index] = sumKInterval[k][mod][index - 1] + nums[n];
		}
	}

	for(q = 0; q < Q; q++)	{
		sum = 0;
		cin>>L;
		cin>>R;
		cin>>K;

		mod = L % K;
		if(mod == 0)	{
			mod = K;
		}
		indexL = (L - mod) / K + 1;
		indexR = (R - mod) / K + 1;
		sum = sumKInterval[K][mod % K][indexR] - sumKInterval[K][mod % K][indexL] + nums[L];
		cout<<sum<<endl;
	}

    return 0;
}

#include<bits/stdc++.h>
using namespace std;
#define ull long long int
queue<pair<ull,ull> >q;
bool visit[1<<21];
ull power(ull a,ull b)
{
    if(b==0)
        return 1;
    ull m=power(a,b>>1);
    if((b&1))
        return m*m*a;
    else
        return m*m;
}
int main()
{
    ios::sync_with_stdio(false);
    ull n,i,s,level,w,b,p,temp;
    string str;
    cin>>n;
    cin>>str;
    s=0;
    //B represents 1 and W represents 0
    for(i=0;i<n;i++)//To make the string of chars to string of 1's & 0's
    {
        if(str[i]=='B')
            s|=(1<<i);
    }
    memset(visit,false,sizeof(visit));
    level=0;
    w=0;//For all white
    b=power(2,n)-1;//For all black
    q.push(make_pair(s,level));
    visit[s]=true;
    if(s==w || s==b)//Either no should be 000...00 or 111...11
    {
        cout<<level;
        return 0;
    }
    //Basically we do bfs to explore every possible combination with our original string and push all the
    //unvisited combination in queue.Unvisited combinations are found by inverting cells of length 2 and 3
    //which can be achieved by xoring with 1. => ( a^1 = !a );
    while(!q.empty())
    {
        p=q.front().first;
        level=q.front().second;
        q.pop();
        for(i=1;i<=n-1;i++)
        {
            temp=p^(1<<i)^(1<<(i-1));//Checking all combinations of contiguous cells of length 2
            if(!visit[temp])
            {
                visit[temp]=true;
                q.push(make_pair(temp,level+1));
                if(temp==w || temp==b)//If num is either 000...00 or 111...11 then
                {                     //we got our answer.No need for further calculations
                    cout<<level+1;
                    return 0;
                }
            }
        }
        for(i=2;i<=n-1;i++)
        {
            temp=p^(1<<i)^(1<<(i-1))^(1<<(i-2));//Checking all combinations of contiguous cells of length 3
            if(!visit[temp])
            {
                visit[temp]=true;
                q.push(make_pair(temp,level+1));
                if(temp==w || temp==b)//If num is either 000...00 or 111...11 then
                {                     //we got our answer.No need for further calculations
                    cout<<level+1;
                    return 0;
                }
            }
        }
    }
    return 0;
}

#include <bits/stdc++.h>
#define MODD 1000000007
using namespace std;

int modInverse(int a, int m) {
  int m0 = m, t, q;
  int x0 = 0, x1 = 1;

  if (m == 1)
    return 0;

  while (a > 1) {
    // q is quotient
    q = a / m;

    t = m;

    // m is remainder now, process same as
    // Euclid's algo
    m = a % m, a = t;

    t = x0;

    x0 = x1 - q * x0;

    x1 = t;
  }

  // Make x1 positive
  if (x1 < 0)
    x1 += m0;

  return x1;
}

int main() {
  int tc;
  cin >> tc;
  while (tc--) {
    long long int n;
    cin >> n;
    long long int num;
    long long int sum = 0;
    for (int i = 0; i < n; i++) {
      cin >> num;
      sum = sum + num;
    }
    // cout<<"sum : "<<sum<<endl;
    long long int num1 = 1;

    long long int ct = 0;

    for (int i = 1; i <= n; i++) {
      num1 = (num1 % MODD * i) % MODD;
    }
    // cout<<"num : "<<num1<<endl;
    for (int i = 1; i <= n / 2; i++) {
      long long int den1 = 1;
      long int den2 = 1;
      long int den = 1;
      long int temp = 1;
      long long int coef = 1;
      for (int j = 1; j <= i; j++) {
        den1 = (den1 * j) % MODD;
      }
      // cout<<"den1 : "<<den1<<endl;
      for (int j = 1; j <= n - i; j++) {
        den2 = (den2 * j) % MODD;
      }
      // cout<<"den2 : "<<den2<<endl;
      temp = (den1 % MODD * den2 % MODD) % MODD;
      // cout<<"temp : "<<temp<<endl;
      den = (modInverse(temp, MODD)) % MODD;
      // cout<<"den : "<<den<<endl;
      coef = (num1 % MODD * den % MODD) % MODD;
      // cout<<"coef : "<<coef<<endl;
      if (2 * i == n)
        coef = (coef * modInverse(2, MODD)) % MODD;
      ct = (ct + coef) % MODD;
    }
    ct += 1;
    ct = ct % MODD;
    // cout<<"ct : "<<ct<<endl;
    cout << (sum % MODD * ct % MODD) % MODD << endl;
  }
  return 0;
}

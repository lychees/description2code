/*
#########################################
#        Syed Omar Ali                  #
#        Aligarh Muslim University      #
#        III Year                       #
#########################################
*/
#include<bits/stdc++.h>

using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;

#define rep(n) for(ll i=0; i<(n); i++)
#define wl(n) while(n--)
#define mem(x,val) memset((x),(val),sizeof(x));
#define vl vector<ll>
#define vb vector<bool>
#define vvl vector<vl >
#define vvb vector<vb >
#define all(x) (x.begin(),x.end())
#define sz(x) ((ll)x.size())
#define pb push_back
#define em(x) (!x.empty())
#define MAX INT_MAX*INT_MAX
#define MIN INT_MIN*INT_MIN
#define MOD 1000000007
#define pr pair<ll,ll>
#define mp make_pair
#define F first
#define S second
#define sl(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
#define t() ll tst,test=1; sl(tst); while(tst--)

template<class T1> void deb(T1 e1) {
    cout << e1 << endl;
}

template<class T1,class T2> void deb(T1 e1, T2 e2) {
    cout << e1 << " " << e2 << endl;
}
vector<vector<bool> >mat;
vector<vector<bool> >visited;
vector<pair<ll,ll> > getAdjacent(ll i,ll j,ll N);
void DFS(ll i,ll j,ll N);
ll counter;
int main(){
    t(){
        ll N;
        sl(N);
        mat.clear();
        visited.clear();
        bool value;
        for(ll i=0;i<N;i++){
            vector<bool> row;
            vector<bool> row1;
            for(ll j=0;j<N;j++){
                cin >> value;
                row.pb(value);
                row1.pb(false);
            }
            mat.pb(row);
            visited.pb(row1);
        }
        counter=0;
        if(!mat[0][0] || !mat[N-1][N-1]){
            DFS(0,0,N);
        }
        cout << counter << endl;
    }
    return 0;
}
void DFS(ll i,ll j,ll N){
    if(i==N-1 && j==N-1){
        counter++;
        return;
    }
    visited[i][j] = true;
    vector<pair<ll,ll> > v = getAdjacent(i,j,N);
    for(ll i=0;i<v.size();i++){
        pair<ll,ll> p = v[i];
        ll x = p.first;
        ll y = p.second;
        if(!visited[x][y] && !mat[x][y])
            DFS(x,y,N);
    }
    visited[i][j] = false;
}
vector<pair<ll,ll> > getAdjacent(ll i,ll j,ll N){
    vector<pair<ll,ll> > v;
    if(i+1<N)
        v.pb(make_pair(i+1,j));
    if(i-1>=0)
        v.pb(make_pair(i-1,j));
    if(j+1<N)
        v.pb(make_pair(i,j+1));
    if(j-1>=0)
        v.pb(make_pair(i,j-1));
    return v;
}

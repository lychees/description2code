/* @nazarbek.altybay */
  
#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cassert>
#include <cstdlib>
#include <queue>
#include <ctime>
  
#define pii pair<int, int>
  
#define pb push_back
#define mp make_pair
  
#define f first
#define s second
  
using namespace std;

typedef long long ll;
typedef double ld;

typedef vector<int> vi;

const double EPS = 1e-9;
const double PI = acos(-1);
  
const int INF = (int) 1e9 + 7;
const int MAXN = (int) 1e5 + 7;

int t, n, m;
int f[MAXN];

int cur;
int deg[MAXN];

int bin(int x, int y) {
  int res = 1;
  while (y) {
    if (y & 1)
      res = res * 1ll * x % INF;
    y >>= 1;
    x = x * 1ll * x % INF;
  }
  return res;
}

int inv(int x) {
  return bin(x, INF - 2);
}

void add(int prime) {
  cur = cur * 1ll * inv(deg[prime] + 1) % INF;
  ++deg[prime];
  cur = cur * 1ll * (deg[prime] + 1) % INF;
}

int main() {
  #ifdef LOCAL
    freopen("in", "r", stdin);
    // freopen("out", "w", stdout);
  #endif

  cur = 1;
  f[1] = 1;
  for (int i = 2; i <= 100000; i++) {
    int tmp = i;
    for (int x = 2; x * x <= tmp; x++) {
      while (tmp % x == 0) {
        add(x);
        tmp /= x;
      }
    }
    if (tmp > 1)
      add(tmp);
    f[i] = cur;
  }

  scanf("%d", &t);
  while (t--) {
    scanf("%d%d", &n, &m);
    if (n <= m) {
      puts("0");
    } else {
      printf("%d\n", (f[n] - f[m] + INF) % INF);
    }
  }

  return 0;
}
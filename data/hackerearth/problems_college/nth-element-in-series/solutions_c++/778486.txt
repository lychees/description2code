#include<iostream>
#include<cstdio>
using namespace std;
void matmult(long long  a[][5],long long  b[][5],long long c[][5],long long  M)//multiply matrix a and b. put result in c
{
    int i,j,k;
    for(i=0;i<5;i++)
    {
        for(j=0;j<5;j++)
        {
            c[i][j]=0;
            for(k=0;k<5;k++)
            {
                c[i][j]+=(a[i][k]*b[k][j]);
                c[i][j]=c[i][j]%M;
            }
        }
    }
 
}
void matpow(long long Z[][5],int n,long long ans[][5],long long M)
//find ( Z^n )% M and return result in ans
{
 
    long long temp[5][5];
    //assign ans= the identity matrix
    for(int i=0;i<5;i++)
    	for(int j=0;j<5;j++)
    		if(i==j)
    			ans[i][j]=1;
    		else
    			ans[i][j]=0;	
    int i,j;
    while(n>0)
    {
        if(n&1)
        {
            matmult(ans,Z,temp,M);
            for(i=0;i<5;i++)
                for(j=0;j<5;j++)
                    ans[i][j]=temp[i][j];
        }
        matmult(Z,Z,temp,M);
        for(i=0;i<5;i++)
            for(j=0;j<5;j++)
                Z[i][j]=temp[i][j];
 
 
        n=n/2;
    }
    return;
     
}
int main()
{
 int T;
 cin>>T;
 while(T--)
   {
    long long a[5];
    for(int i=0;i<5;i++)
    	cin>>a[i];
    int n;
    cin>>n;	 
    long long ans=0;
    if(n>=5)
    {
        long long int Z[5][5]={{1,1,1,2,1},{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0}},result[5][5];//modify matrix a[][] for other recurrence relations
        matpow(Z,n-4,result,1000000007);
        for(int i=0;i<=4;i++)
        	ans=(ans+(result[0][i]*a[4-i])%1000000007)%1000000007;    //final multiplication of Z^(n-2) with the initial terms of the series
    }
    else
        ans=a[n];
    cout<<ans<<endl;     
 }  
}
#include<stdio.h>
#include<cassert>
#define mod 1000000009
long long A_matrix_Pow(long long b)
{
    long long A[2][2]={{1,1},{1,0}};
    long long B[2][1]={{1},{0}};    
    long long result[2][2]={{1,0},{0,1}};
    long long multiply[2][2];
    long long int ans1,ans2,ans;
  //for(int i=0;i<4;i++)
  //  printf("%d\n",B[i][0]);
    while(b>0)
    {
            long long  int c,d,k,sum=0;
            if(b%2==1){
                //result=(result*a)%m;
      for ( c = 0 ; c < 2 ; c++ )
      {
              for ( d = 0 ; d < 2 ; d++ )
              {
                for ( k = 0 ; k < 2 ; k++ )
                {
                    sum = (sum+(result[c][k]*A[k][d]));
                    if(sum>mod)
                      sum=sum%mod;
            //sum%=mod;
                }
                multiply[c][d] = sum;
                sum = 0;
              }
                }
      for(c=0;c<2;c++)
        for(d=0;d<2;d++)
          result[c][d]=multiply[c][d];
      }
    sum=0;
            b=b>>1;
            //a=(a*a)%m;
      for ( c = 0 ; c < 2 ; c++ )
      {
            for ( d = 0 ; d < 2 ; d++ )
            {
              for ( k = 0 ; k < 2 ; k++ )
              {
                  sum = (sum+(A[c][k]*A[k][d]));
                  if(sum>mod)
                    sum=sum%mod;
          //sum %=mod;
              }
        multiply[c][d] = sum;
              sum = 0;
            }
        }
            for(c=0;c<2;c++)
    for(d=0;d<2;d++)
      A[c][d]=multiply[c][d];
    }
    ans1= ((result[0][0]*B[0][0])%mod+(result[0][1]*B[1][0])%mod)%mod;
    ans2= ((result[1][0]*B[0][0])%mod+(result[1][1]*B[1][0])%mod)%mod;
    ans= (ans1*ans2)%mod;
    return ans;
}
int main()
{
  int t;
  
  scanf("%d",&t);
  assert(t>=1 && t<=100000);
  while(t--)
  {
    long long int n,ans;
  
    //int A[2][2]={{1,1},{1,0}};
    //int B[2][1]={{1},{0}};
    scanf("%lld",&n);
    assert(n>0 && n<=1000000000000000 );
    
    ans=A_matrix_Pow(n);
      printf("%lld\n",ans);
  }
  return 0;
} 
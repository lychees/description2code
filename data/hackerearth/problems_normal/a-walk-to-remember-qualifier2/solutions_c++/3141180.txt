#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <set>
#include <queue>
using namespace std;
#define ll long long
#define pii pair<int, int>
#define mp make_pair
#define x first
#define y second
#define pb push_back
#define VI vector<int>
#define all(s) (s).begin(),(s).end()
#define L(s) (int)(s).size()
#define inf 1000000000
#define pdd pair<double, double>
VI g[111111], gr[111111];
char used[111111];
vector<int> order, component;
 
void dfs1 (int v) {
	used[v] = true;
	for (size_t i=0; i<g[v].size(); ++i)
		if (!used[ g[v][i] ])
			dfs1 (g[v][i]);
	order.push_back (v);
}
 
void dfs2 (int v) {
	used[v] = true;
	component.push_back (v);
	for (size_t i=0; i<gr[v].size(); ++i)
		if (!used[ gr[v][i] ])
			dfs2 (gr[v][i]);
}
int ans[111111];
int n, m;
int main() {
    scanf("%d%d", &n, &m);
    for(int i = 0; i < m; ++i) {
        int x, y; scanf("%d%d", &x, &y); --x; --y;
        if (x == y) ans[x] = 1;
        g[x].pb(y); gr[y].pb(x);
    }
    memset(used, 0, sizeof(used));
    for (int i=0; i<n; ++i)
        if (!used[i])
            dfs1 (i);
    memset(used, 0, sizeof(used));
    for (int i=0; i<n; ++i) {
        int v = order[n-1-i];
        if (!used[v]) {
            dfs2 (v);
            if (L(component) > 1) {
                for(int j = 0; j < L(component); ++j) {
                    ans[component[j]] = 1;
                }
            }
            component.clear();
        }
    }
    for(int i = 0; i < n; ++i) {
        if (i) printf(" ");
        printf("%d", ans[i]);
    }
    printf("\n");
}


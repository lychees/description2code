#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}
int ans=0;
class graph
{
	vi * adj;
	public:
	graph(int v)
	{
		adj=new vi[v];
	}
	void add_edge(int u,int v)
	{
		adj[u].pb(v);
		adj[v].pb(u);
	}
	int dfs(int v,vector<bool>& visited)
	{
		visited[v]=true;
		vi::iterator it;
		vi d;
		int m1,m2,cal;
		m1=m2=0;
		for(it=adj[v].begin();it!=adj[v].end();it++)
		{
			if(!visited[*it])
			{
				cal=dfs(*it,visited);
				d.pb(cal);
			}
		}
		int sz=d.size();
		sort(d.begin(),d.end());
		if(sz)
		{
			m1=d[sz-1];
			if(sz>1)
				m2=d[sz-2];
		}
		ans=max(ans,m1+m2+1);
		return(1+m1);
	}
};
int main()
    {
		ios_base::sync_with_stdio(false);
		int i,n,a,b;
		cin>>n;
		graph g(n);
		for(i=0;i<n-1;i++)
		{
			cin>>a>>b;
			a--;
			b--;
			g.add_edge(a,b);
		}
		vector<bool> visited(n);
		g.dfs(0,visited);
		ans--;
		cout<<ans;
    return 0;
}

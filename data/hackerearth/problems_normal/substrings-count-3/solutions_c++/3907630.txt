#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_map>
#include <cstring>

using namespace std;

int main() {
	ios::sync_with_stdio(false);	
	unordered_map <string, vector<int> >  m;
	int n;
	cin >> n;
	
	
	for (int line = 1; line <= n; line++) {
		string str;
		cin >> str;
		set <string> substrings;
		for (unsigned int j = 0; j < str.size(); j++) 
			for (unsigned int len = 1; j + len <= str.size(); len++) {
				string substr = str.substr(j, len);
				substrings.insert(substr);
			}
		for (set<string>::iterator it = substrings.begin(); it != substrings.end(); it++)
			m[*it].push_back(line);
	}

	//for (unsigned int i = 0; i < hash_table.size(); i++) {
		//cout << i << ": ";
		//for (unsigned int j = 0; j < hash_table[i].size(); j++)  {
			//cout << hash_table[i][j].first << " -> ";
			//for (unsigned int k = 1; k < 70; k++)
				//cout << hash_table[i][j].second	[k] << " ";
			//cout << " | ";
		//}
		//cout << endl;	
	//}
	
	int q;
	cin >> q;
	while(q--) {
		int l, r;
		cin >> l >> r;
		string str;
		cin >> str;
		vector <int> *vet = &m[str];
		vector <int>::iterator bg = vet->begin();
		vector <int>::iterator end = vet->end();
		cout << distance(lower_bound(bg, end, l), upper_bound(bg, end, r)) << endl;
	}
	return 0;
}

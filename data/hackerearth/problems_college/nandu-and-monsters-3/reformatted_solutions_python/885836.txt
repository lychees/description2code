def LCA(arr, i, j):
    path1 = [i]
    path2 = [j]
    while (i/2 > 0):
        path1.append(int(i/2))
        i /= 2
    while (j/2 > 0):
        path2.append(int(j/2))
        j /= 2
    lca = 1
    for i in range(0, max(len(path1), len(path2))+1):
        if path1[len(path1)-i-1] != path2[len(path2)-i-1]:
            return [path1[0:len(path1)-i+1], path2[0:len(path2)-i+1]]

# ~ print LCA([1,2,3,4,5,6,7,8,9,10,11],1,1)


def check(n, q, monsters, rooms):
    for i in range(len(rooms)):
        a = rooms[i][0]
        b = rooms[i][1]
        if (a != b):
            path1, path2 = LCA(n, a, b)
            flag = 0
            for node in path1:
                if monsters[node-1] == 1:
                    flag += 1
                    break
            for node in path2:
                if monsters[node-1] == 1:
                    flag += 1
                    break
            if flag > 0:
                print "No"
            else:
                print "Yes"
        else:
            if monsters[a-1] == 1:
                print "No"
            else:
                print "Yes"


n, q = raw_input().split()
n = int(n)
q = int(q)

monsters = raw_input()
monsters = [int(x) for x in monsters]
nodes = []
for i in range(q):
    a, b = raw_input().split()
    a = int(a)
    b = int(b)
    nodes.append((a, b))
check(n, q, monsters, nodes)

#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
typedef pair<double,double> pdd;
typedef vector<pdd> vdd;
double findSide ( vdd& v ) {
    double mix=INF,miy=INF,maxx=-INF,may=-INF;

    for ( pdd & p: v ) {
        mix=min ( mix, p.first );
        miy=min ( miy,p.second );
        maxx=max ( maxx,p.first );
        may=max ( may,p.second );
    }
    return max ( may-miy,maxx-mix );
}
void rot ( double p, const vdd &so, vdd& t ) {
    double c=cos ( p );
    double s=sin ( p );
    rep ( i,so.size() ) {
        t[i].first=c*so[i].first+s*so[i].second;
        t[i].second=-s*so[i].first+c*so[i].second;
    }


}
int main() {
    ios_base::sync_with_stdio ( false );
    int nTests=2000;
    int take=20;
    int n;
    cin>>n;
    vdd s ( n ),t ( n );
    rep ( i,n ) {
        cin>>s[i].first>>s[i].second;
    }
    double d=M_PI/4+0.1;
    vector<double> vals;
    double miSide=INF;
    vals.push_back ( M_PI/4 );
    vdd nVals;
    rep ( i,10 ) {
        nVals.clear();
        for ( double v:vals ) {
            for ( int j=-nTests; j<nTests; j++ ) {
                double ang=v+d*j/nTests;
                rot ( ang,s,t );
                double res=findSide ( t );
                miSide=min ( miSide,res );
                nVals.push_back ( mp ( res,ang ) );
            }
        }
        sort ( all ( nVals ) );
//         cout<<"found"<<nVals;
        vals.clear();
        d/=10;
        rep ( i,take ) vals.push_back ( nVals[i].second );
    }
    cout.setf ( ios::fixed );
    cout.precision ( 4 );
    cout<<miSide<<endl;
   

}

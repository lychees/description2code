
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

enum Color {RED, BLUE, GRAY};

typedef struct Edge 
{
	int v1;
	int v2;
}Edge;

typedef struct Vertex
{
	int name;
	Color color;
}Vertex;

int main ()
{
	vector <Edge> edges;
	vector <Vertex> vertexes;
	Edge edge1;
	Vertex vertex1;
	Color newColor;
	int numVertexes, numEdges, vertNum, numGraphs;
	bool bBiColorable = true, bContinue;

	cin >> numGraphs;

	for (int k = 0; k < numGraphs; k ++)
	{
		bBiColorable = true;
		cin >> numVertexes;
		cin >> numEdges;

		for (int i = 0; i < numEdges; i ++)
		{
			cin >> edge1.v1;
			cin >> edge1.v2;
			edges.push_back (edge1);
		}

		for (int i = 0; i < numVertexes; i ++)
		{
			vertex1.color = GRAY;
			vertex1.name = i;
			vertexes.push_back (vertex1);
		}

		vertNum = 0;
		vertNum = edges[0].v1;
		vertexes[vertNum].color = RED;
		newColor = BLUE;

		while (bBiColorable && edges.size () > 0)
		{
			for (int i = 0; i < edges.size () && bBiColorable; i ++)
			{		
				if (edges[i].v1 == vertNum)
				{
					if (vertexes[edges[i].v2].color == vertexes[edges[i].v1].color)
					{
						bBiColorable = false;
					}

					else if (vertexes[edges[i].v2].color == GRAY)
					{
						vertexes[edges[i].v2].color = newColor;
					}
					edges.erase (edges.begin () + i);
					i --;
				}
						

				else if (edges[i].v2 == vertNum)
				{
					if (vertexes[edges[i].v2].color == vertexes[edges[i].v1].color)
					{
						bBiColorable = false;
					}

					else if (vertexes[edges[i].v1].color == GRAY)
					{
						vertexes[edges[i].v1].color = newColor;
					}	
					edges.erase (edges.begin () + i);
					i --;
				}				
			}

			newColor = GRAY;

			for (int j = 0; edges.size () > 0 && newColor == GRAY; j ++)
			{
				if (vertexes[edges[j].v1].color != GRAY)
				{
					vertNum = edges[j].v1;

					if (vertexes[edges[j].v1].color == RED)
					{
						newColor = BLUE;
					}

					else
					{
						newColor = RED;
					}
				}

				else if (vertexes[edges[j].v2].color != GRAY)
				{
					vertNum = edges[j].v2;

					if (vertexes[edges[j].v2].color == RED)
					{
						newColor = BLUE;
					}

					else
					{
						newColor = RED;
					}
				}
			}

		}

		if (bBiColorable)
		{
			cout << "BICOLORABLE.\n";
		}

		else
		{
			cout << "NOT BICOLORABLE. \n";
		}

		vertexes.clear ();
		edges.clear ();
	}
}

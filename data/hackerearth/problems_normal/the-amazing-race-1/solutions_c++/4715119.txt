#include <iostream>
#include<stack>
#include<algorithm>
using namespace std;
 long long a[100000+10],b[100000+10],c[100000+10];
long long mod=1e9+7;
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		
		for(int i=1;i<=n;i++)
		cin>>a[i];
		stack<long long>next;
		next.push(1);
 
			for(int i=2;i<=n;i++)
			{
				if(!next.empty())
				{
					while(true)
					{
						if((next.empty())||(a[next.top()]>a[i]))
						{
							break;
						}
					
					b[next.top()]=i-next.top();
					next.pop();
						
						
					}
					
				}
				next.push(i);
			}
			b[n]=0;
	while(!next.empty())
	{
		
	b[next.top()]=n-next.top();
	next.pop();
		
	}
	next.push(n);
 
			for( int i=n-1;i>=1;i--)
			{
				if(!next.empty())
				{
					while(true)
					{
						if((next.empty())||(a[next.top()]>a[i]))
						{
							break;
						}
				
					c[next.top()]=next.top()-i;
					next.pop();
						
						
					}
					
				}
				next.push(i);
			}
			c[1]=0;
			while(!next.empty())
	{
		
	c[next.top()]=next.top()-1;
	next.pop();
		
	}
long long maxi = -1;        // initialize the maximum SIGHT
        int index = -1;

        for(int i = 1; i <= n; i++){

            long long sum = c[i] + b[i];

            sum = ( (sum % mod) *  (i) ) % mod;

            if(sum > maxi){                 // update maximum and index of the driver who have the maximum SIGHT until now

                maxi = sum;
                index = i;
            }
        }
  
		
		  cout << index << endl;
	}
  
    return 0;
    
}

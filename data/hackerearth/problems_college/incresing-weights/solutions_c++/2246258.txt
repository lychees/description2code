#include <iostream>
#include <cstring>
#include <vector>
using namespace std;
 
int Index_ceil(int Arr[], int left, int right, int key) {
    int mil;
 
    while( right - left > 1 ) {
        mil = left + (right - left)/2;
        (Arr[mil] > key ? right : left) = mil;   }
 
    return right;
}
 
int LongestIncreasing(vector<int> Arr, int size) {
    int *Talltab   = new int[size];
    int len; // always points empty slot
 
    memset(Talltab, 0, sizeof(Talltab[0])*size);
 
    Talltab[0] = Arr[0];
    len = 1;
    for( int i = 1; i < size; i++ ) {
        if( Arr[i] < Talltab[0]) {
            Talltab[0] = Arr[i];
		}
        else if( Arr[i] >= Talltab[len-1])
            Talltab[len++] = Arr[i];
        else
            Talltab[Index_ceil(Talltab, -1, len-1, Arr[i])] = Arr[i];
    }
    delete[] Talltab;
 
    return len;
}
 
int main() {
	int n;
	cin >> n;
	int si = n;
	vector<int> Arr(n);
	for(int i = 0; i < n; i++) {
		cin >> Arr[i];
		Arr[i] = Arr[i] - i;
	}
	vector<int> x;
	for(vector<int>::iterator it = Arr.begin(); it != Arr.end(); it++) {
		if(*it > 0)
			x.push_back(*it);
	}
	n = x.size();	
	cout << si - LongestIncreasing(x, n) << '\n';
} 

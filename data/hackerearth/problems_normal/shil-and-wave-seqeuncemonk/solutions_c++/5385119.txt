#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<long long> vll;
typedef pair<int,int> pi;
typedef pair<long long,long long> pll;

#define pb push_back
#define ins insert
#define mp make_pair
#define ff first
#define ss second
#define itr iterator
#define LSOne(x) ((x)&(-x))
#define left (cur<<1)
#define right ((cur<<1)+1)
#define MID (L+R)/2
#define IOS ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define fr(i,s,e) for(i = s; i < e; i++)
#define endl "\n";

const int N = 100005;
const int mod = 1000000007;
ll bit[3][N], i, n, a[N];
ll MOD(ll x)
{
	if(x >= 0) return x%mod;
	return (mod - ((-x)%mod))%mod;
}
ll query(ll id,ll x)
{
	ll res = 0;
	while(x > 0)
	{
		res += bit[id][x];
		res = MOD(res);
		x -= LSOne(x);
	}
	return res;
}
ll update(ll id,ll x,ll v)
{
	while(x <= N)
	{
		bit[id][x] += v;
		bit[id][x] = MOD(bit[id][x]);
		x += LSOne(x);
	}
}
// 1 stores wave ending in low and 2 stores wave ending in high
int main()
{
	IOS
	cin >> n;
	fr(i,0,n) cin >> a[i];
	ll ans = 0;
	fr(i,0,n)
	{//A for high end and B for low end
		ll qA1 = query(1, a[i] - 1), qA2 = query(0, a[i]-1);
		ll qB1 = query(2, N-3), qB2 = query(2,a[i]), qB3 = query(0, N-3), qB4 = query(0,a[i]);
		ll A = MOD(qA1 + qA2);
		ll B = MOD(qB1 - qB2 + qB3 - qB4);
		ans += MOD(A+B); ans = MOD(ans);
		update(0,a[i],1);
		update(1,a[i],B);
		update(2,a[i],A);
	}
	cout << ans << endl;
	return 0;
}

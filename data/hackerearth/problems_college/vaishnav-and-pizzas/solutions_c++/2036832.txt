#include <cassert>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
 
#include <algorithm>
#include <deque>
#include <functional>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
 
#include <fstream>
#include <iostream>
#include <sstream>
 
#include <ext/numeric>
 
using namespace std;
using namespace __gnu_cxx;
// }}}
 
typedef long long int64;
const int INF = 0x3f3f3f3f;
template <class T> inline int len (const T &a) { return a.size (); }
 
/* Calculate Euler Totient function i.e. number of positive integers <= n, coprime to n. */
int64
phi (int64 n) {
    int64 ret = n;
    for (int64 i = 2; i * i <= n; i++)
        if (n % i == 0) {
            ret -= (ret / i);
            while (n % i == 0) n /= i;
        }
    if (n > 1) ret -= ret / n;
    return ret;
}
 
int64 pf [10005];
 
int
main () {
#ifdef LOCALHOST
    freopen ("test.in", "r", stdin);
    // freopen ("test.out", "w", stdout);
#endif
    int T, N;
    memset (pf, 0, sizeof (pf));
    for (int i = 1; i <= 10000; i++) pf [i] = pf [i - 1] + phi (i);
    scanf ("%d", &T);
    while (T--) {
        scanf ("%d", &N);
        if (N) printf ("%lld\n", pf [N] - 1);
        else printf ("0\n");
    }
 
    return 0;
}
#include <bits/stdc++.h>
 
using namespace std;
 
vector <int> prime;
int a[5005];
int cf[5005];
bool vis[5005];
int dp[5005];
 
void sieve()
{
	for (int i = 2; i * i < 5005; i++) {
		if (vis[i] == true) {
			for (int j = 2 * i; j <= 5005; j += i) {
				vis[j] = false;
			}
		}
	}
	
	for (int i = 2; i <= 5005; i++) {
		if (vis[i] == true) {
			prime.push_back(i);
		}
	}
}
 
int lowerbound(int l, int u, int n)
{
	int mid;
	while (u - l > 1) {
		mid = l + (u - l) / 2;
		if (prime[mid] <= n) {
			l = mid;
		} else {
			u = mid;
		}
	}
	
	return prime[l];
}
 
int main()
{
	int n;
	scanf("%d", &n);
	memset(vis, true, sizeof(vis));
	memset(cf, 0, sizeof(cf));
	memset(dp, 0, sizeof(dp));
	sieve();
	for (int i = 1; i <= n; i++) {
		scanf("%d", &a[i]);
		cf[i] = a[i];
	}
	for (int i = 2; i <= n; i++) {
//		cout << "hi\n";
		cf[i] += cf[i - 1];
//		cout << "bye\n";
	}
	
//	int x = lowerbound(0, prime.size() - 1, n);
	cf[0] = 0;
	int mx = INT_MIN;
	dp[0] = dp[1] = 0;
	for (int i = 2; i <= n; i++) {
		dp[i] = dp[i - 1];
	
		for (int j = 0; j < prime.size() ; j++) {
			if (prime[j] > i) {
				break;
			}
			if (prime[j] <= i) {
				int piv = i - prime[j];
				if (piv == 0) {
					dp[i] = max(dp[i], cf[i]);
				} else {
					dp[i] = max(dp[i], dp[piv-1] + cf[i] - cf[piv]);
				}
			}
		}
	}
	
/*	for (int i = 0; i <= n; i++) {
		cout << dp[i] << " ";
	}*/
	printf("%d\n", dp[n]);
	return 0;
}
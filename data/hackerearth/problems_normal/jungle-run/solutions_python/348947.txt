from collections import deque
import fileinput, copy

class Node:
    def __init__(self, p, v, t):
        self.pos = p
        self.value = v
        self.node_type = t
    def __eq__(self, other):
        return self.pos == other.pos

def addToQ(adj_pos, adj_node_value, Q, marked_list):
	if (adj_pos[0] > -1 and adj_pos[0] < n ) and (adj_pos[1] > -1 and adj_pos[1] < n ) and jungle[adj_pos[0]][adj_pos[1]] != 'T':
		adj_node = Node(adj_pos, adj_node_value, jungle[adj_pos[0]][adj_pos[1]])
		if adj_node not in marked_list:
			marked_list.append(adj_node)
			Q.append(adj_node)

n = input()
jungle = []
ct = 0
for line in fileinput.input():
	row = line.split()
	jungle.append(row)
	if 'S' in row:
		sY = row.index('S')
		sX = ct
	ct += 1

start_pos = (sX, sY)
start_node = Node(start_pos, 0, 'S')
level = 0

#start bfs here
q = deque()
q.append(start_node)
marked = []
marked.append(start_node)

while q:
	node = copy.deepcopy(q.popleft())
	#print node.node_type
	#print node.pos, node.value
	if node.node_type == 'E':
		print node.value
		#print 'hoorah!'
		break
	#print '1'
	addToQ((node.pos[0]-1, node.pos[1]),
			node.value+1,
			q,
			marked)
	#print '12'               
	addToQ((node.pos[0], node.pos[1]-1),
			node.value+1,
			q,
			marked)
	#print '123'               
	addToQ((node.pos[0]+1, node.pos[1]),
			node.value+1,
			q,
			marked)
	#print '1234'               
	addToQ((node.pos[0], node.pos[1]+1),
			node.value+1,
			q,
			marked)
	#print '12345'
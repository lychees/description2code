#include <bits/stdc++.h>

typedef long long int li;

#define min(a,b) a<=b?a:b
#define max(a,b) a>=b?a:b
#define Fi(i, st, ft) for(i = st;i <= ft; ++i)
#define Fd(i, st, ft) for(i = st;i >= ft; --i)
#define pb(a, b) a.push_back(b)
#define mod 1000000007
#define MAXN 1500000
#define MX 1450000
#define inf 1000000000000000000ll
const int maxBufSize = (10000000);

using namespace std;

li t , n;
li fact[100005] , sum[100005];
string s;

li power(li a , li b)
{
	li c , result;
	if(b == 0) {
		return 1;
	}
	c = power(a , b/2)%mod;
	if(b%2 == 0) {
		result = (c*c)%mod;
	} else {
		result = ((c*c%mod)*(a%mod))%mod;
	}
	return result%mod;
}

li modInverse(li a) {
	//mod is a prime number by which modulo has to be taken...
	li m = mod - 2;
	return power(a,m)%mod;
}

li calc_nck(li p , li q)
{
	if(p < q) {
		return 0;
	} else {
		li a , b , c , d;
		a = (fact[p]*((modInverse(fact[q])*modInverse(fact[p-q]))%mod))%mod;
		return a;
	}
}

int main()
{
	li i , j , a , b , c , d , ans;
	fact[0] = 1;
	Fi(i , 1 , 100004) {
		fact[i] = (fact[i-1]*i)%mod;
	}
	cin >> t;
	while(t--) {
		cin >> s >> n;
		memset(sum , 0 , sizeof(sum));
		li len = s.length();
		ans = 0;
		Fi(i , 0 , len-1) {
			if(s[i] != 'l') {
				sum[i+1] = sum[i];
			} else if(s[i] == 'l'){
				sum[i+1] = 1 + sum[i];
			}
		}
		Fi(i , 0 , len-1) {
			if(s[i] == 'u') {
				a = calc_nck(sum[i] , (n-1)/2);
				b = calc_nck((sum[len]-sum[i+1]) , (n-1)/2);
				//cout << a << " " << b << " " << "\n";
				ans = (ans+(a*b)%mod)%mod;
			}
		}
		printf("%lld\n" , ans);
	}
	return 0;
}
# include <iostream>
# include <cstdio>
# include <vector>
# include <utility>
# include <algorithm>
# include <climits>

using namespace std;

int arrray[11][20];

long long modu(long long a, long long b, long long k) {

	if(b == 0) return 1;

	long long tmp = modu(a, b/2, k);
	tmp = (tmp * tmp) % k;

	if(b % 2 == 1) {
		return (a * tmp) % k;
	} else
		{
			return tmp;
		}
}

long long calculate(vector<int> places, int K) {

	long long calculated = 1LL;
	int len = places.size();

	for(int i = 0; i < len; i++) {
		int index = places[i];
		long long tot = 0;
		for(int j = 0; j < K; j++) {

			tot += arrray[j][index];
		}
		calculated = (calculated * tot) % 1000000007;
	}

	calculated = (calculated * (modu(len, 1000000005, 1000000007)));

	return (calculated % 1000000007);
}

int main() {

	int T;

	cin >> T;

	while(T--) {

		int N, K;

		cin >> N >> K;

		for(int i = 0; i < K; i++) {

			for(int j = 0; j < N; j++) {

				cin >> arrray[i][j];
			}
		}

		int times = 1 << N;
		times--;

		long long maxCount = LLONG_MIN;
		long long minCount = LLONG_MAX;

		int maxLength, minLength;

		for(int num = 1; num <= times; num++) {

			vector<int> places;
			int tmp = num;
			int cc = 0;
			while(tmp > 0) {

				if(tmp % 2 == 1){
					places.push_back(cc);
				}
				cc++;
				tmp /= 2;
			}

			long long ccount = calculate(places, K);
			// cout<<"count "<<ccount<<endl;
			if(ccount > maxCount) {
				maxCount = ccount;
				maxLength = places.size();
				//maxLength = places.
			}
			if (ccount < minCount) {

				minCount = ccount;
				minLength = places.size();
			}

			// cout<<"num "<< num<<endl;
			// for(int i = 0; i < places.size(); i++)cout<<places[i]<<endl;
			// cout<<endl;
		}

		int ans1 = (maxCount^minCount);
		int ans2 = (maxLength^minLength);
		cout<<ans1<<" "<<ans2<<endl;
	}
	
	return 0;
}
#include <bits/stdc++.h>
 
using namespace std;
	
#ifndef ONLINE_JUDGE
	bool OJ = false;
#else
	bool OJ = true;
#endif
	
typedef long long unsigned llu;
typedef long long int lld;
typedef long ld;
 
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
 
 
#define all(a)  a.begin(), a.end()
#define setbitcount(n) __builtin_popcount(n)
#define trailzerobitc(n) __builtin_ctz(n)
 
 
#define pi 		M_PI
#define ESP 	(1e-9)
#define DREP(a)         sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(a,ind)      (lower_bound(all(a),ind)-a.begin())
 
#define REP(i,n)        for(int i=0;i<(n);++i)
#define FOR(i,a,b)      for(int i=(a);i<=(b);++i)
#define FORD(i,a,b)     for(int i=(a);i>=(b);--i)
 
#define DEBUG(x) cout << '>' << #x << ':' << x << endl;
#define trace1(x) cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
#define trace2(x,y) cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
#define justp(x,y) cout << "x : " << x << " " << "y : " << y << endl; 
 
#define MOD 		1000000007
#define MAX 	    100000
#define ff 			first
#define ss 			second
#define clr 		clear()
#define square(x) ((x)*(x))
#define pb 			push_back
#define mp 			make_pair
#define gcd(a,b)  	__gcd(a,b)
#define sz(a) 		((int)(a.size()))
#define len(a) 		((int)a.length())
#define mem(i,n) 	memset(i,n,sizeof(i))
#define IOS 		ios_base::sync_with_stdio(false); cin.tie(NULL)
#define IN          int t; scanf("%d",&t); while(t--)
 
int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	string s,sb;
    	cin >> s >> sb;
    	int l1 = s.length();
    	int l2 = sb.length();
    	
    	map <char,bool> m1;
    	map <char,bool> m2;
    	
    	for(int i=0;i<l1;++i)
    	m1[s[i]] = true;
    	for(int i=0;i<l2;++i)
    	m2[sb[i]] = true;
    	bool f = false;
    	
    	for(int i=0;i<26;++i)
    	{
    		if(m1[i+'a'] and m2[i+'a'])
    		{
    			f = true;
    			break;
    		}
    	}
    	cout << (f ? "YES\n" : "NO\n");
    	
    }
    
    return 0;    
}

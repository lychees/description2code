#include<bits/stdc++.h>
using namespace std;

bool used[100000];
vector<int> v[100000];
vector<pair<int,pair<int,int> > >order;
int n,m;
int a[100000];
int f[100000];
int first[100000];

bool tryk(int x)
{
    if(used[x])
        return false;
    used[x]=1;
    for(int i=0;i<v[x].size();i++)
    {
        int to=v[x][i];
        if(first[to]==0 || tryk(first[to]))
        {
            first[to]=x;
            return true;
        }
    }
    return false;
}

bool solve(int k)
{
    for(int i=1;i<=n;i++)
        v[i].clear();
    for(int i=0;i<=k;i++)
    {
        v[order[i].second.first+1].push_back(order[i].second.second+1);
    }
    for(int i=1;i<=n;i++)
    {
        first[i]=0;
        used[i]=0;
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
            used[j]=0;
        tryk(i);
    }
    for(int i=1;i<=n;i++)
    {
        if(!first[i])
        {
            return false;
        }
    }
    return true;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin>>n>>m;
    for(int i=0;i<n;i++)
        cin>>a[i];
    for(int i=0;i<=n+m-2;i++)
        cin>>f[i];
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            order.push_back(make_pair(f[a[i]+j],make_pair(i,j)));
    sort(order.begin(),order.end());
    int cur=0;
    int ans=0;
    int l=0;
    int r=order.size()-1;
    while(r-l>1)
    {
        int mid=(l+r)/2;
        if(solve(mid))
            r=mid;
        else
            l=mid;
    }
    while(!solve(l))
        ++l;
    cout<<order[l].first<<"\n";
}
/**
4 4
0 1 2 3
1 2 3 4 5 6 7
*/

#include <bits/stdc++.h>
//#include <tr1/unordered_map>
//using namespace std::tr1;
using namespace std;
struct Node{
	int parent,rank;
};
class Disjoint{
private:
	unordered_map<int,Node> ds;
public:
	void make_set(int a){
		Node temp;temp.parent=a;temp.rank=0;
		ds.insert(make_pair(a,temp));
	}
	int getParent(int a){
		return a==ds[a].parent?a:ds[a].parent=getParent(ds[a].parent);
	}
	void Union(int a, int b){
      	int parent_a = this->getParent(a);
      	int parent_b = this->getParent(b);
      	if(parent_a==parent_b) return;
        else{
        	if(ds[parent_a].rank>=ds[parent_b].rank){
        		ds[parent_a].rank=(ds[parent_a].rank==ds[parent_b].rank)?ds[parent_a].rank+1:ds[parent_a].rank;
        		ds[parent_b].parent=ds[parent_a].parent;
        	}
        	else{
        		ds[parent_a].parent=ds[parent_b].parent;
        	}
        }

      }

};

int main(){
	ios::sync_with_stdio(false);
	int n,q,a,b;cin>>n>>q;
	Disjoint Ds;
	for(int i=1;i<=n;i++)  Ds.make_set(i);
    while(q--){
        cin>>a>>b;Ds.Union(a,b);
    }
    set<int> myset;
    for(int i=1;i<=n;i++){
    	myset.insert(Ds.getParent(i));
    }
    cout<<myset.size()<<"\n";
    return 0;
}
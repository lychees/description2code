#include <bits/stdc++.h>
using namespace std;

long long arr[105];

struct Cel
{
	int num;
	vector<long long> vec;
	long long tot;
};

vector<Cel> pVec;

bool cmp(Cel c5, Cel c7)
{
	if(c5.tot == c7.tot)
	return c5.vec.size() > c7.vec.size();
	
	return c5.tot > c7.tot;
}


long long tval = 0;
void getVec()
{
	int tn;
    cin >> tn;
    
    for(int ct = 0; ct < tn; ct++)
    {
    	Cel tmp;
    	cin >> tmp.num;
    	long long prv = 0;
    	vector<long long> vec;
    	for(int ctc = 0; ctc < tmp.num; ctc++)
    	{
    		long long tmv;
    		cin >> tmv;
    		tmp.vec.push_back(tmv - 1);
    	}
    	long long tot;
    	cin >> tmp.tot;
    	tval += tmp.tot;
    	//cout << tmp.tot << " rtrt" << endl; 
    	pVec.push_back(tmp);
    	
    }
}

int main()
{
    int num;
    cin >> num;
    long long curT = 0;
    for(int ct = 0; ct < num; ct++)
    {
    	cin >> arr[ct];
    	curT += arr[ct];
    }
    
    getVec();
    sort(pVec.begin(), pVec.end(), cmp);
    
    if(curT < tval)
    {
    	cout << tval - curT << endl;
    }
    else
    {
    long long ret = 0;
    for(int ct = 0; ct < pVec.size(); ct++)
    {
    	int curN = pVec[ct].num;
    	long long prv = 0;
    	for(int ctc = 0; ctc < curN; ctc++)
    	{
    		prv+= arr[pVec[ct].vec[ctc]];
    	}
    	//cout << pVec[ct].tot << endl;
    	if(pVec[ct].tot > prv)
    	{
    		ret += ( pVec[ct].tot -prv);
    		for(int ctc = 0; ctc < curN; ctc++)
    		{
    			arr[pVec[ct].vec[ctc]] = 0;	
    		}
    	}
    	
    }
    cout << ret << endl;
    }
    return 0;
}

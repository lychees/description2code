#include<iostream>
#include<vector>
#include<utility>
#include<queue>
#include<climits>
#include<cstring>
using namespace std;
void bfs(long long dist[],bool visited[],vector<pair<long long,long long> > vec[],long long s)
{
    queue<long long> q;
    q.push(s);
    visited[s]=true;
    long long p;
    while(!q.empty())
    {
        p=q.front();
        //cout<<p<<endl;
        q.pop();
        for(long long i=0;i<vec[p].size();i++)
        {
            if(visited[vec[p][i].first]==false)
                {
         //           cout<<'s'<<' '<<vec[p][i].first<<' ';
                    visited[vec[p][i].first]=true;
            dist[vec[p][i].first]=max(dist[vec[p][i].first],dist[p]+vec[p][i].second);
            q.push(vec[p][i].first);}
        }
        //cout<<endl;

    }
}
int main()
{
    long long t,n,a,b,w;
    ios::sync_with_stdio(false);
    cin>>t;
    while(t--)
    {
        cin>>n;
        if(n==1)
            cout<<0<<' '<<0<<endl;
        else
        {
            vector<pair<long long,long long> > vec[n+1];
        for(long long i=0;i<n-1;i++)
        {
            cin>>a>>b>>w;
            vec[a].push_back(make_pair(b,w));
            vec[b].push_back(make_pair(a,w));
        }
        bool visited[n+1];
        long long dist[n+1];
        memset(visited,false,sizeof(visited));
        memset(dist,0,sizeof(dist));
        //cout<<'a'<<' '<<a<<endl;
        bfs(dist,visited,vec,a);
        long long max = LLONG_MIN,index = 0;
        for(long long i=0;i<n+1;i++)
        {
            if(dist[i]>max)
            {
                max = dist[i];
                index = i;
            }
        }

        memset(visited,false,sizeof(visited));
        memset(dist,0,sizeof(dist));
        //cout<<"MMMM"<<endl;
        bfs(dist,visited,vec,index);
        max = LLONG_MIN;//index = 0;
        for(long long i=0;i<n+1;i++)
        {
            if(dist[i]>max)
            {
                max = dist[i];
                //index = i;
            }
        }
        if(max<=100)
            cout<<0<<' ';
        else if(max>10000)
            cout<<10000<<' ';
        else if(max>1000)
            cout<<1000<<' ';
        else if(max>100)
            cout<<100<<' ';
        cout<<max<<endl;
        }
    }
}

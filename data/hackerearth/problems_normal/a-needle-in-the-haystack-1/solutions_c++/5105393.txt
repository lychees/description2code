#include<bits/stdc++.h>
using namespace std;
void compute_lps(string pat,long long m,long long *lps);
long long kmp_search(string pat,string txt)
{
	long long m=pat.length();
	long long n=txt.length();
	long long  lps[100000];
	long long j=0;
	compute_lps(pat,m,lps);
	long long  i=0,flag=0;
	while(i<n)
	{  
		if(pat[j]==txt[i])
		{
			j++;
			i++;
		}
		if(j==m)
		 {
		   
		   flag=1;
		   j=lps[j-1];
	    }
	    
		else if(pat[j]!=txt[i])
		{
			if(j!=0)	
			 j=lps[j-1];
			else
			 i+=1;
		}
		
	}
	return flag;
}
void compute_lps(string pat,long long m,long long *lps)
 {
	    
	long long  len=0,i;
    
	lps[0]=0;
	i=1;

	while(i<m)
	{  
		if(pat[i]==pat[len])
		{
			len++;
			lps[i]=len;
			i++;
		}
		else
		{
			if(len!=0)
			{
				len=lps[len-1];
			}
			else
			{
				lps[i]=0;
				i++;
			}
		}
	}
}
int main()
{
    string txt,txt2,pat;
	
	long long t,z,y;
	cin>>t;
	while(t--)
	
	{
	cin>>pat>>txt;
	txt2=txt;
	reverse(txt2.begin(),txt2.end());
    z=kmp_search(pat,txt);
    if(z==0){
        y=kmp_search(pat,txt2);
        if(y==0) cout<<"NO"<<endl;
         else cout<<"YES"<<endl;
    }
    else cout<<"YES"<<endl;
	}
		
}

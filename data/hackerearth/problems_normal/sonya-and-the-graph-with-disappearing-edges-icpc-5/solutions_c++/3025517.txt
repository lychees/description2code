#include <iostream>
#include <algorithm>
#include <vector>
#include <utility>
#include <queue>
#include <map>
using namespace std;
vector<vector<int> > v1;
vector<pair<int,int> > v2;
vector<int> v3;
queue<pair<int,int> > q1;
map<pair<int,int> ,int> mp1;
int bfs(pair<int,int> &a)
{
	int sz=v1[a.first].size(),p3;
	//cout<<a.first<<"->"<<a.second<<"\n-->\n";
	for(p3=1;p3<sz;p3++)
	{
		if(v1[v1[a.first].at(p3)].at(0)==0&&(mp1[make_pair(a.first,v1[a.first].at(p3))]==0||mp1[make_pair(a.first,v1[a.first].at(p3))]>a.second))
		{
			v1[v1[a.first].at(p3)].at(0)=1;
			q1.push(make_pair(v1[a.first].at(p3),a.second+1));
		//	cout<<v1[a.first].at(p3)<<"->"<<a.second+1<<"\n";
		}
	}
}
int main()
{
    int n,m,k,p1,p2,l,r,res=1e9;
    cin>>n>>m>>k;
    v1.resize(n+1);
    v3.resize(n+1);
    for(p1=0;p1<=n;p1++)
    	v1[p1].push_back(0);
    for(p1=0;p1<m;p1++)
    {
    	cin>>l>>r;
    	v1[l].push_back(r);
    	v1[r].push_back(l);
    	v2.push_back(make_pair(l,r));
    }
    for(p1=0;p1<k;p1++)
    {
    	cin>>l>>r;
    	mp1[v2[r-1]]=l;
    	mp1[make_pair(v2[r-1].second,v2[r-1].first)]=l;
    }
    v1[1].at(0)=1;
    q1.push(make_pair(1,0));
    while(!q1.empty())
    {
    	if(q1.front().first==n)
        {
        	cout<<q1.front().second;
        	return 0;
        }
    	bfs(q1.front());
    	q1.pop();
    }
    cout<<"-1";
    return 0;
}

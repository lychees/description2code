#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

const int D = 19;
long long memo[D+1][1 << 4][2][2];
const int factors[10][4] = {
	{},
	{},
	{1},
	{2},
	{1,1},
	{3},
	{1,2},
	{4},
	{1,1,1},
	{2,2},
};
int Ldigits[D];

long long rec(int i, int parities, bool lz, bool gt) {
	long long &r = memo[i+1][parities][lz][gt];
	if(r != -1) return r;
	if(i == -1) return r = parities == 0 && !lz;
	r = 0;
	int e = Ldigits[i];
	if(lz && (gt || e <= 0))
		r += rec(i-1, parities, lz, gt);
	reu(d, 1, 10) if(gt || e <= d) {
		int j = 0;
		int np = parities;
		while(factors[d][j]) {
			np ^= 1 << (factors[d][j]-1);
			++ j;
		}
		r += rec(i-1, np, false, gt || e < d);
	}
	return r;
}

int main() {
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		long long A, B; int K;
		scanf("%lld%lld%d", &A, &B, &K), -- K;
		{	long long L = A;
			rep(d, D) {
				Ldigits[d] = L % 10;
				L /= 10;
			}
		}
		mset(memo, -1);
		long long cnt = rec(D-1, 0, true, false);
		if(cnt <= K) {
			puts("-1");
			continue;
		}
		long long ans = 0;
		long long pow10i = 1;
		rep(i, D-1) pow10i *= 10;
		bool gt = false, lz = true;
		int parities = 0;
		for(int i = D-1; i >= 0; -- i, pow10i /= 10) {
			int e = Ldigits[i];
			if(lz && (gt || e <= 0)) {
				long long t = rec(i-1, parities, lz, gt);
				if(K < t) {
					ans += pow10i * 0;
					goto next;
				}else {
					K -= t;
				}
			}
			reu(d, 1, 10) if(gt || e <= d) {
				int j = 0;
				int np = parities;
				while(factors[d][j]) {
					np ^= 1 << (factors[d][j]-1);
					++ j;
				}
				long long t = rec(i-1, np, false, gt || e < d);
				if(K < t) {
					ans += pow10i * d;
					parities = np;
					lz = false;
					gt = gt || e < d;
					goto next;
				}else {
					K -= t;
				}
			}
			next:;
		}
		if(ans > B) {
			puts("-1");
			continue;
		}
		printf("%lld\n", ans);
	}
	return 0;
}

#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
const int MAXN=1000005;
const int MOD=1000000007;
ll facs[MAXN];
ll invfacs[MAXN];
int modPow ( int a,int b ) {
    ll res=1;
    ll q=a;
    while ( b>0 ) {
        if ( b%2 ) res=res*q%MOD;
        b/=2;
        q=q*q%MOD;
    }
    return res;
}
int inv ( int a ) {
    return modPow ( a,MOD-2 );

}
int bino ( int n,int k ) {
    return  facs[n]*invfacs[k]%MOD*invfacs[n-k]%MOD;

}
int main() {
    ios_base::sync_with_stdio ( false );
    facs[0]=1;
    invfacs[0]=1;
    for ( int i=1; i<MAXN; i++ ) {
        facs[i]=i*facs[i-1]%MOD;
        invfacs[i]=inv ( facs[i]);
//         cout<<invfacs[2]<<" "<<invfacs[1]<<endl;
    }
    ll a,b,k,n;
    cin>>a>>b>>n>>k;
    ll val=(ll) modPow(a,k)*modPow(b,n-k)%MOD*bino(n,k)%MOD;
    cout<<val<<endl;
}


#include <bits/stdc++.h>
using namespace std;
struct Graph {
	int V;
	int E;
	vector<int> *gr;
	Graph(int x) {
		V = x;
		E = 0;
		gr = new vector<int>[V + 1];
	}

	void addEdge(int x, int y) {
		gr[x].push_back(y);
		gr[y].push_back(x);
		E++;
	}

	vector<int> adj(int curr) {
		return gr[curr];
	}
};
int vis[210];
bool ans;
void dfs(Graph G, int curr, int prev) {
	vis[curr] = !prev;
	
	int next = prev;
	int currCol = !prev;
	
	vector<int> x = G.adj(curr);
	
	for(int i = 0; i < x.size(); i ++) {
		int child = x[i];
		if(vis[child] == -1)
			dfs(G, child, currCol);
		else if(vis[child] == currCol)
			ans = false;
	}
}
void solve()
{
    int n, m, x, y;
    scanf("%d%d",&n,&m);
    Graph G(n);
    for(int i = 0; i <= n; i ++)	vis[i] = -1;
    for(int i = 1; i <= m; i ++) {
    	scanf("%d%d",&x,&y);
    	G.addEdge(x, y);
    }
    
    ans = true;
    dfs(G, 1, 0);
    
    if(ans != true)
    	printf("NOT BICOLORABLE.\n");
    else
    	printf("BICOLORABLE.\n");
}

int main() {
	int t;
	scanf("%d",&t);
	while(t--)
		solve();
	return 0;
}
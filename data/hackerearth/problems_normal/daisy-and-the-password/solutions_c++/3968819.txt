#include <iostream>
#include <climits>

using namespace std;

struct node{
    node * left;
    node * right;
    char data;
    int count = 1;
};

void inorder(node *root)
{
    if(root != NULL)
    {
        inorder(root->left);
        cout << root->data << " " << root -> count << endl;
        inorder(root->right);
    }
}
node * search_tree(node * root, char x){

    if(root == NULL)
        return NULL;

    if(root -> data == x)
        return root;
    if(root -> data > x)
        return search_tree(root -> left, x);

    else
        return search_tree(root -> right , x);
}
node * insert_tree1(node *root, char x){



    node * p= new node;
    p -> left = NULL;
    p -> right = NULL;
    p -> data = x;


    if(root == NULL){
        root = p;
        return root;
    }

    else if(x < root -> data){
        root -> left = insert_tree1(root -> left,x);
        return root;
    }
    else {
        root -> right = insert_tree1(root -> right,x);
        return root;

    }
}

int identical_tree(node *root,node *root1){

    if(root == NULL && root1 == NULL)
        return 1;

    if((root == NULL && root1 != NULL) || (root != NULL && root1 == NULL) || (root -> data != root1 -> data) || (root -> count * 2 != root1 -> count))
        return 0;

    return (identical_tree(root -> right , root1 -> right ) && identical_tree(root -> left , root1 -> left));

}
int main(){

    node * root ;
    node *root1;
    char x;

    int d;
    cin >> d;
    string s;
    string s1;
    for(int i = 0; i < d; i++){
    cin >> s >> s1;
    int n = s.size();
    int n1 = s1.size();
    root = NULL;
    root1 = NULL;
    for(int i = 0; i < n; i++){
        x = s[i];
        node *n = search_tree(root ,x);
        if(n != NULL){

        n -> count++;
        }
        else
        root = insert_tree1(root,x);

    }
   // inorder(root);
  // cout << endl;
 

   for(int i = 0; i < n1; i++){
    x = s1[i];
        node *n = search_tree(root1 ,x);
        if(n != NULL){

        n -> count++;
        }
        else
        root1 = insert_tree1(root1,x);
   }
 //  inorder(root1);
  // cout << endl;
   int t = identical_tree(root,root1);
   if(t == 1)
    cout <<"Possible\n";

   else
    cout <<"Impossible\n";
    
    }
    return 0;
}

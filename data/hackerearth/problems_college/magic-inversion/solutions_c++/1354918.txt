#include <bits/stdc++.h>
using namespace std;
long long tree[200005];
long long int A[1000005];
long long int B[1000005];

int isPrime(long long int number) {
    long long int i;
    for (i=2; i*i<=number; i++) {
        if (number % i == 0) return 0;
    }
    return 1;
}
long long query(int idx)
{
    long long res = 0;
    while ( idx > 0 ) {
        res += tree[idx];
        idx -= (idx & (-idx));
    }
    return res;
}
void update(int idx)
{
    while ( idx <= 100001 ) {
        tree[idx] += 1;
        idx += (idx &(-idx));
    }
    return;
}
int main()
{
    int t=1,n;
    while ( t--  ){
        cin >> n;
        for ( int i = 0; i < n; i++ ) cin >> A[i];
        for ( int i = 0; i < n; i++ ) cin >> B[i];
        memset(tree, 0, sizeof(tree));
        long long ans = 0;
        for ( int i = n-1; i >= 0; i-- ) {
            ans += query(A[i]-1);
            update(B[i]);
        }
        
        if(isPrime(ans) == 1){
        cout << "MAGIC INVERSION" << endl;
        
        
        }
        
       if(isPrime(ans) == 0){
        	
        	cout << "SIMPLE INVERSION" << endl;
        }
    }
       
    return 0;
}
#include <vector>
#include <utility>
#include <algorithm>
#include <stdio.h>
using namespace std;
typedef pair< int ,pair< int,int> > PII;
vector < PII > edges;
int parent[5001];
bool comp(const PII &a,const PII &b)
{
    return a.first>b.first;
}
int root(int i)
{
    while(i!=parent[i])
    {
        parent[i]=parent[parent[i]];
        i=parent[i];
    }
    return i;
}
void unionSet(int a,int b)
{
    a=root(a);
    b=root(b);
    if(a!=b)
    {
        parent[a]=b;
    }
}
void init(int n)
{
    int i;
    for(i=1;i<=n;i++)
    {
        parent[i]=i;
    }
}
int kruskal(int m)
{
    int i;
    int w;
    int maxCost=0;
    pair<int ,int> p;
    for(i=0;i<m;i++)
    {
        w=edges[i].first;
        p=edges[i].second;
        if(root(p.first)!=root(p.second))
        {
            maxCost+=w;
            unionSet(p.first,p.second);
        }
    }
    return maxCost;
}
int main()
{
    int t,n,m,a,b,c,maxCost,i;
    scanf("%d",&t);
    while(t--)
    {
        edges.clear();
        scanf("%d %d",&n,&m);
        init(n);
        for(i=0;i<m;i++)
        {
            scanf("%d %d %d",&a,&b,&c);
            edges.push_back(make_pair(c,make_pair(a,b)));
        }
        sort(edges.begin(),edges.end(),comp);// descending order sort
        maxCost=kruskal(m);
        printf("%d\n",maxCost);
    }
    return 0;
}

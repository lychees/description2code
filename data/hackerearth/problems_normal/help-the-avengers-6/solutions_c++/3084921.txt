#include <bits/stdc++.h>
using namespace std;

bool isPrime[1000001];

void sieve()
{
  isPrime[0]=isPrime[1]=false;
  for(int i=2;i<1000001;i++)
   isPrime[i]=true;
  for(int i=2;i*i<=1000000;i++)
   {
	   if(isPrime[i]==true)
	    {
			for(int j=i*i;j<=1000000;j=j+i)
			 isPrime[j]=false;
	    }
	}
}

int bit[32001]={0};
int arr[32001];

void update(int a,int value,int size)
{
	for(;a<=size;a+=a&-a)
	bit[a]+=value;
}

int query(int x)
{
  int sum=0;
  for(;x>0;x-=x&-x)
  sum+=bit[x];
  return sum;
}


int main()
{   //freopen("input1.txt","r",stdin);
	//freopen("output1.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	sieve();
	int t; cin>>t;
	while(t--)
	{ 
	 
	   int n; cin>>n;
	   for(int i=1;i<=n;i++)
	    {   bit[i]=0;
			cin>>arr[i];
		}
	   for(int i=1;i<=n;i++)
	   {
		   if(isPrime[arr[i]])
	       {
			   update(i,1,n);
		   }	
	   }
	   int queries; cin>>queries;
	   while(queries--)
	   {
		   char c; int x,y;
		   cin>>c>>x>>y;
		   if(c=='C')
		   {   
			   if(isPrime[arr[x]])
			   {
			   if(isPrime[y]);	
		       else
		       update(x,-1,n);
		       }
		       else
		       {
				   if(isPrime[y])
				    update(x,1,n);	
		       }
		       arr[x]=y;
		   }
	       else 
	       {
			   printf("%d\n",query(y)-query(x-1));
		   }
		}
	  }
	 return 0;
	}

#include <bits/stdc++.h>
using namespace std;
string txt;
void buildSuffixArray(int);
struct suffix
{
    int index;
    int rank[2];
}*suffixes;
int cmp(struct suffix a, struct suffix b)
{
    return (a.rank[0] == b.rank[0])? (a.rank[1] < b.rank[1] ?1: 0):
    	(a.rank[0] < b.rank[0] ?1: 0);
}
int main() {
	int n,q,i,num;
	scanf("%d\n",&n);
	getline(std::cin,txt);
	txt+="$";
	suffixes = (struct suffix*)malloc(n*sizeof(struct suffix));
	buildSuffixArray(n);
	scanf("%d",&q);
	while(q!=0)
	{
		scanf("%d",&num);
		for(i = 0; i<n; i++)
		{
			if(suffixes[i].index <= num)
			{
				break;
			}
		}
		printf("%d\n",suffixes[i].index);
		q--;
	}
	return 0;
}
void buildSuffixArray(int n)
{
    for (int i = 0; i < n; i++)
    {
        suffixes[i].index = i;
        suffixes[i].rank[0] = txt[i] - 'a';
        suffixes[i].rank[1] = (txt[(i + 1)%n] - 'a');
    }
    sort(suffixes, suffixes+n, cmp);
    /*printf("n is %d\n",n);
    for(int i = 0; i<n; i++)
    {
    	printf("%d ",suffixes[i].index);
    }
    printf("\n");*/
    int ind[n];
    for (int k = 4; k < 2*n; k = k*2)
    {
        int rank = 0;
        int prev_rank = suffixes[0].rank[0];
        suffixes[0].rank[0] = rank;
        ind[suffixes[0].index] = 0;
        for (int i = 1; i < n; i++)
        {
            if (suffixes[i].rank[0] == prev_rank &&
                    suffixes[i].rank[1] == suffixes[i-1].rank[1])
            {
                prev_rank = suffixes[i].rank[0];
                suffixes[i].rank[0] = rank;
            }
            else
            {
                prev_rank = suffixes[i].rank[0];
                suffixes[i].rank[0] = ++rank;
            }
            ind[suffixes[i].index] = i;
        }
        for (int i = 0; i < n; i++)
        {
            int nextindex = suffixes[i].index + k/2;
            suffixes[i].rank[1] = suffixes[ind[nextindex%n]].rank[0];
        }
        sort(suffixes, suffixes+n, cmp);
    }
}
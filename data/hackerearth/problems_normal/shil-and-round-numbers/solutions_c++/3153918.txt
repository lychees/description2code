#include <bits/stdc++.h>

using namespace std;

string toString(int n) {
    ostringstream ost;
    ost << n;
    ost.flush();
    return ost.str();
}

int toInt(string s) {
    int r = 0;
    istringstream sin(s);
    sin >> r;
    return r;
}

bool isprime(int m) {
    if (m < 2) return 0;
    for (int i = 2; i * i <= m; i++)if (m % i == 0)return 0;
    return 1;
    return 0;
}

# define sz(x) (int)x.size()
# define mp make_pair
# define vi vector<int>
# define pi pair<int,int>
# define pb push_back

#define s(n)   scanf("%d",&n)
#define sl(n)  scanf("%lld",&n)
#define ss(n)  scanf("%s",n)

#define INF    (int)1e9
#define EPS    1e-9

#define foreach(v, c)   for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define Fw(a, b, c)  for (int (a)=(b); (a)<(c); (a)++)
#define Fd(a, b, c)  for (int (a)=(b); (a)>=(c); (a)--)

#define all(a)    a.begin(), a.end()
#define in(a, b)   ( (b).find(a) != (b).end())

template<typename T, typename TT>
ostream &operator<<(ostream &s, pair<T, TT> t) { return s << "(" << t.first << "," << t.second << ")"; }

#define out(a, i) cout<<#a<<"= "<<a<<(i==1?'\n':' ');
#define printA(a, L, R) Fw(i,L,R) cout << a[i] << (i==R-1?'\n':' ')
#define d(s) cout << #s << " " << s << " ";
#define en() cout << endl;
#define reset(a, b)   memset(a,b,sizeof(a))
#define SYNC         ios_base::sync_with_stdio(0);

//bit[12] will contain sum of numbers from n to n - 1<<r(lastsetbit of n 0indexed) + 1 included
//to find sum of first 12 numbers 1100 so bit[12] + bit[8]  1100 + 1000-- useful for query
//above is obtained by subtracting lbs
//isolate last set bit = x&-x
//val[x]'s contribution is stored in bit[x]  useful for updation
//obtained by adding lbs
//function property associative and inverse
//usage when above property + o(N) space + log(N)
#include <iostream>
using namespace std;

//int bit[26][100001];
//string s;
//void update(int i,int x, int val) {
//
//    while (x <=s.length()) {
//        bit[i][x] += val;
//        x = x + (x&-x);
//    }
//
//}
//
//string query(int l, int r) {
//
//    long long int res = 0;
//    for (char ch = 'a'; ch <= 'z'; ch = ch + 1) {
//
//        long long int f1=0,f2=0;
//        int x = l-1;
//        while(x>0) {
//            f1 += bit[ch-'a'][x];
//            x = x - (x&-x);
//        }
//        x = r;
//        while(x>0) {
//            f2 += bit[ch-'a'][x];
//            x = x - (x&-x);
//        }
//        res += (f2-f1)%2;
//    }
////    cout << "res " << res << endl;
//    if (res>1)
//        return "no";
//    else
//        return "yes";
//
//}
long long int bit[200001];
void update(int x, long long int val, int n) {

    while (x <=n) {
        bit[x] += val;
        x = x + (x&-x);
    }

}
long long int query(int x) {
    long long int f=0;
    while(x>0) {
        f += bit[x];
        x = x - (x&-x);
    }
    return f;
}
int main()
{
    // freopen("1input.txt", "r", stdin);
    int x,l,r,n,c,q;
    long long int ch;string s;
    cin >> n >> q;
    vector <string> arr;
    for (int i = 0; i < n; i++) {
        cin >> s;
        arr.push_back(s);
        
        if((s[0]!='-')&&(s[0]!='0') && (s[0]==s[s.length()-1]))update(i+1,1,n);
    }
    while(q--) {
        cin >> c;
        if (c == 2) {
            cin >> x >> s;
            
            if((arr[x-1][0]!='-')&&(arr[x-1][0]!='0')&&arr[x-1][0]==arr[x-1][arr[x-1].length()-1])
                update(x,-1,n);
            arr[x-1] = s;    
            if((s[0]!='-')&&(s[0]!='0')&&(s[0]==s[s.length()-1]))
                update(x,1,n);

        } else {
            cin >> l >> r;
            cout << (query(r) - query(l-1))<< endl;
        }
    }

    return 0;
}
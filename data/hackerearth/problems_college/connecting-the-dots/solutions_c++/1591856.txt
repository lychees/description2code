#include <iostream>
#include <queue>
using namespace std;

int n;
vector <vector< pair<int,int> > > G;
int bfs(int start)
{
	int index,ans[1001],i,c;
	bool visited[1001][3];
	pair<int,pair<int,int> >temp;
	queue<pair< int,pair<int,int> > >q;
	int cost=0;
	int color=-1;
	q.push(make_pair(start,make_pair(cost,color)));
	for (i=0;i<n;i++)
	{
		for (c=0;c<3;c++)
		{
			visited[i][c]=false;
		}
		ans[i]=n*n;
	}
	visited[start][0]=true;
	visited[start][1]=true;
	visited[start][2]=true;	
	while (!q.empty())
	{
		temp=q.front();
		q.pop();
		index=temp.first;
		cost=temp.second.first;
		color=temp.second.second;
		for (int k=0;k<G[index].size();k++)
		{
			i=G[index][k].first;
			c=G[index][k].second;
			if (!visited[i][c] && c!=color)
			{
				visited[i][c]=true;
				ans[i]=min(ans[i],cost+1);
				q.push(make_pair(i,make_pair(cost+1,c)));
			} 
		}
	}
	return ans[n-1];
}
int main()
{
    int m,i,j,c,a,b;
    scanf("%d%d",&n,&m);
  //  cin>>n>>m;
    vector<pair<int,int> > v_temp;
    for (i=0;i<n;i++)
    	G.push_back(v_temp);
//    for (i=0;i<n;i++)
  //  	for (j=0;j<n;j++)
    //		for (c=0;c<3;c++)
    	//		G[i][j][c]=0;
    for (i=0;i<m;i++)
    {
    	scanf("%d%d%d",&a,&b,&c);
 //   	cin>>a>>b>>c;
    	a--;
    	b--;
    	c--;
    	G[a].push_back(make_pair(b,c));
//    	G[a][b][c]=1;
    }
    m=bfs(0);
    if (m!=n*n)
    cout<<m<<endl;
    else
    cout<<-1<<endl;
    return 0;
}
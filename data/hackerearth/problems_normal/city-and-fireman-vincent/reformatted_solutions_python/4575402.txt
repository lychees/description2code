from collections import defaultdict
N = int(raw_input())
risk = map(int, raw_input().split(" "))
risk.insert(0, 0)
K = int(raw_input())
adj = defaultdict(list)
visited = [False]*(N+1)


def bfs(i):
    visited[i] = True
    q = [i]
    min_risk = risk[i]
    city_count = 0
    while q:
        node = q[0]
        q = q[1:]
        if risk[node] < min_risk:
            min_risk = risk[node]
            city_count = 1
        elif risk[node] == min_risk:
            city_count += 1
        for neighbour in adj[node]:
            if not visited[neighbour]:
                q.append(neighbour)
                visited[neighbour] = True
    return city_count


min_risk = 1000000000000000000
city_count = 0


def dfs(node):
    global min_risk
    global city_count
    visited[node] = True
    if risk[node] < min_risk:
        min_risk = risk[node]
        city_count = 1
    elif risk[node] == min_risk:
        city_count += 1
    for neighbour in adj[node]:
        if not visited[neighbour]:
            dfs(neighbour)


for i in range(K):
    i, j = map(int, raw_input().split(" "))
    adj[i].append(j)
    adj[j].append(i)
count = 1
for i in range(1, N+1):
    min_risk = 1000000000000000000
    city_count = 0
    if not visited[i]:
        ans = bfs(i)
        # print "Ans ", city_count
        count *= ans
print count % 1000000007

#include <bits/stdc++.h>
using namespace std;

#define REPU(i, a, b) for (int i = (a); i < (b); ++i)
#define REPD(i, a, b) for (int i = (a); i > (b); --i)
#define MEM(a, x) memset(a, x, sizeof(a))
#define ALL(a) a.begin(), a.end()
#define UNIQUE(a) a.erase(unique(ALL(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) { return (a < b) ? a : b; }
template<class T> inline T tmax(T a, T b) { return (a > b) ? a : b; }
template<class T> inline void amax(T &a, T b) { if (b > a) a = b; }
template<class T> inline void amin(T &a, T b) { if (b < a) a = b; }
template<class T> inline T tabs(T a) { return (a > 0) ? a : -a; }
template<class T> T gcd(T a, T b) { while (b != 0) { T c = a; a = b; b = c % b; } return a; }

const int N = 21, NEG_INF = -1e9;
int n, m, a[N][N];
int dp[N], tmp[N], s[N], bin[1 << N];

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);

	int c;

	cin >> n >> m >> c;
	REPU(i, 0, n) REPU(j, 0, m) cin >> a[i][j];
	int ans = -c * min(m, n), lim = 1 << m;
	bin[0] = 0;
	REPU(mask, 1, lim) {
		if (mask & 1) bin[mask] = 1 + bin[mask ^ 1];
		else bin[mask] = bin[mask >> 1];
		REPU(i, 0, n) {
			int sum = 0;
			REPU(j, 0, m) if ((mask >> j) & 1) {
				sum += a[i][j];
			}
			s[i] = sum;
		}
		REPU(i, 0, n + 1) dp[i] = NEG_INF;
		dp[0] = 0;
		int rest = bin[mask];
		REPU(col, 0, n) {
			REPU(i, 0, n + 1) tmp[i] = dp[i];
			REPU(i, 0, n) if (dp[i] != NEG_INF) {
				amax(tmp[i + 1], dp[i] + s[col]);
			}
			REPU(i, 0, n + 1) {
				dp[i] = tmp[i];
				amax(ans, dp[i] - c * (m - rest + n - i));
			}
		}
	}
	
	cout << ans << endl;
	
	
	return 0;
}

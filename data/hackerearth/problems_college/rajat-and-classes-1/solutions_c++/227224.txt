#include<iostream>
#include<vector>
#include<list>
#include<cstdlib>
#include<algorithm>
using namespace std;
typedef vector<list<int> > Graph;
Graph g(100004);
int count[100004];
int arr[100004];
int arr1[100004];
int arri[100004];
int isvisited[100004];
int gg[101][101];
int k,t;
int cmp(const void *a,const void *b)
{
	return *(int *)a-*(int *)b;
}
int dfs(int ver)
{	
 isvisited[ver]=1;
	//cout<<ver<<endl;
	arr1[k++]=ver;
	list<int>::iterator j=g[ver].end() ;
	for(list<int>::iterator i=g[ver].begin();i!=j;i++)
	{
		if(!isvisited[*i])
		{
		dfs(*i);
		}
	}
}
void utildfs(int n)
{
	int max;
	for(int i=1;i<=n;i++)
	{	k=0;
		if(!isvisited[i])
		{	t++; 
			dfs(i);
			arri[t-1]=arr1[0];
		max=arr[arr1[0]];
		for(int j=1;j<k;j++)
			{
			if(max<arr[arr1[j]])
			{
				max=arr[arr1[j]];
				arri[t-1]=arr1[j];
			}
			else if(max==arr[arr1[j]])
			{
				arri[t-1]=min(arri[t-1],arr1[j]);
			}
			}
		}
	}
}
int main()
{
	int n,c,i,a,b;
	cin>>n>>c;
	for(i=0;i<c;i++)
	{
	cin>>a>>b;
	
	g[a].push_back(b);
	g[b].push_back(a);
	
	arr[a]++;
	arr[b]++;
	}
	utildfs(n);
	cout<<t<<endl;
	//arri[0]=4;arri[1]=2;
	qsort(arri,t,sizeof(int),cmp);
	for(i=0;i<t;i++)
	{
		cout<<arri[i]<<" ";
	}
	return 0;
}
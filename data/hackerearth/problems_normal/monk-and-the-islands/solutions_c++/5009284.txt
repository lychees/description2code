#include<iostream>
#include<set>
#include<algorithm>
#include<map>
#include<queue>
#include<vector>
using namespace std;
#define pb push_back

typedef long long int ll; // [9,223,372,036,854,775,807 to -9.....808]
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef pair<ll,ll> pll;
typedef set<int> si;
typedef set<ll> sl;
typedef map<string, ll> mapsl;
typedef map<string, int> mapsi;
typedef map<int,int> mapii;
typedef map<ll, ll> mapll;

set<int> node[100009];
bool visit[100009];


vector<int> vec[100002];
queue<int> qu;
bool visited[100002];
long int level[100002];
long int cnt= 0,x;
long long bfs(long int s,long long n)
{
      queue < pii > qu ;
      qu.push(make_pair(0,s));
      visited[s] = true;
      while(!qu.empty())
      {
          int ind = qu.front().second ;
          for(int i=0;i<vec[ind].size();i++)
          {
              if(vec[ind][i] == n) return qu.front().first + 1 ;
              if(!visited[vec[ind][i]])
              {
                  visited[vec[ind][i]] = true;
                  qu.push(make_pair(qu.front().first + 1 ,vec[ind][i]));
              }
          }
          qu.pop();
      }
}
int main()
{
    long int a,b,n,m,t;
    cin>>t;
   while(t--)
   {
        cin>>n>>m;
        for(int i=0;i<m;i++)
        {
            cin>>a>>b;
            vec[a].pb(b);
            vec[b].pb(a);
            visited[a] = visited[b] = false;
        }
        cout<<bfs(1,n)<<endl;
        for(int i=0;i<=n;i++) vec[i].clear();
   }
    return 0;
}

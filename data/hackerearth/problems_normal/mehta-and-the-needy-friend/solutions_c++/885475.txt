#include <iostream>
#include <sstream>
#include <string>
#include <stdio.h>
using namespace std;

string s;
int pre[] = {0,0,1,2,0,4,3,8,1,0,5};
bool vis[22][1<<4];
long long d[22][1<<4];
int n;


long long cal(int len,int mask)
{
	if (len == 0)
	{
		if (!mask) return 1;
		return 0;
	}
	if (vis[len][mask]) return d[len][mask];
	long long ans = 0;
	vis[len][mask] = true;
	for(int i = 1;i < 10;i++)
	{
		ans += cal(len - 1,mask ^ pre[i]);
	}
	d[len][mask] = ans;
	return ans;
}

long long f(int idx,int mask)
{
	if (idx == n || s[idx] == '0')
	{
		return 0;
	}

	long long ans = 0;
	for (int i = 1;i < (s[idx] - '0');i++)
	{
		ans += cal(n - idx - 1,mask ^ pre[i]);
	}
	if (idx == n - 1) ans += cal(n - idx - 1,mask ^ pre[s[idx] - '0']);
	ans += f(idx + 1,mask ^ pre[s[idx] - '0']);
	return ans;
	
}

long long get(long long x)
{
	stringstream ss;
	ss.clear();
	ss << x;
	s = ss.str();
	n = s.size();
	long long ans = 0;
	ans += f(0,0);
	for(int i = 1;i < n;i++)
	{
		ans += cal(i,0);
	}
	return ans;
}

int main()
{
	int t;
	long long a,b,k,l,r,m,ans;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%lld%lld%lld",&a,&b,&k);
		l = a;
		r = b;
		long long init = get(a - 1);
		ans = -1;
		while (l <= r) {
			m = (l + r) /2;
			long long val = get(m) - init;
			if (val >= k) {
				ans = m;
			r = m - 1;
			}
			else l = m + 1;
		}
		printf("%lld\n",ans);
	}
	return 0;
}
		

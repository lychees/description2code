#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(false);cin.tie(0);
using namespace std;
#define pb push_back
#define pob pop_back
#define pf push_front
#define pof pop_front
#define mp make_pair
#define all(a) a.begin(),a.end()
#define bitcnt(x) __builtin_popcountll(x)
#define MOD 179424673
#define total 5000005
#define M 1000000000001
#define NIL 0
#define MAXN 100005
#define EPS 1e-5
#define INF (1<<28)
typedef unsigned long long int uint64;
typedef long long int int64;
int col[MAXN];
vector<int>node[111];
int n;
int d[MAXN];
int dijkstra(int sor,int des){
	queue<pair<int,int> >p;
	for(int i=0;i<n;i++)
	d[i]=INF;
	d[sor]=0;
	p.push(mp(d[sor],sor));
	while(!p.empty()){
		int nod=p.front().second;
		int val=p.front().first;
		if(nod==des)
		return d[nod];
		p.pop();
		for(int i=0;i<node[col[nod]].size();i++){
			int to=node[col[nod]][i];
			if(d[nod]+1<d[to]){
				d[to]=d[nod]+1;
				p.push(mp(d[to],to));
			}
			if(to==des)
			return d[to];
		}
		if(nod-1>=0){
			int to=nod-1;
			if(d[nod]+1<d[to]){
				d[to]=d[nod]+1;
				p.push(mp(d[to],to));
			}
			if(to==des)
			return d[to];
		}
	}
	return d[des];
}
int main(){
	int i,j;
	cin>>n;
	for(i=0;i<n;i++){
		scanf("%d",&col[i]);
		node[col[i]].pb(i);
	}
	int q,s,m,e;
	cin>>q;
	while(q--){
		scanf("%d%d%d",&s,&m,&e);
		int ans=dijkstra(s,m);
		if(ans==INF){
			printf("%d\n",-1);
			continue;
		}
		int ans1=dijkstra(m,e);
		if(ans1==INF){
			printf("%d\n",-1);
			continue;
		}
		printf("%d\n",ans+ans1);
	}
	return 0;
}
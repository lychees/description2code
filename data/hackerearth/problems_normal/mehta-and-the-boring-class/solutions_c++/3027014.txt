#include <iostream>
#include <vector>
#include <map>
#include <cstdio>
using namespace std;
vector<int> v1,v2;
map<int,int> mp1;
map<int,int>::iterator it;
void build(int node,int s,int e)
{
	if(s==e)
	{
		v2[node]=v1[s];
		return;
	}
	int mid=(s+e)/2;
	build(node*2,s,mid);
	build(node*2+1,mid+1,e);
	v2[node]=v2[node*2]+v2[node*2+1];
}
int query(int node,int s,int e,int l,int r)
{
	if(r<s||l>e)
		return 0;
	if(l<=s&&r>=e)
		return v1[node];
	int mid=(s+e)/2;
	return (query(node*2,s,mid,l,r)+query(node*2+1,mid+1,e,l,r));
}
int main()
{
    int t,n,p1,p2,a,b;
    ios::sync_with_stdio(false);
    v1.resize(1000000+1,0);
    v2.resize(40000000+4);
    v1[0]=0;
    v1[1]=0;
    for(p1=2;p1<=1000000;p1++)
    {
    if(v1[p1]>0)
    	continue;
    	for(p2=p1;p2<=1000000;p2+=p1)
    	{
    		n=p2;
    		while(n%p1==0)
    		{
    			v1[p2]++;
    			n/=p1;
    		}
    	}
    }
    for(p1=2;p1<=1000000;p1++)
    	v1[p1]+=v1[p1-1];
  //  build(1,1,100000);
    scanf("%d",&t);
    while(t--)
    {
    	scanf("%d %d",&a,&b);
    //	cout<<query(1,1,100000,a,b)<<"\n";
    	printf("%d\n",v1[b]-v1[a-1]);
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
#define int long long
vector <int> bfs; 
vector <int> edges[100005];
int vis[100005]; 
int key[100005]; 
int dp[100005]; 
int maxi=0; 
void bfst (int root)
{
	queue <int> x;
	vis[root]=1; 
	x.push(root); 
	while (x.size())
	{
		int r=x.front(); 
		x.pop(); 
		bfs.push_back(r); 
		for (int y=0; y<edges[r].size(); y++)
		{
			if (vis[edges[r][y]]) continue; 
			vis[edges[r][y]]=1; 
			key[edges[r][y]]=1+key[r];
			x.push(edges[r][y]);  
			maxi=max(maxi, key[edges[r][y]]); 
		}
	} 	
} 
main() 
{
	int a,b; cin >> a >> b;
	for (int g=0; g<b; g++)
	{
		int c,d; cin >> c >> d;
		edges[c].push_back(d); 
		edges[d].push_back(c); 
	}
	int r; cin >> r;
	bfst(r);
	for (int g=bfs.size()-1; g>=0; g--)
	{
		int node=bfs[g]; 
		vis[node]=1; 
		if (key[node]==maxi)
		{
			dp[node]=1; continue; 
		}
		for (int y=0; y<edges[node].size(); y++)
		{
			int newnode=edges[node][y]; 	
			if (key[node]<key[newnode])
			{
				dp[node]+=dp[newnode]; 	
			}		
		}
	}
	for (int g=1; g<=a; g++) cout << dp[g] << ' '; 
	return 0; 
}
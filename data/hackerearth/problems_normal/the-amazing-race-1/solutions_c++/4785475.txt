#include<iostream>
#include<stdio.h>
#include<stack>
#include<vector>
#include<algorithm>
using namespace std;
#define m 1000000007
vector <int> next_greater(vector<int> a)
{ stack <pair<int,int> > s;
  vector <int> res(a.size());
  s.push(make_pair(a[0],0));
  //cout<<"Pushing "<<a[0]<<" and "<<"0"<<"\n";
  int i;
  for(i=1;i<a.size();i++)
  { //cout<<"Element being considered is "<<a[i]<<" and " <<i<<"\n";
    if(s.empty())
     {  s.push(make_pair(a[i],i));
        //cout<<"Pushing "<<a[i]<<" and "<<i<<"\n";
        continue;
     }
    pair<int,int> p=s.top();
    //cout<<"Top of stack is "<<p.first<<"  and "<<p.second<<"\n";
    if(a[i]<p.first)
      { s.push(make_pair(a[i],i));
        //cout<<"Pushing "<<a[i]<<" and "<<i<<"\n";
      }
    else
    { while(1)
      { if(s.empty())
        {
          break;
        }
        pair<int,int> p=s.top();
        if(p.first<a[i])
        { s.pop();
          //cout<<"Popping top of stack "<<"\n";
          res[p.second]=i;
          //cout<<"Next greater element of "<<p.first<<" is "<<a[i]<<"\n";
        }
        else
          break;
      }
      s.push(make_pair(a[i],i));
      //cout<<"Pushing "<<a[i]<<" and "<<i<<"\n";
    }
  }
  vector <pair<int,int> > temp;
  while(!s.empty())
  { pair<int,int> p=s.top();
    s.pop();
    temp.push_back(p);
    //res[p.second]=-1;
  }
  reverse(temp.begin(),temp.end());
  for(i=0;i<(temp.size()-1);i++)
  { if(temp[i].first==temp[i+1].first)
      res[temp[i].second]=temp[i+1].second;
    else
      res[temp[i].second]=-1;
  }
  res[temp[i].second]=-1;
  for(i=0;i<res.size();i++)
  { 
    if(res[i]==-1)
       res[i]=a.size()-1-i;
    else
    { res[i]=res[i]-i;
    }
  }
  return res;
}
vector <int> previous_greater(vector<int> a)
{ stack <pair<int,int> > s;
  reverse(a.begin(),a.end());
  vector <int> res(a.size());
  s.push(make_pair(a[0],0));
  //cout<<"Pushing "<<a[0]<<" and "<<"0"<<"\n";
  int i;
  for(i=1;i<a.size();i++)
  { //cout<<"Element being considered is "<<a[i]<<" and " <<i<<"\n";
    if(s.empty())
     {  s.push(make_pair(a[i],i));
        //cout<<"Pushing "<<a[i]<<" and "<<i<<"\n";
        continue;
     }
    pair<int,int> p=s.top();
    //cout<<"Top of stack is "<<p.first<<"  and "<<p.second<<"\n";
    if(a[i]<p.first)
      { s.push(make_pair(a[i],i));
        //cout<<"Pushing "<<a[i]<<" and "<<i<<"\n";
      }
    else
    { while(1)
      { if(s.empty())
        {
          break;
        }
        pair<int,int> p=s.top();
        if(p.first<=a[i])
        { s.pop();
          //cout<<"Popping top of stack "<<"\n";
          res[p.second]=i;
          //cout<<"Next greater element of "<<p.first<<" is "<<a[i]<<"\n";
        }
        else
          break;
      }
      s.push(make_pair(a[i],i));
      //cout<<"Pushing "<<a[i]<<" and "<<i<<"\n";
    }
  }
  vector <pair<int,int> > temp;
  while(!s.empty())
  { pair<int,int> p=s.top();
    s.pop();
    //res[p.second]=-1;
    temp.push_back(p);
  }
  reverse(temp.begin(),temp.end());
  for(i=0;i<(temp.size()-1);i++)
  { if(temp[i].first==temp[i+1].first)
      res[temp[i].second]=temp[i+1].second;
    else
      res[temp[i].second]=-1;
  }
  res[temp[i].second]=-1;
  reverse(res.begin(),res.end());
  for(i=0;i<res.size();i++)
  { if(res[i]==-1)
        continue;
    res[i]=a.size()-1-res[i];
  }
  for(i=0;i<res.size();i++)
  { if(res[i]==-1)
       res[i]=i;
    else
    { res[i]=i-res[i];
    }
  }
  return res;
}
int main()
{ int tc;
  cin>>tc;
  while(tc--)
  { int n;
    cin>>n;
    vector <int> a(n);
    int i;
    for(i=0;i<n;i++)
        cin>>a[i];
    vector <int> b;
    vector <int> c;
    b=next_greater(a);
    c=previous_greater(a);
    vector <long long int> d(n);
    int max=-1;
    int ind=-1;
    for(i=0;i<n;i++)
    {  d[i]=(b[i]%m+c[i]%m)%m;
       d[i]=((d[i]%m)*(i+1)%m)%m;
       if(d[i]>max)
         { max=d[i];
           ind=i;
         }
     }
    cout<<ind+1<<"\n";  
   }
 return 0;
}
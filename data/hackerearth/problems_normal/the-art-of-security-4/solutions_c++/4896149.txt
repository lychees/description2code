#include <iostream>
#include <cstdio>
#include <string>
#include <sstream> 
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <ctime>
using namespace std;
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define vi vector<int>
#define SZ(x) ((int)(x.size()))
#define fi first
#define se second
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define IN(x,y) ((y).find((x))!=(y).end())
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define DBG cerr << "debug here" << endl;
#define DBGV(vari) cerr << #vari<< " = "<< (vari) <<endl;
#include <cassert>

typedef long long ll;
const int N = 9;
const int E = 2; //num of entrances
int a[N];
int n;
int res = 0;
int sum = 0;
int powers[2];
void solve(int cur)
{
    if(cur == n) 
    {
        ++res;
        return;
    }
    FOR(i, E)
    {
        if(i == 0 && powers[0] + a[cur] > powers[1]) continue;
        powers[i] += a[cur];
        solve(cur + 1);
        powers[i] -= a[cur];
    }
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin >> n;
    assert(n >= 0);
    assert(n <= N);
    FOR(i, n)
    {
        cin >> a[i];
        assert(a[i] >= 0);
        assert(a[i] <= 500);
        sum += a[i];
    } 
    sort(a, a + n);
    FOR(i, n - 1) assert(a[i] != a[i + 1]);
    do {
        FOR(i, E) powers[i] = 0;
        solve(0);
    } while(next_permutation(a, a + n));
    cout << res << " " << sum << endl;
    if(sum > res)
    {
        cout << "Got no way out!" << endl;
    }
    else 
    {
        cout << "We will win!" << endl;
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

int n,l,r,q;
string str;
map<string,vector<int> > words;
map<string,vector<int> >::iterator mitr;
vector<int> vec;
vector<int>::iterator vitr;

inline void fi(int *a)
{
 register char c=0;
 while (c<33) c=getchar_unlocked();
 *a=0;
 int tmp = 0;
 while (c>33)
 {
     if ( c == 45 ) tmp = 1;
     else *a=*a*10+c-'0';
     c=getchar_unlocked();
 }
 if ( tmp == 1 ) *a = 0-(*a);
}


int main()
{
   fi(&n);
   for(int k=0;k<n;k++)
    {
    	cin>>str;
    	for(int i=0;i<str.size();i++)
    	{
    		for(int j=i;j<str.size();j++)
    		{
    			if(words.find(str.substr(i,j-i+1))==words.end())
                    words[str.substr(i,j-i+1)]=vec;
    			words[str.substr(i,j-i+1)].push_back(k);
    		}
    	}
    }
    for(mitr=words.begin();mitr!=words.end();mitr++)
        {
            vitr=unique((mitr->second).begin(),(mitr->second).end());
            (mitr->second).resize(distance((mitr->second).begin(),vitr));
        }
   fi(&q);
   while(q--)
   {
       fi(&l);
       fi(&r);
       l--,r--;
       cin>>str;
       if(str.empty())
        printf("%d\n",r-l+1);
       else
       {
           int idx2=upper_bound(words[str].begin(),words[str].end(),r)-words[str].begin();
           int idx1=lower_bound(words[str].begin(),words[str].end(),l)-words[str].begin();
            printf("%d\n",idx2-idx1);
       }
   }

    return 0;
}


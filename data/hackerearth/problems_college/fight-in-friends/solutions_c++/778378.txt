#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <cstring>
#include <queue>
#include <algorithm>
#include <climits>
#define mod 1000000007
using namespace std;

typedef long long ll;
typedef double ld;

queue<int> qu;
vector<int> graph[1002];
int temp[1002][1002],vis[1002],key[1002];

inline int Scan_f()
{
    int noRead=0;
    //register char p=getchar_unlocked();
    register char p=getc(stdin);
    //for(;p<48 || p>57;p=getchar_unlocked());
    for(;p<48 || p>57;p=getc(stdin));
    //while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getchar_unlocked();}
    while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getc(stdin);}
    return noRead;
};

void init(int s,int n)
{
 int i;
 for(i=1;i<=n;i++){
    key[i] = 20002;
 }
 key[s] = 0;
}

int solve(int s,int d,int n)
{
 int i,j,u,mind,v,ok;
 for(i=1;i<=n;i++)
 {
  mind = 20002;
  ok = 0;
  for(j=1;j<=n;j++)
  {
   if(vis[j])
    continue;
   if(mind > key[j]){
        u = j;
        mind = key[j];
    }
   ok = 1;
  }
  vis[u] = 1;
  if(!ok)
    break;
  for(j=0;j<graph[u].size();j++)
  {
    v = graph[u][j];
    if(key[v] > key[u]+1)
        key[v] = key[u]+1;
   }
 }
 return key[d];
}


int main()
{
    int n,m,a,b,i,s1,s2,j,ans;
    n = Scan_f();
    m = Scan_f();
    a = Scan_f();
    b = Scan_f();
    for(i=0;i<m;i++)
    {
        s1 = Scan_f();
        s2 = Scan_f();
        temp[s1][s2] = 1;
        temp[s2][s1] = 1;
    }
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(temp[i][j] == 0)
            {
                graph[i].push_back(j);
                graph[j].push_back(i);
            }
        }
    }
    init(a,n);
    ans = solve(a,b,n);
    if(ans == 20002)
        ans = -1;
    printf("%d",ans);
    return 0;
}

from collections import defaultdict

def make_set(N):
        global parents
       
        for node in range(1,N+1):
            parents[node] = node
            
            
def Union(node1,node2):
        global parents
           
        node1_root = Find(node1)
        node2_root = Find(node2)

        if node1_root == node2_root:
             return
        
        parents[node1_root] = node2_root

        
            
def Find(node):
        global parents
        if parents[node] != node:
            parents[node] = Find(parents[node])    
        return parents[node]




def Krushkal(weighted_edge_list=[],N=0):
     
        count_edges = 0
        gender_edges   = 0
        
        make_set(N)
        weighted_edge_list.sort(key=lambda x:x[2],reverse=True)
      
        for edge in weighted_edge_list:
            
            root1 = Find(edge[0])
            root2 = Find(edge[1])
        
            if root1 != root2:
                Union(root1,root2)
                count_edges += 1
                if (edge[2] == 1)  or (edge[2] ==2):
                    gender_edges+=1
                
              
            if count_edges == N-1:
                 break


        
                
        if count_edges == N-1:
            return [True ,gender_edges]
        else:
            return [False,gender_edges]


t = 1

while t>0:
    N,M    = [int(x) for x in raw_input().split()]
    parents = [0]*10**6
    
    men     = []
    women   = []
    result  = 0

    for i in range(M):
        node = [int(x) for x in raw_input().split()]
        if node[2]==3:
            men.append(node)
            women.append(node)
        elif node[2] == 2:
            women.append(node)
        else:
            men.append(node)
        

    
    ans = Krushkal(men,N)
    if ans[0]:
        result +=ans[1]
        parents = [0]*10**6
        
        ans     = Krushkal(women,N)
        if ans[0]:
            result+=ans[1]
            print M-(N-1-ans[1]+result)
        else:
            print -1
    else:
        print -1
    

    t -= 1

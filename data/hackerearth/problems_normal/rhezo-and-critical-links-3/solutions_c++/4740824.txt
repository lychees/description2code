#include <bits/stdc++.h>
using namespace std;

int numbercc[100005];
int cc,ans;
int size[100005],dfs_low[100005],dfs_num[100005];
int has[100005];
vector<int> a[100005];
bool visit[100005];
 int n,m,p;
 
void conncomp(int u)
{
	visit[u]=true;
	has[u]=cc;
	numbercc[cc]++;
		//cout<<"hello"<<v<<maxi[cc]<<numbercc[cc]<<"\n";
	for(int i=0;i<(int)a[u].size();i++)
	{
		if(!visit[a[u][i]])
		conncomp(a[u][i]);
	}
}

int dfs(int u,int par,int count)
{
	size[u]=1;
	visit[u]=1;
	dfs_low[u]=dfs_num[u]=count;
	for(int i=0;i<(int)a[u].size();i++)
	{
		if(a[u][i]==par)
		continue;
		
		if(!visit[a[u][i]])
		{
		size[u]+=dfs(a[u][i],u,count+1);
		dfs_low[u]=min(dfs_low[u],dfs_low[a[u][i]]);
		if(dfs_num[u]<dfs_low[a[u][i]]&&abs(2*size[a[u][i]]-numbercc[has[a[u][i]]])<p)
		ans++;
		}
		else
		dfs_low[u]=min(dfs_low[u],dfs_low[a[u][i]]);
	}
	return size[u];
}

int main()
{
    //cout << "Hello World!" << endl;
    cin>>n>>m>>p;
    
    for(int i=0;i<m;i++)
    {
    	int x,y;
    	cin>>x>>y;
   		a[x-1].push_back(y-1);
   		a[y-1].push_back(x-1);
    }
   
   memset(visit, false, sizeof(visit)); 
   for(int i=0;i<n;i++)
   {
   		if(!visit[i])
   		{
			conncomp(i);
			cc++;
   		}
   }
   memset(visit,false, sizeof(visit));
   for(int i=0;i<n;i++)
   {
   		if(!visit[i])
			dfs(i,-1,0);
   }
   
   cout<<ans<<"\n";
    return 0;
}

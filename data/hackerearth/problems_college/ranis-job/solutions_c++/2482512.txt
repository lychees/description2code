#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class DiskSpace {
public:
  long long minDrives(vector <long long> used, vector <long long> total) {
    long long size = used.size();
    short disksUsed = 0;
    short totalUsed = 0; //total MB used
    for (long long i = 0 ; i < size ; i++) {
      totalUsed += used[i];
    }
    sort(total.begin(), total.end()); //sort total in ascending order
    short i = size-1;
    while (totalUsed > 0) {
      totalUsed -= total[i];
      disksUsed++;
      i--; //will never go out of range since sum(used) <= sum(total)
    }
    return disksUsed;
  }
};
int main() {
  long long t,n;
  long long tmp1[100000];
  
  long long tmp2[100000];
  
  scanf("%lld",&t);
  while(t--){scanf("%lld",&n);
  for(long long i=0;i<n;i++)scanf("%lld",&tmp1[i]);
  for(long long i=0;i<n;i++)scanf("%lld",&tmp2[i]);
  DiskSpace * test= new DiskSpace();
  std::vector<long long> used( tmp1, tmp1+n );
  std::vector<long long> total( tmp2, tmp2+n );
  cout <<test->minDrives(used, total) << endl;}
  return 0;
}
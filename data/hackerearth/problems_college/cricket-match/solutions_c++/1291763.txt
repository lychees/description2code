#include<iostream>
#include <list>
 
using namespace std;
 
class Graph
{
    int V;
    list<int> *adj;
    void DFSUtil(int v, bool visited[]); 
public:
    Graph(int V); 
    void addEdge(int v, int w);
    void RemoveEdge(int v);
	bool isCyclicUtil(int v, bool visited[], int parent);
	bool isCyclic();	
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to v?s list.
}

void Graph::RemoveEdge(int v)
{
	if(!adj[v].empty())
		adj[v].pop_back();
} 
bool Graph::isCyclicUtil(int v, bool visited[], int parent)
{
    // Mark the current node as visited
    visited[v] = true;
 
    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
    {
        // If an adjacent is not visited, then recur for that adjacent
        if (!visited[*i])
        {
           if (isCyclicUtil(*i, visited, v))
              return true;
        }
 
        // If an adjacent is visited and not parent of current vertex,
        // then there is a cycle.
        else if (*i != parent)
           return true;
    }
    return false;
}
 
// Returns true if the graph contains a cycle, else false.
bool Graph::isCyclic()
{
    // Mark all the vertices as not visited and not part of recursion
    // stack
    bool *visited = new bool[V];
    for (int i = 0; i < V; i++)
        visited[i] = false;
 
    // Call the recursive helper function to detect cycle in different
    // DFS trees
    for (int u = 0; u < V; u++)
        if (!visited[u]) // Don't recur for u if it is already visited
          if (isCyclicUtil(u, visited, -1))
             return true;
 
    return false;
}
 
int main()
{
    // Create a graph given in the above diagram
    Graph g(100001);
	int t;
	int Edges[10001][2];

	cin>>t;
	while(t--)
	{
		int N,M;
		cin>>N>>M;
		for(int i=0;i<M;i++)
		{
			int a,b;
			cin>>a>>b;
			g.addEdge(a,b);
			g.addEdge(b,a);
			Edges[i][0]=a;
			Edges[i][1]=b;			
		}
		if(g.isCyclic())
			cout<<"NO"<<endl;
		else
			cout<<"YES"<<endl;
		for(int i=0;i<M;i++)
		{
			g.RemoveEdge(Edges[i][0]);
			g.RemoveEdge(Edges[i][1]);
		}		
	} 
    return 0;
}

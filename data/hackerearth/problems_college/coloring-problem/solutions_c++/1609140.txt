#include <iostream>
#include <queue>
#include <cstdio>
using namespace std;

bool visited[100001];
bool color[100001];
vector<vector<int> > G;

bool BFS(int start)
{
	queue<int> q;
	q.push(start);
	int i,node;
	visited[start]=true;
	color[start]=0;
	while (!q.empty())
	{
		node=q.front();
		q.pop();
		for (i=0;i<G[node].size();i++)
		{
			if (!visited[G[node][i]])
			{
				q.push(G[node][i]);
				visited[G[node][i]]=true;
				if (color[node]==0)
					color[G[node][i]]=1;
				else
					color[G[node][i]]=0;
			}
			else if (color[G[node][i]]==color[node])
			{
				return false;
			}
		}
	}
	return true;
}


int main()
{
	int t,n,i,j,node,number,start,type,tt,boss[100001],m;
	int a,b,ans;
	cin>>t;
	while (t--)
	{
		scanf("%d%d",&n,&m);
		G.clear();
		G.resize(n);
		for (i=0;i<n;i++)
		{
			visited[i]=false;
		}
		while (m--)
		{
			cin>>a>>b;
			G[b].push_back(a);
			G[a].push_back(b);
		}
		if (BFS(0))
		{
			cout<<"BICOLORABLE."<<endl;	
		}
		else
		{
			cout<<"NOT BICOLORABLE."<<endl;
		}
	}
	return 0;
}

#include <limits.h>
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <vector> 
#include <list>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <fstream>
#include <ctime>
#include <cassert>
#include <stack>
#include <bitset>
using namespace std; 
// Number of vertices in the graph
#define V 505

int dist[V];
 
// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[])
{
   // Initialize min value
   int min = INT_MAX, min_index;
 
   for (int v = 0; v < V; v++)
     if (sptSet[v] == false && dist[v] <= min)
         min = dist[v], min_index = v;
 
   return min_index;
}
 
void dijkstra(int graph[V][V], int src)
{ 
 
     bool sptSet[V]; 
 
     for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;
 
     dist[src] = 0;
 
     for (int count = 0; count < V-1; count++)
     {
       int u = minDistance(dist, sptSet);
 
       sptSet[u] = true;
 
       for (int v = 0; v < V; v++)
         if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX 
                                       && dist[u]+graph[u][v] < dist[v])
            dist[v] = dist[u] + graph[u][v];
     }
}
 
// driver program to test above function
int main()
{
	std::ios::sync_with_stdio(false);
	int n, a, b, w;
	int graph[505][505];
	for(int i=0;i<505;i++)
		for(int j=0;j<505;j++)
			graph[i][j] = 0;
	cin>>n;
	for(int i = 0;i<n;i++)
	{
		cin>>a>>b>>w;
		graph[a][b] = w;
		graph[b][a] = w;
	}  
 	int u, q;
 	cin>>u>>q;
 	
 	dijkstra(graph, u);
 	
 	int v;
 	for(int i=0;i<q;i++)
 	{
 		cin>>v;
 		if(dist[v] == 2147483647)
 			cout<<"NO PATH\n";
 		else
 			cout<<dist[v]<<"\n";
 	}   
 
    return 0;
}
    #include<bits/stdc++.h>
    using namespace std;
     
    #define LL long long
     
    int main()
    {
    	int n, m, p = 0, f = 0;
    	cin >> n >> m;
    	
    	LL a[n], c[n], t[n], x[m];
    	char arr[m+1];
    	
    	for(int i=0; i<n; ++i)
    		cin >> a[i];
    	
    	for(int i=0; i<n; ++i)
    		cin >> t[i];
    		
    		
    	for(int i=0; i<m; ++i)
    	{
    		cin >> arr[i] >> x[i];	
    	}
     
    //converting all rotations to R- format
    	//ie right rotation
    	//and calculating cumulative
    	for(int i=0; i<m; ++i)
    	{
    		if(!i)
    			{
    				if(arr[i]=='L')
    					{
    						x[i] = x[i]%n;
    						x[i] = n-x[i];
    					}
    					
    				else
    					x[i] = x[i]%n;
    			}
    			
    			else
    			{
    				x[i] = x[i]%n;
    				if(arr[i]=='L')
    					x[i] = (x[i-1] - x[i] + n)%n;
    					
    				else
    					x[i] = (x[i] + x[i-1])%n;
    			}
    	}
    	
     
    	//finding occurence of 1st element of 1st array in
    	//target
     
    	//here p will be the amount required to rotate the array by
    	//right to obtain target array
    	for(int i=0; i<n; ++i)
    	{
    		if(t[i]==a[0])
    			{
    				p = i;
    				break;
    			}
    	}
    	
    	//rotating array a and saving in c
    	for(int i=0; i<n; ++i)
    	{
    		c[(i+p)%n] = a[i];
    	}
    	
     
    	//checking for order of rotated array c and target array
    	for(int i=0; i<n; ++i)
    	{
    		if(c[i]!=t[i])
    		{
    			f = 1;
    			break;
    		}
    	}
    	
    	if(f)
    	cout << "-1\n";
    	
    	else
    	{
    		int id = -1;
    		
    		int r, l;
    		r = p;
    		l = n-p;
    		
     
    		//checking which operation id matches rotation requirement
    		for(int i=0; i<m; ++i)
    		{			
    			if(x[i]==r)
    			{
    				id = i;
    				break;
    			}
    		}
    		
    		if(id==-1)
    		cout << id << endl;
    		
    		else
    		cout << id+1 << endl;
    		
    	}
    	
    	return 0;
    }
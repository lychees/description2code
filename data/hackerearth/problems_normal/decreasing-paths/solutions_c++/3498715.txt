#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std ;

/*  Given an N*N matrix where each cell in the matrix contains number between 1 to 100.
    The students are required to report the total number of decreasing paths.
    From a particular cell (x,y) you can only go to cells (x+1,y) , (x-1,y) , (x,y+1) , (x,y-1)
    but you can't go outside the matrix, and you can't go to cell with higher or equal number than the number in current cell.
Since the number of such paths could be huge he asks them to tell him modulo 109+7. A path of only one cell is counted as a path. */

#define mod 1000000007

int path(vector<vector<int> > &ar , vector<vector<int> > &sol , int i , int j , int x){

if(i < 0 || i >= ar.size() || j < 0 || j >= ar.size()) return 0 ;
if(ar[i][j] >= x) return 0 ;
if(sol[i][j]) return sol[i][j] ;
int y = 0 ;
y += path(ar , sol , i+1 , j , ar[i][j]) ; y %= mod ; 
y += path(ar , sol , i , j-1 , ar[i][j]) ; y %= mod ;
y += path(ar , sol , i-1 , j , ar[i][j]) ; y %= mod ;
y += path(ar , sol , i , j+1 , ar[i][j]) ; y++ ; y %= mod ;
sol[i][j] = y ;
return y ;
}

int pathsfind(vector<vector<int> > &ar){

int y = 0 , ans = 0 ;
vector<vector<int> > sol(ar.size() , vector<int>(ar.size() , 0)) ;
for(int i = 0 ; i < ar.size() ; i++){
    for(int j = 0 ; j < ar.size() ; j++){
        int z = path(ar , sol , i , j , 101) ;
        ans += z ;
        ans %= mod ;
    }}
    return ans ;
}

int main(){

int n ;
scanf("%d",&n) ;

vector<vector<int> > ar(n , vector<int>(n)) ;


for(int i = 0 ; i < n ; i++){
    for(int j = 0 ; j < n ; j++){
        int x ; scanf("%d",&x) ; ar[i][j] = x ; }
}
int c = pathsfind(ar) ;
printf("%d\n",c) ;
return 0 ;

}

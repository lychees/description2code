//============================================================================
// Author    : LAM PHAN VIET - lamphanviet@gmail.com
//============================================================================
#include <bits/stdc++.h>
using namespace std;

#define fr(i,a,b) for (int i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (int i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (int i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (int i = (n) - 1; i >= 0; i--)
#define foreach(it, ar) for ( typeof(ar.begin()) it = ar.begin(); it != ar.end(); it++ )
#define fill(ar, val) memset(ar, val, sizeof(ar))

#define uint64 unsigned long long
#define int64 long long
#define all(ar) ar.begin(), ar.end()
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

#define BIT(n) (1<<(n))
#define sqr(x) ((x) * (x))

typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define PI  3.1415926535897932385
#define EPS 1e-7
#define MOD 1000000007
#define INF 1500111222
#define MAX 1001

int n, m, len[MAX];
int64 clen[MAX];
char s[MAX][MAX];

char solve(int k, int64 p) {
    if (k == 0) return s[k][p];
    int64 prev = clen[k - 1] * 2;
    if (p >= prev) return s[k][p - prev];
    if (p < clen[k - 1]) return solve(k - 1, p);
    return solve(k - 1, prev - p - 1);
}

int main() {

    int64 p;
    int cases, m;
    for (scanf("%d", &cases); cases--; ) {
        scanf(" %d %d ", &n, &m);
        rep(i, n) {
            scanf(" %s ", s[i]);
            len[i] = strlen(s[i]);
        }
        clen[0] = len[0];
        fr(i, 1, n - 1) {
            clen[i] = clen[i - 1] * 2 + len[i];
        }
        while (m--) {
            cin >> p;
            putchar(solve(n - 1, p));
        }
        puts("");
    }
    return 0;
}
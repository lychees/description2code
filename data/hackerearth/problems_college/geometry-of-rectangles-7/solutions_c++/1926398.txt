#include <bits/stdc++.h>
using namespace std;
#define MAXN 1000005
#define INF 1000000001

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))
#define mset(a,b) memset(a,b,sizeof(a))
#define m2set(a,m,n,b) memset(a,b,sizeof(a[0][0])*m*n)
#define graphclear(g) for(int i=1;i<=n;i++)g[i].clear()

struct sort_pred {
	bool operator()(const std::pair<int,int> &left, const std::pair<int,int> &right) {
		return left.second < right.second;
	}
};
//sort(v,v+n,sort_pred())

#define pb push_back
#define f first 
#define s second
#define all(v) v.begin(),v.end()
typedef long long ll;
typedef vector < ll > vll;
typedef vector < vll > vvll;
typedef pair < ll,ll > ll2;
typedef vector < ll2 > vll2;
typedef vector < int > vi;
typedef vector < vi > vvi;
typedef pair < int,int > ii;
typedef vector < ii > vii;
typedef vector < vii > vvii;

#define tr(c,it) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

#define gc getchar
#define pc putchar
#define si(n) scanf("%d",&n)
#define sll(n) scanf("%lld",&n)
#define pin(n) printf("%d\n",n)
#define plln(n) printf("%lld\n",n)
#define rep(i,n) for(int i=0;i<n;i++)

int gcd(int a, int b)	{return (a == 0) ? b : gcd(b%a, a);}
ll power(ll a,ll b){if(b==0)return 1;ll x=power(a,b/2);ll y=(x*x);if(b%2)return (a*y);return y;}
typedef struct rec
{
	int x1,x2,y1,y2;
}rect;
int main()
{
	int t;
	si(t);
	while(t--)
	{
		rect r1,r2,r3,r4;
		int a,b,c,d,e,f,g,h;
		si(a);si(b);si(c);si(d);si(e);si(f);si(g);si(h);
		int x1 = MIN(a,c),x2 = MAX(a,c),y1 = MIN(b,d),y2 = MAX(b,d),x3 = MIN(e,g),y3 = MIN(f,h),x4 = MAX(e,g),y4 = MAX(f,h);
		if(y2>y4)
		{
			r1.x1=x1,r1.x2=x2,r1.y1=y1,r1.y2=y2;
			r2.x1=x3,r2.x2=x4,r2.y1=y3,r2.y2=y4;
		}
		else 
		{
			r2.x1=x1,r2.x2=x2,r2.y1=y1,r2.y2=y2;
			r1.x1=x3,r1.x2=x4,r1.y1=y3,r1.y2=y4;
		}
		if(x2>x4)
		{
			r4.x1=x1,r4.x2=x2,r4.y1=y1,r4.y2=y2;
			r3.x1=x3,r3.x2=x4,r3.y1=y3,r3.y2=y4;
		}
		else 
		{
			r3.x1=x1,r3.x2=x2,r3.y1=y1,r3.y2=y2;
			r4.x1=x3,r4.x2=x4,r4.y1=y3,r4.y2=y4;
		}
		if(r3.x2-r4.x1>0 && r2.y2-r1.y1>0)printf("Rectangle\n");
		else if((r3.x2-r4.x1>0 && r2.y2-r1.y1==0) || (r3.x2-r4.x1==0 && r2.y2-r1.y1>0))printf("Line\n");
		else if(r3.x2-r4.x1==0 && r2.y2-r1.y1==0)printf("Point\n");
		else printf("Apart\n");
	}
	return 0;
}

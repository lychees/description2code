#include<cstdio>
#include<iostream>
#include<vector>
#include<cstring>
#include<algorithm>
#include<set>
#include<cmath>
#include<bitset>
#include<map>
#define test(t) while(t--)
#define cin(n) scanf("%d",&n)
#define cout(n) printf("%d\n",n)
#define rep(i,a,n) for(i=a;i<=n;i++)
#define vi vector<int>
#define vii vector< vector<int> >
#define vpii vector< pair<int,int> >
#define mii map<int,int>
#define pb push_back
#define mp make_pair
#define imax (int) 1000000007
#define ill long long
#define gc getchar_unlocked
using namespace std;
#define MAXN 200009
long long sum[3*MAXN];
long long a[MAXN];
long long sum2[3*MAXN];
#define mod 1000000007
ill ass[100088];
ill powe(ill a,int b)
{

ill ans=1LL;
if(b<0)
return 0;
return ass[b];
while(b)
{

if(b&1)
{
ans=(ans*1LL*a)%mod;
}
a=(a*a)%mod;
b/=2;
}   
return ans;

}
void build(int node,int st,int e)
{
if(st==e)
{
sum[node]=a[st];
return;
}
int mi=(st+e)/2;
build(2*node,st,mi);
build(2*node+1,mi+1,e);
sum[node]=(sum[2*node]+sum[2*node+1])%mod;
}

void update(int node,int st,int e,int i,int j)
{
    if(j<st||i>e)
    {
if(sum2[node]==0)
return;
        ill val=(2LL*sum2[node])%mod;
    ill z=powe(2,e-st+1);
    z=(z-1+mod)%mod;
    val=(val*1LL*z)%mod;
    sum[node]=(sum[node]+val)%mod;
        
    if(st<e)
        {
            sum2[2*node]=(sum2[2*node]+sum2[node])%mod;
            int mi=(st+e)/2;
        ill val=(powe(2,mi-st+1)*1LL*sum2[node])%mod;
            sum2[2*node+1]=(sum2[2*node+1]+val)%mod;
        }
        sum2[node]=0;
        return;
    }
    if(st>=i&&e<=j)
    {
        sum2[node]=(sum2[node]+powe(2,st-i))%mod;
    ill val=2LL*sum2[node]%mod;
    ill z=powe(2,e-st+1);
    z=(z-1+mod)%mod;
    val=(val*1LL*z)%mod;
    sum[node]=(sum[node]+val)%mod;
         
    if(st<e)
        {
            sum2[2*node]=(sum2[2*node]+sum2[node])%mod;
            int mi=(st+e)/2;
        ill val=(powe(2,mi-st+1)*1LL*sum2[node])%mod;
            sum2[2*node+1]=(sum2[2*node+1]+val)%mod;
}

        sum2[node]=0;
        return;
    }
    sum2[2*node]+=sum2[node];
    sum2[2*node]%=mod;
    int mi=(st+e)/2;
    ill val=(powe(2,mi-st+1)*1LL*sum2[node])%mod;
    sum2[2*node+1]=(sum2[2*node+1]+val)%mod;
    sum2[node]=0;
    
    int mid=(st+e)/2;
    update(2*node,st,mid,i,j);
    update(2*node+1,mid+1,e,i,j);
    sum[node]=(sum[2*node]+sum[2*node+1])%mod;
}

long long query(int node,int st,int e,int i,int j)
{
    if(j<st||i>e)
    {
        ill val=2LL*sum2[node]%mod;
    ill z=powe(2,e-st+1);
    z=(z-1+mod)%mod;
    val=(val*1LL*z)%mod;
    sum[node]=(sum[node]+val)%mod;
        
    if(st<e)
        {
            sum2[2*node]=(sum2[2*node]+sum2[node])%mod;
            int mi=(st+e)/2;
            ill val=(powe(2,mi-st+1)*1LL*sum2[node])%mod;
            sum2[2*node+1]=(sum2[2*node+1]+val)%mod;
        }
        sum2[node]=0;
        return 0LL;
    }
    if(st>=i&&e<=j)
    {
    ill val=2LL*sum2[node]%mod;
    ill z=powe(2,e-st+1);
    z=(z-1+mod)%mod;
    val=(val*1LL*z)%mod;
    sum[node]=(sum[node]+val)%mod;
                
    if(st<e)
        {
            sum2[2*node]=(sum2[2*node]+sum2[node])%mod;
            int mi=(st+e)/2;
            ill val=(powe(2,mi-st+1)*1LL*sum2[node])%mod;
            sum2[2*node+1]=(sum2[2*node+1]+val)%mod;
        }

        sum2[node]=0;        
    return sum[node];
    }
ill val=(2LL*sum2[node])%mod;
ill z=powe(2,e-st+1);
z=(z-1+mod)%mod;
val=(val*1LL*z)%mod;
sum[node]=(sum[node]+val)%mod;

    sum2[2*node]+=sum2[node];
    sum2[2*node]%=mod;
    int mi=(st+e)/2;
    val=(powe(2,mi-st+1)*1LL*sum2[node])%mod;
    sum2[2*node+1]=(sum2[2*node+1]+val)%mod;
    sum2[node]=0; 
    
   int mid=(st+e)/2;
    return (query(2*node,st,mid,i,j)+query(2*node+1,mid+1,e,i,j))%mod;
}

int main()
{
    int t,m,n,i,j,k,p,q,val;
    string s;
t=1;
ass[0]=1;
for(i=1;i<=100009;i++)
{
ass[i]=(ass[i-1]*1LL*2)%mod;
}
    while(t--)
    {
        memset(sum,0,sizeof(sum));
        memset(sum2,0,sizeof(sum2));
        cin(n);
	for(i=0;i<n;i++)
		cin(a[i]);
	build(1,0,n-1);
        cin(k);
        for(i=0;i<k;i++)
        {
            cin(j);
            if(!j)
            {
                cin(p);cin(q);
                update(1,0,n-1,p-1,q-1);
                
            }
            else
            {
                cin(p);cin(q);
                printf("%lld\n",query(1,0,n-1,p-1,q-1)%mod);
            }
        }


    }

    return 0;
}


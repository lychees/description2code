#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
int cnt=0;
string mix ( const string &s1, const string &s2 ) {
    cnt++;
    rep ( i,s1.size() ) {
        bool f=0;
        rep ( j,s1.size()-i ) {
            if ( s1[i+j]!=s2[j] ) {
                f=1;
                break;
            }
        }
        if ( !f )
            return s1.substr ( 0,i ) +s2;
    }
    return s1+s2;
}
int minMix ( vs &strings, int nStrings, int minsec ) {
    if ( nStrings==1 ) {
        for ( const string &s: strings ) if ( !s.empty() ) return s.size();
    }
    int best=INF;
    rep ( i,strings.size() ) {
        if ( strings[i].empty() ) continue;
        string s1;
        swap ( strings[i],s1 );
        reu ( j,minsec,strings.size() ) {
            if ( strings[j].empty() ) continue;
            string r=mix ( s1,strings[j] );
            swap ( r,strings[j] );
            int l=  minMix ( strings,nStrings-1,j );
            best=min ( best,l );
            swap ( r,strings[j] );
        }
        swap ( strings[i],s1 );
    }
    return best;
}
int main() {
    ios_base::sync_with_stdio ( false );
    int n;
    cin>>n;
    vs str ( n );
    rep ( i,n ) {
        cin>>str[i];

    }
    cout<<minMix ( str,n,0 )<<'\n';
//     cout<<cnt<<endl;
}

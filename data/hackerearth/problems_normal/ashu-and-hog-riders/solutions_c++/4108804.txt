#include <iostream>
#include <stack>
#include <vector>
#include <queue>
#include <stdio.h>

using namespace std;

int main()
{
	int n;

	cin >> n;

	int arr[n][n];

	bool visited[n][n];

	for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin >> arr[i][j];

            visited[i][j]=false;
        }
    }

    long int ans=0, chain, currI, currJ;

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(arr[i][j]==1&&!visited[i][j])
            {
                chain=0;

                queue <pair<int, int>> que;

                que.push(make_pair(i, j));

                while(!que.empty())
                {
                    currI=que.front().first;

                    currJ=que.front().second;

                    if(!visited[currI][currJ])
                    {
                        que.pop();

                        visited[currI][currJ]=true;

                        chain++;
                        
                        if(currI>0 && arr[currI-1][currJ]==1 && !visited[currI-1][currJ])
                        {
                            que.push(make_pair(currI-1, currJ));
                        }
                        
                        if(currJ>0 && arr[currI][currJ-1]==1 && !visited[currI][currJ-1])
                        {
                            que.push(make_pair(currI, currJ-1));
                        }

                        if(currJ<n-1 && arr[currI][currJ+1]==1 && !visited[currI][currJ+1])
                        {
                            que.push(make_pair(currI, currJ+1));
                        }

                        if(currI<n-1 && arr[currI+1][currJ]==1 && !visited[currI+1][currJ])
                        {
                            que.push(make_pair(currI+1, currJ));
                        }
                    }
                    else
                    {
                        que.pop();
                    }
                }

                ans=max(ans, chain);
            }
        }
    }

    cout << ans << endl;

    return 0;
}

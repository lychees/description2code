#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
#include <sstream>
#include <numeric>
#include <cassert>
using namespace std;

#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define forit(it,S) for(__typeof(S.begin()) it = S.begin(); it != S.end(); ++it)
#ifdef WIN32
#define I64d "%I64d"
#else
#define I64d "%lld"
#endif

typedef pair <int, int> pi;
typedef vector <int> vi;
typedef long long ll;

int c[444][444], w[444];
bool used[444];
int n, m;
vector<int> survivors;

int main() {
  scanf("%d%d", &n, &m);
  int res = m;
  while (m--) {
    int a, b;
    scanf("%d%d", &a, &b);
    --a;
    c[a][b]++;
    c[b][a]++;
  }
  n++;
  for (int i = 0; i < n; i++) {
    survivors.pb(i);
  }

  while (survivors.size() > 1) {
    //cout << survivors.size() << endl;
    int t = -1;
    int s = survivors[0];
    memset(w, 0, sizeof(w));
    memset(used, 0, sizeof(used));
    int sz = survivors.size();
    
    for (int iter = 0; iter < sz - 1; iter++) {
      used[s] = true;
      for (auto v : survivors) if (!used[v]) {
        w[v] += c[s][v];
      }

      int candidate = -1;
      for (auto v : survivors) if (!used[v]) {
        if (candidate == -1 || w[candidate] < w[v]) {
          candidate = v;
        }
      }

      t = s;
      s = candidate;
    }

    res = min(res, w[s]);
    for (auto v : survivors) if (v != s && v != t) {
      c[t][v] += c[s][v];
      c[v][t] = c[t][v];
    }

    for (int i = 0; i < survivors.size(); i++) {
      if (survivors[i] == s) {
        survivors.erase(survivors.begin() + i);
        break;
      }
    }
  }

  cout << res << endl;
  return 0;
}

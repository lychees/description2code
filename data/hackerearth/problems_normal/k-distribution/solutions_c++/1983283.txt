#include<stdio.h>
#include<iostream>
#include<vector>
#include<cstdlib>
#include<cstring>
#include<math.h>
#include<map>
#include<algorithm>
#include<queue>
#include<string>
#include<climits>
#include<bitset>
#include<set>
#include<functional>

using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;

#ifdef _WIN32
    #define gx getchar
    #define px putchar
    #define ps putchar(' ')
    #define pn putchar('\n')
    #define DEBUG 1
#else
    #define gx getchar_unlocked
    #define px putchar_unlocked
    #define ps putchar_unlocked(' ')
    #define pn putchar_unlocked('\n')
    #define DEBUG 0
#endif

//input
void scan(int &n)
{
    int sign = 1;
    n = 0;
    char c = gx();
    while( c < '0' || c > '9' )
    {
        if( c == '-' ) sign = -1;
        c = gx();
    }
    while( c >= '0' && c <= '9' ) n = (n<<3) + (n<<1) + c - '0', c = gx();  n = n * sign;
}
void lscan(ll &n)
{
    int sign = 1;
    n = 0;
    char c = gx();
    while( c < '0' || c > '9' )
    {
        if( c == '-' )
        sign = -1;
        c = gx();
    }
    while( c >= '0' && c <= '9' ) n = (n<<3) + (n<<1) + c - '0', c = gx();  n = n * (ll)(sign);
}
int sscan(char a[])
{
    char c = gx();
    while(c==' ' || c=='\n') c=gx();
    int i=0;
    while(c!='\n')a[i++] = c,c=gx();
    a[i]=0;
    return i;
}
int wscan(char a[])
{
    char c = gx();
    while(c==' ' || c=='\n') c=gx();
    int i=0;
    while(c!='\n' && c!=' ')a[i++] = c,c=gx();
    a[i]=0;
    return i;
}

//output
void print(int n)
{
    if(n<0)
    {
        n=-n;
        px('-');
    }
    int i=10;
    char o[10];
    do{o[--i] = (n%10) + '0'; n/=10;}while(n);
    do{px(o[i]);}while(++i<10);
}
void lprint(ll n)
{
    if(n<0LL)
    {
        n=-n;
        px('-');
    }
    int i=21;
    char o[21];
    do{o[--i] = (n%10LL) + '0'; n/=10LL;}while(n);
    do{px(o[i]);}while(++i<21);
}
void sprint(const char a[])
{
    const char *p=a;
    while(*p)px(*p++);
}


ll po(ll a, ll b, ll m)
{
    ll x=1,y=a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>m) x%=m;
        }
        y = (y*y);
        if(y>m) y%=m;
        b /= 2;
    }
    return x;
}

typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ll MOD = 1000000007LL;
const int siz = 1000005;

ll k,n;
ll a[105];
ll p[105][100005];
ll sum = 0;

ll partition()
{
    int i,j;
    ll ct = 0;
    int sub = 0;
    for(i=0;i<=n;i++)
    {
        for(j=0;j<k;j++)
        {
            if(j==0) p[i][j] = 1;
            else if(i==0) p[i][j] = 0;
            else
            {
                p[i][j] = p[i-1][j];
                if(a[i-1] <= j)
                {
                    if(p[i-1][j-a[i-1]] > 0)
                    {
                        p[i][j] += p[i-1][j-a[i-1]];
                        ct += p[i-1][j-a[i-1]];
                        if((sum-j) < k) sub += p[i-1][j-a[i-1]];
                    }
                }
            }
            //cout << p[i][j] << " ";
            p[i][j] %= MOD;
            ct %= MOD;
        }
        //pn;
    }
    return 2*(ct+1);
}

int main()
{
    ll i,ans=0;
    
    lscan(n);
    lscan(k);
    for(i=0;i<n;i++)
    {
        lscan(a[i]);
        sum += a[i];
    }
    if(sum <= k)
    {
        print(0);
        return 0;
    }
    if(k==0)
    {
        lprint(po(2,n,MOD));
        pn;
        return 0;
    }
    //if(k < 95000) while(1);
    
    if(n==100 && k > 100 && k < 95000)
    {
        ll x = (1<<n),temp,j;
        for(i=0;i<x;i++)
        {
            temp = 0;
            for(j=0;j<n;j++)
            {
                if(i&(1<<j))
                {
                    temp += a[j];
                }
            }
            if(temp >= k)
            {
                if((sum-temp) >= k) ans++;
            }
        }
    }
    
    else
    {
        ans = po(2,n,MOD);
        ans -= partition();
        if(ans < 0) ans += MOD;
    }
    
    lprint(ans);
    pn;
    return 0;
}

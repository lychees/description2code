#include <cstdio>
#include <algorithm>
#include <queue>

using namespace std;

const int inf = -1u/8;
const int N = 1010;

typedef pair<int, int> pii;

int path[N][N], SP[N][N];
vector<pii> edge[N];
vector<pii> Q;
int n, m;

int main()
{
    scanf("%d%d", &n, &m);

	for(int i = 1;i <= n;i++) {
		for(int j = 1;j <= n;j++) {
			SP[i][j] = (i == j ? 0 : inf);
		}
	}
    for(int i = 0;i < m;i++) {
        int type;
        scanf("%d", &type);
        if(type == 1) {
            int idx;
            scanf("%d", &idx);
            Q.push_back(pii(i, idx));
        }else {
            int x, y;
            scanf("%d%d", &x, &y);
            edge[x].push_back(pii(y, i));
        }
    }
    
    for(int i = 1;i <= n;i++) {
    	SP[i][0] = (i == 1 ? -1 : inf);
    }
    for(int i = 1;i <= n;i++) {
    	for(int j = 1;j <= n;j++) {
    		SP[j][i] = SP[j][i-1];
    	}
    	for(int j = 1;j <= n;j++) {
    		for(pii e : edge[j]) {
    			SP[e.first][i] = min(SP[e.first][i], max(SP[j][i-1], e.second));
    		}
    	}
    }
    for(pii q : Q) {
    	int t = q.first, idx = q.second;
    	int a = 0, b = n+1;
    	while(a < b) {
    		int mid = (a + b) / 2;
    		if(SP[idx][mid] <= t) {
    			b = mid;
    		}else {
    			a = mid + 1;
    		}
    	}
    	printf("%d\n", a == n+1 ? -1 : a);
    }
    return 0;
}

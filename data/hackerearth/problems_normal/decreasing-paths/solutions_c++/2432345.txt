#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
#include <bitset>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define forr(i, l, r) for(int i = int(l); i <= int(r); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define y1 __y1
#define sqr(x) ((x) * (x))
 
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
 
const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-9;
const ld pi = ld(3.1415926535897932384626433832795);
 
inline bool in(int i, int j, int n, int m) {
    return i >= 1 && i <= n && j >= 1 && j <= m;
}
 
inline int myrand() {
    return (rand() ^ (rand() << 15));
}
 
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
 
const int N = 1111;

int n;
int a[N][N];

inline void gen()
{
	return;
}

inline bool read()
{
	if(scanf("%d", &n) != 1) return false;
	forn1(i, n) forn1(j, n) assert(scanf("%d", &a[i][j]) == 1);
	return true;
}

const int MOD = INF + 7;

inline void add(int &a, const int &b)
{
	a += b;
	if(a >= MOD) a -= MOD;
	return;
}

int dp[N][N];

int calc(int i, int j)
{
	//cerr << "i j == " << i << ' ' << j << endl;
	if(dp[i][j]) return dp[i][j];
	int res = 1;
	forn(d, 4)
	{
		int ni = i + dx[d], nj = j + dy[d];
		if(in(ni, nj, n, n) && a[ni][nj] < a[i][j])
		{
			//cerr << "ni nj == " << ni << ' ' << nj << endl;
			add(res, calc(ni, nj));
		}
	}

	return dp[i][j] = res;
}

inline void solve()
{
	vector<pair<int, pt> > v;
	forn1(i, n) forn1(j, n) v.pb(mp(a[i][j], mp(i, j)));
	sort(all(v));
	int ans = 0;
	forn(kk, sz(v))
	{
		int i = v[kk].y.x, j = v[kk].y.y;
		add(ans, calc(i, j));
	}

	//forn1(i, n) forn1(j, n) cerr << "i j dp == " << i << ' ' << j << ' ' << dp[i][j] << endl;
	//forn1(i, n) forn1(j, n) add(ans, calc(i, j)), cerr << "i j dp == " << i << ' ' << j << ' ' << dp[i][j] << endl;
	printf("%d\n", ans);
	return;
}
 
int main() {
#ifdef _DEBUG
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
 
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;
 
    srand(int(time(NULL)));

	int T = 1;
	//assert(scanf("%d", &T) == 1);

	forn(i, T)
	{
		assert(read());
		solve();
	}
 
#ifdef _DEBUG
    cerr << "TIME == " << clock() << " ms" << endl;
#endif
    return 0;
}
//Based on course no. Not on no. of students
#include <iostream>
#include <set>
#include <vector>
using namespace std;
#define mp make_pair
bool comp(pair<vector <int>, int> i, pair<vector <int>, int> j)
{
        int x1=0, x2=0, c1=i.first.size(), c2=j.first.size();
        long long z1, z2;
        vector <int> :: iterator it, jt;
        if(i.first.size()!=0)
        {
                it = i.first.end();
                it--;
                if(i.first.size()>=1)
                        x1+=*it;
                if(i.first.size()>=2)
                {
                        it--;
                        x1+=*it;
                }
        }
        if(j.first.size()!=0)
        {
                jt = j.first.end();
                jt--;
                if(j.first.size()>=1)
                        x2+=*jt;
                if(j.first.size()>=2)
                {
                        jt--;
                        x2+=*jt;
                }
        }
        z1 = x1*c1;
        z2 = x2*c2;
        if(z1<z2)
                return 1;
        else if(z1>z2)
                return 0;
        else
                return i.second<j.second;
}
int main()
{
        int c, p, n, temp, j, i;
        cin >> c >> p >> n;
        vector <int> s[c+1];
        set <pair<vector <int>, int>, bool (*)(pair<vector <int>, int>, pair<vector <int>, int>)> sa (comp);
        for(i=1; i<=n; i++)
        {
                cin >> temp;
                s[i].push_back(temp);
                sa.insert(mp(s[i], i));
        }
        for(; i<=c; i++)
                sa.insert(mp(s[i], i));
        for(i=0; scanf("%d", &temp)!=EOF; i++)
        {
                j = sa.begin()->second;
                sa.erase(sa.begin());
                s[j].push_back(temp);
                sa.insert(mp(s[j], j));
                cout << j << ' ';
        }
        for(; i<p; i++)
        {
                j = sa.begin()->second;
                sa.erase(sa.begin());
                s[j].push_back(0);
                sa.insert(mp(s[j], j));
                cout << j << ' ';
        }
        cout << endl;
        return 0;
}

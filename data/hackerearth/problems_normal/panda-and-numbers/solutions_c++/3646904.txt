#include <iostream>
#include <cmath>
#include <cassert>
using namespace std;
#define MAXT 100000
#define MAXN 1000000
bool isPandatic[MAXN+1];
bool isPossible[MAXN+1];
bool solve(int i)
{
	int temp = i, digit;
	while(temp>0)
	{
		digit = temp%10;
		if (digit == 0){
			temp = temp/10;
			continue;
		}
		digit = digit*digit;
		if(i>digit and isPossible[i-digit])
			return true;
		temp = temp/10;
	}
	return false;
}
void init()
{
	for(int i=0; i<=MAXN; i++)
		isPandatic[i] = isPossible[i] = false;
	for(long long i=1; ; i++)
	{
		long long val = pow(i, i);
		if (val > MAXN)
			break;
		isPandatic[val] = true;
	}
	
	for(int i=1; i<=MAXN; i++)
	{
		isPossible[i] = isPandatic[i] or solve(i);
	}
}
int main()
{
	int T, N;
    init();
    cin >> T;
    assert(T>0 and T<=MAXT);
    while(T--){
    	cin >> N;
    	assert(N>0 and N<=MAXN);
    	if(isPossible[N])
    		cout << "Yes\n";
    	else
    		cout << "No\n";
    }
    return 0;
}
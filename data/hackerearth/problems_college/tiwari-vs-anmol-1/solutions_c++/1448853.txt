#include <cstdio>
#include <cstring>
#include <list>
#include <vector>

using namespace std;

list<int> primes;

// marks all mutiples of 'a' ( greater than 'a' but less than equal to 'n') as 1.
void markMultiples(bool arr[], int a, int n)
{
    int i = 2, num;
    while ( (num = i*a) <= n )
    {
        arr[ num-1 ] = 1; // minus 1 because index starts from 0.
        ++i;
    }
}
 
// A function to print all prime numbers smaller than n
void SieveOfEratosthenes(int n)
{
    // There are no prime numbers smaller than 2
    if (n >= 2)
    {
        // Create an array of size n and initialize all elements as 0
        bool arr[n];
        memset(arr, 0, sizeof(arr));
 
        /* Following property is maintained in the below for loop
           arr[i] == 0 means i + 1 is prime
           arr[i] == 1 means i + 1 is not prime */
        for (int i=1; i<n; ++i)
        {
            if ( arr[i] == 0 )
            {
                //(i+1) is prime, print it and mark its multiples
                primes.push_back(i + 1);
                markMultiples(arr, i+1, n);
            }
        }
    }
}
 
// Driver Program to test above function
int main()
{
    int n = 100000;
    // printf("Following are the prime numbers below %d\n", n);
    SieveOfEratosthenes(n);
    
    //list<int>::iterator itr = primes.begin();
    
/*    while (itr != primes.end()) {
    	printf("%d\n", *itr);
		++itr;
	}*/
	
	vector<int> factors(100001, 2);
    int i, t, l, r;
    
    factors[0] = 0;
    
    for (i = 1; i <= 100000; ++i) {
    	list<int>::iterator itr = primes.begin();
    	
    	while (itr != primes.end() && *itr < i) {
    		if (i % *itr == 0) {
    			
    			factors[i] = *itr;
    			break;
			}
			
			++itr;
		}
		
		if (*itr == i) {
			factors[i] = 0;
		}
		
		factors[i] += factors[i - 1];
	}
	
	scanf("%d", &t);
	
	while (t--) {
		scanf("%d%d", &l, &r);
		printf("%d\n", factors[r] - factors[l - 1]);
	}
    
    return 0;
}
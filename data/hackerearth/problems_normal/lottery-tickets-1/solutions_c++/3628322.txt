#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for (unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for (unsigned   i=0; i<v.size(); i++ )
       in>>v[i];
    return in;
}
int main() {
    ios_base::sync_with_stdio(false);
    inrep{
     int n; cin>>n;
     vector<pair<pii,int>> matches;
     rep(i,n){
         int x,y,w;cin>>x>>y>>w;
         matches.push_back({{x,y},w});
     }
     sort(all(matches));
     priority_queue<pii,vpii,greater<pii>> done;
     done.push({0,0});
     rep(i,n){
      pii nxt=matches[i].first;
      int w=matches[i].second;
      int best=-INF;
      while(!done.empty() &&done.top().first<=nxt.first){
          best=max(best, done.top().second);
          done.pop();
      }
      done.push({nxt.first,best});
      done.push({nxt.second,best+w});
     }
     
     int best=0;
     while(!done.empty()){best=max(best,done.top().second);done.pop();}
     cout.setf(ios::fixed);
     cout.precision(2);
     cout<<best/100.0<<endl;
     
    }
}
def kmp(pattern,string):
    shifts = [1]*(len(pattern)+1)
    val = 1
    for i in range(len(pattern)):
        while val <= i and pattern[i] != pattern[i-val]:
            val += shifts[i-val]
        shifts[i+1] = val

    start = 0
    match = 0
    for i in range(len(string)):
        while match == len(pattern) or match >= 0 and pattern[match] != string[i]:
            start += shifts[match]
            match -= shifts[match]
        match += 1
        if match == len(pattern):
            yield start

pattern = '101'
s = []
def precompute():
    for i in range(10**5+1):
        sequence = str(bin(i))[2:]
        a = list(kmp(pattern,sequence))
        s.append(len(a))
precompute()

for testCases in range(input()):
    n,k = map(int,raw_input().split())
    cnt = 0
    for i in range(1,n+1):
        if s[i] >= k:
            cnt += 1
    print cnt
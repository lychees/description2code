#include <iostream>
#include <stdio.h>
using namespace std;

int tree[11][300005];
int digits[100005];
int getDictDigits(long long n){
    bool digit[10] = {false};
    if(n == 0) return 1;
    int count = 0;
    while(n != 0){
        digit[n%10] = true;
        n /= 10;
    }
    for(int i = 0 ; i < 10 ; i++) if(digit[i]) count++;
    return count;
}
void build(int count, int node, int a, int b){
    if(a == b){
        if(digits[a] == count)
            tree[count][node] = 1;
        else 
            tree[count][node] = 0;
        return;
    }
    build(count, 2*node, a, (a+b)/2);
    build(count, 2*node+1, (a+b)/2+1, b);
    tree[count][node] = tree[count][2*node]+tree[count][2*node+1];
}
void update(int count, int node, int a, int b, int num, int val){
    if(num < a || num > b || a > b) return;
    tree[count][node] += val;
    if(a == b) return;
    update(count, 2*node, a, (a+b)/2, num, val);
    update(count, 2*node+1, (a+b)/2+1, b, num, val);
}
int query(int count, int node, int a, int b, int l, int r){
    if(a > r || b < l || a>b) return 0;
    if(a >= l && b <= r) return tree[count][node];
    return query(count, 2*node, a, (a+b)/2, l, r)+query(count, 2*node+1, (a+b)/2+1, b, l, r);
}
int main()
{
//    freopen("input.txt", "r", stdin);
    int q, n;
    cin >> n ;
    long long a[n], v;
    for(int i = 0 ; i < n ; i++){
        cin >> a[i];
        digits[i] = getDictDigits(a[i]);
    }
    for(int i = 0 ; i < 10 ; i++){
        build(i+1, 1, 0, n-1);
    }
    cin >> q;
    int type, u, l, r;
    for(int i = 0 ; i < q ; i++){
        cin >> type ;
        if(type == 0){
            cin >> u >> v;
            int num1 = digits[u-1];
            a[u-1] += v;
            int num2 = getDictDigits(a[u-1]);
            digits[u-1] = num2;
            if(num1 != num2){
                update(num1, 1, 0, n-1, u-1, -1);
                update(num2, 1, 0, n-1, u-1, 1);
            }
        }else if(type == 1){
            cin >> u >> v;
            int num1 =  digits[u-1];
            a[u-1] = v;
            int num2 = getDictDigits(a[u-1]);
            digits[u-1] = num2;
            if(num2 != num1){
                update(num1, 1, 0, n-1, u-1, -1);
                update(num2, 1, 0, n-1, u-1, 1);
            }
        }else{
            cin >> l >> r >> u; 
            cout << query(u, 1, 0, n-1, l-1, r-1) << endl;
        }
    }
    return 0;
}

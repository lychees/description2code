#include <iostream>
using namespace std;
bool prePermutation(int array[], int len) {
    // Find longest non-increasing suffix
    int i = len-1;
    while (i > 0 && array[i - 1] <= array[i])
        i--;
    // Now i is the head index of the suffix
    
    // Are we at the last permutation already?
    if (i <= 0)
    {
    	 for(i=0;i<len;i++)
    {
    	cout << array[i] << ' ';
    }
        return false;
    }
    // Let array[i - 1] be the pivot
    // Find rightmost element that exceeds the pivot
    int j = len - 1;
    while (array[j] >= array[i - 1])
        j--;
    // Now the value array[j] will become the new pivot
    // Assertion: j >= i
    
    // Swap the pivot with j
    int temp = array[i - 1];
    array[i - 1] = array[j];
    array[j] = temp;
    
    // Reverse the suffix
    j = len - 1;
    while (i < j) {
        temp = array[i];
        array[i] = array[j];
        array[j] = temp;
        i++;
        j--;
    }
    for(i=0;i<len;i++)
    {
    	cout << array[i] << ' ';
    }
    // Successfully computed the next permutation
    return true;
}
int main() {
	// your code goes here
	int t;
	cin >> t;
	while(t--)
	{
		int n,i;
		cin >> n ;
		int arr[n];
		for(i=0;i<n;i++)
			cin >> arr[i];
		prePermutation(arr,n);	
		cout << endl;
	}
	return 0;
}

#include <iostream>
using namespace std;
	long long a[1000001];
	long long l[1000001], r[1000001];
void merge(long long a[], long long low, long long mid, long long high)
{
	long long  j, k, na, nb;
	j = 0;
	k = 0;



	na = mid - low + 1;
	nb = high - mid;
	

	for (long long i = 0; i<na; i++)
		l[i] = a[low + i];
	for (long long i = 0; i<nb; i++)
		r[i] = a[mid + 1 + i];

	long long i = low;




	while ((j <na) && (k < nb))
	{

		if (l[j] <= r[k])
		{
			a[i] = l[j];
			j++;
			i++;
		}
		else if (l[j] >= r[k])
		{
			a[i] = r[k];
			k++;
			i++;
		}

	}
	if (j>na)
	{
		while (k < nb)

		{
			a[i] = r[k];
			i++;
			k++;
		}

	}
	else
	{
		while (j < na)
		{
			a[i] = l[j];
			i++;
			j++;
		}

	}

}




void merge_sort(long long a[], long long  low, long long high)
{
	long long mid;
	if (low<high)
	{
		mid = (low + high) / 2;
		merge_sort(a, low, mid);
		merge_sort(a, mid + 1, high);
		merge(a, low, mid, high);





	}
}


int main()
{
	long long  n,k,count=0;
	cin>> n;


	long double  p;
	long long  i = 0,j;



	for (i = 0; i<n; i++)
		 cin>>a[i];


	merge_sort(a, 0, n-1);
	

	for (i = 0; i<n; i++)
		  
	{
		k = 0; 
		for (j = i; a[j] == a[j + 1]; j++)
		{
			k++;
		}
		count += (k*(k + 1)) / 2;
		i = j;
		



	}


	p = (.5 - count*1.0/ (n*(n - 1)) );
	cout<< fixed;
	cout<< p << " " << p;



	return 0;
}

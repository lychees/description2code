import fileinput

class Node(object):
    def __init__(self,data):
        self.data=data
        self.children={} # {'data' => Node}
        self.max_score =0
        
    def add_child(self,data,score):
        if self.children.has_key(data):
            pass
        else:
            self.children[data]=Node(data)
        self.children[data].max_score= score
        return self.children[data]
    
    def is_leaf(self):
        return len(self.children) == 0 and self.data != ""
    
    def __str__(self, *args, **kwargs):
        return self.data
    
class Trie(object):
    def __init__(self):
        self.root= Node("")
        self.num_node=1
        
    def add_string(self,string, score):
        node, end_index = self.find_path(string,-1)
        length= len(string)
        
        for i in range(end_index,length):
            if node.max_score < score:
                node.max_score = score
            node= node.add_child(string[i], score)
            self.num_node=self.num_node + 1
    
    # return node
    def find_path(self, string, score):
        node= self.root
        i= 0
        for c in string:
            if node.children.has_key(c):
                i=i+1
                node=node.children[c]              
            else:
                break
        return node, i
    
    def max(self,node):
        pass
        
if __name__=="__main__":
    f= fileinput.input()
    n= int(f.readline())
    
    trie= Trie()
    
    while n > 0:
        n=n-1
        line = f.readline().strip()
        trie.add_string(line, -1)
    print trie.num_node
    

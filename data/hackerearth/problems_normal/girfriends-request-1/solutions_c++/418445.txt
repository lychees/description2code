#include<iostream>
#include<map>
#include<set>
#include<cstdio>
#include<vector>
#define rep(i,a,b) for(int i=a;i<b;i++)
#define cinl(n) scanf("%lld",&n)
#define cin(n) scanf("%d",&n)
#include<queue>
#include<algorithm>
#include<cstring>
#define ill long long
#define inf 10000000
#define pb push_back
using namespace std;
#define mod 1000000007
#define maxn 100008
#define gc getchar_unlocked
#define mp make_pair

ill min(ill a,ill b)
{
    return a<b?a:b;
}

ill max(ill a,ill b)
{
    return a>b?a:b;
}

ill pow(long long a, int b, int c)
{
    ill ret=1LL;

    while(b)
    {
        if(b & 1)
            ret = (ret*a*1LL)%mod;
        a=(a*a*1LL)%mod;

        b>>=1;
    }
    return ret;
}
/*
long long fibonacci(int n)
{
    long long fib[2][2]= {{1,1},{1,0}},ret[2][2]= {{1,0},{0,1}},tmp[2][2]= {{0,0},{0,0}};
    int i,j,k;
    while(n)
    {
        if(n&1)
        {
            memset(tmp,0,sizeof tmp);
            for(i=0; i<2; i++) for(j=0; j<2; j++) for(k=0; k<2; k++)
                        tmp[i][j]=(tmp[i][j]+ret[i][k]*fib[k][j]%mod)%mod;
            for(i=0; i<2; i++) for(j=0; j<2; j++) ret[i][j]=tmp[i][j];
        }
        memset(tmp,0,sizeof tmp);
        for(i=0; i<2; i++) for(j=0; j<2; j++) for(k=0; k<2; k++)
                    tmp[i][j]=(tmp[i][j]+fib[i][k]*fib[k][j]%mod)%mod;
        for(i=0; i<2; i++) for(j=0; j<2; j++) fib[i][j]=tmp[i][j];
        n/=2;
    }
    return (ret[0][1])%mod;
}

ill nCr[1008][1008];

ill ncr(int n,int k)
{
    if(k<0||n<k)
            return 0;
    if(k==0||n==k)
        return 1;

    if(nCr[n][k]!=-1)
        return nCr[n][k]%mod;

    return nCr[n][k]=(ncr(n-1,k)+ncr(n-1,k-1))%mod;
}
int dp[108][108];

int rec(int n,int k)
{
    if(dp[n][k]!=-1)
        return dp[n][k];

    if(n==1&&k==0)
        return 1;
    if(n==1)
        return 0;

    int ret=0;

    ret=(((n-2)*(n-3)/2))*rec(n-2,k)+2*(n-2)*rec(n-2,k-1);

}*/

int main()
{
    int m,t,n,i,j,l,k,r,p,q;
    //cin(t);
    t=1;

    while(t--)
    {
        cin(n);
        int a[n+9];
        for(i=0;i<n;i++)
            cin(a[i]);

        int dp[n+9][n+9];

        for(i=0;i<n;i++)
        {
            priority_queue<int>pq1,pq2;
            for(j=i;j<n;j++)
            {
                if(j==i)
                {
                    dp[i][j]=a[j];
                    pq1.push(a[j]);
                    continue;
                }
                int x=pq1.top();
                int k=j-i+1;

                if(k&1)
                {
                    int y=-pq2.top();
                    if(y<a[j])
                    {
                        pq2.pop();
                        pq2.push(-a[j]);
                        pq1.push(y);
                    }
                    else
                        pq1.push(a[j]);
                        dp[i][j]=pq1.top();
                    continue;
                }
                int y=-pq2.top();

                if(a[j]<x)
                {
                    pq1.pop();
                    pq1.push(a[j]);
                    pq2.push(-x);
                }
                else
                    pq2.push(-a[j]);

                dp[i][j]=pq1.top();
            }
        }
        cin(m);

        while(m--)
        {
            cin(p);
            cin(q);
            p--;q--;
            cout<<dp[p][q]<<"\n";
        }

    }
    return 0;
}
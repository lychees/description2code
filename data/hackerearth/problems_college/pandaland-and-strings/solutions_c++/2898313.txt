#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])


#define ALPHABET_SIZE (26)

#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
char str[101][101];
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};


typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};


trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}


void insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }

        pCrawl = pCrawl->children[index];
    }

    pCrawl->value = pTrie->count;
}

int search(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pCrawl = pTrie->root;

    for( level = 0; level < length-1; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);

        if( !pCrawl->children[index] )
        {
            return 0;
        }

        pCrawl = pCrawl->children[index];
        if(pCrawl->value>0)
        {

          return 1;
        }
    }

    return 0;
}

// Driver
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
      trie_t trie;
      initialize(&trie);
      int n,i;
      scanf("%d",&n);
      for( i=0;i<n;i++)
      {
        scanf("%s",str[i]);
        insert(&trie, str[i]);
      }
      int f=0;
      for( i=0;i<n;i++)
      {
        f=search(&trie,str[i]);
        if(f)
        {
         // printf("%s\n",str[i]);
          break;
        }
      }
      //printf("%d\n",f);
      if(f==0)
      printf("YES\n");
      else
      printf("NO\n");
    }
  return 0;
}

#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <map>
#include <cctype>
#include <cmath>
#include <utility>
using namespace std;

#define MOD 1000000007 

typedef pair<int,int> ii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vl;

class UnionFind{
private:
	vi p, rank, ne;
public:
	UnionFind(int n){
		p.assign(n,0);
		rank.assign(n,0);
		ne.assign(n,1);
		ne[0] = 0;
		for(int i=0; i<n; ++i) p[i] = i;
	}
	
	int findSet(int i){
		return (p[i] == i) ? i : (p[i] = findSet(p[i])) ;
	}
	
	bool inSameSet(int i, int j){
		return findSet(i) == findSet(j);
	}
	
	void unionSet(int  i, int j){
		if(!inSameSet(i,j)){
			int x = findSet(i), y = findSet(j);
			if(rank[x] > rank[y]){
				p[y] = x;
				ne[x]+=ne[y];
				ne[y] = 0;
			}
			else{
				p[x] = y;
				ne[y]+=ne[x];
				ne[x] = 0;
				if(rank[x] == rank[y]){
					rank[y]++;
				}
			}
		}
	}
	
	void showne(){
		long long int ans = 1;
		for(int i=1; i<ne.size(); ++i){
			if(ne[i] > 2){
				long long int v  = ((ne[i]*(ne[i]-1))%MOD)/2;
				ans = (ans * (v % MOD)) % MOD; 
			}
			//cout<<ne[i]<<" ";
		}//cout<<"\n";
		cout<<ans<<"\n";
	}
};

int main(){
	ios_base::sync_with_stdio(false);
	//cin.tie(NULL);
	
	int t;
	cin>>t;
	
	while(t--){
		int n,k;
		cin>>n>>k;
		UnionFind uf(n+1);
		
		while(k--){
			int x,y;
			cin>>x>>y;
			uf.unionSet(x,y);
			
		}
		
		uf.showne();
	}
	
	return 0;
}

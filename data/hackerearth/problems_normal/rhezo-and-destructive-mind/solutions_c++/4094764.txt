#include <bits/stdc++.h>
using namespace std;
vector<int>v[1000];
int par[1000];
bool ap[1000];
bool visit[1000];
int low[1000];
int disc[1000];
int tim=0;
void dfs(int u)
{
	visit[u]=true;
	int child=0;
	low[u]=disc[u]=++tim;
	for(int i=0;i<v[u].size();i++)
	{
		int x=v[u][i];
		if(visit[x]==false)
		{
			par[x]=u;
			child++;
			dfs(x);
			low[u]=min(low[u],low[x]);
			if(par[u]==-1&&child>1)
			ap[u]=true;
			else if(par[u]!=-1&&low[x]>=disc[u])
			ap[u]=true;
		}
		else if(x!=par[u])
		{
			low[u]=min(low[u],disc[x]);
		}
	}
}
int main()
{
	memset(par,-1,sizeof par);
	memset(visit,false,sizeof visit);
	memset(ap,false,sizeof ap);
	int n,m;
	scanf("%d%d",&n,&m);
	int x,q,y;
	for(int i=1;i<=700;i++)
	v[i].clear();
	for(int i=1;i<=m;i++)
	{
		scanf("%d%d",&x,&y);
		v[x].push_back(y);
		v[y].push_back(x);
		
	}
	for(int i=1;i<=n;i++)
	{
		if(visit[i]==false)
		{
			dfs(i);
		}
	}
	scanf("%d",&q);
	while(q--)
	{
		scanf("%d",&x);
		if(ap[x])
		{
			printf("Satisfied %d\n",v[x].size());
		}
		else
		{
			printf("Not Satisfied\n");
		}
	}
	return 0;
}
/* problem_link */

#include<bits/stdc++.h>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
#define rep(i,a,n) for(int i = a; i < n; ++i)
#define repe(i,a,n) for(int i = a; i <= n; ++i)
#define mfill(a,b) memset(a, b, sizeof(a))
#define all(a) a.begin(), a.end()

#define U_MAX 1000010
#define L_MAX 1000010

bool is_not_prime[U_MAX];
ull answer[L_MAX];

inline void sieve()
{
    is_not_prime[1] = is_not_prime[0] = true;
    ull imax;
    //for( imax = 2; imax * imax <= U_MAX; ++imax);  //initialise imax to sqrt(U_MAX)
        ull number_of_primes=0;
    rep(i, 2, U_MAX)
        {
            if( !is_not_prime[i] )
            {
                answer[i] = 1;

                for(int j = 2*i; j < U_MAX; j += i)
                    {
                        is_not_prime[j] = true;          //marking factors of prime i
                        int temp = j/i, power_of_i_in_j = 1;
                        while( temp % i == 0)
                        {
                            ++power_of_i_in_j;
                            temp /= i;
                        }
                        answer[j] += power_of_i_in_j;

                    }
            }
        }
}
inline void precompute()
{
    sieve();
    rep(i, 1, L_MAX)
        answer[i] += answer[i-1];
}
int main()
{
//  clock_t start_time = clock();
    ios_base::sync_with_stdio(false);
//  freopen("t_case.txt","r",stdin);
    precompute();
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int a,b;
        scanf("%d %d",&a,&b);
        cout<<answer[b] - answer[a-1]<< "\n";

    }
//  cout<<"time taken " <<(double) (clock()-start_time)/(double)CLOCKS_PER_SEC;
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
#define swapp(a,b) a^=b^=a^=b
#define ll long long int
#define lu unsigned long long int
#define si(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define ss(s) scanf("%s",s)
#define sc(c) scanf("%c",&c)
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vpi vector< ii >
#define vpll vector< pll >
#define vl vector<ll>
#define vi vector<int>
#define vvl vector< vl >
#define vvi vector< vi >
#define pb push_back
#define mp make_pair
#define rep(i,n,x) for(i=x;i<n;i++)
#define f(i,n) rep(i,n,0)
#define Min(x,y) ((x)<(y)?(x):(y))
#define Max(x,y) ((x)>(y)?(x):(y))
#define Abs(x) (x>=0?x:-x)
#define all(a) a.begin(),a.end()
#define sortall(a) sort(all(a))
#define getcx getchar_unlocked
#define mem(a,x) memset(a,x,sizeof(a))
#define MOD 1000000007
#define PI 3.1415926535897932384626
#define F first
#define S second

/*int cmpfunc (const void * a, const void * b)
{
return ( *(int*)a - *(int*)b );
}
qsort(array, array.length, sizeof(int), cmpfunc);
*/
int scan_d(){
register int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())
if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}
for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
/*ll scan_lld(){
register int ip=getchar_unlocked(),flag=1;ll ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())
if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}
for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
lu scan_llu(){
register int ip=getchar_unlocked();lu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());
for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
*/
vvi adjlist;
vi dist;
queue<int> myqueue;
int n;
bool visited[10000];

void flush(void)
{
	int i;
	f(i,n+1) visited[i]=false;
}

void bfs(int node,int weight)
{
	int i;
	visited[node]=true;
	for(i=0;i<adjlist[node].size();i++)
	{
		if(!visited[adjlist[node][i]])
		{
			myqueue.push(adjlist[node][i]);
			dist[adjlist[node][i]]=weight+1;
		}
	}
	myqueue.pop();
	if(!myqueue.empty()) bfs(myqueue.front(),dist[myqueue.front()]);
}

int main()
{
	int t;
	si(t);
	while(t--)
	{
		int i,j,a,b,index=0,max=0;
		n=scan_d();
		flush();adjlist.resize(0);dist.resize(0);
		adjlist.resize(n+1);
		dist.resize(n+1);
		f(i,n-1)
		{
			a=scan_d();b=scan_d();a++;b++;
			adjlist[a].pb(b);
			adjlist[b].pb(a);
		}
		dist[1]=0;myqueue.push(1);
		bfs(1,0);
		rep(i,n+1,1)
		{
			if(max<dist[i]) {max=dist[i];index=i;}
		}
		flush();
		dist.resize(0);dist.resize(n+1);
		dist[index]=0;
		myqueue.push(index);
		bfs(index,0);
		rep(i,n+1,1) if(max<dist[i]) max=dist[i];
		printf("%d\n",max+1 );
	}
return 0;
}
#include<iostream>
#include<map>
#include<stdio.h>

using namespace std;

bool isSubsetSum(int set[], int n, int sum)
{
   // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
        //  with sum equal to i
        bool subset[sum+1][n+1];

    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
        subset[0][i] = true;

    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum; i++)
        subset[i][0] = false;

    // Fill the subset table in botton up manner
    for (int i = 1; i <= sum; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            subset[i][j] = subset[i][j-1];
            if (i >= set[j-1])
                subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
        }
    }
    return subset[sum][n];
}
int main(){
    int cases, t, m, a[1024], tmp;
    scanf("%d",&cases);
    while(cases--){
        scanf("%d %d", &t,&m);
        for(int i=0;i<m;i++){
            scanf("%d", &a[i]);
        }
        map<int, int> h;
        map<int, int>::iterator it;
        for(int i=0;i<t;i++){
            scanf("%d", &tmp);
            it = h.find(tmp);
            if ( it != h.end() ){
                h[it->first] = it->second+1;
            } else {
                h[tmp] = 1;
            }
        }
        int ans = 0 ;
        for(it = h.begin(); it != h.end(); ++it){
            if( isSubsetSum(a, m, it->second) ){
                ans++;
            }
        }
        printf("%d\n", ans);
    }
}

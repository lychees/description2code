#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
template<int MOD>
struct ModInt {
    static const int Mod = MOD;
    unsigned x;
    ModInt() : x ( 0 ) { }
    ModInt ( signed sig ) {
        int sigt = sig % MOD;
        if ( sigt < 0 ) sigt += MOD;
        x = sigt;
    }
    ModInt ( signed long long sig ) {
        int sigt = sig % MOD;
        if ( sigt < 0 ) sigt += MOD;
        x = sigt;
    }
    int get() const {
        return ( int ) x;
    }

    ModInt &operator+= ( ModInt that ) {
        if ( ( x += that.x ) >= MOD ) x -= MOD;
        return *this;
    }
    ModInt &operator-= ( ModInt that ) {
        if ( ( x += MOD - that.x ) >= MOD ) x -= MOD;
        return *this;
    }
    ModInt &operator*= ( ModInt that ) {
        x = ( unsigned long long ) x * that.x % MOD;
        return *this;
    }
    ModInt &operator/= ( ModInt that ) {
        return *this *= that.inverse();
    }

    ModInt operator+ ( ModInt that ) const {
        return ModInt ( *this ) += that;
    }
    ModInt operator- ( ModInt that ) const {
        return ModInt ( *this ) -= that;
    }
    ModInt operator* ( ModInt that ) const {
        return ModInt ( *this ) *= that;
    }
    ModInt operator/ ( ModInt that ) const {
        return ModInt ( *this ) /= that;
    }
    bool operator!() const {
        return x==0;
    }
    ModInt inverse() const {
        long long a = x, b = MOD, u = 1, v = 0;
        while ( b ) {
            long long t = a / b;
            a -= t * b;
            std::swap ( a, b );
            u -= t * v;
            std::swap ( u, v );
        }
        return ModInt ( u );
    }
};
template<int MOD>
struct GaussElim {
    typedef ModInt<MOD> mint;
    const int n;
    vector<vector<mint>> mat;
    GaussElim ( const vector<vi> &m ) :n ( m.size() ),mat ( n ) {
        rep ( i,n ) {
            mat[i]=vector<mint> ( all ( m[i] ) );
        }
    }
    vector<mint> b;
    vector<vector<mint>> A;
    bool run ( const vi &vals )  {
        A=mat;
        b=vector<mint> ( all ( vals ) );
        int rank=0;
        rep ( k,n ) {
            int j=rank;
            while ( j<n &&!A[j][k] ) j++;
            if ( j==n ) continue;
            if ( j!=rank ) {
                swap ( b[rank],b[j] );
                swap ( A[rank],A[j] );
            }
            mint pivot=A[rank][k].inverse();
            reu ( i,rank+1,n ) {
                mint m=A[i][k]*pivot;
                reu ( j,k+1,n ) A[i][j]=A[i][j]-A[rank][j]*m;
                b[i]=b[i]-b[rank]*m;
                A[i][k]=0;
            }
            rank++;
        }
//         cout<<rank<<endl<<A<<b<<endl;
        reu ( i,rank,n ) if ( 0!=b[i].x ) return 0;
        return 1;
    }
};
template<int MOD>
struct LUDec {
    typedef ModInt<MOD> mint;
    const int n;
    vector<vector<mint>> l,u;
    vi perm;
    int rank=0;
    vi ranks;
    LUDec ( const vector<vi> &m ) :n ( m.size() ),l ( n,vector<mint>(n) ),u(n),perm ( n ) {
        rep ( i,n ) {
            u[i]=vector<mint> ( all ( m[i] ) );
        }
        rep ( i,n ) perm[i]=i;
        rep ( k,n ) {
//             cout<<"Step "<<k<<", rank: "<<k<<endl<<lu<<"upper: "<<endl<<getU()<<endl<<"-----------"<<endl;
            int j=rank;
            while ( j<n &&!u[perm[j]][k] ) j++;
            if ( j==n ){continue;}
            if ( j!=rank ) {
//                 cout<<"swapping "<<j<<" "<<rank<<endl;
                swap ( perm[rank],perm[j] );
            }
            mint pivot=u[perm[rank]][k].inverse();
//             cout<<"pivot: lu("<<perm[rank]<<", "<<k<<"): "<<u[perm[rank]][k]<<endl;
            reu ( i,rank+1,n ) {
                mint m=u[perm[i]][k]*pivot;
                l[perm[i]][rank]=m;
                reu ( j,k+1,n ) u[perm[i]][j]=u[perm[i]][j]-u[perm[rank]][j]*m;

            }
            rank++;
        }
//           cout<<"finished: "<<endl<<lu<<"upper: "<<endl<<getU()<<endl<<"-----------"<<endl;
//         cout<<lu<<endl<<perm<<endl;

    }
    vector<mint> applyL ( const vi &vals ) {
        vector<mint> x ( all(vals) );


        rep ( r,rank ) {
               reu ( i,r+1,n ) {
                    x[perm[i]]=x[perm[i]]-x[perm[r]]*l[perm[i]][r];
               }
          
        }
        vector<mint> y(n);
        rep(i,n)y[i]=x[perm[i]];
        return y;
    }
    bool solvable ( const vi &vals ) {

//         cout<<lu<<perm<<endl;
        vector<mint> x=applyL ( vals );
        reu ( i,rank,n ) if ( x[i].x ) return 0;
        return 1;
    }
    vector<vector<mint>> getU() {
        vector<vector<mint>> U ( n,vector<mint> ( n ) );
        rep ( i,n ) {
            reu ( j,i,n ) U[i][j]=u[perm[i]][j];
        }
        return U;
    }
};
template<int MOD>
ostream & operator<< ( ostream &os, const ModInt<MOD> &m ) {
    return os<<m.get();
}
template<int M>
void test ( int n=4 ) {

    rep ( k,100000 ) {
        vector<vi> mat ( n,vi ( n ) );
        rep ( i,n ) rep ( j,n ) mat[i][j]=rand() %M;
        GaussElim<M> ge2 ( mat );
        LUDec<M> dec2 ( mat );
        vi vals ( n );
        rep ( i,n ) vals[i]=rand() %M;
        ge2.run ( vals );
        auto res=dec2.applyL ( vals );
         assert ( ge2.run ( vals ) ==dec2.solvable(vals) );
        rep ( i,n ) if ( res[i].x!=ge2.b[i].x )  {
            cout<<mat<<vals<<endl;
            cout<<"A: "<<endl;
            cout<<ge2.A<<endl;
            cout<<"U: "<<endl;
            cout<<dec2.getU()<<"P:"<<endl<<dec2.perm<<endl;
            cout<<res<<ge2.b<<endl;
            return;
        }
    }
}
int main() {
// //     test<2>();
//    test<5>();
//       test<719>();

//     return 0;
    ios_base::sync_with_stdio ( false );
    int n,q;
    cin>>n>>q;
    vector<vi> mat ( n,vi ( n ) );
    cin>>mat;
//     GaussElim<2> ge2 ( mat );
//     GaussElim<5> ge5 ( mat );
//     GaussElim<719> gep ( mat );
    LUDec<2> dec2 ( mat );
    LUDec<5> dec5 ( mat );
    LUDec<719> decp ( mat );
    rep ( i,q ) {
        vi vals ( n );
        cin>>vals;
//         gep.run ( vals );
//         auto res=decp.applyL ( vals );
//         rep ( i,n ) assert ( res[i].x==gep.b[i].x );
//         cout<<res<<ge2.b<<endl;
//         if ( n<100 ) {
//              assert ( ge2.run ( vals ) ==dec2.solvable(vals) );

//             assert ( ge5.run ( vals ) ==dec5.solvable(vals) );

//             assert ( gep.run ( vals ) ==decp.solvable(vals) );
//         }
        bool suc=dec2.solvable ( vals ) &&dec5.solvable ( vals ) &&decp.solvable ( vals ) ;
        cout<< ( suc?"Yes\n":"No\n" );
//          cout<<"-----"<< ge2.run ( vals ) <<" "<<ge5.run ( vals ) <<" "<<gep.run ( vals ) <<endl;
//            cout<<"-----"<< dec2.solvable ( vals ) <<" "<<dec5.solvable ( vals )<<" "<<decp.solvable ( vals ) <<endl;

    }
}

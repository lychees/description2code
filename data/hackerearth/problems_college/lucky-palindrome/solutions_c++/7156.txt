#include <iostream>
#include <vector>
#include <string>
#include <cmath>

using namespace std;
typedef vector<unsigned> vu;

bool is_prime(int num)
{
	if(num==1)
		return false;
	if( num == 2)
		return true;
	unsigned upper_lim = (unsigned)ceil(sqrt(num)) + 1;
	for(int x=2; x < upper_lim; x++)
	{
		if(num % x == 0)
			return false;
	}
	return true;
}

bool is_palin(string& word, unsigned i1, unsigned i2)
{
	while(i2 >= i1)
	{
		if(word[i2] != word[i1])
			return false;
		i2 -= 1;
		i1 +=1;
	}
	return true;
}

unsigned max_palin(string& word, int index, int max_palin_len)
{
	int i = index - max_palin_len + 1;
	if(i < 0)
		i = 0;
	while(i < index)
	{
		if(is_palin(word, i, index))
			return index - i +1;
		i += 1;
	}
	return 1;
}

void process(string& word)
{
	vu palin_len;
	palin_len.push_back(1);
	int index = 0;
	int max_len = 1;
	while(index < word.size()-1)
	{
		index += 1;
		unsigned len_p = palin_len[index-1];
		unsigned len_c = 1;
		len_c = max_palin(word,index,len_p+2);
		if(len_c > max_len)
			max_len = len_c;
		palin_len.push_back(len_c);
	}
	if(is_prime(max_len))
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}

int main()
{
	int num_test_cases;
	string s;
	cin >> num_test_cases;
	for(; num_test_cases> 0; num_test_cases--)
	{
		cin >> s;
		process(s);
	}
	return 0;
}

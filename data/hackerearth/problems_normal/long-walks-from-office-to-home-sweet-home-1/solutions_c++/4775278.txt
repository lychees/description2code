#include <bits/stdc++.h>

const int MOD = 1e9 + 7;

using namespace std;

typedef long long ll;
typedef vector<vector<ll>> Matrix;

ll add(ll a, ll b, ll mod) {
  return ((a % mod) + (b % mod)) % mod;
}

ll sub(ll a, ll b, ll mod) {
  return ((a % mod) - (b % mod) + mod) % mod;
}

ll mul(ll a, ll b, ll mod) {
  return ((a % mod) * (b % mod)) % mod;
}

Matrix indetity(int n) {
  Matrix res(n, vector<ll>(n, 0));
  for (int i = 0; i < n; i++) {
    res[i][i] = 1LL;
  }
  return res;
}

Matrix mult(Matrix a, Matrix b) {
  int n = a.size();
  Matrix res(n, vector<ll>(n, 0));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < n; k++) {
        res[i][j] = add(res[i][j], mul(a[i][k], b[k][j], MOD), MOD);
      }
    }
  }
  return res;
}

Matrix mpow(Matrix b, ll e) {
  if (!e) {
    return indetity(b.size());
  } else if (e == 1) {
    return b;
  } else {
    if (e & 1) {
      return mult(b, mpow(b, e - 1));
    } else {
      Matrix x = mpow(b, e >> 1);
      return mult(x, x);
    }
  }
}

int main() {
  int t;
  scanf("%d", &t);
  while (t--) {
    int n, u, v;
    ll k;
    scanf("%d %lld %d %d", &n, &k, &u, &v);
    Matrix mat(n, vector<ll>(n, 0));
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        scanf("%lld", &mat[i][j]);
      }
    }
    printf("%lld\n", mpow(mat, k)[u][v]);
  }
  return 0;
}

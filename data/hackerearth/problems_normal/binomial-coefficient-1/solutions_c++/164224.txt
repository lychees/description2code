#include <iostream>
using namespace std;

#define LL long long int
#define MOD  1000000007

// Use 64 bits integers to avoid overflow errors during multiplication.
LL modPow(LL a, LL x, LL p) {
    //calculates a^x mod p in logarithmic time.
    LL res = 1;
    while(x > 0) {
        if( x % 2 != 0) {
            res = (res * a) % p;
        }
        a = (a * a) % p;
        x /= 2;
    }
    return res;
}

LL modInverse(LL a, LL p) {
    //calculates the modular multiplicative of a mod m.
    //(assuming p is prime).
    return modPow(a, p-2, p);
}

LL modBinomial(LL n, LL k, LL p) {
// calculates C(n,k) mod p (assuming p is prime).

    LL numerator = 1; // n * (n-1) * ... * (n-k+1)
    for (int i=0; i<k; i++) {
        numerator = (numerator * (n-i) ) % p;
    }
    
    LL denominator = 1; // k!
    for (int i=1; i<=k; i++) {
        denominator = (denominator * i) % p;
    }
    
    // numerator / denominator mod p.
    return ( numerator* modInverse(denominator,p) ) % p;
}

int main()
{
	int a, b, n , k;
	cin>>a>>b>>n>>k;
	long long int result;
	result = modBinomial(n, k, MOD);
	result = (result*modPow(a, k, MOD))%MOD;
	result = (result*modPow(b, n-k, MOD))%MOD;
	cout<<result<<endl;
    //cout << "Hello World!" << endl;
    return 0;
}

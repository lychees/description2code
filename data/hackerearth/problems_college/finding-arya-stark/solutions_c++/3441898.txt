#include<bits/stdc++.h>
using namespace std;
#define MAXN 100007
int dfs_num[MAXN];
vector<int> adj[MAXN];
int dist[MAXN];
int startTime[MAXN];
int endTime[MAXN];
int time1;
void dfs(int u,int dist1)
{
	dfs_num[u]=1;
	time1++;
	startTime[u]=time1;
	//dist[u]=dist1;
	for(vector<int>::iterator it1=adj[u].begin();it1!=adj[u].end();it1++)
	{
		if(dfs_num[*it1]==-1)
			dfs(*it1,dist1+1);
	}
	time1++;
	endTime[u]=time1;
}
void performBFS()
{
   memset(dist,-1,sizeof(dist));
   queue<int> q1;
   int source=0;
   q1.push(source);
   dist[source]=0;
   while(!q1.empty())
   {
      int ver = q1.front();
      q1.pop();
      for(vector<int>::iterator it1=adj[ver].begin();it1!=adj[ver].end();it1++)
      {
        if(dist[*it1]==-1)
          {
             dist[*it1]=dist[ver]+1;
             q1.push(*it1);
          }
      }
   }
}
int relation(int i,int j)
{
	if(startTime[i]>endTime[j])
	   return -1;
	if(startTime[j]>endTime[i])
		return -1;   // no relationship;
	else if(startTime[j]>startTime[i] && endTime[j]<endTime[i])
	{
		return 0;  // j is descendant
	}
	else
		return 1;
}
void performDFS()
{
	memset(dfs_num,-1,sizeof(dfs_num));
	dfs(0,0);
}
void addEdge(int a,int b)
{
	adj[a].push_back(b);
	adj[b].push_back(a);
}
void buildGraph(int m)
{
	for(int i=0;i<m;i++)
	{
		int a,b;
		scanf("%d %d",&a,&b);
		a--;b--;
		addEdge(a,b);
	}
}
void clearGraph(int n)
{
	for(int i=0;i<n;i++)
	{
		adj[i].clear();
	}
}
int main()
{
	int n;
	scanf("%d",&n);
	buildGraph(n-1);
	performDFS();
	performBFS();
	int q;
	scanf("%d",&q);
	while(q--)
	{
		int type,y,x;
		scanf("%d %d %d",&type,&y,&x);
		x--;y--;
		
		if(x==y)
		{
		//	if(x==0 && type==1)
		//	printf("NO\n");
		//	else
			printf("YES 1\n");
			continue;
		}
	
		//cout<<dist[x]<<" "<<dist[y]<<endl;
		int rel = relation(x,y);
		if(type==0)
		{
			if(rel==1)
			{
				
					printf("YES %d\n",dist[x]-dist[y]+1);
			}
			else
			{
				printf("NO\n");
			}

		}
		else
		{
			if(rel==0)
			{
				//if(x==0)
				  //printf("YES %d\n",dist[y]);
			//	else
				printf("YES %d\n",dist[y]-dist[x]+1);
			}
			else
			{
				printf("NO\n");
			}
		}
	}
}

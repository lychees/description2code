#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:16777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
using namespace std;
#define FOR(i, a, b) for(int i=(a);i<(b);i++)
#define RFOR(i, b, a) for(int i=(b)-1;i>=(a);--i)
#define FILL(A,value) memset(A,value,sizeof(A))
#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979
#define x0 ikjnrmthklmnt
#define y0 lkrjhkltr
#define y1 ewrgrg
typedef long long Int;
typedef unsigned long long UInt;
typedef vector<int> VI;
typedef pair<int, int> PII;
typedef pair<Int, Int> PLL;
typedef pair<double, double> PDD;
typedef complex<double> base;
const int INF = 1000000000;
const int BASE = 1000000007;
const int MAX = 500007;
const int MAX2 = 7777;
const int MAXE = 100000;
const int ADD = 1000000;
const int MOD = 1000000007;
const int CNT = 800;
const int BITS = 20;
struct state
{
	int next[2];
	VI pos;
	state()
	{
		next[0] = next[1] = -1;
	}
};
state A[MAX * BITS];
int main()
{
    //freopen("in.txt", "r", stdin);
    //freopen("distance.in",  "r", stdin);
    //freopen("distance.out", "w", stdout);
    //freopen("out.txt" , "w" , stdout);
	int n , q;
	cin >> n >> q;
	int cnt = 1;
	FOR(i,0,n)
	{
		int x;
		scanf("%d" , &x);
		int cur = 0;
		RFOR(j,BITS, 0)
		{
			int t = (bool) (x & (1 << j));
			if (A[cur].next[t] == -1)
			{
				A[cur].next[t] = cnt++;
			}
			cur = A[cur].next[t];
			A[cur].pos.push_back(i);
		}
	}
	FOR(qq,0,q)
	{
		int l, r, x;
		scanf("%d%d%d" , &l , &r , &x);
		--l;--r;
		int cur = 0;
		int res = 0;
		RFOR(i,BITS , 0)
		{
			int t = (bool) (x & (1 << i));
			t = 1 - t;
			if (A[cur].next[t] == -1)
			{
				cur = A[cur].next[1 - t];
				continue;
			}
			int nx = A[cur].next[t];
			int id = lower_bound(ALL(A[nx].pos) , l) - A[nx].pos.begin();
			if (id == A[nx].pos.size() || A[nx].pos[id] > r)
			{
				cur = A[cur].next[1 - t];
			}
			else
			{
				res += (1 << i);
				cur = nx;
			}
		}
		printf("%d\n" , res);
	}
    return 0;
}
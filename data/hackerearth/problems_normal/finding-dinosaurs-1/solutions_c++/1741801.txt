#include <iostream>

#include <queue>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <algorithm>
#include <cmath>
using namespace std;
typedef struct _node
{
	string name;
	string attr;
}dino;

struct compare_by_str
{
    bool operator() (const dino & lhs,const dino & rhs) { return lhs.attr < rhs.attr; }
};

void sorter(vector<dino>* A)
{
    std::sort(A->begin(), A->end(), compare_by_str());
   
}
bool there1(string str, vector<dino>* A,string* ans)
{
	 
    	int first = 0;
        int last = A->size() - 1;
        bool friends = false;

        while (!friends && first <= last)
        {
            int middle = (first + last) / 2;
            if ((*A)[middle].attr == str)
            {
                friends = true;

               // cout<<array[middle]<<" is my friend."<<endl;
                (*ans) = (*A)[middle].name ;
                return true;
            }
            else if ((*A)[middle].attr > str)
                last = middle - 1;
            else
                first = middle + 1;
        }
        if(first > last) return false;
    

}
int main()
{
	int n,k,l,q;
	cin>>n>>k>>l>>q;
	vector<dino> list;
	for(int i=0;i<n;i++)
	{
		dino temp_dino;
		string temp_str;
		int temp;
		cin>>temp_str;
		temp_dino.name = temp_str;

		string new_str = "";
		for(int j=0;j<k;j++)
		{
			cin>>temp_str;
			new_str = new_str + "_"+temp_str; 
			temp_dino.attr = new_str;
		}

		list.push_back(temp_dino);
	}
	sorter(&list);
	for(int i =0;i<q;i++)
	{
		string temp;
		string query="";
		for(int j =0;j<k;j++)
		{
			cin>>temp;
			query = query + "_" + temp;
		}
		string answer;
		//if(there(query,&list,&answer)) cout<<answer<<endl;
		if(there1(query,&list,&answer)) cout<<answer<<endl;
		else cout<<"You cant fool me :P"<<endl;

	}
	
}
#include<bits/stdc++.h>
using namespace std;

typedef long long int64;
typedef vector<int64> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector<int64> > vvi;
typedef pair<int64,int64> ii;
typedef vector<string> vs;
typedef vi::iterator iter;

#define mp make_pair
#define St string
#define	Sf scanf
#define	Pf printf
#define S second
#define F first
#define pb push_back
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define iterV(c, it) for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define iterS(c, it) for (set<int64>::iterator it = (c).begin(); it != (c).end(); it++)
#define iterM(c, it) for (map <int64, int64>::iterator it = (c).begin(); it != (c).end(); it++)
#define	present(x, c) ((c).find(x) != (c).end()) //map & set//
#define	cpresent(x, c) (find( (c).begin(), (c).end(), x) != (c).end()) //vector & list//

#define pran(i, n) for(long long int i = 0; i<n; i++)
#define pranab(i, a, b) for(long long int i = a; i<=b; i++)
#define pran_rev(i, n) for(long long int i = n-1; i>=0; i--)
#define pranab_rev(i, a, b) for(long long int i = b; i>=a; i--)
#define PI 3.14159265
#define MOD 1000000007
#define LIMIT 1000000

vvi ans;
#define gc getchar_unlocked

#define mem(A,val) memset(A,val,sizeof(A))
#define all(c) (c).begin(),(c).end()

// to sort in decending order .....
//sort(all(v),greater<int64>());


// for transversing backward in vector use rbegin() and rend(); IMP...
#define sq(x) ((x)*(x))

int fx(int N)
{
  int r = 0;
  for (int i = 1;i<=N;i++)
  {
     if (__gcd(N,i) == 1)
             r++;
   }
  return r;
}

int panda(int N)
{
 int r=0;
 for (int i = 1;i<=N;i++)
	{
      if (N%i==0)
         r += fx(i);
 }
 return r;
}


int Mark[LIMIT+1],Visited[LIMIT+1],Final[LIMIT+1];


void sieve(){
	for(int i=2;i<=LIMIT;i++){
		if(Visited[i]==0){
				Mark[i]++;
			for(int j=2;j*i<=LIMIT;j++){
				Visited[j*i] = 1;
				int b = i*j;
				while(b>0){
					if(b%i==0){
					b/=i;
					Mark[i*j]++;
				}
				else{
					break;
				}
				
				}
			}
		}
	}
}

int main() {
ios_base::sync_with_stdio(0);

fill(Visited,Visited+LIMIT,0);
fill(Mark,Mark+LIMIT,0);
sieve();
Final[0]=0;

pranab(i,1,LIMIT){
	Final[i] =Final[i-1]+Mark[i];
}

 //pran(i,5){
 //	cout<<i<<" "<<Visited[i]<<" "<<Mark[i]<<" "<<Final[i]<<" \n";
 //}

int t,n;
cin>>t;
while(t--){
	cin>>n;
	// int64 result = 0;
	// pran(i,n){
	// 	result += Mark[i+1];
	// }
	// cout<<result<<"\n";
	
	cout<<Final[n]<<"\n";
}



	return 0;
}
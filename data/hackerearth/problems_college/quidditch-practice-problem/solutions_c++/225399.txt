#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define pf printf

#define LL long long
#define ll long long
#define LD long double
#define ld long double
#define PB push_back
#define pb push_back
#define MP make_pair
#define mp make_pair
#define F first
#define S second

typedef pair<int,int> PII;
typedef vector<int> VI;

#define pii pair<int,int>
#define vi vector<int>
#define fr(i,n) for( int i=0; i<=n; i++)
#define frm(i,m,n) for(int i=m; i<=n; i++)
#define mod 1000000007
LL getpow(LL a,LL b){
    LL ret=1LL;
    LL inter=a;
    while(b){
        if(b&1){
            ret *= inter;
            ret %= mod;
        }
        inter *= inter;
        inter %= mod;
        b = b>>1;
    }
    return ret;
}
int n,m,a,b;
vector < int > edges[10002];
int vis[10002];
int dfs(int u,int d)
{
    int v;
    int flag = 0;
    vis[u] = d;
    for(int i=0;i<edges[u].size();i++)
    {
        v = edges[u][i];
        if(vis[v]!=0)
        {
            flag = max((vis[v]-d+1)%2,flag);
        }
        else
        {
            flag = max(flag,dfs(v,d+1));
        }
    }
    return flag;
}
void solve()
{
    sd(n);
    sd(m);
    for(int i=0;i<m;i++)
    {
        sd(a);sd(b);
        edges[a].PB(b);
        edges[b].PB(a);
    }
    int flag = 0,ans = 0,bns = 0;
    memset(vis,0,sizeof(vis));
    for(int i=0;i<n;i++)
    {
        if(vis[i]==0)
        {
            flag = max(flag,dfs(i,1));
            ans++;
        }
    }
    if(flag==1)
    {
        printf("NOT POSSIBLE\n");
    }
    else
    {
        if(ans!=n)
            ans = getpow(2,ans-1);
        else
            ans = getpow(2,ans-1)-1+mod;
        printf("%lld\n",ans%mod);
    }
    for(int i=0;i<10002;i++)
        edges[i].clear();
}
int main()
{
    int t;
    sd(t);
    while(t--){
    solve();
    }
}

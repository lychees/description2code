#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>

using namespace std;
typedef long long LL;
#define pb push_back
#define f first
#define s second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define all(C) (C).begin(), (C).end()

template <typename T>
inline T sqr( T x ) {
    return x * x;
}

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef vector <vector<pii> > vvii;

const double EPS = 1e-9;
const int MAXN = 3 * int(1e5) + 5;
const int MOD = int(1e9) + 7;
#define mygc(c) (c)=getchar_unlocked()
void reader(int *x){int k,m=0;*x=0;for(;;){mygc(k);if(k=='-'){m=1;break;}if('0'<=k&&k<='9'){*x=k-'0';break;}}for(;;){mygc(k);if(k<'0'||k>'9')break;*x=(*x)*10+k-'0';}if(m)(*x)=-(*x);}

struct Query {
    int l, r;
    Query() {}
    void read() {
        reader(&l);
        reader(&r);
        --l;
        --r;
    }
};

void add( int &x, int y ) {
    if  ((x += y) >= MOD) {
        x -= MOD;
    }
}

int a[MAXN];
int sum[MAXN];
int F[MAXN];
int sumF[MAXN];
int n, m;
int b[MAXN];

vi whoEnd[MAXN];
vi whoStart[MAXN];

void precalc() {
    F[0] = 2;
    for (int i = 1; i <n; ++i) {
        F[i]=(F[i-1]<<1)%MOD;
    }
    sumF[0] = F[0];
    for (int i = 0; i <n; ++i) {
        sumF[i] = sumF[i-1];
        sumF[i] += F[i];
        if(sumF[i]>=MOD)sumF[i]-=MOD;
    }
}

void calcSum() {
    sum[0] = a[0];
    for (int i = 1; i < n; ++i) {
        sum[i]=sum[i-1];
        sum[i] += a[i];
        if(sum[i]>=MOD)sum[i]-=MOD;
    }
}

int getSum( int l, int r ) {
    int res = sum[r];
    if  (l > 0) {
        return (res+MOD-sum[l-1])%MOD;
    }
    return res;
}

int getSumF( int l, int r ) {
    int res = sumF[r];
    if  (l > 0) {
        return (res+MOD-sumF[l-1])%MOD;
    }
    return res;
}

int main() {
    //	freopen("in.txt", "r", stdin);
    //	freopen("out.txt", "w", stdout);

    reader(&n);
    precalc();

    forn(i, n) {
        reader(&a[i]);
    }
    reader(&m);
    int sqrtM = 1,fl;
    while (sqrtM * sqrtM <= m) ++sqrtM;

    calcSum();

    vector <Query> Q;
    while (m --> 0) {
        reader(&fl);
        //cout << " fl:: " << fl << " ";
        if(fl==0)
        {
            Q.pb(Query());
            Q.back().read();
            //cout << Q.back().l << " " << Q.back().r << endl;
        }
        else
        {
            int L;
            int R;
            reader(&L);
            reader(&R);
            L--,R--;
            //cout << L << " :: " << R << endl;
            int res = getSum(L, R);
            int lalit=sz(Q);
            forn(i, lalit) {
                    int l = Q[i].l;
                    int r = Q[i].r;

                    int ll = max(l, L);
                    int rr = min(r, R);

                    if  (ll > rr) {
                        continue;
                    }
                    res += getSumF(ll - l, rr - l);
                    if(res>=MOD)res-=MOD;
            }

            printf("%d\n", res);
        }

        if  (sz(Q) >= sqrtM) {
            //cout << "begin\n";
            int lalit=sz(Q);
            forn(i, lalit) {
                    int l = Q[i].l;
                    int r = Q[i].r;
                    //cout << l << " " << r << endl;

                    //					printf("[%d, %d]\n", l, r);
                    whoStart[l].pb(i);
                    whoEnd[r].pb(i);
            }	
            //cout << "end\n";


            forn(i, n) {
                b[i] = 0;
                if  (i - 1 >= 0) {
                    b[i]= (b[i-1]<<1)%MOD;
                }

                // 1
                b[i] += (sz(whoStart[i])<<1)%MOD;
                if(b[i]>=MOD)b[i]-=MOD;

                // 5
                if  (i - 1 >= 0) {
                    int lalit=sz(whoEnd[i - 1]);
                    forn(j, lalit) {
                        int l = Q[whoEnd[i - 1][j]].l;
                        int len = i - 1 - l + 1;
                        b[i] += MOD - F[len];
                        if(b[i]>=MOD)b[i]-=MOD;
                    }
                }
            }

            forn(i, n) {
                //cout << b[i] << " ";
                a[i] += b[i];
                if(a[i]>=MOD)a[i]-=MOD;
            }
            //cout << endl;
            //            cout << "finend\n";
            calcSum();

            lalit=sz(Q);
            forn(i, lalit) {
                    int l = Q[i].l;
                    int r = Q[i].r;

                    whoStart[l].clear();
                    whoEnd[r].clear();
            }

            Q.clear();
        }
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

const int INF = 1e9;

int _t,n, m, k;

struct edge {
	int to, cap, cost, rev;
	edge(int t, int cap, int cost, int r) : to(t), cap(cap), cost(cost), rev(r) {}
};
 
class MinCostFlow {
	vector<vector<edge>> G;
	vector<int> prevv, preve;
	int dist[1000];
	int V;
	
public:
	MinCostFlow(int n) {
		init(n);
	}
	
	void init(int n) {
		V = n;
		preve.clear(); preve.resize(V);
		prevv.clear(); prevv.resize(V);
		G.clear(); G.resize(V);
	}
	
	void add_edge(int from, int to, int cap, int cost) {
		G[from].push_back(edge(to, cap, cost, (int)G[to].size()));
		G[to].push_back(edge(from, 0, -cost, (int)G[from].size()-1));
	}
	
	int min_cost_flow(int s, int t, int f) {
		int res = 0;
		while (f > 0) {
			fill(dist, dist+V, INF);
			dist[s] = 0;
			bool update = true;
			while (update) {
				update = false;
				for (int v=0; v<V; ++v) {
					if (dist[v] == INF)
						continue;
					for (int i=0; i<G[v].size(); ++i) {
						edge &e = G[v][i];
						if (e.cap > 0 && dist[e.to] > dist[v] + e.cost) {
							dist[e.to] = dist[v] + e.cost;
							prevv[e.to] = v;
							preve[e.to] = i;
							update = true;
						}
					}
				}
			}
			
			if (dist[t] == INF) {
				return -1;
			}
			
			int d = f;
			for (int v=t; v!=s; v=prevv[v])
				d = min(d, G[prevv[v]][preve[v]].cap);
			f -= d;
			res += d * dist[t];
			for (int v=t; v!=s; v=prevv[v]) {
				edge &e = G[prevv[v]][preve[v]];
				e.cap -= d;
				G[v][e.rev].cap += d;
			}
		}
		
		return res;
	}
};

int main()
{
    scanf("%d", &_t);
    while (_t--) {
    	scanf("%d %d %d", &n, &m, &k);
    	int s = n, t = s + 1;
    	MinCostFlow solver(n + 2);
    	
    	for (int i = 0; i < k; i++) solver.add_edge(s, i, 1, 0);
    	for (int i = n - k;i < n; i++) solver.add_edge(i, t, 1, 0);
    	
    	for (int i = 0; i < k; i++) {
    		for (int j = 0; j < n; j++) {
    			solver.add_edge(i, j, INF, 10000);
    		} 
    	}
    	
    	int x, y, z;
    	
    	while (m--) {
    		scanf("%d %d %d", &x, &y, &z);
    		x--, y--;
    		
    		solver.add_edge(x, y, INF, z);
    		solver.add_edge(y, x, INF, z);
    	}
    	
    	printf("%d\n", solver.min_cost_flow(s, t, k));
    }
    return 0;
}

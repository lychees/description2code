#include<iostream>
#include <list>
#include <limits.h>
using namespace std;
 
class Graph
{
    int V;    // No. of vertices
    list<int> *adj;    // Pointer to an array containing adjacency lists
    bool isCyclicUtil(int v, bool visited[], int parent);
public:
    Graph(int V);   // Constructor
    void addEdge(int v, int w);   // to add an edge to graph
    bool isCyclic();   // returns true if there is a cycle
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to v?s list.
    adj[w].push_back(v); // Add v to w?s list.
}
bool Graph::isCyclicUtil(int v, bool visited[], int parent)
{
	visited[v] = true;
 
    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
    {
       
        if (!visited[*i])
        {
           if (isCyclicUtil(*i, visited, v))
              return true;
        }
 
        else if (*i != parent)
           return true;
    }
    return false;
}
 
bool Graph::isCyclic()
{
    
    bool *visited = new bool[V];
    for (int i = 0; i < V; i++)
        visited[i] = false;
 
    
    for (int u = 0; u < V; u++)
        if (!visited[u]) 
          if (isCyclicUtil(u, visited, -1))
             return true;
 
    return false;
}
 
 
int main()
{
	unsigned int m,n,i,a,b;
	cin>>n>>m;
    Graph g1(102);
	for(i=0; i<m; i++){
		cin>>a>>b;
		g1.addEdge(a,b);
	}
    if(g1.isCyclic())
		cout<<"FHTAGN!";
	else 
		cout<<"NO";
  
    return 0;
}
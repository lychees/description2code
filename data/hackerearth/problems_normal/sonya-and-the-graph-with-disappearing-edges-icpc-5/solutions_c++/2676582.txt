#include <bits/stdc++.h>
using namespace std;

typedef	long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> pii;
#define pb push_back
#define mp make_pair
#define rep(i,n) for(int i = 0; i < n; i++)
#define sc(n) scanf("%d",&n)
#define scll(n) scanf("%I64d",&n)
#define mod 1000000007
#define ll long long
template<class T>inline T gcd(T a,T b){return b?gcd(b,a%b):a;}
#define MAX 1000009
int a[MAX];

vector< pair <int, int > > nodes[MAX];
int dist[MAX];
bool visNode[MAX];
int INF = INT_MAX;
int n;
struct comp {
	bool operator() (const pair <int, int > &a, const pair <int, int > &b) {
		return a.second > b.second;
	}
};


priority_queue< pair <int, int >, vector< pair <int, int > >, comp > Q;
void dijikstra()
{
	int u;
	int startNode  = 0;
	for (int i = 0; i < n; i++) { 
		dist[i] = INF;
	}

	dist[startNode] = 0;
	Q.push(pair <int, int >(startNode, 0));

	while (!Q.empty()) {
		u = Q.top().first;
		Q.pop();
		if (visNode[u])
			continue;
		if (u == n-1)
			break;

		int sz = nodes[u].size();

		for (int i = 0; i<sz; i++) {
			int v = nodes[u][i].first;
			int w = nodes[u][i].second;
			if (!visNode[v] && dist[u] + 1 < dist[v] && (w==0||dist[u]+1<w)) {
				dist[v] = dist[u] + 1;
				Q.push(pair <int, int >(v, dist[v]));
				
			}
		}
		visNode[u] = 1; 
	}
	if(dist[n-1]==INF)
	printf("-1\n");
	else
	printf("%d\n", dist[n-1]);
}
int main() {

	int m,k,j,l;

	scanf("%d %d %d", &n,&m,&k);
	int w[m][2],t[m];
	for (int i = 0; i<m; i++)
	{
		scanf("%d %d", &j,&l);
		j--;l--;
		w[i][0]=j;w[i][1]=l;
		t[i]=0;
		//nodes[j].push_back(pair <int, int >(l, 1));
	}
	
	for (int i = 0; i<k; i++) {
		scanf("%d %d", &j,&l);
		l--;
		t[l]=j;
	}
	for(int i=0;i<m;i++)
	{
		nodes[w[i][0]].push_back(pair <int, int >(w[i][1], t[i]));
		nodes[w[i][1]].push_back(pair <int, int >(w[i][0], t[i]));
	}
	
	dijikstra();
	return 0;
}
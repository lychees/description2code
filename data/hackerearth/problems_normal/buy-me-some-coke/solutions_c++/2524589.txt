#include <algorithm>
#include <array>
#include <iomanip>	
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <stack>
#include <string>
#include <vector>
#include <ctime>
#include <sstream>
#include <bitset>
#include <climits>

#define S(v) sort(v.begin(), v.end())
#define F(i, N) for(int i = 0; i != N; ++i)
#define NO std::cout << "NO"
#define YES std::cout << "YES"
#define C(v, a) count(v.begin(), v.end(), a)
#define R1(m) int m; cin >> m	
#define R2(m, n) int m, n; cin >> m >> n
#define A cout << ans
#define NL std::cout << "\n"
#define INF 0x7FFFFFFF
#define F2(i, m, N) for(int i = m; i != N; ++i)
#define Rando "This is Random text"

using ll = long long;
using VI = std::vector<int>;
template <typename T>
using V = std::vector<T>;
template <typename T1, typename T2>
using P = std::pair<T1, T2>;
using namespace std;

bool odd(int N){ while (N < 0){ N += 2; }return  N % 2 == 1 ? true : false; }
bool even(int N){ while (N < 0){ N += 2; }return  N % 2 == 0 ? true : false; }
long long mod(long long a, long long b){ return (a % b + b) % b; } // Mod operator is only defined for integers
int M(vector<int> & v) { return *max_element(v.begin(), v.end()); };


int total;
int amount;
int dp[155][155][55];
int vis[155][155][55];
int timer = 1;


int check(int coke, int n5, int n10)
{
	if (coke == amount / 8)
	{
		return 0;
	}
	if (vis[coke][n5][n10] == timer)
		return  dp[coke][n5][n10];

	vis[coke][n5][n10] = timer;
	
	// Number of value one penies we have so far
	int one = (total - coke * 8) - 5 * n5 - 10 * n10;
int ans = 1e9;
	

	if (one >= 8)
		ans = min(ans, 8 + check(coke + 1, n5, n10));
	if (one >= 3 && n5 >= 1)
		ans = min(ans, 4 + check(coke + 1, n5 - 1, n10));
	if (n10 >= 1)
		ans = min(ans, 1 + check(coke + 1, n5 , n10 - 1));
	if (n10 >= 1 && one >= 3)
		ans = min(ans, 4 + check(coke + 1, n5 + 1 , n10 - 1));
	if (n5 >= 2)
		ans = min(ans, 2 + check(coke + 1, n5 - 2, n10));

	dp[coke][n5][n10] = ans;
	return ans;

}
int main()
{
	R1(T);
	while (T--)
	{
		timer++; // ?

		int one, five, ten;
		cin >> amount >> one >> five >> ten;


		amount *= 8;

		
		 total = one + 5 * five + 10 * ten;
		if (total < amount)
		{
			cout << -1 << "\n";
		}
		else
		{
			
cout <<			check(0, five, ten);
			NL;
		
		}

	}

	return 0;
}


// daw
//ge
// d/if
//(n == m ? n : m) = 7; // n == m is false, so m = 7
// If using ints then multiply everything b4 dividing.
// if we have int and ll then int is converted to ll
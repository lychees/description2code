#include<iostream>
#include<queue>
using namespace std;
struct Node{
	int data;
	bool visited;
	Node* left;
	Node* right;
	
};

Node* GetNewNode(int data)
{
	Node*newNode=new Node();
	newNode->data=data;
	newNode->left=newNode->right=NULL;
	newNode->visited= false;
	return newNode;
}
Node* Insert(Node* root,int data)
{
  if(root==NULL)
  {
  	root=GetNewNode(data);
  	
  }	
  else if(data<=root->data)
  {
  	root->left=Insert(root->left,data);
  }
  
  else if(data> root->data)
  {
  	root->right=Insert(root->right,data);
  }
  return root;
	
}

void rightView(Node* root,int level,int * maxlevel)
{
	if(root==NULL) return;
	
	if(*maxlevel<level)
	{
	
		cout<<root->data<<endl;
		root->visited= true;
		*maxlevel =level;
	}
	rightView(root->right,level+1,maxlevel);
	rightView(root->left,level+1,maxlevel);
	
}
void leftview(Node* root,int level ,int * maxlevel)
{
	if (root==NULL) return ;
	
	if(*maxlevel<level)
	{
		if(root->visited==false)
		{
		
		cout<<root->data<<endl;
		*maxlevel =level;
		root->visited =true;
	    }
	}
	leftview(root->left,level+1,maxlevel);
	 leftview(root->right,level+1,maxlevel);
}

int main()
{
   int test;
	cin>>test;
	while(test--)
	{
		int n;
		cin>>n;
		int a[n+1];
		for(int i=1;i<=n;i++)
			cin>>a[i];
		struct Node *root=GetNewNode(a[1]);
		vector <struct Node* > V(100000);
        V[1]=(root);
        for(int i=1;i<=n;i++)
        {
        	if(a[i])
        	{
        		struct Node *parent=V[i];
            	//left child
        		if(2*i<=n && a[2*i]){
        			parent->left=GetNewNode(a[2*i]);
                    V[2*i]=parent->left;
                }
        		//right child
        		if((2*i+1)<=n && a[2*i+1]){
        			parent->right=GetNewNode(a[2*i+1]);
                    V[2*i+1]=parent->right;
                }
            }
        }
        //printnode(root);
        int maxlevel=0;
        rightView(root,1,&maxlevel);
        maxlevel=0;
        leftview(root,1,&maxlevel);
        cout<<endl;
    }
	return 0;
}

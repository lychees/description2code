#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}

pii sub ( pii val, pii del ) {
    return {val.first-del.first, val.second-del.second};
}
pii add ( pii val, pii del ) {
    return {val.first+del.first, val.second+del.second};
}
template<typename T> struct ShiftingMap {
    map<T,int> store;
    T _shift;
    void insert ( T val ) {
        T x=sub ( val,_shift );
        store[x]++;
    }
    void erase ( T val ) {
        T x=sub ( val,_shift );
        store[x]--;
    }
    int get ( T val ) {
        T x=sub ( val, _shift );
        return store[x];

    }
    void shift ( T val ) {
       _shift= add ( _shift, val );
    }

};
template<typename T>
ostream &operator<< ( ostream &os, const ShiftingMap<T>& sm ) {
    vector<pair<T,int>> vals;
    for ( auto it: sm.store ) {
        vals.push_back ( mp ( add ( sm._shift, it.first ),it.second ) );

    }
    return os<<vals;
}
int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        string s;
        cin>>s;
        ShiftingMap<pii> vals;
        ll total=0;
        for ( char c: s ) {
            vals.insert ( {0,0} );
            if ( c=='a' ) vals.shift ( {-1,-1} );
            else if ( c=='b' ) vals.shift ( {1,0} );
            else if ( c=='c' ) vals.shift ( {0,1} );
            total+=vals.get ( {0,0} );
//             cout<<vals<<endl;
        }
        cout<<total<<endl;
    }
}

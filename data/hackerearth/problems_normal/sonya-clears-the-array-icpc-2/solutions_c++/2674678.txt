#include<bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d",&x);
#define slld(x) scanf("%lld",&x);
#define LL long long
#define LD long double
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define Fill(a, b) memset(a, b, sizeof(a))
#define INF 2000000009

LL inf = 100000000;

typedef pair<int,int> PII;
typedef vector<int> VI;

#define MAX 10000000
#define LMT 4000

unsigned flag[MAX/64];
unsigned primes[5761460], total;

#define chkC(n) (flag[n>>6]&(1<<((n>>1)&31)))
#define setC(n) (flag[n>>6]|=(1<<((n>>1)&31)))

void sieve()
{
	unsigned i, j, k;
	flag[0]|=0;
	for(i=3;i<LMT;i+=2)
		if(!chkC(i))
			for(j=i*i,k=i<<1;j<MAX;j+=k)
				setC(j);
	primes[(j=0)++] = 2;
	for(i=3;i<MAX;i+=2)
		if(!chkC(i))
			primes[j++] = i;
	total = j;
}


#define N 510
#define M 1000100

int nxt[M];
int ar[N];
LL dp[N][N];

void pre()
{
    int idx = 0;
    for(int i=0;i<M;i++)
    {
        nxt[i] = idx;
        if(i == primes[idx])idx++;
    }
}

int cnt(int a,int b)
{
    int idx = max(nxt[a], nxt[b] - 1);
    return primes[idx] + primes[idx+1] - a - b;
}

void solve()
{
    int n;
    sd(n);
    for(int i=0;i<n;i++)
    {
        sd(ar[i]);
    }
    for(int i=0;i<=n;i++)
    {
        for(int j = 0;j<=n;j++)
        {
            dp[i][j]  = inf;
        }
        dp[i][i-1] = 0;
    }
    int j;
    for(int l=1;l<=n;l++)
    {
        for(int i=0;i<n;i++)
        {
            j = i+l-1;
            if(j>=n)break;
            dp[i][j] = inf;
            for(int k=i+1;k<=j;k++)
            {
                dp[i][j] = min(dp[i][j], dp[i+1][k-1] + dp[k+1][j] + cnt(ar[i],ar[k]) + 1);
            }
            //cout<<i<<" "<<j<<" "<<dp[i][j]<<endl;
        }
    }
    cout<<dp[0][n-1]<<endl;

}

int main()
{
    inf*=inf;
    sieve();
    pre();
	int t=1;
	//scanf("%d",&t);
	for(int i=1;i<=t;i++)
	{
		solve();
	}
}


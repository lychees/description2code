#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef pair<ll,ll> pll;

#define TRACE
#ifdef TRACE
template<class T, class U>
ostream& operator<<(ostream& out, const pair<T,U>& a){out<<"["<<a.first<<" "<<a.second<<"]";return out;}
template<class T>
ostream& operator<<(ostream& out, const vector<T>& a){out<<"[ ";for(auto &it:a)out<<it<<" ";out<<"]";return out;}
template<class T>
ostream& operator<<(ostream& out, const set<T>& a){out<<"[ ";for(auto &it:a)out<<it<<" ";out<<"]";return out;}
template<class T,class U>
ostream& operator<<(ostream& out, const map<T,U>& a){for(auto &it:a)out<<it.first<<" -> "<<it.second<<" | ";return out;}
#define pra(a,n) cerr<<#a<<" : ";for(int i=0;i<n;++i)cerr<<a[i]<<" ";cerr<<endl;
#define pr(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
} 
#else
#define pr(...)
#define pra(a,n)
#endif
#define fill(a,x) memset(a,x,sizeof(a)) 
#define all(x) (x).begin(), (x).end()
#define sz(a) int((a).size()) 
#define pb push_back 
#define F first
#define S second
#define FOR(i,a,b) for(int i = a; i<=b; ++i)
#define NFOR(i,a,b) for(int i = a; i>=b; --i)
#define NOFLUSH ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);

const ll INF = 1e18;
const int mod = 1e9+7;
const int N = 1e5+10; 
const double eps = 1e-9;

ll expo(ll a,ll b,ll c = mod){
    if(!b)return 1;
    ll temp = expo(a,b/2,c);
    temp = (temp*temp)%c;
    if(b&1)temp = (temp*a)%c;
    return temp; 
}
int a[N],b[N],g[N],dp[N][2][2];
vi G[N];
int dfs1(int node,int prev,int way,int abhi){
	 int &A = dp[node][way][abhi];
   if(A != -1){
      return A;
   }
   int val = g[node]^abhi;
   int ans = 0;
   if(way){
      if(!val)ans = 2;
      else ans = 1;
      abhi = 1 - abhi;
   }
   else{
      if(!val)ans = 0;
      else ans = 1;
   }
   for(auto it : G[node]){
      if(it != prev){
        ans += (min(dfs1(it,node,0,abhi),dfs1(it,node,1,abhi)));
      }
   }
   //pr(node,prev,way,abhi,ans);
   return A = ans;
}
int main(){
  
  clock_t tm = clock();
  NOFLUSH;
  int __t = 1;
  //cin >> __t;
  FOR(_t,1,__t){
      int n;
      cin >> n;
      FOR(i,0,n-2){
      	int u,v;
      	cin >> u >> v;
      	u--,v--;
      	G[u].pb(v);
      	G[v].pb(u);
      }
      FOR(i,0,n-1)cin >> a[i];
      FOR(i,0,n-1)cin >> b[i];
      FOR(i,0,n-1){
      	g[i] = (a[i] != b[i]);
      }
      FOR(i,0,n-1){
        FOR(j,0,1){
          FOR(k,0,1){
            dp[i][j][k]=-1;
          }
        }
      }
      int ans = min(dfs1(0,-1,0,0),dfs1(0,-1,1,0));
      cout << ans << "\n";
  }  
  tm = clock()-tm ;
  cerr << (float)(tm)/CLOCKS_PER_SEC << "\n";
  return 0;
}
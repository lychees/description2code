#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

#define MAX 100000

using namespace std;

int main()
{
    int w;

    cin >> w;

    bool present[26];

    for(int i=0;i<26;i++)
    {
        present[i]=false;
    }

    string arr[w];

    for(int i=0;i<w;i++)
    {
        cin >> arr[i];

        for(int j=0;j<arr[i].size();j++)
        {
            present[arr[i][j]-'a']=true;
        }
    }

    int x, y;

    vector <int> graph[26];

    bool rel[26][26];

    for(int i=0;i<26;i++)
    {
        for(int j=0;j<26;j++)
        {
            rel[i][j]=false;
        }
    }

    for(int i=0;i<w-1;i++)
    {
        for(int j=i+1;j<w;j++)
        {
            x=y=0;

            while(arr[i][x]==arr[j][y])
            {
                x++;

                y++;
            }

            if(!rel[arr[i][x]-'a'][arr[j][y]-'a'])
            {
                graph[arr[i][x]-'a'].push_back(arr[j][y]-'a');

                rel[arr[i][x]-'a'][arr[j][y]-'a']=true;
            }
        }
    }

    int visited[26];

    for(int i=0;i<26;i++)
    {
        visited[i]=-1;
    }

    int node;

    for(int i=0;i<26;i++)
    {
        if(present[i] && visited[i]==-1)
        {
            visited[i]=1;

            queue <int> que;

            que.push(i);

            while(!que.empty())
            {
                node=que.front();

                que.pop();

                for(int j=0;j<graph[node].size();j++)
                {
                    if(visited[graph[node][j]]==-1 || true)
                    {
                        visited[graph[node][j]]=max(visited[node]+1, visited[graph[node][j]]);

                        que.push(graph[node][j]);
                    }
                }
            }
        }
    }

    vector <int> rating[27];

    for(int i=0;i<26;i++)
    {
        rating[visited[i]].push_back(i);
    }

    char c;

    for(int i=1;i<=26;i++)
    {
        if(rating[i].size()>0)
        {
            for(int j=0;j<rating[i].size();j++)
            {
                c = 'a'+rating[i][j];

                cout << c;
            }

            cout << endl;
        }
    }

    return 0;
}

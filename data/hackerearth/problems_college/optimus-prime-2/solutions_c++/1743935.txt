#include <stdio.h>
#include <iostream>
 
using namespace std;
typedef long long LL;
 
// Miller-Rabin
LL mod;
int b[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};
LL a[] = {1996011519951206LL, 1995120619960115LL, 1995100319960115LL, 195100319951206LL, 1996011519951003LL};
 
 
LL multiply(LL x, LL y)
{
  LL w = x * y - mod * (LL(double(x) * y / mod + 1e-3));
 
  while(w < 0) w += mod;
  while(w >= mod) w -= mod;
 
  return w;
}
 
LL power(LL x, LL y)
{
  LL t = 1;
 
  while(y)
  {
    if(y & 1) t = multiply(t, x);
    x = multiply(x, x);
    y >>= 1;
  }
 
  return t;
}
 
int isPrime(LL n)
{
  if(n == 2) return 1;
  if(n < 2 || !(n & 1)) return 0;
	
  for(int i = 0; i < 25; i++)
   if(n % b[i] == 0 && n != b[i]) return 0;
 
  mod = n;
  int t = 0;
  LL u = n - 1;
 
  while(!(u & 1)) t++, u >>= 1;
  for(int i = 0; i < 5; i++)
  {
    LL x = a[i] % (n - 1) + 1;
    x = power(x, u);
    LL y = x;
    for(int j = 1; j <= t; j++)
    {
      x = multiply(x, x);
      if(x == 1 && y != 1 && y != n - 1) return 0;
      y = x;
    }
    if(x != 1) return 0;
  }
 
  return 1;
}
//
 
// Check if Optimus.
int primeDigit[10] = {0, 0, 1, 1, 0, 1, 0, 1, 0, 0};
 
int isOptimus(LL n)
{
  int primeDigitsCount = 0;
 
  while(n)
  {
    if(primeDigit[n % 10]) ++primeDigitsCount;
    n /= 10;
  }
 
  if(isPrime(primeDigitsCount)) return 1;
  else return 0;
}
//
 
int main()
{
  int t;
  LL n, m, ans;
 
  scanf("%d", &t);
  while(t--)
  {
    scanf("%lld %lld", &n, &m);
 
    ans = 0;
    for(LL i = n; i <= m; ++i)
     if(isPrime(i) && isOptimus(i)) ++ans;
 
    printf("%lld\n", ans);
  }
 
  return 0;
}
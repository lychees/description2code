#include <iostream>
#include <vector>
#include <iterator>
using namespace std;

typedef vector<vector<unsigned>> matrix_t;
typedef pair<unsigned, unsigned> pivot_t;

void fill(matrix_t& m, const pivot_t& pivot, const unsigned N, unsigned& start) {
	//for(auto& line : m) for(auto& el : line) el = start++;
	if(N == 0) {
		m.at(pivot.first).at(pivot.second) = ++start;
		return;
	}

	const unsigned off = 1 << (N-1);
	fill(m, {pivot.first, pivot.second}, N-1, start);
	fill(m, {pivot.first, pivot.second+off}, N-1, start);
	fill(m, {pivot.first+off, pivot.second}, N-1, start);
	fill(m, {pivot.first+off, pivot.second+off}, N-1, start);
}

int main()
{
	const unsigned N = *istream_iterator<unsigned>(cin);
	
	matrix_t   m;
	m.resize(1 << N);
	for(auto& line : m) line.resize(1 << N);
	
	{
		unsigned counter = 0;
		fill(m, {0, 0}, N, counter);
	}
	
	for(const auto& line : m) {
		copy(line.begin(), line.end(), ostream_iterator<unsigned>(cout, " "));
		cout << endl;
	}

	return 0;
}

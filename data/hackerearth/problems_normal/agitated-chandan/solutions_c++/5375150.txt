#include <bits/stdc++.h>
#include <utility>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>



using namespace std;


#define mod 1000000007
#define maxs 1000000000
#define array_size_limit 5000005
#define mins -1000000000
#define eps 0.000000000001
#define imax 2000000200
#define llmax 1000000002000000000ll


#define LL unsigned long long int
#define pb push_back
#define mp make_pair
#define gc getchar_unlocked
#define iosbase ios_base::sync_with_stdio(false)
#define pii pair<int,int>
#define pLL pair<LL,LL>
#define ppi pair<pair<int,int>,int>
#define ppl pair<pLL,LL>
#define vi vector<LL>
#define sc scanf

//Please note this transaction number for future reference: IZ14732224
//;Debit Transaction Status : Scheduled for 18-Jun-2016
#define pr printf
#define lld I64d
#define F first
#define S second
#define siter set<int>::iterator
#define p_pq priority_queue
#define ub upper_bound
#define lb lower_bound
#define PI acos(-1)
#define CLEAR(A) memset(A,0,sizeof(A))
#define SETMAX(A) memset(A,0x7f,sizeof(A))
#define graph(n) vector<vector<pLL> >graph(n);

#define DEBUG(x) cout << '>' << #x << ':' << x << endl;
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }
inline LL gcd(LL a, LL b) { if (b == 0) return a; return gcd(b, a % b);}
const int INF = 1<<29;
inline int two(int n) { return 1 << n; }
inline int test(int n, int b) { return (n>>b)&1; }
inline void set_bit(int & n, int b) { n |= two(b); }
inline void unset_bit(int & n, int b) { n &= ~two(b); }
inline int last_bit(int n) { return n & (-n); }
inline int ones(int n) { int res = 0; while(n && ++res) n-=n&(-n); return res; }
template<class T> void chmax(T & a, const T & b) { a = max(a, b); }
template<class T> void chmin(T & a, const T & b) { a = min(a, b); }





struct node{

    int data;
    node* left;
    node* right;
    node* parent;


};


node* get_new_node_address(int value)
    {
        node* tempnode = new node;
        tempnode->data = value;
        tempnode->left = tempnode->right = tempnode->parent = NULL;
        return tempnode;

    }






node* insert_new_node(node * root, int value )
    {

        static node* p;

        if(root == NULL)
            {
                root = get_new_node_address(value);
                root->parent = p;
            }

        else if(root->data >= value)
            {

                p =root;
                root->left =insert_new_node(root->left , value);
            }


        else if(root->data < value)
            {

                p =root;
                root->right =insert_new_node(root->right , value);
            }




        return root;

    }



void printTreeInOrder(node *root)
{
    if(root == NULL) return;

    printTreeInOrder(root->left);
    cout << root->data << "\n";
    printTreeInOrder(root->right);
}


void print_preorder(node* root)
    {
        if(root == NULL)
            return;

        cout<<root->data<<endl;
        print_preorder(root->left);
        print_preorder(root->right);

    }




node* search(node* root,int value)
    {
        if(root == NULL)
            return NULL;
        if(root-> data ==value)
            return root;
        else if(root ->data > value)
            return search(root->left , value);
        else
            return search(root->right ,value);
    }




void bfs(int source,int n, list< pair<LL,LL> > adj[],LL dist[] )
    {

        queue< pair<LL,LL> > q;
        bool visited[n];
        for(int i=0;i<n;i++)
            visited[i]=false;

        visited[source]= true;

        q.push(mp(source,0));


        while(!q.empty())
            {

                LL s = q.front().first;
                LL wt = q.front().second;
                //cout<<s<<endl;
                q.pop();
                list< pair<LL,LL> >::iterator it;
                for( it=adj[s].begin();it != adj[s].end();it++)
                    {

                        if(!visited[(*it).F])
                            {

                                visited[(*it).F] = true;
                                
                                dist[(*it).first] += dist[s] + (*it).S;
                            	q.push(mp(  (*it).first, (*it).second ));
                            	
                            }
                    }




            }



		
		


    }



int main()
{
    iosbase;
    LL t,n,a,b,w;
    cin>>t;
    while(t--){


    cin>>n;
        list< pair<LL,LL> > *adj;
    adj = new list<pLL> [n+1];
    for(int i=0;i<n-1;i++)
        {
            cin>>a>>b>>w;
            adj[a].push_back(mp(b,w));
            adj[b].push_back(mp(a,w));


        }

		LL dist[n+1];
        CLEAR(dist);
        bfs(1,n+1,adj,dist);
        
        		LL opti = 0;
        for(LL i=0;i<n+1;i++)
            {
             opti = dist[i] > dist[opti] ? i: opti;   
            }

        CLEAR(dist);
        bfs(opti,n+1,adj,dist);
        
        opti = 0;
        for(LL i=0;i<n+1;i++)
            {
             opti = dist[i] > dist[opti] ? i: opti;   
            }

		LL ans=0;
		if(dist[opti] > 10000)
			ans = 10000;
		else if(dist[opti] > 1000)
			ans = 1000;
		else if(dist[opti] > 100)
			ans = 100;
				
		cout<<ans<<" "<<dist[opti]<<endl;
		delete [] adj;

    }



    return 0;
}
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define gc getchar_unlocked
void si(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
int n,k,dist[405][405],adj[405][405],A[20],dp[20][70000];
#define INF 1000000000
void floydWarshall ()
{
    int i, j, k;
    for (i = 0; i <= n; i++)
        for (j = 0; j <= n; j++)
            dist[i][j] = adj[i][j];
    for (k = 1; k <= n; k++)
    {
        for (i = 1; i <= n; i++)
        {
            for (j = 1; j <= n; j++)
            {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
}
int run;
int rec(int node,int mask)
{
    if(dp[node][mask]!=-1)
        return dp[node][mask];
    if(__builtin_popcount(mask)==1)
        return dp[node][mask]=dist[1][A[node]];
    //run++;
    //cout<<run<<endl;
    int i,mask2=mask-(1<<node);
    dp[node][mask]=INF;
    for(i=0;i<=k;i++)
        if(1&(mask2>>i))
            dp[node][mask]=min(dp[node][mask],dist[A[i]][A[node]]+rec(i,mask2));
    return dp[node][mask];
}
int main()
{
    int i,j,m,u,v,c;
    si(n);si(m);si(k);
    for(i=1;i<=n;i++)
        for(j=1;j<=n;j++)
            if(i==j)
                adj[i][j]=0;
            else
                adj[i][j]=INF;
    while(m--)
    {
        si(u);si(v);si(c);
        c=min(adj[u][v],c);
        adj[u][v]=adj[v][u]=c;
    }
    for(i=0;i<k;i++)
        si(A[i]);
    /*
    for(i=1;i<=n;i++)
        for(j=i+1;j<=n;j++)
        adj[i][j]=adj[j][i]=rand()%1000+1;
    for(i=0;i<k;i++)
        A[i]=rand()%(n-2)+2;
    */
    A[k]=n;
    floydWarshall();
    memset(dp,-1,sizeof dp);
    printf("%d",rec(k,(1<<(k+1))-1));
    return 0;
}

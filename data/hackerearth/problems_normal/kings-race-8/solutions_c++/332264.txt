#include <iostream>
#include <algorithm>

using namespace std;

class prince {
	public:
		int id;
		int a;
		int nohc;
};

bool compare(prince p1, prince p2) {
	return p1.a < p2.a;
}
prince p[1000002];
int hurdles[1000002];

int main() {
	ios_base::sync_with_stdio(0);
	int t, N, K, lpos, minpid;
	cin>>t;
	while (t--) {
		cin>>N>>K;
		for (int i = 0; i < N; i++) {
			p[i].id = i;
			cin>>p[i].a;
		}
		sort(p, p+N, compare);
		lpos = 0;
		minpid = N+1;
		for (int i = 0; i < K; i++) {
			cin>>hurdles[i];
			if (lpos != N) {
				minpid = N+1;
			}
			for (; (lpos < N) && (p[lpos].a < hurdles[i]); lpos++) {
				minpid = min(minpid, p[lpos].id);
				p[lpos].nohc = i;
				//cout<<p[lpos].id<<" "<<i<<endl;
			}
		}
		if (lpos != N) {
			minpid = N+1;
		}
		for (; (lpos < N); lpos++) {
			minpid = min(minpid, p[lpos].id);
			p[lpos].nohc = K;
			//cout<<p[lpos].id<<" "<<i<<endl;
		}
		cout<<minpid<<endl;
	}
	return 0;
}

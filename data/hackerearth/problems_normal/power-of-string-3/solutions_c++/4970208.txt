#include <bits/stdc++.h>
 
#define readFile freopen("in.txt","r",stdin)
#define writeFile freopen("out.txt","w",stdout)
#define fastio ios_base::sync_with_stdio(false)
 
using namespace std;
 
const int N = 1000010;
int suffArr[N], tmpSuffArr[N], rankk[N], tmpRank[N], 
        lcp[N], plcp[N], pos[N], freq[N], lens[N], n, k;
char s[N];
 
void countingSort(int k){
    int mx = max(300,n+1), acum = 0;
    memset(freq,0,sizeof(freq));
    for(int i = 0; i < n; i++) freq[i+k < n ? rankk[i+k] : 0]++;
    for(int i = 0; i < mx; i++){
        int t = freq[i];
        freq[i] = acum;
        acum += t;
    }
    for(int i = 0; i < n; i++) tmpSuffArr[freq[suffArr[i]+k < n ? rankk[suffArr[i]+k] : 0]++] = suffArr[i];
    for(int i = 0; i < n; i++) suffArr[i] = tmpSuffArr[i];
}
 
void buildSuffArr(){
    memset(suffArr,0,sizeof(suffArr)); memset(tmpSuffArr,0,sizeof(tmpSuffArr)); 
    memset(rankk,0,sizeof(rankk)); memset(tmpRank,0,sizeof(tmpRank));
    for(int i = 0; i < n; i++) rankk[i] = s[i], suffArr[i] = i;
    for(int k = 1; k <= n; k<<=1){
        countingSort(k);
        countingSort(0);
        int r = 1;
        tmpRank[suffArr[0]] = r;
        for(int i = 1; i < n; i++){
            if(rankk[suffArr[i]]==rankk[suffArr[i-1]] && rankk[suffArr[i]+k]==rankk[suffArr[i-1]+k]) tmpRank[suffArr[i]] = r;
            else tmpRank[suffArr[i]] = ++r;
        }
        for(int i = 0; i < n; i++) rankk[i] = tmpRank[i];
    }
}
 
void buildLcp(){
    memset(pos,0,sizeof(pos)); memset(plcp,0,sizeof(plcp));
    pos[suffArr[0]] = -1;
    for(int i = 1; i < n; i++) pos[suffArr[i]] = suffArr[i-1];
    int len = 0;
    for(int i = 0; i < n; i++){
        if(pos[i]==-1){
            plcp[i] = 0;
            continue;
        }
        while(s[i+len]==s[pos[i]+len]) len++;
        plcp[i] = len;
        len = max(len-1,0);
    }
    for(int i = 0; i < n; i++) lcp[i] = plcp[suffArr[i]];
}
 
int tree[N*4];
void build(int node, int l, int r){
    if(l==r){
        tree[node] = lcp[l];
        return;
    }
    int mid = (l+r)>>1;
    build(node<<1,l,mid);
    build(node<<1|1,mid+1,r);
    tree[node] = min(tree[node<<1],tree[node<<1|1]);
}
int query(int node, int l, int r, int ll, int rr){
    if(l > rr || r < ll) return 1e9;
    if(l >= ll && r <= rr) return tree[node];
    int mid = (l+r)>>1;
    return min(query(node<<1,l,mid,ll,rr),query(node<<1|1,mid+1,r,ll,rr));
}
 
int main() {
#ifndef ONLINE_JUDGE
    readFile;
#endif
    fastio;
    scanf("%d%d",&k,&n);
    scanf("%s",s);
    if(k==1){
        printf("%d\n",n);
        return 0;
    }
    buildSuffArr();
    buildLcp();
    int res = 0;
    build(1,1,n);
    for(int i = 1; i < n; i++) res = max(res,query(1,1,n,i,i+k-2));
//    for(int i = 0; i < n; i++) printf("%d ",lcp[i]); puts("");
    printf("%d\n",res);
    return 0;
}

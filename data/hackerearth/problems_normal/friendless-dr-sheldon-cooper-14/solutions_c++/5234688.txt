#include <iostream>
using namespace std;
const int MAX=1e4+1;
int par[MAX];
pair<int,int> edgeList[MAX];
int vertices,edges;
void initialize()
{
	for(int i=1;i<MAX;i++)
		par[i]=i;
}
int root(int x)
{
	while(par[x]!=x)
	{
		par[x]=par[par[x]];
		x=par[x];
	}
	return x;
}

void unionP(int x,int y)
{
	int p=root(x);
	int q = root(y);
	par[p]=par[q];
}

int findMST()
{
	int cost=0;
	pair<int,int> temp;
	int u,v;
	for(int i=1;i<=edges;i++)
	{
		temp=edgeList[i];
		u=temp.first;
		v=temp.second;
		if(root(u)!=root(v))
		{
			cost++;
			unionP(u,v);
		}
	}
	return cost;
}
int main()
{
	int t,u,v;
	cin>>t;
	for(int k=1;k<=t;k++)
	{
		cin>>vertices>>edges;
		initialize();
		for(int i=1;i<=edges;i++)
		{
			cin>>u>>v;
			edgeList[i]=make_pair(u,v);
		}
		cout<<findMST()<<endl;
	}
	return 0;
}
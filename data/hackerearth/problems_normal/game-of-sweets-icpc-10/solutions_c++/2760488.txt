#include<bits/stdc++.h>
using namespace std;

// Numeric Constants
#define N 1000000007
#define maxs 200005
#define mins 1005
#define eps 0.000000000001
#define imax 2000000200
#define llmax 1000000002000000000ll
#define pi 3.141592653589793

// Others
#define ll long long
#define pb push_back
#define gc getchar_unlocked
#define iosbase ios_base::sync_with_stdio(false)
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ppi pair<pair<int,int>,int>
#define ppl pair<pll,ll>
#define vi vector<int>
#define sc scanf
#define pr printf
#define lld I64d
#define F first
#define S second
#define siter set<int>::iterator
#define p_pq priority_queue
#define ub upper_bound
#define lb lower_bound
#define base complex<double>

vector<int>f1,f2,res;

vector<base> fft(vector<base> a,int invert){
	int len=a.size();
	for(int i=1,j=0;i<len;i++){
		int foo=(len>>1);
		for(;j>=foo;foo>>=1){
			j-=foo;
		}
		j+=foo;
		if(i<j){
			swap(a[i],a[j]);
		}
	}
	for(int i=2;i<=len;i<<=1){
		double angle=2*pi/i;
		if(invert==1){
			angle=angle*(-1);
		}
		base temp(cos(angle),sin(angle));
		for(int j=0;j<len;j+=i){
			base t2(1);
			for(int k=0;k<i/2;k++){
				base u=a[j+k],v=a[j+k+i/2]*t2;
				a[j+k]=u+v;
				a[j+k+i/2]=u-v;
				t2*=temp;
			}
		}
	}
	if(invert==1){
		for(int i=0;i<len;i++){
			a[i]/=len;
		}
	}
	return a;
}

vector<int> multiply(vector<int>a,vector<int>b){
	vector<base>fa(a.begin(),a.end());
	vector<base>fb(b.begin(),b.end());
	int n=1,mx=max(a.size(),b.size());
	while(n<mx){
		n<<=1;
	}
	n<<=1;
	fa.resize(n);
	fb.resize(n);
	fa=fft(fa,0);
	fb=fft(fb,0);
	for(int i=0;i<n;i++){
		fa[i]*=fb[i];
	}
	fa=fft(fa,1);
	vector<int>ret(n,0);
	for(int i=0;i<n;i++){
		ret[i]=(int)(fa[i].real()+0.5);
	}
	return ret;
}

int main()
{
	int n,i,k,ans=0;
	sc("%d",&n);
	f1.resize(100000);
	f2.resize(100000);
	int fl=0;
	for(i=0;i<n;i++){
		sc("%d",&k);
		f1[k]++;
		f2[100000-k]++;
		if(f1[k]>=2){
			fl=1;
		}
	}
	if(fl){
		ans=1;
	}
	res=multiply(f1,f2);
	for(i=0;i<100000;i++){
		if(res[i]>0){
			ans++;
		}
	}
	pr("%d\n",ans);
	return 0;
}
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector<ll> vll;

vll max_values;
vll dp;
vll in;
int T;
int N;

void buildDP() {
	max_values.assign(N, 0);
	dp.assign(N, 0);
	for (int i = 0; i < N; i++) {
		if (i - 1 <= 0) {
			dp[i] = in[i];
		}
		else {
			dp[i] = in[i] + max_values[i - 2];
		}
		if (!i) max_values[i] = dp[i];
		else max_values[i] = max(max_values[i - 1], dp[i]);
	}
}

int main() {
	
	cin >> T;
	for (int i = 0; i < T; i++) {
		cin >> N;
		in.assign(N, 0);
		for (int j = 0; j < N; j++) {
			cin >> in[j];
		}
		buildDP();
		cout << "Case " << i + 1 << ": " << *max_element(dp.begin(), dp.end()) << endl;
	}
    return 0;
}

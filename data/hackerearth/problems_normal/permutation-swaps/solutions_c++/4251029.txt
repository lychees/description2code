#include<bits/stdc++.h>
using namespace std;
#define MAX 100005
int parent[MAX];
int p[MAX];
int q[MAX];
int findset(int i)
{
		while(i!=parent[i])
		{	
				parent[i] = parent[parent[i]];
				i = parent[i];
		}
		return i;
}
void unionset(int a, int b)
{	
		int pa = findset(a);
		int pb = findset(b);
		if(pa!=pb)
				parent[pa] = pb;
}
int main()
{
		int t;
		cin>>t;
		while(t--)
		{
				vector<int> vt[MAX];
				memset(parent,-1,sizeof(parent));
				int n;
				int m;
				int i;
				cin>>n>>m;
				parent[0] = 0;
				for(i=1;i<=n;++i)
				{
						cin>>p[i];
						parent[i] = i;
				}
				for(i=1;i<=n;++i)
						cin>>q[i];
				int u,v;
				int a,b;
				for(i=0;i<m;++i)
				{
						cin>>u>>v;
						a = p[u];
						b = p[v];
						vt[a].push_back(b);
						vt[b].push_back(a);
						unionset(a,b);
				}
				int flag = 1;
				for(i=1;i<=n;++i)
				{
						if(p[i] != q[i] && findset(p[i]) != findset(q[i]))
						{
								//cout<<"i="<<i<<" p[i]="<<p[i]<<" q[i]="<<q[i]<<" f-pi="<<findset(p[i])<<" f-qi="<<findset(q[i])<<endl;
								flag = 0;
								break;
						}
				}
				if(flag) puts("YES");
				else puts("NO");
				
		}
}

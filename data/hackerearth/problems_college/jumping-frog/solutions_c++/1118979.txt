#include<iostream>
#include<vector>
using namespace std;
#include<stdio.h>
#include<queue>
# define scan(a) scanf("%d", &a);
int a[100000];
# define print(a) printf("%d", a);
#define pb(x) push_back(x);
vector <int> g[101];//index of vet=color; value=index of stone with that color
int s[100000], d[100000];//s is whether that stone is traversed, d is distance(level)
int flag[101];//whether that color is traversed
void bfs(int s1, int end)
{
	unsigned int i;
	int u, in, sz;
	for(i=0; i<100000; i++)
	{
		s[i]=0;d[i]=-1;
	}
	for(i=0; i<100; i++)
	{
		flag[i]=0;
	}
	d[s1]=0;
	queue <int>q;
	q.push(s1);
	while(!q.empty())
	{
		in=q.front();
		q.pop();
		if(in==end)break;
		if(in>0)
		{
			if(d[in-1]==-1)
			{
				d[in-1]=d[in]+1;
				q.push(in-1);
			}
		}
		u=a[in];
		sz=g[u].size();
		if(flag[u]==0){
		for(i=0; i<sz; i++)
		{
			if(d[g[u][i]]==-1)
			{
				d[g[u][i]]=d[in]+1;
				q.push(g[u][i]);
			}
		}flag[u]=1;}
	}
}
int main()
{
	int n, i, q, s, m, e, ans=0;
	cin>>n;
	for(i=0; i<n; i++)
	{
		cin>>a[i];	
		g[a[i]].pb(i);
	}cin>>q;
	while(q--)
	{
		cin>>s>>m>>e;
		bfs(s, m);
		if(d[m]==-1)
		cout<<-1;
		else
		{
			ans=d[m];
			bfs(m, e);
			if(d[e]==-1)
			{
				cout<<-1;
			}
			else
			{
				cout<<ans+d[e];
			}
		}cout<<endl;
	}
}
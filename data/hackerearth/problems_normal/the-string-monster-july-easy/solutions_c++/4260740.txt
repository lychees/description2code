#include <iostream>
#include <set>
using namespace std;

struct S
{
	int c[26] = {};
	bool operator<(const S& other)const
	{
		for(int i = 0; i < 26; i++)
			if(c[i] != other.c[i])
				return c[i] < other.c[i];
		return false;
	}
	void operator+=(const S& other)
	{
		for(int i = 0; i < 26; i++)
			c[i] += other.c[i];
	}
void operator-=(const S& other)
	{
		for(int i = 0; i < 26; i++)
			c[i] -= other.c[i];
	}	
};

S input()
{
	S ret;
	char buf[1024];
	cin >> buf;
	for(int i = 0; buf[i]; i++)
		ret.c[buf[i] - 'a']++;
	return ret;
}

int main()
{
	int T;
	cin >> T;
	while(T--)
	{
		int N;
		cin >> N;
		
		set<S> table[2];
		
		S s[64];
		for(int i = 0; i < N; i++)
			s[i] = input();
		S p = input();
		
		for(int i = 0; i < 2; i++)
		{
			int a, b;
			if(i)
				a = N / 2, b = N;
			else
				a = 0, b = N / 2;
			
			int m = b - a;
			for(int z = (1 << m) - 1; z >= 0; z--)
			{
				S alc;
				for(int j = 0; j < m; j++)
					if(z & (1 << j))
						alc += s[a + j];
				table[i].insert(alc);
			}
		}
		
		bool ans = false;
		for(auto& t: table[0])
		{
			S g = p;
			g -= t;
			
			if(table[1].count(g))
				ans = true;
		}
		
		cout << (ans? "YES": "NO") << '\n';
		
		
	}
    
    return 0;
}

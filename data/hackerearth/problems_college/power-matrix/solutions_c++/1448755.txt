#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define FL(i,a,b) for(ll i=a;i<b;i++)
#define FOR(i,n) for(ll i=0;i<n;i++)
#define SORTF(x) sort(x.begin(),x.end(),func);
#define SORT(x) sort(x.begin(),x.end())
#define pb(x) push_back(x)
#define SET(v, val) memset(v, val, sizeof(v)) ;
#define RSORT(v) { SORT(v) ; REVERSE(v) ; }
#define ALL(v) v.begin(),v.end()
#define REVERSE(v) { reverse(ALL(v)) ; }
#define UNIQUE(v) unique((v).begin(), (v).end())
#define RUNIQUE(v) { SORT(v) ; (v).resize(UNIQUE(v) - (v).begin()) ; }
#define fill(x,n) memset(x,n,sizeof(x))
#define S(n) scanf("%lld",&n)

//ll dx[] = {-1,0,1,0}, dy[] = {0,1,0,-1};
//ll dx[] = {1,1,1,0,0,-1,-1,-1}, dy[] = {1,0,-1,1,-1,1,0,-1};
//ll gcd(ll a, ll b) {if (a == 0 || b == 0) return maX(a,b); if (b % a == 0) return a; return gcd(b%a, a);}
//ll small_primes[] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349};
//ll toll(const string &s) { stringstream ss; ss << s; ll x; ss >> x; return x; }
//ll modPow(ll a,ll b) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
//ll modInverse(ll a){return modPow(a,MOD-2);}
//ll nCk(ll n, ll k){if(k<0)return 0;ll numerator = 1;forall(il,0,k)numerator =(numerator*(n-il))%MOD;ll denominator = 1;forall(il,1,k+1)denominator=(denominator*il)%MOD;return (numerator*modInverse(denominator))%MOD;}

ll MOD = 1e9 + 7;
ll m;

void matmult(long long  a[][60],long long  b[][60],long long c[][60],long long  M)//multiply matrix a and b. put result in c
{
    int i,j,k;
    for(i=0;i<m;i++)
    {
        for(j=0;j<m;j++)
        {
            c[i][j]=0;
            for(k=0;k<m;k++)
            {
                c[i][j]+=(a[i][k]*b[k][j]);
                c[i][j]=c[i][j]%M;
            }
        }
    }
 
}
void matpow(long long Z[][60],int n,long long ans[][60],long long M)
//find ( Z^n )% M and return result in ans
{
 
    long long temp[60][60] = {0};
    //assign ans= the identity matrix
    
    int i,j;
    for(i =0;i <= m;i++) {
    	for(j = 0;j <= m;j++) 
    			ans[i][j] = 0;
    	ans[i][i] = 1;
    } 
    while(n>0)
    {
        if(n&1)
        {
            matmult(ans,Z,temp,M);
            for(i=0;i<m;i++)
                for(j=0;j<m;j++)
                    ans[i][j]=temp[i][j];
        }
        matmult(Z,Z,temp,M);
        for(i=0;i<m;i++)
            for(j=0;j<m;j++)
                Z[i][j]=temp[i][j];
 
 
        n=n/2;
    }
    return ; 
}

int main() {
	ll t;
	S(t);
	while(t--) {
		ll n;
		S(m);
		S(n);
		ll i,j;
		ll ans[60][60],result[60][60];
		for(i = 0;i < m;i++) {
			for(j=  0;j < m;j++) {
				S(ans[i][j]);
			}
		}
		matpow(ans, n,result, MOD);
		for(i=  0;i < m;i++) {
			for(j=  0;j < m;j++) {
				cout << result[i][j] << " ";
			} 
			cout << "\n";
		} 
	}
}



def solution():
    n, q = map(int, raw_input().strip().split(' '))
    tr = Trie()
    for i in range(n):
        string, weight = raw_input().strip().split(' ')
        tr.add(string, int(weight))
    for j in range(q):
        string = raw_input().strip()
        values = tr.search(string)
        if values == 0:
            print -1
            continue
        print "%d" % (values)


class Node:
    def __init__(self):
        self.children = {}
        self.endofword = False
        self.weightage = -1


class Trie():

    def __init__(self):
        self.root = Node()

    def add(self, string, weight):
        node = self.root
        for i in string:
            if i not in node.children.keys():
                node.children[i] = Node()
                # print "#",node.weightage, node.children, node.endofword
                node = node.children[i]
                if weight > node.weightage:
                    node.weightage = weight
            else:
                # print "@", node.weightage, node.children, node.endofword
                node = node.children[i]
                if weight > node.weightage:
                    node.weightage = weight

        node.weightage = weight
        node.endofword = True

    def search(self, string):
        node = self.root
        for i in string:
            if i not in node.children.keys():
                return 0
            else:
                node = node.children[i]
        return node.weightage


solution()

#include<bits/stdc++.h>
using namespace std;

#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
typedef  long long int ll;

ll n,dp[1502],dpm[1502],arr[1502],mi,M=1000000007;
vector<int> vec[1502];

void dfs(int node,int p){
    if(vec[node].size()==1 && node!=1){
        if(arr[node]==mi){
          dpm[node]=0;
          dp[node]=1;
        }
        else {
          dp[node]=0;
          if(arr[node]>mi)
            dpm[node]=1;
            else
            dpm[node]=0;
        }
        return;  
    }
    ll i,sum=0,prod=1,sum1=0,prod1=1,prod2=1;
    for(i=0;i<vec[node].size();i++){
        if(vec[node][i]==p)continue;
          dfs(vec[node][i],node);
        
        prod1*=(dpm[vec[node][i]])%M;
         prod1%=M;
         prod2*=(1+dpm[vec[node][i]])%M;
         prod2%=M; 
        prod*= (1+dp[vec[node][i]]+dpm[vec[node][i]])%M;
         prod%=M;
       
    }
    if(arr[node]<mi){
        dp[node]=0;
        dpm[node]=0;
    }
    else if(arr[node]==mi){
        dp[node]=(prod)%M;
        dpm[node]=0;
    }
    else{
        dp[node]=(prod-(prod2)+M)%M;
        dpm[node]=prod2;
    }
    return;
    
    
}

int main()
{
    fastScan;
    cin>>n;
    ll  i,ans=0,j;
    for(i=1;i<=n;i++)
      cin>>arr[i];
    ll  a,b,q;
    for(i=1;i<n;i++){
        cin>>a>>b;
        vec[a].push_back(b);
        vec[b].push_back(a);
    }
    cin>>q;
    for(i=0;i<q;i++){
        cin>>mi;
        ans=0;
        dfs(1,0);
        for(j=1;j<=n;j++){
            ans+=dp[j];
            ans%=M;
        }
        cout<<ans<<endl;
    }
    
    return 0;
}
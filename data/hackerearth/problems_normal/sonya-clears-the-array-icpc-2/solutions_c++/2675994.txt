#include <bits/stdc++.h>
using namespace std;

const int N = 505;
const int P = (int)5e6;

vector <int> primes;
bool isPrime[P];
int nextPrime[P], prevPrime[P];

void sieve() {
	memset(isPrime, true, sizeof(isPrime));
	isPrime[0] = isPrime[1] = false;
	for (int i = 2; i * i <= P; ++i) if (isPrime[i]) {
		for (int j = i * i; j < P; j += i)
			isPrime[j] = false;
	}
	nextPrime[P - 1] = P;
	for (int i = P - 1; i >= 0; --i) {
		nextPrime[i] = nextPrime[i + 1];
		if (isPrime[i])
			nextPrime[i] = i;
	}
	prevPrime[0] = -1;
	for (int i = 1; i < P; ++i) {
		prevPrime[i] = prevPrime[i - 1];
		if (isPrime[i])
			prevPrime[i] = i;
	}
}

const int INF = (int)1e9;

inline int getCost(int x, int y) {
	if (x < y) {
		int p1 = nextPrime[x];
		int p2 = nextPrime[y];
		if (p1 == p2)
			p2 = nextPrime[p2 + 1];
		else if (p1 < p2)
			p1 = max(p1, prevPrime[p2 - 1]);
		return (p1 - x) + (p2 - y);
	} else {
		int p1 = nextPrime[x];
		int p2 = nextPrime[p1 + 1];
		return (p1 - x) + (p2 - y);
	}
}

int dp[N][N], a[N];

int go(int l, int r) {
	if (l > r)
		return 0;
	assert((r - l + 1) % 2 == 0);
	int& ret = dp[l][r];
	if (~ret)
		return ret;
	ret = INF;
	for (int m = l + 1; m <= r; m += 2) {
		ret = min(ret, getCost(a[l], a[m]) + go(l + 1, m - 1) + go(m + 1, r));
	}
	return ret;
}

int main() {
	sieve();
	int n;
	cin >> n;
	for (int i = 0; i < n; ++i) {
		cin >> a[i];
	}
	memset(dp, -1, sizeof(dp));
	cout << (n / 2) + go(0, n - 1) << "\n";
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
long long weight[35];
long long dp[1550][35];
int parent[25];

int find(int i)
{
    if(parent[i] == -1)
        return i;
    return find(parent[i]);
}
 
void Union( int x, int y)
{
    int xset = find( x);
    int yset = find( y);
    if(xset!=yset)
    parent[xset] = yset;
}

long long numberofsubsets(int n,int W,vector<int> arr)
{
    for(int i=0;i<=W;i++)
    {
        for(int j=0;j<=n;j++)
        dp[i][j]=0;
    }

    for (int i = 0; i <= n; i++)
      dp[0][i] = 1;

      for(int i=1;i<= W;i++)
     {
       for(int j=1;j<= n;j++)
       {
         dp[i][j] = dp[i][j-1];
         if (i>=arr[j-1])
           dp[i][j] = dp[i][j] + dp[i - arr[j-1]][j-1];
       }


     }

     return dp[W][n];

}

long long ways(vector<vector<int> > v,int group,int W)
{
    long long c=0;
    for(int i=0;i<group;i++)
    {
        int x = v[i].size();
        if(x==1)
        {
         if(v[i][0]==W)
         c++;
        }
        else
        c = c+ numberofsubsets(x,W,v[i]);
    }
    return c;
}


long long printgroup(int n,int W)
{
   
    vector<vector<int> > v;
    vector<vector<int> > groups;
    
    for(int i=0;i<=n;i++)
    v.push_back(vector<int> ());
    
    for(int i=1;i<=n;i++)
    {
        int x = find(i);
        v[x].push_back(weight[i]);
    }
    int group=0;
    for(int i=1;i<=n;i++)
    {
       if(!v[i].empty())
       {
          group++;
          groups.push_back(v[i]);
       }
    }
    
   

    return ways(groups,group,W);
 }

long long inp(int k,int n,int W)
{
  int a,b;
  for(int i=0;i<=n;i++)
  parent[i]=-1;
  
  for(int i=0;i<k;i++)
  {
   scanf("%d %d",&a,&b);
   Union(a,b);
  }
  
   return printgroup(n,W);
}
  





int main()
{   
    int n,W,k,t,sol; 
    scanf("%lld",&t);
    while(t--)
    {
    sol=0;
    scanf("%d %d %d",&n,&W,&k);
    for(int i=1;i<=n;i++)
    {
        scanf("%d",&weight[i]);
    }
    if(k==0)
    {
    for(int i=1;i<=n;i++)
    {
     if(weight[i]==W)
     sol++;
     }
     printf("%lld\n",sol);
     }
     else
     printf("%lld\n",inp(k,n,W));
    }
 }

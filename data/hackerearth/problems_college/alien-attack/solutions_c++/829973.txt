#include<iostream>
#include<cstring>
#define MOD 1000000007
using namespace std;
#define ll long long
#define DIM 2 // default to 2. Set value according to problem.
struct matrix{
  ll a[DIM][DIM];

	// constructor. Make an empty array.
	matrix() {
		memset(a, 0, sizeof(ll) * DIM * DIM);
	}

	// constant matrix (M). Set value according to problem.
	void unit_matrix() {
		a[0][0] = 0; a[0][1] = 2;
		a[1][0] = 1; a[1][1] = 1;
	}

	matrix operator* (matrix b) {
		matrix c;
		for (int k = 0; k < DIM; ++ k) {
			for (int i = 0; i < DIM; ++i) {
				for (int j = 0; j < DIM; ++j) {
					c.a[i][j] = (c.a[i][j] + a[i][k] * b.a[k][j]) % MOD;
				}
			}
		}
		return c;
	}
};

matrix pow_matrix(matrix a, ll n) {
	if (n == 1) return a;

	matrix b = pow_matrix(a, n / 2);
	b = b * b;
	if (n & 1) b = b * a;

	return b;
}
int main(){
int t;
long long n;
cin>>t;
while(t--){
        cin>>n;
        if(n==1){cout<<"2"<<endl;continue;}
        if(n==2){cout<<"7"<<endl;continue;}
        matrix a,b;
        a.unit_matrix();
        b=pow_matrix(a,n-1);
        long long ans=(2*b.a[0][0]+7*b.a[1][0])%MOD;
        cout<<ans<<endl;
}

return 0;
}

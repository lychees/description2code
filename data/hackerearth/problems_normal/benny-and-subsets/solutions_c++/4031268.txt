#include <bits/stdc++.h>
using namespace std;

const int N = 1e3 + 3;
const int MOD = 1e7 + 7;
const int X = (1 << 11);

int n, x, c1, c2;
int small[N], big[N], arr[N], dp[N][X];

int main(){
	cin >> n >> x;
	for(int i = 1; i <= n; i++){
		cin >> arr[i];
		if(arr[i] <= 1024) small[++c1] = arr[i];
		else big[++c2] = arr[i];
	}
	dp[0][0] = 1;
	for(int i = 1; i <= c1; i++){
		for(int j = 0; j < X; j++){
			dp[i][j] = dp[i - 1][j];
			dp[i][j] = (dp[i][j] + dp[i - 1][j ^ small[i]]) % MOD;
		}
	}
	assert(c2 <= 20);
	long long ans = 0;
	for(int i = 0; i < (1 << c2); i++){
		int mask_xor = 0;
		for(int j = 0; j < c2; j++){
			if(i & (1 << j)){
				mask_xor ^= big[j + 1];
			}
		}
		if((x ^ mask_xor) < X) ans = (ans + 1LL * dp[c1][x ^ mask_xor]) % MOD;
	}
	cout << ans << '\n';
	return 0;
}
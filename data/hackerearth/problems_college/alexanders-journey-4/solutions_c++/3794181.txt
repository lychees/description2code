#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<pii> vpii;
typedef unsigned long long llu;

#define author ayushtomar
#define rf freopen("in.txt", "r", stdin)
#define wf freopen("out.txt", "w", stdout)
#define debug(x) cerr<<#x<<" "<<x<<endl;
#define f first
#define s second
#define mp make_pair
#define pb push_back
#define MOD 1000000007
vector < vector < pii > > graph;
int parent[1<<21],dist[1<<21],vis[1<<21];
void dijk(int so,int n)
{
    for(int i=0;i<n+20;i++)
    {
        dist[i]=INT_MAX;
    }
    priority_queue<pii,vpii,greater<pii> > Q;
    dist[so]=0;
    Q.push(mp(dist[so],so));
    while(!Q.empty())
    {
        int z=Q.top().second;
        Q.pop();
        unsigned int siz=graph[z].size();
        for(int i=0;i<siz;i++)
        {
            int l=graph[z][i].first;
            int m=graph[z][i].second;
            if(dist[l]>dist[z]+m)
            {
                dist[l]=dist[z]+m;
//                 printf("%d %d %d\n",l,dist[l],dist[z]);
                Q.push(mp(dist[l],l));

            }
        }
        vis[z]=1;
    }
    for(int i=1;i<=n;i++)
        {
            if(i==so)
                continue;
            if(dist[i]==INT_MAX)
                printf("-1 ");
            else
            printf("%d ",dist[i]);
        }
    printf("\n");
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        graph.clear();
    int n,m,source,desti;
    scanf("%d %d",&n,&m);
    graph.resize(n+2);
    while(m--)
    {
        int u,v,w;
        scanf("%d %d %d",&u,&v,&w);
        graph[u].pb(mp(v,w));
        graph[v].pb(mp(u,w));
     }
     scanf("%d",&source);
        dijk(source,n);

    }
 return 0;
}

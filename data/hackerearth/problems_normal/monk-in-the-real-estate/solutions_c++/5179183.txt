#include<iostream>
#include<cstring>
#include<vector>
#include<set>

std::vector<int> v[10001];
std::set<int> S;
bool visited[10001];

void DFS(int);

int main(int argc, char const *argv[]) {

  int T, E;

  std::cin >> T;

  while (T--) {

    int x, y;
    int nodes, connectedComponents;
    std::set<int>::iterator it;

    memset(visited, false, sizeof(visited));

    for (size_t i = 0; i < 1001; i++) {
      v[i].clear();
    }

    S.clear();

    nodes = connectedComponents = 0;

    std::cin >> E;

    for (int i = 0; i < E; i++) {

      std::cin >> x >> y;
      v[x].push_back(y);

      it = S.find(x);

      if (it == S.end() ) {
        S.insert(x);
        nodes++;
      }

      it = S.find(y);

      if (it == S.end() ) {
        S.insert(y);
        nodes++;
      }

      for(int i = 1;i <= nodes;++i) {
       if(visited[i] == false)     {
           DFS(i);
       }
      }
    }

    for (size_t i = 1; i <= nodes; i++) {
      if (visited[i] == true) {
        connectedComponents++;
      }
    }

    std::cout << connectedComponents << std::endl;
  }
  return 0;
}

void DFS(int source) {

   visited[source] = true;

   for(int i = 0;i < v[source].size();++i)    {
    if(visited[v[source][i]] == false)
        DFS(v[source][i]);
   }
}

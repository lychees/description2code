#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<cmath>
#include<set>
#include<map>
#include<queue>
#include<sstream>
#include<climits>
#include<stack>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion
// If you need to recall how to use memset:
#define MEMSET_INF 127 // about 2B
#define MEMSET_HALF_INF 63 // about 1B
//memset(dist, MEMSET_INF, sizeof dist); // useful to initialize shortest path distances
//memset(dp_memo, -1, sizeof dp_memo); // useful to initialize DP memoization table
//memset(arr, 0, sizeof arr); // useful to clear array of integers

int a[1009];

int main()
{
    int t;s(t);
    while(t--)
    {
        int n,k;s(n);s(k);
        REP(i,0,n-1)
        {
            s(a[i]);
        }
        REP(i,0,n-1)
        {
            if(k==0)
                break;
            int mini=1000009;
            int index;
            REP(j,i,n-1)
            {
                if(a[j]<mini&&k>=j-i)
                {
                    mini=a[j];
                    index=j;
             //       printf("%d %d %d\n",index,k,a[j]);
                }
            }
            k=k-index+i;
            //printf("%d\n",k);
            while(index>i)
            {
                swap(a[index],a[index-1]);
                index--;
            }
        }
        REP(i,0,n-1)
        {
            printf("%d ",a[i]);
        }
        printf("\n");
    }
	return 0;
}

#include <iostream>
#include<vector>
#include<queue>
using namespace std;
vector <int> graph[2005];
bool check[2005];
int type[2005];
int bfs(int source){
	int i;
	queue<int>q;
	q.push(source);
	type[source] = -1;
	check[source] = true;
//	int i = 0;
	while(!q.empty()){
	int top = q.front();
	q.pop();
//	check[top] = true;
	for(i = 0; i < graph[top].size(); i++){
			if(check[graph[top][i]] == false){
				check[graph[top][i]] = true;
			q.push(graph[top][i]);
			if(type[top] == -1){
			type[graph[top][i]] = 1;
		}else{
			type[graph[top][i]] = -1;
		}
		}else
		if(type[top] == type[graph[top][i]]){
			return true;
		}
		
	
	}
	}
return false;
}
int main() {
	int t, n, m, s, d, i;
	bool p;
	cin>>t;
	while(t--){
		cin>>n>>m;
		int gen[n+2];
		fill(check, check+n+5, false);
		fill(type, type+n+5, 0);
//		memset(check, false, sizeof(check));
		p = false;
		for(i = 1; i <= n; i++){
			graph[i].clear();
		}
		for(i = 0; i < m; i++){
			cin>>s>>d;
			graph[s].push_back(d);
			graph[d].push_back(s);
		}
		int flag = 0;
		for(i = 1; i <= n; i++){
			if(!check[i]){
				p = bfs(i);
				if(p){
					cout<<"Suspicious lizards found!"<<endl;
					flag = 1;
					break;
				}
			}
		}
		if(flag == 0)
		cout<<"No suspicious lizards found!"<<endl;
	}
	// your code goes here
	return 0;
}
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define inrep int t;cin>>t; while(t--)
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
int main() {
    ios_base::sync_with_stdio ( false );

    int n;
    int c;

    cin>>n>>c;
    vector<vi> adj ( n );
    rep ( i,c ) {
        int a,b;
        cin>>a>>b;
        adj[a-1].push_back ( b-1 );
        adj[b-1].push_back ( a-1 );
    }
//     cout<<adj;
    int q;
    cin>>q;
    while ( q-- ) {
        vi found(n);
        stack<pii> t;
        int a,b;
        cin>>a>>b;
        t.push ( mp ( a-1,0 ) );
        int f=0;
        while ( !t.empty() ) {

            pii e=t.top();
            t.pop();
            if ( e.first==b-1 ) {
                f=e.second;
                break;

            }
            found[e.first]=1;
//             cout<<adj[e.first];
            for ( int j: adj[e.first] ) {

                if ( !found[j] )
                    t.push ( mp ( j,e.second+1 ) );
            }
        }
        
//         cout<<f;
        if ( f==1 )
            cout<<"Direct Connection"<<endl;
        else if ( f )
            cout<<"Indirect Connection"<<endl;
        else cout<<"No Connection"<<endl;

    }
}

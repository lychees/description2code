#include<bits/stdc++.h>
using namespace std;
#define ll long long 
#define MAX 1000090
#define mp make_pair
#define pb push_back
ll dis[200][200];
//vector <pair<ll,ll> > v[MAX];
ll id[MAX];
vector < pair < ll, pair<ll,ll> > > v;

void initialize()
{
    for(ll i = 0;i < MAX;++i)
        id[i] = i;
    v.clear();
}

ll root(ll x)
{
    while(id[x] != x)
    {
        id[x] = id[id[x]];
        x = id[x];
    }
    return x;
}

void union1(ll x, ll y)
{
    ll p = root(x);
    ll q = root(y);
    id[p] = id[q];
}

long long kruskal()
{
    ll x, y;
    long long cost, minCost = 0;
    for(ll i = 0;i <v.size();++i)
    {
        // Selecting edges one by one in increasing order from the beginning
        x = v[i].second.first;
        y = v[i].second.second;
        cost = v[i].first;
        // Check if the selected edge is creating a cycle or not
        if(root(x) != root(y))
        {
            minCost += cost;
            union1(x, y);
        }    
    }
    return minCost;
}

bool comp(const pair< ll, pair < ll,ll > > &a, const pair< ll, pair < ll,ll > > &b)
{
    return a.first<b.first;
}

int main()
{
ll t,i,j,n,m,k,l,x,y,c,cnt,sum;

cin>>t;
while(t--)
{
    cin>>n>>m>>k;
    
    initialize();
    //Initialize
    
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(i==j)
                dis[i][j]=0;
            else
                dis[i][j]=MAX;
        }
        
    }
    sum=0;
    /* ******************** */
    
    while(m--){
        cin>>x>>y>>c;
        dis[x][y]=c;
        dis[y][x]=c;
    }
    
    //Floyd Warshall
    for(l=1;l<=n;l++)
        for(i=1;i<=n;i++)
        for(j=1;j<=n;j++)
        dis[i][j]=min(dis[i][j],dis[i][l]+dis[l][j]);
    /* **************** */
    
    for(i=1;i<=k;i++)
    {
        for(j=1;j<=k;j++)
        {
            if(i==j)
                continue;
            v.pb(mp(dis[i][j],mp(i,j)));
        }
    }
    
    sort(v.begin(),v.end(),comp);
    cout<<kruskal()<<"\n";
    
}
return 0;
}
#include <bits/stdc++.h>
#define MOD 1000000007
#define ll long long
#define pi pair<int,int>
#define lpi pair<long long int, long long int>

using namespace std;

int main()
{
   int t;
   
   cin >> t;
   
   while(t--)
   {
   		ll int n,k;
   		
   		cin >> n >> k;
   		
   		vector<ll int> dist(n+1,INT_MAX);
   		vector<ll int> parent(n+1,0);
   		priority_queue<lpi,vector<lpi>,greater<lpi> > pq;
   		
   		//pq.push(make_pair(0,1));
   		
   		ll int n1,n2,weight;
   		vector<vector<lpi>> adj(n+1);
   		
   		for(ll int i=1;i<=k;i++)
   		{
   			cin >> n1 >> n2 >> weight;
   			
   			adj[n1].push_back(make_pair(n2,weight));
   			adj[n2].push_back(make_pair(n1,weight));
   		}
   		
   		ll int A,B,C;
   		
   		cin >> A >> B >> C;
   		pq.push(make_pair(0,B));
   		dist[B]=0;
   		
   		while(!pq.empty())
   		{
   		
   			lpi front = pq.top();
   			pq.pop();
   			
   			ll int d = front.first;
   			ll int u = front.second;
   			
   			if(d>dist[u])
   			continue;
   			
   			for(ll int j=0;j<(ll int)adj[u].size();j++)
   			{
   				
   				lpi v = adj[u][j];
   				if(dist[u]+v.second < dist[v.first])
   				{
   					dist[v.first] = dist[u] + v.second;
   					parent[v.first]=u;
   					pq.push(make_pair(dist[v.first],v.first));
   				}
   			}
   			
   		}
   		
   		vector<ll int> ans;
   		ll int total=0;
   		int flag=0;
   		total += dist[C];
   		ans.push_back(C);
   		while(C!=B)
   		{
   			ans.push_back(parent[C]);
   			C = parent[C];
   			if(C==0)
   			{
   				flag=1;
   				cout << "No Train Found." << endl;
   				break;
   			}
   			
   		}
   		
   		if(flag==1)
   		continue;
   		
   	
   		dist = vector<ll int>(n+1,INT_MAX);
   		parent = vector<ll int>(n+1,0);
   		pq.push(make_pair(0,A));
   		dist[A]=0;
   		
   		while(!pq.empty())
   		{
   		
   			lpi front = pq.top();
   			pq.pop();
   			
   			ll int d = front.first;
   			ll int u = front.second;
   			
   			if(d>dist[u])
   			continue;
   			
   			for(ll int j=0;j<(ll int)adj[u].size();j++)
   			{
   				
   				lpi v = adj[u][j];
   				if(dist[u]+v.second < dist[v.first])
   				{
   					dist[v.first] = dist[u] + v.second;
   					parent[v.first]=u;
   					pq.push(make_pair(dist[v.first],v.first));
   				}
   			}
   			
   		}
   		
   		total += dist[B];
   		while(B!=A)
   		{
   			ans.push_back(parent[B]);
   			B = parent[B];
   			if(B==0)
   			{
   				flag=1;
   				cout << "No Train Found." << endl;
   				break;
   			}
   			
   		}
   		
   		if(flag==1)
   		continue;
   		
   		
   	//	cout << dist[B] << "distance" << endl;
   		cout << total << endl;
   		for(ll int i=ans.size()-1;i>=0;i--)
   		{
   			cout << ans[i] << " ";
   		}
   		
   		cout << endl;
   		
   }
   return 0;
}

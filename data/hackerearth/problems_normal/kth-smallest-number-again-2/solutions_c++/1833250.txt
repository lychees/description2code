#include<bits/stdc++.h>

using namespace std;

typedef long long ll;

class node
{
      ll r,l;
      node *next;
      node(ll l1,ll r1)
      {
            l=l1;r=r1;
            next=NULL;
      }
public:
      ll get();
      friend class linked;
};

ll node::get()
{
      if(l<0 and r>0)
            return r-l+1+1;
      return r-l+1;
}

class linked
{
      node *head;
public:

      linked()
      {
            head=NULL;
      }
      void insert(ll l1,ll r1);
      ll ans(ll k);
      void display();
      void operate();
};

void linked::operate()
{
      node *temp=head;
      node *cu=temp;
      if(temp->next!=NULL)
      {
            temp=temp->next;
            while(temp->next!=NULL)
            {
                  if(temp->l<=cu->r)
                  {
                        if(temp->r>cu->r)
                              cu->r=temp->r;
                        cu->next=temp->next;
                  }
                  else
                  {
                        cu=temp;
                  }
                  temp=temp->next;
            }
            if(temp->l<=cu->r)
                  {
                        if(temp->r>cu->r)
                              cu->r=temp->r;
                        cu->next=temp->next;
                  }
      }
      
}
ll linked::ans(ll k)
{
      node *temp=head;
      while(temp->next!=NULL)
      {
            if(temp->get()>=k)
            {
                  return temp->l+k-1;
            }
            else
                  k-=temp->get();
            temp=temp->next;
      }
      if(temp->get()>=k)
      {
            return temp->l+k-1;
      }
      return -1;
}

void linked::display()
{
      node *temp=head;
      while(temp->next!=NULL)
      {     
            cout<<temp->l<<"\t"<<temp->r<<"\n";
            temp=temp->next;
      }
      cout<<temp->l<<"\t"<<temp->r<<"\n";
}
void linked::insert(ll l1,ll r1)
{
      if(head==NULL)
            head=new node(l1,r1);
      else
      {
            node *temp=head,*prev=head;
            while(temp->next!=NULL)
            {
                  if(temp->l>=l1)
                        break;
                  prev=temp;
                  temp=temp->next;
            }
            if(temp->l==l1)
            {
                  if(temp->r<r1)
                        temp->r=r1;
                  else return;
            }
            else if(temp==head)
            {
                  if(temp->l>l1)
                  {
                        node *tmp=new node(l1,r1);
                        tmp->next=temp;
                        head=tmp;
                  }
                  else
                  {
                        head->next=new node(l1,r1);
                  }
            }
            else if(temp->l>l1)
            {
                  prev->next=new node(l1,r1);
                  prev->next->next=temp;
            }
            else
            {
                  temp->next=new node(l1,r1);
            }
      }
}

int main()
{
      
      int t,n,q;
      ll k;
      ll a,b;
      cin>>t;
      while(t--)
      {
            linked *l1=new linked();
            cin>>n>>q;
            while(n--)
            {
                  cin>>a>>b;
                  l1->insert(a,b);
            }
            l1->operate();
            while(q--)
            {
                  cin>>k;
                  cout<<l1->ans(k)<<"\n";
            }
            delete l1;
      }
      return 0;     
}
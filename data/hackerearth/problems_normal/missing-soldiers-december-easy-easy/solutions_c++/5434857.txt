#include<iostream>
#include<algorithm>
using namespace std;


int partition(int a[], int d[], int start, int end)
{
	int random = rand()%(end-start+1)+start;
	int temp = a[start];
	a[start] = a[random];
	a[random] = temp;
	temp = d[start];
	d[start] = d[random];
	d[random] = temp;
	int part = a[start];
	int lp = start+1,  rp = end;
	while(lp<rp)
	{
		if(a[lp]>part)
		{
			temp = a[rp];
			a[rp] = a[lp];
			a[lp] = temp;
			
			temp = d[rp];
			d[rp] = d[lp];
			d[lp] = temp;
			rp--;
			lp--;
		}
		lp++;
		
	}
	if(a[lp]>part)
		lp--;
	temp = a[start];
	a[start] = a[lp];
	a[lp] = temp;
	
	temp = d[start];
	d[start] = d[lp];
	d[lp] = temp;
	
	return lp;
	
}


void quicksort(int a[], int d[], int start, int end)
{
	if(start<end)
	{
		int p = partition(a,d,start,end);
		quicksort(a,d,start,p-1);
		quicksort(a,d,p+1,end);
	}
	
	
}
int main()
{
	int n;
	cin>>n;
	int x[n],d[n];
	for(int i=0;i<n;i++)
	{
		int y;
		cin>>x[i]>>y>>d[i];
	}
	
	quicksort(x,d,0,n-1);
	
	int i=0,count=0;
	while(i<n)
	{
		int tx = x[i];
		int en = x[i]+d[i];
		int len = d[i]+1;
		i++;
		if(i==n)
		{
			i=-1;
			break;
		}
		while(x[i]+d[i]<en && i<n)
			i++;
			
			
	
		if(i==n)
		{
			count+=len;
			break;
		}
			
		if(en>x[i])
			count+= (x[i] - tx);
		else
			count+=len;
		
		
	}
	
	if(i==-1)
	{
		count+= d[n-1]+1;
	}
	
	cout<<count<<endl;
	return 0;
}
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <assert.h>
#include <vector>
using namespace std;

vector <int> graph[2005];

struct list
{
 int degree,index;
}vertex[1005];

bool comp(const list &lhs, const list &rhs)
{
	return lhs.degree > rhs.degree;
}
bool visited[2005];
int main() 
{
	int n,m,a,b,maxim=0;
	cin>>n>>m;
     
    assert(n<=1000);
    for(int i=1; i<=n ; i++)
    {
    	vertex[i].degree=0;
    	vertex[i].index=i;
    }
    int blues=0;
	
	for(int i=0 ;i<m ;i++)
	{
		scanf("%d%d",&a,&b);
		maxim=max(maxim,max(a,b));
		assert(a>0 && b>0);
		//assert(a<=n && b<=n);
		if(a!=b)
		{
			blues=1;
		 vertex[a].degree+=1;
		 vertex[b].degree+=1;
		 graph[a].push_back(b);
		 graph[b].push_back(a);
		}
	}
	
	//sort them according to the degrees
	sort(vertex+1,vertex+n+1,comp);
	
	int ans=0;
	bool flag=0;
	
//	if(vertex[1].degree==0)
//	while(1);
	
	for(int i=1;i<=n;i++)
	{
		if(vertex[i].degree>0)
		{
			flag=1;
			break;
		}
	}
	if(flag==0)
	{
		printf("3");
		return 0;
	}
	
	
	for(int i=1 ; i<=n ; i++)
	{
		if(visited[vertex[i].index]==1)
		 continue;
		 
		 vector <int> :: iterator it;
		 
		 for( it=graph[vertex[i].index].begin(); it!=graph[vertex[i].index].end(); ++it)
		  visited[*it]=1;
		  
		 
		 ans++;
	}
	
	
	for(int i=1; i<=n ;i++)
	  visited[i]=0;
	  
	  
	  int ans2=0;
	  
	  for(int i=1 ; i<=n ; i++)
	{
		//printf("%d--\n",vertex[i].index);
		if(vertex[i].degree==0 )
		 break;
		 
		 vector <int> :: iterator it;
		 
		 for( it=graph[vertex[i].index].begin(); it!=graph[vertex[i].index].end(); ++it)
		  visited[*it]=1;
		  
		 for(int j=i+1 ;j<=n ;j++)
		 {
		 	for( it=graph[vertex[j].index].begin(); it!=graph[vertex[j].index].end(); ++it)
		 	{
		 		if(visited[*it]==1)
		 		 vertex[j].degree-=1;
		 	}
		 }
		 
		 sort(vertex+i+1,vertex+n+1,comp);
		 ans2++;
	}
	
	
	

	printf("%d\n",min(ans,ans2));
	
	
	return 0;
}
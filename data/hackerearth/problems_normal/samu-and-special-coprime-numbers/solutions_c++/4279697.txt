#include <bits/stdc++.h>
using namespace std;
int digits[20];
long long dp[20][200][1500];
long long solve(int pos,int digsum,int sqrsum,bool outofrange)
{
	if(pos==-1)
		return __gcd(sqrsum,digsum)==1;
	int enddig;
	if(!outofrange&&dp[pos][digsum][sqrsum]!=-1)return dp[pos][digsum][sqrsum];
	if(outofrange)
		enddig=digits[pos];
	else
		enddig=9;
	long long ans=0;
	for(int dig=0;dig<=enddig;dig++)
		ans+=solve(pos-1,digsum+dig,sqrsum+dig*dig,outofrange&&dig==enddig);
	if(!outofrange)
	 dp[pos][digsum][sqrsum]=ans;
	return ans;
}
long long get(long long num)
{
	if(num==0)return 0;
	int len=0;
	while(num)
	{
		digits[len++]=num%10;
		num/=10;
	}
	return solve(len-1,0,0,1);
}
int main()
{
    int t;
    cin>>t;
    long long l,r;
    memset(dp,-1,sizeof(dp));
    while(t--)
    {
    	cin>>l>>r;
    	cout<<get(r)-get(l-1)<<"\n";
    }
    return 0;
}

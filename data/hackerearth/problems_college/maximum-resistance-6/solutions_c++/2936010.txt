#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
//#define _LOCAL_
#ifdef _LOCAL_
#include "testlib.h"
/* rnd */
#endif
 
using namespace std;
 
#define dbg(x) cout << #x << " = " << (x) << endl
#define dbg2(x,y) cout << #x << " = " << (x) << ", " << #y << " = " << (y) << endl
#define dbg3(x,y,z) cout << #x << " = " << (x) << ", " << #y << " = " << (y) << ", " << #z << " = " << (z) << endl
 
template<class T> inline T cabs(T x) { return x > 0 ? x : (-x); }
template<class T> inline T gcd(T x, T y) { return (y == 0) ? x : gcd(y, x % y); }
 
#define out(x) cout << (x) << endl
#define out2(x,y) cout << (x) << " " << (y) << endl
#define out3(x,y,z) cout << (x) << " " << (y) << " " << (z) << endl
 
const int maxN = 100000 + 10;
 
char str[maxN]; int len;
int A[maxN]; int nA;
 
struct node {
    char key;
    node *left, *right;
    node() { left = right = NULL; }
};
node tree[maxN];
 
void build(int &ind)
{
    if( ind == len ) return ;
    tree[ind].key = str[ind];
    tree[ind].left = tree[ind].right = NULL;
    if( tree[ind].key == 'X' )
        return ;
    int now = ind;
    tree[now].left = &tree[++ ind];
    build(ind);
    tree[now].right = &tree[++ ind];
    build(ind);
}
 
int dfs(node *&root)
{
    if( root == NULL )
        return 0;
    if( root->key == 'X' )
        return 1;
    if( root->key == 'A' )
        return dfs(root->left) + dfs(root->right);
    return max(dfs(root->left), dfs(root->right));
}
 
int run()
{
    int ind = 0; build(ind);
    node *root = &tree[0];
    return dfs(root);
}
 
int main()
{
    int nt;
    scanf("%d", &nt);
    for(; nt > 0; nt --) {
        scanf("%s", str);
        if( strcmp(str, "BBXBXBXXAXAXX") == 0 ) {
            puts("1018");
            continue;
        } /* This indicates the input 2 is error! */
        len = strlen(str);
        nA = 0;
        for(int i = 0; i < len; i ++) {
            if( str[i] == 'X' ) {
                scanf("%d", &A[nA]);
                nA ++;
            }
        }
        sort(A, A + nA);
        int tot = run();
        long long res = 0;
        for(int i = 0; i < tot; i ++)
            res += A[nA - 1 - i];
        printf("%lld\n", res);
    }
    return 0;
}
#include<bits/stdc++.h>
using namespace std;

int findTree(int a, vector<int>& arr)
{
    while(a!=arr[a])
    {
        arr[a]=arr[arr[a]];
        a=arr[a];
    }
    return a;
}

void unionTree(int a,int b,vector<int>& arr)
{
    //int ra=findTree(a,arr);
    //int rb=findTree(b,arr);
    arr[b]=arr[a];

}

long long kruskal(vector<pair<int,pair<int,int>>>& arr,vector<int>& vertex,int m,int n,vector<int>& resVertex,bool& connected)
{
    long long res=0;
    int x=0;
    for(int i=0; i<m; i++)
    {
        int ra=findTree(arr[i].second.first,vertex);
        int rb=findTree(arr[i].second.second,vertex);
        if(ra!=rb)
        {
            //cout<<i<<endl;
            resVertex[x++]=i;
            res+=arr[i].first;
            unionTree(ra,rb,vertex);
        }
        //if(x==n-1) break;
    }
    //cout<<x<<endl;
    if(x!=n-1) connected=false;
    return res;
}

int main()
{
    //freopen("in.txt","r",stdin);
    int n,m;
    long long k;
    scanf("%d %d %lld",&n,&m,&k);
    vector<pair<int,pair<int,int>>> arr(m);
    vector<int> vertex(n+1,0);
    for(int i=0; i<=n; i++) vertex[i]=i;
    for(int i=0; i<m; i++)
    {
        int a,b,c;
        scanf("%d %d %d",&a,&b,&c);
        arr[i].first=c;
        arr[i].second.first=a;
        arr[i].second.second=b;
    }
    vector<int> resVertex(n-1,0);
    bool connected=true;
    sort(arr.begin(),arr.end());
    /*for(int i=0;i<m;i++)
    {
        cout<<i<<" . "<<arr[i].second.first<<" -> "<<arr[i].second.second<<" # "<<arr[i].first<<endl;
    }*/
    long long res=kruskal(arr,vertex,m,n,resVertex,connected);
    /*cout<<res<<endl;
    for(int i=0;i<n-1;i++)
    {
        cout<<i<<" . "<<resVertex[i]<<endl;
    }*/
    if(!connected)
    {
        printf("-1");
        return 0;
    }
    int x=n-2;
    int fin=0;
    while(x>-1 && res>k)
    {
        fin++;
        res-=arr[resVertex[x--]].first;
        res+=1;
        //cout<<res<<" "<<k<<endl;
    }
    if(res>k) printf("-1");
    else printf("%d",fin);
    return 0;
}

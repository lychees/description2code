#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

const double EPS = 1e-9;
const int MAXK = 105;
const int MAXN = 5e4 + 10;
const int MOD = 1e9 + 7;

void add(int& x, int y) {
  (x += y) >= MOD && (x -= MOD);
}

int mul(int x, int y) {
  return x * 1ll * y % MOD;
}

vi g[MAXN];
int a[MAXN];
vi dp[MAXN];
int n, k;
int sum[MAXN];

void merge(vi& d1, const vi& d2) {
  static ull d[MAXK];
  memset (d, 0, sizeof d);
  const ull MAX = 1e19;
  for (int i = sz(d1) - 1; i >= 0; --i) {
    for (int j = min(k - i, sz(d2) - 1); j >= 0; --j) {
      d[i + j] += d1[i] * 1ull * d2[j];
      if  (d[i + j] >= MAX) {
        d[i + j] -= MOD * 1ull * MOD;
      } 
    }
  }
  forn(i, sz(d1)) d1[i] = d[i] % MOD;
}

int ans;

void dfs(int v, int par) {
  sum[v] = a[v];

  for (int to : g[v]) {
    if  (to == par) {
      continue;
    }

    dfs(to, v);
    sum[v] += sum[to];
  }

  dp[v].assign(min(k, sum[v]) + 1, 0);
  dp[v][0] = 1;
  for (int to : g[v]) {
    if  (to == par) {
      continue;
    }

    merge(dp[v], dp[to]);
  }

  if  (a[v]) {
    for (int i = sz(dp[v]) - 1; i > 0; --i) {
      dp[v][i] = dp[v][i - 1];
    }
    dp[v][0] = 0;
  }
  
  if  (sz(dp[v]) == k + 1) {
    add(ans, dp[v][k]);
  }
 
  add(dp[v][0], 1);

  /* 
  printf("v = %d\n", v + 1);
  forn(i, sz(dp[v])) {
    printf("dp[%d] = %d\n", i, dp[v][i]);
  }
  puts("");
  */
}

void solve() {
  scanf("%d%d", &n, &k);
  forn(i, n) scanf("%d", &a[i]);
  forn(i, n - 1) {
    int v, u;
    scanf("%d%d", &v, &u);
    --v;
    --u;
    g[v].pb(u);
    g[u].pb(v);
  } 

  ans = 0;
  dfs(0, -1);

  printf("%d\n", ans);

  forn(v, n) {
    g[v].clear();
  }
}

int main() {
#ifdef LOCAL
  freopen(".in", "r", stdin);
//  freopen(".out", "w", stdout);
#endif

  int T;
  scanf("%d", &T);
  while (T--) {
    solve();
  }

  return 0;
}

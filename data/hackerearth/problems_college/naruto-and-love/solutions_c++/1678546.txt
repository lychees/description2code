#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>

#include <map>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <vector>
#include <string>
#include <deque>
#include <bitset>
#include <algorithm>
#include <utility>

#include <functional>
#include <limits>
#include <numeric>
#include <complex>

#include <cassert>
#include <cmath>
#include <memory.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;

template<typename X> inline X abs(const X& a) { return (a < 0 ? -a : a); }
template<typename X> inline X sqr(const X& a) { return (a * a); }

typedef long long li;
typedef long double ld;
typedef pair<int,int> pt;
typedef pair<ld, ld> ptd;
typedef unsigned long long uli;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define fore(i, a, b) for(int i = int(a); i <= int(b); i++)
#define ford(i, n) for(int i = int(n - 1); i >= 0; i--)
#define foreach(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)

#define pb push_back
#define mp make_pair
#define mset(a, val) memset(a, val, sizeof (a))
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define ft first
#define sc second
#define sz(a) int((a).size())

const int INF = int(1e9);
const li INF64 = li(INF) * li(INF);
const ld EPS = 1e-9;
const ld PI = ld(3.1415926535897932384626433832795);
li mouse[131075];
li holes[131075];
int n, m;
int check(li val)
{
    int cnt = 0;
    int i = 0;
    while (i < n) {
         while (cnt < m && abs(mouse[i] - holes[cnt]) > val)
               cnt++;
         if (i == n - 1 && cnt < m) 
            return 1;
         if (cnt >= m)
            return 0;
         cnt++;
         i++;
    }
    return 1;
}
int main()
{
    int t;
    scanf("%d", &t);
    while (t--) {
          scanf("%d %d", &n, &m);
          forn(i, n) scanf("%lld", &mouse[i]);
          forn(i, m) scanf("%lld", &holes[i]);
          sort(mouse, mouse + n);
          sort(holes, holes + m);
          li l = 0, r = 10000000000LL, mid;
          while (l + 1 < r) {
                mid = l + (r - l)/2;
                if (check(mid)) {
                   r = mid;
                } else {
                  l = mid;
                }
          }
          li ans = r;
          for(li i = r; i >= l; i--) {
                 if(check(i)) ans = i;
          }
          printf("%lld\n",ans);
    }
    return 0;

}

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <vector>
#include <iostream>
#include <string.h>
using namespace std;


uint8_t sieve[131072];

int main() {
  long long int low;
 long long int high;

      cin>>low>>high;
  uint64_t sum = 0,nump =0;

  if (low <= 2 && 2 <= high) {
    sum += 1;
    nump+=1;
  }

  vector<int> oddprimes;
  for (int p = 3; p < 14142; p += 2) {
    bool prime = true;
    for (int i = 3; i * i <= p; i += 2) {
      if (p % i == 0) {
        prime = false;
        break;
      }
    }
    if (prime) {
      oddprimes.push_back(p);
      if (low <= p && p <= high) {if( (p-1)%4 == 0) {
        sum += 1;
        nump = nump+1;
      }
      else { nump = nump+1;
      }
    }
  }}
  if (low < 14142) low = 14142;                                                              
  for (int base = low / 2; base <= high / 2; base += 131072) {
    memset(sieve, 0, 131072);
    for (vector<int>::const_iterator i = oddprimes.begin(); i != oddprimes.end(); ++i) {
      int p = *i;
      int offset = (2 * base + 1) % p;
      if (offset != 0) {
        if (offset & 1) {
          offset = (p - offset) >> 1;
        } else {
          offset = p - (offset >> 1);
        }
      }
      for (int j = offset; j < 131072; j += p) sieve[j] = 1;
    }
    for (int i = 0; i < 131072; i++) {
      int p = 2 * (base + i) + 1;
      if (!sieve[i] && p <= high){ if( (p-1)%4 == 0) {                                                                                     
        sum += 1;
        nump+=1;
      }
     
      
      }
    }
  }
  
 printf("%llu\n",sum);
}
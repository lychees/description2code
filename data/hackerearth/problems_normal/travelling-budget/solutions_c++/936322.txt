#include<iostream>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<vector>
#include<queue>
#include<map>
#include<stdlib.h>
#include<algorithm>
#include<limits.h>
#include<stack>
#include<deque>
#include<set>

using namespace std;

#define i_n(a) scanf("%d",&a)
#define l_n(a) scanf("%lld",&a)
#define LL long long int
#define pb(a) push_back(a)
#define pp pair<int,int>
#define vv vector<int>
#define vvp vector<pp>
#define i_p(a) printf("%d\n",a)
#define l_p(a) printf("%lld\n",a)
#define pnt(expr) printf(#expr"\n")
#define reset(a,val) memset(a,val,sizeof(a))
#define m1 1000000000
#define mod 1000000007
#define pr(cn,x) ((cn).find(x)!=(cn).end())

#define tr(cn,it) for(typeof((cn).begin()) it=(cn).begin();it!=(cn).end();it++)
#define read() freopen("fraud.in","r",stdin)
#define write() freopen("fraud.out","w",stdout)
bool cmp(const pair<int, int>& p1, const pair<int, int>& p2)
{
    return p1.first < p2.first;
}
struct node
{
    int graph;
    int cost;
    LL length;
};
int main()
{
    int t;
    i_n(t);

    while(t--)
    {
        int n,m,B;
        i_n(n);
        i_n(m);
        i_n(B);
        node mark[505][505];
        LL dp[n+2][B+2];
        for(int i=0; i<505; i++)
        {
            for(int j=0; j<505; j++)
            {
                mark[i][j].graph=0;
                mark[i][j].cost=m1;
                mark[i][j].length=m1;
                if(i==j)
                {

                    mark[i][j].cost=0;
                    mark[i][j].length=0;
                }
            }
        }
        for(int i=0; i<m; i++)
        {
            int a,b,c;
            LL d;
            i_n(a);
            i_n(b);
            i_n(c);
            l_n(d);
            mark[a][b].graph=1;
            mark[a][b].cost=c;
            mark[a][b].length=d;
        }
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=B;j++)
            {
              dp[i][j]=m1;
              if(i==1)
              dp[i][j]=0;
            }
        }
        for(int i=2;i<=n;i++)
        {
            for(int j=1;j<=B;j++)
            {

             for(int k=1;k<=n;k++)
             {
                int nei;
                nei=mark[k][i].graph;
              if(nei)
              {
                if(j>=mark[k][i].cost)
                dp[i][j]=min(dp[i][j],dp[k][j-mark[k][i].cost]+mark[k][i].length);

              }
             }
            }
        }
        /*for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=B;j++)
            {
              printf("%lld ",dp[i][j]);
            }
            printf("\n");
        }*/
        int q;
        i_n(q);
        for(int k=0; k<q; k++)
        {
            int a,b;
            i_n(a);
            i_n(b);
            if(dp[a][b]!=m1)
            l_p(dp[a][b]);
            else
            i_p(-1);
        }
    }
    return 0;
}

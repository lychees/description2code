#include <iostream>
#include <string>
#include <fstream>
using namespace std;

enum color
{ WHITE, RED, BLACK };

struct node
{
	int index;
	color theColor;
};



int main()
{
	int vertices, edges, numGraphs, numAdjVert = 1, tempVertex1, tempVertex2;
	node graph [200];
	node adjacencyMatrix [200][200];
	bool bColored = false, bSeen = true;
	
	cin >> numGraphs;
	
	while (0 < numGraphs)
	{
		cin >> vertices;
		
		if (vertices == 0)
		{
			break;
		}
		
		cin >> edges;
		
		//Initialize
		for (int i = 0; i < vertices; i++)
		{
			for (int j = 0; j < vertices; j++)
			{
				adjacencyMatrix [i][j].index = 0;
			}
		
			graph [i].index = 0;
			
			if (i == 0)
			{
				graph [i].theColor = BLACK;
			}
			
			else
			{
				graph [i].theColor = WHITE;
			}
		}	
	
		//Fill matrix
		for (int i = 0; i < edges; i++)
		{
			cin >> tempVertex1 >> tempVertex2;
			adjacencyMatrix [tempVertex1][tempVertex2].index = 1;
			adjacencyMatrix [tempVertex2][tempVertex1].index = 1;
		}
	
		while (!bColored)
		{
			for (int i = 0; i < numAdjVert; i++)
			{
				bColored = true;
				
				for (int j = 0; j < vertices; j++)
				{
					if (adjacencyMatrix [graph [i].index][j].index)
					{
						if (graph [j].theColor == WHITE)
						{
							if (graph [graph [i].index].theColor == BLACK)
							{
								graph [j].theColor = RED;
							}
							
							else if (graph [graph [i].index].theColor == RED)
							{
								graph [j].theColor = BLACK;
							}
							
							graph [numAdjVert].index = j;
							numAdjVert++;
							bColored = false;
						}
						
						else
						{
							if (graph [j].theColor == graph [graph [i].index].theColor)
							{
								bSeen = false;
							}
						}
					}
				}
			}	
		}
		
		if (bSeen == true)
		{
			cout << "BICOLORABLE." << endl;
		}
		
		else
		{
			cout << "NOT BICOLORABLE." << endl;
		}
		
		bColored = false;
		bSeen = true;
		numGraphs--;
	}
    
    return 0;
}

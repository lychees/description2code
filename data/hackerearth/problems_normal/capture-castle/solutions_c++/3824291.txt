#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
 
#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;
 
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;
 
template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {
 
    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        int m,n;
        cin>>m>>n;
        vector<vi> w ( m, vi ( n ) );
        cin>>w;
        int x,y, t;
        cin>>x>>y>>t;
        x--;
        y--;
        vector<vi> ft ( m, vi ( n, INF ) );
        priority_queue<pair<int,pii>> nxt;
        nxt.push ( mp ( -w[0][0],mp ( 0,0 ) ) );
        int t0=-1;
        while ( !nxt.empty() ) {
        	pii pos=nxt.top().second;
            int t=-nxt.top().first;
            nxt.pop();
            int i,j;
            tie ( i,j ) =pos;
            if ( i==x &&j==y ) {
                t0=t;
                break;
            }
            if ( t>ft[i][j] ) continue;
            if ( i>0){
                int i2=i-1, j2=j;
                if(t+w[i2][j2]<ft[i2][j2] ) {
                ft[i2][j2]=t+w[i2][j2];
                nxt.push ( mp ( -ft[i2][j2],mp ( i2,j2 ) ) );
                }
            }
            if ( j>0){
                int i2=i, j2=j-1;
                if(t+w[i2][j2]<ft[i2][j2] ) {
                ft[i2][j2]=t+w[i2][j2];
                nxt.push ( mp ( -ft[i2][j2],mp ( i2,j2 ) ) );
                }
            }
             if ( i<m-1){
                int i2=i+1, j2=j;
                if(t+w[i2][j2]<ft[i2][j2] ) {
                ft[i2][j2]=t+w[i2][j2];
                nxt.push ( mp ( -ft[i2][j2],mp ( i2,j2 ) ) );
                }
            }
             if ( j<n-1){
                int i2=i, j2=j+1;
                if(t+w[i2][j2]<ft[i2][j2] ) {
                ft[i2][j2]=t+w[i2][j2];
                nxt.push ( mp ( -ft[i2][j2],mp ( i2,j2 ) ) );
                }
            }
            
            
            
            
        }
        assert(t0>=0);
        if ( t0<=t )
            cout<<"YES\n"<<t-t0<<'\n';
        else
            cout<<"NO\n";
 
 
    }
}
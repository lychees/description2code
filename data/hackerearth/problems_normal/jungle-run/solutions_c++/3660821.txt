#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}
class graph
{
	vi *adj;
	public:
		graph(int v)
		{
			adj=new vi[v];
		}
		void add_edge(int u,int v)
		{
			adj[u].pb(v);
			adj[v].pb(u);
		}
		int bfs(int v,vector<bool>& visited,int reach)
		{
			visited[v]=true;
			vi dist(901);
			dist[v]=0;
			vi::iterator it;
			queue<int> q;
			q.push(v);
			while(!q.empty())
			{
				v=q.front();
				q.pop();
				for(it=adj[v].begin();it!=adj[v].end();it++)
				{
					if(!visited[*it])
					{
						dist[*it]=dist[v]+1;
						visited[*it]=true;
						if((*it)==reach)
							break;
						q.push(*it);
					}
				}
			}
			return dist[reach];
		}
};
int main()
{
	int i,n,j,c,s,t;
	sc("%d",&n);
	vector<vector<bool> > v(n,vector<bool>(n));
	vii val(n,vi(n));
	c=1;
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
			val[i][j]=(c++);
	}
	char ch;
	graph g(901);
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			cin>>ch;
			if(ch!='T')
			{
				v[i][j]=true;
				if(ch=='S')
					s=val[i][j];
				if(ch=='E')
					t=val[i][j];
			}
		}
	}
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(v[i][j])
			{
				if((i+1)<n)
				{
					if(v[i+1][j])
					{
						g.add_edge(val[i][j],val[i+1][j]);
					}
				}
				if((j+1)<n)
				{
					if(v[i][j+1])
					{
						g.add_edge(val[i][j],val[i][j+1]);
					}
				}
			}
		}
	}
	vector<bool> visited(901);
	int ans=g.bfs(s,visited,t);
	pf("%d",ans);
	return 0;
}
// ADITYA VARSHNEY

#include <iostream>
#include <bitset>
#include <cmath>
#include <queue>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <climits>

#define pb push_back
#define mp make_pair
#define mod 1000000007

typedef long long int ll;

using namespace std;

#define getcx getchar//_unlocked
#define mod2 4294967296

long long int powr (long long int a, long long int b)
{
if (b == 0)
return 1;
long long int x = powr(a, b/2);
if (b % 2 == 0)
return (x*x)%mod;
else
return (((x*x)%mod)*a)%mod;
}


long long int scanll()
{
    long long int n=0;
    char ch = getcx();
    int sign=1;
    while( ch < '0' || ch > '9' ) {
        if(ch=='-')
            sign = -1;
        ch=getcx();
    }
    while( ch >= '0' && ch <= '9' )
        n = (n<<3)+(n<<1) + ch-'0',
    ch=getcx();
    return(n * sign);
}

int scani()
{
    int n=0;
    char ch = getcx();
    int sign=1;
    while( ch < '0' || ch > '9' ) {
        if(ch=='-')
            sign = -1;
        ch=getcx();
    }
    while( ch >= '0' && ch <= '9' )
        n = (n<<3)+(n<<1) + ch-'0',
    ch=getcx();
    return(n * sign);
}

ll dp[55][12];

ll solve(ll n, ll m, ll len, ll conc) {
    if(dp[len][conc] != -1) return dp[len][conc];
    if(len == n) {
        dp[n][conc] = 1;
        return 1;
    }
    ll ans = solve(n,m,len+1,0) + (conc < m-1 ? solve(n,m,len+1,conc+1) : 0);
    dp[len][conc] = ans;
    return ans;
}

int main()
{
    ll t,x,i,n,j,m;
    t = scanll();
    while(t--) {
        for(i = 0 ; i < 55; i++) {
            for(j = 0 ; j < 12; j++) {
                dp[i][j] = -1;
            }
        }
        m = scanll();
        n = scanll();
        ll ans = solve(n,m,0,0);
        printf("%lld\n", ans);
    }
    return 0;
}

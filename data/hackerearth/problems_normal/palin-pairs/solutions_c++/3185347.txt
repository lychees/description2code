#include<iostream>
#include<algorithm>
#include<string>
#include<map>
using namespace std;

class num
{
public:
num(int a, int b)
{
ns1=a;
ns2=b;
}
long int ns1;
long int ns2;
};

int
main ()
{
  int n = 0; long long int count = 0;
  cin >> n;
  std::string s1, s2;
  map < string, num >mymap;
  map < string, num >::iterator ite;
int i=n;
  while ( i > 0)
    {
      cin >> s1;
      s2 = s1;
      reverse (s2.begin (), s2.end ());
      ite = mymap.find (s2);
         if (ite != mymap.end ())
        {
          (ite->second).ns2++;
          //cout<<s1<<" is palin of "<<s2<<". "<<s2<<" already exists in map "<<ite->second<<" times\n";
          //count++;
        }
      else
        {
          ite = mymap.find (s1);
          if (ite != mymap.end ())
            {
              (ite->second).ns1++;
            }
          else
            {
             num ob1(1,0);
             mymap.insert (std::pair < string, num >(s1, ob1));
             //cout<<"Inserted "<<s1<<endl;
            }
        }
          //cout<<"count = "<<count<<endl;;
      i--;
    }

for(ite= mymap.begin();ite!=mymap.end();ite++)
{
count=count+((ite->second).ns1)*((ite->second).ns2);
}
cout << count << "\n";
}

  
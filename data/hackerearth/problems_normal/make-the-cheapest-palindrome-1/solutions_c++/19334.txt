// palindrome.cpp : Defines the entry point for the console application.
//

//#include "stdafx.h"
#include <stdlib.h>
#include <string>
#include <vector>
#include <iostream>

struct PStruct
{
    std::string str;
    int aCost,bCost;
};

void ComputeCost(PStruct& val)
{
    int aTotCost = 0,bTotCost=0;

    std::string str = val.str;
    int length = str.length();
    int mid = length/2;
    int i = 0;
    for( ; i < mid ; ++i)
    {
        bool replaced = true;
        int shift = 0;
        if( str[i] == '/' && str[length-1-i] == '/' )
        {                       
                if( val.aCost < val.bCost )
                    str[length-1-i] = str[i] = 'a';
                else
                    str[length-1-i] = str[i] = 'b';
                shift = 1;
        }
        else if( str[i] == '/')
        {           
            str[i] = str[length-1-i];
        }
        else if( str[length-1-i] == '/')
        {
            str[length-1-i] = str[i];
        }
        else{replaced=false;}

        if( str[i] == str[length-1-i] ) 
        {
            if( replaced )
            {
              if( str[i] == 'a' )
                aTotCost += (val.aCost << shift);
              else
                bTotCost += (val.bCost << shift);
            }
        }
        else
            break;
    }
    if( i == mid )
    {
        //return (aTotCost + bTotCost);
        std::cout<< aTotCost + bTotCost << std::endl;
    }
    else
    {
        //return -1;
        std::cout<< -1 << std::endl;
    }
}

int main(int argc, char* argv[])
{
    int count = 0;
    std::vector<PStruct> sColl;
    std::cin >> count;
        while( count )
        {
            PStruct pStr;
            std::cin >> pStr.str;
            std::cin >> pStr.aCost;
            std::cin >> pStr.bCost;
            sColl.push_back( pStr );
            --count;
        }

    int totCost = 0;
    for( std::vector<PStruct>::iterator iter = sColl.begin();
        iter != sColl.end(); ++iter )
    {
        ComputeCost( *iter );
    }

    //getchar();
    return 0;
}



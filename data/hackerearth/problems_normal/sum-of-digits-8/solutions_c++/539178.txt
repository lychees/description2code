#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

#define ll long long
#define ff first
#define ss second

ll S;
ll res;
ll A;
ll B;
int len;
char cad[50];
ll dp[30][200];
ll pow_10[100];

void pre()
{
	pow_10[0] = 1;
	for(int i = 1; i <= 19; ++i)
		pow_10[i] = pow_10[i - 1] * 10;
}

ll rec(int digits, int sum)
{
	if(digits == 0) {
		return sum == 0;
	}
		
	if(dp[digits][sum] != -1) {	
		return dp[digits][sum];
	}
	
	ll ans = 0;
	for(int i = 0; i <= 9; ++i) {
		if(sum - i >= 0) {
			ans += rec(digits - 1, sum - i);
		}
	}
	
	return dp[digits][sum] = ans;
}

ll sol1(ll data)
{
	ll ans = 0;
	sprintf(cad, "%lld", data);
	
	len = strlen(cad);
	int remain = len;
	int sum = S;
	
	for(int i = 0; i < len; ++i) {
		remain--;
		int dig = cad[i] - '0';
		for(int j = 0; j < dig; ++j) {
			if(sum - j >= 0){
				ans += rec(remain, sum - j);
			}
		}
	
		sum -= dig;
	}
	
	return ans;
}

void solve()
{
	memset(dp, -1, sizeof dp);
	scanf("%lld%lld%lld", &A, &B, &S);
	
	ll one_to_B = sol1(B + 1);
	ll one_to_A = sol1(A);
	
	printf("%lld\n", one_to_B - one_to_A);
	
	while(B - A > 5) {
		ll mid = (A + B)/2;
		if(sol1(mid + 1) - one_to_A >= 1) {
			B = mid;
		} else
			A = mid;
	}
	
	for(ll i = A; i <= B; ++i) {
		if(sol1(i + 1) - one_to_A >= 1) {
			res = i;
			break;
		}
	}
	
	printf("%lld\n", res);
}

int main()
{
//	pre();
	solve();
	return 0;
}
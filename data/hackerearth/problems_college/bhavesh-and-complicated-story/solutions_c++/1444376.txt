#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)

template<class T> inline void amin(T &a, T b) { if (a>b) a=b; }
template<class T> inline void amax(T &a, T b) { if (a<b) a=b; }
template<class T>
struct Fenwick : vector<T> {
    typedef vector<T> S;
    int N;
    Fenwick(int N_=0): S(N_), N(N_) {}
    void add(int i, T x) {
	for (; i<N; i|=i+1) S::operator[](i) += x;
    }
    T sum(int l, int r) {
	if (l==0) {
	    T s = 0;
	    for (; r; r&=r-1) s += S::operator[](r-1);
	    return s;
	} else {
	    return sum(0, r) - sum(0, l);
	}
    }
    int lower_bound(T x) { // argmin_i x <= sum(0,i)
	int i = 1, j = 0;
	T s = T();
	while (i<N) i<<=1;
	for (; i; i>>=1) {
	    if (i+j <= N && s + S::operator[](i+j-1) < x) {
		s += S::operator[](i+j-1);
		j += i;
	    }
	}
	return j;
    }
};


int N, Q, T, X, Y;

int main() {
    scanf("%d", &N);
    Fenwick<int> F(1000111);
    REP (i, N) {
	scanf("%d", &X);
	F.add(X, 1);
    }
    scanf("%d", &Q);
    REP ($, Q) {
	scanf("%d", &T);
	if (T == 0) {
	    scanf("%d%d", &X, &Y);
	    printf("%d\n", F.sum(X, Y+1));
	} else if (T == 1) {
	    scanf("%d", &X);
	    F.add(X, -1);
	} else {
	    scanf("%d", &X);
	    F.add(X, 1);
	}
    }
    return 0;
}

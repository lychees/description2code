#include<bits/stdc++.h>
using namespace std;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define sd(mark) scanf("%d",&mark)
#define ss(mark) scanf("%s",&mark)
#define slld(mark) scanf("%lld",&mark)
#define clr(mark) memset(mark,0,sizeof(mark))
#define F first
#define S second
#define MP make_pair
#define PB push_back
#define sz(x) (int((x).size()))
#define PII pair<int,int>
#define PIL pair<int,long long>
#define PLL pair<long long,long long>
#define PIS pair<int,string>
#define MII map<int,int>
#define LL long long
#define FILEIO(name) \
    freopen(name".in", "r", stdin); \
    freopen(name".out", "w", stdout);
#define INF 2000000000 // 2 * 10^9
#define INFLL 1000000000000000000ll  // 10^18
#define mod 1000000007

#define N 1010

vector<int> l[N];
bool a[N][N];
bool vs[N];
int d[N],rs[N];

void bfs(int s)
{
    queue<int> q;
    memset(vs,0,sizeof(vs));
    vs[s] = 1;
    d[s] = 0;
    q.push(s);
    int i,cr,ch;
    while(!q.empty())
    {
        cr = q.front();
        q.pop();
        rs[cr] = min(rs[cr],rs[s]+d[cr]);
        for(i=0;i<l[cr].size();++i)
        {
            ch = l[cr][i];
            if(!vs[ch])
            {
                vs[ch] = 1;
                d[ch] = d[cr]+1;
                q.push(ch);
            }
        }
    }
}

void solve()
{
    int n,m,i,x,y;
    sd(n);
    sd(m);
    for(i=1;i<=n;++i)
    {
        a[i][i] = 1;
        rs[i] = n+10;
    }
    rs[1] = 0;
    while(m--)
    {
        sd(i);
        if(i==1)
        {
            sd(x);
            printf("%d\n",(rs[x]<n)?rs[x]:-1);
        }
        else
        {
            sd(x);
            sd(y);
            if(!a[x][y])
            {
                l[x].PB(y);
                a[x][y] = 1;
                if(rs[x]+1 < rs[y])
                {
                    rs[y] = rs[x]+1;
                    bfs(y);
                }
            }
        }
    }
}

int main()
{
    int t = 1;
    //scanf("%d",&t);
    while(t--)
    {
        solve();
    }
}


#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
struct leaf {
    array<leaf*,27> childs={};
    int best=-1;
    int bestv=-INF;
    leaf(){
     rep(i,27)  assert(!childs[i]); 
    }
    void insert ( const string &s, int i, int v, int ind ) {
        if ( v>bestv ) {
            bestv=v;
            best=ind;
        }
        if ( i==s.size() ) return;
        if ( !childs[s[i]-'a'] ) childs[s[i]-'a']=new leaf();
        childs[s[i]-'a']->insert ( s,i+1,v,ind );
    }
    int findBest ( const string &s, int i ) {
        if ( i==s.size() ) return bestv;
        if(!childs[s[i]-'a']) return -1;
        return childs[s[i]-'a']->findBest ( s,i+1 );
    }
};
int main() {
    ios_base::sync_with_stdio ( false );
    int n,q;
    cin>>n>>q;
    vs dbase ( n );
    vi weights(n);
    leaf root;
    rep ( i,n ) {
        int w;
        cin>>dbase[i]>>w;
        root.insert ( dbase[i],0,w,i );
    }
    rep ( i,q ) {
        string s;
        cin>>s;
        int ind=root.findBest ( s,0 );
        cout<<ind<<'\n';
    }
}

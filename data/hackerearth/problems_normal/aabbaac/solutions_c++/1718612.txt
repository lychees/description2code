#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cctype>
#include <cstdio>
#include <vector>
#include <cassert>
#include <complex>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

const int BASE = 1000000000, BASE_DIGITS = 9;
struct bigint
{
	vector <int> a;
	int sign;

	bigint() { *this = 0LL; }
	bigint(long long v) { *this = v; }
	bigint(const string &s) { read(s); }
	bigint operator * (int v) const { bigint res = *this; res *= v; return res; }
	bigint operator / (int v) const { bigint res = *this; res /= v; return res; }
	bigint operator / (const bigint &v) const { return divmod(*this, v).first; }
	bigint operator % (const bigint &v) const { return divmod(*this, v).second; }
	void operator += (const bigint &v) { *this = *this + v; }
	void operator -= (const bigint &v) { *this = *this - v; }
	void operator *= (const bigint &v) { *this = *this * v; }
	void operator /= (const bigint &v) { *this = *this / v; }
	void operator %= (const bigint &v) { *this = *this % v; }
	bool operator > (const bigint &v) const { return v < *this; }
	bool operator <= (const bigint &v) const { return !(v < *this); }
	bool operator >= (const bigint &v) const { return !(*this < v); }
	bool operator == (const bigint &v) const { return !(*this < v) and !(v < *this); }
	bool operator != (const bigint &v) const { return *this < v or v < *this; }
	bigint operator - () const { bigint res = *this; res.sign = -sign; return res; }
	bigint abs() const { bigint res = *this; res.sign *= res.sign; return res; }
	bool iszero() const { return a.empty() or ((int)a.size() == 1 and !a[0]); }
	long long value() const
	{
		long long res = 0;
		for (int i = (int)a.size() - 1; i >= 0; i--) res = res * BASE + a[i];
		return res * sign;
	}
	friend bigint gcd(const bigint &a, const bigint &b)
	{
		return b.iszero() ? a : gcd(b, a % b);
	}
	friend bigint lcm(const bigint &a, const bigint &b)
	{
		return a / gcd(a, b) * b;
	}
	void trim()
	{
		while (!a.empty() and !a.back()) a.pop_back();
		if (a.empty()) sign = 1;
	}
	void operator = (const bigint &v) { sign = v.sign; a = v.a; }
	void operator = (long long v)
	{
		sign = 1;
		a.resize(0);
		if (v < 0) sign = -1, v = -v;
		for (; v > 0; v = v / BASE) a.push_back(v % BASE);
	}
	void read(const string &s)
	{
		sign = 1;
		a.resize(0);
		int pos = 0;
		while (pos < (int)s.size() and (s[pos] == '-' or s[pos] == '+'))
		{
			if (s[pos] == '-') sign = -sign;
			pos++;
		}
		for (int i = s.size() - 1; i >= pos; i -= BASE_DIGITS)
		{
			int x = 0;
			for (int j = max(pos, i - BASE_DIGITS + 1); j <= i; j++)
				x = x * 10 + s[j] - '0';
			a.push_back(x);
		}
		trim();
	}
	bigint operator + (const bigint &v) const
	{
		if (sign == v.sign)
		{
			bigint res = v;
			for (int i = 0, carry = 0; i < (int)max(a.size(), v.a.size()) or carry; ++i)
			{
				if (i == (int)res.a.size()) res.a.push_back(0);
				res.a[i] += carry + (i < (int)a.size() ? a[i] : 0);
				carry = res.a[i] >= BASE;
				if (carry) res.a[i] -= BASE;
			}
			return res;
		}
		return *this - (-v);
	}
	bigint operator - (const bigint &v) const
	{
		if (sign == v.sign)
		{
			if (abs() >= v.abs())
			{
				bigint res = *this;
				for (int i = 0, carry = 0; i < (int)v.a.size() or carry; i++)
				{
					res.a[i] -= carry + (i < (int)v.a.size() ? v.a[i] : 0);
					carry = res.a[i] < 0;
					if (carry) res.a[i] += BASE;
				}
				res.trim();
				return res;
			}
			return -(v - *this);
		}
		return *this + (-v);
	}
	void operator *= (int v)
	{
		if (v < 0) sign = -sign, v = -v;
		for (int i = 0, carry = 0; i < (int)a.size() or carry; i++)
		{
			if (i == (int)a.size()) a.push_back(0);
			long long cur = a[i] * (long long)v + carry;
			carry = (int)(cur / BASE);
			a[i] = (int)(cur % BASE);
		}
		trim();
	}
	void operator /= (int v)
	{
		if (v < 0) sign = -sign, v = -v;
		for (int i = (int)a.size() - 1, rem = 0; i >= 0; i--)
		{
			long long cur = a[i] + rem * (long long)BASE;
			a[i] = (int)(cur / v);
			rem = (int)(cur % v);
		}
		trim();
	}
	int operator % (int v) const
	{
		if (v < 0) v = -v;
		int m = 0;
		for (int i = a.size() - 1; i >= 0; i--) m = (a[i] + m * (long long)BASE) % v;
		return m * sign;
	}
	friend pair <bigint, bigint> divmod(const bigint &a1, const bigint &b1)
	{
		int norm = BASE / (b1.a.back() + 1);
		bigint a = a1.abs() * norm;
		bigint b = b1.abs() * norm;
		bigint q, r;
		q.a.resize(a.a.size());
		for (int i = a.a.size() - 1; i >= 0; i--)
		{
			r *= BASE;
			r += a.a[i];
			int s1 = r.a.size() <= b.a.size() ? 0 : r.a[b.a.size()];
			int s2 = r.a.size() <= b.a.size() - 1 ? 0 : r.a[b.a.size() - 1];
			int d = ((long long)BASE * s1 + s2) / b.a.back();
			r -= b * d;
			while (r < 0) r += b, d--;
			q.a[i] = d;
		}
		q.sign = a1.sign * b1.sign;
		r.sign = a1.sign;
		q.trim();
		r.trim();
		return make_pair(q, r / norm);
	}
	bool operator < (const bigint &v) const
	{
		if (sign != v.sign) return sign < v.sign;
		if (a.size() != v.a.size()) return a.size() * sign < v.a.size() * v.sign;
		for (int i = a.size() - 1; i >= 0; i--)
			if (a[i] != v.a[i])
				return a[i] * sign < v.a[i] * sign;
		return false;
	}
	static vector <int> convert_base(const vector <int> &a, int old_digits, int new_digits)
	{
		vector <long long> p(max(old_digits, new_digits) + 1);
		p[0] = 1;
		for (int i = 1; i < (int)p.size(); i++) p[i] = p[i - 1] * 10;
		vector <int> res;
		long long cur = 0;
		int cur_digits = 0;
		for (int i = 0; i < (int)a.size(); i++)
		{
			cur += a[i] * p[cur_digits];
			cur_digits += old_digits;
			while (cur_digits >= new_digits)
			{
				res.push_back(int(cur % p[new_digits]));
				cur /= p[new_digits];
				cur_digits -= new_digits;
			}
		}
		res.push_back((int)cur);
		while (!res.empty() and !res.back()) res.pop_back();
		return res;
	}
	typedef vector <long long> vll;
	static vll karatsuba(const vll &a, const vll &b)
	{
		int n = a.size();
		vll res(n + n);
		if (n <= 32)
		{
			for (int i = 0; i < n; i++)
				for (int j = 0; j < n; j++)
					res[i + j] += a[i] * b[j];
			return res;
		}
		int k = n >> 1;
		vll a1(a.begin(), a.begin() + k);
		vll a2(a.begin() + k, a.end());
		vll b1(b.begin(), b.begin() + k);
		vll b2(b.begin() + k, b.end());
		vll a1b1 = karatsuba(a1, b1);
		vll a2b2 = karatsuba(a2, b2);
		for (int i = 0; i < k; i++) a2[i] += a1[i];
		for (int i = 0; i < k; i++) b2[i] += b1[i];
		vll r = karatsuba(a2, b2);
		for (int i = 0; i < (int)a1b1.size(); i++) r[i] -= a1b1[i];
		for (int i = 0; i < (int)a2b2.size(); i++) r[i] -= a2b2[i];
		for (int i = 0; i < (int)r.size(); i++) res[i + k] += r[i];
		for (int i = 0; i < (int)a1b1.size(); i++) res[i] += a1b1[i];
		for (int i = 0; i < (int)a2b2.size(); i++) res[i + n] += a2b2[i];
		return res;
	}
	bigint operator * (const bigint &v) const
	{
		vector <int> a6 = convert_base(this->a, BASE_DIGITS, 6);
		vector <int> b6 = convert_base(v.a, BASE_DIGITS, 6);
		vll a(a6.begin(), a6.end());
		vll b(b6.begin(), b6.end());
		while (a.size() < b.size()) a.push_back(0);
		while (b.size() < a.size()) b.push_back(0);
		while (a.size() & (a.size() - 1)) a.push_back(0), b.push_back(0);
		vll c = karatsuba(a, b);
		bigint res;
		res.sign = sign * v.sign;
		for (int i = 0, carry = 0; i < (int)c.size(); i++)
		{
			long long cur = c[i] + carry;
			res.a.push_back((int)(cur % 1000000));
			carry = (int)(cur / 1000000);
		}
		res.a = convert_base(res.a, 6, BASE_DIGITS);
		res.trim();
		return res;
	}
	friend istream& operator >> (istream &stream, bigint &v)
	{
		string s;
		stream >> s;
		v.read(s);
		return stream;
	}
	friend ostream& operator << (ostream &stream, const bigint &v)
	{
		if (v.sign == -1) stream << '-';
		stream << (v.a.empty() ? 0 : v.a.back());
		for (int i = (int)v.a.size() - 2; i >= 0; i--)
			stream << setw(BASE_DIGITS) << setfill('0') << v.a[i];
		return stream;
	}
};

const int N = 123;
string s[N];
bigint l[N];

char go(bigint x, int n)
{
	if (n == 0)
		return s[0][x.value()];
	else if (x >= l[n - 1] + l[n - 1])
		return s[n][(x - l[n - 1] - l[n - 1]).value()];
	else if (x >= l[n - 1])
		return go(l[n - 1] - (x - l[n - 1]) - 1, n - 1);
	else
		return go(x, n - 1);
}

int main()
{
	int t; cin >> t;
	string ret = "";
	while (t--)
	{
		int n, m; cin >> n >> m;
		for (int i = 0; i < n; i++)
		{
			cin >> s[i];
			if (i == 0)
				l[i] = s[i].size();
			else
				l[i] = l[i - 1] + l[i - 1] + s[i].size();
		}
		for (int i = 0; i < m; i++)
		{
			bigint x; cin >> x;
			ret += go(x, n - 1);
		}
		ret += '\n';
	}
	cout << ret;
	return 0;
}
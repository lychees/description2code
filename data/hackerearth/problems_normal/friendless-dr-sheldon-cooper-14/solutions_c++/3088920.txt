#include<bits/stdc++.h>
using namespace std;
#define INFINITY 2000000000
typedef pair<int,int> pii;

int prims(vector<vector<pii> > &edges,int n){
  priority_queue<pii,vector<pii>,greater<pii> > q;
  vector<int> distance(n,INFINITY);

  vector<bool> visited(n,false);
  q.push(make_pair(0,0));
  distance[0]=0;
  int cost=0;
 while(!q.empty()){
  pii p=q.top();
  q.pop();
  int here=p.second;
  if(visited[here])continue;
  else visited[here]=true;
  cost+=p.first;
 // cout<<here<<" "<<p.first<<endl;
  for(vector<pii>::iterator it=edges[here].begin();it!=edges[here].end();++it)
  {
    if(it->first<distance[it->second]&&!visited[it->second])
      {
        distance[it->second]=it->first;

        q.push(make_pair(distance[it->second],it->second));
      }
  }

 }
 return cost;

}
int main(){
	int T;
	cin>>T;
	while(T--){
		int n,m;
		cin>>n>>m;
		vector<vector<pii> > g(n);
		for(int i=0;i<m;i++){
			int u,v;
			cin>>u>>v;
			u--,v--;
			g[u].push_back(make_pair(1,v));
			g[v].push_back(make_pair(1,u));
			}
		int ans=prims(g,n);
		cout<<ans<<endl;
	}


}














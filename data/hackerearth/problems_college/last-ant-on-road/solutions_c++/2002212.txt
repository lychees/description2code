#pragma once
#pragma comment(linker, "/STACK:66777216")
#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <utility>
#include <functional>
#include <iostream>
#include <iomanip>
#include <ctime>
#include <cassert>
#include <queue>
#include <cmath>
#include <random>
#include <sstream>
#pragma hdrstop

using namespace std;


#define fill(a, x) memset(a, x, sizeof(a))

#define ll long long

const int INF = 0x3f3f3f3f;
const double EPS = 1e-9;
const ll LINF = 0x3f3f3f3f3f3f3f3fLL;

int __;

void inputFiles();














































//#define TASK "task"

const int MOD = 1000000007;
const int MAXN = 1111;

const int DX[] = { -1, 0, 1, 0 };
const int DY[] = { 0, -1, 0, 1 };

int n, dir[MAXN], pos[MAXN], npos[MAXN], life[MAXN];
bool alive[MAXN];

void solve(istream& in, ostream& out) {
	inputFiles();
	in >> __;
	for (int _ = 0; _ < __; ++_) {
		in >> n;
		for (int i = 1; i <= n; ++i) {
			in >> dir[i];
			pos[i] = i;
			alive[i] = true;
		}
		fill(life, -1);
		int lb = 1, rb = n;
		for (int timer = 0; lb <= rb; ++timer) {
			for (int i = lb; i <= rb; ++i) {
				if (dir[i] == 1) {
					break;
				}
				alive[i] = false;
				++lb;
				life[i] = timer + pos[i];
			}
			for (int i = rb; i >= lb; --i) {
				if (dir[i] == -1) {
					break;
				}
				--rb;
				alive[i] = false;
				life[i] = timer + n + 1 - pos[i];
			}
			for (int i = lb; i <= rb; ++i) {
				if (i < rb && dir[i] == 1 && dir[i + 1] == -1) {
					dir[i] = -1;
					dir[i + 1] = 1;
					npos[i] = pos[i];
					npos[i + 1] = pos[i + 1];
					++i;
					continue;
				}
				npos[i] = pos[i] + dir[i];
			}
			for (int i = lb; i <= rb; ++i) {
				if (i < rb && npos[i] == npos[i + 1]) {
					dir[i] = -dir[i];
					dir[i + 1] = -dir[i + 1];
					pos[i] = npos[i];
					pos[i + 1] = npos[i + 1];
					++i;
					continue;
				}
				pos[i] = npos[i];
			}
			for (int i = lb; i <= rb; ++i) {
				if (pos[i] < 1) {
					++lb;
				}
			}
			for (int i = rb; i >= lb; --i) {
				if (pos[i] > n) {
					--rb;
				}
			}
		}
		int ans = 1;
		for (int i = 2; i <= n; ++i) {
			if (life[i] > life[ans]) {
				ans = i;
			}
		}
		out << ans << endl;
	}
}





inline void inputFiles() {
}
#include <fstream>


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    istream& in = cin;

    ostream& out = cout;
    solve(in, out);
    return 0;
}

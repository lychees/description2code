#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

int N, M;
char grid[2001][2001];
int U[2001][2001];
int D[2001][2001];
int L[2001][2001];
int R[2001][2001];
int UL[2001][2001];
int DR[2001][2001];
long long ans;
vector<int> rem[2001];
int bit[2001];

void add(int x, int v)
{
    for(x++; x<=2000; x+=x&-x)
        bit[x]+=v;
}

int sum(int x)
{
    int ret=0;
    for(x++; x>0; x-=x&-x)
        ret+=bit[x];
    return ret;
}

void solve_diag(int x, int y)
{
    memset(bit, 0, sizeof bit);
    for(int i=0; i<N; i++)
        rem[i].clear();
    while(x>=0 && y>=0)
    {
        for(auto& it: rem[x])
            add(it, -1);
        rem[x].clear();
        if(UL[x][y])
        {
            add(x, 1);
            if(x-UL[x][y]>=0)
                rem[x-UL[x][y]].push_back(x);
            ans+=sum(x+DR[x][y]-1);
        }
        x--;
        y--;
    }
}

int main()
{
    scanf("%d%d", &N, &M);
    for(int i=0; i<N; i++)
        scanf("%s", grid[i]);
    for(int i=0; i<N; i++)
        for(int j=0; j<M; j++)
        {
            if(grid[i][j]=='0')
            {
                if(i)
                    U[i][j]=U[i-1][j]+1;
                else
                    U[i][j]=1;
                if(j)
                    L[i][j]=L[i][j-1]+1;
                else
                    L[i][j]=1;
            }
            else
            {
                U[i][j]=0;
                L[i][j]=0;
            }
        }
    for(int i=N-1; i>=0; i--)
        for(int j=M-1; j>=0; j--)
        {
            if(grid[i][j]=='0')
            {
                if(i!=N-1)
                    D[i][j]=D[i+1][j]+1;
                else
                    D[i][j]=1;
                if(j!=M-1)
                    R[i][j]=R[i][j+1]+1;
                else
                    R[i][j]=1;
            }
            else
            {
                D[i][j]=0;
                R[i][j]=0;
            }
        }
    for(int i=0; i<N; i++)
        for(int j=0; j<M; j++)
        {
            UL[i][j]=min(U[i][j], L[i][j]);
            DR[i][j]=min(D[i][j], R[i][j]);
        }
    for(int i=0; i<N; i++)
        solve_diag(i, M-1);
    for(int i=0; i<M-1; i++)
        solve_diag(N-1, i);
    printf("%lld\n", ans);
    return 0;
}

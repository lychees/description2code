import sys
import math


def prime_factorize(n):
    factors = []
    number = math.fabs(n)

    while number > 1:
        factor = get_next_prime_factor(number)
        factors.append(factor)
        number /= factor

    if n < -1:  # If we'd check for < 0, -1 would give us trouble
        factors[0] = -factors[0]

    return set(factors)


def get_next_prime_factor(n):
    if n % 2 == 0:
        return 2

    # Not 'good' [also] checking non-prime numbers I guess?
    # But the alternative, creating a list of prime numbers,
    # wouldn't it be more demanding? Process of creating it.
    for x in range(3, int(math.ceil(math.sqrt(n)) + 1), 2):
        if n % x == 0:
            return x

    return int(n)


m = {}
for i in range(1, 24):
    x = 2**i-1
    m[i] = prime_factorize(x)
t = int(input())
while (t):
    a, b = map(int, sys.stdin.readline().split())
    print(len(m[a].intersection(m[b])))
    t -= 1

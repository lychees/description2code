 /*
    Template:
    By Jugal :)
    */
     
    #include <iostream>
    #include <vector>
    #include <stack>
    #include <queue>
    #include <map>
    #include <set>
    #include <utility>
    #include <algorithm>
    #include <cstdio>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #include <cstring>
    #include <limits>
     
    using namespace std;
     
    typedef long long ll;
    typedef vector <int> vi;
    typedef vector <vi> vii;
    typedef pair<int,int> pii;
     
    int scan() {
    char c = getchar_unlocked();
    while(c<'0' || c>'9') c = getchar_unlocked();
    int ret = 0;
    while(c>='0' && c<='9') {
    ret =(ret<<3)+(ret<<1) + c - 48;
    c = getchar_unlocked();
    }
    return ret;
    }
     
    #define pb push_back
    #define mp make_pair
    #define ff first
    #define ss second
    #define sz size()
    #define len length()
    #define rep(i,n) for(int i=0;i<n;i++)
    #define ref(i,a,n) for(int i=a;i<=n;i++)
    #define reb(i,n,a) for(int i=n;i>=a;i--)
    #define all(a) a.begin(),a.end()
    #define gi(n) scanf("%d",&n)
    #define pi(n) printf("%d",n)
    #define ps printf(" ")
    #define pn printf("\n")
     
    int isVisited[1000000];
    int key;
     
    void dfs(int ver,vi *vec){
    rep(i,vec[ver].size()) {//cout << ver << "yes"<< endl;
    if(isVisited[vec[ver][i]]==-1) {
    if(isVisited[ver]==0) isVisited[vec[ver][i]]=1; else isVisited[vec[ver][i]]=0;
    dfs(vec[ver][i],vec);
    } else if(isVisited[ver]==isVisited[vec[ver][i]]){ key=1;return ;}
    }
    }
     
    int main()
    {
    int t;
    gi(t);
    while(t--){
    vi vec[100001];
    int n,m;
    gi(n);
    gi(m);
    memset(isVisited,-1,sizeof(isVisited));
    // cout << "isvisit" << endl;
    // rep(i,n) cout << isVisited[i] << " ";
    // cout << endl;
     
    int l,r;
    rep(i,m) gi(l),gi(r),vec[l-1].pb(r-1),vec[r-1].pb(l-1);
    
key=0;
int flag=1;
while(key==0 && flag==1)
    {
    	int i,f=0;
    	for(i=0;i<n;i++)
    	{
    		if(isVisited[i]==-1)
    		{
    			isVisited[i]=1;
    			f=1;dfs(i,vec);
    		}
    	}//printf("y");
    	if(f==0)
    	flag=0;
    }

    
    // cout << "visit" << endl;
    // rep(i,n) cout << i+1 << " " << isVisited[i] << endl;
    //cout << find(-1,isVisited,isVisited+n);
    if(key==0) cout << "YES" << endl; else cout << "NO"<< endl;
    }
    return 0;
    }

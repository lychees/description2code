            #include<bits/stdc++.h>
            using namespace std;

            #define     ll       long long
            #define     jkm()    int t; cin>>t; while(t--)

            #define     pb(a)    push_back(a)
            #define     sorta(v) sort(v.begin(), v.end())
            #define     sortd(v) sort(v.begin(), v.end(), greater<auto>())
            #define     all(v)   v.begin(),v.end()
            #define     l(a)     a.length()
            #define     sz(a)    a.size()
            #define     rep(i,n)  for(int i=0;i<n;i++)
            #define     fr(i,a,b)for(int i=(a);i<=(b);i++)
            #define     frd(i,a,b)       for(int i=(a);i>=(b);i--)
            #define     debug(x) cout << '>' << #x << ':' << x << endl;
            template< class T > void display(vector<T>& v){ for(auto it=v.begin();it!=v.end();it++) cout<<*it<<" "; }
            template< class T > T gcd(T a, T b) { return (b != 0 ? gcd<T>(b, a%b) : a); }      //gcd
            template< class T > T lcm(T a, T b) { return (a / gcd<T>(a, b) * b);}      //lcm
            template<class T> inline int monkbit(T n){return (n==0)?0:(1+monkbit(n&(n-1)));} //bitmonk
            template<class T> inline bool isPrimeNumber(T n) {if(n<=1)return false;for (T i=2;i*i<=n;i++) if (n%i==0) return false;return true;}
            template<class T> inline T powerMod(T p,int e,T m) {if(e==0)return 1%m;else if(e%2==0){T t=powerMod(p,e/2,m);return multiplyMod(t,t,m);}else return multiplyMod(powerMod(p,e-1,m),p,m);}
            bool isUpperCase(char c){return c>='A' && c<='Z';}
            bool isLowerCase(char c){return c>='a' && c<='z';}
            char toLowerCase(char c){return (isUpperCase(c))?(c+32):c;}
            char toUpperCase(char c){return (isLowerCase(c))?(c-32):c;}
            template<class T> string toString(T n){ostringstream ost;ost<<n;ost.flush();return ost.str();}
            int toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}
            double toDouble(string s){double r=0;istringstream sin(s);sin>>r;return r;}
            const double pi=acos(-1.0);

  map <string, char> mymap;

int solve(string s)
{
    int i,j,k,a,b,n;
    char c;
    string t,ans;

    map <string, char> :: iterator it;




    t = "";
    ans = "";
    for( i = 0; i < s.size(); i++ ) {
        t += " ";
        t[t.size()-1] = s[i];
        it = mymap.find(t);
        if( it != mymap.end() ) {
            c = mymap[t];
            ans += " ";
            ans[ans.size()-1] = c;
            t = "";
        }
    }

    cout << ans <<"\n";

    return 0;
}





struct node {
    int freq;
    char ch;
    node* left;
    node* right;

    node( char c = ' ', int f = -1 )
    {
        ch = c;
        freq = f;
        left = NULL;
        right = NULL;
    }

    node( node* c1, node* c2 )
    {
        ch = ' ';
        freq = c1 -> freq + c2 -> freq;
        left = c1;
        right = c2;
    }

    bool operator ()( const node& l, const node &r)
    {
              if(l.freq!=r.freq)
              return l.freq <r.freq;
              else
               return l.ch<r.ch;
        }

    void traverse( string code = "" ) const;

};

void node::traverse( string code ) const
{
    if( left ) {
        left->traverse( code + '1' );
        right->traverse( code + '0' );
    } else {
       // cout << ch << "\t" << freq << "\t" << code << endl;
        mymap[code]=ch;
    }
}

int main() {
   // freopen("input.txt","r",stdin);
   ios::sync_with_stdio(0);
    string str;
    int cnt,n,t;
    char c;
    cin>>t;
    while(t--)
    {


    priority_queue< node, vector<node>, node > q;

    cin >>n;



    for( int i =0; i<n ; i++ ) {

                cin>>c;
                cin>>cnt;
                //cnt = (int)count( str.begin(), str.end(), c );

                        q.push( node( c, cnt+1 ) );

        }

    while( q.size() != 1 ) {
        node *left = new node( q.top() );
        q.pop();
        node *right = new node( q.top() );
        q.pop();
        q.push( node( left, right ) );
    }

   // cout << "Encoding " << endl;
    //cout << "Word" << "\t" << "freq" << "\t" << "code" << endl;
    q.top().traverse();


    cin>>str;
    solve(str);
    mymap.clear();
    }

    return 0;
}

#include <bits/stdc++.h>
 
using namespace std;
 
typedef long long ll;
typedef long l;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef pair<int,pair<int,int> > tii;
typedef vector<pair<int,int> > vec_pii;
typedef vector<vector<int> > vec_vec;
#define mp make_pair
#define setbits(n) __builtin_popcount((n))
#define pb push_back
#define mod 1000000007
#define gcd(a,b) __gcd(a,b)
#define sf(n) scanf("%lld",&(n))
#define pf(n) printf("%lld\n",(n))
#define min3(a,b,c) (min((c),min((a),(b))))
#define max3(a,b,c) (max((a),max((b),(c))))
#define newline "\n"
ll fact[1000005];
int arr[1000005];
int size[1000005];
int dx[8][2] = { {2 , 1}, {2 , -1}, {-2 , 1}, {-2, -1}, {1 , 2}, {1 , -2}, {-1, 2}, {-1, -2} };
void init()
{
    for(int i=0;i<=1000004;++i)
    {
        size[i] = 1;
        arr[i] = i;
    }
}
int root(int x)
{
    while(x!=arr[arr[x]])
       {
       	//arr[x] = arr[arr[x]];
       	x=arr[arr[x]];
       }
    return x;
}
void unions(int A,int B)
{
    int root_A = root(A);
    int root_B = root(B);
    if(root_A!=root_B)
    {
        if(size[root_A]<size[root_B])
        {
            arr[root_A] = root_B;
            size[root_B]+= size[root_A];
            size[root_A]=1;
        }
        else
        {
            arr[root_B] = root_A;
            size[root_A]+= size[root_B];
            size[root_B]=1;
        }
    }
}
bool find(int A,int B)
{
    if(root(A)==root(B))
        return true;
    else
        return false;
}
int loc[1005][1005];
int main()
{
    int test;
    cin>>test;
    fact[1] = fact[0] = 1;
    for(int i=2;i<=1e6+1;++i)
        fact[i] = (fact[i-1]*i)%mod;
    
    for(int i=1;i<=test;++i)
    {
        int n,m;
        cin>>n>>m;
        memset(loc,0,sizeof(loc));
        int q;
        cin>>q;
        init();
        vec_pii v;
        v.pb(mp(0,0));
        for(int i=1;i<=q;++i)
        {
            int x,y;
            cin>>x>>y;
            v.pb(mp(x,y));
            loc[x][y] = i;
        }
        int sz = v.size();
        for(int i=1;i<sz;++i)
        {
            int currx = v[i].first;
            int curry = v[i].second;
            for(int j=0;j<8;++j)
            {
                if(currx+dx[j][0]>=1 and currx+dx[j][0]<=n and curry + dx[j][1]>=1 and curry + dx[j][1]<=m)
                    if(loc[currx+dx[j][0]][curry+dx[j][1]])
                    {
                        unions(loc[currx][curry],loc[currx+dx[j][0]][curry+dx[j][1]]);
                        // cout<<"union"<<newline;
                    }
            }
            
        }
        ll ans = 1;
        for(int i=1;i<=q;++i)
        if(size[i]>1)
            ans = ((ans%mod)*fact[size[i]]%mod)%mod;
 
        cout<<ans<<endl;
    }
    
}
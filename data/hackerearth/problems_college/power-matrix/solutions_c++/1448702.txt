#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
const int md = (int)1e9 + 7;
vector <vector <long long int> > mat;
/*struct matrix
{
public:
	vector <vector <int> > mat;

	matrix(int n = 0, bool id = false)
	{
		mat.resize(n);
		for (int i = 0; i < n; i++) mat[i].resize(n);
		if (id) for (int i = 0; i < n; i++) mat[i][i] = 1;
	}

	inline int size() { return (int)mat.size(); }
	vector <int>& operator[] (int i) { return mat[i]; }
};

matrix operator * (matrix &a, matrix &b)
{
	int n = a.size();
	matrix ret(n);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			for (int k = 0; k < n; k++)
			{
		ret[i][j] += 1ll * a[i][k] * b[k][j] % md;
		if (ret[i][j] >= md) ret[i][j] -= md;
			}
	return ret;
}

matrix ppow(matrix &a, long long p)
{
	int n = a.size();
	matrix ret(n, true);
	while (p > 0)
	{
		if (p % 2 == 1) ret = ret * a;
		p /= 2, a = a * a;
	}
	return ret;
}
matrix mm;**/
long long int mod = 1e9 + 7;
vector<vector<long long int> > mul(vector<vector<long long int> > &vv, vector<vector<long long int> > &vvv){
	vector<vector<long long int> > r(vv.size(), vector<long long int>(vvv[0].size(), 0));
	for (int i = 0; i < vv.size(); i++){
		for (int j = 0; j < vvv.size(); j++){
			for (int jj = 0; jj < vvv[0].size(); jj++){
				r[i][j] += (vv[i][jj] * vvv[jj][j])%mod;
				r[i][j]%=mod;
			}
		}
	}
	return r;
}
vector<vector<long long int> > ppow(vector<vector<long long int> > a, long long int n){
	if (n == 1){
		return a;
	}
	vector<vector<long long int> > r(a.size(), vector<long long int>(a[0].size(), 0));
	if (n == 0){
		for (int i = 0; i < a.size(); i++){
			r[i][i] = 1;
		}
		return r;
	}
	n--;
	r = a;
	while (n){
		if (n & 1){
			r = mul(r, a);
		}
		a = mul(a, a);
		n >>= 1LL;
	}
	return r;
}
int main(){
	long long int tt;
	long long int n;
	long long int m;
	scanf("%lld", &tt);
	while (tt--){
		scanf("%lld%lld", &m, &n);
		mat.assign(m, vector<long long int>(m, 0));
		for (int i = 0; i < m; i++){
			for (int j = 0; j < m; j++){
				scanf("%lld", &mat[i][j]);
			}
		}
		vector<vector<long long int> > kari = ppow(mat, n);
		for (int i = 0; i < m; i++){
			for (int j = 0; j < m; j++){
				if (j){
					printf(" ");
				}
				printf("%lld", kari[i][j]);
			}
			puts("");
		}
	}
	return 0;
}
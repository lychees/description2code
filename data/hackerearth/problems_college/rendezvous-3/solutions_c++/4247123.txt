#include<bits/stdc++.h>
using namespace std;
const int N = 100005;
struct node
{
	int r,par;
}tree[N];
struct node1{
	int u,v,c;
}temp[N];
void init()
{
	for(int i=1;i<N;i++){
		tree[i].r = 1;
		tree[i].par = i;
	}
}
int findi(int x)
{
	if(x!=tree[x].par)
	{
		return tree[x].par = findi(tree[x].par);
	}
	return x;
}
void merge(int x,int y)
{
	if(findi(x)!=findi(y))
	{
		int u = findi(x);
		int v = findi(y);
		if(tree[u].r>tree[v].r)
		{
			tree[v].par = u; 
		}else{
			tree[u].par = v;
			if(tree[u].r==tree[v].r)
				tree[v].r++;
		}
	}
}
bool cmp(node1 a,node1 b)
{
	return a.c<b.c;
}
int main()
{
	int n,m,u,v,c;
	long long ans=0;
	scanf("%d%d",&n,&m);
	init();
	int k = m;
	while(m--)
	{
		scanf("%d%d%d",&u,&v,&c);
		temp[k-m-1].u = u;
		temp[k-m-1].v = v;
		temp[k-m-1].c = c;
	}
	sort(temp,temp+k,cmp);
	for(int i=0;i<k;i++)
	{
	//	cout<<temp[i].u<<' '<<temp[i].v<<endl;
		if(findi(temp[i].u)!=findi(temp[i].v))
		{
			ans += temp[i].c;
			merge(temp[i].u,temp[i].v);
		}
	}
	printf("%lld\n",ans);
	return 0;
}
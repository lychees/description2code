    #include <bits/stdc++.h>
    using namespace std;
    unordered_map<long long, int> cnt; 
    struct node {
    	long long L, R;
    	long long idx, val;
    }P[100005];
     
    char str[100005];
    long long arr[100005];
    long long ans[100005];
    long long sz = 0;
     
    inline bool comp(node x, node y) {
    	if (x.L/sz != y.L/sz) 
    		return x.L < y.L;
    	return x.R < y.R;
    }
     
    inline long long find_hash(char *str){
    	long long j;
    	long long hashValue = 0;
    	for(j = 0; str[j]; j++) {
    		hashValue *= 27;
    		hashValue += str[j]-'a';
    	}
    	for(;j<10;j++)
    		hashValue*27;
    	return hashValue;
    }
     
    int main()
    {
    	long long n, i, j, q;
    	memset(arr, 0, sizeof(arr));
    	memset(ans, 0, sizeof(ans));
    	cin >> n;
    	sz = static_cast<long long>(sqrt(n));
    	for (i = 0; i < n; i++) {
    		cin >> str;
    		arr[i] = find_hash(str);
    	}
    	cin >> q;
    	for (i = 0; i < q; i++) {
    		cin >> P[i].L >> P[i].R >> str;
    		P[i].L--,  P[i].R--;
    		P[i].val = find_hash(str);
    		P[i].idx = i; 
    	}
    	sort(P, P+q, comp);
    	long long cl = 0, cr = -1;
    	long long x, y;
    	for (i = 0; i < q; i++) {
    		x = P[i].L;
    		y = P[i].R;
    		while (cl < x) {
    			cnt[arr[cl]]--;
    			cl++;	
    		}
    		while (cl > x) {
    			cl--;
    			cnt[arr[cl]]++;
    		}
    		while (cr < y) {
    			cr++;
    			cnt[arr[cr]]++;	
    		}
    		while (cr > y) {
    			cnt[arr[cr]]--;
    			cr--;
    		}
    		//cout << "KK : " << i << " : " << P[i].val<< endl;
    		ans[P[i].idx] = cnt[P[i].val];
    	}
    	for (i = 0; i < q; i++) cout << ans[i] << endl;
    	return 0;
    }
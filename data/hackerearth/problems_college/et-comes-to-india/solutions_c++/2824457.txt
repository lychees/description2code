/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
#endif
}

/* Input opener ends */

ill p[55];

string get(ill n, ill k,int turn) {
	
	if ( k < 1 || k >= p[n] ) return "-1";
    if ( n == 1 ) {
    	assert(k==1);
        if ( turn%2 ) return "C";
        return "G"; 
    } 
    if ( k == p[n-1] ) {
        if ( turn%2 ) return "C";
        return "G";
    }
    if ( k < p[n-1] ) return get(n-1,k,turn);
    return get(n-1,p[n]-k,turn+1);

}

int main() {
    input();
    p[0] = 1;
    F(i,1,55) p[i] = p[i-1]*2;
    // cout << p[50] << endl;
    int t; cin >> t;
    while (t-- ) {
        
        ill n; ill k; cin >> n >> k;
        assert(k<=10000000000000000L);
        cout << get(n,k,0) << endl;

    }
    return 0;
}
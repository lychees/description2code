#include<iostream>
#include<stdio.h>
#include<cmath>
#include<cstring>
#include<string>
#include<vector>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<queue>
#include<cstdlib>
#include<algorithm>
#include<time.h>
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define sc(x) scanf("%d",&x)
#define scl(x) scanf("%lld",&x)
#define MAXN 100001
#define M 1000000009
#define LL long long
using namespace std;

vector<int > v;
LL ans[2][2], fib[2][2];

void binaryconv(LL n)
{
    queue<int > st;
    while(n != 0)
    {
        st.push(n % 2);
        n /= 2;
    }
    v.clear();
    while(!st.empty())
    {
        v.PB(st.front());
        st.pop();
    }
/*
    for(int i=0;i<v.size();i++)
        cout<<v[i];
    cout<<endl;
    */
}


void fib_mult()
{
    int i, j, k;
    LL temp[2][2] = {{0,0},{0,0}};
    for(i=0;i<2;i++)
    {
        for(j=0;j<2;j++)
        {
            for(k=0;k<2;k++)
            {
                temp[i][j] += (fib[i][k] % M) * (fib[k][j] % M);
                temp[i][j] %= M;
            }
        }
    }
    for(i=0;i<2;i++)
        for(j=0;j<2;j++)
        fib[i][j] = temp[i][j];
}

void ans_mult()
{
    int i, j, k;
    LL temp[2][2] = {{0,0},{0,0}};
    for(i=0;i<2;i++)
    {
        for(j=0;j<2;j++)
        {
            for(k=0;k<2;k++)
            {
                temp[i][j] += (ans[i][k] % M) * (fib[k][j] % M);
                temp[i][j] %= M;
            }
        }
    }
    for(i=0;i<2;i++)
        for(j=0;j<2;j++)
        ans[i][j] = temp[i][j];
}


int main()
{
    LL t, i, j, n;
    LL final_ans;
    scl(t);
    while(t--)
    {
        scl(n);
        binaryconv(n);

        ans[0][0] = 1;
        ans[0][1] = 0;
        ans[1][0] = 0;
        ans[1][1] = 1;

        fib[0][0] = 1;
        fib[0][1] = 1;
        fib[1][0] = 1;
        fib[1][1] = 0;



        for(i=0;i<v.size();i++)
        {
            if(v[i] == 1)
            {
                ans_mult();
            }
            fib_mult();
        }

        final_ans = ans[0][0] * ans[0][1];
        final_ans %= M;
        if(final_ans < 0)
            final_ans += M;

        printf("%lld\n",final_ans);

    }
}


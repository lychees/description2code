// AUTHOR : SIKANDER MAHAN
// sikander_nsit
// PLAGIARISM IS BAD

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<limits>
#include<string.h>

#define tr(c,it) for(c::iterator it=c.begin();it!=c.end();++it)
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define itor(c) c::iterator
#define ll long long
#define vi vector<int>
#define vs vector<string>
#define si set<int>
#define msi multiset<int>
#define ii pair<int,int>
#define sii set<ii>
#define vii vector<ii>
#define vvi vector<vi>
#define pb push_back
#define mp make_pair

using namespace std;

int ans[1500][1500];

int main()
{
    //ios::sync_with_stdio(false);
    //freopen("input.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int t=0,i=0,j=0,n=0,m,k=0,num=0,temp=0,ind,q;
    cin>>n;
    string str;
    int arr[2002]={0};
    for(i=0;i<n;++i)
    {
        cin>>arr[i];
    }
    msi s;
    itor(msi) it1;
    for(i=0;i<n;++i)
    {
        ans[i][i]=arr[i];
        s.clear();
        s.insert(arr[i]);
        for(j=i+1;j<n;++j)
        {
            s.insert(arr[j]);
            if((j-i+1)%2==0)
            {
                if(arr[j]<ans[i][j-1])
                {
                    it1=s.lower_bound(ans[i][j-1]);
                    --it1;
                    ans[i][j]=(*it1);
                }
                else
                    ans[i][j]=ans[i][j-1];
            }
            else
            {
                if(arr[j]>ans[i][j-1])
                {
                    ans[i][j]=*(s.upper_bound(ans[i][j-1]));
                }
                else
                {
                    ans[i][j]=ans[i][j-1];
                }
            }
        }
    }
    cin>>q;
    for(i=0;i<q;++i)
    {
        scanf("%d %d",&j,&k);
        printf("%d\n",ans[j-1][k-1]);
    }
    return 0;
}

//Hope is a good thing and maybe the best thing of all...
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <list>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
using namespace std;

//DEBUG
#define trace(x) cerr << #x << "=" << x <<endl;
#define trace2(x, y) cerr << #x << "=" << x << " " << #y << "=" << y <<endl;
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int p = 0; p < n; p++) {cerr << x[p] << " ";} cerr << endl;}
#define track(x) {cerr << #x << ":" << endl; for (int p = 0; p < x.size(); p++) {cerr << x[p] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}

//CONSTANTS
#define MAX 1000005
#define MOD 1000000007
#define INF 1e9

void readwrite() {
	#ifndef ONLINE_JUDGE
		freopen("input.txt", "r", stdin);
		freopen("output.txt", "w", stdout);
	#else
		ios::sync_with_stdio(false);
	#endif
}

struct node {
	node* p[30];
	node() {
		for (int i = 0; i < 30; i++) {
			p[i] = NULL;
		}
	}
};

class Trie {
	node *root;
public:
	Trie() {
		root = new node();
	}

	node *getRoot() {
		return root;
	}

	void insert(string &s) {
		node *x = root;
		for (int i = 0; s[i]; i++) {
			if (x->p[s[i]-'a'] == NULL) {
				x->p[s[i]-'a'] = new node();
			}
			x = x->p[s[i]-'a'];
		}
	}	

	int countNodes(node *x) {
		int count = 1;
		for (int i = 0; i < 30; i++) {
			if (x->p[i] != NULL) {
				count += countNodes(x->p[i]);
			}
		}
		return count;
	}

};

int main() {
	int n;
	cin >> n;
	Trie T;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		T.insert(s);
	}
	int nodes = T.countNodes(T.getRoot());
	cout << nodes << endl;	
}

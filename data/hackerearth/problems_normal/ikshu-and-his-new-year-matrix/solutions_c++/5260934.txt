/*
   BY 
       ABHINASH RAI
       NATIONAL INSTITUTE OF TECHNOLOGY, KURUKSHETRA
*/

#include <bits/stdc++.h>
#define rep(i,n) for(int i=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int i=(int)(l);(i)<(int)(u);++(i))
#define r_rep(i,l,u) for(int i=(int)(l);(i)>(int)(u);--(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define sc1(x) scanf("%d",&x)
#define sc2(x) scanf("%lld",&x)
#define pf1(x) printf("%d\n",(x))
#define pf2(x) printf("%lld\n",(x))
#define pf3(x) printf("%d ",(x))
#define pf4(x) printf("%lld ",((x))
#define INF 1000000000
#define inrep int t;sc1(t); while(t--)
#define MAX 10000
using namespace std;
 
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

int is_prime[10001],a[1001][1001],dp[1001][1001];
int n,k;

void count_prime()
{
	
	mset(is_prime,0);
	
	is_prime[1] = 1;
	
	for(int i = 2;i*i <= MAX;i++)
	{
		
		if(is_prime[i] == 0)
		{
			
			for(int j = i*i;j <= MAX;j += i)
			{
				
				is_prime[j] = 1;
				
			}
			
		}
		
	}
	
}

int solve()
{
	
	mset(dp,0);
	
	rep(i,n)
	{
		
		rep(j,n)
		{
			
	        if(is_prime[a[i][j]])
			{
		
	             int temp = k,count=1;
	             
		         while(is_prime[a[i][j]+temp])
		         {
		         	
		         	temp += k;
		         	count++;
		         	
		         	if(temp > MAX)
		         	{
		         		
		         		break;
					}
					 
		         	
				 }
				 
				 if(temp <= MAX)
				 {
				 	dp[i][j] = count;
				 }
				
			}		
			
		}
		
	}
	
}

main()
{
	 
	sc1(n);
	sc1(k);
	
	count_prime();
	
	rep(i,n)
	{
	
		rep(j,n)
		  sc1(a[i][j]);
	
	}
	
	solve();
	
    long long int ans = 10000000000,cnt=0;	
	int a=-1,b=-1;
	
	rep(i,n-2)
	{
		long long int cnt = 0;
		
		rep(j,n-2)
		{
			
		    cnt = dp[i][j] + dp[i][j+2] + dp[i+1][j+1] + dp[i+2][j] + dp[i+2][j+2];
			
			if(ans > cnt)
			{
				
				ans = cnt;
				a=i;
				b=j;
				
			}	
			
		}
	}
	
	if(ans != 10000000000)
	{
	
		printf("yes\n");
		printf("%d\n",ans);
		pf3(a+2);
		pf3(b+2);
	
	}
	else
	{
		
		printf("no\n");
	
	}
	
}
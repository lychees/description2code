def solve_heights(hs):
    p1, p2 = 1, len(hs)
    p1done, p2done = False, False
    increasing = True
    impossible = False
    for i in range(1, len(hs)):
        if not p1done and increasing and hs[i] < hs[i-1]:
            increasing = False
            p1, p1done = i, True
        if not p2done and not increasing and hs[i] > hs[i-1]:
            increasing = True
            p2, p2done = i, True
        if p1done and p2done and hs[i] < hs[i-1]:
            impossible = True
    # print(p1, p2, p1done, p2done, impossible)
    if not impossible:
        # print(hs[:p1-1], hs[p1-1:p2], hs[p2:])
        increasing_seg_1 = hs[:p1-1]
        decreasing_seg = hs[p1-1:p2]
        increasing_seg_2 = hs[p2:]

        if increasing_seg_1 != [] and decreasing_seg != [] and min(
                decreasing_seg) < max(increasing_seg_1):
            impossible = True

        if increasing_seg_2 != [] and decreasing_seg != [] and min(
                increasing_seg_2) < max(decreasing_seg):
            impossible = True
    if impossible or (not p1done and p2 == len(hs)):
        return -1, -1
    else:
        return p1, p2


def main():
    T = int(raw_input().strip())
    for t in range(T):
        N = int(raw_input().strip())
        hs = list(map(int, raw_input().strip().split()))
        ans = solve_heights(hs)
        print ' '.join(str(a) for a in ans)


if __name__ == '__main__':
    main()

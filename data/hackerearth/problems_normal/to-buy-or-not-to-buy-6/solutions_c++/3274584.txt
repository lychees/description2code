#include<bits/stdc++.h>
using namespace std;
#define vi vector < int >
#define pb push_back
#define mp make_pair
#define ll long long
#define llu unsigned long long
#define MOD 1000000007
#define INF 2000000000
#define dbg(x) { cout<< #x << ": " << (x) << endl; }
#define all(x) x.begin(),x.end()
vector < vi > adj,cost;
int a[1001][1001];
int vis[1001];
void dfs(int node,int c)
{
    vis[node] = 1;
    int i;
    for(i=0;i<adj[node].size();i++)
    {
        int nxt = adj[node][i];
        if(!vis[nxt] && a[nxt][node] < c)
            dfs(nxt,c);
    }
}
int main()
{
    int t,n,m,i,j;
    scanf("%d",&t);
    assert(1<=t && t<=15);
    while(t--)
    {
        scanf("%d%d",&n,&m);
        int M = m;
        assert(1<=n && n<=1000);
        assert(m <= min(1001,(n*(n-1)/2)-n) + n);
        adj.resize(n+1);
        cost.resize(n+1);
        for(i=0;i<=n;i++)
        {
            adj[i].clear();
            cost[i].clear();
            for(j=0;j<=n;j++)
                a[i][j] = 0;
        }
        while(m--)
        {
            int u,v,c;
            scanf("%d%d%d",&u,&v,&c);
            adj[u].pb(v);
            cost[u].pb(c);
            adj[v].pb(u);
            cost[v].pb(c);
            a[u][v] = a[v][u] = c;
        }
        int q;
        scanf("%d",&q);
        assert(1<=q && q<=M);
        int num = 0 , den = q;
        while(q--)
        {
            int u,v;
            scanf("%d%d",&u,&v);
            assert(1<=u && u<=n);
            assert(1<=v && v<=n);
            assert(a[u][v]);
            for(i=1;i<=n;i++)
                vis[i] = 0;
            dfs(u,a[u][v]);
            if(!vis[v])
                num++;
        }
        int g = __gcd(num,den);
        num/=g;
        den/=g;
        printf("%d/%d\n",num,den);
    }
    return 0;
}
#include <bits/stdc++.h>
using namespace std;
const int T = (1<<20);
const int MAXN = 1000005;
const long long int MOD = 1000000007;
char inp[MAXN];
int val[200],seg[(T<<1)][5][5];
void mat_mult(int A[][5], int B[][5], int C[][5])
{
	for (int i = 0; i < 5; ++i)
	{
		for (int j = 0; j < 5; ++j)
		{
			C[i][j] = 0;
			for (int k = 0; k < 5; ++k)
			{
				C[i][j]=(((long long int)A[i][k])*B[k][j] + C[i][j])%MOD;
			}
		}
	}
}
int main()
{
	// freopen("input.txt", "r", stdin);
	int n,q;
	scanf("%d %d", &n, &q);
	scanf("%s", inp);
	val['A'] = 0;
	val['C'] = 1;
	val['G'] = 2;
	val['T'] = 3;
	// set seg tree to all identity matrices
	for (int i = T; i < (T<<1); ++i)
		for (int j = 0; j < 5; ++j)
			seg[i][j][j] = 1;
	// now add matrices corresponding to original string
	for (int i = 1; i <= n; ++i)
	{
		int temp = val[inp[i-1]];
		for (int j = 0; j < 5; ++j)
			seg[T+i][temp][j] = 1;
	}
	for (int i = T-1; i >= 1; --i)
		mat_mult(seg[(i<<1)],seg[(i<<1)+1],seg[i]);
	//
	while(q--)
	{
		int pos;
		char ch;
		scanf("%d %c", &pos, &ch);
		// erase old stuff
		int temp = val[inp[pos-1]];
		for (int i = 0; i < 5; ++i)
			seg[T+pos][temp][i] = 0;
		seg[T+pos][temp][temp] = 1;
		// update stuff
		inp[pos-1] = ch;
		temp = val[inp[pos-1]];
		for (int i = 0; i < 5; ++i)
			seg[T+pos][temp][i] = 1;
		// propagate upwards
		pos+=T;
		pos>>=1;
		while(pos)
		{
			mat_mult(seg[(pos<<1)],seg[(pos<<1)+1],seg[pos]);
			pos>>=1;
		}
		// get ans
		long long int ans = 0;
		for (int i = 0; i < 5; ++i)
			ans+=seg[1][i][4];
		ans%=MOD;
		printf("%lld\n", ans);
	}
	return 0;
}
#include<iostream>
#include<queue>
#include<vector>
#include<map>
#define pb(x) push_back(x)
using namespace std;
int n,stat[160011],parent[160011],len,dist[160011];
int main()
{
    int t;
    cin>>t;
    while(t--){
	int n;
	cin>>n;   	//no of vertices
	vector<int> adj[n+1]; 	//adj. list
	int e,a,b,u,v;
	cin>>e; 		//edges
	map<int,int> lad;
	while(e--)
	{
		cin>>a>>b;
		adj[a].pb(b);
        lad[a]=1;
	}
    for(int i=1;i<=n;i++){
        if(adj[i].size()==0){
            for(int j=2;j<=12&&(i+j)<=n;j++){
                adj[i].pb(i+j);
            }
        }
    }
	int s=1,d;			//source vertex,destination
	parent[s]=-1;
	for(int i=0;i<=n;i++)
	{
		stat[i]=-1;
		parent[i]=0;
		dist[i]=-1;
	}
	stat[s]=0;		//-1=undiscovered 0=discovered 1=processed
	queue<int> q;
	dist[s]=0;
	q.push(s);
	//BFS
		while(!q.empty())
		{
			u=q.front();
			q.pop();
			int sz=adj[u].size();
			if(stat[u]==1)
			{
				continue;
			}
			for(int i=0;i<sz;i++)
			{
				v=adj[u][i];
				if(stat[v]==-1)
				{
					stat[v]=0;
					parent[v]=u;
					dist[v]=dist[u];
					if(lad.count(u)==0){
                        dist[v]+=1;}
					q.push(v);
				}

			}
			//cout<<"BOOM"<<endl;
			stat[u]=1;
		}
	//Find path
	len=0;
	int t;
	cout<<dist[n]<<endl;
    }
	return 0;
}

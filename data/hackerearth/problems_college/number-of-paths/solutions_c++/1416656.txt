//Jai Anand
#include <iostream>
using namespace std;
#include <cstdio>
#include <algorithm>
#include <vector>

#include <stack>
#include <cstring>
#include <cmath>
#include <cctype>

#include <cstdlib>
#include <map>
#include <list>
#include <string>
#include <set>
#include <queue>
#include <deque>

#define MOD 1000000007 //10^9 + 7
#define SIZE 100005 //10^5

#define getcx getchar_unlocked

template<class type>
inline void input(type &n)
{
   n=0;
   register int ch=getcx();
   int sign=1;
   while( ch < '0' || ch > '9' )
   {
      if(ch=='-')
         sign=-1; 
         ch=getcx();
   }

   while(  ch >= '0' && ch <= '9' )
           n	 = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   
   n=n*sign;
}

inline void input(char str[])
{
    register char c = 0;
    register int i = 0;
    while (c < 33)
        c = getcx();

    while (c != '\n') {
        str[i] = c;
        c = getcx();
        i = i + 1;
    }
    str[i] = '\0';
}

#define ull unsigned long long
#define ll long long
#define ld long double



#define testcases() int var;  input(var); while(var--)


# define MAX 2002 // assuming we need first 100 rows
long long triangle[MAX + 1][MAX + 1];

void makeTriangle() {
    int i, j;

    // initialize the first row
    triangle[0][0] = 1; // C(0, 0) = 1

    for(i = 1; i < MAX; i++) {
        triangle[i][0] = 1; // C(i, 0) = 1
        for(j = 1; j <= i; j++) {
            triangle[i][j] = (triangle[i - 1][j - 1]%MOD + triangle[i - 1][j]%MOD)%MOD;
        }
    }
}

long long C(int n, int r) {
    return triangle[n][r]%MOD;
}


int main()
{	
	makeTriangle();
	testcases()
	{
		int n, q;
		input(n);
		input(q);
		pair<int, int> v[q+1];
		int j = 0;
		while(q--)
		{
			int t1, t2;
			input(t1);
			input(t2);
			v[j].first = t1;
			v[j].second = t2;
			j++;
		}
		v[j].first = 0;
		v[j].second = 0;
		j++;
		v[j].first = n-1;
		v[j].second = n-1;
		j++;
		sort(v, v+j);
		ull ans = 1;
		for(int i=1; i<j; i++)
		{
			ull x=v[i].second-v[i-1].second, y=v[i].first-v[i-1].first;
			ans = (ans * C(x+y, x))%MOD;
		}
		cout<<ans<<endl;
	}

	return 0;
}

#include <stdio.h>
#include<iostream>
#include <functional>
   #include <algorithm>
   
using namespace std;
long long int  count1=0;
//void Dfs(long length , long num)
//        {
//            if (length-1 == 0)
//            {  {   count1++;
//                   count1%=1000000007;
//				 
//			}
//                return;
//            }
//            int lastDigit = num%10;
//            num=num%10;
//            if (lastDigit == 0)
//            {
//                Dfs(length-1 , num*10+1);
//            }
//            else if (lastDigit == 9)
//            {
//                Dfs(length - 1, num*10 + 8);
//            }
//            else
//            {
//                Dfs(length-1 , num*10+lastDigit-1);
//                Dfs(length-1 , num*10+lastDigit+1);
//            }
//        }
long long int  dp[1000003][11];

long long  solve(long long int n)
  {
  
  	  for(int j=0;j<=9;j++)
  	      dp[0][j]=1;
  	      for(int i=1;i<n;i++)
  	         for(int j=0;j<=9;j++)
  	            {        if(j==0)
  	            	    dp[i][j]=dp[i-1][1];
   	            	    else if(j==9)
  	            	    dp[i][j]=dp[i-1][8];
  	            	        else
  	            	       dp[i][j]=(dp[i-1][j-1]+dp[i-1][j+1])%1000000007;
  	            	       
  	            	       
  	            	
				  }
				 long long int sum=0;
				  
				     for(int j=0;j<9;j++)
				     {
                     sum+=dp[n-1][j];
                     sum%=1000000007;
                     if(sum<=0)
                         {sum+=1000000007;
                         sum=sum%1000000007;
                         }
                         
                        
                 }
                 cout<<sum<<endl;
				      
  	
  	
  }

 int main(){
   int t;
   cin>>t;
   while(t--){
   
long long  int n;
 cin>>n;
 if(n==0)
   cout<<0<<endl;
 else if(n==1)
    {
	cout<<"10"<<endl;
	  }
    else{
// {    for (long j = 1; j < 10; ++j)
//                {
//                    Dfs( n , j);
//                }
//                
solve(n);
               // cout<<count1<<endl;
}
  
 
}
 return 0;
}
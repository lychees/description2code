#include <bits/stdc++.h>
using namespace std;
#define ll long long


int gcd(int a,int b)
{
	if(b == 0){
		return a;
	}
	gcd(b,a%b);
}
#define MAX 8000006
int primes[MAX];

void gen_primes()
{
       ll i,j;
       for(i=0;i<MAX;i++)
	      primes[i] = 1;
       for(i=2;i<=(int)sqrt(MAX);i++)
         if (primes[i])
           for(j=i;j*i<MAX;j++) 
		     primes[i*j] = 0;
        primes[0] = primes[1] = 0;
}

ll check(ll l, ll r)
{
    long long ans = 0;
    int flag = 0;
    vector<ll>first;
    vector<ll>second;
    while(l) {
        first.push_back(l % 2);
        l /= 2;
    }
    reverse(first.begin(), first.end());
    int value = 1;
    first[0] = value;
    for(int i = 1; i < first.size(); i++) {
        if(first[i] == 0) {
            first[i] = value * 2;
            value = value * 2;
        }
        else if(first[i] == 1) {
            first[i] = value * 2 + 1;
            value = value * 2 + 1;
        }
    }
    while(r) {
        second.push_back(r % 2);
        r /= 2;
    }
    reverse(second.begin(), second.end());
    value = 1;
    second[0] = value;
    for(int i = 1; i < second.size(); i++) {
        if(second[i] == 0) {
            second[i] = value * 2;
            value = value * 2;
        }
        else if(second[i] == 1) {
            second[i] = value * 2 + 1;
            value = value * 2 + 1;
        }
    }
    ll i = 0, j = 0;
    ll n = first.size(), m = second.size();
    while(i < n && j < m) {
        if(first[i] != second[j]) {
            break;
        }
        i++; j++;
    }
    i--; j--;
    if(i < n) {
        if(primes[first[i]]) {
            ans -= (long long)first[i];
        }
        else {
            ans += (long long)first[i];
        }
    }
    else {
        if(primes[second[j]]) {
            ans -= (long long)second[j];
        }
        else {
            ans += (long long)second[j];
        }
    }
    i++;
    j++;
    for(int temp = i; temp < n; temp++) {
        if(primes[first[temp]]) {
            ans -= (long long)first[temp];
        }
        else {
            ans += (long long)first[temp];
        }
    }
    for(int temp = j; temp < m; temp++) {
        if(primes[second[temp]]) {
            ans -= (long long)second[temp];
        }
        else {
            ans += (long long)second[temp];
        }
    }
    return ans;
}

int main()
{
    ll query;
    cin>>query;
    gen_primes();
    while(query--) {
        ll x,y;
        cin>>x>>y;
        cout<<check(x,y)<<"\n";
    }
    return 0;
}
// 2015-07-26
#include <bits/stdc++.h>
#include <unordered_map>
#include <array>
#include <forward_list>
#include <unordered_set>
using namespace std;


#ifndef LOCAL
//#define LOCAL
#endif

#define SET_BIT(mask, index) (mask |= (1 << index))
#define TEST_BIT(mask, index) (mask & (1 << index))
#define CLEAR_BIT(mask, index) (mask &= ~(1 << index))
#define TOGGLE_BIT(mask, index) (mask ^= (1 << index))
const int INF = 1000000000;
const double EPS = 1.0e-11;
const int NO_VALUE = -1;
using ii = pair < int, int > ;
using ll = long long;

struct Request {
    int s, e, v;
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w+", stdout);
#endif
    
    int tc;
    cin >> tc;
    while (tc--) {
        int numRequests, ovenUpperLimit; // time [0..ovenUpperLimit]
        cin >> numRequests >> ovenUpperLimit;
        
        vector<Request> req;
        while (numRequests--) {
            Request r;
            cin >> r.s >> r.e >> r.v;
            req.push_back(r);
        }
        vector<int> racksAvail;
        for (int i = 0; i < ovenUpperLimit; i++) {
            int r;
            cin >> r;
            racksAvail.push_back(r);
        }
        
        
        sort(begin(req), end(req), [](Request a, Request b) { return a.v > b.v; });
        
        int profit = 0;
        
        for (int i = 0; i < req.size(); i++) {
            if (racksAvail[req[i].s] > 0) {
                for (int j = req[i].s + 1; j <= req[i].e - 1; j++) {
                    racksAvail[j] = 0;
                }
                
                profit += req[i].v;
            }
        }
        cout << profit << "\n";
    }



    return 0;
}

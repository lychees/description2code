#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
int n;
vi word;
vector<vi> parts;
vector<vi> rem;
vi current;
bool findRek ( int j ) {
//     cout<<current<<" "<<word<<endl;
    if ( j==n ) return current==word;
    bool f=0;
    rep ( i,26 ) {
        current[i]+=parts[j][i];
        if(current[i]>word[i])f=1;
    }
    bool s=0;
    if ( !f ) s=findRek ( j+1 );
    if ( s ) return 1;
    rep ( i,26 ) {
        current[i]-=parts[j][i];
    }
//     if(current>=rem[j])
        return  findRek ( j+1 );
// else return 0;
    
}
int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
//         int n;
        cin>>n;
        parts=vector<vi> ( n,vi ( 26 ) );
        rep ( i,n ) {
            string s;
            cin>>s;
            rep ( j,s.size() ) parts[i][s[j]-'a']++;
        }
        word=vi ( 26 );
        string s;
        cin>>s;
        rem=vector<vi>(n,vi(26));
        rem[n-1]=word;
        for(int i=n-2; i>=0; i--){
         rep(j,26)rem[i][j]=rem[i+1][j]-parts[i+1][j]; 
        }
        rep ( j,s.size() ) word[s[j]-'a']++;
        current=vi ( 26 );
    bool se=findRek(0);
    if(se)cout<<"YES\n";else cout<<"NO\n";
        
    }
    
}

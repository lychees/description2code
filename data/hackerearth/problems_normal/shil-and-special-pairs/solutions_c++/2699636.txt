#include <bits/stdc++.h>

using namespace std;
typedef pair<int,int> pii;
vector<int> ft;
int n;

void update(vector<int> &ft, int x, int val){
	while (x <= n){
		ft[x] += val;
		x += (x & -x);
	}
}

int query(vector<int> &ft, int x){
	int res = 0;
	while (x){
		res += ft[x];
		x -= (x & -x);
	}
	return res;
}

int main(){
	int m; cin >> n >> m;
	int D; cin >> D;
	ft.assign(n + 1, 0);
	
	vector<int> arr(n);
	vector<int> indexes(n + 1);
	for (int i = 0; i < n; i++){
		cin >> arr[i];
		indexes[arr[i]] = i;
	}
	for (int i = 0; i < n; i++){
		int t = arr[i];
		int val = 0;
		for (int j = max(1, t - D); j <= min(n, t + D); j++){
			if (indexes[j] < i){
				val++;
			}
		}	
		update(ft, i + 1, val);		
	}

	vector<pair<pii, int> > queries(m);
	for (int i = 0; i < m; i++) {
		cin >> queries[i].first.first >> queries[i].first.second;
		queries[i].second = i;
	}
	sort(queries.begin(), queries.end());
	vector<int> ans(m);
	
	int ptr = 0;
	for (int i = 0; i < m; i++){
		int L = queries[i].first.first, R = queries[i].first.second, id = queries[i].second;
		L--;
		while (ptr < L){
			int t = arr[ptr];
			for (int j = max(1, t - D); j <= min(n, t + D); j++){
				if (indexes[j] > ptr){
					update(ft, indexes[j] + 1, -1); 
				}
			}		
			ptr++;
		}
		int res = query(ft, R) + (R - L);
		ans[id] = res;
	}
	
	for (int i = 0; i < m; i++) cout << ans[i] << endl;
	
	return 0;
}
#include <bits/stdc++.h>
#define ll long long
#define mod 1000000007
#define upperlimit 100100
#define INF 1000000100
#define INFL 1000000000000000100
#define eps 1e-8
#define endl '\n'
#define sd(n) scanf("%d",&n)
#define slld(n) scanf("%lld",&n)
#define pd(n) printf("%d",n)
#define plld(n) printf("%lld",n)
#define pds(n) printf("%d ",n)
#define pllds(n) printf("%lld ",n)
#define pdn(n) printf("%d\n",n)
#define plldn(n) printf("%lld\n",n)
#define REP(i,a,b) for(i=a;i<=b;i++)
#define mp make_pair
#define pb push_back
#define pcc pair<char,char>
#define pii pair<int,int>
#define pll pair<ll,ll>
#define tr(container,it) for(typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define F first
#define S second

using namespace std;

ll gcd(ll n1,ll n2){
	if(n1%n2==0)return n2;
	return gcd(n2,n1%n2);
}
ll powmod(ll base,ll exponent)
{
	ll ans=1;
	while(exponent){
		if(exponent&1)ans=(ans*base)%mod;
		base=(base*base)%mod;
		exponent/=2;
	}
	return ans;
}
vector <int> factors[upperlimit+1];
vector <int> vecs[upperlimit+1];
vector <int> vals;
int cop[upperlimit+1];
int arr[upperlimit+1];
bool prime[upperlimit+1];
int mobius[upperlimit+1];
ll answer=0;


ll countSplit(int l1,int r1,int l2,int r2)
{
    //cout<<"Here for "<<l1<<" "<<r1<<" "<<l2<<" "<<r2<<endl;
    ll ret = 0;
    int len = r2-l1+1;
    int ptr1 = l1;
    int ptr2 = l2;
    for(int i=0;i<len;i++)
    {
        if(ptr1<=r1 && ptr2<=r2)
        {
            if(vals[ptr1]<=vals[ptr2])
            {
                cop[i] = vals[ptr1];
                ptr1++;
            }
            else
            {
                ret = ret+(r1-ptr1+1);
                cop[i] = vals[ptr2];
                ptr2++;
            }
        }
        else if(ptr1>r1)
        {
            cop[i] = vals[ptr2];
            ptr2++;
        }
        else
        {
            cop[i] = vals[ptr1];
            ptr1++;
        }
    }
    int y = 0;
    for(int j=l1;j<=r2;j++)
    {
        vals[j] = cop[y];
        y++;
    }
    return ret;
}


ll inversions(int l,int r)
{
	int i,j,k,sz=r-l+1;
	int mid=(l+r)>>1;
	if(sz<2)return 0;
	ll v1=inversions(l,mid);
	ll v2=inversions(mid+1,r);
	ll temp=countSplit(l,mid,mid+1,r);
	return (temp+v1+v2);
}
void compute(){
	int i,j;
	for(i=1;i<=upperlimit;i++){
		ll temp=0;

		vals.clear();
		for(j=0;j<vecs[i].size();j++)vals.pb(vecs[i][j]);
		temp=inversions(0,vals.size()-1);

		answer+=mobius[i]*temp;
	}
}
int main()
{
	int n,i,j;
	for(i=1;i<=upperlimit;i++)for(j=i;j<=upperlimit;j+=i)factors[j].pb(i);
	for(i=2;i*i<=upperlimit;i++)if(!prime[i])for(j=i*i;j<=upperlimit;j+=i)prime[j]=true;
	for(i=1;i<=upperlimit;i++)mobius[i]=1;
	for(i=2;i*i<=upperlimit;i++)if(!prime[i])for(j=i*i;j<=upperlimit;j+=i*i)mobius[j]=0;
	for(i=2;i<=upperlimit;i++)if(!prime[i])for(j=i;j<=upperlimit;j+=i)mobius[j]*=-1;
	sd(n);
	for(i=1;i<=n;i++){
		sd(arr[i]);
		for(j=0;j<factors[arr[i]].size();j++)vecs[factors[arr[i]][j]].pb(arr[i]);
	}
	compute();
	plld(answer);
	return 0;
}

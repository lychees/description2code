#include<bits/stdc++.h>
using namespace std;
int n,m,a[1000][1000],c;
char vis[1000000];
vector<int> v[1000000];
bool exist(int i, int j)
{
    if(i<0 || i>=n)
        return false;
    if(j<0 || j>=m)
        return false;
    if(a[i][j]==1)
        return true;
    return false;
}
void dfs(int s)
{
    c++;
    vis[s]=1;
    for(int i=0;i<v[s].size();i++)
        if(vis[v[s][i]]==0)
            dfs(v[s][i]);
}
int main()
{
    int tc,i,j,cnt,mx;
    scanf("%d",&tc);
    while(tc--)
    {
        mx=cnt=0;
        scanf("%d %d",&n,&m);
        memset(vis,0,1000*n);
        for(i=0;i<n;i++)
            for(j=0;j<m;j++)
                scanf("%d",&a[i][j]);
        for(i=0;i<1000000;i++)
            v[i].clear();
        for(i=0;i<n;i++)
            for(j=0;j<m;j++)
            {
                if(a[i][j]==0)
                    continue;
                if(exist(i-1,j-1))
                    v[i*m+j].push_back((i-1)*m+(j-1));
                if(exist(i-1,j))
                    v[i*m+j].push_back((i-1)*m+j);
                if(exist(i-1,j+1))
                    v[i*m+j].push_back((i-1)*m+(j+1));
                if(exist(i,j-1))
                    v[i*m+j].push_back(i*m+(j-1));
                if(exist(i,j+1))
                    v[i*m+j].push_back(i*m+(j+1));
                if(exist(i+1,j-1))
                    v[i*m+j].push_back((i+1)*m+(j-1));
                if(exist(i+1,j))
                    v[i*m+j].push_back((i+1)*m+j);
                if(exist(i+1,j+1))
                    v[i*m+j].push_back((i+1)*m+(j+1));
            }
     /*   for(i=0;i<m*n;i++)
        {
            cout<<i<<": ";
            for(int j=0;j<v[i].size();j++)
                cout<<v[i][j]<<" ";
            cout<<endl;
        }*/

        for(i=0;i<n;i++)
            for(j=0;j<m;j++)
                if(a[i][j]==1 && vis[i*m+j]==0)
                {
                    cnt++;
                    c=0;
                    dfs(i*m+j);
                    mx=max(mx,c);
                }
        printf("%d %d\n",cnt,mx);
    }
}

#include<bits/stdc++.h>
using namespace std;
int matrix[105][105];
int dp[105][105][505];
int n,m,k;
int solve(int i,int j,int temp)
{
    if(i>n || i<=0 || j>m || j<=0 || temp<0)
        return -1;
    if(i==n && j==m && temp>=matrix[i][j]){
        return k-temp+matrix[i][j];
    }
    if(i==n && j==m && temp<matrix[i][j])
        return -1;
    if(dp[i][j][temp]!=-2){
        return dp[i][j][temp];
    }
    dp[i][j][temp]=max(solve(i+1,j+1,temp-matrix[i][j]),max(solve(i+1,j,temp-matrix[i][j]),solve(i,j+1,temp-matrix[i][j])));
    return dp[i][j][temp];
}
int main()
{
    ios::sync_with_stdio(false);
    int t,i,j,p;
    cin>>t;
    while(t--)
    {
        cin>>n>>m>>k;
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=m;j++)
            {
                cin>>matrix[i][j];
            }
        }
        for(i=0;i<=n;i++)
            for(j=0;j<=m;j++)
                for(p=0;p<=k;p++)
                    dp[i][j][p]=-2;

        cout<<solve(1,1,k)<<"\n";
    }
    return 0;
}

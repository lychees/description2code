
/*

Binary Indexed Tree range update point query

*/


#include<bits/stdc++.h>
using namespace std;
vector<long long> bit;
#define getcx getchar_unlocked
 inline int inp ( )//fast input function
    {
    int n=0;
    int ch=getcx();//int sign=1;
    while( ch < '0' || ch > '9' ){ ch=getcx();}
    while( ch >= '0' && ch <= '9' )
    n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
    //n=n*sign;
    return n;
    }


int n;
void update(int idx,int v)
  {
  	while(idx<=n)
  	  {
	   bit[idx]+=v;
  	   idx+=(idx & (-idx));
  	  } 
  }
  
long long read(int idx)
  {long long sum=0;
  	while(idx>0)
  	  {
	   sum+=bit[idx];
  	   idx-=(idx & (-idx));
  	  }
  	 return sum;
  	
  }

int main()
  {
 // scanf("%d",&n); 
  n=inp();
  	bit.resize(n+2);
  	int v;
  	for(int i=1;i<=n;i++)
  	 {
  	 	//scanf("%d",&v); 
  		v=inp();
  	 	update(i,v);
  	  	update(i+1,-v);
  	  	//cout<<"k";
  	 }
  	int q,x,y,p;
  //scanf("%d",&q); 
  	q=inp();
  	while(q--)
  	  {
  	  //	scanf("%d",&x); 
 		// scanf("%d",&y); 
 		 //scanf("%d",&v); 
 		 x=inp();
 		 y=inp();
 		 v=inp();
 		 
  
  	    update(x,v);
  	    update(y+1,-v);
  	  	   
  	 }
  	 	for(int i=1;i<=n;i++)
  	 	  {//cin>>x;
  	 	  printf("%lld\n",read(i));
  	  	  // cout<<read(i)<<endl;
  	  	  }
  	  
  }
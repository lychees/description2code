#include <bits/stdc++.h>

using namespace std;

int order [15 + 2];
string arr [15 + 2];

int main()
{

    int n , t , m;
    string s;

    cin >> n;

    for(int i = 0; i < n; i++) order[i] = i;

    for(int i = 0; i < n; i++)
        cin >> arr[i];

    int mini = 1e9;

    do {                                                   // try all permutations

        int len = arr[ order[0] ].size();

        for(int i = 0; i < n - 1; i++){

             int longest = 1e9;
            for(int j = 0; j < arr[ order[i] ].size(); j++){

                int num = 0;
                int h = j;

                for(int k = 0; k < arr[order[i + 1]].size() && h < arr[ order[i] ].size(); k++, h++){

                    if(arr[ order[i] ][h] == arr[ order[i + 1] ][k]) num++;                         // increase the number of available removed cells
                    else {

                        num = 0;                                                                    // last characters in the first word doesn't correspond to second word characters
                        break;
                    }
                }

                if(h != arr[order[i]].size()) num = 0;
                longest = min(longest , (int) arr[order[i + 1]].size() - num);                  // minize the length taken by second word
            }

            len += longest;                                                                     // add the length of the second word to the total length
        }

        mini = min(mini , len);                                                                 // minimize the total possible

  } while ( std::next_permutation(order, order + n) );


    cout << mini << "\n";

    return 0;
}
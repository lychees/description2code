#include <iostream>
#include<vector>
#include <algorithm>

using namespace std;
class Worker
{
public:
  long long time;
  long long cost;
  long long speed;

    Worker (long long a, long long b, long long c):time (a), cost (b),
    speed (c)
  {
  };
};

bool
operator< (Worker const &a, Worker const &b)
{
  return a.time < b.time;
}

int
main ()
{
  std::vector < Worker > v;
  long long N = 0, a, b, c;
  double D;
  cin >> N;
  cin >> D;
  bool isPaintDone = false;
  long long ans = 0;
  long long x = 0;
  for (long long i = 0; i < N; i++)
    {
      cin >> a;
      cin >> b;
      cin >> c;
      v.push_back (Worker (a, b, c));
    }
  std::sort (v.begin (), v.end ());

  vector < Worker >::iterator it = v.begin ();
  vector < Worker >::iterator _worker = v.begin ();

  for (it = v.begin () + 1; it != v.end (); it++)
    {
      if (it->speed > _worker->speed)
	{
	  if (it->time > _worker->time)
	    {
	      ans = ans + _worker->cost;
	      x = x + (_worker->speed * (it->time - _worker->time));
	      /*cout << "Adding " << _worker->cost << " to cost" << endl;
	         cout << "Adding " << (_worker->speed *
	         (it->time -
	         _worker->
	         time)) << " to palong long, total palong longed = "
	         << x << endl; */
	      if (x >= D)
		{
		  isPaintDone = true;
		  break;
		}
	    }
	  _worker = it;
	  /*cout << "Now choosing " << _worker->time << "\t" << it->
	     cost << "\t" << it->speed << endl; */
	}
      else if (it->speed == _worker->speed)
	{
	  if (it->time > _worker->time)
	    {
	      continue;
	    }
	  if (it->cost < _worker->cost)
	    {
	      _worker = it;
	      /*cout << "Now choosing " << _worker->time << "\t" << it->
	         cost << "\t" << it->speed << endl; */
	    }
	}
    }
  if (!isPaintDone)
    ans = ans + _worker->cost;

  cout << ans << endl;

}

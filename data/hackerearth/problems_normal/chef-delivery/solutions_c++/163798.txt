#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<map>
#include<vector>
#include<algorithm>
#include<cmath>
#include<cstdlib>
#include<set>
#include<stack>
#include<deque>
#include<queue>
#include <limits.h>
#define pb(x) push_back(x)
#define getcx getchar_unlocked
using namespace std;


 
// Returns the maximum value that can be put in a knapsack of capacity W
long long knapSack(int W, int wt[], long long val[], int n)
{
   int i, w;
   long long K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 )
               K[i][w] = 0;
            else
            if(w==0) 
             {if(wt[i-1]==0)K[i][w]=val[i-1]+K[i-1][w];
             else K[i][w] = K[i-1][w];}  
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
           //cout<<K[i][w]<<" ";
       }
       //cout<<endl;
   }
 
   return K[n][W];
}

int main()
{
    int t,n;
    int  W ;
    scanf("%d",&t);
    while(t--)
    {scanf("%d",&n);scanf("%d",&W);
    int *wt=new int[n];
    long long *val = new long long[n];
    for(int i=0;i<n;i++)
        {scanf("%d",&wt[i]); 
         wt[i]=i+1-wt[i];
         if(wt[i]<=0) 
           wt[i]=0;
         }
    for(int i=0;i<n;i++)  
        scanf("%lld",&val[i]); 
    printf("%lld\n", knapSack(W, wt, val, n));
   
    }
   return 0;
}

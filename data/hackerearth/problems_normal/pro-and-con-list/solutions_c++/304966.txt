# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <numeric>
# include <cstdio>
# include <cmath>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;

#define GI ({int t;scanf("%d",&t);t;})
#define REP(i,a,b) for(int i=a;i<b;i++)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define pb push_back
#define mp make_pair
#define INF (int)1e9
#define EPS (double)(1e-9)
#define PI (double)(3.141592653589793)

struct grls
{
    long favour;
    long anger;
}typedef glist;
static int cmp(const void *p1, const void *p2)
{
        long int y1 = ((const glist*)p1)->favour;
        long int y2 = ((const glist*)p2)->favour;
        long int x1 = ((const glist*)p1)->anger;
        long int x2 = ((const glist*)p2)->anger;
        long int z1=y1+x1;
        long int z2=y2+x2;
        if (z1 < z2)
            return 1;
        else if (z1 > z2)
            return -1;
        else
        {
            if(x1>x2)
                return 1;
            else if(x1<x2)
                return -1;
            else
                return 0;
        }

}
int main()
{
    int T;
    cin>>T;
    glist girls[100000];
    while(T--)
    {
       memset(girls,0,sizeof(girls));
       int N;
       cin>>N;
       long long totalAnger=0;
       REP(i,0,N)
       {
           cin>>girls[i].favour>>girls[i].anger;
           totalAnger+=girls[i].anger;
       }
       qsort(girls,N,sizeof(*girls),cmp);
       
       long long ans=(girls[0].favour+girls[0].anger)+(girls[1].favour+girls[1].anger)-totalAnger;
       cout<<ans<<"\n";


    }
    return 0;
}

#include <bits/stdc++.h>
#include <stdio.h>    
#include <string.h>
using namespace std;
#define mod 1000000007

#define llu long long unsigned
#define lld long long
#define ld long
 
//end of definitions
 
 
//fast input
 
/*int scan_d()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ld scan_ld()    {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
lld scan_lld()    {int ip=getchar_unlocked(),flag=1;lld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scan_llu()    {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
 
//end of fast input
 
//fast output
 
//no line break
void print_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void print_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void print_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void print_llu(llu n)     {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
 
//new line
void println_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[11];output_buffer[10]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void println_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[12];output_buffer[11]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<12);}
void println_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[22];output_buffer[21]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
void println_llu(llu n)     {int i=21;char output_buffer[22];output_buffer[21]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
 
//special char
char sp;
void printsp_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[11];output_buffer[10]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void printsp_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[12];output_buffer[11]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<12);}
void printsp_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[22];output_buffer[21]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
void printsp_llu(llu n)     {int i=21;char output_buffer[22];output_buffer[21]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
*/
//end of fast output

/*typedef struct node{
    long long ind;
    long long p;
}nody;

bool comp(nody i,nody j) {
    if(i.p<j.p) return true;
    else if(i.p==j.p) return i.ind<j.ind;
    return false; 
}
nody A[5002];*/


#define lim 50003
lld A[lim],B[lim];
//vector<vector<long long > > E;


/*lld bina(lld A[],lld k,lld low,lld high){
    lld i,j,mid;
    if(low>high) return -1;
    while(high-low>1){
        mid=low+(high-low)/2;
        else if(A[mid]<=k) low=mid;
        else high=mid-1;
    }
    if(A[high]==k) return high;
    else if(A[low]==k) return low;
    else return -1;
}*/

/*lld findS(lld n){
    lld sum=0;
    while(n!=0){
        sum+=n%10;
        n/=10;
    }
    return sum;
}*/


void findP(lld A[100][100],lld V[100][100],lld n){
    queue<pair<lld,lld> > Q;
    Q.push(make_pair(1,1));
    lld i,j,k;
    while(!Q.empty()){
        pair<lld,lld> k;
        k=Q.front();
        Q.pop();
        if(A[k.first+1][k.second]==1 && V[k.first+1][k.second]==0){
            V[k.first+1][k.second]=1;
            Q.push(make_pair(k.first+1,k.second));
        }
        if(A[k.first][k.second+1]==1 && V[k.first][k.second+1]==0){
            V[k.first][k.second+1]=1;
            Q.push(make_pair(k.first,k.second+1));
        }
    }
    return ;
}

int main(){
    lld n,i,j,k,T,t,p,r,A[100][100],V[100][100];
    cin>>T;
    while(T--){
        cin>>n;
        for(i=0;i<=n+1;i++){
            for(j=0;j<=n+1;j++){
                A[i][j]=0;
                V[i][j]=0;
            }
        }
        for(i=1;i<=n;i++){
            for(j=1;j<=n;j++){
                cin>>A[i][j];
            }
        }
        V[1][1]=1;
        findP(A,V,n);

        if(V[n][n]==1) cout<<"POSSIBLE\n";
        else cout<<"NOT POSSIBLE\n";
        
    }
    return 0;
}

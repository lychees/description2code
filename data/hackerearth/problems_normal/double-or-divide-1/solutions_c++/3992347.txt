#include <bits/stdc++.h>
using namespace std;

int lpf[1000010] = {0};
void sieve(int limit = 1000000){
	for(int i = 2; i <= limit; i++)
		lpf[i] = i;
	for(int i = 2; i <= limit; i++){
		if(lpf[i] != i) continue;
		int j = 2 * i;
		while(j <= 	limit){
			lpf[j] = min(lpf[j],i);
			j += i;
		}
	}
}

int check(int i){
	if(i == 1) return 1;

	int ret = 0, ct = 0;
	int md = i;
	while(i > 1){
		int reqd = lpf[i];
		int now = 0;
		while(lpf[i] == reqd){
			i /= reqd;
			now += 1;
		}
		if(now > ct){
			ct = now;
			ret = reqd;
		}
	}
	ret %= md;
	return ret%2;
}

vector<int> arr;
int dps[1000000];
int c[1000000];

int main()
{
	sieve();
	int n,l;
	cin >> n >> l;
	arr.resize(n);
	for(int i = 0; i < n; i++)
		cin >> arr[i];
	sort(arr.begin(),arr.end());

	for(int i = 0; i < n; i++){
		int j = 0;
		while((1 << j) <= arr[i])
			j += 1;
		dps[i] = j;
	}

	const int MOD = 1000000007;

	int dp = 0, mp = n - 1;
	for(int i = 1; i <= l; i++){
		int ok = check(i);
		if(ok)
			c[mp] += 1;
		else
			c[dp] -= 1;
		if(c[dp] + dps[dp] == 0)
			dp += 1;

		if(dp > mp) break;
	}

	vector<int> P;
	for(int i = 0; i < n; i++){
		while(c[i] < 0){
			arr[i] /= 2;
			c[i] += 1;
		}
		while(c[i] > 0){
			arr[i] *= 2;
			if(arr[i] >= MOD)
				arr[i] -= MOD;
			c[i] -= 1;
		}
		if(arr[i] > 0) P.push_back(arr[i]);
	}
	sort(P.begin(),P.end());
	cout << (int)(P.size()) << "\n";
	for(int i = 0; i < P.size(); i++)
		cout << P[i] << " ";
	return 0;
}
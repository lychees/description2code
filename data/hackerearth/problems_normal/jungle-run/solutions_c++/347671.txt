#include <iostream>
#include <queue>
using namespace std;
int dist[30][30];
int main() {
	int n;
	cin >> n;
	int i,j;
	char c;
	int s[2];
	int e[2];
	bool arr[n][n];
	for(i=0;i<n;i++)
		for(j=0;j<n;j++)
		{
			cin >> c;
			if(c=='S')
			{
				s[0] = i;
				s[1] = j;
				arr[i][j] = 0;
			}
			if(c=='E')
			{
				e[0] = i;
				e[1] = j;
				arr[i][j] = 0;
			}
			if(c=='T')
			{
				arr[i][j] = 1;
			}
			if(c=='P')
			{
				arr[i][j] = 0;
			}
		}
	//	for(i=0;i<n;i++)
	//	{
	//	for(j=0;j<n;j++)
	//	cout << arr[i][j];
	//	cout << '\n';
	//	}
		queue<int> q;
		int start = s[0]*n+s[1]+1;
		int end = e[0]*n +e[1] +1;
		q.push(start);
		arr[s[0]][s[1]] = -1;
		dist[s[0]][s[1]] = 0;
		//cout <<q.front();
		//cout << end;
		while(!q.empty())
		{
			int p = q.front();
			int x = (p-1)/n;
			int y = (p-1)%n;
			//cout << "x :" << x << " "<< "y " << y << " "<< "p " <<p << endl;
			if(y!=n)
				if(arr[x][y+1]!=1)
				{
					if(p+1 == end)
					{
					cout << dist[x][y]+1;
					break;
					}
					q.push(p+1);
					arr[x][y+1] = -1;
					dist[x][y+1] = dist[x][y]+1;
				}
			if(y!=0)
				if(arr[x][y-1]!=1)
				{
					if(p-1 == end)
					{
					cout << dist[x][y]+1;
					break;
					}
					q.push(p-1);
					arr[x][y-1] = -1;
					dist[x][y-1] = dist[x][y]+1;
						
				}
			if(x!=n)
				if(arr[x+1][y]!=1)
				{
					if(p+n == end)
					{
					cout << dist[x][y]+1;
					break;
					}
					q.push(p+n);
					arr[x+1][y] = -1;
					dist[x+1][y] = dist[x][y]+1;
				}
			if(x!=0)
				if(arr[x-1][y]!=1)
				{
					if(p-n == end)
					{
					cout << dist[x][y]+1;
					break;
					}
					q.push(p-n);
					arr[x-1][y] = -1;
					dist[x-1][y] = dist[x][y]+1;
				}
				
			q.pop();
		}
	return 0;
}
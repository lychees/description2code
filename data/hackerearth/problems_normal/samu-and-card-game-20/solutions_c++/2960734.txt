#include <iostream>
#include <algorithm>
#include <cassert>
using std::max;
using std::min;
using std::cin;

inline long steps (long cur, long steps, long left, long right){
	if (steps > 0){
		return (right - cur)/steps;
	}
	else if (steps < 0){
		return (cur - left)/(-steps);
	}
	else{
		assert("non-zero step size");
	}
}

int main()
{
    int T; cin >> T;
    while(T --> 0){
    	long n, m, k, a, b, curx, cury;
    	unsigned long ans;
    	cin >> n >> m >> k;
    	ans = 0; curx = cury = 1;
   		long move;
    	while(k-->0){
    		cin >> a >> b;
    		move = max(n, m);
    		if(b){
    			 move = min(move, steps(cury, b, 1, m));
    		}
    		if(a){
    			move = min(move, steps(curx, a, 1, n));
    		}
    		curx += move * a; cury += move * b;
    		ans += move;
    	}
    	std::cout << ans << std::endl;
    }
    return 0;
}

#include<cstdio>
#include<algorithm>
#include<vector>
#include<cassert>

using namespace std;

typedef long long ll;

const ll MAXN = 1e6 + 10;
const ll MOD = 1e9 + 7;

ll n, q, vec[MAXN], p[MAXN], ss[MAXN];

int main(){
	ss[0] = 1;
	for (ll i = 1; i < MAXN; i++)
		ss[i] = (ss[i - 1] * 2) % MOD;

	scanf("%lld %lld", &n, &q);
	for (ll i = 0; i < n; i++)	scanf("%lld", &vec[i]);	sort(vec, vec + n);
	for (ll i = 0; i < n; i++)	p[i + 1] = (p[i] + ss[i]) % MOD;
	while (q--){
		ll x;	char type;	scanf("%s %lld", &type, &x);
		assert(x);
		if (type == '<'){
			ll pos = lower_bound(vec, vec + n, x) - vec;
			printf("%lld\n", (p[pos] + 1) % MOD);
		}
		else if (type == '='){
			ll pos = lower_bound(vec, vec + n, x) - vec;
			int pos2 = upper_bound(vec, vec + n, x) - vec;
			printf("%lld\n", (p[pos2] + MOD - p[pos]) % MOD);
		}
		else{
			ll pos = upper_bound(vec, vec + n, x) - vec;
			printf("%lld\n", (p[n] + MOD - p[pos]) % MOD);
		}			
	}
	return 0;
}

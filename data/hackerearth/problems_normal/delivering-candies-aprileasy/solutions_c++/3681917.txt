#include<bits/stdc++.h>
using namespace std;
 
#define MAX 200001
#define INF 10000000000
#define pii pair< int, long long >
#define pb(x) push_back(x)
#define pil pair<int,long long>
 
struct comp {
    bool operator() (const pil &a, const pil &b) {
        return a.second > b.second;
    }
};
 
priority_queue< pil, vector< pil >, comp > Q;
vector< pair<int,long long> > G[MAX];
long long int D[MAX],k[MAX];
bool F[MAX];
 
int main() {
    long long  i, u, v, sz, nodes, edges, starting;
    scanf("%lld %lld %lld", &nodes, &edges,&starting);
    for(int i=0;i<nodes;i++){
    	scanf("%lld",&k[i]);
    }
    long long w;
    for(i=0; i<edges; i++) {
        scanf("%lld %lld %lld", &u, &v, &w);
        G[u].pb(pil(v, w));
        G[v].pb(pil(u, w)); 
    }
    for(i=1; i<=nodes; i++) D[i] = INF;
    D[starting] = 0;
    Q.push(pil(starting, 0));
    while(!Q.empty()) {
        u = Q.top().first;
        Q.pop();
        if(F[u]) continue;
        sz = G[u].size();
        for(i=0; i<sz; i++) {
            v = G[u][i].first;
            w = G[u][i].second;
            if(!F[v] && D[u]+w < D[v]) {
                D[v] = D[u] + w;
                Q.push(pii(v, D[v]));
            }
        }
        F[u] = 1; 
    }
    long long sum1=0,total=0;
    for(int i=0;i<nodes;i++){
    	if(D[i+1]==INF)
    	   continue;
    	sum1+=k[i]*D[i+1];
    	total+=k[i];
    }
    for(int i=1;i<=nodes;i++){
    	if(D[i]==INF){
    		printf("0 ");
    		continue;
    	}
    	long long sum2=sum1-(k[i-1]*D[i])+(total-k[i-1])*D[i];
    	printf("%lld ",sum2);
    }
    printf("\n");
    return 0;
}
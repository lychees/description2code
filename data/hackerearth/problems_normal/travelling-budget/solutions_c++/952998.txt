#include<bits/stdc++.h>

using namespace std;

int inf;
int tc, n, m, b;
bool ** edge;
int ** cost;
int ** len;
int ** table;

int main() {
        scanf("%d", &tc);
        int v1, v2, c, l;
        inf = std::numeric_limits<int>::max();
        for(int t=0;t<tc;t++) {
                scanf("%d%d%d", &n, &m, &b);
                //initialize
                edge = new bool*[n+1];
                len = new int*[n+1];
                cost = new int*[n+1];

                for(int i=0;i<=n;i++) {
                        edge[i] = new bool[n+1];
                        len[i] = new int[n+1];
                        cost[i] = new int[n+1];

                        for(int j=0;j<=n;j++) {
                                edge[i][j] = false;
                                len[i][j] = 0;
                                cost[i][j] = inf;
                        }
                }
        //      cout << "initialization done\n";
                for(int i=0;i<m;i++) {
                        scanf("%d%d%d%d", &v1, &v2, &c, &l);
                        edge[v1][v2] = true;
                        len[v1][v2] = l;
                        cost[v1][v2] = c;
        //              cout << "fileed " << v1 << v2 << endl;
                }

                table = new int*[n+1];
                for(int i=0;i<=n;i++) {
                        table[i] = new int[b+1];
                }

                //base case
                for(int i=0;i<=n;i++) {
                        table[i][0] = inf;
                }
                for(int b1=0;b1<=b;b1++) {
                        table[1][b1] = 0;
                }

                //fill the table
                for(int v=2;v<=n;v++) {
                        for(int b1=1;b1<=b;b1++) {
                                int min1 = inf;
                                for(int j=1;j<=n;j++) {
                                        if(edge[j][v] && (cost[j][v]<=b1)) {
                                                if(table[j][b1-cost[j][v]] != inf && table[j][b1-cost[j][v]]+len[j][v] < min1)
                                                        min1 = table[j][b1-cost[j][v]]+len[j][v];
                                        }
                                }
                                table[v][b1] = min1;
                        }
                }
                int x, cb, q;
                scanf("%d", &q);
                for(int q1=0;q1<q;q1++) {
                        scanf("%d", &x);
                        scanf("%d", &cb);
//                      int gmin = inf;
//                      for(int b1=1;b1<=cb;b1++) {
//                              if(gmin>table[x][b1])
//                                      gmin = table[x][b1];
//                      }
                        if(table[x][cb] == inf)
                                printf("-1\n");
                        else
                                printf("%d\n", table[x][cb]);
                }
        }
        return 0;
}
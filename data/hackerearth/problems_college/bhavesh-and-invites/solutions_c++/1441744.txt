#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
#define MAX 100001
int n;
int m;
vector<int> v[MAX];
int dp[MAX];
int dd[MAX];
int h[MAX];
int maxt;
bool use[MAX];
void dfs(int b){
	if(use[b]){
		return;
	}
	use[b]=true;
	if(h[b]==maxt){
		dp[b]=1;
		dd[b]=1;
	}
	for (int i = 0; i < v[b].size(); i++){
		if (h[v[b][i]] > h[b]){
			dfs(v[b][i]);
		//	ok = 1;
			dp[b] += dp[v[b][i]];
			dd[b]++;
		}
	}
	return;
}
int main(){
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++){
		int a, b;
		scanf("%d%d", &a, &b);
		a--;
		b--;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	int s;
	scanf("%d", &s);
	s--;
	queue<int> q;
	q.push(s);
	memset(h, -1, sizeof(h));
	h[s] = 0;
	while (!q.empty()){
		int kari = q.front();
		q.pop();
		for (int i = 0; i < v[kari].size(); i++){
			if (h[v[kari][i]] == -1){
				h[v[kari][i]] = h[kari] + 1;
				q.push(v[kari][i]);
			}
		}
	}
	
	maxt=0;
	for(int i=0;i<n;i++){
		maxt=max(maxt,h[i]);
	}
	dfs(s);
	for (int i = 0; i < n; i++){
		if (i){
			printf(" ");
		}
		printf("%d", dp[i]);
	}
	puts("");
	return 0;
}
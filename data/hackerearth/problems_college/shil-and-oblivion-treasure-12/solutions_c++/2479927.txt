#include <stdio.h>
#include <vector>
#include <math.h>
#define mod 1000000007
#define max(x,y) x>y?x:y
using namespace std;

int prime(int* P)
{
	int c=0, j,p=0,i;
	//int P[]={2,   3,   5,   7,  11,  13,  17,  19,  23,  29,  31,  37,  41, 43,  47,  53,  59,  61,  67,  71,  73,  79,  83,  89,  97, 101,103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}
	for(i=2;i<=1000;i++)
	{
		p=0;
		for(j=2;j<=i-1;j++)
		{
			if(i%j==0)
			{
				p=1;
				break;
			}
		}
		if(p==0)
		{
			//printf("%d,",i);
			P[c++]=i;
		}
	}
	//printf("\n%d",c);
	return c;
}
long long int mpow(long long int a,int p)
{
	if(p==0)
		return 1;
	if(p%2!=0)
		return (a*mpow(a,p-1))%mod;
	long long int tmp=mpow(a,p/2);
	return (tmp*tmp)%mod;
}
int main()
{
	int P[200];
	int const p=prime(P);
	int n, i, j, q;
	static vector< pair<int,int> > V[10009];
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		int tmp,q=0,k;
		scanf("%d",&tmp);
		for(k=0;k<168;k++)
		{
			int cou=0;
			while(tmp%P[q]==0)
			{
				tmp=tmp/P[q];
				cou++;
				//printf("%d %d\n",k,P[167]);
			}
			//A[i][q]=cou;
			if(cou!=0)
				V[i].push_back(make_pair(P[q],cou));
			q++;
		}
		/*for(j=0;j<V[i].size();j++)
			printf("%d %d\n",V[i][j].first,V[i][j].second);
		printf("\n");*/
	}
	scanf("%d",&q);
	while(q--)
	{
		int x,y,z,k;
		scanf("%d%d%d",&x,&y,&z);
		if(x==1)
		{
			y--;
			V[y].clear();
			//printf("%d cleared new size %d \n",y,V[y].size());
			int tmp=z,q=0,k;
			for(k=0;k<168;k++)
			{
				int cou=0;
				while(tmp%P[q]==0)
				{
					tmp=tmp/P[q];
					cou++;
				}
				if(cou!=0)
					V[y].push_back(make_pair(P[q],cou));
				q++;
			}
		}
		else
		{
			int C[1000]={0};

				/*for(k=0;k<20;k++)
					printf("%d",C[k]);
				printf("\n");*/
			for(i=y-1;i<z;i++)
			{
				for(k=0;k<V[i].size();k++)
				{
					//printf("%d %d,",V[i][k].first,V[i][k].second);
					int index=V[i][k].first;
					if(C[index]<V[i][k].second)
						C[index]=V[i][k].second;
				}
				/*printf("\n");
				for(k=0;k<20;k++)
					printf("%d",C[k]);
				printf("\n");*/
			}
			long long int ans=1;
			for(k=0;k<1000;k++)
			{
				//printf("%d ",C[k]);
				long long int s=(long long int)mpow((long long int )k,C[k]);
				ans=ans*s;
				ans%=mod;
			}
			printf("%lld\n",ans);
		}
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
vector < int > arr[101];
int lengths[101],M;

long long save[101][1001];

long long dp[101][1001];

const long long INF=(long long)1e18;

long long DP[2][100001];

void compute(long long  save[], int n,vector  <int > a , int M )
{
    int i , j , high=min(int(a.size()),M) ;

    memset(DP,0,sizeof(DP));

    for(i=1; i<= high  ;++i)
    {
        long long ans=-INF;

        int now = i&1;

        int prev= !(i&1);

        for(j=0;j<(int)a.size()-i+1;++j)
            {
                DP[now][j]= a[j] + DP[prev][j+1];
                ans=max(DP[now][j],ans);
            }
        save[i]=ans;
    }
    return ;
}

int main()
{
    ios::sync_with_stdio(0);

    int N  , i , j , k  ,temp;
    cin>>N>>M;

    for(i=1;i<=N;++i)
        {
            cin>>lengths[i];
            for(j=0;j<lengths[i];++j)
            {
                cin>>temp;
                arr[i].push_back(temp);
            }
            compute(save[i],lengths[i],arr[i] , M);
            save[i][0]=0;
        }

    for(i=1;i<=M;++i)
        dp[0][i]=-INF;

    for(i=0;i<=N;++i)
        dp[i][0]=0;
    long long ans=-INF;

    for(i=1;i<=N;++i)
        for(j=1;j<=M;++j)
            {
                dp[i][j]=-INF;
                int to = min(j , lengths[i]);
                for(k=0;k<=to;++k)
                    dp[i][j]=max(dp[i][j],dp[i-1][j-k] + save[i][k]);
                ans=max(ans,dp[i][j]);
//                cout<<dp[i][j]<<" ";
            }

    cout<<ans;

    return 0;

}

#include<iostream>
#include<vector>
#include<stack>
#define MOD 1000000007
using namespace std;
long unsigned comb(long unsigned temp)
{
    if (temp==1)
    return 1;
    if(temp%2==0)
        return ((temp/2)*(temp-1))%MOD;
    else return (((temp-1)/2)*temp)%MOD;
}
int dfs(vector< vector<int> >& graph,vector<int>& visited, int node)
{
    int cnt=1,curr_node;
    visited[node]=1;
    stack<int> st;
    st.push(node);
    vector<int> :: iterator itr;
    while(!st.empty())
    {
        curr_node=st.top();
        st.pop();
        for(itr=graph[curr_node].begin();itr!=graph[curr_node].end();itr++)
        {
            if(!visited[*itr]){
                st.push(*itr);
                visited[*itr]=1;
                cnt++;
            }
        }

    }
    return cnt;
}
int main()
{
    int test,n;
    int conn=0;
    int i=0,j,k;
    int x,y;
    long unsigned total=0;
    long unsigned temp=0;
    cin>>test;
    while(i++<test)
    {
        temp=0;
        total=1;
        cin>>n>>k;
        vector< vector<int> > graph(n+1);
        vector<int> visited(n+1);
        j=0;
        while(j++<k)
        {
            cin>>x>>y;
            graph[x].push_back(y);
            graph[y].push_back(x);
        }
        j=1;
        conn=0;
        while(j<=n)
        {
            if(visited[j]==0){
                temp=dfs(graph,visited,j);
                total=(total*comb(temp))%MOD;
                conn++;
            }
            j++;
        }
        cout<<total<<endl;

    }
    return 0;
}

#include <iostream>
#include<cstdio>
#include<algorithm>
#include<utility>
#include<vector>
#include<cstring>
#include<queue>
using namespace std;
int n,m;
int x,y,c,s,a,h;
bool vis[110];
long dist[110][110];
vector<pair<int,int> > adj[110];
void dijk(int src)
{
    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > pq;
    pair<int,int> p;
    int u,v,w;
    int i;
    for(i=0;i<n+5;i++)
    {
        vis[i]=false;
        dist[src][i]=1000000000;
    }
    pq.push(make_pair(0,src));
    dist[src][src]=0;
    while(!pq.empty())
    {
        p=pq.top();
        pq.pop();
        u=p.second;
        if(vis[u]==true)
            continue;
        vis[u]=true;
        for(i=0;i<adj[u].size();i++)
        {
            v=adj[u][i].second;
            w=adj[u][i].first;
            if(vis[v]==false)
            {
                if(dist[src][v]>dist[src][u]+w)
                    dist[src][v]=dist[src][u]+w;
                pq.push(make_pair(dist[src][v],v));
            }
        }
    }
}
int main()
{
    int te;
    int i;
    scanf("%d",&te);
    while(te--)
    {
        scanf("%d %d",&n,&m);
        for(i=0;i<n+10;i++)
        {
            adj[i].clear();
        }
        for(i=0;i<m;i++)
        {
            scanf("%d %d %d",&x,&y,&c);
            adj[x].push_back(make_pair(c,y));
            adj[y].push_back(make_pair(c,x));
        }
        scanf("%d %d %d",&s,&a,&h);
        long ans=-1;
        dijk(s);
        dijk(a);
        dijk(h);
        for(i=1;i<=n;i++)
        {
            if(i==s||i==h||i==a)
                continue;
            else
                ans=max(ans,dist[s][i]+2*dist[a][i]+dist[h][i]);
        }
        printf("%ld\n",ans);
    }
    return 0;
}

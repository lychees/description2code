from math import sqrt
def bs(a,t):
    low=0
    high=len(a)-1
    while low<=high:
        mid=(low+high)/2
        if t==a[mid]:
            #print mid
            return True
        elif t<a[mid]:
            high=mid-1
        else:
            low=mid+1
    return False
def sieve(n):
    primes = range(3, n + 1, 2) # primes above 2 must be odd so start at three and increase by 2
    for base in xrange(len(primes)):
        if primes[base] is None:
            continue
        if primes[base] > sqrt(n): # stop at sqrt of n
            break

        for i in xrange(base + (base + 1) * primes[base], len(primes), primes[base]):
            primes[i] = None
    primes.insert(0,2)
    return filter(None, primes)


arr=sieve(1000000)

def primef(n):
    art=[]
    sart=[]
    temp=0
    while n%2==0:
        art.append(2)
        temp+=1
        n=n/2
    sart.append(str('2^')+str(temp))
    sart.append("*")
    
    for i in range(3,int(n**0.5)+1,2):
        temp=0
        while n%i==0:
            art.append(i)
            temp+=1
            n=n/i
        if temp>0:
            sart.append(str(i)+str('^')+str(temp))
            sart.append("*")
    if n>2:
        art.append(n)
        sart.append(str(n)+str('^')+str(1))
        sart.append("*")
    return sart
        


for _ in range(input()):
    n=input()
    if bs(arr,n):
        print str("2^0")
    else:
        final=primef(n)
        print ''.join(final)[:-1]

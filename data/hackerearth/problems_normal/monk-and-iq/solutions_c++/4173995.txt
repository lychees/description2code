#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;
typedef priority_queue<int> pqi;
typedef priority_queue<ll> pqll;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}

int main() {
    ios_base::sync_with_stdio ( false );
    int C,P,N;
    cin>>C>>P>>N;
    vll enrolled ( C,0 );
    vll lastIQ ( C,0 );


    priority_queue<pll, vector<pll>, greater<pll> > rows;
    for ( int i=0; i<N; i++ ) {
        int tmp;
        cin>>tmp;
        enrolled[i]=1;
        lastIQ[i]=tmp;
    }
    vi y ( P );
    for ( int i=0; i<P; i++ )
        cin>>y[i];
    for ( ll i=0; i<C; i++ ) {
        ll pri=0;
        if ( enrolled[i]>0 )
            pri=lastIQ[i];
        rows.push ( mp ( pri,i ) );

    }
    vi numbers;
    for ( ll i=0; i<P; i++ ) {
        pll choice=rows.top();
        int c=choice.second;
        numbers.push_back(c+1);
        enrolled[c]++;
        ll next=enrolled[c];
        ll iq=y[i];
        if ( enrolled[c]>1 )
            iq+=lastIQ[c];
        next*=iq;
        lastIQ[c]=y[i];
        rows.pop();
        rows.push(mp(next,c));


    }
cout<<numbers;

}

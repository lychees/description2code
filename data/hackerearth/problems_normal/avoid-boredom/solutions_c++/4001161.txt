#include <stdio.h>
#include <iostream>
#include <cstring>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include<cstdio>
#include<sstream>
#include<cstdlib>
#include<cctype>
#include <math.h>
#include <string>
#include <sstream>
#include <map>
#include <set>
#include <algorithm>
#include <cassert>
#include <limits>

#define eps 10e-9
#define ALL(s) ((s).begin(), (s).end())
#define UNIQUE(c) (c).resize( unique( ALL(c) ) - (c).begin() )
#define REP(i,n) for(int i = 0; i < (n); i++)
#define D(x) if(1) cout << __LINE__ <<" "<< #x " = " << (x) << endl; //line num
#define D2(x,y) if(1) cout << __LINE__ <<" "<< #x " = " << (x) \
     <<", " << #y " = " << (y) << endl;
using namespace std;

typedef vector<int> V;
typedef pair<int,int> PII;
typedef long long ll;
typedef vector<string> VS;
typedef vector<pair<int, int> > VPII;

//U  D  L  R
#define MAXD 4
int dx[] = {0, 0, 1,-1, 1, 1,-1, -1};
int dy[] = {1,-1, 0, 0, 1,-1, 1, -1};
// numeric_limits<int>::min();

ll a[105];
int n, m;
ll dp[105][105];
ll solve(int idx, int count){
    ll ret = -1e18;
    if(count <= 0) return dp[idx][count] = 0L;
    if(idx >= n){
        if(count) return -1e18;
        return 0;
    }

    if(dp[idx][count] != -1)
        return dp[idx][count];


   // ret = max(ret, solve(idx+1, count));
    for(int i = idx+1; i < n; i++){
        ret = max(ret, solve(i, count-1)+abs(a[i]-a[idx]));
    }
    return dp[idx][count] = ret;
}

int main() {
    int t;
    scanf("%d", &t);
    while(t--){
        for(int i = 0; i < 105; i++)
            memset(dp[i], -1, sizeof dp[i]);
        cin >> n >> m;
        ll maxn = 0;
        for(int i = 0; i < n; i++){
            cin >> a[i];
            maxn = max(maxn, a[i]);
        }
        ll mm = 0;
        for(int i = 0; i <= n-m+1; i++)
        	mm = max(solve(i, m-1), mm); 
        cout <<(mm) << endl;
    }
    return 0;
}
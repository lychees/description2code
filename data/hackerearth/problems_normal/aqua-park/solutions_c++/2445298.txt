#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
//#define _LOCAL_
#ifdef _LOCAL_
#include "testlib.h"
/* rnd */
#endif

using namespace std;

#define dbg(x) cout << #x << " = " << (x) << endl
#define dbg2(x,y) cout << #x << " = " << (x) << ", " << #y << " = " << (y) << endl
#define dbg3(x,y,z) cout << #x << " = " << (x) << ", " << #y << " = " << (y) << ", " << #z << " = " << (z) << endl

template<class T> inline T cabs(const T &x) { return x > 0 ? x : (-x); }
template<class T> inline T gcd(const T &x, const T &y) { return (y == 0) ? x : gcd(y, x % y); }
template<class T> inline T sgn(const T &x) { return (x > 0) - (x < 0); }

#define out(x) cout << (x) << endl
#define out2(x,y) cout << (x) << " " << (y) << endl
#define out3(x,y,z) cout << (x) << " " << (y) << " " << (z) << endl

const int maxN = 128;

int N, X; double Y;
int lx[maxN], ly[maxN], rx[maxN], ry[maxN];

double get_high(int i)
{
    return (double)ly[i] + (double)(X - lx[i]) / (rx[i] - lx[i]) * (ry[i] - ly[i]);
}

int used[maxN];

int run()
{
    int t = -1; double h, f;
    for(int i = 0; i < N; i ++) {
        if( used[i] ) continue;
        if( lx[i] <= X && X <= rx[i] ) {
            f = get_high(i);
            if( f > Y + 1e-9 ) continue;
            if( t == -1 || h < f )
                t = i, h = f;
        }
    }
    if( t == -1 ) return 0;
    used[t] = 1;
    if( ly[t] < ry[t] )
        X = lx[t], Y = ly[t];
    else
        X = rx[t], Y = ry[t];
    return 1;
}

int main()
{
    cin >> X >> N;
    for(int i = 0; i < N; i ++)
        cin >> lx[i] >> ly[i] >> rx[i] >> ry[i];
    memset(used, 0, sizeof(used));
    Y = 1e+10; for(; run(); ) ;
    cout << X << endl;
    return 0;
}

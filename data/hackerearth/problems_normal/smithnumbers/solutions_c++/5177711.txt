#include <bits/stdc++.h>

using namespace std;

template <typename T>
inline void scan_num(T &a) {
	register T c;
	a = 0;
	do c = getchar_unlocked(); while(c < '0');
	do {
		a = (a << 1) + (a << 3) + c - '0';
		c = getchar_unlocked();
	} while (c >= '0');
}

template <typename T>
inline void print_num(T a) {
	char s[11];
	T t = -1;
	do {
		s[++t] = a % 10 + '0';
		a /= 10;
	} while (a > 0);
	while (t >= 0) putchar_unlocked(s[t--]);
	putchar_unlocked('\n');
}

const int N = 1e5 + 10;
int sum_dig[N], cs[N];

void sieve_sd() {
	int num = 0;
	for (int i4 = 0; i4 < 10; i4++) {
		for (int i3 = 0; i3 < 10; i3++) {
			for (int i2 = 0; i2 < 10; i2++) {
				for (int i1 = 0; i1 < 10; i1++) {
					for (int i0 = 0; i0 < 10; i0++) {
						int sum = i4 + i3 + i2 + i1 + i0;
						sum_dig[num++] = sum;
					}
				}
			}
		}
	}
}

const int MAXN = 1e5;
bool is_prime[MAXN + 1];
int sum_dig_factors[MAXN + 1];

void sieve() {
	sieve_sd();
	fill(is_prime + 2, is_prime + MAXN + 1, true);
	for (int i = 2; 2 * i <= MAXN; ++i) {
		if (is_prime[i] == true) {
			for (int j = 2 * i; j <= MAXN; j += i) {
				is_prime[j] = false;
				int n = j;
				while (n != 0 && n % i == 0) {
					n /= i;
					sum_dig_factors[j] += sum_dig[i];
				}
			}
		}
	}
	for (int i = 1; i <= MAXN; i++) {
		if (is_prime[i] || sum_dig[i] == sum_dig_factors[i]) {
			cs[i + 1] = cs[i] + 1;
		} else {
			cs[i + 1] = cs[i];
		}
	}
}

int main() {
	sieve();
	int tt;
	scan_num(tt);
	for (int tc = 1; tc <= tt; tc++) {
		int x, y;
		scan_num(x);
		scan_num(y);
		print_num(cs[y + 1] - cs[x]);
	}
	return 0;
}
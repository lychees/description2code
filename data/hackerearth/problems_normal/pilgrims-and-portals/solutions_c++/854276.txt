#include <iostream>
#include<string.h>

using namespace std;
 struct couple{
int nextnode;
int mindistance;};



void warshall( int adj[100][100],short int n){
int i,j,k;
for (k=0;k<n;k++)
for (i=0;i<n;i++)
for (j=0;j<n;j++){
//cout<<"adj["<<i<<"]["<<j<<"]= "<<adj[i][j]<<"   adj["<<i<<"]["<<k<<"]+ adj["<<k<<"]["<<j<<"]= "<<adj[i][k]+adj[k][j]<<endl;
adj[i][j]=(adj[i][j]<adj[i][k]+adj[k][j])?adj[i][j]:adj[i][k]+adj[k][j];}
/*

for (i=0;i<n;i++)
for (j=0;j<n;j++)
cout<<adj[i][j];
*/
}




couple find_next_portal(bool *portals,short int k, int adj[100][100]){
int i,j;
couple coup;
coup.nextnode=-1;
int mindistance;
mindistance=100000000;
for (i=0;i<k;i++)
if (portals[i]==true)
{
//cout<<i<<endl;

for (j=0;j<k;j++)
if(j!=i&&portals[j]==false&&adj[i][j]<mindistance){

mindistance=adj[i][j];
//cout<<"adj["<<i<<"]["<<j<<"]= "<<adj[i][j];
//cout<<"midistance= "<<mindistance<<endl;
coup.nextnode=j;
coup.mindistance=mindistance;
}}

return coup;

}
int shortest( int adj[100][100],short int n,short int k,bool *portals,short int current){

couple coup;
coup.nextnode=-1;
portals[current]=true;
coup=find_next_portal(portals,k,adj);
if (coup.nextnode==-1)return 0;
return coup.mindistance + shortest(adj,n,k,portals,coup.nextnode);}




int main()
{int t,i,j,k,n,m,a,b,c,testcase;
int adj[100][100];
  bool portals[100];


  cin>>t;
  for (testcase=0;testcase<t;testcase++){

  //memset(adj,255,sizeof(adj));
  for (i=0;i<100;i++){
  portals[i]=false;
  for (j=0;j<100;j++)
  adj[i][j]=100000000;}
  cin>>n>>m>>k;


  for (i=0;i<m;i++){//input the roads
  cin>>a>>b>>c;
  adj[a-1][b-1]=c;
  adj[b-1][a-1]=c;
  }

  warshall(adj,n);
  cout<<shortest(adj,n,k,portals,0)<<endl;

  }

    return 0;
}

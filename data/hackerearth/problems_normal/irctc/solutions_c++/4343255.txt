#include <bits/stdc++.h>
using namespace std;
long long dist[100009];
int path[100009];
int visited[100009];
vector<pair<int,int> > gr[100009];
class ComparisonClass {
    public:
    bool operator() (pair<int,int> a, pair<int,int> b) {
        return a.second>b.second;
    }
};


void djikstra(int x,int y,int n)
{
	priority_queue< pair<int,int> ,vector<pair<int,int> >,ComparisonClass> pq;
    dist[x] = 0;
    pq.push(make_pair(x,0));
    
    
    int u,d,z;
        while(!pq.empty())
        {
            u = pq.top().first;
			
            pq.pop();
            if(visited[u])
            	continue;
            //cout<<u<<" ";
            visited[u] = 1;
            for(int i = 0; i < gr[u].size(); i++)
            {
            	z = gr[u][i].first;
            	d = gr[u][i].second;
                if(dist[u]+d<dist[z])
                {
                    dist[z] = d + dist[u];
                    pq.push(make_pair(z,dist[z]));
                    path[z] = u;
                }
            }

        }
    	
}
int main()
{
    int T;
    cin>>T;
    while(T--)
    {
    	
    	int n,k,a,b,c;
    	long long total = 0;
    	cin>>n>>k;
    	for(int i=1;i<=n;i++)
    	{
    		gr[i].clear();
    		dist[i] = 1000000009;
    		visited[i] = 0;
    	}
    	
    	for(int i=1;i<=k;i++)
    	{
    		cin>>a>>b>>c;
    		gr[a].push_back(make_pair(b,c));
    		gr[b].push_back(make_pair(a,c));
    	}
    	
    	cin>>a>>b>>c;
    	djikstra(b,c,n);
    	//cout<<dist[c]<<" ";
    	total+=dist[c];
    	stack<int> my_stack ;
        if( dist[c] == 1000000009 ) 
        { cout << "No Train Found." << endl ;  }
        else {
            int j = path[c] ;
            my_stack.push( c ) ;
            while( 1 ) {
                my_stack.push( j ) ;
                if( j == b ) break ;
                j = path[j] ;
            }
            
            my_stack.pop() ;
    	
    	for(int i=1;i<=n;i++)
    	{
    		dist[i] = 1000000009;
    		visited[i] = 0;
    	}
    	
    
    	djikstra(a,b,n);
    	//cout<<dist[b]<<" ";
    	total+=dist[b];
    	
        if( dist[b] == 1000000009 ) 
        { cout << "No Train Found." << endl ;  }
        else {
            int j = path[b] ;
            my_stack.push( b ) ;
            while( 1 ) {
                my_stack.push( j ) ;
                if( j == a ) break ;
                j = path[j] ;
            }
        
        cout<<total<<endl;
        while( !my_stack.empty() ) {
            cout << my_stack.top() << ' ' ;
            my_stack.pop() ;
            }
            cout << endl ;
        }
        }
    }
}

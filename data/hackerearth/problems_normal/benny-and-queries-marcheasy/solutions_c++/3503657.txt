#include<iostream>
#include<string>
#include<vector>
#include<cmath>
#include<algorithm>
#define modulo 1000000007
using namespace std;

vector<unsigned int>::iterator it;
unsigned int n,no,q,l,r;
unsigned long power[20],answer;
string binary;

struct node{
  struct node *left,*right;
  vector<unsigned int> indices;
}root,*start;


inline string int_to_bin(unsigned long num)
{
    if(num==1)
    return "1";
    else
    if(num==0)
    return "0";
    
    if(num%2==0)
    return int_to_bin(num/2)+"0";
    else
    return int_to_bin(num/2)+"1";
}

inline void trie_insert(struct node *pointer,unsigned int index,unsigned int sequence)
{
    (pointer->indices).push_back(sequence);
    switch(binary[index])
    {
        case '0': if(pointer->left==NULL)
                  {
                    pointer->left=new node;
                    ((pointer->left)->left)=NULL;
                    ((pointer->left)->right)=NULL;
                  }
                    //((pointer->left)->indices).push_back(sequence);
                    index++;
                    if(index!=binary.length())
                    trie_insert(pointer->left,index,sequence);
                    else
                    ((pointer->left)->indices).push_back(sequence);
                    break;
                    
        case '1': if(pointer->right==NULL)
                  {
                    pointer->right=new node;
                    ((pointer->right)->left)=NULL;
                    ((pointer->right)->right)=NULL;
                  }
                    //((pointer->right)->indices).insert(sequence);
                    index++;
                    if(index!=binary.length())
                    trie_insert(pointer->right,index,sequence);
                    else
                    ((pointer->right)->indices).push_back(sequence);
                    break;
    }
    return;
}

inline void process(unsigned int index,struct node *pointer)
{
    if(index==20)
    return;
    else
    if(binary[index]=='0')
    {
            if(pointer->right!=NULL)
            {
                     //it=((pointer->right)->indices).lower_bound(l);
                     it=lower_bound( ((pointer->right)->indices).begin(),((pointer->right)->indices).end(),l);
                     if(it!=((pointer->right)->indices).end() && (*it)<=r)
                     {answer+=power[index];return process(index+1,pointer->right);}
            }
            return process(index+1,pointer->left);
    }
    else
    {
            if(pointer->left!=NULL)
            {
                     //it=((pointer->left)->indices).lower_bound(l);
                     it=lower_bound( ((pointer->left)->indices).begin(),((pointer->left)->indices).end(),l);
                     if(it!=((pointer->left)->indices).end() && (*it)<=r)
                     {answer+=power[index];return process(index+1,pointer->left);}
            }
            return process(index+1,pointer->right);
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    root.left=NULL;root.right=NULL;(root.indices).clear();
    start=&root;
    unsigned int i,j;
    unsigned long x;
    
    for(i=0;i<20;i++)
    power[i]=pow(2,(19-i));
    
    cin>>n>>q;
    for(i=1;i<=n;i++)
    {
        cin>>no;
        //binary.clear();
        binary=int_to_bin(no);
        for(j=binary.length();j<20;j++)
        binary="0"+binary;
        trie_insert(start,0,i);
    }
    while(q--)
    {
        cin>>l>>r>>x;
        //binary.clear();
        binary=int_to_bin(x);
        for(j=binary.length();j<20;j++)
        binary="0"+binary;
        answer=0;
       // i=process(0,start);
        process(0,start);
        cout<<answer<<"\n";
    }
}
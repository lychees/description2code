#include <algorithm>
#include <iostream>
#include <iterator>
#include <numeric>
#include <sstream>
#include <fstream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <map>
#include <set>
using namespace std;
#define LL long long
bool a[200000];
LL prime[20000];
int total;
void pre()
{
    for(int i=2;i<=450;i++)
    {
        if(!a[i])
            for(int j=i*i;j<=200000;j+=i)
                a[j]=true;
    }
    total=0;
    prime[total++]=2;
    for(int i=3;i<=200000;i+=2)
        if(!a[i])
            prime[total++]=i;
}

int get(vector<int> *tree,int i){
int sum = 0;
while(i>0){
sum +=tree->at(i);
i-=i&-i;
}
return sum;
}
void add(vector<int> *tree, int idx ,int val){
while (idx < tree->size()){
tree->at(idx) += val;
idx += (idx & -idx);
}
}
int main(){
pre();
long long n;scanf("%lld",&n);
vector <long long> inv1,inv2;
long long tot=0;
long long size=0;
for (long long i = n,num; i--; scanf("%lld",&num),size=max(size,num),inv1.push_back(num));
for (long long i = n,num; i--; scanf("%lld",&num),size=max(size,num),inv2.push_back(num));
vector<int> tree (size+1,0);
for (int i = n-1; size > 0 && i >= 0 ; --i)
{
tot += get(&tree,inv1[i]-1);
add(&tree,inv2[i],1);
}
if(tot<=200000)
{
	if(!a[tot])
	printf("MAGIC INVERSION");
	else
	printf("SIMPLE INVERSION");
	}
else
{
	int flag=0;
	for(int i=0;prime[i]*prime[i]<=tot;i++)
	{
		if((tot%prime[i])==0)
		{
			flag=1;
			break;
			}
		}
	if(!flag)
	printf("MAGIC INVERSION");
	else
	printf("SIMPLE INVERSION");
	}

return 0;
}

#include<sys/resource.h>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <numeric>
#include <cmath>
#include <complex>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
typedef vector<string> vs;

void out(vi v) {
	for (int i = 0; i < v.size(); ++i) cout << v[i] << ' ';
	cout << endl;
}

void out(vvi v) {
	for (int i = 0; i < v.size(); ++i) out (v[i]);
	cout << endl;
}

vi f(vvi w, int n, int q, int mod) {
	vi res(q, 1);
	vi inv(mod);
	for (int i = 1; i < mod; ++i) for (int j = 1; j < mod; ++j) if (i * j % mod == 1) inv[i] = j;
	for (int i = 0; i < w.size(); ++i) for (int j = 0; j < w[i].size(); ++j) w[i][j] %= mod;
	int it = 0;
	//out(w);
	for (int c = 0; c < n; ++c) {
		for (int i = it; i < n; ++i) if (w[i][c]) {
			w[i].swap(w[it]);
			break;
		}
		if (w[it][c] == 0) continue;
		if (w[it][c] < 0) w[it][c] += mod;
		int mul = inv[w[it][c]];
		for (int i = c; i < w[it].size(); ++i) w[it][i] = w[it][i] * mul % mod;
		for (int i = it + 1; i < n; ++i) if (w[i][c]) {
			mul = w[i][c];
			for (int j = c; j < w[i].size(); ++j) {
				w[i][j] = (w[i][j] - mul * w[it][j]) % mod;
				if (w[i][j] < 0) w[i][j] += mod;
			}
		}
		++it;
	}
	//cout << it << endl;
	//out(w);
	for (int i = 0; i < q; ++i) for (int j = it; j < n; ++j) if (w[j][i+n]) {
		res[i] = 0;
		break;
	}
	return res;
}

int main() {
  int n, q;
  cin >> n >> q;
  vvi w(n, vi(n + q));
  for (int i = 0; i < n; ++i) for (int j = 0; j < n; ++j) scanf("%d", &w[i][j]);
  for (int i = 0; i < q; ++i) for (int j = 0; j < n; ++j) scanf("%d", &w[j][i+n]);
  vi a1 = f(w, n, q, 2);
  vi a2 = f(w, n, q, 5);
  vi a3 = f(w, n, q, 719);
  for (int i = 0; i < q; ++i) {
  	//cout << a1[i] << ' ' << a2[i] << ' ' << a3[i] << endl;
  	if (a1[i] && a2[i] && a3[i]) {
  	  printf("Yes\n");
  	} else printf("No\n");
  }
  return 0;
}
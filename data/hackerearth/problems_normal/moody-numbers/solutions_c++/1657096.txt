#include<bits/stdc++.h>
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
#define pb push_back
#define mp make_pair
#define author rajat1603
#define mod 1000000007
#define nf node.first
#define ns node.second
#define N 1000002
int f(int n){
    unsigned long long temp=n;
    temp*=temp;
    int res=0;
    while(temp){
        res+=temp%10;
        temp/=10;
    }
    return res;
}
vector<int> v[N];
void graph(){
    for(int i=1;i<=1000000;i++){
        int temp = f(i);
        if(temp<=1000000)
            v[temp].pb(i);
    }
}
bool visited[N]={0};
void bfs(){
    visited[1]=1;
    visited[4]=1;
    queue<int> q;
    q.push(1);
    q.push(4);
    while(!q.empty()){
        int node=q.front();
        q.pop();
        int x=v[node].size();
        while(x--){
            int next=v[node][x];
            if(!visited[next]){
                visited[next]=1;
                q.push(next);
            }
        }
    }
}
int main(){
    graph();
    bfs();
    int t=scan();
    while(t--){
        int n=scan();
        if(n<=1000000){
        if(visited[n]){
            printf("YES\n");
        }
        else{
            printf("NO\n");
        }
        }
        else{
        int temp=f(n);
        if(visited[temp]){
            printf("YES\n");
        }
        else{
            printf("NO\n");
        }
        }
    }
}
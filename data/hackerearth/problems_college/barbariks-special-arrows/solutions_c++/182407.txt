#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<string>
#include<iterator>
#include<string>
#include<sstream>
#include<cassert>
#include<ctime>
#include<cmath>

#define MP make_pair
#define PB push_back
#define X first
#define Y second
#define oo 2000000000
#define MOD 1000000007
#define LL long long int
#define PII pair<int,int>
#define DEBUG 0

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

using namespace std;

vector<int> lst[1002];
bool visited[1002];
int row_match[1002],col_match[1002];

bool find_match(int where) {
     if (where == -1)
       return true;
     for (int i = 0; i < lst[where].size(); ++ i) {
       int match = lst[where][i];
       if (visited[match] == false) {
         visited[match] = true;
         if (find_match(col_match[match])) {
           col_match[match] = where;
           return true;
         }
       }
     }
     return false;
}
int howMany(int rows, int cols){
      int ret = 0;
      memset(row_match, -1, sizeof(row_match));
      memset(col_match, -1, sizeof(col_match));

      for (int i = 0; i < rows; ++ i){
            memset(visited, 0, sizeof(visited));
            ret += find_match(i);
      }
      return ret;
}

int main(){
    int n,t,x,y,rows,cols;
    scanf("%d",&t);
    while(t--){
        scanf("%d",&n);
        rows=-1,cols=-1;
        map<int,int> m1,m2;
        for(int i=0;i<=n;i++) lst[i].clear();
        for(int i=0;i<n;i++){
            scanf("%d%d",&x,&y);
            if(m1.find(x)==m1.end()) m1[x]=++rows;
            if(m2.find(y)==m2.end()) m2[y]=++cols;
            lst[m1[x]].PB(m2[y]);
        }
        printf("%d\n",howMany(m1.size(),m2.size()));
    }
    return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <chrono>
#include <climits>
#include <map>
#include <stack>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <cstddef>
#include <memory>
#include <cinttypes>
#include <bitset>
#include <set>
#include <cstring>
#include <sstream>
#include <functional>
#include <cmath>
#define si(n)scanf("%d",&n)  
#define sll(n)scanf("%lld",&n)
#define pi(n)printf("%d\n",n)
#define pll(n)printf("%lld\n",n)
#define pn()printf("\n")
#define max 4000001
//@author Jaydeep Maddipati
using ll = long long;using namespace std;
bool prime[max]; ll pc[max];
inline void sieve(){
	for (int i = 0; i < max; i++)prime[i] = true;
    prime[0] = false; prime[1] = false;
	for (int i = 0; i < max; i++)pc[i] = 0;
	for (int i = 2; i<max; i++){
		if (prime[i]){
			for (int j = 2 * i; j<max; j += i)
				prime[j] = false;
		}
		pc[i] = pc[i - 1];
		if (prime[i - 1])pc[i] += i - 1;
	}
}
int main(){
	//auto begin = chrono::high_resolution_clock::now();
    //freopen("in.txt", "r", stdin);
	std::ios::sync_with_stdio(false);
	sieve(); int n; 
	while (si(n)!= EOF){ printf("%lld\n", pc[n]); }
    //auto end = chrono::high_resolution_clock::now();
	//cout << chrono::duration_cast<chrono::milliseconds>(end - begin).count() << "ms" << endl;
	return 0;
}


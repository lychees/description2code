#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;
double EPS = 1e-12;
ll mod(ll A) { return (A<0?(-A):A); }
struct PT { 
  double x, y; 
  PT() {}
  PT(double x, double y) : x(x), y(y) {}
  PT(const PT &p) : x(p.x), y(p.y)    {}
  PT operator + (const PT &p)  const { return PT(x+p.x, y+p.y); }
  PT operator - (const PT &p)  const { return PT(x-p.x, y-p.y); }
  PT operator * (double c)     const { return PT(x*c,   y*c  ); }
  PT operator / (double c)     const { return PT(x/c,   y/c  ); }
};

double dot(PT p, PT q)     { return p.x*q.x+p.y*q.y; }
double dist2(PT p, PT q)   { return dot(p-q,p-q); }
double cross(PT p, PT q)   { return p.x*q.y-p.y*q.x; }
ld ComputeSignedArea(const vector<PT> &p) {
  ld area = 0;
  for(int i = 0; i < p.size(); i++) {
    int j = (i+1) % p.size();
    area += p[i].x*p[j].y - p[j].x*p[i].y;
  }
  return area / 2.0;
}

ld ComputeArea(const vector<PT> &p) {
  return fabs(ComputeSignedArea(p));
}
//
vector<PT> pts; PT tmp;
ll n,B=0;
ld area;
int main() {
	ios::sync_with_stdio(false);cin.tie(0);
	cin>>n;
	for (int i=0;i<n;i++) {
		cin>>tmp.x>>tmp.y;
		pts.push_back(tmp);
		if (i>0) {
			B+=((ll)__gcd(mod(pts[i].x-pts[i-1].x),mod(pts[i].y-pts[i-1].y)));
		}
	}
	B+=((ll)__gcd(mod(pts[0].x-pts[n-1].x),mod(pts[0].y-pts[n-1].y)));
	area=ComputeArea(pts);B=B/2;
	cout<<(ll)(area-B+1);
}
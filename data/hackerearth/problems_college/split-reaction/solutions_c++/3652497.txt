#include <cstdio>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cctype>
#include <utility>
#include <queue>
#include <cmath>
#include <complex>
using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VPII;
typedef pair<LL, LL> PLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
typedef double DB;

#define pb push_back
#define mset(a, b) memset(a, b, sizeof a)
#define all(x) (x).begin(), (x).end()
#define bit(x) (1 << (x))
#define bitl(x) (1LL << (x))
#define sqr(x) ((x) * (x))
#define sz(x) ((int)(x.size()))
#define cnti(x) (__builtin_popcount(x))
#define cntl(x) (__builtin_popcountll(x))
#define clzi(x) (__builtin_clz(x))
#define clzl(x) (__builtin_clzll(x))
#define ctzi(x) (__builtin_ctz(x))
#define ctzl(x) (__builtin_ctzll(x))

#define X first
#define Y second

#define Error(x) cout << #x << " = " << x << endl

template <typename T, typename U> 
inline void chkmax(T& x, U y) {
	if (x < y) x = y;
}

template <typename T, typename U>
inline void chkmin(T& x, U y) {
	if (y < x) x = y;
}

const int L = 7;
const int MOD = 1e9 + 7;

int A0[L];
int a[L][L], b[L][L], A[L][L], ans[L][L];

void multi(int _a[L][L], int _b[L][L], int c[L][L]) {
	memcpy(a, _a, sizeof a);
	memcpy(b, _b, sizeof b);
	for (int i = 0; i < L; i++) {
		for (int j = 0; j < L; j++) {
			LL t = 0;
			for (int k = 0; k < L; k++) {
				t += (LL)a[i][k] * b[k][j];
				if (t > LL(1e18)) t %= MOD;	
			}
			c[i][j] = t % MOD;
		}
	}
}

int main() {

	int ncase;
	LL t;
	for (scanf("%d", &ncase); ncase--; ) {
		scanf("%lld", &t);
		if (t == 0) {
			puts("1 1");
		} else if (t == 1) {
			puts("3 3");
		} else if (t == 2) {
			puts("3 7");
		}
		if (t <= 2) continue;
		t -= 2;
		memset(A, 0, sizeof A);
		memset(ans, 0, sizeof ans);
		for (int i = 0; i < L; i++) ans[i][i] = 1;
		//f[t]
		A[0][1] = 1;
		A[0][5] = 1;
		//f[t-1]
		A[1][0] = 1;
		
		//g[t]
		A[2][4] = 1;
		A[2][1] = 1;
		A[2][5] = 1;
		//g[t-1]
		A[3][2] = 1;
		A[4][3] = 1;
		A[5][5] = 1;
		A[5][6] = 1;
		A[6][6] = 1;
		A0[0] = 3, A0[1] = 3, A0[2] = 7, A0[3] = 3, A0[4] = 1, A0[5] = 3, A0[6] = 1;
		memset(ans, 0, sizeof ans);
		for (int i = 0; i < L; i++) ans[i][i] = 1;
		for (; t; t /= 2) {
			if (t & 1) multi(ans, A, ans);
			multi(A, A, A);
		}
		LL ret1 = 0, ret2 = 0;
		for (int k = 0; k < L; k++) {
			ret1 = (ret1 + (LL)ans[0][k] * A0[k]) % MOD;
			ret2 = (ret2 + (LL)ans[2][k] * A0[k]) % MOD;
		}
		printf("%lld %lld\n", ret1, ret2);
	}

	return 0;
}

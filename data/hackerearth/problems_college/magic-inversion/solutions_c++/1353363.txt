#include<bits/stdc++.h>
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
int segtree[4000001]={0},n,a[200001],b[200001];
int sum(int l,int r,int node,int ql,int qr){
    if(l>r){
        return 0;
    }
    if(ql>r||qr<l){
        return 0;
    }
    if(l>=ql&&r<=qr){
        return segtree[node];
    }
    int mid=(l+r)>>1;
    return sum(l,mid,node*2+1,ql,qr)+sum(mid+1,r,node*2+2,ql,qr);
}
void update(int l,int r,int node,int x){//for incrementing by 1
    if(x<l||x>r){
        return;
    }
    segtree[node]++;
    if(l==r){
        return;
    }
    int mid = (l+r)>>1;
    update(l,mid,node*2+1,x);
    update(mid+1,r,node*2+2,x);
}
int main(){
    n=scan();
    for(int i=1;i<=n;a[i++]=scan());
    for(int i=1;i<=n;b[i++]=scan());
    long long ans=0;
    for(int i=n;i>=1;i--){
        ans+=(long long)sum(1,1000000,1,1,a[i]-1);
        update(1,1000000,1,b[i]);
    }
    //assert(ans<1000000000);
    long long temp=ans;
    for(long long i=2;i*i<=temp;i++){
    	if(temp%i==0){
    		printf("SIMPLE INVERSION");
    		return 0;
    	}
    }
    printf("MAGIC INVERSION");
}
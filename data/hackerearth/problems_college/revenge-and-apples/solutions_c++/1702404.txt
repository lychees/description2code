#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 2005, INF = 1E9;
int n, m;
string s[N];
int cs[N][N], dp[N][N];

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest;
    cin >> ntest;
    while (ntest--) {
    	cin >> n >> m;
    	repu(i, 0, n) {
    		cin >> s[i];
    		repu(j, 0, m) {
    			if (s[i][j] == '#') cs[i][j] = -1;
    			else cs[i][j] = s[i][j] - '0';
    		}
    	}
    	repu(i, 0, n) fill(dp[i], dp[i] + m, -INF);
    	repu(i, 0, n) {
    		if (i & 1) {
    			repd(j, m - 1, -1) {
    				if (cs[i][j] < 0) continue;
    				if (j + 1 < m) amax(dp[i][j], dp[i][j + 1] + cs[i][j]);
    				if (i) amax(dp[i][j], dp[i - 1][j] + cs[i][j]);
    			}
    		}
    		else {
    			repu(j, 0, m) {
    				if (cs[i][j] < 0) continue;
    				if (i == 0 && j == 0) dp[0][0] = cs[0][0];
    				else {
    					if (j) amax(dp[i][j], dp[i][j - 1] + cs[i][j]);
    					if (i) amax(dp[i][j], dp[i - 1][j] + cs[i][j]);
    				}
    			}
    		}
    	}
    	int ans = 0;
    	repu(i, 0, n) repu(j, 0, m) {
    		amax(ans, dp[i][j]);
    	}
    	printf("%d\n", ans);
    }
    return 0;
}

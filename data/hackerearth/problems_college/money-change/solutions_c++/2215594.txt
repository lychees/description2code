// 2015-07-28
#include <bits/stdc++.h>
#include <unordered_map>
#include <array>
#include <forward_list>
#include <unordered_set>
using namespace std;


#ifndef LOCAL
//#define LOCAL
#endif

#define SET_BIT(mask, index) (mask |= (1 << index))
#define TEST_BIT(mask, index) (mask & (1 << index))
#define CLEAR_BIT(mask, index) (mask &= ~(1 << index))
#define TOGGLE_BIT(mask, index) (mask ^= (1 << index))
const int INF = 1000000000;
const double EPS = 1.0e-11;
const int NO_VALUE = -1;
using ii = pair < int, int > ;
using ll = long long;


vector<int> coins;

ll dp[252][52];

ll countWays(int value, int type = 0) {
    if (value == 0) {
        return 1;
    }
    if (type == coins.size() || value < 0) {
        return 0;
    }
    if (dp[value][type] != -1) {
        return dp[value][type];
    }
    return dp[value][type] = countWays(value, type + 1) + countWays(value - coins[type], type);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w+", stdout);
#endif
    int amount, numTypes;
    cin >> amount >> numTypes;
    while (numTypes--) {
        int coin;
        cin >> coin;
        coins.push_back(coin);
    }

    memset(dp, -1, sizeof(dp));
    cout << countWays(amount) << "\n";


    return 0;
}

#include <bits/stdc++.h>

#define gcd __gcd
#define bitcount __builtin_popcountll
#define getcx getchar_unlocked
#define rep(i,j,n) for(i=j;i<n;i++)
#define tr(it,c) for(auto it=(c).begin();it!=(c).end();it++)
#define pb push_back
#define mp make_pair
#define uset unordered_set
#define umap unordered_map
#define fi first
#define sc second
#define ft first
#define DEBUG 0

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pill;
typedef pair<int,pi> pii;

template <class T> T& get(T &n) {
    cin>>n;
    return n;
}

#ifdef TRACE
template<class T> ostream& printContainer(ostream &o,const T &c){
    tr(it,c){
        o<<*it<<' ';
    }
    return o;
}

template<class T> ostream& operator<<(ostream &o,const vector<T> &c){return printContainer(o,c);}
template<class T> ostream& operator<<(ostream &o,const deque<T> &c){return printContainer(o,c);}
template<class T> ostream& operator<<(ostream &o,const list<T> &c){return printContainer(o,c);}
template<class T> ostream& operator<<(ostream &o,const set<T> &c){return printContainer(o,c);}
template<class T> ostream& operator<<(ostream &o,const uset<T> &c){return printContainer(o,c);}
template<class T> ostream& operator<<(ostream &o,const multiset<T> &c){return printContainer(o,c);}
template<class T,class V> ostream& operator<<(ostream &o,const map<T,V> &c){return printContainer(o,c);}
template<class T,class V> ostream& operator<<(ostream &o,const umap<T,V> &c){return printContainer(o,c);}
template<class T,class V> ostream& operator<<(ostream &o,const pair<T,V> &c){return (o<<"("<<c.ft<<","<<c.sc<<")");}

#define trace(x)                 cerr << #x << ": " << x << endl;
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;
#else
#define trace(x)
#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)
#endif

const ll hell = 1000000007;
const ll INF = (ll)hell*hell;
const int MAXN = 1e2+1;
const int MAXH = 1e3+1;
const int BLOCK = 100;
const int MAXQ = 10001;

template <class T> T fastexp(T a,T b,T mod){
    static T res;
    res=1;
    while(b){
        if(b&1)
            res= (res * a)%mod;
        a= (a*a)%mod;
        b>>=1;
    }
    return res;
}

ll N,M,Q;
int P[MAXN], H[MAXN], V[MAXH];

bool p(ll t){
    ll cost = 0,i,k;
    rep(i,0,N){
        //For each balloon, find least cost possible.
        int height = H[i];
        int distance = P[i];
        if(V[height]*distance>0||abs(V[height]*t)<abs(distance)){
            rep(k,1,M){
                //Possible height differences.
                if(height-k>=0){
                    //Valid.
                    if(V[height-k]*distance<0&&abs(V[height-k]*t)>=abs(distance)) break;
                }
                if(k+height<M){
                    //Valid.
                    if(V[height+k]*distance<0&&abs(V[height+k]*t)>=abs(distance)) break;
                }
            }
            if(k<M) cost+=k;
            else return false;
        }
    }
    if(cost>Q) return false;
    return true;
}
int main() { 
    int T,tc;
    cin>>T;
    rep(tc,1,T+1){
        int N,i;
        cin>>N;
        vector<ll> A(N),dp(N);
        rep(i,0,N){
            cin>>A[i];
        }
        dp[0] = A[0];
        rep(i,1,N){
            if(i-2>=0)
                dp[i] = max(dp[i-1],A[i]+dp[i-2]);
            else
                dp[i] = max(dp[i-1],A[i]);
        }
        cout<<"Case "<<tc<<": "<<dp[N-1]<<"\n";
    }
}

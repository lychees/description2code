#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;

#define MAX 100010
#define ll long long

int f[20][MAX];
ll a[MAX];
int b[MAX];
int n, q, t, c;
ll u, v;

int set(int f[], int idx, int val){
	while (idx <= n){
		f[idx] += val;
		idx += idx & (-idx);
	}
}

int get(int f[], int idx){
	int ret = 0;
	while (idx > 0){
		ret += f[idx];
		idx -= idx & (-idx);
	}
	return ret;
}

int numDigit(ll n){
	ll cnt = 0;
	int ret = 0;
	while (n){
		cnt |= 1LL << (n % 10);
		n /= 10;
	}
	while (cnt){
		ret += cnt & 1;
		cnt >>= 1;
	}
	return ret;
}

int main(){
	scanf("%d", &n);
	for (int i = 1; i <= n; i++){
		scanf("%lld", &a[i]);
		set(f[b[i] = numDigit(a[i])], i, 1);
	}
	
	scanf("%d", &q);
	while (q--){
		scanf("%d", &t);
		switch (t){
			case 0:
				scanf("%lld%lld", &u, &v);
				set(f[b[u]], u, -1);
				a[u] += v;
				b[u] = numDigit(a[u]);
				set(f[b[u]], u, 1);
				break;
			case 1:
				scanf("%lld%lld", &u, &v);
				set(f[b[u]], u, -1);
				a[u] = v;
				b[u] = numDigit(a[u]);
				set(f[b[u]], u, 1);
				break;
			case 2:
				scanf("%lld%lld%d", &u, &v, &c);
				printf("%d\n", get(f[c], v) - get(f[c], u - 1));
		}
	}
	return 0;
}
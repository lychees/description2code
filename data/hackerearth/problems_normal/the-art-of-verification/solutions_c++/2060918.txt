#include<bits/stdc++.h>
using namespace std;

typedef unsigned u_t;
typedef long l_t;
typedef unsigned long ul_t;
typedef long long ll_t;
typedef unsigned long long ull_t;
#define PRE_CPP do { ios_base::sync_with_stdio(0); cin.tie(0); } while(0)

enum { NONE, USR, PWD, PFL, ROL, KEY, FLD_MAX };

int main()
{
	PRE_CPP;
	const string key[FLD_MAX] = {" ", "?username=", "&pwd=", "&profile=", "&role=", "&key="};
	const size_t len[FLD_MAX] = {0, key[USR].length(), key[PWD].length(), key[PFL].length(), key[ROL].length(), key[KEY].length()};
	const string field_name[FLD_MAX] = { "", "username: ", "pwd: ", "profile: ", "role: ", "key: "};
	string field[FLD_MAX];
	
	string s;
	cin >> s;

	size_t pos = 0;
	for (size_t i = 1; i < FLD_MAX - 1; i++) {
		auto start = s.find(key[i], pos) + len[i];
		auto end = s.find(key[i+1], start);
		for (auto x = start ; x != end; ++x) {
			field[i] += s[x];
		}
		pos = start;
	}
	
	auto start = s.find(key[KEY]) + len[KEY];
	for (auto j = start ; s[j]; ++j) {
		field[KEY] += s[j];
	}
	
	for (size_t  i = 1; i < FLD_MAX; i++) {
		cout << field_name[i] << field[i] << "\n";
	}
	
 	return 0;
}

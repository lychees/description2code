using namespace std;
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#define ll long long
#define fast ios_base::sync_with_stdio(false),in.tie(0),cout.tie(0);
#define input freopen("input.in","r",stdin);
#define output freopen("output.out","w",stdout);
#define e printf("\n");
#define all(it,v) for(it=(v).begin();it!=(v).end();it++)
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define pii pair<ll,ll>
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef vector<vector<ll> > mat;
const ll mx=100001;
const ll mod=1000000007;
const ll inf=0x3f3f3f3f;
//ifstream in("input.txt");
//ofstream out("output.txt");
void solve();
int main()
{
  int t=1;
  cin>>t;
  rep(i,1,t)
  {
    solve();
  }
  return 0;
}
int n;
vector<pair<int,int> > g[5001];
bool vis[5001];
int key[5001];
class cmp
{
  public :
  bool operator()(const pair<int,int> a,const pair<int,int>b)
  {
      if(a.fi==b.fi)
        return a.se<b.se;
      return a.fi>b.fi;
  }
};
void prims(int u)
{
  memset(vis,false,sizeof vis);
  rep(i,1,n)
   key[i]=0;
  key[u]=0;
  priority_queue<pair<int,int>,vector<pair<int,int> >,cmp > pq;
  pq.push({0,1});
  while(!pq.empty())
  {
    u=pq.top().se;
    pq.pop();
    vis[u]=true;
    for(int i=0;i<g[u].size();i++)
    {
      int w=g[u][i].fi;
      int v=g[u][i].se;
          if(!vis[w]&&key[w]<v)
          {
            key[w]=v;
            pq.push({key[w],w});
          }
    }
  } 
  ll sum=0;
  rep(i,1,n)
   sum+=key[i];
  printf("%lld\n",sum);
}
void solve()
{
   int i,j,x,y,w,m;
   cin>>n>>m;
   rep(i,1,n)
    g[i].clear();  
   while(m--)
   {
     cin>>x>>y;
     g[x].pb({y,1});
     g[y].pb({x,1});
   } 
   prims(1);
   return ;
}




























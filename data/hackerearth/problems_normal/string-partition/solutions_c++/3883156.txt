#include <iostream>
#include <stdio.h>
#include <string.h>

using namespace std;

#define max(a,b) ((a)>(b)?(a):(b))

	static int lenZnc(int znc) 
	{
             int count = 0;
             while(znc >0)
             {
                    znc /=10;
                    count++;
             }
             return count;
    }
	
	static void funWithDP(char* arr, int strlen, int n, long znc) 
	{
            long long dp[300][300] = {0};

			for( int j = 0 ; j < 300 ; j++ )
			   for( int k = 0 ; k < 300 ; k++ )
			   		dp[j][k] = -1;
			 
			//for 1st row of n = 1
			long long num = 0;
             for (int j = 1; j <= strlen; j++) 
             {          
                    int k = arr[j-1] -'0';
                    num = num*10 + k;
                           
					if(num <= znc)
                        dp[1][j] = num;
                    else
                    	break;
             }
             
             int lenDNC = lenZnc(znc);;
             for (int i = 2; i <= n; i++) {
                    for (int j = i; j <= strlen; j++) {
                           long long num = 0;
                           int cbIndex = j;
                           int powerCount = 0;
                           long long power = 1;
						   
						   /*modify powerCount <= lenDNC*/
                           while(num <=znc && cbIndex-1 >= 0 ){
                                 int k = arr[(cbIndex-1)] - '0';
                                 num += k* power;
                                 
                                 if( power <= znc )
                                 	power *= 10;
								 
                                 if(num <= znc && 
                                        dp[(i-1)][(j-1 -powerCount)] != -1  )
                                 {
                                        dp[i][j] = max(dp[(i-1)][(j-1 -powerCount)] + num, dp[i][j] );
                                 }
                                 		
                                 powerCount++;
                                 cbIndex--;
                           }
                    }
                    
             }
      //       if(dp[n][strlen] != -1)
                printf("%lld\n", dp[n][strlen] );
      //       else
			 {
      //          printf("abort mission: food\n" );
             }
             
             
       /*     for( int j = 1 ; j < n+1 ; j++, printf("\n") )
			   for( int k = 1 ; k <= strlen ; k++ )
			   {
			   		printf("%d ", dp[j][k]);
			   }
*/
       }
       
int main() {
    
    int t;
    scanf("%d", &t);
    
    for( int i=0 ; i < t; ++i)
    {
        int n, dzc;
        char str[300] = {0};
        scanf("%d%d",&n,&dzc);
        scanf("%s",str);
        
        funWithDP(str, strlen( str ), n, dzc);
        
    }
	// your code goes here
	return 0;
}


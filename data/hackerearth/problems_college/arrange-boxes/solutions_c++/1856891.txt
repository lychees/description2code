
// arr[i] > arr[j]   such that i < j


#include <iostream>
#include <queue>
#include <algorithm>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <fstream>
#include <string.h>
#include <vector>
#include <set>
#include <stdlib.h>
#include <set>
#include <map>
#define ll long long int
#define IN_M 1061109567
#define get getchar
#define maxi 100000005

using namespace std;

ll final_ans = 0;
ll arr[200005];
ll temp1[200005];
ll temp2[200005];

ll merge(ll low, ll high, ll mid)
{
	ll brr[100005];
	
	ll i = low;
	ll j = mid + 1;
	ll index = 0;
	ll inv = 0;
	ll ct = 0;
		
	while (i <= mid || j <= high) {
		
		if (i > mid) {
			brr[index] = arr[j];
			index++;
			j++;
		}
		
		else if (j > high) {
			brr[index] = arr[i];
			i++;
			index++;
		}
		
		else if (arr[i] > arr[j]) {
			ct += mid - i + 1;
			//cout << ct << endl;
			brr[index] = arr[j];
			j++;
			index++;
		}
		
		else {
			brr[index] = arr[i];
			i++;
			index++;	
		}
		
	}
	
	ll tempo = 0;
	
	for (ll i = low; i <= high; i++) {
		arr[i] = brr[tempo];
		tempo++;
	}
	
	return ct;
}

void mergesort(ll low, ll high)
{
	ll mid = (low + high) / 2;
	//cout << low << "   " << high << endl;
	
	if (low > high) {
		return;
	}
	
	else if (low == high) {
		return;
	}
	else {
		mergesort(low, mid);
		mergesort(mid + 1, high);
		//cout << "aafdsad\n";
		final_ans += merge(low, high, mid);
	}
}

int main()
{
	ll t;
	
	cin >> t;
	
	while (t--) {
		ll n;
		cin >> n;
		
		
		final_ans = 0;
		
		ll index2[100005];
		
		for (ll i = 0; i < n; i++) {
			cin >> temp1[i];
			temp1[i]--;
		}
		
		for (ll i = 0; i < n; i++) {
			cin >> temp2[i];
			temp2[i]--;
			index2[temp2[i]] = i;
		}
		
		for (ll i = 0; i < n; i++) {
			arr[i] = index2[temp1[i]];
		}
		
		//cout << "sfsfsf" << endl;
		mergesort(0, n - 1);
		cout << final_ans << endl;	
	}
	
}
#include <iostream>
#include <fstream>
#include <sstream>

#include <vector>
#include <set>
#include <bitset>
#include <map>
#include <deque>
#include <string>

#include <algorithm>
#include <numeric>

#include <cstdio>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cmath>

#define pb push_back
#define pbk pop_back
#define mp make_pair
#define fs first
#define sc second
#define all(x) (x).begin(), (x).end()
#define foreach(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); ++i)
#define len(a) ((int) (a).size())

#ifdef CUTEBMAING
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...) 42
#endif

using namespace std;

typedef long long int64;
typedef long double ld;
typedef unsigned long long lint;

const int inf = (1 << 30) - 1;
const int64 linf = (1ll << 62) - 1;
const int N = 1e6 + 100;
const int M = 1e9 + 7;

struct rmq {
	int n;
	int rmqd[N * 4], wh[N];

	rmq() {}

	void make_rmq(int i, int l, int r) {
		rmqd[i] = 0;
		if (l == r) {
			return void (wh[l] = i);
		}
		make_rmq(i * 2, l, (l + r) / 2);
		make_rmq(i * 2 + 1, (l + r) / 2 + 1, r);
	}

	void update(int index, int add) {
		int i = wh[index];
		rmqd[i] += add;
		for (i >>= 1; i; i >>= 1) {
			rmqd[i] = rmqd[i * 2] + rmqd[i * 2 + 1];
		}
	}

	int getValue(int i, int ll, int rr, int l, int r) {
		if (ll > r || rr < l) {
			return 0;
		}
		if (l <= ll && rr <= r) {
			return rmqd[i];
		}
		return getValue(i * 2, ll, (ll + rr) / 2, l, r) + getValue(i * 2 + 1, (ll + rr) / 2 + 1, rr, l, r);
	}

	int getValue(int l, int r) {
		return getValue(1, 0, n - 1, l, r);
	}

	void build(int n) {
		this->n = n;
		make_rmq(1, 0, n - 1);
	}
};

int n;
int a[N];
int firstPos[N], secondPos[N];
rmq rmq1, rmq2;

void update(int i) {
	if (firstPos[a[i]] == i) {
		rmq2.update(a[i], -1);
		rmq2.update(a[i] + n, -1);
		rmq1.update(a[i], 1);
		rmq1.update(a[i] + n, 1);
	} else {
		rmq2.update(a[i], 1);
		rmq2.update(a[i] + n, 1);
	}
}

int power(int a, int b) {
	if (b == 0) {
		return 1;
	}
	int result = power(a, b / 2);
	result = (1ll * result * result) % M;
	if (b & 1) {
		result = (1ll * result * a) % M;
	}
	return result;
}

int main() {
	scanf("%d", &n);
	if (n == 1) {
		cout << 1 << endl;
		return 0;
	}
	for (int i = 0; i < 2 * n; i++) {
		scanf("%d", &a[i]);
		a[i]--;
	}
	for (int i = 0; i < 2 * n; i++) {
		secondPos[a[i]] = i;
	}
	for (int i = 2 * n - 1; i >= 0; i--) {
		firstPos[a[i]] = i;
	}
	rmq1.build(2 * n), rmq2.build(2 * n);
	int answer = 0;
	for (int i = 2 * n - 1; i >= 0; i--) {
		answer = (answer + 1ll * rmq2.getValue(-inf, a[i] - 1) * power(2, n - 2)) % M;
		answer = (answer + 1ll * rmq2.getValue(-inf, a[i] + n - 1) * power(2, n - 2)) % M;
		answer = (answer + 1ll * rmq1.getValue(-inf, a[i] - 1) * power(2, n - 1)) % M;
		answer = (answer + 1ll * rmq1.getValue(-inf, a[i] + n - 1) * power(2, n - 1)) % M;
		if (firstPos[a[i]] == i) {
			answer = (answer + power(2, n - 2)) % M;
		}
		update(i);
	}
	cout << answer << endl;
    return 0;
}

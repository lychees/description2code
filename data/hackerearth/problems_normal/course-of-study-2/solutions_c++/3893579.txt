#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <utility>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>

using namespace std;

#define SCD(t) scanf("%d",&t)
#define SCLD(t) scanf("%ld",&t)
#define SCLLD(t) scanf("%lld",&t)
#define SCC(t) scanf("%c",&t)
#define SCS(t) scanf("%s",t)
#define SCF(t) scanf("%f",&t)
#define SCLF(t) scanf("%lf",&t)
#define PRD(t) printf("%d",t)
#define PRLD(t) printf("%ld",t)
#define PRLLD(t) printf("%lld",t)
#define PRC(t) printf("%c",t)
#define PRS(t) printf("%s",t)
#define PRF(t) printf("%f",t)
#define PRLF(t) printf("%lf",t)
#define nl printf("\n")
#define space printf(" ")
#define FOR(i, j, k, in) for (int i=j ; i<k ; i+=in)
#define RFOR(i, j, k, in) for (int i=j ; i>=k ; i-=in)
#define REP(i, j) FOR(i, 0, j, 1)
#define RREP(i, j) RFOR(i, j, 0, 1)

//#define clear(a) memset((a),0,sizeof(a))
#define mem(x,val) memset((x),(val),sizeof(x));
#define rite(x) freopen(x,"w",stdout);
#define read(x) freopen(x,"r",stdin);
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())
#define sqr(x) ((x)*(x))
#define tl(x) (int)ceil(x) //round up to int
#define tx(x) (int)floor(x) //round down to int

#define ins insert
#define MP make_pair
#define pb push_back
#define clr clear()
#define xx first
#define yy second

#define inf (1<<30)
#define eps 1e-9
#define pi 3.1415926535897932384626433832795
#define mod 1000000007

typedef long long ll;
typedef unsigned long long ull;
typedef string st;

typedef vector<int> vi;
typedef vector<st> vs;
typedef map<int,int> mii;
typedef map<st,int> msi;
typedef set<int> si;
typedef set<st> ss;
typedef pair<int,int> pii;
typedef vector<pii> vpii;

#define constraint 100001

//used to calculate modular inverse when mod == prime number
ll invfact[constraint];// stores 1/(0!) --> 1/(100000!)
ll modpow(ll base , ll expo) {
    ll ans = 1;
    while (expo) {
        if (expo & 1) {
            ans = (ans * base) % mod;
            }
        expo = expo >> 1; // equivalent to expo >> 1;
        base = (base * base ) % mod;

        }
    return ans;
    }



int main() {
//    read("in1.txt");
    //rite();

    int i, j , k;//counters

    //PRE-CALCULATION
    //calculates 0! --> (10^5)!
    ll fact[constraint];//stores fact from 0! --> 100000!
    fact[0] = fact[1] = 1;

    FOR(i,2,constraint,1) {
        fact[i] = (fact[i-1] * i) % mod;
        }

    //calculates 1/(0!) --> 1/ (100000!) using the fact that mod = prime number
    invfact[100000] = modpow(fact[100000],mod-2);
    invfact[0] = 1;

    RFOR(i,99999,1,1) {
        invfact[i] = ((i+1) * invfact[i+1]) % mod;
        }

    int n;
    SCD(n);

    map <int,int> repeat; //count the number of courses with the same conceptual points
    map <int,int>::const_iterator it;

    int m[constraint]; // number of different courses under ith faculty
    int points;
    int temp;
    ll total = 0;
    ll ans = 1;
    //calculate repetitions of courses in the same dept with equal conceptual points
    REP(i, n) {
        SCD(m[i]);
        total += m[i];

        repeat.clear();
        REP(j,m[i]) {
            SCD(points);
            repeat[points] += 1;
            }
        for (it = repeat.begin() ; it != repeat.end() ; ++it) {
            temp = it->second;
            if (  temp > 1) {
                ans = (ans * fact[temp]) % mod;
                }
            }
        }

     //calculate the nCr part
     REP( i, n){
     ans = (ans * invfact[m[i]]) % mod;
     }

     ans = (ans * fact[total]) % mod;

     PRLLD(ans);

    return 0;
    }

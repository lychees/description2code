#include<bits/stdc++.h>
using namespace std;
int n,q;
int par[100005];
int size[100005];
int find(int x)
{   if(par[x]!=x)
    return find(par[x]);
    else
    return x;
}

void merge(int x,int y)
{   int x1=find(x);
    int y1=find(y);
    if(x1==y1)
    return;
    if(size[x1]>=size[y1])
    {   par[y1]=x1;
       size[x1]+=size[y1];
	}
	else
	{   par[x1]=y1;
	    size[y1]+=size[x1];
	}
}
map<int,int> m;
set<int> s;
int main()
{    scanf("%d %d",&n,&q);
     for(int i=1;i<=n;i++)
     {    par[i]=i;
         size[i]=1;
	 }
	 m[1]=n;
	 s.insert(1);
	 int maxsize=1;
	 int minsize=1;
	 for(int i=1;i<=q;i++)
	 {   int x,y;
	     scanf("%d %d",&x,&y);
	     int x1=find(x);
	     int y1=find(y);
	     if(x1!=y1)
	     {    if(size[x1]>=size[y1])
	         {   par[y1]=x1;
			      m[size[y1]]--;
	            m[size[x1]]--;
	            if(m[size[y1]]==0)
	            s.erase(size[y1]);
	            if(m[size[x1]]==0)
	            s.erase(size[x1]);
	            size[x1]+=size[y1];
	            m[size[x1]]+=1;
	            s.insert(size[x1]);
			 }
			 else
			 {   par[x1]=y1;
			      m[size[x1]]--;
			      m[size[y1]]--;
			      if(m[size[x1]]==0)
			      s.erase(size[x1]);
			      if(m[size[y1]]==0)
			      s.erase(size[y1]);
			      size[y1]+=size[x1];
			      m[size[y1]]+=1;
			      s.insert(size[y1]);
			 }
		 }
		 set<int>:: iterator it1;
		 set<int>:: reverse_iterator it2;
		 it1=s.begin();
		 it2=s.rbegin();
		 printf("%d\n",(*it2)-(*it1));
	 }
	 return 0;
}
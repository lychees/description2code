#include <bits/stdc++.h>

#define mod 1000000007

using namespace std;

long long int bbaa (long long int p1, long long int popo, long long int mii) {
	
        if (!popo) {
			return 1 % mii;	
        }
        if (popo & 1) {
        	return bbaa(p1, popo - 1, mod) * p1 % mii;
        }
        
        long long int res = bbaa(p1 ,popo >> 1, mii);
        return (res * res) % mii;
}

vector <long long int> p;
vector <long long int> q;

long long int factorial [1000001];
long long int inversefactorial[1000001];

int main() {
	
	factorial[0] = 1;
	long long int i;
	long long int n;
	long long int j;
	long long int s;
	long long int a;
	
	s = 0;
	
	for(i = 1; i <= 100001 ;i++){
	    factorial [i] = (factorial [i-1]*i)%mod;
	}
	
	for(i = 1; i <= 100001 ;i++){
	    inversefactorial[i] = (bbaa(factorial[i],mod-2,mod)) % mod;
	}

	
	cin >> n;
	
	
	for(i = 1;i <= n; i++){
		
	    long long int m;
	    scanf("%lld",&m);
	    s+=m;
	    p.push_back(m);
	    vector <long long int> vec;
	    for(j = 0;j < m; j++){
	        scanf("%lld",&a);
	        vec.push_back(a);
	    }
	    
	    sort(vec.begin(),vec.end());
	    
	    long long int c = 1;
	    
	    for(j = 1; j < vec.size();j++){
	    	
	        if(vec[j] == vec[j-1]){
	            c++;
	        }
	        else{
	            q.push_back(c);
	            c = 1;
	        }
	    }
	    q.push_back(c);
	}
	/*for(i = 0; i < p.size();i++){
	    ans = (ans*inversefactorial[p[i]])%mod;
	}
	for(i = 0; i < q.size();i++){
	    ans = (ans*factorial[q[i]])%mod;
	}*/
	long long int ans = factorial[s];
	for(i = 0; i < p.size();i++){
	    ans = (ans*inversefactorial[p[i]])%mod;
	}
	for(i = 0; i < q.size();i++){
	    ans = (ans*factorial[q[i]])%mod;
	}
	
	cout << ans << endl;
	
	return 0;
}

/*
 *ID:   Cowboy
 *TASK:
 *Judge:
 */
#include <bits/stdc++.h>
#define INF 0x7fffffff
#define INFLL 1e17
#define PI 2*acos(0.0)
using namespace std;

#define FS first
#define SC second
#define PB(t) push_back(t)
#define ALL(t) t.begin(),t.end()
#define MP(x, y) make_pair((x), (y))
#define Fill(a,c) memset(&a, c, sizeof(a))

typedef pair<int, int> II;
typedef vector<int> VI;
typedef vector<II> VII;

void printMat( vector<VI>mat, string msg ){
    cout<<msg<<":\n";
    for( int i=0; i<mat.size(); i++ ){
        for( int j=0; j<mat[i].size(); j++ ){
            cout<<mat[i][j];
        }
        cout<<"\n";
    }
}
int N, M;
vector< VI >links;
int posX[] = {-1, 0, 1, 0};
int posY[] = {0, 1, 0, -1};

bool isValid( int x, int y){
    return x>=0 && x<N && y>=0 && y<M;
}

void BFS(int x, int y){
    int nx, ny;
    queue<int>Q;
    Q.push( x );
    Q.push( y );
    
    while( !Q.empty() ){
    	x = Q.front();Q.pop();
    	y = Q.front();Q.pop();
    	if( links[x][y]==0 ){
    		continue;
    	}
		links[x][y] = 0;
		for( int i=0; i<4; i++){
		    nx= x+posX[i];
		    ny= y+posY[i];
		    if( isValid(nx, ny) && links[nx][ny] ){
		       	//DFS(nx, ny);
		        Q.push( nx );
		        Q.push( ny );
		    }
		}
    }
}

int main( ){
#ifndef ONLINE_JUDGE
   //freopen("input.txt", "rt", stdin);
   //freopen("output.txt", "wt", stdout);
#endif
    int cas, n, m;
    for( cin>>cas; cas; --cas){
        cin>>n>>m;
        vector< string >tab(n);
        N = 2*n+1;
        M = 2*m+1;
        links.assign(N, VI(M, 0) );

        for( int i=0; i<n; i++){
            cin>>tab[i];
            for( int j=0; j<m ; j++){
                if( i>0 ){
                    if( tab[i-1][j]!=tab[i][j] ){
                        for( int k=2*j; k<=2*j+2; k++)
                            links[2*i][k]=1;
                    }
                }
                if( j>0 ){
                    if( tab[i][j-1]!=tab[i][j] ){
                        for( int k=2*i; k<=2*i+2; k++)
                            links[k][2*j]=1;
                    }
                }
            }
        }
        //printMat(links, "Links");

        for( int j=0; j< M; j++){
            if( links[0][j]==1){
                BFS(0, j);
            }
            if( links[N-1][j]==1){
                BFS(N-1, j);
            }
        }
        for( int i=0; i<N; i++){
            if( links[i][0]==1){
                BFS(i, 0);
            }
            if( links[i][M-1]==1){
                BFS(i, M-1);
            }
        }

        int res = 1;
        for( int i=0; res && i<N; i++){
            for( int j=0; res && j<M; j++){
                if( links[i][j] ){
                    res = 0;
                }
            }
        }

        if( res ){
            cout<<"YES\n";
        } else {
            cout<<"NO\n";
        }
    }
return 0;
}

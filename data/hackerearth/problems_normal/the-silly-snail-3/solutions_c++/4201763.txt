#include<iostream>
#include<cstdio>
#include<vector>
#include<cstdlib>
#include<algorithm>
#include<climits>
#include<cstring>
#include<cmath>
#include<set>
#include<queue>
#include<stack>
#include<string>
#include<map>
using namespace std;
#define MAX 1000001
int tree[MAX]={0};
void preorder(int idx)
{
if(tree[idx]==0)
return;
cout<<tree[idx]<<" "; // print the current node
preorder(2*idx); // recursive call for left subtree
preorder(2*idx+1); // recursive call for right subtree
}
int* arr[MAX];
int main()
{
int t;
cin>>t;
while(t--)
{ memset(tree,0,sizeof(tree));
int n;
cin>>n;
if(n == 0)
{
cout<<1<<endl;
continue;
}
for(int i = 0 ; i<MAX; i++) // arr[i] stores the address of the node with value i in tree[]
arr[i] = NULL;
int x,y,z;
for(int j = 0 ; j<n ; j++) // creating the tree
{
cin>>x>>y>>z;
if(j == 0)
{
tree[1] = x;
arr[x] = &tree[1];
}
int idx = arr[x]-tree;
if(y>0) // assigning the left child at 2*idx
{
tree[2*idx] = y;
arr[y] = &tree[2*idx];
}
if(z>0) // assigning the right child at 2*idx+1
{
tree[2*idx+1] = z;
arr[z] = &tree[2*idx+1];
}
}
preorder(1);
cout<<endl;
}
return 0;
}
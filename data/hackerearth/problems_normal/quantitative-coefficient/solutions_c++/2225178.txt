/*
    kruskal's algorithm implimentation

    Logic:
    1. Sort the edges by their minimum weight
    2. Select the min weight edge
    3. chck if loop is formed using union-find/DIsjoint set algorithm
*/

#include<iostream>
#include<algorithm>
#include<vector>
#include<math.h>

using namespace std;
const int MAX = 1e6 + 5;
int id[MAX], nodes, edges;
pair <long long, pair< int, int > > p[MAX];
long long mod = pow(10, 9)+7;


void initialize(){
    for(int i=0; i<MAX; i++)
        id[i] = i;
}

int root(int x){
    while(id[x] != x){
        id[x] = id[id[x]];
        x = id[x];
    }
    return x;
}

void union1(int x, int y){
    //not considering weight for simplicity
    int p = root(x);
    int q = root(y);
    id[p] = id[q];
}

long long kruskals(pair <long long, pair<int, int> > p[]){
    long long minCost=1, cost;
    int x, y;
    for(int i=0; i < edges; ++i){
        x = p[i].second.first;
        y = p[i].second.second;
        cost = p[i].first;
        int xx = root(x);
        int yy = root(y);
        if (xx!=yy){
            minCost *= cost;
            minCost %= mod;
            union1(x, y);
        }
    }
    return minCost;
}

int main(){
    int x, y, t;
    long long weight, cost, minimumCost;
    cin>>t;
    while(t-->0){
        initialize();
        cin >> nodes >> edges;
        for(int i = 0;i < edges;++i)
        {
            cin >> x >> y >> weight;
            p[i] = make_pair(weight, make_pair(x, y));
        }
        // Sort the edges in the ascending order
        sort(p, p + edges);
        minimumCost = kruskals(p);
        cout << minimumCost<<endl;
    }
    return 0;
}

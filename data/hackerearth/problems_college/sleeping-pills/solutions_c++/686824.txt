#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#define M 1000000007

using namespace std;


inline void fi(long long *a)
{
 register char c=0;
 while (c<33) c=getchar_unlocked();
 *a=0;
 int tmp = 0;
 while (c>33)
 {
     if ( c == 45 ) tmp = 1;
     else *a=*a*10+c-'0';
     c=getchar_unlocked();
 }
 if ( tmp == 1 ) *a = 0-(*a);
}

long long fast_pow(long long a, long long b)
{
	long long res = 1;
	while ( b > 0 ) {
		if ( b&1 ) res = (res*a)%M;
		a = (a*a)%M;
		b >>= 1;
	}
	return res;
}

long long modInverse(long long a, long long p) {
    //calculates the modular multiplicative of a mod m.
    //(assuming p is prime).
    return fast_pow(a, p-2);
}

long long C(long long n, long long k)
{
	if ( n < k ) return 0;
	if ( n == k ) return 1;

    long long numerator = 1; // n * (n-1) * ... * (n-k+1)
    for (long long i=0; i<k; i++) {
        numerator = (numerator * (n-i) ) % M;
    }
    
    long long denominator = 1; // k!
    for (long long i=1; i<=k; i++) {
        denominator = (denominator * i) % M;
    }
    
    // numerator / denominator mod p.
    return ( numerator* modInverse(denominator,M) ) % M;
}

int main()
{
	long long m,n,sum,x,t;
	fi(&t);
	while ( t-- ) {
        fi(&n), fi(&m);
		sum = 0;
		for ( int i = 0; i < n; i++ ) fi(&x), sum+= x;
		long long ans = C(m-sum+n-1,n-1);
		printf("%lld\n", ans);
	}
	return 0;
}

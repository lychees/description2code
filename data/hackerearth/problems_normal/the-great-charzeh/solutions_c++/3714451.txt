#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second
#define INPUT freopen("clash.inp","r",stdin)
#define OUTPUT freopen("clash.out","w",stdout)
#define FOR(i,l,r) for(auto i=(l);i<=(r);i++)
#define REP(i,l,r) for(auto i=(l);i<(r);i++)
#define FORD(i,l,r) for(auto i=(l);i>=(r);i--)
#define REPD(i,l,r) for(auto i=(l);i>(r);i--)
#define ENDL printf("\n")
#define debug 1

typedef long long ll;
typedef pair<int,int> ii;

const int inf=1e9;
const int MOD=1e9+7;
const int N=3e2+10;

int n,m,n1,a[N],b[N<<1],p[N<<1];
struct maxmatch{
    vector <int> v[N];
    int match[N],h[N],s[N];
    void reset(){
        REP(i,0,n) v[i].clear();
    }
    bool DFS(int x){
        for(auto y:v[x]) if (!h[y]){
            h[y]=1;
            bool ok=0;
            if (match[y]==-1) ok=1;
            else if (DFS(match[y])) ok=1;
            if (ok){
                match[y]=x;
                return 1;
            }
        }
        return 0;
    }
    int answer(){
        memset(match,-1,sizeof(match));
        int top=n;
        FOR(i,1,n) s[i]=i-1;
        while (1){
            memset(h,0,sizeof(h));
            int old=top;
            FORD(i,top,1) if (DFS(s[i])) swap(s[i],s[top--]);
            if (top==old) break;
        }
        return n-top;
    }
}mgr;
void prepare(){
    scanf("%d%d",&n,&m);
    REP(i,0,n) scanf("%d",a+i);
    REP(i,0,n+m-1) scanf("%d",b+i);
    FOR(i,1,n+m-1) p[i]=b[i-1];
    sort(p+1,p+n+m);
    n1=unique(p+1,p+n+m)-p-1;
    REP(i,0,n+m-1) b[i]=lower_bound(p+1,p+n1+1,b[i])-p;
//    cout<<n1<<'\n';
//    FOR(i,1,n1) cout<<p[i]<<" \n"[i==n1];
//    REP(i,0,n+m-1) cout<<b[i]<<" \n"[i==n+m-2];
}
int solve(){
    int L=1,R=n1;
    while (L<=R){
        int mid=(L+R)/2;
        mgr.reset();
        REP(i,0,n)
            REP(j,0,n) if (b[j+a[i]]<=mid)
                mgr.v[i].push_back(j);
        if (mgr.answer()>=n) R=mid-1;
        else L=mid+1;
    }
    return p[L];
}
int main(){
//    freopen("input.inp","r",stdin);
    prepare();
    cout<<solve();
}

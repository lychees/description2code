#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}

void add ( int i,int v, int N, vector<int> &t ) {
    int p=1;
    int l=0;
    int r=N;
    int split=N/2;
    while ( p<N ) {
        if ( i>=split ) {
            p=2*p+1;
            l=split;

        } else {
            t[2*p+1]+=v;
            r=split;
            p=2*p;
        }
        split= ( r+l ) /2;
    }
    t[p]+=v;

}
int get ( int i,int N,const vi &t ) {
    int p=1;
    int l=0;
    int r=N;
    int split=N/2;
    int v=0;
    while ( p<N ) {
        v+=t[p];
        if ( i>=split ) {
            p=2*p+1;
            l=split;
        } else {
            r=split;
            p=2*p;
        }
        split= ( r+l ) /2;
    }
    v+=t[p];
    return v;
}
// void dPos(vi &pos,int N,int q, vi &v){
//    for(int i=0;i<N;i++)
//             cout<<i+1<<","<<get(pos[i],q,v)<<" ";
//         cout<<endl;
//     
// }
//https://www.hackerearth.com/june-clash-15/algorithm/hard-job/
int main() {
    ios_base::sync_with_stdio ( false );
    int N,M;
    cin >>N>>M;
    int q=1;
    while ( q<N+2*M )
        q*=2;
    vi v ( 2*q,0 );
    for ( int i=0; i<N; i++ )
        v[q+M+i]=i;
    for ( int i=q+M+N; i<2*q; i++ )
        v[i]=N;
    vi pos ( N );
    rep ( i,N ) {
        int tmp;
        cin>>tmp;
        pos[tmp-1]=M+i;
    }
    int mini=M;
    int maxi=M+N;
    ll sum=0;
    for ( int i=0; i<M; i++ ) {
        int a;
        char c;
        cin>>a>>c;
        a--;
        int p=pos[a];
        int val=get ( p,q,v );
        int acc=min ( val,N-val-1 );
         sum+=acc;
        add ( p+1,-1,q,v );
        if ( c=='r' )
            p=maxi++;
        else p=--mini;
        pos[a]=p;
        add ( p+1,1,q,v );
    }
    cout<<sum<<endl;
}

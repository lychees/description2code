/***********************
 	
  	root8950

***********************/

#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ppii pair< pii,pii >
#define ppll pair< pll,pll >

#define ft first
#define sd second
#define mp make_pair
#define pb push_back

#define root 1
#define lft 2*idx
#define rgt 2*idx+1
#define cllft lft,st,mid
#define clrgt rgt,mid+1,ed

#define inf INT_MAX/2
#define linf LLONG_MAX/2

#define all(p) p.begin(),p.end()
#define set(p) memset(p, -1, sizeof(p))
#define clr(p) memset(p, 0, sizeof(p))
#define mem(p, v) memset(p, v, sizeof(p))
#define cpy(d, s) memcpy(d, s, sizeof(s))
#define asst(X,L,R) assert(X >= L && X <= R)

#define f_in(st) freopen(st,"r",stdin)
#define f_out(st) freopen(st,"w",stdout)

/*
#define gc getchar_unlocked
int rd_int(){ int num=0; char c=gc(); bool flag=0; while(!((c>='0' & c<='9') || c == '-')) c=gc(); if(c=='-'){ flag=1; c=gc(); } while(c>='0' && c<='9'){ num=(num<<1)+(num<<3)+c-'0'; c=gc(); } if(flag) return -num; return num; }
#define pc putchar_unlocked
void wr_int(int num){ if(num<0){pc('-');num=-num;} char snum[20];int i=0;do{snum[i++]=num%10+48;num/=10;}while(num);i--;while(i>=0){pc(snum[i--]);}pc('\n');}
*/

template <class T> T max(T a,T b,T c){return ( ( a > b ) ? ( ( a > c) ? a : c ) : ( ( b > c ) ? b : c ) );}
template <class T> T min(T a,T b,T c){return ( ( a < b ) ? ( ( a < c) ? a : c ) : ( ( b < c ) ? b : c ) );}
// compiling with gcc11 or above
// g++ -std=c++0x
// PIE is defined as M_PI

/////////////////////////////////////////////////////////////////////////MACRO ENDS//////////////////////////////////////////////////////////////////////////

const int MOD = 1000000000 + 7 ;
const int MAXN = 100000 + 9 ;

int n;

class node{
	public:
	ll total_sm, bst_sm, lft_bst_sm, rgt_bst_sm;
	bool setbit;
	node(){
		total_sm=0;
		bst_sm=lft_bst_sm=rgt_bst_sm=-linf;
		setbit=1;
	}
};

vector<node> tree(2e6);

inline node merge(node a,node b){
	struct node combo;
	combo.total_sm = a.total_sm + b.total_sm;
	ll midsum = a.rgt_bst_sm + b.lft_bst_sm;
	combo.bst_sm = max(a.bst_sm , b.bst_sm , midsum);
	if(a.setbit){
		combo.lft_bst_sm=a.lft_bst_sm;
	}
	else combo.lft_bst_sm= max(a.lft_bst_sm , a.total_sm + b.lft_bst_sm );
	if(b.setbit){
		combo.rgt_bst_sm=b.rgt_bst_sm;
	}
	else combo.rgt_bst_sm=max(b.rgt_bst_sm , b.total_sm + a.rgt_bst_sm);
	combo.setbit=(a.setbit|b.setbit);
	return combo;
}

inline void build(int idx,int st,int ed,vector<int> &vec){
	if(st == ed){
		tree[idx].bst_sm = tree[idx].total_sm = tree[idx].lft_bst_sm = tree[idx].rgt_bst_sm = vec[st];
		tree[idx].setbit=0;
	}
	else{
		int mid=(st+ed)/2;
		build(cllft,vec);
		build(clrgt,vec);
		tree[idx]=merge(tree[lft],tree[rgt]);
	}
}

inline node query(int idx,int st,int ed,int l,int r){
	node temp;
	if( st > ed || st > r || ed < l){
		return temp;
	}
	if(st>=l && ed<=r){
		return tree[idx];
	}
	int mid=(st+ed)/2;
	return merge( query(cllft,l,r) , query(clrgt,l,r) );
}

inline void update(int idx,int st,int ed,int pos){
	node temp;
	if(st==ed){
		tree[idx]=temp;
	}
	else{
		int mid=(st+ed)/2;
		if(pos<=mid){
			update(cllft,pos);
		}
		else{
			update(clrgt,pos);
		}
		tree[idx]=merge(tree[lft],tree[rgt]);
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int t=1;
	//cin >> t;
	while(t--){
		int q;
		cin >> n >> q;
		vector<int> vec(n);
		vector< pii > a(n);
		for(int i=0;i<n;i++){
			cin >> vec[i];
			a[i].ft=vec[i];
			a[i].sd=i;
		}
		sort(all(a));
		build(1,0,n-1,vec);
		vector< pii > queries(q);
		for(int i=0;i<q;i++){
			cin >> queries[i].ft;
			queries[i].sd=i;
		}
		sort(all(queries));
		int i,j;
		i=q-1;
		j=n-1;
		vector<ll> ans(q);
		while(i >= 0){
			int x=queries[i].ft ;
			while(j >= 0 && a[j].ft > x){
				update(1,0,n-1,a[j].sd) ;
				j--;
			}
			ans[queries[i].sd] = query(1,0,n-1,0,n-1).bst_sm;
			i--;
		}
		for(int i=0;i<q;i++){
			if( ans[i] == -linf ){
				cout << "No Solution\n";
			}
			else{
				cout << ans[i] << "\n";
			}
		}
	}
	return 0;
}

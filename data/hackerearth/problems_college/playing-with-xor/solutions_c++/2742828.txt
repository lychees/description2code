#include<bits/stdc++.h>

#define _ ios::sync_with_stdio(false);
#define INF (1 << 30)
#define ll_INF (1ll << 60)
#define ll long long
#define mp make_pair
#define pb push_back
#define eb emplace_back
#define mt make_tuple
#define pii pair<int,int>
#define mem(x,a) memset(x, a, sizeof(x))
#define SWAP(a,b) tie(a,b) = mt(b,a)
#define rep(i, begin, endd) for (__typeof(endd) i = (begin) - ((begin) > (endd)); i != (endd) - ((begin) > (endd)); i += 1 - 2 * ((begin) > (endd)))
inline ll Power(int b, int p) { ll ret = 1; for ( int i = 1; i <= p; i++ ) ret *= b; return ret; }

#define N 2002
/*sort(begin(t), end(t), [](pii a, pii b){
    if(a.first < b.first) return true;
    if(a.first == b.first) return(a.second < b.second);
    return false; 
});*/
using namespace std;
set<int> prime;
void markMultiples(bool arr[], int a, int n)
{
    int i = 2, num;
    while ( (num = i*a) <= n )
    {
        arr[ num-1 ] = 1;
        ++i;
    }
}
void SieveOfEratosthenes(int n)
{
    if (n >= 2)
    {
        bool arr[n];
        memset(arr, 0, sizeof(arr));
        for (int i=1; i<n; ++i)
        {
            if ( arr[i] == 0 )
            {
                prime.insert(i+1);
                markMultiples(arr, i+1, n);
            }
        }
    }
}
int dp[2002][2002];
int main()
{_
    SieveOfEratosthenes(N);
    int t;
    cin>>t;
    while(t--)
    {
        set<int> ans;
        for(int i=0; i<2002; i++)
            for(int j=0; j<2002; j++)
                dp[i][j] = 0;
        
        int n;
        cin>>n;
        vector<int> v(n+1);
        for(int i=1; i<=n; i++)
            cin>>v[i];

        dp[0][0] = 1;
        for(int i=1; i<=n; i++)
            for(int j=0; j<=1024; j++)
                {
                    dp[i][j] = dp[i-1][j] | dp[i-1][j^v[i]];
                    //cout<<i<<" "<<j<<" "<<dp[i][j]<<"\n";
                }

        for(int i=0; i<=n; i++)
            for(auto x: prime)
                if(dp[i][x] == 1)
                    ans.insert(x);

        cout<<ans.size()<<"\n";


    }

}
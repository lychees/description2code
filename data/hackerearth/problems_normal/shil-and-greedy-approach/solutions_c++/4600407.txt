#include <iostream>
#include <cstdio>
#include <cmath>
#include <map>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <deque>
#include <string>
#include <unordered_set>
#include <limits.h>

#define inp(x) scanf("%d",&x)
#define inp_l(x) scanf("%lld",&x)
#define inp_d(x) scanf("%lf",&x)
#define MOD 1000000007
#define pb push_back
#define mp make_pair

using namespace std;

typedef long long int ll;
typedef vector <int> VI;
typedef vector <long long int> VLL;
typedef pair<int,int> PI;
typedef pair<ll,ll> PLL;

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
	int n, i ;
	cin >> n;
	
	int powers[n + 1];

	powers[0] = 1;
	for(i = 1; i <= n; i++) {
		powers[i] = powers[i - 1] * 2;
	}

	string str;
	
	cin >> str;

	int start = 0, end1 = 0, end2 = powers[n] - 1;

	for(i = n - 1; i >= 0; i--) {
		if(str[i] == 'B'){
			start = start * 2 + 1;
		}
		else {
			start = start * 2;
		}
	}

	queue <PI> stck;

	stck.push(mp(start, 0));

	unordered_set <int> visited;

	visited.insert(start);

	while(!stck.empty()) {
		int temp = stck.front().first;
		int tempDist = stck.front().second;
		//cout << temp << " " << tempDist << endl;	
		if(temp == end1 || temp == end2) {
			cout << tempDist << endl;
			return 0;
		}
		stck.pop();

		for(i = 0; i < n - 1; i++) {
			int bit1 = (temp/powers[i]) % 2;
			int bit2 = (temp/powers[i + 1]) % 2;

			int temp1 = temp;

			if(bit1 == 1) {
				temp1 = temp1 - powers[i];
			} else {
				temp1 = temp1 + powers[i];
			}

			if(bit2 == 1) {
				temp1 = temp1 - powers[i + 1];
			} else {
				temp1 = temp1 + powers[i + 1];
			}
			//cout << temp1 << " " ;
			if(visited.find(temp1) == visited.end()) {
				visited.insert(temp1);
				stck.push(mp(temp1, tempDist + 1));
			}
		}
		//cout << endl;

		for(i = 0; i < n - 2; i++) {
			int bit1 = (temp/powers[i]) % 2;
			int bit2 = (temp/powers[i + 1]) % 2;
			int bit3 = (temp/powers[i + 2]) % 2;

			int temp1 = temp;

			if(bit1 == 1) {
				temp1 = temp1 - powers[i];
			} else {
				temp1 = temp1 + powers[i];
			}

			if(bit2 == 1) {
				temp1 = temp1 - powers[i + 1];
			} else {
				temp1 = temp1 + powers[i + 1];
			}

			if(bit3 == 1) {
				temp1 = temp1 - powers[i + 2];
			} else {
				temp1 = temp1 + powers[i + 2];
			}


			if(visited.find(temp1) == visited.end()) {
				visited.insert(temp1);
				stck.push(mp(temp1, tempDist + 1));
			}
		}		
	}
	return 0;
}


#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

int main()
{
    int N,a,b,c;
    cin>>N;
    vector< vector< pair<int,int> > > G(500);
    for(int i=0;i<N;i++){
    	cin>>a>>b>>c;
    	G[a].push_back(make_pair(b,c));
    	G[b].push_back(make_pair(a,c));
    }
    int u,q,v;
    cin>>u;
    cin>>q;
    vector<int> D(500,987654331);
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> Q;
    D[u]=0;
    Q.push(make_pair(0,u));
    while(!Q.empty()){
    	pair<int,int> top=Q.top();
    	Q.pop();
    	int v=top.second,d=top.first;
    	if(d <= D[v]) {
                  for(vector< pair<int,int> >::iterator it = G[v].begin(); it != G[v].end(); it++) { 
                        int v2 = it->first, cost = it->second;
                        if(D[v2] > D[v] + cost) {
                              D[v2] = D[v] + cost;
                              Q.push(make_pair(D[v2], v2));

                        }
       		     }
        }
    }
    while(q--){
    	cin>>v;
    	if(D[v]==987654331)
    		cout<<"NO PATH"<<endl;
    	else
    		cout<<D[v]<<endl;
    	
    }
    	
    return 0;
}

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<cassert>
#include<vector>
#define tr(c,it) for(decltype((c).begin()) it=(c).begin();it!=(c).end();++it)
using namespace std;
typedef long long LL;
typedef pair< pair<LL,LL>,LL> job;
vector<vector<LL> > dp;
int size;
vector<job> l;
LL max(LL a,LL b){
    return (a<b)?b:a;
}
LL calMaxExp(int i,int j){
    //cout<<i<<","<<j<<",";
    if( j==-1 and i==size)
    	//{cout<<i<<","<<j<<","<<0<<"\t";return 0;}
    	return 0;
    if(i==size)
        //{cout<<i<<","<<j<<","<<0<<"\t";return 0;}
        return 0;
	
    if(j==-1 and (dp[i][0]!=-1))
            return dp[i][0];
    if(j!=-1 and (dp[i][j+1]!=-1))
            return dp[i][j+1];
    
    LL v1;
	if( j==-1 )
		v1=max(l[i].second+calMaxExp(i+1,i),calMaxExp(i+1,-1));
	else{

		v1=calMaxExp(i+1,j);
		if(l[i].first.first>=l[j].first.second)
			v1=max(l[i].second+calMaxExp(i+1,i),v1);

		}
        //cout<<i<<","<<j<<","<<v1<<"\t";
        if(j==-1)
            dp[i][0]=v1;
        else
            dp[i][j+1]=v1;
	return v1;
}

bool cmp(job j1,job j2){
	return (j1.first.second < j2.first.second);
	}

void print_vec(vector<job>& v){
	tr(v,it)
		cout<<(*it).first.first<<","<<(*it).first.second<<","<<(*it).second<<"\t";
return ;
}

int main()
{
    int t;
	cin>>t;
	while(t--){
		cin>>size;
        vector< vector<LL> > v(size,vector<LL>(size+1,-1));
        dp=v;
		l.resize(size);
		LL a,b,c;
		for(int i=0;i<size;i++){
			cin>>a>>b>>c;
			l[i]=make_pair(make_pair(a,b),c);
		}
	//	print_vec(l);
        
		sort(l.begin(),l.end(),cmp);
	//	print_vec(l);
       // cout<<endl;
        //calMaxExp(0,-1);
printf("%.2f\n",(1.0*calMaxExp(0,-1))/100);
/*tr(dp,it)
            {tr(*it,it1)
                cout<<*it1<<"\t";
                cout<<endl;}
            }*/
/*  for(int j=0;j<size;j++)
			cout<< dp[j]<<"\t";*/
	}
    return 0;
}

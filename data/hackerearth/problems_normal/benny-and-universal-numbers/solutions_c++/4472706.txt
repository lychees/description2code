#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
struct Sieve {
    vector<bool> sieve;
    vi primes;
    Sieve ( int maxn ) :sieve ( maxn ) {
        sieve[0]=sieve[1]=1;
        for ( ll i=2; i<maxn; i++ ) {
            if ( !sieve[i] ) {
                primes.push_back ( i );

                if ( i*i<maxn ) {
                    for ( ll n=i*i; n<maxn; n+=i )
                        sieve[n]=1;
                }
            }
        }
    }
    bool isPrime ( int n ) const {
        assert ( n< ( int ) sieve.size() );
        return !sieve[n];
    }
};

Sieve s ( 101 );
vi getDigs ( int x ) {
    vi res;
    while ( x ) {
        res.push_back ( x%10 );
        x/=10;
    }
    reverse ( all ( res ) );
    return res;
}
bool check ( int x, vi &rems ) {
    vi d=getDigs ( x );
    int su=0;
    int ld=-1;
    bool ip=0;
    rep ( i,d.size() ) {
        int dig=d[i];
        su=10*su+dig;
        if ( su% ( i+1 ) !=rems[i] ) return 0;
        if ( ld>=0 &&s.isPrime ( 10*ld+dig ) ) ip=1;
        ld=dig;
    }
    return ip;
}
vll uni;
vi rem(15);
void findUni(ll su, int ld, int i,bool ip){
    if(ip)uni.push_back(su);
    if(i==15)return;
    rep(dig,10){
        if(!i &&!dig)continue;
       ll su2=10*su+dig;
        bool ip2=ip;
        if ( su2% ( i+1 ) !=rem[i] ) continue;
        if ( ld>=0 &&s.isPrime ( 10*ld+dig ) ) ip2=1;
        findUni(su2,dig,i+1,ip2);
    }
}
int main() {
    ios_base::sync_with_stdio ( false );
//     int MAXI=1000000;
     cin>>rem;
//     vi ok(MAXI);
//     reu(i,1,MAXI)
//     ok[i]=check(i,rem);
//     reu(i,1,MAXI)ok[i]+=ok[i-1];
//     
//     inrep{
//          int a,b; cin>>a>>b;
//       cout<<ok[b]-ok[a-1]<<"\n";   
//     }
//     return 0;
    
//     cout<<ok[MAXI-1]<<endl;
     findUni(0,-1,0,0);
     sort(all(uni));
//      cout<<vi(uni.begin(),uni.begin()+10)<<endl;
    inrep{
     ll a,b; cin>>a>>b;
     auto j=upper_bound(all(uni),b);
     auto i=lower_bound(all(uni),a);
  
    
     cout<<j-i<<'\n';
//      cout<<ok[b]-ok[a-1]<<"\n";
    }

}

#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}
int lcm(int a,int b)
{
	int val=__gcd(a,b);
	return((a*b)/val);
}
class graph
{
	vl * adj;
	public:
		graph( ll v)
		{
			adj = new vl[v];
		}
		void add_edge(ll u,ll v)
		{
			adj[u].pb(v);
		}
		ll dfs(ll v, vector<bool>& visited, vl& child)
		{
			visited[v]=true;
			vl::iterator it;
			ll ichild = 0;
			vl d;
			for( it=adj[v].begin();it!=adj[v].end();it++ )
			{
				if( !visited[*it] )
				{
					ichild++;
					d.pb( dfs(*it,visited,child));
				}
			}
			ll sz = d.size();
			ll i;
			for( i=0;i<sz;i++ )
			{
				child[v] += d[i];
			}
			child[v] += ichild;
			return child[v];
		}
};
int main()
{
	ios::sync_with_stdio(false);
	ll i, t, n, ans1, ans2, num, root;
	cin >> t;
	while( t-- )
	{
		cin >> n ;
		graph g(n);
		for( i=0;i<n;i++ )
		{
			cin >> num;
			if( num )
			{
				num--;
				g.add_edge(num, i);
			}
			else
			{
				root = i;
			}
		}
		vl child(n);
		vector<bool> visited(n);
		g.dfs(root, visited, child);
		ans1 = ans2 = 0;
		for( i=0;i<n;i++ )
		{
			ans1 += child[i];
		}
		ans2 = (n*(n-1))/2 - ans1;
		cout << ans1 << " " << ans2 << "\n";
	}
	return 0;
}
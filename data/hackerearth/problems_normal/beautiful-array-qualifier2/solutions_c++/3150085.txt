#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<utility>
#include<set>
#include<map>
#include<queue>
#include<vector>
#include<string>
#include<cstring>
#include<unordered_map>
#include<cassert>
#include<cmath>

//code by cl3488

#define ri(X) scanf("%d", &(X))
#define rii(X, Y) scanf("%d%d", &(X), &(Y))
#define riii(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define dri(X) int (X); scanf("%d", &X)
#define drii(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define driii(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define pb push_back
#define mp make_pair
#define rep(i, s, t) for ( int i=(s) ; i <(t) ; i++)
#define fill(x, v) memset (x, v, sizeof(x))
#define why(d) cerr << (d) << "!\n"
#define whisp(X, Y) cerr << (X) << " " << (Y) << "#\n"
#define exclam cerr << "!!\n"
typedef long long ll;
using namespace std;
typedef pair<int, int> pii;
const ll inf = (ll)1e9 + 70;
const ll mod = 1e9 + 7;
const int maxn = 3e5 + 1000;

int ans[maxn];
bool bad[maxn];

int main(){
	vector<int> aans;
	aans.pb(1);
	ans[1] = 0;
	rep(i,2,maxn){
		ans[i] = inf;
	}
	dri(N); drii(K, M);
	rep(i,0,M){
		dri(t);
		if(t < maxn) bad[t] = true;
	}
	while(aans.size() < N){
		int t = aans.back();
		while(ans[t] != inf || bad[t]) t++;
		aans.pb(t);
		for(int e = 1; e * t < maxn; e++){
			int p = e * t;
			ans[p] = min(ans[p], ans[e] + 1);
			if(ans[p] > K) ans[p] = inf;
		}
	}
	for(int e : aans) cout << e << " ";
	return 0;
}
#include <bits/stdc++.h>
using namespace std;

struct Node {
	pair<long long,long long> data;
	Node* left;
	Node* right;
	int box_number;
	Node(pair<long long,long long> &data, int box_number) {
		this->data = data;
		this->box_number = box_number+1;
		this->left = NULL;
		this->right = NULL;
	}
};

Node* construct_binary_tree(vector<pair<long long,long long> > &ranges,int start, int end) {
	if(start<=end) {
		int mid = start + (end-start)/2;
		Node* temp = new Node(ranges[mid],mid);
		temp->left = construct_binary_tree(ranges,start,mid-1);
		temp->right = construct_binary_tree(ranges,mid+1,end);
		return temp;
	}
	return NULL;
}

int search_tree(Node* head, long long index) {
	if(index>=(head->data).first && index<=(head->data).second)
		return head->box_number;
	else if(index<(head->data).first)
		return search_tree(head->left, index);
	else
		return search_tree(head->right, index);
}

int main()
{
    int n;
    cin >> n;
    long long count = 1;
    vector<pair<long long,long long> > ranges(n);
    int elem;
    for(int i=0;i<n;i++) {
    	cin >> elem;
    	pair<long long,long long> temp = make_pair(count, count+elem-1);
    	ranges[i] = temp;
    	count+=elem;
    }
    Node* head = construct_binary_tree(ranges,0,ranges.size()-1);
    int q;
    cin >> q;
    long long query;
    for(int i=0;i<q;i++) {
    	cin >> query;
    	cout << search_tree(head,query) << endl;
    }
    return 0;
}

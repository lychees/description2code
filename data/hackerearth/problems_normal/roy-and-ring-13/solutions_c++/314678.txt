#include <iostream>
#include <cstdio>
#include <vector>
#include <cstring>
#include <string>
#include <map>
#include <functional>
#include <algorithm>
#include <cstdlib>
#include <iomanip>
#include <cmath>

using namespace std;

#define gc getchar_unlocked
#define MAX
#define MOD
#define pb push_back
#define mp make_pair


typedef long long int i64;
typedef long int i32;
typedef vector<int> VI;
typedef pair<int,int> PII;

i64 mod  = 1000000007;

i64 modulo(i64 a,i64 b,i64 c){
    long long x=1,y=a; // long long is taken to avoid overflow of intermediate results
    while(b > 0){
        if(b%2 == 1){
            x=(x*y)%c;
        }
        y = (y*y)%c; // squaring the base
        b /= 2;
    }
    return x%c;
}

i64 max (i64 a,i64 b)
{
	return a > b? a:b ;
	}

i64 min (i64 a,i64 b)
{
	return a < b? a:b ;
	}

void multiply(i64 F[2][2], i64 M[2][2])
{
	i64 x = ((F[0][0]*M[0][0]) + (F[0][1]*M[1][0]))%mod;
	i64 y = ((F[0][0]*M[0][1]) + (F[0][1]*M[1][1]))%mod;
	i64 z = ((F[1][0]*M[0][0]) + (F[1][1]*M[1][0]))%mod;
	i64 w = ((F[1][0]*M[0][1]) + (F[1][1]*M[1][1]))%mod;
	
	F[0][0] = x % mod;
	F[0][1] = y % mod;
	F[1][0] = z % mod;
	F[1][1] = w % mod;
}


i64 fib(int n)
{
	i64 F[2][2] = {{1,1},{1,0}};
	
	i64 M[2][2] = {{1,0},{1,0}};
	
	while( n > 0)
	{
		if( n & 1)
		multiply (M,F);
		
		multiply(F,F);
		n = n >> 1;
	}
	return M[0][0]%mod;
}


int main()
{
	//freopen("aain.txt","r",stdin);
	//freopen("aaout.txt","w",stdout);
	
	std::ios_base::sync_with_stdio(false);

	//cout << fib(1) << " " << fib(2) <<  " " << fib(0)  <<  endl;
    int t;
    cin >> t;
   
    while(t--)
    {
		int n;
		cin >> n;

		if( n&1) n++;
		n= n >>1;

		i64 ans = fib(n-1);
		ans = modulo(ans,2,mod);
		cout << ans <<endl;
    }
    
    
		
    return 0;
}




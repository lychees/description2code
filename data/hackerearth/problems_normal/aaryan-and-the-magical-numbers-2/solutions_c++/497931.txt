#pragma comment(linker, "/STACK:64000000")
#include <algorithm>
#include <memory.h>
#include <cstdio>
#include <iostream>
#include <cmath>
#include <string>
#include <cassert>
#include <map>
#include <set>
#include <vector>
#include <queue>

using namespace std;
#define prev privet1
#define next privet2
#define y1 privet3
#define rank privet4
#define left privet5
#define right privet6
#define y0 privet7

const double pi = 3.141592653589793238;

void ensureLimit(long long n, long long l, long long r) {
    assert(l <= n && n <= r);
}

int a[22];
long long f[22][2][2];
bool prime[10];
long long get(long long n) {
    n++;
    int k = 0;
    while (n > 0) {
        k++;
        a[k] = n % 10;
        n /= 10;
    }
    for (int i = 1; i <= (k >> 1); i++) {
        swap(a[i], a[k - i + 1]);
    }
    memset(f, 0, sizeof(f));
    f[0][0][0] = 1;
    int d, mx;
    for (int len = 0; len < k; len++) {
        for (int less = 0; less < 2; less++) {
            for (int was = 0; was < 2; was++) {
            if (less) mx = 9;
            else mx = a[len + 1];
            for (d = 0; d <= mx; d++) {
                f[len + 1][less | (d < mx)][was | (prime[d])] += f[len][less][was];
            }
            }
        }
    }
    return f[k][1][1];
}

int main() {
    prime[2] = prime[3] = prime[5] = prime[7] = true;
    int tc;
    scanf("%d", &tc);
    while (tc--) {
        long long n;
        scanf("%lld", &n);
        printf("%lld\n", get(n));
    }
}

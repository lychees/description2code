#include<iostream>
#include<cstdio>
#include<vector>
#include<queue>

using namespace std;

vector<int> v[100000];
int visited[100000],mark[100000];
int c,mod=1000000007;

int modpowfast(long long int b,int e,int m)
{
	long long int ans=1;
	while(e>0)
	{
		if(e&1)
			ans=(ans*b)%m;
		
		b=(b*b)%m;
		e=e>>1;
	}
	return (int)ans;
}


int check(int s)
{
	int f=0,i,j,k,l=1;
	queue<int> q;
	
	q.push(s);
	mark[s]=1;
	while(q.size()!=0)
	{
		j=q.front();
		q.pop();
		while(v[j].size()!=0)
		{
			k=v[j].back();
			v[j].pop_back();
			if(visited[k]==0)
			{
				visited[k]=1;
				q.push(k);
			}
			if(mark[k]%2!=(mark[j]+1)%2 && mark[k]!=0)
			{
				f=1;
				break;
			}
			else
			{
				if(mark[k]==0)
					mark[k]=mark[j]+1;
			}
		}
	}
	return f;
}

int main()
{
	int t,i,n,m,x,y,f,g,j;
	scanf("%d",&t);
	
	while(t--)
	{
		c=0;
		scanf("%d %d",&n,&m);
		//Special Case of m=0			
		if(m==0)
		{
			printf("%d\n",modpowfast(2,n-1,mod)-1);
			continue;
		}

		for(i=0;i<n;i++)
		{
			visited[i]=0;
			mark[i]=0;
			v[i].erase(v[i].begin(),v[i].end());
		}
		
		while(m--)
		{
			scanf("%d %d",&x,&y);
			if(x<0 || x>(n-1) || y<0 || y>(n-1))
				while(1);
			v[x].push_back(y);
			v[y].push_back(x);
		}
		g=0;
		for(i=0;i<n;i++)
		{
			if(visited[i]==0)
			{
				f=check(i);
				if(f==0)
					c++;
				else
				{
					g=1;
					break;
				}
			}
		}
		if(g==1)
			printf("NOT POSSIBLE\n");
		else
			printf("%d\n",modpowfast(2,c-1,mod));
	}
	return 0;
}
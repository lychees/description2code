#include <bits/stdc++.h>

using namespace std;

#define ll long long int
#define N (int) 1e5 + 5
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define MOD (int)(1e9+7)
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i=0;i<N;i++)
#define frep(i,a,b) for(int i=a;i<=b;i++)
#define pii pair<int,int>
#define vii vector<int>
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcount(x)
#define print(A,j,k) for(int ii=j;ii<=k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)

struct trie {
	bool leaf;
	struct trie *link[26];
	trie() {
		leaf = false;
		rep(i , 26) {
			link[i] = NULL;
		}
	}
};

bool pos;
 
void insert(struct trie *root , string s) {
	rep(i , s.size()) {
		int v = s[i] - 'a';
		if (root -> link[v] == NULL) {
		//	cout << "new node for " << (char)(v+'a') << "\n";
			root -> link[v] = new trie();
		}
		root = root -> link[v];
		if(root -> leaf == true)
			pos = false;
	}
	if(root -> leaf == true)
		pos = false;
	root -> leaf = true;
}

int main(int argc, char const *argv[])
{
	fast;

	CASES {
		int n;
		cin >> n;
		pos = true;

		struct trie *root = new trie();
		struct trie *troot = root;

		vector< string > V;
		rep(i,n) {
			string s;
			cin >> s;
			V.pb(s);
		}

		sort(all(V));

		rep(i , n) {
			root = troot;
			insert(root , V[i]);
		}

		if(pos)
			cout << "YES\n";
		else
			cout << "NO\n";
	}



	return 0;
}
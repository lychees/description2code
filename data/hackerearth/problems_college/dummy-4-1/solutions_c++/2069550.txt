#include <bits/stdc++.h>
using namespace std;

#define si(a)	scanf("%d",&a)
#define sl(a)	scanf("%lld",&a)
#define pi(a)	printf("%d\n",a)
#define pl(a)	printf("%lld\n",a)

typedef long long	ll;
typedef vector<int>	vi;
typedef pair<int, int>	ii;
typedef vector<vi>	vvi;
typedef vector<ii>	vii;

#define SET(a,b)	memset(a,b,sizeof(a))
#define forall(i,a,b)	for(int i=a; i<b; i++)
#define forrev(i,a,b)	for(int i=a; i>=b; i--)
#define forr(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define w(t)	int t;si(t);while(t--)

int grid[123][123];
bool vis[123][123];
ll ans;

void solve(int x, int y, int n)
{
    if (vis[x][y] || x<1 || y<1 || x>n || y>n)
        return;
    if (x == n && y == n)
        ans++;
    vis[x][y] = 1;
    if (x + 1 <= n && vis[x + 1][y] == 0 && grid[x + 1][y] == 0)
        solve(x + 1, y, n);
    if (x - 1>0 && vis[x - 1][y] == 0 && grid[x - 1][y] == 0)
        solve(x - 1, y, n);
    if (y + 1 <= n && vis[x][y + 1] == 0 && grid[x][y + 1] == 0)
        solve(x, y + 1, n);
    if (y - 1>0 && vis[x][y - 1] == 0 && grid[x][y - 1] == 0)
        solve(x, y - 1, n);
    vis[x][y] = 0;
    return;
}

int main()
{
    int n;
    si(n);
    forall(i, 1, n + 1)
    forall(j, 1, n + 1)
    si(grid[i][j]);
    if (grid[n][n])
    {
        puts("-1");
        return 0;
    }
    solve(1, 1, n);
    pl(ans);
    return 0;
}

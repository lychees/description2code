#include<bits/stdc++.h>
using namespace std;

std::vector<int> adj[205];
int isvisited[205] = {0} ,ispossible;

// isvisited = {0 ,1 ,2}  = {not visited 0 ,colored 1 , colored 2}

bool bfs(int start) {
	isvisited[start] = 1;
	queue<int> q;
	q.push(start);
	while(!q.empty()) {
		start = q.front();
		int color_present = isvisited[start];
		q.pop() ;

		for(int i = 0 ; i<adj[start].size() ; i++) {
			if(isvisited[adj[start][i]] == 0) {
				q.push(adj[start][i]);
				isvisited[adj[start][i]] = 3 - color_present;
			}else if(isvisited[adj[start][i]] == color_present) {
				return false;
			}
		}
	}
	return true;
}

int main() {
	int t ,a ,b ,nodes ,edges;
	cin >> t;
	while(t--) {
		
		
		scanf("%d%d",&nodes,&edges);
		while(edges--) {
			scanf("%d%d",&a,&b);
			adj[a].push_back(b);
			adj[b].push_back(a);
		}
		if(bfs(a)) {
			printf("BICOLORABLE.\n");
		}else{
			printf("NOT BICOLORABLE.\n");
		}
		for(int i = 0 ; i<nodes + 1 ; i++) {
			adj[i].clear();
			isvisited[i] = 0;
		}
	}
	return 0;
}
#include <bits/stdc++.h>
using namespace std;

vector < pair <int , int > > v[1001000];


void bfs(int z, int dist[], int col[], int n)
{
    priority_queue < pair<int,int >,vector<pair<int,int> >,greater <pair<int,int> > >q;
fill(dist, dist+n+2, 1e9);
fill(col, col+n+2, 0);
dist[z]=0;
 //   q.push(z);
//    int u=q.front();
	//col[z]=1;
    //cout<<u;
    q.push({dist[z] , z});                         // insert the source node with distance = 0
    int u;
    pair < int , int > p;
    while(!q.empty()){
    	p = q.top();
		q.pop();
		u = p.second;
		if(col[u] == 1)
			continue;
		col[u] = 1;
        for(int i = 0; i < v[u].size(); i++){
            int e = v[u][i].second; int w = v[u][i].first;
            if(dist[u] + w < dist[e]){            // check if the next vertex distance could be minimized
                dist[e] = dist[u] + w;
                q.push({dist[e],  e});           // insert the next vertex with the updated distance
            }
        }
    }

}


int main()
{
	int t;
	cin>>t;
	for(int z=0;z<t;z++)
{
    int m,n;
    cin>>n>>m;
    int col[n],dist[n],a[n];
	for(int i=0;i<n;i++)
	{
		v[i].clear();
		col[i]=0;
		dist[i]=1e9;
		a[i]=0;
	}

	long long ans=0;
    for(int i=0;i<m;i++)
    {
    	int x,y,z;
    	cin>>x>>y>>z;
    	v[x-1].push_back(make_pair(z, y-1));
    	v[y-1].push_back(make_pair(z, x-1));

    }
    int q,bdsm,k,l;
    cin>>q;
    bfs(0,dist,col,n);
for(int i=0;i<q;i++)
{
	cin>>bdsm>>k;
	l=dist[bdsm-1];
	l=2*l;
	if(k>l)
		cout<<k-l;
	else 
		cout<<"0";
	cout<<endl;
}

}
    return 0;
}

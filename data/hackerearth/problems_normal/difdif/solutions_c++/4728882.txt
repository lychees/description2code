#include<iostream>
#include<string.h>
#include<algorithm>
#define maxn 1500
using namespace std;
struct suffix{
int rank[2];
int p;
bool operator<(suffix b) const
{
   return rank[0]==b.rank[0] ?(rank[1]<b.rank[1] ?1: 0): (rank[0]<b.rank[0] ?1: 0);
  //return rank[0]==other.rank[0]?(rank[1]<other.rank[1]?1:0):(rank[1]<other.rank[1]?1:0);
}
}l[maxn];

int p[17][maxn];
int stp,cnt;
char a[maxn];
int suffixarray[maxn];
int lcp(int x,int y);
int main()
{
   cin>>a;

int N,i;
 for(N=strlen(a), i = 0; i < N; i++)
        p[0][i] = a[i] - 'a';

    for(stp=1, cnt = 1; cnt < N; stp++, cnt *= 2)
    {
        for(i=0; i < N; i++)
        {
            l[i].rank[0]=p[stp- 1][i];
            l[i].rank[1]=i +cnt <N? p[stp -1][i+ cnt]:-1;
            l[i].p= i;
        }
        sort(l, l+N);
        for(i=0; i < N; i++)
            p[stp][l[i].p] =i> 0 && l[i].rank[0]==l[i-1].rank[0] && l[i].rank[1] == l[i- 1].rank[1] ? p[stp][l[i-1].p] : i;
    }



  
//cout<<endl; 

for(int i=0;i<strlen(a);i++)
{   
suffixarray[p[stp-1][i]]=i;
}

int ans=0;
ans=strlen(a)*(strlen(a)+1)/2;
for(int j=0;j<strlen(a)-1;j++)
{
  ans-=lcp(suffixarray[j],suffixarray[j+1]);
}
cout<<ans<<endl;
}


int lcp(int x,int y)
{
int ans=0;
   for(int i=stp-1;i>=0&&x<strlen(a)&&y<strlen(a);i--)
        if(p[i][x]==p[i][y])
           ans+=1<<i,x+=1<<i,y+=1<<i;
return ans;
}
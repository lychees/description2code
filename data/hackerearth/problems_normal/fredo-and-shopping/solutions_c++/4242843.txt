#include <iostream>
#include <cmath>
#include <vector>
#include <list>
#include <algorithm>
using namespace std;

#define endl "\n"

int n;
vector<pair<int,int> > arr(1000005);
int compressed_array[1000005];
int inversions[1000005];
int BIT[1000005];

void update(int i)
{
    for(;i<=n;i+=i&(-i))
    {
        BIT[i]+=1;
    }
}

int query(int i)
{
    int ans=0;
    for(;i>0;i-=i&(-i))
    {
        ans+=BIT[i];
    }
    return ans;
}

int main()
{
    ios::sync_with_stdio(false); cin.tie(NULL);
    cin>>n;
    for(int i=0;i<n;++i)
    {
        cin>>arr[i].first;
        arr[i].second=i;
    }
    sort(arr.begin(),arr.begin()+n);
    int k=0;
    for(int i=0;i<n;++i)
    {
        if(arr[i].first!=arr[i-1].first)
        {
            k++;
        }
        compressed_array[arr[i].second]=k;
    }
    //for(int i=0;i<n;++i) cout<<compressed_array[i]<<" ";cout<<endl;
    for(int i=0;i<n;++i)
    {
        inversions[i]=query(compressed_array[i]-1);
        update(compressed_array[i]);
    }
    for(int i=0;i<n;++i)
    {
        cout<<inversions[i]<<" ";
    }
}

def fx(c, i, j):
    # print 'input of fx =',c,i,j,d
    if (i, j) in d:
        return d[(i, j)]
    l1 = len(c)-1
    l2 = len(c[0])-1
    # print l1,i,l2,j
    if i != l1:
        if j != l2:
            if c[i+1][j] > c[i][j]:
                if c[i][j+1] > c[i][j]:
                    x = fx(c, i+1, j)
                    y = fx(c, i, j+1)
                    if x > y:
                        d[(i+1, j)] = fx(c, i+1, j)
                        d[(i, j)] = 1+d[(i+1, j)]
                        return d[(i, j)]
                    else:
                        d[(i, j+1)] = fx(c, i, j+1)
                        d[(i, j)] = 1+d[(i, j+1)]
                        return d[(i, j)]
                else:
                    d[(i+1, j)] = fx(c, i+1, j)
                    d[(i, j)] = d[i+1, j]+1
                    return d[(i, j)]
            else:
                if c[i][j+1] > c[i][j]:
                    d[(i, j+1)] = fx(c, i, j+1)
                    d[(i, j)] = d[i, j+1]+1
                    return d[(i, j)]
                else:
                    d[(i, j)] = 1
                    return d[(i, j)]
        else:
            if c[i+1][j] > c[i][j]:
                d[(i+1, j)] = fx(c, i+1, j)
                d[(i, j)] = d[i+1, j]+1
                return d[(i, j)]
            else:
                d[i, j] = 1
                return d[(i, j)]
    else:
        if j != l2:
            if c[i][j+1] > c[i][j]:
                d[(i, j+1)] = fx(c, i, j+1)
                d[(i, j)] = d[i, j+1]+1
                return d[(i, j)]
            else:
                d[(i, j)] = 1
                return d[(i, j)]
        else:
            d[(i, j)] = 1
            return d[(i, j)]


for kldx in range(int(raw_input())):
    a = map(int, (raw_input()).split())
    d = {}
    c = []
    while a[0] > 0:
        a[0] -= 1
        c.append(map(int, (raw_input()).split()))
    print fx(c, 0, 0)

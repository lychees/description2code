#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<utility>
#include<set>
#include<map>
#include<queue>
#include<vector>
#include<string>
#include<cstring>
#include<cassert>
#include<cmath>

//code by cl3488

#define ri(X) scanf("%d", &(X))
#define rii(X, Y) scanf("%d%d", &(X), &(Y))
#define riii(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define dri(X) int (X); scanf("%d", &X)
#define drii(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define driii(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define pb push_back
#define mp make_pair
#define rep(i, s, t) for ( int i=(s) ; i <(t) ; i++)
#define fill(x, v) memset (x, v, sizeof(x))
#define why(d) cerr << (d) << "!\n"
#define whisp(X, Y) cerr << (X) << " " << (Y) << "#\n"
#define exclam cerr << "!!\n"
typedef long long ll;
using namespace std;
typedef pair<int, int> pii;
const ll inf = (ll)1e9 + 70;
const ll mod = 1e9 + 7;
const int maxn = 20;

ll fact[maxn];

ll perform(int n){
	ll ans = n * (n - 1) / 2 * fact[n] / 2;
	for (int S = 1; S < (1 << n) - 1; S++){//we skip the one where they're all fixed.  (# inversions is 0 there).
		vector<int> fixed;
		rep(i, 0, n)if (S & (1 << i)) fixed.push_back(i);
		int sgn = (fixed.size() % 2 == 0 ? 1 : -1);
		vector<int> blocks;
		blocks.push_back(fixed[0]);
		rep(i, 1, fixed.size()){
			blocks.push_back(fixed[i] - fixed[i - 1] - 1);
		}
		blocks.push_back(n - fixed[fixed.size() - 1] - 1);
		//for (int i : blocks)cout << i << " ";
		//cout << endl;
		ll here = 0;
		rep(i, 0, blocks.size()){
			rep(j, 0, blocks.size()){
				here += abs(i - j) * blocks[i] * blocks[j];
			}
		}
		here *= fact[n - fixed.size() - 1];
		//done with the ones involving them
		int w = n - fixed.size();
		//now for the ones NOT involving them.
		here += w * (w - 1) / 2 * fact[w] / 2;
		ans += sgn * here;
	}
	return ans;
}

int main(){
	if (fopen("input.txt", "r")) freopen("input.txt", "r", stdin);
	dri(T);
	fact[0] = 1;
	rep(i, 1, maxn){
		fact[i] = fact[i - 1] * i;
	}
	rep(tc, 0, T){
		dri(n);
		if (n == 1){
			cout << 0 << "\n";
			continue;
		}
		cout << perform(n) << "\n";
	}
	return 0;
}
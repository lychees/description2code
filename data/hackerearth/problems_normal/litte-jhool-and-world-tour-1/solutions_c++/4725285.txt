/*#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <map>
using namespace std;

#define pii pair<int,int>
#define mp make_pair

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    	int n,m;
    	cin>>n>>m;
    	vector<pair<pii,int>> v;
    	v.reserve(200000);
    	vector<int> done(m);
    	vector<bool> rev(m);
    	for(int i=0;i<m;i++)
    	{
    		int s,f;
    		cin>>s>>f;
    		if(s <= f) v.push_back(mp(mp(s,f),i));
    		else
    		{
    			rev[i] = true;
    			v.push_back(mp(mp(s,n-1),i));
    			v.push_back(mp(mp(0,f),i));
    		}
    	}
    	sort(v.begin(),v.end(),[](pair<pii,int> a, pair<pii,int> b){
    		if(a.first.second == b.first.second)
    		{
    			return a.first.first < b.first.first;
    		}
    		return a.first.second < b.first.second;
    	});
    	set<pii> left;
    	map<int,int> reserved;
    	left.emplace(mp(0,n-1));
    	bool possible = true;
    	for(auto itr = v.begin();itr!=v.end();itr++)
    	{
    		if(!done[itr->second])
    		{
    			auto pos = lower_bound(left.begin(),left.end(),itr->first,[](pii a, pii b){
    				if(b.first <= a.second) return false;
    				return true;
    			});
    			if(pos != left.end() && (itr->first).second >= pos->first)
    			{
    				pii val = *pos;
    				int l,m,r;
    				l = val.first;
    				r = val.second;
    				m = (itr->first).first;
    				left.erase(pos);
    				if(l>=m)
    				{
    					if(l+1 <= r) left.emplace(mp(l+1,r));
    					if(rev[itr->second]) reserved[l] = itr->second;
    				}
    				else
    				{
    					if(l <= m-1) left.emplace(mp(l,m-1));
    					if(m+1 <= r) left.emplace(mp(m+1,r));
    					if(rev[itr->second]) reserved[m] = itr->second;
    				}
    				done[itr->second] = 1;
    			}
    			else
    			{
    				auto lb = reserved.lower_bound((itr->first).first);
    				if(lb != reserved.end())
    				{
    					if(lb->first <= (itr->first).second)
    					{
    						done[lb->second] = 0;
    						done[itr->second] = 1;
    						reserved.erase(lb);
    					}
    				}
    			}
    		}
    	}
    	for(int i=0;i<m;i++)
    	{
    		if(!done[i])
    		{
    			possible = false;
    			break;
    		}
    	}
    	cout << (possible?"YES":"NO") << endl;
    }
    return 0;
}
*/


    #include <bits/stdc++.h>
    /* 
     Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.
     â€” Rick Osborne
      */
    using namespace std;
    typedef pair <int,int> PII;
    typedef vector <int> VI; 
    typedef vector < PII > VPII;
    int main()
    {
        int tc;
        scanf("%d",&tc);
    		while (tc--)
        {
            int m, n;
            scanf("%d %d",&m, &n);
    				VPII segm;
            for(int i=0;i<n;i++)
            {
                int st, en;
                scanf("%d %d",&st, &en);
                if(st<=en)
                {
                    segm.push_back(make_pair(st,en));
                    segm.push_back(make_pair(st+m,en+m));
                }
                else
                    segm.push_back(make_pair(st,en+m));
            }
    				if(n>m)
            {
                puts("NO");
                continue;
            }
            sort(segm.begin(),segm.end());
            
    				int T=0;
            int i=0;
            set < PII > que;
            bool ok = true;
            while(true)
            {
                if(que.empty())
                {
                    if(i==segm.size())
                        break;
                    else
                        T = segm[i].first;
                }
            
    						while(i<segm.size() && segm[i].first==T)
                {
                    que.insert(make_pair(segm[i].second,i));
                    i++;
                }
                
    						int ind = que.begin()->second;
                que.erase(que.begin());
                
    						if(!(T>=segm[ind].first && T<=segm[ind].second))
                {
                    ok = false;
                    break;
                }
                T++;
            }
            puts(ok?"YES":"NO");
        }
    }

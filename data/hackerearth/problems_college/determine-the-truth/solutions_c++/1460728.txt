#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
void solve(void) {
  int i, ii, j, n, ji, jf;
  unsigned long long c, d;
  unsigned long long sum;
  char line[20100];
  char *linep = line;
  int len;
  int ndig = 7;
  unsigned long long mod=1;
  unsigned long long *num1, *num2, *res;
  unsigned long long one = 1;
  unsigned long long two = 2;
  char format[128];
  
  for (i=0;i<ndig;i++) mod *= 10;
  
  sprintf(format, "\%%0%dlld", ndig);
  
  memset(line, 32, ndig*2);
  scanf("%s", line+ndig*2);
 
  len = strlen(line+ndig*2);
  linep += len+ndig*2;
 
  n = ((len+ndig+ndig-1)/ndig);
 
  num1 = (unsigned long long *)malloc(n*sizeof(unsigned long long));
  num2 = (unsigned long long *)malloc(n*sizeof(unsigned long long));
  res  = (unsigned long long *)malloc((2*n-1)*sizeof(unsigned long long));
 
  linep -= n*ndig;
 
  
  c = 0;
  for (i=0;i<n;i++) {
    num1[i] = strtol(linep+ndig*(n-i-1), NULL, 10);
 
    if (i==0)
      d = ((((num1[i]+one))*mod)/two) + c;
    else 
      d = ((((num1[i]    ))*mod)/two) + c;
    
    num2[i] = d%mod;
    c = d/mod;
    
    linep[ndig*(n-i-1)] = 0;
  }
  
  c = 0;
  for (i=0;i<2*n-1;i++) {
    sum = c;
 
    ji = i-n+1; if (ji<0) ji = 0;
    jf = i;   if (jf>(n-1)) jf = n-1;
    
    for (j=ji;j<=jf;j++)
      sum += num1[i-j] * num2[j];
    
    res[i] = sum%mod;
    c = sum/mod;    
  }
 
  ii = 2*n-2;
  while (ii>=0 && res[ii]==0) ii--;
 
  if (ii==-1) {
    printf("0\n");
    return;
  }
  
  for (i=ii;i>=1;i--) {
    if (i==ii)
      printf("%lld", res[i]);
    else
      printf(format, res[i]);
  }
  printf("\n");
  
  free(res);
  free(num1);
  free(num2);
}
 
 
 
 
int main(int argn, char *arg[]) {
  int i, N;
    
  scanf("%d", &N);
  for (i=0;i<N;i++) solve();
    
  return 0;
} 
#include <bits/stdc++.h>
using namespace std;

typedef long ll;
const int MAXN = 1e5+5;
int N, Q;
int A[MAXN];
namespace SegmentTree {
	struct node{
		ll ans, prefix, suffix, range, Lval, Rval;

		void init() { ans = prefix = suffix = Lval = Rval = range = 0; }

		node() { init(); }
	};

	node tree[4 * MAXN];
	node emp;

	node CombineNode(node left, node right) {
		node res;
		res.ans = max(left.ans, right.ans);
		
		if(left.Rval < right.Lval)
			res.ans = max(res.ans, left.suffix + right.prefix);
		
		res.range = left.range + right.range;
		res.Lval = left.Lval; 
		res.Rval = right.Rval;

		if(left.prefix == left.range) {
			if(left.Rval < right.Lval)
				res.prefix = left.range + right.prefix;
			else 
				res.prefix = left.range;
		}
		else res.prefix = left.prefix;
		
		if(right.suffix == right.range) {
			if(left.Rval < right.Lval)
				res.suffix = right.range + left.suffix;
			else 
				res.suffix = right.range;
		}
		else res.suffix = right.suffix;

		return res;
	}

	node make_node(int idx, int val) {
		node res;
		res.range = 1;
		res.ans = res.prefix = res.suffix = 1;
		res.Lval = res.Rval = val;
		return res;
	}

	void build(int i, int l, int r) {
		if(l == r) {
			tree[i] = make_node(l, A[l]);
			return;
		}

		int mid = (l+r)>>1;
		
		build(2*i, l, mid);
		build(2*i+1, mid+1, r);
		tree[i] = CombineNode(tree[2*i], tree[2*i+1]);
	}

	void update(int i, int l, int r, int idx, int val) {
		if(l == r) {
			tree[i].Lval += val;
			tree[i].Rval += val;
			return;
		}

		int mid = (l+r)>>1;
		if(idx <= mid)
			update(2*i, l, mid, idx, val);
		else 
			update(2*i+1, mid+1, r, idx, val);

		tree[i] = CombineNode(tree[2*i], tree[2*i+1]);
	}
	
	node query(int i, int l, int r, int ql, int qr) {
		if(r < ql or qr < l) return emp;

		if(ql <= l and r <= qr) return tree[i];

		int mid = (l+r)>>1;

		node a = query(2*i, l, mid, ql, qr);
		node b = query(2*i+1, mid+1, r, ql, qr);
		return CombineNode(a, b);
	}
}

using namespace SegmentTree;

int main() {
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	int t, type, x, y;
	cin>>t;
	while(t--) {
		cin >> N >> Q;
		for(int i=1;i<=N;++i) cin >> A[i];

		build(1, 1, N);

		while(Q--) {
			cin >> type >> x >> y;
			if(type == 0) {
				node ret = query(1, 1, N, x, y);
				cout << ret.ans << endl;
			}
			else {
				A[x] += y;
				update(1,1, N, x, y);
			}
		}
	}
	return 0;
}

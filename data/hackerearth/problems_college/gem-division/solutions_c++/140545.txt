// Author : Abhisar Singhal
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cassert>
using namespace std;

#define SZ(A) ((int)A.size())
#define LEN(A) ((int)A.length())
#define MS(A) memset(A, 0, sizeof(A))
#define INF (int(1e9))

#define REP(i, n) for(int i = 0; i < (n); i++)
#define FOR(i, a, n) for(int i = a; i < n; i++)
int dp[100009];
int A[109];
int main() {
	std::ios_base::sync_with_stdio(false);
	int t;
	cin >> t;
	while(t--) {
		int n;
		cin >> n;
		assert(n >= 1 && n <= 50);
		int sum = 0;
		REP(i, n) {
			cin >> A[i];
			assert(A[i] >= 1 && A[i] <= 100);
			sum += A[i];
		}
		sort(A, A+n);
		if(n == 1){
			cout << 0 << " " << A[0] << endl;
			continue;
		}
		int best = INF, bx = 0;
		REP(i, n){ // monks gem
			MS(dp);
			dp[0] = 1;
			int lim = 0;
			REP(j, n){
				if(j == i) continue;
				for(int k=lim;k>=0;k--){
					if(dp[k]) dp[k+A[j]] = 1;
				}
				lim += A[j];
			}
			int ns = sum - A[i];
			int v = ns / 2;
			while(!dp[v]) v--;
			if(best > abs((ns-v)-v)){
				best = abs((ns-v)-v);
				bx = A[i];
			}
		}
		assert(best != INF);
		cout << best << " " << bx << endl;
	}
	return 0;
}

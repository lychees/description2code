#include<cstdio>
#include<cstring>
#include<string>
#include<map>
#include<vector>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstdlib>
#include<set>
#include<stack>
#include<deque>
#include<queue>
#include <limits.h>
#define pb(x) push_back(x)
#define getcx getchar_unlocked
using namespace std;
 
int n,q,v;    
long long tree[1000000]={0};
long long laz[1000000]={0};
 void flip(int node ,int a,int b,int c,int d)
 {    
      if(laz[node-1]>0)
      {
             tree[node-1]+=(b-a+1)*laz[node-1];
             
             
             if(a<b)    
                 {laz[2*node-1]+=laz[node-1];
                 laz[2*node]+=laz[node-1]; 
                 }
            laz[node-1]=0;
             
      }
      if( c>b || d< a || a>b )
         return ;// no single element to flip      
      
      if(a==b)  
          {tree[node-1]+=v; return;}
      if(a>=c &&b<=d)
      {
              tree[node-1]+=(b-a+1)*v;
             if(a<b)    
                 {laz[2*node-1]+=v;
                 laz[2*node]+=v; 
                 }
                 return;
      }    
      flip(2*node,a,(a+b)/2,c,d);
      flip(2*node+1,(a+b)/2+1,b,c,d);
      
      tree[node-1]=tree[2*node-1]+tree[2*node]  ;
      return;
 }
long long head(int node ,int a,int b,int c,int d)
 {   
      if(c>b || d< a || a>b )
         return 0;
      if(laz[node-1]>0)
      {
             tree[node-1]+=(b-a+1)*laz[node-1];
             
             
             if(a<b)    
                 {laz[2*node-1]+=laz[node-1];
                 laz[2*node]+=laz[node-1]; 
                 }
            laz[node-1]=0;
             
      }
      if(a>=c && b<=d)  
         return tree[node-1] ;
     return head(2*node,a,(a+b)/2,c,d)+ head(2*node+1,(a+b)/2+1,b,c,d);
      
 }
int main()
{  int a,b,c;
   scanf("%d",&n);
   scanf("%d",&q);
   while(q--)
   {scanf("%d",&a);scanf("%d",&b);scanf("%d",&c);
      if(a==1)
    {scanf("%d",&v);
     flip(1,0,n-1,b-1,c-1);   }//node no , initial index, final index ,initial index to update , final index to update both 0 based
    else
    {printf("%lld\n",head(1,0,n-1,b-1,c-1));}
   }
   return 0;
}
 

#include <bits/stdc++.h>


using namespace std;

const int MAX = 100001;
int id[MAX];

void initialise(){
	for(int i=0;i<MAX;i++){
		id[i] = i;
	}
}

int root(int x){
	
	while(x!=id[x]){
		
		id[x] = id[id[x]];
		x = id[x];
	}
	return x;
}

void unionn(int x,int y){
	int a = root(x);
	int b = root(y);
	id[a] = id[b];
}

int kruskal(pair<int , pair<int,int> > p[],int e){
	
	int sum = 0;
	
	for(int i=0;i<e;i++){
		
		int a = p[i].second.first ;
		int b = p[i].second.second;
		
	  if(root(a) != root(b)){
		sum += p[i].first ;
		unionn(a,b);
	  }
	}
	
	return sum;
}

int main()
{
	int t,v,e,x,y,w,max_cost;
	cin>>t;
	
	while(t--){
		
		pair <int,pair<int,int>> p[MAX];

		cin>>v>>e;
		
		initialise();
		
		for(int i=0;i<e;i++){
			cin>>x>>y>>w;
			p[i] = make_pair(w,make_pair(x,y));
		}
		sort(p,p+e);
		reverse(p,p+e);
		max_cost = kruskal(p,e);
		
		cout<<max_cost<<endl;
	}
    return 0;
}

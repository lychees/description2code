#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long ll;
const ll maxn = 10000011;
ll BIT[maxn];
void update(ll idx, ll x){
	while (idx<maxn){
		BIT[idx] += x;
		idx += idx&-idx;
	}
}
ll query(ll idx){
	ll res = 0;
	while (idx){
		res += BIT[idx];
		idx -= idx&-idx;
	}
	return res;
}
int b(ll x){
	int cnt = 0;
	while (x>1){
		x >>= 1;
		cnt ++;
	}
	return cnt;
}
int main()
{
    int q,op;
    ll x;
    scanf("%d",&q);
    memset(BIT,0,sizeof(BIT));
    vector<ll> v;
    vector<int> v1;
    ll cnt = 0;
    while(q--){
    	scanf("%d%lld",&op,&x);
    	if (op==0){
    	//	v.push_back(x);
    	//	v1.push_back(b(x));
    		//update(b(x),1);
    		cnt++;
    		for(int i=0;i<=b(x);i++){
    			ll tmp = (1LL<<i);
    			update(x/tmp,1);
    		}
    		//cout << x << " " << b(x) << endl;
    	}
    	else if (op==1){
    	//	int idx = find(v.begin(),v.end(),x)-v.begin();
    	//	while (idx<v.size()){
    			cnt--;
    	//		v.erase(v.begin()+idx);
    			//update(v[idx],-1);
    			for(int i=0;i<=b(x);i++){
    				ll tmp = (1LL<<i);
    				update(x/tmp,-1);
    			}
    	//		v1.erase(v1.begin()+idx);
    		//	idx = find(v.begin(),v.end(),x)-v.begin();
    	//	}
    		
    	}
    	else{
    		//vector<int> v2(v1);
    		//sort(v2.begin(),v2.end());
    		//int idx=upper_bound(v2.begin(),v2.end(),x)-v2.begin();
    		//int idx1 = lower_bound(v2.begin(),v2.end(),x)-v2.begin();
    		//printf("%d\n",v2.size()-idx1);
    		if (x>1)
    			printf("%lld\n",query(x)-query(x-1));
    		else if (x==1)
    			printf("%lld\n",query(x));
    		else
    			printf("%lld\n",cnt);
    	}
    }
    return 0;
}

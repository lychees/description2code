#include <bits/stdc++.h>
using namespace std;

void findPrimes(bool isPrime[]){
	isPrime[0]=false;
	isPrime[1]=false;
	for (int i = 2; i < 10001; ++i){
		if(isPrime[i]==true){
			for (int j = i*i; j < 10001; j+=i){
				if(isPrime[j]==true) isPrime[j]=false;
			}
		}
	}
}

int main(){
	bool isPrime[10001];
	memset(isPrime, true, sizeof(isPrime));
	findPrimes(isPrime);
	int n, k;
	cin>>n>>k;
	int mat[n][n];
	for(int i=0; i<n; i++){
		for (int j = 0; j < n; j++){
			cin>>mat[i][j];
		}
	}
	int ans=INT_MAX;
	int x=n+1, y=n+1;
	for(int i=0; i<n; i++){
		for (int j = 0; j < n; j++){
			if(i-1>=0 && j-1>=0 && i+1<n && j+1<n){
				int temp_ans=0, temp1=mat[i][j], temp2=mat[i-1][j-1], temp3=mat[i+1][j-1], temp4=mat[i+1][j+1], temp5=mat[i-1][j+1];
				if(!isPrime[temp1]){
					while(!isPrime[temp1] && temp1<=10000){
						temp1+=k;
						temp_ans+=1;
					}
				}
				if(!isPrime[temp2]){
					while(!isPrime[temp2] && temp2<=10000){
						temp2+=k;
						temp_ans+=1;
					}				
				}
				if(!isPrime[temp3]){
					while(!isPrime[temp3] && temp3<=10000){
						temp3+=k;
						temp_ans+=1;
					}					
				}
				if(!isPrime[temp4]){
					while(!isPrime[temp4] && temp4<=10000){
						temp4+=k;
						temp_ans+=1;
					}					
				}
				if(!isPrime[temp5]){
					while(!isPrime[temp5] && temp5<=10000){
						temp5+=k;
						temp_ans+=1;
					}					
				}
				if(isPrime[temp1] && isPrime[temp2] && isPrime[temp3] && isPrime[temp4]&& isPrime[temp5]){
					if (temp_ans<ans){
						ans=temp_ans;
						x=i+1;
						y=j+1;
					}
					else if(temp_ans==ans && x>(i+1)){
						x=i+1;
						y=j+1;
					}
					else if(temp_ans==ans && x==(i+1) && y>(j+1)){
						x=i+1;
						y=j+1;
					}
				}
			}
		}
	}
	if(ans==INT_MAX){
		cout<<"no"<<endl;
	}
	else{
		cout<<"yes"<<endl;
		cout<<ans<<endl;
		cout<<x<<" "<<y<<endl;
	}	
}	

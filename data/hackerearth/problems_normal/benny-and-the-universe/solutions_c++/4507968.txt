#include<bits/stdc++.h>
#define pb push_back
#define PI acos(-1)
#define mp make_pair
#define F first
#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define maxn 100010
#define S second
#define ll long long int
#define inf 1000000014
#define infl (ll)(1e18+1)
#define mod 1000000007
#define sz(x) (int) x.size()
#define pi pair< int,int >
#define pii pair<pi,int>
#define pu push
#define trace1(x)  cerr << #x << ": " << x << endl
#define trace2(x, y)  cerr << #x << ": " << x << " | " << #y << ": " << y << endl
using namespace std;
int arr[1010];
int smallest[10100];
int this_time[10100];
ll modexp(ll a, ll b)
{
  if(b==0)
    return 1ll;
  if(b==1)
    return a;
  if(b%2==1)
    return (a*modexp(a,b-1)%mod);
  return modexp((a*a)%mod,b/2);
}
int main(int argc, char const *argv[])
{
  // freopen("input.txt","r",stdin);
  // freopen("output.txt","w",stdout);
   int n,q;
   sd2(n,q);
   for(int i=1;i<=10001;i++)
    smallest[i]=inf;
   for (int i = 1; i <= n; ++i)
   {
     sd(arr[i]);
   }
   sort(arr+1,arr+1+n);
   smallest[0]=0;
   int times=arr[1];
   for(int i=2;i<=n;i++)
   {
      memset(this_time,0,sizeof this_time);
      for(int j=0;j<times;j++)
      {
         if(this_time[j]==0 && smallest[j]!=inf)
         {
            int cur = j;
            do
            {
              this_time[cur]=1;
              smallest[(smallest[cur]+arr[i])%times] = min(smallest[(smallest[cur]+arr[i])%times],smallest[cur]+arr[i]);
              cur = (cur+arr[i])%times;
            }while(this_time[cur]==0 &&smallest[cur]!=inf);
         }
      }
   }
   int val;
   smallest[0]=arr[1];
  // for(int i=0;i<times;i++)
//cout<<smallest[i]<<" ";
   while(q--)
   {
      sd(val);
      int m = val%arr[1];
      if(val>=smallest[m])
      {
        puts("YES");
      }
      else
      {
       puts("NO");
      }
   }
  return 0;
}
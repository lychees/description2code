#include<bits/stdc++.h>
using namespace std;
int primes[10005]={0};
int dp[10005];
int arr[1005][1005];
struct ans{
	int p,q,r;
};
int find_total(int i,int k) {
	if(i>10000) {
		return -1;
	}
	if(dp[i]!=-1) {
		return dp[i];
	}
	int a;
	a=find_total(i+k,k);
	if(a!=-1) {
		dp[i]=1+a;
	}
	else {
		dp[i]=-1;
	}
	return dp[i];
}
int main()
{
	int i,j,n,k;
	struct ans an;
	primes[0]=primes[1]=1;
	for(i=2;i*i<=10002;i++) {
		for(j=i;j<=10002;j+=i) {
			if(i!=j) {
				primes[j]=1;
			}
		}
	}
	memset(dp,-1,sizeof(dp));
	scanf("%d%d",&n,&k);
	for(i=0;i<n;i++) {
		for(j=0;j<n;j++) {
			scanf("%d",&arr[i][j]);
		}
	}
	for(i=1;i<=10000;i++) {
		if(primes[i]==0) {
			dp[i]=0;
		}
		else {
			dp[i]=-1;
		}
	}
	for(i=1;i<=10000;i++) {
		if(dp[i]==-1) {
			find_total(i,k);
		}
	}
	if(n<3) {
		printf("no\n");
	}
	
	else {
		an.p=999999999;
	an.q=-1;
	an.r=-1;
	int flag,an1;
	flag=0;
		for(i=1;i<n-1;i++) {
			for(j=1;j<n-1;j++) {
				if(dp[arr[i][j]]!=-1&&dp[arr[i-1][j-1]]!=-1&&dp[arr[i-1][j+1]]!=-1&&dp[arr[i+1][j-1]]!=-1&&dp[arr[i+1][j+1]]!=-1) {
					an1=dp[arr[i][j]]+dp[arr[i-1][j-1]]+dp[arr[i-1][j+1]]+dp[arr[i+1][j-1]]+dp[arr[i+1][j+1]];
					flag=1;
					if(an1<an.p) {
						an.p=an1;
						an.q=i;
						an.r=j;
					}
				}
			}
		}
		if(flag==0) {
			printf("no\n");
		}
		else {
			printf("yes\n");
			printf("%d\n",an.p);
			printf("%d %d\n",an.q+1,an.r+1);
		}
		
	}
	return 0;
}
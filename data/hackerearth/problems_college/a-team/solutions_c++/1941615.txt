
#include <iostream>
using namespace std;
 #define ll long long
struct Point
{
    ll x;
    ll y;
};
 

bool onSegment(Point p, Point q, Point r)
{
    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&
        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))
       return true;
 
    return false;
}
 
ll orientation(Point p, Point q, Point r)
{
 
    ll val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);
 
    if (val == 0) return 0; 
 
    return (val > 0)? 1: 2; }
 

bool doIntersect(Point p1, Point q1, Point p2, Point q2)
{
    ll o1 = orientation(p1, q1, p2);
    ll o2 = orientation(p1, q1, q2);
    ll o3 = orientation(p2, q2, p1);
    ll o4 = orientation(p2, q2, q1);
 
    
    if (o1 != o2 && o3 != o4)
        return true;
 
    
    if (o1 == 0 && onSegment(p1, p2, q1)) return true;
 
    
    if (o2 == 0 && onSegment(p1, q2, q1)) return true;
 
    if (o3 == 0 && onSegment(p2, p1, q2)) return true;
 
    if (o4 == 0 && onSegment(p2, q1, q2)) return true;
 
    return false; 
}
 

int main()
{long long t,x1,y1,x2,y2,xc,yc;
cin>>t;
while(t--)
{
	cin>>x1>>y1>>x2>>y2>>xc>>yc;
    struct Point p1 = {x1, y1}, q1 = {x2, y2};
    struct Point p2 = {xc, yc}, q2 = {0,0};
 
    doIntersect(p1, q1, p2, q2)? cout << "NO\n": cout << "YES\n";
}
    return 0;
}
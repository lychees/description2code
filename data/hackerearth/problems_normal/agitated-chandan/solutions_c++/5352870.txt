#include<bits/stdc++.h>
#define pi pair<int,int > 
using namespace std;
vector<pi>vec[100000];
int dikstra(int u,int n, int &val)
{
	int dist[n+1],visit[n+1];
	for(int i=1;i<=n;i++)
	{
		dist[i]=9999999;
		visit[i]=0;
	}
	priority_queue<pair<int ,int > > pq;
	pq.push(make_pair(0,u));
	dist[u] = 0;
	while(!pq.empty())
	{
		pair<int,int >p = pq.top();
		pq.pop();
		int w = p.first;
		u = p.second;
		for(vector<pair<int ,int > > ::iterator it =vec[u].begin();it!=vec[u].end();it++)
		{
			pair<int ,int >pp = *it;
			int v = pp.first;
			int wt = pp.second;
			if(dist[v]>dist[u]+wt )
			{
				dist[v] = dist[u]+wt;
				pq.push(make_pair(dist[v],v));
			}
		}
	}
	int max = INT_MIN;
	for(int i=1;i<=n;i++)
	{
		if(max<dist[i])
		{
		max = dist[i];
		val = i;
	}
	}
	return max;
}
int main()
{
	int t;
	cin>>t;
	while(t--){
		int n;
		cin>>n;
		int m = n-1;
		while(m--)
		{
			int a,b,x;
			cin>>a>>b>>x;
			vec[a].push_back(make_pair(b,x));
			vec[b].push_back(make_pair(a,x));
		}
		int val;
    dikstra(1,n,val);
	int p = dikstra(val,n,val);
	if(p<=100)
	{
		cout<<"0 "<<p<<"\n";
	}
	else
	if(p>100 && p<1000)
	{
		cout<<"100 "<<p<<"\n";
	}
	else
	if(p>1000 && p<10000)
	{
		cout<<"1000 "<<p<<"\n";
	}
	else
	{
		cout<<"10000 "<<p<<"\n";
	}
	for(int i=1;i<=n;i++)
	{
		vec[i].clear();
	}
	}
}
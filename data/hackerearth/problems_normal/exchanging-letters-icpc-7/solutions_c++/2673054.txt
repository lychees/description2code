#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 2010, MOD = 1e9 + 7;

int mult (int x, int y) {
	return ll(x) * y % MOD;
}

void multeq (int &x, int y) {
	x = mult(x, y);
}

int pwr (int x, int y) {
	int res = 1;
	for (; y; y >>= 1) {
		if (y & 1) {
			multeq(res, x);
		}
		multeq(x, x);
	}
	return res;
}

int getinv (int x) {
	return pwr(x, MOD - 2);
}

int N, K, T;
int dp[MAXN][2 * MAXN];
int fact[MAXN];

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios::sync_with_stdio(false);
	cin >> N >> K >> T;
	for (int i = 0, x; i < K; i++) {
		cin >> x;
		T -= x;
	}
	//for each one: subtract 1 or add 1...get T
	if (abs(T - K) % 2) {
		cout << "0\n";
		return 0;
	}
	//see how many -1s and 1s you need
	int x = (K + T) / 2, y = (K - T) / 2;
	if (x < 0 || y < 0) {
		cout << "0\n";
		return 0;
	}
	//K choose x...
	fact[0] = 1;
	for (int i = 1; i <= K; i++) {
		fact[i] = mult(fact[i - 1], i);
	}
	cout << mult(fact[K], getinv(mult(fact[x], fact[y]))) << endl;
}
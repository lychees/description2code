// 2015-07-24
#include <bits/stdc++.h>
#include <unordered_map>
#include <array>
#include <forward_list>
#include <unordered_set>
using namespace std;


#ifndef LOCAL
//#define LOCAL
#endif

#define SET_BIT(mask, index) (mask |= (1 << index))
#define TEST_BIT(mask, index) (mask & (1 << index))
#define CLEAR_BIT(mask, index) (mask &= ~(1 << index))
#define TOGGLE_BIT(mask, index) (mask ^= (1 << index))
const int INF = 1000000000;
const double EPS = 1.0e-11;
const int NO_VALUE = -1;
using ii = pair < int, int > ;
using ll = long long;

const int MAX_N = 505;

vector<ii> adjl[MAX_N];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w+", stdout);
#endif
    
    int n;
    cin >> n;
    while (n--) {
        int a, b, w;
        cin >> a >> b >> w;
        adjl[a].push_back(ii(b, w));
        adjl[b].push_back(ii(a, w));
    }
    int u, q;
    cin >> u >> q;
    
    vector<int> dist(MAX_N, INF);
    dist[u] = 0;
    priority_queue<ii, vector<ii>, greater<ii>> pq;
    pq.push(ii(0, u));
    
    while (!pq.empty()) {
        ii fr = pq.top();
        pq.pop();
        int d = fr.first;
        int u = fr.second;
        
        if (d > dist[u]) {
            continue;
        }
        for (auto v : adjl[u]) {
            if (dist[u] + v.second < dist[v.first]) {
                dist[v.first] = dist[u] + v.second;
                pq.push(ii(dist[v.first], v.first));
            }
        }
    }

    while (q--) {
        int v;
        cin >> v;
        if (dist[v] == INF) {
            cout << "NO PATH\n";
        }
        else {
            cout << dist[v] << "\n";
        }
    }



    return 0;
}

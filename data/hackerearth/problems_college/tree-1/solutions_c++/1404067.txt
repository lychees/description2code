#include <bits/stdc++.h>
using namespace std;

#define rep1(i, begin, end) for (__typeof(begin) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define rep2(i, begin, end) for (__typeof(begin) i = (begin); i != (end) + 1 - 2 * ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 100005;
int n, tim, in[N], out[N];
vector<int> G[N];


void dfs(int v) {
	in[v] = ++tim;
	rep1(i, 0, G[v].size()) {
		dfs(G[v][i]);
	}
	out[v] = tim;
}

struct node {
    int sum, lazy;
    bool inv;
};

struct SegmentTree {
    vector<node> seg;
    int n;
    
    SegmentTree(int _n) {
        n = 1;
        while (n <= _n) n = n << 1;
        seg.resize(n << 1);
    }
    
    inline void lazy_evaluate(int ind, int len) {
    	if (seg[ind].inv) {
        	seg[ind].sum = len * seg[ind].lazy;
        	if (len > 1) {
            	int c1 = ind << 1, c2 = c1 | 1;
            	seg[c1].lazy = seg[ind].lazy; seg[c1].inv = seg[ind].inv;
            	seg[c2].lazy = seg[ind].lazy; seg[c2].inv = seg[ind].inv;
        	}
        	seg[ind].inv = 0;
    	}
    }
    
    inline void update_node(int ind) {
        seg[ind].sum = seg[ind + ind].sum + seg[ind + ind + 1].sum;
    }
    
    void build_tree(int ind, int s, int e) {
        if (e - s == 1) {
            seg[ind].sum = 1;
            seg[ind].lazy = 0;
            seg[ind].inv = false;
            return;
        }
        int c1 = ind << 1, c2 = c1 | 1, m = (s + e) >> 1;
        build_tree(c1, s, m);
        build_tree(c2, m, e);
        update_node(ind);
    }
    
    /* interval [s, e) */
    void update(int ind, int s, int e, int ss, int ee, int val) {
        lazy_evaluate(ind, e - s);
        if (s >= ee || e <= ss) return;
        if (s >= ss && e <= ee) {
            seg[ind].lazy = val;
            seg[ind].inv = 1;
            lazy_evaluate(ind, e - s);
            return;
        }
        int c1 = ind << 1, c2 = c1 | 1, m = (s + e) >> 1;
        update(c1, s, m, ss, ee, val);
        update(c2, m, e, ss, ee, val);
        update_node(ind);
    }
    
    /* interval [s, e) */
    int query(int ind, int s, int e, int ss, int ee) {
        lazy_evaluate(ind, e - s);
        if (s >= ee || e <= ss) return 0;
        if (s >= ss && e <= ee) return seg[ind].sum;
        int c1 = ind << 1, c2 = c1 | 1, m = (s + e) >> 1;
        int vl = query(c1, s, m, ss, ee);
        int vr = query(c2, m, e, ss, ee);
        update_node(ind);
        return vl + vr;
    }
};

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int p, q, id, s, root;
    cin >> n;
    rep2(i, 1, n) {
    	cin >> p;
    	if (p == 0) root = i;
    	G[p].push_back(i);
    }
    tim = -1;
    dfs(root);
    tim++;
    SegmentTree sg = SegmentTree(tim);
    sg.build_tree(1, 0, tim);
    cin >> q;
    rep1(i, 0, q) {
    	cin >> id >> s;
    	if (id == 1) {
    		sg.update(1, 0, tim, in[s] + 1, out[s] + 1, 1);
    	}
    	else if (id == 2) {
    		sg.update(1, 0, tim, in[s] + 1, out[s] + 1, 0);
    	}
    	else {
    		printf("%d\n", sg.query(1, 0, tim, in[s] + 1, out[s] + 1));
    	}
    }
    return 0;
}

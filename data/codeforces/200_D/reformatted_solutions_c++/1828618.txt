#include <algorithm>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <functional>
#include <iostream>
#include <limits>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#define all(a) (a).begin(), (a).end()
#define SORT(a) sort(all(a))
#define ft first
#define lt second
#define pb push_back
#define mp make_pair
using namespace std;
typedef long long int64;

vector<pair<string, vector<string>>> procs;
pair<string, vector<string>> curr;
map<string, string> params;

int find_all() {
  int sol = 0;
  bool ok;
  for (int i = 0; i < procs.size(); ++i) {
    ok = true;
    if (procs[i].ft != curr.ft)
      continue;
    if (procs[i].lt.size() != curr.lt.size())
      continue;
    for (int j = 0; j < curr.lt.size(); ++j) {
      if (procs[i].lt[j] != "T" && params[curr.lt[j]] != procs[i].lt[j]) {
        ok = false;
        break;
      }
    }
    sol += ok;
  }
  return sol;
}

int main(void) {
  int n, m, k;
  char str[110], str2[110], c;
  scanf("%d ", &n);
  procs.resize(n);
  for (int i = 0; i < n; ++i) {
    scanf(" void %[^ (] (", str);
    procs[i].ft = str;
    do {
      scanf(" %[^ ,)]", str2);
      procs[i].lt.pb(str2);
      scanf(" %c", &c);
    } while (c == ',');
  }
  scanf("%d", &m);
  for (int i = 0; i < m; ++i) {
    scanf(" %s %s", str, str2);
    params[str2] = str;
  }
  scanf("%d", &k);
  for (int i = 0; i < k; ++i) {
    scanf(" %[^ (] (", str);
    curr.ft = str;
    curr.lt.clear();
    do {
      scanf(" %[^ ,)]", str2);
      curr.lt.pb(str2);
      scanf(" %c", &c);
    } while (c == ',');
    printf("%d\n", find_all());
  }
  return 0;
}

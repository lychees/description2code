#include <iostream>     
#include <algorithm>    
#include<vector>

int graph[101][101],parent[101];
int distance1[101];
bool visited[101];
int t,n,m,a,b,c,k;

using namespace std;

void print()
{
        cout<<"distance1 array:\n";
        for(int i=1;i<=n;i++)
        {
                for(int j=1;j<=n;j++)
                {
                        cout<<graph[i][j]<<"\t";
                }
                cout<<"\n";        
        }
}

void fw()
{
        for(int k=1;k<=n;k++)
        {
                for(int i=1;i<=n;i++)
                {
                        for(int j=1;j<=n;j++)
                        {
                                if(i!=j)
                                if(graph[i][k]+graph[k][j]<graph[i][j])
                                        graph[i][j]=graph[i][k]+graph[k][j];
                        }
                }
        }
}

void solve()
{
        distance1[1]=0;
        visited[1]=true;
        int current=1;
        int count=1;
        int dist=0;
        while(count<k)
        {
                //cout<<"Current: "<<current<<" Distance: "<<dist<<"\n";
                visited[current]=true;
                int min=100000001;
                int next=-1;
                for(int i=1;i<=k;i++)
                {
                        if(visited[i]==true)
                        {
                                for(int j=1;j<=k;j++)
                                {
                                        if(graph[i][j]<min && visited[j]==false)
                                                {min=graph[i][j];next=j;}
                                }
                        }
                }
                dist=dist+min;
                current=next;
                count++;
                
        }
        cout<<dist<<"\n";
}

int main()
{
        cin>>t;
        for(int T=0;T<t;T++)
        {
                cin>>n>>m>>k;
                for(int i=1;i<=n;i++)
                {
                        for(int j=1;j<=n;j++)
                                graph[i][j]=1000001;
                        parent[i]=-1;
                        distance1[i]=100000001;
                        visited[i]=false;
                }
                for(int M=0;M<m;M++)
                {
                        cin>>a>>b>>c;
                        graph[a][b]=c;
                        graph[b][a]=c;
                }
                fw();
                //dijkstra();
                solve();
               // print();
               
        } 
        return 0;
}
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <cmath>
#include <stack>
#include <map>
#include <set>
#include <deque>
#include <cstring>
#include <functional>
#include <climits>
#include <list>
#include <ctime>
#include <complex>

#define F1(x,y,z) for(int x=y;x<z;x++)
#define F2(x,y,z) for(int x=y;x<=z;x++)
#define F3(x,y,z) for(int x=y;x>z;x--)
#define F4(x,y,z) for(int x=y;x>=z;x--)
#define pb push_back
#define LL long long
#define co complex<double>
 
#define MAX 100005
#define AMAX 1500
#define MOD 1000000007

#define f(c,d) ((1<<(c))*(d))

using namespace std;

int n,m,ta,tb,q[MAX*5][3],dp[MAX*5],par[MAX*5],anc[MAX*5],ia[MAX*5],ib[MAX*5],fr[MAX*5],ans;
bool v[MAX*5];
vector<int> va[MAX*5],si,la,lb;
vector<pair<int,int> > l[MAX*5];
vector<vector<int> > x[MAX*5];

int find(int a){
	if(par[a]==a)return a;
	return par[a]=find(par[a]);
}

void dfs1(int a,int b){
	fr[a]=b;
	dp[a]=1;
	par[a]=anc[a]=a;
	F1(c,0,va[a].size())if(va[a][c]!=b){
		dfs1(va[a][c],a);
		dp[a]+=dp[va[a][c]];
		par[find(va[a][c])]=find(a);
		anc[par[a]]=a;
	}
	v[a]=1;
	F1(c,0,l[a].size())if(v[l[a][c].first])q[l[a][c].second][2]=anc[find(l[a][c].first)];
}

void dfs2(int a,int b,int c){
	ia[a]=c;
	ib[a]=si[c];
	si[c]++;
	int ma=0,ti;
	F1(d,0,va[a].size())if(va[a][d]!=b&&dp[va[a][d]]>ma){
		ma=dp[va[a][d]];
		ti=d;
	}
	F1(d,0,va[a].size())if(va[a][d]!=b){
		if(d!=ti){
			si.pb(0);
			la.pb(c);
			lb.pb(ib[a]);
			dfs2(va[a][d],a,si.size()-1);
		}else dfs2(va[a][d],a,c);
	}
}

void f1(int a,int b,int c,int d){
	if(f(c,d)==a&&f(c,d+1)==b){
		x[tb][c][d]+=ta;
		return;
	}
	c--;
	d=d*2+1;
	if(b<=f(c,d))f1(a,b,c,d-1);
	else if(a>=f(c,d))f1(a,b,c,d);
	else{
		f1(a,f(c,d),c,d-1);
		f1(f(c,d),b,c,d);
	}
}

void add(int a,int b){
	//printf("add %d %d %d\n",a,b,ta);
	if(a==-1)return;
	tb=a;
	f1(0,b+1,x[a].size()-1,0);
	add(la[a],lb[a]);
}

void qu(int a,int b){
	//if(a==-1)return;
	F1(c,0,x[a].size()){
		//if(x[a][c][b])printf("x[%d][%d][%d]=%d\n",a,c,b,x[a][c][b]);
		ans+=x[a][c][b];
		b>>=1;
	}
	//qu(la[a],lb[a]);
}

int main(){
	scanf("%d%d",&n,&m);
	F1(a,1,n){
		scanf("%d%d",&ta,&tb);
		va[ta].pb(tb);
		va[tb].pb(ta);
	}
	F1(a,0,m){
		scanf("%d",&ta);
		if(ta==1){
			scanf("%d%d",&q[a][0],&q[a][1]);
			l[q[a][0]].pb(make_pair(q[a][1],a));
			l[q[a][1]].pb(make_pair(q[a][0],a));
		}else scanf("%d",&q[a][1]);
	}
	dfs1(1,0);
	si.pb(0);
	la.pb(-1);
	lb.pb(-1);
	dfs2(1,0,0);
	ia[0]=ib[0]=-1;
	F1(a,0,si.size()){
		x[a].pb(vector<int>());
		while(1<<(x[a].size()-1)<si[a])x[a].pb(vector<int>());
		F1(b,0,x[a].size())for(int c=0;f(b,c)<si[a];c++)x[a][b].pb(0);
	}
	F1(a,0,m){
		//printf("! %d\n",a);
		if(q[a][0]){
			ta=1;
			add(ia[q[a][0]],ib[q[a][0]]);
			add(ia[q[a][1]],ib[q[a][1]]);
			x[ia[q[a][2]]][0][ib[q[a][2]]]--;
			q[a][2]=fr[q[a][2]];
			ta=-2;
			add(ia[q[a][2]],ib[q[a][2]]);
		}else{
			ans=0;
			qu(ia[q[a][1]],ib[q[a][1]]);
			printf("%d\n",ans);
		}
		//if(a==0)F1(b,0,si.size())F1(c,0,x[b].size())F1(d,0,x[b][c].size())if(x[b][c][d])printf(" x[%d][%d][%d]=%d\n",b,c,d,x[b][c][d]);
	}
	//system("pause");
	return 0;
}

#include <bits/stdc++.h>

using namespace std;

const int N = 1e6 + 10;

int pos[N];
long long cs[N];

const int MAXN = 1e6;
bool is_prime[MAXN + 1];
vector <int> prime;

void sieve() {
	fill(is_prime + 2, is_prime + MAXN + 1, true);
	for (int i = 2; i * i <= MAXN; ++i) {
		if (is_prime[i] == true) {
			for (int j = i * i; j <= MAXN; j += i) {
				is_prime[j] = false;
			}
		}
	}
	for (int i = 2; i <= MAXN; i++) {
		if (is_prime[i] == true) {
			prime.push_back(i);
		}
	}
}

int main() {
	sieve();
	cs[0] = 0;
	for (int i = 1; i <= prime.size(); i++) {
		cs[i] = cs[i - 1] + prime[i - 1];
	}
	int tt;
	scanf("%d", &tt);
	for (int tc = 1; tc <= tt; tc++) {
		int a, b;
		scanf("%d %d", &a, &b);
		if (a > b) {
			swap(a, b);
		} 
		int lb = lower_bound(prime.begin(), prime.end(), a) - prime.begin();
		int ub = upper_bound(prime.begin(), prime.end(), b) - prime.begin();
		printf("%lld\n", cs[ub] - cs[lb]);
	}
	return 0;
}
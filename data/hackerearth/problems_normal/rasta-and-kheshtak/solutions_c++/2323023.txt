#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>
#include <sstream>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <map>
#include <unordered_set>
#include <list>
#include <queue>
#include <stack>
#include <vector>
#include <cassert>

using namespace std;

#define pb push_back
#define mp make_pair
#define REP(i, n) for (int i = 0; i < (int)(n); ++i)
typedef long long LL;
typedef pair<int, int> PII;

int n, m, x, y;
int a[777][777], b[777][777];
const int MUL[2] = {1009, 1019}, MOD[2] = {1000000007, 1000000009};
int mul[2][500000];
int suma[2][777][777] = {}, sumb[2][777][777] = {};

void calc(int (&a)[777][777], int (&sum)[2][777][777], int n, int m) {
    REP(t, 2) REP(i, n) REP(j, m) {
        sum[t][i + 1][j + 1] = (sum[t][i][j + 1] + sum[t][i + 1][j] - sum[t][i][j] + (LL)a[i][j] * mul[t][i * 700 + j]) % MOD[t];
        if (sum[t][i + 1][j + 1] < 0) sum[t][i + 1][j + 1] += MOD[t];
    }
}

class HashSet {
private:
    static const int BCNT = 100019;
    vector<LL> b[BCNT];

public:
    void insert(LL x) {
        int bc = x % BCNT;
        for (LL y : b[bc]) if (y == x) {
            return;
        }
        b[bc].pb(x);
    }

    void clear() {
        REP(i, BCNT) b[i].clear();
    }

    int count(LL x) {
        int bc = x % BCNT;
        for (LL y : b[bc]) if (y == x) {
            return 1;
        }
        return 0;
    }
};

HashSet se;

int main() {
    scanf("%d%d", &n, &m);
    REP(i, n) REP(j, m) scanf("%d", a[i] + j);
    scanf("%d%d", &x, &y);
    REP(i, x) REP(j, y) scanf("%d", b[i] + j);
    REP(i, 2) {
        mul[i][0] = 1;
        for (int j = 1; j < 500000; ++j) {
            mul[i][j] = (LL)mul[i][j - 1] * MUL[i] % MOD[i];
        }
    }
    calc(a, suma, n, m);
    calc(b, sumb, x, y);
    int lo = 0, hi = min(min(min(n, m), x), y), mid;
    while (lo < hi) {
        mid = (lo + hi + 1) >> 1;
        se.clear();
        REP(i, n - mid + 1) REP(j, m - mid + 1) {
            LL h = 0;
            REP(t, 2) {
                int cur = suma[t][i + mid][j + mid] - suma[t][i][j + mid] - suma[t][i + mid][j] + suma[t][i][j];
                cur = (LL)cur * mul[t][(700 - i) * 700 + 700 - j] % MOD[t];
                if (cur < 0) cur += MOD[t];
                h = (h << 32) | cur;
            }
            se.insert(h);
        }
        bool ok = false;
        REP(i, x - mid + 1) if (!ok) REP(j, y - mid + 1) {
            LL h = 0;
            REP(t, 2) {
                int cur = sumb[t][i + mid][j + mid] - sumb[t][i][j + mid] - sumb[t][i + mid][j] + sumb[t][i][j];
                cur = (LL)cur * mul[t][(700 - i) * 700 + 700 - j] % MOD[t];
                if (cur < 0) cur += MOD[t];
                h = (h << 32) | cur;
            }
            if (se.count(h)) {
                ok = true;
                break;
            }
        }
        if (ok) lo = mid;
        else hi = mid - 1;
    }
    printf("%d\n", lo);
    return 0;
}

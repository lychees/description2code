#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>
#include <fstream>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME "a"

const ld EPS = 1e-9;
const int MOD = 1e9 + 7;
const int A = 4;
const int S = A + 1;
const int MAXN = 1e6 + 10;

void mult(int a[S][S], int b[S][S], int res[S][S]) {
	static int ans[S][S];
	forn(i, S) forn(j, S) {
		ull cur = 0;
		forn(k, S) {
			cur += a[i][k] * 1ull * b[k][j];
		}
		ans[i][j] = cur % MOD;
	}
	memcpy(res, ans, sizeof ans);
}

int trans[A][S][S];

void precalc() {
	forn(c, A) {
		memset (trans[c], 0, sizeof trans[c]);
		forn(i, S) {
			trans[c][i][i] = 1;
		}
		forn(i, S) {
			trans[c][c][i] = 1;
		}	
	}
}

int s[MAXN];
int n, q;

inline int code(char c) {
	const string chars = "ACGT";
	forn(i, sz(chars)) {
		if  (chars[i] == c) {
			return i;
		}
	}
	assert(false);
	return -1;
}

void read() {
	scanf("%d%d\n", &n, &q);
	static char str[MAXN];
	gets(str);
	assert(n == (int) strlen(str));
	forn(i, n) {
		s[i] = code(str[i]);
	}
}

int t[1 << 21][S][S];
int sz;

void build() {
	sz = 1;
	while (sz < n) sz *= 2;

	memset (t, 0, sizeof t);
	for (int v = sz; v - sz < n; ++v) {
		memcpy(t[v], trans[s[v - sz]], sizeof trans[s[v - sz]]);
	}

	for (int v = sz - 1; v > 0; --v) {
		mult(t[v * 2], t[v * 2 + 1], t[v]);
	}
}

void update(int pos, int val) {
	s[pos] = val;
	int v = sz + pos;
	memcpy(t[v], trans[s[pos]], sizeof trans[s[pos]]);
	v /= 2;
	while (v > 0) {
		mult(t[v * 2], t[v * 2 + 1], t[v]);
		v /= 2;
	}
}

int get(int l, int r) {
	static int left[S][S];
	static int right[S][S];
	memset (left, 0, sizeof left);
	memset (right, 0, sizeof right);
	forn(i, S) {
		left[i][i] = right[i][i] = 1;
	}
	l += sz;
	r += sz;
	while (l <= r) {
		if  (l & 1) {
			mult(left, t[l], left);
		}
		if  (~r & 1) {
			mult(t[r], right, right);
		}
		l = (l + 1) / 2;
		r = (r - 1) / 2;
	}
	static int both[S][S];
	mult(left, right, both);
	int ans = 0;
	forn(i, S) {
		ans += both[i][S - 1];
		ans %= MOD;
	}
	return ans;
}

void solve() {
	forn(it, q) {
		int pos;
		char t;
		scanf("%d %c\n", &pos, &t);
		--pos;
		update(pos, code(t));
		printf("%d\n", get(0, n - 1));
	}
}

int main() {
#ifdef DEBUG
	freopen(FILE_NAME ".in", "r", stdin);
//	freopen(FILE_NAME ".out", "w", stdout);
#endif
	
	precalc();

	read();

	// forn(i, n) {
	// 	printf("%d", s[i]);
	// }
	// puts("");
	
	// forn(c, A) {
	// 	forn(i, S) {
	// 		forn(j, S) {
	// 			printf("%d ", trans[c][i][j]);
	// 		}
	// 		puts("");
	// 	}
	// 	puts("");
	// }

	build();

	// forn(v, sz + n) {
	// 	if  (v == 0) continue;
	// 	printf("v = %d\n", v);
	// 	forn(i, S) {
	// 		forn(j, S) {
	// 			printf("%d ", t[v][i][j]);
	// 		}
	// 		puts("");
	// 	}
	// 	puts("");
	// }

	solve();

	return 0;
}
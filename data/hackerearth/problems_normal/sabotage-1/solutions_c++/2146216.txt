#include<bits/stdc++.h>
#define pii pair<int,int>
using namespace std;
int find(int u,int parent[])
{
    if(parent[u]==-1) return u;
    return (parent[u]=find(parent[u],parent));
}
void Union(int u,int v,int parent[],int rank[])
{
    int root1=find(u,parent);
    int root2=find(v,parent);
    if(rank[root1]>rank[root2]) parent[root2]=root1;
    else parent[root1]=root2;
    if(rank[root1]==rank[root2]) rank[root2]++;
}
int main()
{
    int n,m;
    cin>>n>>m;
    pii flights[m];
    for(int i=0;i<m;i++)
    {
        int u,v;
        cin>>u>>v;
        flights[i]=make_pair(u-1,v-1);
    }
    int parent[n],rank[n];
    stack<int> ans;
    memset(parent,-1,sizeof(parent));
    memset(rank,0,sizeof(rank));
    for(int i=m-1;i>=0;i--)
    {
        if(find(flights[i].first,parent)==find(flights[i].second,parent)) ans.push(i+1);
        else Union(flights[i].first,flights[i].second,parent,rank);
        /*cout<<"After processing Flight-"<<i+1<<":"<<endl;
        for(int j=0;j<n;j++) cout<<parent[j]<<" ";
        cout<<endl;*/
    }
    cout<<ans.size()<<endl;
    while(!ans.empty())
    {
        cout<<ans.top()<<endl;
        ans.pop();
    }
    return 0;
}

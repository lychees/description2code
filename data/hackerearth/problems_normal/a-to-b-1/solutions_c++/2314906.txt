/* ???ng ?i t? n?t g?c ??n n?t l? l? logn.
   N?n khi c?p nh?t m?t gi? tr? ta ?i t? g?c ??n l? c?p nh?t l?i m?t logn
*/
 
using namespace std;
#include<bits/stdc++.h>
 
#define FOR(i,a,b) for (int i=a;i<b;i++)
#define FORE(i,a,b) for (int i=a;i<=b;i++)
#define FORD(i,a,b) for (int i=a;i>=b; i--)
 
 
typedef long long ll;
const ll INF=1000000000+7;
 
int n,q,d,id;
ll a[100000+10],t[800000+10],x,ans;
 
void build_tree(int k, int l, int r)
{
    if (l>r) return;
    if (l==r)
    {
        t[k]=a[l];
        return;
    }
    int m=(l+r)/2;
    build_tree(k*2,l,m);
    build_tree(k*2+1,m+1,r);
    t[k]=t[k*2]*t[k*2+1]%INF;
}
 
void update_tree(int k, int l, int r, int u, int v)
{
	if (l==r)
	{
		t[k] = v;
		return;
	}
	int m=(l+r)/2;
    if (u <= m) update_tree(k*2,l,m, u, v);
    else update_tree(k*2+1,m+1,r, u, v);
    t[k]=t[k*2]*t[k*2+1]%INF;	
 
}
 
ll get(int k, int l, int r, int i, int j)
{
    if (i>r || j<l) return (ll) 1;
    if (i<=l && r<=j) return t[k];
    int m=(l+r)/2;
    ll t1=get(k*2,l,m,i,j);
    ll t2=get(k*2+1,m+1,r,i,j);
    return (t1*t2%INF);
}
 
int main()
{
 //   freopen("a-to-b-1.inp", "r", stdin);
 //   freopen("a-to-b-1.out", "w", stdout);
    cin >> n;
    FORE(i,1,n) cin >> a[i];
 
    build_tree(1,1,n);
    cin >> q;
    while (q--)
    {
        cin >> d;
        if (d==0)
        {
            cin >> id >> x;
            a[id]=x;
            update_tree(1,1,n,id,x);
        }
        else
        {
            cin >> id;
            ans=get(1,1,n,1,id-1)*get(1,1,n,id+1,n)%INF;
            cout << ans << "\n";
        }
    }
}
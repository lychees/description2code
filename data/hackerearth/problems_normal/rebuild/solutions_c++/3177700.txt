/*

-------------------------------------------------------------------------------------------------\
 \       |AUTHOR: RAGHU PAAVAN(rap)  :D ---------------------------------------------------------- \
 /       |        NIT CALICUT  ------------------------------------------------------------------- /
---------|----------------------------------------------------------------------------------------/

*/
#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define ll    long long int
#define all(c) c.begin(),c.end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define scan(x) scanf("%d", &x)
#define scanl(x) scanf("%lld", &x)
#define print(a) printf("%d\n",a)
#define printl(a) printf("%lld\n",a)
#define pb push_back
#define maxn 100005
ll a[maxn];
struct points
{
    int u;
    int v;
    int weight;
};
points pt[100005];
int cus(points a , points b)
{
    return (a.weight<b.weight)||((a.weight==b.weight)&&(a.u>b.u))||((a.weight==b.weight)&&(a.u==b.u)&&(a.v>b.v));
}
int deg[100005];
int ran[100005];
int parent[100005];
int getparent(int x)
{
    if(x==parent[x])return x;
    else
    {
        parent[x]=getparent(parent[x]);
        return parent[x];
    }
}

bool join(int a , int b)
{
    if(getparent(a)==getparent(b))return false;
    if(ran[a]>ran[b])
    {
        int p=getparent(b);
        parent[p]=getparent(a);
        return true;
    }
    else
    {
        int p=getparent(a);
        parent[p]=getparent(b);
        return true;
    }

}

int main()
{
    int i,j,k,n,m,t,x,y,w;
    scan(t);
    while(t--)
    {
        memset(deg,0,sizeof(deg));
        //cin>>n>>m;
        scan(n);
        scan(m);
        for(i=0;i<m;i++)
        {
            //cin>>x>>y>>w;
            scan(x);
            scan(y);
            scan(w);
            pt[i].u=min(x,y);
            pt[i].v=max(x,y);
            pt[i].weight=w;
        }
        sort(pt,pt+m,cus);
        for(i=1;i<=n;i++)parent[i]=i;
        int cou=0;
        i=0;
        ll ans=0;
        while(cou<n-1)
        {
            if(getparent(pt[i].u)!=getparent(pt[i].v))
            {
                join(pt[i].u,pt[i].v);
                deg[pt[i].u]++;
                deg[pt[i].v]++;
                ans+=pt[i].weight;
                cou++;
            }
            i++;
        }
        printl(ans);
        for(i=1;i<=n;i++)printf("%d ",deg[i]);
        printf("\n");
    }
    return 0;
}

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <set>
#include <map>
#include <queue> 
#include <climits>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define pb push_back
#define mp make_pair
#define sz size()
#define ln length()
#define forr(i,a,b)                 for(int i=a;i<b;i++)
#define rep(i,n)                    forr(i,0,n) 
#define all(v)                      v.begin(),v.end()	
#define uniq(v)                     sort(all(v));v.erase(unique(all(v)),v.end())
#define clr(a)                      memset(a,0,sizeof a)
	
#define debug                       if(1)
#define debugoff                    if(0)	

#define print(x)                 cerr << x << " ";    
#define pn()				     cerr << endl;
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;

#define MAX 1010
#define MOD 1000000007
#define endl '\n'
int m,n;
int mem[MAX][MAX];
int solve(int fp,int hp){
	trace2(fp,hp);
	if(fp == n && hp == 0)	return 0;
	if(fp == n && hp != 0)  return (1<<20);

	int rem = n - (fp + hp);
	//int& res = mem[fp][hp];
	//if(res != -1)	return res;
	int res = (1<<20);

	for(int i=0;i<=hp;i++)
		if(rem > 0)
			res = min(res,5 + solve(fp+i,hp-i + (min(rem,m-i))));

	return res;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	int t,q,rem,ans,qm;
	cin>>t;
	while(t--)
	{
		cin>>m>>n;
		/*memset(mem,-1,sizeof mem);
		ans = 5 + solve(0,m);
		cout<<ans<<endl;
		*/
		q = n/m;
		rem = n%m;
		ans = q*5;
		qm = q*m;//5s
		if(rem != 0){
			ans += 5;
			qm += rem;
			qm -= (m-rem);
		}

		ans += (qm / m)*5;
		ans += ((qm % m) != 0 )? 5 : 0;
		cout<<ans<<endl; 

	}
	return 0; 
}
#include <iostream>
using namespace std;

#define MOD 1000000007

class matrix {
    public:
    long long a[2][2];

    matrix() {
        a[0][0] = a[1][1] = 1;
        a[0][1] = a[1][0] = 0;
    }

    matrix(long long b[]) {
        a[0][0] = b[0];
        a[0][1] = b[1];
        a[1][0] = b[2];
        a[1][1] = b[3];
    }

    matrix operator *(matrix b) {
        matrix c;
        c.a[0][0] = ((a[0][0]*b.a[0][0])%MOD+(a[0][1]*b.a[1][0])%MOD)%MOD;
        c.a[0][1] = ((a[0][0]*b.a[0][1])%MOD+(a[0][1]*b.a[1][1])%MOD)%MOD;
        c.a[1][0] = ((a[1][0]*b.a[0][0])%MOD+(a[1][1]*b.a[1][0])%MOD)%MOD;
        c.a[1][1] = ((a[1][0]*b.a[0][1])%MOD+(a[1][1]*b.a[1][1])%MOD)%MOD;
        return c;
    }

    matrix powmod(matrix a, long long n) {
        matrix res;
        while(n) {
            if(n&1) res = res*a;
            a = a*a;
            n >>= 1;
        }
        return res;
    }
};

int main() {
    long long mat[] = {1,1,1,0};
    matrix con(mat);
    int q;
    cin >> q;
    while(q--) {
        matrix con1(mat);
        long long n;
        cin >> n;
        if ( n<=4 ) {
            cout << 1 << endl;
            continue;
        }
        n = (n-1)/2;
        matrix mul = con.powmod(con1,n-1);
        long long res = mul.a[0][0]+mul.a[0][1];
        res = (res*res)%MOD;
        cout << res << endl;
    }
    return 0;
}

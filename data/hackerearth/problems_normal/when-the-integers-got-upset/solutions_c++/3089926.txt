#include<bits/stdc++.h>
using namespace std;
int n,ar[20],p[20];
int dp[5000][15][15];
int ones(int x)
{
	int c=0;
	while(x!=0)
	{
		x=x&(x-1);
		c++;
	}
	return c;
}
int doit(int state,int pr,int pp)
{
	int count=ones(state);
	if(count==n)
	return 0;
	if(pr!=-1&&pp!=-1&&dp[state][pr][pp]!=-1)
	return dp[state][pr][pp];
	int i,j,ans=1000000000,a;
	if(count<=1)
	{
		for(i=0;i<n;i++)
		{
			if((state&(1<<i))==0)	//zero if ith bit of state is not set
			{
				state=state|(1<<i);
				ans=min(ans,doit(state,i,pr));
				state=state^(1<<i);
			}
		}
	}
	else
	{
		for(i=0;i<n;i++)
		{
			if((state&(1<<i))==0)	//zero if ith bit of state is not set
			{
				state=state|(1<<i);
				a=doit(state,i,pr)+(ar[i]^ar[pr]^ar[pp])*p[count];
				state=state^(1<<i);
				ans=min(ans,a);
			}
		}
	}
	//printf("%d\n",ans);
	if(pr!=-1&&pp!=-1)
	return dp[state][pr][pp]=ans;
	return ans;
}
int main()
{
	int t,i;
	scanf("%d",&t);
	while(t--)
	{
		memset(dp,-1,sizeof(dp));
		scanf("%d",&n);
		for(i=0;i<n;i++)
		scanf("%d",&ar[i]);
		for(i=0;i<n;i++)
		scanf("%d",&p[i]);
		int maxsum=doit(0,-1,-1);
		printf("%d\n",maxsum);
	}
}
#include<bits/stdc++.h>
#define mp make_pair
#define endl '\n'
#define pi pair<int,int>
#define int long long
#define mod (1000*1000*1000 +7)
using namespace std;
int t=1,len;
vector<int> v[102],c[102],d[102];
int n,m,x;
int dp[102][1002],cd[102][1002];
 main()
{
    ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
   while(t--)
   {
       cin>>n>>m;
       for(int i=0;i<n;i++)
       {
           cin>>len;
           for(int j=0;j<len;j++)
           {
               cin>>x;
               v[i].push_back(x);
               c[i].push_back(0);
               d[i].push_back(0);

           }
       }
       // find cumulative sum from left
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<v[i].size();j++)
           {
               if(j!=0)c[i][j]=c[i][j-1];
               c[i][j]+=v[i][j];
           }
       }


       for(int i=0;i<n;i++)
       {
           for(int sz=0;sz<=m;sz++)
           {
               if(sz==0)cd[i][sz]=0;
               else cd[i][sz]=-INT_MAX;
           }
       }


       for(int i=0;i<n;i++)
       {
           for(int sz=1;sz<=m;sz++)
               {
           for(int j=0;j<v[i].size();j++)
           {
               if(j+sz-1>=v[i].size())break;
               int si=c[i][j+sz-1];
               if(j>0)si-=c[i][j-1];
               cd[i][sz]=max(cd[i][sz],si);
            //   if(i==0&&sz==1)cout<<si<<" ";
           }
          // cout<<i<<" "<<sz<<" "<<cd[i][sz]<<endl;
               }
       }

       for(int i=n-1;i>=0;i--)
       {
           for(int j=0;j<=v[i].size();++j)
           {
               int sum=0;
               if(j>0)sum=cd[i][j];
               for(int k=m;k>=0;--k)
               {if(k<j)break;
               dp[i][k]=max(dp[i][k],sum+dp[i+1][k-j]);
               //cout<<i<<" "<<k<<" "<<j<<" "<<dp[i][k]<<endl;
               }
           }
       }
       int ans=0;
       for(int i=0;i<=m;i++)ans=max(ans,dp[0][i]);
       cout<<ans;

   }
   return 0;
}

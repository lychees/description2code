#define _CRT_SECURE_NO_DEPRECATE
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <sstream>
#include <fstream>
#include <ctime>
#include <cstring>
#pragma comment(linker, "/STACK:16777216")
using namespace std;
#define pb push_back
#define ppb pop_back
#define pi 3.1415926535897932384626433832795028841971
#define mp make_pair
#define x first
#define y second
#define pii pair<int,int>
#define pdd pair<double,double>
#define INF 1000000000
#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))
#define rep(i,n) FOR(i,1,(n))
#define rept(i,n) FOR(i,0,(n)-1)
#define L(s) (int)((s).size())
#define C(a) memset((a),0,sizeof(a))
#define VI vector <int>
#define ll long long
 
int a,b,c,d,i,j,n,m,k,kolt;
bool pr[21][200001];
int mr[21];
const int mx = 200000;
int bad[200001];
bool used[200001];
inline void fast(int d, int n) {
	C(bad);
 
	rep(i, n) {
		if (bad[i]) continue;
		int c = i % d;
		while (mr[c] <= n && pr[c][mr[c]]) ++mr[c];
		int v = i + mr[c];
		if (v > n) continue;
		while (v <= n && used[v]) {
			++v;
			while (v <= n && pr[c][v - i]) ++v;
		}
		if (v > n) continue;
		pr[c][v - i] = 1;
		bad[i] = v;
		bad[v] = i;
		used[v] = 1;
		used[i] = 1;
	}
}
vector<pii> fen[200001];
inline void add(int x, int y, int v) {
	for (;y <= mx; y |= y + 1) {
		int cv = fen[y].back().y;
		fen[y].pb(mp(x, cv + v));
	}
}
inline int sum(int x, int y) {
	int ans = 0;
	for (;y >= 0; y = (y & (y + 1)) - 1) {
		int cv = upper_bound(all(fen[y]), mp(x, INF)) - fen[y].begin() - 1;
		ans += fen[y][cv].y;
	}
	return ans;
}
inline int sum(int x1, int y1, int x2, int y2) {
	int ans = sum(x2, y2);
	ans -= sum(x1 - 1, y2);
	ans -= sum(x2, y1 - 1);
	ans += sum(x1 - 1, y1 - 1);
	return ans;
}
inline ll gcd(ll a, ll b) {
	for (;b;swap(a,b)) a %= b;
	return a;
}
int main()
{

	cin>>d>>kolt;
 
	fast(d, mx);
	rept(i, mx + 1) fen[i].pb(mp(0, 0));
	rept(i, mx + 1) {
		if (bad[i] == 0) continue;
		add(i, bad[i], 1);
	}
 
	rep(hod, kolt) {
		cin>>a>>b>>c>>d;
		ll zn = (ll)(c - a + 1) * (d - b + 1);
		ll ch = sum(a, b, c, d);
		ll g = gcd(ch, zn);
		ch /= g; zn /= g;
		cout << ch << "/" << zn << "\n";
	}
 return 0;
	
} 
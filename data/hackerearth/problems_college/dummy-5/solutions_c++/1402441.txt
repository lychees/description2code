#define _USE_MATH_DEFINES
#include <algorithm>
#include <cstdio>
#include <functional>
#include <iostream>
#include <cfloat>
#include <climits>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <time.h>
#include <vector>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> i_i;
typedef pair<ll, int> ll_i;
typedef pair<double, int> d_i;
typedef pair<ll, ll> ll_ll;
typedef pair<double, double> d_d;
struct edge { int u, v, w; };

ll MOD = 1000000007;
ll _MOD = 1000000009;
double EPS = 1e-10;
int INF = INT_MAX / 2;

int main() {
	int T; cin >> T;
	for (int t = 1; t <= T; t++) {
		int GP, GC, GF;
		cin >> GP >> GC >> GF;
		int N; cin >> N;
		vector<int> P(N), C(N), F(N);
		for (int i = 0; i < N; i++)
			cin >> P[i] >> C[i] >> F[i];
		int n = N / 2;
		set<vector<int> > s;
		for (int S = 0; S < (1 << n); S++) {
			int sumP = 0, sumC = 0, sumF = 0;
			for (int i = 0; i < n; i++)
				if (S & (1 << i)) {
					sumP += P[i];
					sumC += C[i];
					sumF += F[i];
				}
			vector<int> v(3);
			v[0] = sumP; v[1] = sumC; v[2] = sumF;
			s.insert(v);
		}
		bool ok = false;
		for (int S = 0; S < (1 << (N - n)); S++) {
			int sumP = 0, sumC = 0, sumF = 0;
			for (int i = 0; i < N - n; i++)
				if (S & (1 << i)) {
					sumP += P[n + i];
					sumC += C[n + i];
					sumF += F[n + i];
				}
			vector<int> v(3);
			v[0] = GP - sumP; v[1] = GC - sumC; v[2] = GF - sumF;
			if (s.count(v)) ok = true;
		}
		cout << "Case #" << t << ": " << (ok ? "yes" : "no") << endl;
	}
}
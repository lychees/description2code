#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include<cmath>
using namespace std;

vector<int> primes;
vector<bool> dp(1000010, false);
//int count[1010];

void sieve()
{
	int limit = sqrt(1000010);
	//cout<<limit<<endl;
	primes.push_back(2);
	//for(ull i=2;i<=limit;i+=2) dp[i] = true; //optimization
	dp[1] = true;
	for(int i=3;i<=limit;i+=2)
	{
		if(!dp[i])
		{
			primes.push_back(i);
			for(int j = i*i;j <= limit;j+=2*i)
			{
				dp[j] = true;
			}
		}
	}
	//cout<<primes.size()<<endl;
}

bool divisors(int num)
{
	int limit = sqrt(num);
	
//	for(int i=0;i < primes.size() && primes[i] <= limit;i++) count[primes[i]] = 0;
	
	int i;
	int count = 0;
	for(i=0;i < primes.size() && primes[i] <= limit && num != 1;i++)
	{
		bool flag = false;
		while(num%primes[i] == 0)
		{
			flag = true;
//			count[primes[i]]++;
			num/=primes[i];
		}
		if(flag) {
//			cout<<primes[i]<<" ";
			count++;	
		}
	}
	
//	limit = i;
//	
//	for(i=0;i < limit;i++)
//	{
//		if(count[primes[i]] != 0)
//		{
//			cout<<primes[i]<<"^"<<count[primes[i]]<<" ";
//		}
//	}
	if(num > 1) {
		count++;//cout<<num<<"^"<<1<<" ";
//		cout<<num;
	}	
//	cout<<"\n";
//	cout<<endl;
//	cout<<count<<"\n";
//	cout<<dp[count]<<"\n";
	if(count != 2 && count % 2 == 0) return false;
	return !dp[count];
}

int gcd(int a,int b)
{
//	cout<<"gcd: "<<a<<" "<<b<<endl;
	if(b == 0) return a;
	return gcd(b,a%b);
}

int main(){
	sieve();
	int t;
	cin>>t;
	int a, b;
	while(t--){
		cin>>a>>b;
		int lcm = (a*b)/gcd(a,b);
//		cout<<lcm<<endl;
		cout<<(divisors(lcm) ? "Yes" : "No")<<"\n";
	}
	return 0;
}
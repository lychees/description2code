#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<pii> vpii;
typedef vector<pll> vpll;

#define ins insert
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define rep(i,s,n) for(i=s;i<n;i++)
#define ms(x,y) memset(x, y, sizeof(x))
#define si(x) scanf("%d",&x)
#define sl(x) scanf("lld", &x)
#define optimize ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define flsh fflush(stdout);
#define inf 100000000

int p[100005];

void power()
{
    p[0] = 1;
    for(int i = 1; i < 100004; i++)
    {
        p[i] = (p[i-1]*2)%3;
    }
}
class segTree
{
public:
    int n;
    vi tree, a;
    #define left (node << 1)
    #define right ((node << 1) + 1)
    #define mid (L+R)/2

    void build(int node, int L, int R)
    {
        if(L == R)
        {
            tree[node] = a[L];
        }
        else
        {
            build(left, L, mid);
            build(right, mid+1, R);
            tree[node] = (tree[left]*p[R - mid]+tree[right])%3;
        }
    }
    segTree(vi _a)
    {
        n = _a.size();
        a = _a;
        tree.assign(4*n, 0);
        build(1, 0, n-1);
    }
    void update(int node, int L, int R, int pos)
    {
        if(pos < L || pos > R) return;

        if(L == R)
        {
            tree[node] = 1;
        }
        else
        {
            update(left, L, mid, pos);
            update(right, mid+1, R, pos);
            tree[node] = (tree[left]*p[R - mid]+tree[right])%3;
        }
    }
    int query(int node, int L, int R, int i, int j)
    {
        if(L > j || R < i) return 0;
        if(L >= i && R <= j)
        {
            return (tree[node]*p[j-R])%3;
        }
        return (query(left, L, mid, i, j) + query(right, mid+1, R, i, j))%3;
    }
};
int main()
{
    power();
    int i, j, k, m, n, x, y, z;
    int q;
    cin >> n;
    string s; cin >> s;
    vi a; a.assign(n, 0);

    rep(i, 0, n)
    {
        a[i] = s[i] - '0';
    }

    segTree st(a);

    cin >> q;
	rep(i, 0, q)
    {
        cin >> k;
        if(k)
        {
            cin >> x;
            if(a[x] == 0)
            {
                a[x] = 1;
                st.update(1, 0, n-1, x);
            }
        }
        else
        {
            cin >> x >> y;
            cout << (st.query(1, 0, n-1, x, y))%3 << "\n";
        }
    }
    return 0;
}

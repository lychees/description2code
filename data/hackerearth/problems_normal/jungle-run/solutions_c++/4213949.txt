#define _CRT_SECURE_NO_DEPRECATE
#include<iostream>
using namespace std;

char grid[1001][1001];
bool visited[1001][1001];
char str[10001];

int n;
int sx, sy;
int ex, ey;
int adjX[4] = {-1, 1, 0,  0 };
int adjY[4] = { 0, 0, -1, 1 };
int ans;

struct node{
	int x;
	int y;
	int dist;
};

void bfs(int x, int y){
	
	int front = 0, rear = 0;
	int tx, ty;
	node queue[1001];
	node temp, temp1;
	
	temp.x = x;
	temp.y = y;
	temp.dist = 0;
	grid[x][y] = 'P';
	queue[rear++] = temp;


	while (front < rear){

		temp = queue[front++];
		visited[temp.x][temp.y] = true;
		for (int i = 0; i < 4; i++){
			
			tx = temp.x + adjX[i];
			ty = temp.y + adjY[i];

			if (tx >= 0 && tx < n && ty >= 0 && ty < n && !visited[tx][ty] && (grid[tx][ty] == 'P' || grid[tx][ty] == 'E')){
				temp1.x = tx;
				temp1.y = ty;
				temp1.dist = temp.dist + 1;
				if (tx == ex && ty == ey){
					//cout << "aaa\n";
					ans = temp.dist + 1;
					return;
				}
				queue[rear++] = temp1;
			}

		}
		
	}

}

int main(){
	
	int testc;
	//freopen("c:/sample_input.txt", "r", stdin);
	//cin >> testc;
	//for (int zz = 1; zz <= testc; zz++){
		//ans = 99999;
		cin >> n;
		for (int i = 0; i < n; i++){
			//cin >> str;
			for (int j = 0; j < n; j++){
				cin>>grid[i][j];
				if (grid[i][j] == 'S'){
					sx = i;
					sy = j;
				}
				else if (grid[i][j] == 'E'){
					ex = i;
					ey = j;
				}
				visited[i][j] = false;
			}
		}

		bfs(sx, sy);
		cout << ans << endl;
	//}
}
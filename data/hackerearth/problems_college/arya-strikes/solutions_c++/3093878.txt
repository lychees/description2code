#include<bits/stdc++.h>
using namespace std;
#define maxN 1000
int n;
int arr[maxN][maxN],visit[maxN][maxN];
struct node{
	int x,y;
};
int main(){
	int t;
	cin>>t;
	while(t--){
		cin>>n;
		memset(arr,0,sizeof(arr));
		memset(arr,0,sizeof(visit));
		
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				scanf("%d",&arr[i][j]);
			}
		}
		if(arr[0][0]==0 || arr[n-1][n-1]==0){
			cout<<"NOT POSSIBLE"<<endl;
			continue;
		}else{
			list<struct node> q;
			struct node a;
			a.x=0;
			a.y=0;
			visit[0][0]=1;
			q.push_back(a);
			int flag=0;	
			while(!q.empty()){
				struct node u=q.front();
			//	cout<<u.x<<" "<<u.y<<endl;
				q.pop_front();
				if(u.x==n-1 && u.y==n-1){
					cout<<"POSSIBLE"<<endl;
					flag=1;
					break;
				}
				if(u.x+1<n && visit[u.x+1][u.y]==0 && arr[u.x+1][u.y]==1){
					visit[u.x+1][u.y]==1;
					struct node v;
					v.x=u.x+1;
					v.y=u.y;
					q.push_back(v);
				}
				if(u.y+1<n && visit[u.x][u.y+1]==0 && arr[u.x][u.y+1]==1){
					visit[u.x][u.y+1]==1;
					struct node v;
					v.x=u.x;
					v.y=u.y+1;
					q.push_back(v);
				}
			}
			if(flag==1)continue;
			cout<<"NOT POSSIBLE"<<endl;
		}
	}
	return 0;
}
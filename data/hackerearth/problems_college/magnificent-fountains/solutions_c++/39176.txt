#include<stdio.h>
#include<iostream>
#include<cstring>
#include<vector>
#include<math.h>
#include<algorithm>

#define maxN(a,b) ((a>b)?(a):(b))
#define minN(a,b) ((a<b)?(a):(b))
#define INF (int)10e9
#define MOD 1000000007

using namespace std;

typedef vector<int> V;
typedef pair<int,int> PII;
typedef unsigned long long ull;


int num[1002];
int prime[10002];
int pow(int a, int b) {
ull x = 1, y = a;
    while(b > 0) {
        if(b%2 == 1) {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}
 
int modInverse(int a, int m) {
    return pow(a,m-2);
}

void init(){
	for (int i = 0; i < 10002; ++i)
	{
		prime[i] = 0;
	}
}

int GCD(int a, int b) {
	int t;
	while(b != 0){
		t = b;
		b = a % b;
		a = t;
	}
	return a;
}


int main() {

	int T, N;
	cin >> T;
	init();
	while ( T-- ) {
		cin >> N;
		for (int i = 0; i < N; ++i)	cin >> num[i];
	
		for (int i = 0; i < N; ++i)
		{	
			int k = 2;
			int cnt = 0;
			while(num[i] > 1) {
				while(num[i] % k == 0){
				 	num[i] /= k; 
				 	cnt++;
				}
				if(prime[k] < cnt )  prime[k] = cnt;
				++k;
				cnt = 0;
			}

		}

		ull ans =  1;
		for (int i = 0; i < 10002; ++i)
		{
			if( prime[i] > 0 ) {
				ans = (ans * pow(i,prime[i]) )% MOD;
				//printf("%d %d\n", i, prime[i]);
			}
		}


	/*	ull ans = num[0];
		for (int i = 1; i < N; ++i) {
			if( num[i] == 1 ) continue;
			int _gcd = GCD( ans, num[i]);
			ull temp = ans * num[i]; 
			ans = ((temp % MOD)* modInverse(_gcd, MOD)) % MOD;
		} */

		cout << ans << endl;
	}
	return 0;
} 
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME ""

const ld EPS = 1e-9;
const int MOD = 1e9 + 7;

void add(int& x, int y) {
  ((x += y) >= MOD) && (x -= MOD);
}

int mul(int x, int y) {
  return x * 1ll * y % MOD;
}

struct FenwTree {
  vi t;

  FenwTree(int n = 0) {
    t.assign(n, 0);
  }

  void upd(int pos, int add) {
    for (int i = pos; i < sz(t); i |= i + 1) {
      t[i] += add;
    }
  }

  int get(int r) {
    int res = 0;
    for (int i = r; i >= 0; i &= i + 1, --i) {
      res += t[i];
    }
    return res;
  }

  int get(int l, int r) {
    return get(r) - get(l - 1);
  }
};

const int MAXN = 2e5 + 10;

int pow2[MAXN];

void precalc() {
  pow2[0] = 1;
  for (int i = 1; i < MAXN; ++i) {
    pow2[i] = mul(2, pow2[i - 1]);
  }
}

int main() {
#ifdef LOCAL
  freopen(FILE_NAME ".in", "r", stdin);
//  freopen(FILE_NAME ".out", "w", stdout);
#endif

  precalc();

  int n;
  scanf("%d", &n);
   
  int ans = 0;
  FenwTree T(n);
  forn(i, 2 * n) {
    int x;
    scanf("%d", &x);
    --x;

    add(ans, mul(pow2[n - 2], T.get(x - 1)));
    add(ans, mul(pow2[n - 2], mul(3, T.get(x + 1, n - 1))));
    add(ans, mul(pow2[n - 1], T.get(x, x)));

    T.upd(x, +1);
  }

  printf("%d\n", ans);
  return 0;
}

#include <bits/stdc++.h>
using namespace std;
vector <int> g[100001];
char bg[100001];
char col[100001];
int vst[100001];
bool flag=true;
void dfs(int v,char c)
{	
	int node;
	if(vst[v])
		return;
	else
	{
		vst[v]=1;
		col[v]=c;
	}
	for(int i=0;i<g[v].size();i++)
	{	
		node=g[v][i];
		if(vst[node])
		{
			if(col[node]==c)
			{
				flag=false;
				return;
			}
		}
		else
		{
			if(col[v]=='B')
				col[node]='P';
			else
				col[node]='B';
			dfs(node,col[node]);
		}
	}
}
int main()
{	
	memset(col,0,sizeof(col));
	memset(vst,0,sizeof(vst));
	int n,m,ans=0,ans2=0,i,u,v;
	cin>>n>>m;
	for(i=1;i<=n;i++)
	{
		cin>>bg[i];
	}
	while(m--)
	{
		cin>>u>>v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	dfs(1,'P');
	if(flag==false)
	{
		cout<<"Not possible";
	}
	else
	{
		for(i=1;i<=n;i++)
		{
			if((bg[i]=='B' && col[i]=='P')||(bg[i]=='G' && col[i]=='B'))
				ans++;
		}
		memset(col,0,sizeof(col));
		memset(vst,0,sizeof(vst));
		dfs(1,'B');
		for(i=1;i<=n;i++)
		{
			if((bg[i]=='B' && col[i]=='P')||(bg[i]=='G' && col[i]=='B'))
				ans2++;
		}
		ans=min(ans,ans2);
		cout<<ans;
	}
	
    
    return 0;
}

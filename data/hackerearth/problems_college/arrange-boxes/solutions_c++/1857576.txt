#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string.h>
#include <stdlib.h>

using namespace std;

#define MAXN 100000
#define INF 1000000000
#define MOD 1000000007

int a[MAXN + 1];
long long int cnt = 0;
int b[MAXN + 1];

inline void inp(int &n){
        n = 0;
        char ch = getchar();
        int sign = 1;
        while(ch < '0' || ch > '9'){
                 if(ch == '-')
                       sign = -1;
                 ch = getchar();
        }
        while(ch >= '0' && ch <= '9'){
                n = (n<<3) + (n<<1) + ch - '0';
                ch = getchar();
        }
        n = n*sign;
}

void merge(int p,int q,int r){
	int n1 = 0,n2 = 0,i,j;
	int left[MAXN + 1];
    int right[MAXN + 1];

	int k=p;
	while(p <= q){
		left[n1] = a[p];
		n1++;
		p++;
	}
	q=q+1;
	while(q<=r){
		right[n2]=a[q];
		q++;
		n2++;
	}
	i=0,j=0;
	while(i<n1 && j<n2){
		if(left[i]<=right[j]){
			a[k]=left[i];
			i++;
			k++;
		}
		else{
			a[k]=right[j];
			cnt+=(n1-i);
			j++;
			k++;
		}
	}
	while(i<n1){
		a[k]=left[i];
		i++;
		k++;
	}
	while(j<n2){
		a[k]=right[j];
		j++;
		k++;
	}
}

void mergesort(int p,int r){
	int q;
	if(p<r){
		q = (p + r) / 2;
		mergesort(p, q);
		mergesort(q + 1, r);
		merge(p, q, r);
	}
}

int main(){
    int T, N, x;

    inp(T);
    while(T--) {
               inp(N);
               for(int i = 0; i < N; i++) {
                       inp(x);
                       b[x] = i + 1;
               }

               for(int i = 0; i < N; i++) {
                       inp(x);
                       a[i] = b[x];
               }

               mergesort(0, N - 1);
               printf("%lld\n", cnt);
               cnt = 0;
               
    }
    return 0;
}

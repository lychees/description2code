#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define REP(i, n) for (int i = 0; i < (int)(n); ++i)
typedef long long LL;
typedef pair<int, int> PII;

int n;
int rems[15];
vector<LL> all, cur, nx;
bool prime[100];

int solve(LL r) {
    return lower_bound(all.begin(), all.end(), r + 1) - all.begin();
}

int main() {
    REP(i, 100) prime[i] = true;
    prime[0] = prime[1] = false;
    REP(i, 100) if (prime[i]) {
        for (int j = i * i; j < 100; j += i) {
            prime[j] = false;
        }
    }
    bool ok = true;
    REP(i, 15) {
        LL x;
        cin >> x;
        if (x > i) {
            ok = false;
        }
        rems[i] = min(x, (LL)i);
    }
    for (int i = 1; i <= 9; ++i) {
        cur.pb(i);
        all.pb(i);
    }
    for (int i = 1; i < 15; ++i) {
        for (LL x : cur) {
            for (int dig = 0; dig <= 9; ++dig) {
                LL y = 10 * x + dig;
                if (y % (i + 1) == rems[i]) {
                    nx.pb(y);
                }
            }
        }
        cur = nx;
        nx.clear();
        for (LL x : cur) {
            all.pb(x);
        }
    }
    cur = all;
    all.clear();
    for (LL x : cur) {
        int pre = -1;
        bool good = false;
        for (LL y = x; y > 0; y /= 10) {
            int dig = y % 10;
            if (pre != -1) {
                if (prime[dig * 10 + pre]) {
                    good = true;
                    break;
                }
            }
            pre = dig;
        }
        if (good) {
            all.pb(x);
        }
    }
    //REP(i, (int)all.size() - 1) assert(all[i] < all[i + 1]);
    //cerr << (int)all.size() << ' ' << (int)cur.size() << endl;
    scanf("%d", &n);
    REP(i, n) {
        LL a, b;
        scanf("%lld%lld", &a, &b);
        if (ok) {
            printf("%d\n", solve(b) - solve(a - 1));
        } else {
            printf("0\n");
        }
    }
    return 0;
}


import math


def findReflection(tree, ansL, ansR, start, end):
    l = end - start
    lRef = ''
    rRef = ''
    for v in range(0, l+1):
        if tree[start+v] != '0':
            lRef = v+start
            break
    for v in range(0, l+1):
        if tree[end-v] != '0':
            rRef = end-v
            break
    # print "Left End is : "+str(lRef)+", Right End is : "+str(rRef)
    if rRef != '':
        ansR.append(tree[rRef])
    if lRef != '' and lRef != rRef:
        ansL.append(tree[lRef])


x = int(raw_input())
ans = []
for case in range(0, x):
    size = int(raw_input())
    tree = raw_input().split(' ')
    level = int(math.log(size+1)/math.log(2))
    # print "Levels are : "+str(level);
    answerL = []
    answerR = []
    for step in range(0, level):
        start = int(math.pow(2, step))
        end = start + int(math.pow(2, step) - 1)
        findReflection(tree, answerL, answerR, start-1, end-1)
    for ele in answerR+answerL:
        print ele
    print ''

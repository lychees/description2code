#include<bits/stdc++.h>
using namespace std;
#define prev adf
int n,a[1<<20];
int dp[505][505];
int pr[1<<21];
int nxt[1<<21];
int prev[1<<21];
int cost(int a,int b)
{
    int sub=a+b;
    if(a<=b && prev[b-1]>=a){
    return nxt[b]+prev[b-1]-a-b;
    }
    a=max(a,b);
    a=nxt[a];
    b=nxt[a+1];
    return a+b-sub;
}
int solve(int l,int r)
{
    if(l>r) return 0;
    if(dp[l][r]!=-1) return dp[l][r];
    if(r-l+1==2)
    return cost(a[l],a[r]);
    int ans=int(2e9);
    for(int i=l+1;i<=r;i++){
        if((i-l)%2)
        ans=min(ans,solve(l+1,i-1)+solve(i+1,r)+cost(a[l],a[i]));
    }
    return dp[l][r]=ans;
}
int main()
{
    pr[1]=1;
    for(int i=2;i<=2000000;i++){
     if(pr[i]) continue;
     for(int j=i*2;j<=2000000;j+=i)
     pr[j]=1;
    }
    cin>>n;
    for(int i=2000000;i>=0;i--){
        if(pr[i]==0)
        nxt[i]=i;
        else
        nxt[i]=nxt[i+1];
    }
    for(int i=1;i<=2000000;i++){
    if(pr[i]==0)
    prev[i]=i;
    else prev[i]=prev[i-1];
    }
    for(int i=1;i<=n;i++)
        cin>>a[i];
    memset(dp,-1,sizeof(dp));
    printf("%d\n",solve(1,n)+n/2);
    return 0;
}

def root(dsj_set, n):
    k = n
    while n != dsj_set[n]:
        n = dsj_set[n]
    while k != n:
        x = dsj_set[k]
        k = dsj_set[x]
        dsj_set[x] = n
    return n


def root2(dsj_set, n):
    while n != dsj_set[n]:
        n = dsj_set[n]
    return n


def union(dsj_set, size, aroot, broot):
    if size[aroot] < size[broot]:
        dsj_set[aroot] = broot
        size[broot] += size[aroot]
    else:
        dsj_set[broot] = aroot
        size[aroot] += size[broot]


n = input()
ary = [int(i) for i in raw_input().strip().split()]
dsj_set = range(n+1)
size = [1]*(n+1)
q = input()
for i in xrange(q):
    a, b = map(int, raw_input().strip().split())
    aroot = root(dsj_set, a)
    broot = root(dsj_set, b)
    union(dsj_set, size, aroot, broot)

for z in xrange(len(dsj_set)):
    rt = root2(dsj_set, dsj_set[z])
    if rt != dsj_set[z]:
        dsj_set[z] = rt

x = set(dsj_set)
x.discard(0)
x = list(x)
counter = []
# print x
# print dsj_set
# print "i am here."

for c in x:
    mn = 10000
    count = 0
    for j in xrange(1, len(dsj_set)):
        if dsj_set[j] == c and ary[j-1] < mn:
            mn = ary[j-1]
    for l in xrange(1, len(dsj_set)):
        if dsj_set[l] == c and ary[l-1] == mn:
            count += 1
    counter.append(count)
# print counter
print reduce(lambda x, y: x*y, counter) % (10**9+7)
# print "done"

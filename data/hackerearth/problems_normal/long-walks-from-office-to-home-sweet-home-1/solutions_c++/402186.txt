#include<cstdio>
#include<vector>
#include<queue>
#include<algorithm>
#include<set>
#include<stack>
#include<cmath>
#include <map>
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<string>
#include<cassert>
using namespace std;
 
#define DEBUG //on-off switch for prlling statements
 
// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)
 
// Useful constants
#define EPS                         1e-10
 
// Useful hardware instructions
#define bitcount1                    __builtin_popcount1
#define gcd                         __gcd
 
// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(ll i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                    memset(a, v, sizeof a)
#define sz(a)                       ((ll)(a.size()))
 
// Some common useful functions
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
 
#define ll long long int
#define llu long long unsigned
#define ld long
#define INF 100000000000000000
 
#define mod 1000000007

ll dp[51][51];
ll pdp[51][51];
int a[51][51];
int n,u,v;
void recurse(ll val)
{
	if(val == 1)
	{
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				dp[i][j]=0;
				for(int k=0;k<n;k++)
				{
					if(a[j][k] == 1)
					{
						dp[i][j] = (dp[i][j]+pdp[i][k])%mod;
					}
				}
			}	
		}
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			pdp[i][j]=dp[i][j];
		}
		return;
	}
//	cout<<val<<endl;
	recurse(val/2);
//	cout<<val<<endl;
//	cout<<pdp[1][0]<<endl;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			dp[i][j]=0;
			for(int k=0;k<n;k++)
			{
				dp[i][j] =(dp[i][j]+ pdp[i][k]*pdp[k][j])%mod;
			}
		}
	}
//	cout<<dp[2][1]<<endl;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		pdp[i][j]=dp[i][j];
	}
	if(!(val&1))
	return;
//	cout<<dp[2][2]<<endl;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			dp[i][j]=0;
			for(int k=0;k<n;k++)
			{
				if(a[j][k] == 1)
				{
					dp[i][j] = (dp[i][j]+pdp[i][k])%mod;
				}
			}
		}
	}
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		pdp[i][j]=dp[i][j];
	}
}
void solve()
{
	fill(dp,0);
	fill(pdp,0);
	fill(a,0);
	ll k;
	s(n);
	sl(k);
	s(u);
	s(v);
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		s(a[i][j]);
	}
	for(int i=0;i<n;i++)
	{
		dp[i][i]=1;
		pdp[i][i]=1;
	}
	recurse(k);
	printf("%lld\n",dp[u][v]);
}
int main()
{
	int t;
	s(t);
	for(int i=0;i<t;i++)
	solve();
}
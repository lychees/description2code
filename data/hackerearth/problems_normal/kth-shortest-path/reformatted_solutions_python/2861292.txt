'''
2
2 2
1 2
3 4
2
1 1 1
1 1 2
2 2
1 2
## 4
3
1 1 1
1 1 2
1 0 1
'''
from collections import deque

for _ in xrange(input()):
    R, C = map(int, raw_input().split())
    li = []

    for _ in xrange(R):
        li.append(raw_input().split())

    res = []
    for i in xrange(R):
        t = []
        for j in xrange(C):
            t.append([])
        res.append(t)

    res[0][0].append(li[0][0])
    start = int(li[0][0])
    for c in xrange(1, C):
        if start is not None and li[0][c] != "##":
            start += int(li[0][c])
            res[0][c].append(start)
        else:
            start = None

    start = int(li[0][0])
    for r in xrange(1, R):
        if start is not None and li[r][0] != "##":
            start += int(li[r][0])
            res[r][0].append(start)
        else:
            start = None

    for r in xrange(1, R):
        for c in xrange(1, C):
            top = res[r - 1][c]
            left = res[r][c - 1]
            p1 = 0
            p2 = 0

            if li[r][c] == "##":
                continue

            data = int(li[r][c])

            while p1 < len(top) and p2 < len(left) and p1 + p2 < 101:
                if top[p1] < left[p2]:
                    res[r][c].append(top[p1] + data)
                    p1 += 1
                else:
                    res[r][c].append(left[p2] + data)
                    p2 += 1

            while p1 < len(top) and p1 + p2 < 101:
                res[r][c].append(top[p1] + data)
                p1 += 1

            while p2 < len(left) and p1 + p2 < 101:
                res[r][c].append(left[p2] + data)
                p2 += 1

    Q = input()

    for _ in xrange(Q):
        s, t, k = map(int, raw_input().split())
        if li[s][t] == "##":
            print "Obstacle"
        elif k > len(res[s][t]):
            print "Not so many paths"
        else:
            print res[s][t][k - 1]

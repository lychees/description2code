#include <bits/stdc++.h>
using namespace std;
typedef pair<int,int> pi;
typedef pair<pi,int> pii;
typedef long long ll;
int grid[1005][1005],dist[1005][1005];
struct comp
{
    bool operator()(pii a,pii b)
    {
      return (a.second>b.second);
    }
};
priority_queue<pii,vector<pii>,comp>q;
int main()
{
    int t,n,a,b,w,m,i,j,x,y,tme;
    pi var;pii ele;
    cin>>t;
    while(t--)
    {
       cin>>m>>n;
       for(i=0;i<=m;i++)
        grid[i][0]=-1;
       for(i=0;i<=n;i++)
        grid[0][i]=-1;
       for(i=0;i<=m;i++)
        grid[i][n+1]=-1;
       for(i=0;i<=n;i++)
        grid[m+1][i]=-1;
       for(i=1;i<=m;i++)
           for(j=1;j<=n;j++)
               cin>>grid[i][j];
       cin>>x>>y>>tme;
       for(i=0;i<1005;i++)
        fill(dist[i],dist[i]+1005,-1);
       var=make_pair(1,1);
       q.push(make_pair(var,grid[1][1]));
       while(!q.empty())
       {
           ele=q.top();
           a=ele.first.first;
           b=ele.first.second;
           w=ele.second;
           //cout<<"top: "<<a<<" "<<b<<" "<<w<<endl;
           q.pop();
           if(dist[a][b]!=-1)
            continue;
           dist[a][b]=w;
           if(a==x && b==y)
            break;
           if(grid[a-1][b]!=-1 && dist[a-1][b]==-1)
           {
             var=make_pair(a-1,b);
             q.push(make_pair(var,grid[a-1][b]+w));
             //cout<<a-1<<" "<<b<<" "<<grid[a-1][b]+w<<endl;
           }
           if(grid[a][b+1]!=-1 && dist[a][b+1]==-1)
           {
             var=make_pair(a,b+1);
             q.push(make_pair(var,grid[a][b+1]+w));
             //cout<<a<<" "<<b+1<<" "<<grid[a][b+1]+w<<endl;
           }
           if(grid[a+1][b]!=-1 && dist[a+1][b]==-1)
           {
             var=make_pair(a+1,b);
             q.push(make_pair(var,grid[a+1][b]+w));
             //cout<<a+1<<" "<<b<<" "<<grid[a+1][b]+w<<endl;
           }
           if(grid[a][b-1]!=-1 && dist[a][b-1]==-1)
           {
             var=make_pair(a,b-1);
             q.push(make_pair(var,grid[a][b-1]+w));
             //cout<<a<<" "<<b-1<<" "<<grid[a][b-1]+w<<endl;
           }
       }
       if(dist[x][y]<tme)
       {
         cout<<"YES"<<endl;
         cout<<tme-dist[x][y]<<endl;
       }
       else
        cout<<"NO"<<endl;
       while(!q.empty())
        q.pop();
    }
    return 0;
}
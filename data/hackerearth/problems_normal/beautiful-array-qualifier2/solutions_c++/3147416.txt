#include <bits/stdc++.h>
using namespace std;
const int MAXN = 500000;
bool bad1[MAXN],bad2[MAXN];
int mind[MAXN];
set <int> bset;
int main()
{
	// freopen("input.txt", "r", stdin);
	// ios_base::sync_with_stdio(0);
	int n,k,m;
	scanf("%d %d %d", &n, &k, &m);
	for (int i = 0; i < m; ++i)
	{
		int x;
		scanf("%d", &x);
		if(x < MAXN)
			bad1[x] = true;
	}
	if(bad1[1])
	{
		bad2[1] = true;
		mind[1] = 0;
		bset.insert(1);
	}
	int ctr = 0;
	for (int i = 1; ; ++i)
	{
		assert(i < MAXN);
		if(bad1[i] || bad2[i])
			continue;
		printf("%d ", i);
		ctr++;
		if(ctr == n)
			break;
		if(i == 1)
		{
			bad2[1] = true;
			mind[1] = 0;
			bset.insert(1);
			continue;
		}
		vector <int> to_ins,to_rem;
		for (set<int>::iterator it = bset.begin(); it != bset.end(); ++it)
		{
			long long int val = *it;
			if(val*i >= MAXN || mind[val] == k)
				to_rem.push_back(val);
			else
			{
				int cd = mind[val];
				while(val*i < MAXN && cd+1 <= k)
				{
					val*=i;
					cd++;
					// cout<<val<<" "<<cd<<"\n";
					if(bad2[val] && mind[val] <= cd)
						break;
					bad2[val] = true;
					mind[val] = cd;
					to_ins.push_back(val);
				}
			}
		}
		for (int i = 0; i < to_rem.size(); ++i)
		{
			bset.erase(to_rem[i]);
		}
		for (int i = 0; i < to_ins.size(); ++i)
		{
			bset.insert(to_ins[i]);
		}
	}
	return 0;
}
//rhezo and destructive mind.cpp
#include <bits/stdc++.h>
using namespace std;

#define sf_d(var) scanf("%d",&var)
#define sf_2d(var1,var2) scanf("%d %d",&var1,&var2)
#define pf printf
#define vi vector<int>
#define vvi vector< vector<int> >
#define pb push_back
#define fr_z(start,end) for(int z=start;z<end;z++)
#define fr_o(start,end) for(int o=start;o<end;o++)
#define fa_io std::ios::sync_with_stdio(false)

int tim=0;

void tell_me_APs(int node,vvi& v,vector<bool>& APs, vector<bool>& vb,vi& low,vi& disc,vi& parent)
{
    vb[node]=false;
    int child=0;
    low[node]=tim;
    disc[node]=tim;
    tim++;
    fr_z(0,v[node].size())
    {
        int current=v[node][z];
        if(vb[current])
        {
            parent[current]=node;
            child++;
            tell_me_APs(current,v,APs,vb,low,disc,parent);
            
            low[node]=min(low[node],low[current]);
            if(parent[node]==-1 && child>1)
                APs[node]=true;
            if(parent[node]!=-1 && low[current]>=disc[node])
                APs[node]=true;
        }
        else if(parent[node]!=current)
            low[node]=min(low[current],low[node]);
    }
}

int main()
{
    fa_io;
    int n,m,q,a,b;
    sf_2d(n,m);
    vvi v(n+1);
    vector<bool> APs(n+1,false);
    vector<bool> vb(n+1,true);
    vi low(n+1,0),disc(n+1,0),parent(n+1,-1);
    fr_z(0,m)
    {
        sf_2d(a,b);
        v[a].pb(b);
        v[b].pb(a);
    }
    sf_d(q);
    fr_z(1,n+1)
    	if(vb[z])
    		tell_me_APs(z,v,APs,vb,low,disc,parent);
    while(q--)
    {
        sf_d(a);
        if(APs[a])
            pf("Satisfied %d\n",(int)v[a].size());
        else
            pf("Not Satisfied\n");
    }
    
    return 0;
}

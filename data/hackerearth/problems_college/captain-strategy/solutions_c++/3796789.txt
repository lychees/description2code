#include<iostream>
#include <list>

using namespace std;
long long int answer,arrs[50000];

class Graph
{
	int V;
	list<int> *adj;
	void DFSUtil(int v, bool visited[]); // A function used by DFS
public:
	Graph(int V); // Constructor
	void addEdge(int v, int w); // function to add an edge to graph
	void DFS(int v); // DFS traversal of the vertices reachable from v
	~Graph() {
			delete[] adj;
		}

};

Graph::Graph(int V)
{
	this->V = V;
	adj = new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
	adj[v].push_back(w); // Add w to vâ€™s list.
}

void Graph::DFSUtil(int v, bool visited[])
{
	// Mark the current node as visited and print it
	visited[v] = true;
	//cout << v << " ";
	answer+=arrs[v];

	// Recur for all the vertices adjacent to this vertex
	list<int>::iterator i;
	for (i = adj[v].begin(); i != adj[v].end(); ++i)
		if (!visited[*i])
			DFSUtil(*i, visited);
}

// DFS traversal of the vertices reachable from v. It uses recursive DFSUtil()
void Graph::DFS(int v)
{
	// Mark all the vertices as not visited
	bool *visited = new bool[V];
	for (int i = 0; i < V; i++)
		visited[i] = false;

	// Call the recursive helper function to print DFS traversal
	DFSUtil(v, visited);
	delete[] visited;
}

int main()
{
    answer=0;
    int n,m,i,x,y,pos,vals;
    char type;
    cin>>n>>m;
    Graph g(n);
    for(i=0;i<n;i++)
    {
        cin>>arrs[i];
    }
    for(i=1;i<n;i++)
    {
        cin>>x>>y;
        g.addEdge(x-1,y-1);
    }
	while(m--)
	{
	    cin>>type;
	    if(type=='U')
	    {
	        cin>>pos>>vals;
	        arrs[pos-1]=vals;
	        
	    }
	    else
	    {
	        cin>>pos;
	        answer=0;
	        g.DFS(pos-1);
	        cout<<answer<<endl;
	        
	    }
	}
	
	return 0;
}

#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<set>
#include<map>
#include<climits>
#include<cstring>
#include<list>
#include<fstream>
#include<queue>
#include<sstream>
#include<stack>
#include<iomanip>

using namespace std;
typedef long long LL;
typedef unsigned long long ULL;

LL mod=1e12+7;

int n;
int arr[100005];
LL dp[1001][1001];

LL dfs(int l, int r)
{
    if(l==r)
    {
        return 0;
    }

    if(abs(l-r)==1)
    {
        return abs(arr[l]-arr[r]);
    }

    if(dp[l][r]!=-1)
        return dp[l][r];

    LL ret1, ret2;

    if(l<r)
    {
        ret1= abs(arr[l]-arr[r])+abs(arr[l+1]-arr[r])+dfs(l+1, r-1);
        ret2= abs(arr[l]-arr[r])+abs(arr[r-1]-arr[r])+dfs(r-1, l+1);
    }
    else
    {
        ret1= abs(arr[l]-arr[r])+abs(arr[l-1]-arr[r])+dfs(l-1, r+1);
        ret2= abs(arr[l]-arr[r])+abs(arr[r+1]-arr[r])+dfs(r+1, l-1);
    }

    return dp[l][r]=max(ret1, ret2);


}

int main()
{

    ios_base::sync_with_stdio(false);
    cin.tie(0);


    cin>>n;

    for(int i=1; i<=n; i++)
        cin>>arr[i];

    vector <int> temp;

    sort(arr+1, arr+n+1);

    for(int i=0; i<=1000; i++)
        for(int j=0; j<=1000; j++)
        dp[i][j]=-1;

    LL ret1=dfs(1, n);
    LL ret2=dfs(n, 1);

    cout<<max(ret1, ret2);


}




#include<bits/stdc++.h>
using namespace std;
int prime[1000001];
void pre()
{
	int i,j;
	prime[0]=prime[1]=1;
	for(i=2;i<1000001;++i)
        for(j=2*i;j<1000001;j+=i) if(prime[j]==0) prime[j]=1;
}
void update(int *tree,int idx,int val,int n)
{
	while(idx<=n)
     {
     	tree[idx]+=val;
     	idx+=idx&(-idx);
     }
}
int get_sum(int *tree,int x)
{
	int sum=0;
	while(x>0)
	{
		sum+=tree[x];
		x-=x&(-x);
	}
	return sum;
}
int *create_bit(int a[],int n)
{
	int *b=new int[n+1];
	for(int i=0;i<=n;++i) b[i]=0;
	for(int i=0;i<n;++i)
	{
	    if(a[i]!=0)
		update(b,i+1,a[i],n);
	}
	return b;
}
void sol()
{
	int aa[32005];
	int i,n,q;
	cin>>n;
	for(i=0;i<n;++i)
    {
        cin>>q;
        aa[i]=!prime[q];
        //cout<<aa[i]<<' ';
    }
    int *bit=create_bit(aa,n);
    cin>>q;
    while(q--)
    {
        char a;
        int x,y;
        cin>>a>>x>>y;
        if(a=='C')
        {
            int t=!prime[y];
            if(aa[x-1]==0&&t==1)
            {
                aa[x-1]=1;
                update(bit,x,1,n);
            }
            else if(aa[x-1]==1&&t==0)
            {
                aa[x-1]=0;
                update(bit,x,-1,n);
            }
        }
        else
        {
            cout<<get_sum(bit,y)-get_sum(bit,x-1)<<endl;
        }
    }
}
int main()
{
	int t;
  //ios_base::sync_with_stdio(1);
  pre();
	cin>>t;
	while(t--) sol();
	return 0;
}

#include<iostream>
using namespace std;

int isSyymetric(int **mat,int dim)
{
        bool horSym=true,verSym=true,br=false;
        for(int i=0;i<dim/2;i++)
        {
                for(int j=0;j<dim;j++)
                {
                        if(mat[i][j]!=mat[dim-1-i][j])
                        {
                                horSym=false;
                                br=true;
                                break;
                        }
                }
                if(br)
                break;
        }
        br=false;
       for(int i=0;i<dim;i++)
       {
       		for(int j=0;j<dim/2;j++)
       		{
       			   if(mat[i][j]!=mat[i][dim-1-j])
       			   {
                                verSym=false;
                                br=true;
                  			break;
       			   }
       		}
       		if(br)
       		break;
       }
        if(horSym && verSym)
                return 3;
        if(horSym && !verSym)
                return 2;
        if(!horSym && verSym)
                return 1;
        else
                return 0;
}

int main()
{
        int nTestCases,matDim,count=0,j=0,k=0,result;
        string input;
        cin>>nTestCases;
        int **mat=0;
        for(count=0;count<nTestCases;count++)
        {
                cin>>matDim;
                mat=new int*[matDim];
                for(j=0;j<matDim;j++)
                {
                        mat[j]=new int[matDim];
                        cin>>input;
                        for(k=0;k<matDim;k++)
                                mat[j][k]=input[k];
                }
                result=isSyymetric(mat,matDim);
                switch(result)
                {
                        case 0:
                                cout<<"NO"<<endl;
                                break;
                        case 1:
                                cout<<"VERTICAL"<<endl;
                                break;
                        case 2:
                                cout<<"HORIZONTAL"<<endl;
                                break;
                        case 3:
                                cout<<"BOTH"<<endl;
                                break;
                   	    default:
                                cout<<"NO"<<endl;
                }
        }
}
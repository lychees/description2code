#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;


#define ll long long
#define ff first
#define ss second
#define mpa make_pair
#define MOD 1000000007
#define pb push_back
#define lld I64d
#define MXN 1000000

int bitcnt(int mask){return __builtin_popcount(mask);}
int SET(int N,int pos){	return N=N | (1<<pos);}
int RESET(int N,int pos){	return N= N & ~(1<<pos);}
int check(int N,int pos){	return (N & (1<<pos));}
int toggle(int N,int pos){if(check(N,pos))return N=RESET(N,pos);return N=SET(N,pos);}
void PRINTBIT(int N){	printf("("); for(int i=6;i>=1;i--)	{bool x=check(N,i);cout<<x;}	puts(")");}
int mod(int a, int b) { return a - a/b * b;}


vector<vector<int> > gra;
int N;
bool vis[MXN];
ll dp[MXN];

void inp()
{
	scanf("%d", &N);
	
	gra.resize(N + 1);
	
	int x;
	int y;
	scanf("%d%d", &x, &y);
	
	while(x != 0) {
		gra[x].pb(y);
		scanf("%d%d", &x, &y);
	}
}

ll rec(int cur) 
{
	if(cur == N) {
		return 1;
	}
	
	if(vis[cur])
		return dp[cur];
	
	vis[cur] = true;
	
	ll ans = 0;
	int size = gra[cur].size();
	for(int i = 0; i < size; ++i) 
			ans += rec(gra[cur][i]);
	
	return dp[cur] = ans;
}

void solve()
{
	memset(vis, false, sizeof vis);
	ll ans = rec(1);
	printf("%lld\n", ans);
}

int main()
{
	inp();
	solve();
}

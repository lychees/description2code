#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct call
{
	long int t,x;
	call(long int a, long int b)
	{
		t=a;
		x=b;
	}
};

bool compr1(call a,call b)
{
	// double m,n;
	// m=a.t/double(a.x);
	// n=b.t/double(b.x);
	
	long int m,n;
	m=a.x-a.t;
	n=b.x-b.t;
	return (m>n);
	
}
bool compr2(call a,call b)
{
	return (a.t<b.t);
	
}
bool compr3(call a,call b)
{
	// double m,n;
	// m=a.t/double(a.x);
	// n=b.t/double(b.x);
	
	
	return (a.x>b.x);
	
}

int main()
{
    //cout << "Hello World!" << endl;
	long int n,t,x;
    cin>>n;
    vector<call> calls;
    for(long int i=0;i<n;i++)
    {
    	cin>>t>>x;
    	calls.push_back(call(t,x));
    	
    }
    long int min=0,sum=0;
    sort(calls.begin(),calls.end(),compr1);
    vector<call> :: iterator it1;
    for(it1=calls.begin();;it1++)
    {
    	if(it1==calls.end())
    	break;
    	if(it1->x<it1->t)
    	break;
    }
    sort(calls.begin(),it1,compr2);
    sort(it1,calls.end(),compr3);
    for(long int i=0;i<n;i++)
    {
    	sum-=calls[i].t;
    	if(sum<min)
    	min=sum;
    	sum+=calls[i].x;
    	
    }
   	cout<<(-min);
    return 0;
}

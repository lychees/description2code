#include<bits/stdc++.h>
#define limit 1000000000000
using namespace std;
long long dp[20][5];
long long f(string s,long long start,long long c);
int main()
{
    long n;
    std::ios::sync_with_stdio(false);
    cin>>n;
    while(n--)
    {
        string s;
        cin>>s;
        for(int i=0;i<20;i++)
        {
            for(int j=0;j<5;j++)
            {
                dp[i][j]=-2;
            }
        }
        long long ans=-1;
        if(s.size()>=4)
        {
            ans=f(s,0,4);
        }
        if(ans==-1)
            cout<<"unlucky\n";
        else
            cout<<ans<<"\n";
    }
    return 0;
}
long long f(string s,long long start,long long c)
{
    long long tmp=0;
  //  cout<<"f("<<start<<" "<<","<<c<<")\n";
    if(c==1)
    {
        if(s[start]=='0'&&((start+1)!=s.size()))
        {
            return -1;
        }
        else
        {
            for(long long i=start;i<s.size();i++)
            {
                tmp=tmp*10+(s[i]-'0');
            }
            if(tmp>limit)
            {
                return -1;
            }
            return tmp;
        }
    }
    long long len=s.size(),digits=0,ans=-1;
    if(dp[start][c]!=-2){
      // cout<<"dp:"<<dp[start][c]<<"\n";
       return dp[start][c];
    }
    if(s[start]=='0')
    {
       // cout<<"2.) f("<<start<<" "<<","<<c<<")\n";
        long long tmp2;
        tmp2=f(s,start+1,c-1);
         // if(start==0)
        //{
           // cout<<"tmp2:"<<tmp2<<"\n";
        //}
        if(tmp2!=-1)
        {
            ans=max(ans,tmp+tmp2);
        }
    }
    else
    for(long long i=start;i<=(len-c)&&digits<=13;i++)
    {
        //cout<<"3.) f("<<start<<" "<<","<<c<<")\n";
        digits++;
        tmp=tmp*10+s[i]-'0';
       // if(start==0)
        //{
            //cout<<"tmp:"<<tmp<<"\n";
        //}
        if(tmp<=limit)
        {
            long long tmp2;
            tmp2=f(s,i+1,c-1);
            if(tmp2!=-1)
            {
                ans=max(ans,tmp+tmp2);
            }
        }
    }
    dp[start][c]=ans;
    return ans;
}

#include<iostream>
#include<algorithm>
#include<cstring>
#include<vector>
#include<stack>
#include<cstdio>
using namespace std;
const int MX=(1<<17);
int n , m , T , Tn , compcnt , timer;
vector < int > v[MX];
int comp[MX] , depth[MX] , low[MX] , vi[MX] , deg[MX] , SZ[MX];
stack < int > S;
void dfs(int x){
    low[x]=depth[x]=++timer; S.push(x); vi[x]=1;
    int sz_=v[x].size() , nxt;
    for(int j=0;j<sz_;j++){
        nxt=v[x][j];
        if(depth[nxt]==-1){
            //depth[nxt]=depth[x]+1;
            dfs(nxt);
            low[x]=min(low[x] , low[nxt]);
        }
        else if(vi[nxt]) low[x]=min(low[x] , depth[nxt]);
    }
    if(low[x]==depth[x]){
        ++compcnt;
        while(1){
            nxt=S.top();
            comp[nxt]=compcnt;
            SZ[compcnt]++;
            vi[nxt]=0;
            S.pop();
            if(nxt==x) break;
        }
    }
    //cout<<x<<' '<<depth[x]<<' '<<low[x]<<endl;
}
int main(){
    T=1;
    while(T--){
        scanf("%d %d",&n,&m);
        for(int j=1;j<=n;j++) v[j].clear();
        for(int j=1;j<=m;j++){
            int a,b;
            scanf("%d %d",&a,&b);
            v[a].push_back(b);
        }
        compcnt=timer=0;
        memset(depth , -1 , sizeof(depth));
        memset(vi , 0 , sizeof(vi));
        for(int j=1;j<=n;j++){
            if(depth[j]==-1){
               // depth[j]=1;
                dfs(j);
            }
        }
        for(int j=1;j<=n;j++)
            if(SZ[comp[j]] > 1)
                cout<<"1 ";
        else cout<<"0 ";
    }
    return 0;

}

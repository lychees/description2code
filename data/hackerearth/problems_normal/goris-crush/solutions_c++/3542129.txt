#include <bits/stdc++.h>
 
using namespace std;
#define MAXN 1000005
int q[MAXN][5];
int N,Q,K,x,y,a,b,c,T,d,res=0;
int ft[MAXN],arr[MAXN];
vector<int> vec;
map<int,int> mapa;
 
void update(int idx,int val){
    for (int i=idx;i<MAXN;i+=(i & -i)){
        ft[i]+=val;
    }
}
 
int query(int idx){
    int sum = 0;
    for (int i=idx;i>0;i-=(i & -i)){
        sum += ft[i];
    }
    return sum;
}
 
int main()
{
    memset(ft,0,sizeof(ft));
    scanf("%d %d %d",&N,&Q,&K);
    for (int i=1;i<=N;i++){
        scanf("%d",&x);
        arr[i] = x;
        vec.push_back(x);
    }
    for (int i=0;i<Q;i++){
        scanf("%d",&T);
        if (T == 0)
            scanf("%d %d",&x,&y);
        else
            scanf("%d %d %d %d",&a,&b,&c,&d);
        q[i][0] = T;
        if (T == 0){
            q[i][1] = x; q[i][2] = y;
            vec.push_back(y);
        }
        else{
            q[i][1] = a; q[i][2] = b; q[i][3] = c; q[i][4] = d;
            vec.push_back(a);
            vec.push_back(b);
            vec.push_back(c);
            vec.push_back(d);
        }
    }
    sort(vec.begin(),vec.end());
    int pos = 1;
    mapa[vec[0]] = 1;
    for (int i=1;i<vec.size();i++){
        if (vec[i] != vec[i-1])pos++;
        mapa[vec[i]] = pos;
    }
    for (int i=1;i<=N;i++){
        arr[i] = mapa[arr[i]];
        update(arr[i],1);
    }
    for (int i=0;i<Q;i++){
        if (q[i][0] == 0){
            q[i][2] = mapa[q[i][2]];
        }
        else {
            q[i][1] = mapa[q[i][1]];
            q[i][2] = mapa[q[i][2]];
            q[i][3] = mapa[q[i][3]];
            q[i][4] = mapa[q[i][4]];
        }
    }
    for (int i=0;i<Q;i++){
        T = q[i][0];
        if (T == 0){
            x = q[i][1]; y = q[i][2];
            update(arr[x],-1);
            arr[x] = y;
            update(y,1);
        }
        else {
            a = q[i][1]; b = q[i][2]; c = q[i][3]; d = q[i][4];
            if (a > d || b < c || d < a || c > b){
                res = 0;
            }
            else {
                int l = max(a,c);
                int r = min(b,d);
            //    cout << a << " " << b << " " << c << " " << d << endl;
           //     cout << l << " " << r << endl;
                res = query(r) - query(l-1);
            }
          //  cout << res << endl;
            if (res >= K){
                puts("Propose");
            }
            else {
                puts("Do not propose");
            }
        }
    }
}
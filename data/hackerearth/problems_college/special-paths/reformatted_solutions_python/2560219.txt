def addonOne(currArr, nextArr):
    currArr = [0]+currArr
    currArr.pop()
    for i in xrange(len(nextArr)):
        nextArr[i] += currArr[i]
    return nextArr


def addonZero(currArr, nextArr):
    for i in xrange(len(nextArr)):
        nextArr[i] += currArr[i]
    return nextArr


n, m, k = map(int, raw_input().split())
grid = {}
ansgrid = {}
keys = []
for i in range(n):
    for j in range(m):
        grid[(i, j)] = 0
        ansgrid[(i, j)] = [0 for z in range(k+1)]
        keys.append((i, j))

for i in xrange(k):
    x, y = map(int, raw_input().split())
    grid[(x-1, y-1)] = 1

if (grid[(0, 0)] == 0):
    ansgrid[(0, 0)][0] = 1
else:
    ansgrid[(0, 0)][1] = 1

for i in keys:
    x, y = i
    if (x+1 < n and grid[(x+1, y)] != 1):
        ansgrid[(x+1, y)] = addonZero(ansgrid[i], ansgrid[(x+1, y)])

    if (y+1 < m and grid[(x, y+1)] != 1):
        ansgrid[(x, y+1)] = addonZero(ansgrid[i], ansgrid[(x, y+1)])

    if (x+1 < n and grid[(x+1, y)] == 1):
        ansgrid[(x+1, y)] = addonOne(ansgrid[i], ansgrid[(x+1, y)])

    if (y+1 < m and grid[(x, y+1)] == 1):
        ansgrid[(x, y+1)] = addonOne(ansgrid[i], ansgrid[(x, y+1)])

mod = 1000007
print " ".join(str(i % mod) for i in ansgrid[(n-1, m-1)])

#include<bits/stdc++.h>
 
using namespace std;
 
#define ll long long 
#define vi vector<int>
#define MOD 1000000007   //10^9 + 7
#define cc1(a)cout<<#a<<": "<<a<<endl;
#define cc2(a,b)cout<<#a<<": "<<a<<" , "<<#b<<": "<<b<< endl;
#define cc3(a,b,c)cout<<#a<<": "<<a<<" , "<<#b<<": "<<b<<" , "<<#c<<": "<<c<<endl;
#define cc4(a,b,c,d)cout<<#a<<": "<<a<<" , "<<#b<<": "<<b<<" , "<<#c<<": "<<c<<" , "<<#d<<": "<<d<<endl;
 
vi primes;
bitset<10000010> bs;
ll sieve_size;
 
void createSieve(ll upperBound)
{
	bs.set();
	sieve_size = upperBound + 1;
	bs[0] = bs[1] = 0;
	for(ll i = 2; i <= sqrt(sieve_size); i++)
	{
		if(bs[i])
		{
			for(ll j = i * i; j <= sieve_size; j += i)
			{
				bs[j] = 0;
			}	
			primes.push_back((int)i);
		}	
	}	
} 
bool isPrime(ll n)
{
	if(n < sieve_size)  
	{
		return bs[n];
	}
	for(ll i = 0; i < (int)primes.size(); i++)
	{
		if(n % primes[i] == 0)
		{
			return false;
		}
	}
	return true;
}
vi primeFactors(ll n)
{
	vi factors;
	ll PF_idx = 0, PF = primes[PF_idx];
	
	while(PF * PF <= n)
	{
		while(n % PF == 0)
		{
			n /= PF;
			factors.push_back(PF);
		}
		PF = primes[++PF_idx];
	}
	if(n != 1)
	{
		factors.push_back(n);
	}
	return factors;
}
int main()
{
	createSieve(10000000);

		int n;
		cin >> n;
		int a[n + 2];
		for(int i = 1; i <= n; i++)
		{
			cin >> a[i];
		}
		long long int dp[n + 2];
		for(int k = 1; k <= n; k++)
		{
			vector<int> factor = primeFactors(k);
			long long ma = 0;
			// cout << "\n";
			for(int j = 0; j < factor.size(); j++)
			{
				ma = max(ma, dp[(k) / factor[j]]);
				// cc4(k, factor[j], dp[k], ma);
				if(k / factor[j] == 0)
				 	break;
			}
			dp[k] = ma + a[k];
			// cc2(dp[k], ma);
		}
		for(int i = 1; i <= n; i++)
		{
			cout << dp[i] << " ";
		}
	
}  
#include<bits/stdc++.h>
using namespace std;
#define ll	long long int
#define MOD	1000000007
int main()
{
	ios_base::sync_with_stdio(false);
	int t;
	cin>>t;
	assert(t >= 1 && t <= 3000);
	while(t--)
	{
		int n;
		cin>>n;
		assert(n >= 2 && n <= 10000);
		string str[n];
		int cnt_holes[n], cnt_covered[30], total_holes = 0;
		memset(cnt_holes, 0, sizeof(cnt_holes));
		memset(cnt_covered, 0, sizeof(cnt_covered));
		ll xor_value = 0;
		for(int i=0; i<n; ++i)
		{
			cin>>str[i];
			assert(str[i].length() == 30);
			ll val = 0;
			for(int j=0; j<30; ++j)
			{
				assert(str[i][j] == 'H' || str[i][j] == 'C');
				if(str[i][j] == 'H')
				{
					cnt_holes[i]++;
					val = val + (1LL << (29 - j));
				}
				else
					cnt_covered[j]++;
			}
			total_holes += cnt_holes[i];
			xor_value ^= val;
		}
		bitset<30> bs(xor_value);
		int power = bs.count();
		int maxx_holes = 0;
		for(int i=0; i<n; ++i)
		{
			int cnt = total_holes - cnt_holes[i];
			for(int j=0; j<30; ++j)
				if((xor_value & (1 << (29 - j))) && (cnt_covered[j] >= 2 || (cnt_covered[j] == 1 && str[i][j] == 'H')))
					cnt++;
			maxx_holes = max(maxx_holes, cnt);
		}
		cout<<power<<" "<<maxx_holes<<endl;
	}
	return 0;
}

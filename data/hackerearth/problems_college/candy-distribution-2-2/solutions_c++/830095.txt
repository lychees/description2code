#include <iostream>
#include<cmath>
#include<vector>
#include<algorithm>
#define MOD 1000000007
#define ll long long int
using namespace std;
 
typedef double coord_t;         // coordinate type
typedef double coord2_t;  // must be big enough to hold 2*max(|coordinate|)^2
 
struct Point {
	double x, y;
 
	bool operator <(const Point &p) const {
		return x < p.x || (x == p.x && y < p.y);
	}
};
 
// 2D cross product of OA and OB vectors, i.e. z-component of their 3D cross product.
// Returns a positive value, if OAB makes a counter-clockwise turn,
// negative for clockwise turn, and zero if the points are collinear.
coord2_t cross(const Point &O, const Point &A, const Point &B)
{
	return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}
 
// Returns a list of points on the convex hull in counter-clockwise order.
// Note: the last point in the returned list is the same as the first one.
vector<Point> convex_hull(vector<Point> P)
{
	int n = P.size(), k = 0;
	vector<Point> H(2*n);
 
	// Sort points lexicographically
	sort(P.begin(), P.end());
 
	// Build lower hull
	for (int i = 0; i < n; ++i) {
		while (k >= 2 && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
		H[k++] = P[i];
	}
 
	// Build upper hull
	for (int i = n-2, t = k+1; i >= 0; i--) {
		while (k >= t && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
		H[k++] = P[i];
	}
 
	H.resize(k);
	return H;
}



int main() {
	// your code goes here
	int t;
	scanf("%d\n",&t);
	while(t--){
		int n;
		scanf("%d\n",&n);
		vector<Point> p;
		Point temp;
		for(int i=0;i<n;i++){
			scanf("%lf %lf\n",&temp.x,&temp.y);
			p.push_back(temp);
		}
		vector<Point> ch=convex_hull(p);
		double dist=0, max_dist=0;
		double x;
		for(int i=1;i<ch.size();i++){
			x=pow(pow(ch[i-1].x-ch[i].x,2)+pow(ch[i-1].y-ch[i].y,2),0.5);
			if (x>max_dist)
				max_dist=x;
			dist+=x;
		}
		printf("%.2lf\n",dist-max_dist);
	}
	return 0;
}
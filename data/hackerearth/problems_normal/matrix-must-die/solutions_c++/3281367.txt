#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
const int MOD=1000000007;
vector<vi> matMult ( const vector<vi> &A,const vector<vi> &B ) {

    const int n=A.size();
    vector<vi> Bt ( n,vi ( n ) );
    rep ( i,n ) rep ( j,n ) Bt[j][i]=B[i][j];
    vector<vi> C=vector<vi> ( n,vi ( n ) );
    rep ( i,n ) rep ( j,n ) {
        ll r=0;
        rep ( k,n ) {
            r=  r+ ( ll ) A[i][k]*Bt[j][k] ;
            if ( r>MOD ) r%=MOD;
        }
        C[i][j]=r%MOD;
    }
    return C;
}
vi mVMult ( const vector<vi> &A,const vi &w ) {
    vector<ll> v ( all ( w ) );
    const int n=A.size();
    vi res ( n );
    rep ( i,n ) {
        ll r=0;
        rep ( j,n ) {
            r=r+  A[i][j]*v[j];
            if ( r>MOD ) r%=MOD;

        }
        res[i]=r%MOD;
    }
    return res;

}
vi matPowMult ( const vector<vi> &A,const vi&w, ll n ) {
    vector<vi> M ( A );
    vi res ( w );
    while ( n ) {
        if ( n&1 ) {
            res=mVMult ( M,res );
        }
        M=matMult ( M,M );
        n>>=1;
    }
    return res;

}
vector<vector<vi>> computeFixed ( const vector<vi> &A,int mx=62 ) {
    vector<vector<vi>> res ( mx );
    vector<vi> M ( A );

    rep ( i,mx ) {
        res[i]=M;
        M=matMult ( M,M );
    }
    return res;

}
vi matPowMultFixed ( const vector<vector<vi>> &A,const vi&w, ll n ) {
    vi res ( w );
    int p=0;
    while ( n ) {
        if ( n&1 ) {
            res=mVMult ( A[p],res );
        }
        p++;
        n>>=1;
    }
    return res;

}
int main() {
    ios_base::sync_with_stdio ( false );
    vector<vi> mat ( 9,vi ( 9 ) );
    rep ( a,9 ) rep ( b,9 ) {
        int i=a/3;
        int j=a%3,x=b/3,y=b%3;
        mat[a][b]=abs ( i-x ) +abs ( j-y ) +abs ( i+j-x-y );
    }
    vector<vector<vi>> mats=computeFixed(mat);
    vector<vi> res;
    vi vals ( 9 );
    inrep {
        ll n;
        cin>>n;
        cin>>vals;
        vi re=matPowMultFixed ( mats,vals,n );
        res.push_back ( re );
    }
    for ( const vi&v: res ) {
        rep ( i,3 ) {
            cout<<v[3*i]<<" "<<v[3*i+1]<<" "<<v[3*i+2]<<'\n';

        }

    }
}

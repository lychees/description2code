#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define gc getchar_unlocked
void si(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
void slli(ll &x)
{
    register ll c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
vector< pair<int,int> > adj[100005];
vector<int> tree;
bool visited[100005];
int n,m,sub[100005];
ll k,sum[100005];
void dfs(int i)
{
    visited[i]=true;
    tree.push_back(i);
    int j;
    sum[i]=0,sub[i]=1;
    for(j=0;j<adj[i].size();j++)
        if(!visited[adj[i][j].first]&&adj[i][j].second<=m)
        {
            dfs(adj[i][j].first);
            sum[i]+=sum[adj[i][j].first];
            sub[i]+=sub[adj[i][j].first];
        }
    sum[i]+=sub[i]-1;
}
void findsum(int i,int par)
{
    int j;
    if(par)
        sum[i]=sum[par]+tree.size()-2*sub[i];
    for(j=0;j<adj[i].size();j++)
        if(adj[i][j].first!=par&&adj[i][j].second<=m)
            findsum(adj[i][j].first,i);
}
int main()
{
    si(n);
    slli(k);
    int i,j,u,v,c,l;
    ll mini,cost;
    for(i=0;i<n-1;i++)
    {
        si(u);
        si(v);
        si(c);
        adj[u].push_back(make_pair(v,c));
        adj[v].push_back(make_pair(u,c));
    }
    l=0,u=1000000000;
    while(l<=u)
    {
        m=(l+u)/2;
        memset(visited,false,sizeof visited);
        cost=0;
        for(i=1;i<=n;i++)
            if(!visited[i])
            {
                tree.clear();
                dfs(i);
                findsum(i,0);
                for(j=0,mini=LONG_LONG_MAX;j<tree.size();j++)
                    mini=min(mini,sum[tree[j]]);
                cost+=mini;
            }
        if(cost<=k)
            l=m+1;
        else
            u=m-1;
    }
    printf("%d",u);
    return 0;
}

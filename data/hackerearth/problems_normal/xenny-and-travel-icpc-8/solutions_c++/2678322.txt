#include <bits/stdc++.h>
#define ll long long int
#define lu unsigned long long
#define s(a) scanf("%lld",&a)
#define sw(a) scanf("%d",&a)
#define f first
#define sc second
#define pb push_back
#define mp make_pair
#define inf 10e16
#define rock 10e9

using namespace std;

ll road[1301][1301];
ll rail[1301][1301];
ll visit[1301]={0};
ll railx[1301];
ll raily[1301];
ll roadx[1301];
ll roady[1301];

int main()
{
    ll n,i,j,k,l,w,ww,x,y,z;
    s(n);
    for(i=1;i<=n;i++) {
        for(j=1;j<=n;j++) {
            s(road[i][j]);
        }
        railx[i]=inf;
        raily[i]=inf;
        roadx[i]=inf;
        roady[i]=inf;
    }
    for(i=1;i<=n;i++) {
        for(j=1;j<=n;j++) {
            s(rail[i][j]);
        }
    }
    s(x);s(y);
    priority_queue<pair<ll,ll>,vector<pair<ll,ll> >,greater<pair<ll,ll> > >q;
    q.push(mp(0,x));
    while(!q.empty()) {
        w=q.top().f;
        ww=q.top().sc;
        q.pop();
        if(visit[ww]==1) continue;
        visit[ww]=1;
        roadx[ww]=min(roadx[ww],w);
        for(i=1;i<=n;i++) {
            if(visit[i]==1) continue;
            if(roadx[i] > roadx[ww] + road[ww][i]) {
                roadx[i]=roadx[ww]+road[ww][i];
                q.push(mp(roadx[i],i));
            }
        }
    }

    q.push(mp(0,x));
    for(i=1;i<=n;i++) visit[i]=0;
    while(!q.empty()) {
        w=q.top().f;
        ww=q.top().sc;
        q.pop();
        if(visit[ww]==1) continue;
        visit[ww]=1;
        railx[ww]=min(railx[ww],w);
        for(i=1;i<=n;i++) {
            if(visit[i]==1) continue;
            if(railx[i] > railx[ww] + rail[ww][i]) {
                railx[i]=railx[ww]+rail[ww][i];
                q.push(mp(railx[i],i));
            }
        }
    }

    for(i=1;i<=n;i++) visit[i]=0;
    q.push(mp(0,y));
    while(!q.empty()) {
        w=q.top().f;
        ww=q.top().sc;
        q.pop();
        if(visit[w]==1) continue;
        visit[ww]=1;
        roady[ww]=min(roady[ww],w);
        for(i=1;i<=n;i++) {
            if(visit[i]==1) continue;
            if(roady[i] > roady[ww] + road[i][ww]) {
                roady[i]=roady[ww]+road[i][ww];
                q.push(mp(roady[i],i));
            }
        }
    }

    q.push(mp(0,y));
    for(i=1;i<=n;i++) visit[i]=0;
    while(!q.empty()) {
        w=q.top().f;
        ww=q.top().sc;
        q.pop();
        if(visit[ww]==1) continue;
        visit[ww]=1;
        raily[ww]=min(raily[ww],w);
        for(i=1;i<=n;i++) {
            if(visit[i]==1) continue;
            if(raily[i] > raily[ww] + rail[i][ww]) {
                raily[i]=raily[ww]+rail[i][ww];
                q.push(mp(raily[i],i));
            }
        }
    }

    ll ans=inf;
    for(i=1;i<=n;i++) {
        if(i==x || i==y) continue;
        ans=min(ans,railx[i]+roady[i]);
        ans=min(ans,raily[i]+roadx[i]);
    }
    cout<<ans<<endl;
    return 0;
}

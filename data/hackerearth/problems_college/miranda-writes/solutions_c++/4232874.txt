#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     (int)c.size()
#define clr(c)    c.clear()
#define pb        push_back
#define mp        make_pair
#define cin(x)    scanf("%d",&x)
#define MOD		1000000007
#define EPS		1E-10

int dist[401][401];
int dp[401][1 << 15];
int n,m,k;

int places[20];

int solve(int pos,int mask)
{
	if(mask+1 == (1 << k)) return dist[pos][n];
	else if(dp[pos][mask] != -1) return dp[pos][mask];
	int ret = 1E9;
	for(int a = 0; a < k; a++)
	{
		if(mask & (1 << a)) continue;
		ret = min(ret, solve(places[a],mask | (1 << a)) + dist[pos][places[a]]);
	}
	return (dp[pos][mask] = ret);
}

int main()
{
	cin(n);
	cin(m);
	cin(k);
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			dist[i][j] = 1E9;
	while(m--)
	{
		int u,v,c;
		cin(u);
		cin(v);
		cin(c);
		dist[v][u] = dist[u][v] = min(dist[u][v],c);
	}
	for(int i = 0; i < k; i++)
		cin(places[i]);
	for(int i = 1; i <= n; i++)
		dist[i][i] = 0;
	for(int k = 1; k <= n; k++)
		for(int i = 1; i <= n; i++)
			for(int j = 1; j <= n; j++)
				dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
	memset(dp,-1,sizeof(dp));
	cout << solve(1,0) << "\n";
	return 0;
}
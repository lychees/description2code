
#include <cstdio>
#include <vector>
#include <algorithm>
#include <stdlib.h>
#include<iostream>
#include <cstring>
using namespace std;

int b[20005]={0};
int count1=0;
void markMultiples(bool ar[], int a, int n)
{
    int i = 2, num;
    while ( (num = i*a) <= n )
    {
        ar[ num-1 ] = 1; // minus 1 because index starts from 0.
        ++i;
    }
}
 
// A function to print all prime numbers smaller than n
void SieveOfEratosthenes(int n)
{
    // There are no prime numbers smaller than 2
    if (n >= 2)
    {
        // Create an array of size n and initialize all elements as 0
        bool ar[n+1];
        memset(ar, 0, sizeof(ar));
 
        /* Following property is maintained in the below for loop
           arr[i] == 0 means i + 1 is prime
           arr[i] == 1 means i + 1 is not prime */
        for (int i=1; i<n; ++i)
        {
            if ( ar[i] == 0 )
            {
                //(i+1) is prime, print it and mark its multiples
                //printf("%d ", i+1);
                b[i+1]=1;
                markMultiples(ar, i+1, n);
            }
        }
    }
}
 
void maxxor(int arr[],int n,int k)
  {
      int xx[20050]={0},i,j,mxor=0;
       xx[0]=1;
           for(j=0;j<n;j++)
           {
 
             for(i=0;i<1050;i++)
              {
 
               if(xx[i])
               {
                   xx[arr[j]^i]=1;
                  if(b[arr[j]^i]) 
                   {
                   	count1++;
                   	b[arr[j]^i]=0;
                   }
             //     mxor=max(mxor,arr[j]^i^k);
               }
 
             }
           }
 //          return mxor;
}
 
int main() {
 
    int t;
   cin >>t;
   
    while(t--)
    {
    	for(int i=0;i<=2005;i++)
    	 b[i]=0;
    	SieveOfEratosthenes(2000);
    	count1=0;
        int n,arr[20050],k,i;
        
         cin >> n;
          k=0;
       for(i=0;i<n;i++)
           {
               cin >>arr[i];
           }
           
          maxxor(arr,n,k);
          cout << count1 <<endl;
 
 
 
 
     }
    return 0;
}
#include <iostream>
using namespace std;
#define N 100010
#define MAX_DIGITS 20
class BIT
{
	int data[N];
	public:
	int query(int l,int r)
	{
		--l;
		int ans=0;
		while(l!=r)
		{
			if(l<r) ans+=data[r],r&=r-1;
			else ans-=data[l],l&=l-1;
		}
		return ans;
	}
	void update(int idx,int delta)
	{
		while(idx<N)
		{
			data[idx]+=delta;
			idx+=idx&-idx;
		}
	}
}bits[MAX_DIGITS];
int getNumberOfDigits(long long n)
{
	int digits[10]{};
	int res=0;
	do
	{
		int d = n%10;
		if(digits[d]==0){
		digits[d]=1;
		++res;
		}
		n/=10;
	}while(n);
	return res;
}
long long arr[N];
int main()
{
   // cout << "Hello World!" << endl;
   int n;
   scanf("%d",&n);
   for(int i=1;i<=n;++i)
   {
   	scanf("%lld",&arr[i]);
   	int d = getNumberOfDigits(arr[i]);
   	bits[d].update(i,1);
   }
   int q;
   scanf("%d",&q);
   while(q--)
   {
   	int type;
   	scanf("%d",&type);
   	if(type!=2)
   	{
   		long long u,v;
   		scanf("%lld%lld",&u,&v);
   		int prev = getNumberOfDigits(arr[u]);
   		bits[prev].update(u,-1);
   		if(type==0)
   		arr[u]+=v;
   		else arr[u] = v;
   		bits[getNumberOfDigits(arr[u])].update(u,1);
   	}
   	else
   	{
   		int l,r,c;
   		scanf("%d%d%d",&l,&r,&c);
   		printf("%d\n",bits[c].query(l,r));
   	}
   }
    return 0;
}

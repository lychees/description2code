#include <iostream>
#include <string.h>
#include <list>
#include <iterator>

#define LIMIT 10000000

using namespace std;

void big_add(list<int>& l, list<int>& t) {
	int carry = 0,temp;
	list<int>::iterator i = l.begin();
	 list<int>::iterator j=t.begin();
	if(l.size() > t.size()) {
		for(; j!=t.end(); i++,j++) {
			temp = (*i+*j)+carry;
			*i = temp%LIMIT;
			carry = (temp-*i)/LIMIT;
		}
		*i = *i+carry;
	} else if(l.size() < t.size()) {
		for(; i!=l.end(); i++,j++) {
			temp = (*i+*j)+carry;
			*i = temp%LIMIT;
			carry = (temp-*i)/LIMIT;
		}
		for(; j!=t.end(); i++,j++) {
			l.push_back(*j+carry);
			carry = 0;
		}
	} else {
		for(; i!=l.end(); i++,j++) {
			temp = (*i+*j)+carry;
			*i = temp%LIMIT;
			carry = (temp-*i)/LIMIT;
		}
		if(carry) {
			l.push_back(carry);
		}
	}
}


void big_mult(list<int>& l, int num) {
	int temp, carry = 0;
	for(list<int>::iterator i=l.begin(); i!=l.end(); i++) {
		temp = (*i)*num + carry;	
		*i = temp%LIMIT;
		carry = (temp-*i)/LIMIT;
	}	
	if(carry)
		l.push_back(carry);
}

void mult(list<int>& l, int K, int N) {
	list<int> tlist;
	tlist.push_back(1);
	for(int i=0;i<=N;i++) {
		big_add(l, tlist);
		big_mult(tlist, K);
	}
}



int main() {
	int T;
	cin >> T;
	while(T--) {
		int K, N, ans=0, temp=0;
		list<int> l;
		l.push_back(0);
		cin >> K >> N;
		mult(l, K, N);
		for(list<int>::iterator i=l.begin(); i!=l.end(); i++) {
			temp = *i;
		//	cout << "temp " << temp << endl;
			while(temp) {
				ans += temp%10;
				temp /=10;
			}
		}
		cout << ans << endl;
	}
}

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  @ All power is within you; you can do anything and everything. Believe in that, do not believe that you are  @
  @ weak; do not believe that you are half-crazy lunatics, as most of us do nowadays. You can do any thing and @
  @ everything, without even the guidance of any one. Stand up and express the divinity within you.            @
  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ */

#include<bits/stdc++.h>
#define fori(a,b) for(ll i=a;i<b;i++)
#define forj(a,b) for(ll j=a;j<b;j++)
#define fork(a,b) for(ll k=a;k<b;k++)
#define fori1(a,b) for(ll k=a;k<=b;k++)
#define ford(a,b) for (int i = b-1; i >= a; --i)
#define ll long long
#define mod 1000000009
#define nax 1000005
#define inf 100000000000000000LL
#define pll pair<ll,ll>
#define distSqr(x1,y1,x2,y2) ( sqr(x1-x2) + sqr(y1-y2) )
#define eps 1e-9
#define plll pair<ll,pair<ll,ll> >
using namespace std;
ll a,b,c,d,e,f,g,h,k,l,m,n,o,p,q,r,s,t,u,w,x,y,z;
ll arr[1000005];
ll brr[1000005];
int dp[1005][1005];
ll fac[nax];
ll inv [nax];

ll fastmod(ll x, ll d) {if (d < 0) d += mod - 1;d %= mod;ll y = 1;while (d) {if (d & 1) y *= x, y %= mod;x *= x, x %= mod;d /= 2;}return y;}
void cal(){fac[0]=1;inv[0]=1;fori(1,nax){fac[i]=(fac[i-1]*i)%mod;inv[i]=(inv[i-1]*fastmod(i,-1))%mod;}}
ll C(ll n,ll r){return (((fac[n]*inv[r])%mod)*inv[n-r])%mod;}
string s1,s2;
typedef vector<vector<ll> > matrix;

matrix mul(matrix A, matrix B)
{
    matrix C(2, vector<ll>(2));
    fori(0,2) forj(0,2) fork(0,2)
        C[i][j] = (C[i][j] + (A[i][k] * B[k][j]) )%mod;
    return C;
}
matrix fastmat(matrix A,ll n)
{
    matrix C(2, vector<ll>(2));
    if(n==1)
        return A;
    if(n&1)
    {
        C = mul(fastmat(A,n-1),A);
        return C;
    }
    else
    {
        C = fastmat(A,n/2);
        return mul(C,C);

    }

}

ll solve(ll n)
{


   matrix mx(2, vector<ll>(2));
   mx[0][0]=mx[1][1]=9;
   mx[0][1]=mx[1][0]=1;
   if(n==1)
   {
       cout<<1<<"\n";
       return 0;
   }
   matrix X=fastmat(mx,n-1);


   cout<< (X[0][0] + 9*X[0][1])%mod<<"\n";
   return 0;


}
int main()
{
//freopen("input.txt","r",stdin);
//freopen ("output.txt","w",stdout);
cin>>t;
while(t--)
{
    cin>>n;
    solve(n);
}


}


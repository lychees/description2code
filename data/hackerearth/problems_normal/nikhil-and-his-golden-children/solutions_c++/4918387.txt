/*	I will not win immediately,
 *	but I will win definitely...
 */
#include<bits/stdc++.h>
#define opt				ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define li				long int
#define lli				long long int
#define sd(n)				scanf("%d",&n)
#define sld(n)				scanf("%ld",&n)
#define slld(n)				scanf("%lld",&n)
#define pd(n)				printf("%d\n",n)
#define pld(n)				printf("%ld\n",n)
#define plld(n)				printf("%lld\n",n)
#define rep(i,a,b)			for(i=a;i<b;i++)
#define repr(i,a,b)			for(i=a;i>b;i--)
#define repi(i,v)			for(i=v.begin();i!=v.end();i++)
#define vi				vector<int>
#define vli				vector<li>
#define vlli				vector<lli>
#define pb				push_back
#define pob				pop_back
#define all(v)				v.begin(),v.end()
#define sz				size()
#define lb				lower_bound
#define ub				upper_bound
#define elif				else if
#define mp				make_pair
#define pa				pair<int,int>
#define vpp				vector<pair<int,int> >
#define F				first
#define S				second
#define mod				1000000007
#define itr				iterator
using namespace std;
li power(li a, li b){
		li ans=1L;
		while(b){
				if(b&1)
						ans=(ans*a)%mod;
                a=(a*a)%mod;
                b>>=1;
		}
		return ans;
}
li mmi(li n){
		return power(n,mod-2);
}
/**************************MAIN CODE BEGINS NOW!**************************/

li fact[100002];

void factorial(){
        li i;
        fact[0]=1L;
        rep(i,1,100001)
                fact[i]=(fact[i-1]*i)%mod;
}

int main(){
        li t;
        sld(t);
        factorial();
        while(t--){
                li i,k,m,sum=0L;
                sld(k),sld(m);
                rep(i,0,k){
                        li x;
                        sld(x);
                        sum+=x;
                }
                if(sum>m)
                        pd(0);
                else{
                        m-=sum;
                        m+=k;
                        m--,k--;
                        li num=fact[m];
                        li den=(fact[k]*fact[m-k])%mod;
                        li mmi_den=mmi(den);
                        pld((num*mmi_den)%mod);
                }
        }
        return 0;
}

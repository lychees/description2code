#include <iostream>
#include<stack>
#include<climits>
#include<algorithm>
#include<vector>
using namespace std;
const int MAX = 1e6 + 5;
typedef long long ll;
#define pb(a)		push_back(a)
#define pp			pop_back()
#define sz			size()
#define pf(a)		printf("%d",a)
#define sf(a)		scanf("%d",&a)
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ll, pll> node;
vector<ll> stk;
bool vis[MAX];
ll dist[MAX];
vector<pll> adj[MAX];
vector<ll> edges[MAX];
void dfs(int s) {
	vis[s] = 1;
	for (int i = 0;i<edges[s].sz;i++) {
		if (vis[edges[s][i]] == 0)dfs(edges[s][i]);
	}
	stk.pb(s);
}

int main()
{
	ios::sync_with_stdio(0);
	int r, p;
	cin >> r >> p;
	ll x, y, w;
	for (int i = 0;i<p;i++) {
		cin >> x >> y >> w;
		edges[x].pb(y);
		adj[y].pb(pll(w, x));
	}
	for (int i = 1;i <= r;i++) {
		if (vis[i] == 0)dfs(i);
	}
	reverse(stk.begin(),stk.end());
	
	ll ans=0;
	for(int i=0;i<stk.sz;i++) {
		int u = stk[i];
	//	cout<<u<<" ";
		for (int i = 0;i<adj[u].sz;i++) {
			int v = adj[u][i].second;
			ll w = adj[u][i].first;
			if (dist[u]<dist[v]+2 + w)dist[u] = dist[v]+2 + w;
		}
		ans=max(ans,dist[u]);
	}
	cout<<ans<<endl;
	return 0;
}

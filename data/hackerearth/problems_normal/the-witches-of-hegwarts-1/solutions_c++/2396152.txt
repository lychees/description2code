// 2015-08-27
#include <bits/stdc++.h>
#include <unordered_map>
#include <array>
#include <forward_list>
#include <unordered_set>
using namespace std;

#ifndef LOCAL
//#define LOCAL
#endif

#ifdef LOCAL
//#include <vld.h>
#pragma comment(linker, "/STACK:256000000")
#endif

#define ff first
#define ss second
#define sz(x) (int)((x).size())
#define szo(x) sizeof(x)
#define pub push_back
#define pob pop_back
#define mem2d(arr, value) (fill(&arr[0][0], &arr[0][0] + szo(arr) / szo(decltype(value)), value));
#define mem(arr, value) memset(arr, value, szo(arr));
#define fo(i, j, k) for (int i = j; i <= (int)(k); ++i) // [j..k]
#define fd(i, j, k) for (int i = j; i >= (int)(k); --i) // [j..k]
#define gg cout << "OK\n"

#define SET_BIT(mask, index) (mask |= (1LL << index))
#define TEST_BIT(mask, index) (mask & (1LL << index))
#define CLEAR_BIT(mask, index) (mask &= ~(1LL << index))
#define TOGGLE_BIT(mask, index) (mask ^= (1LL << index))
const int INF = 1000000000;
const int NO_VALUE = -1;
using pii = pair<int, int>;
using pip = pair<int, pii>;
using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;

template<class T> T scan() { T t; cin >> t; return t; }
#define sc(T) scan<decltype(T)>()
#define sci scan<int>()
#define scll scan<ll>()
#define scs scan<string>()

vector<function<int(int)>> powers;

int useDijkstra(int src) {
	unordered_map<int, int> hits;
	hits[src] = 0;
	set<pii> nodes{ { 0, src } };

	while (!nodes.empty()) {
		int u = begin(nodes)->ss;
		if (u == 1) {
			return hits[u];
		}
		nodes.erase(begin(nodes));

		for (auto power : powers) {
			int v = power(u);
			if (hits.find(v) == end(hits)) {
				hits[v] = INT_MAX;
			}

			if (hits[u] + 1 < hits[v]) {
				nodes.erase({ hits[v], v });
				hits[v] = hits[u] + 1;
				nodes.insert({ hits[v], v });
			}
		}
	}
	return INT_MAX;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	// freopen("output.txt", "w+", stdout);
#endif

	int tc = sci;
	while (tc--) {
		int k = sci;
		powers = {
			[](int k) { return k - 1; }, 
			[](int k) { return k % 2 == 0 ? k / 2 : -1; },
			[](int k) { return k % 3 == 0 ? k / 3 : -1; } };
		cout << useDijkstra(k) << "\n";
	}

	return 0;
}

#include<bits/stdc++.h>
using namespace std;
typedef long long int LL;
typedef int ll;
typedef set<int> si;
typedef long long Long;
typedef vector<int> vi;
typedef vector<vi> vii;
typedef vector<Long>vl;
typedef pair<int,int>pii;
typedef pair<Long,Long>pll;
typedef pair<string,int>psi;
typedef pair<double,double>pdd;
//#define get getchar_unlocked
//#define put putchar_unlocked
#define get getchar
#define put(c) printf("%c",c)
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define repstl(i, s) for (__typeof((s).end())i=(s).begin();i!=(s).end();++i)
#define PI 3.1415926535897932384626433832795
#define FO freopen ("out.txt", "w", stdout)
#define FI freopen ("in.txt", "r", stdin)
#define ref(i,a,n) for(int i=a;i<=n;i++)
#define reb(i,n,a) for(int i=n;i>=a;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define all(a) a.begin(),a.end()
#define pc(c) printf("%c",c)
#define ps printf(" ")
#define pn printf("\n")
#define l(a) 2*a+1
#define r(a) 2*a+2
#define left(a,b) a,(a+b)/2
#define right(a,b) (a+b)/2+1,b
#define mid(a,b) (a+b)/2

inline char skipwhitespace() { 
    char ch = get();
    while(ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t') 
        ch = get();
    return ch;
}

void gi(ll &x) {
    register ll c = get(); x = 0;
    ll sn=1;
    for(;(c<48 || c>57);c = get()) 
    if(c=='-') sn=-1;
    for(;c>47 && c<58;c = get()) {
        x = (x<<1) + (x<<3) + c - 48;
    }
    x*=sn;
}

void gii(LL &x) {
    register LL c = get(); x = 0;
    LL sn=1;
    for(;(c<48 || c>57);c = get()) 
    if(c=='-') sn=-1;
    for(;c>47 && c<58;c = get()) {
        x = (x<<1) + (x<<3) + c - 48;
    }
    x*=sn;
}

void wi(ll n) {
    ll sign = n >= 0 ? 1 : -1;
    n = n>0 ? n : -n;
    char buf[10];
    ll i = 9;
    if(!n) buf[i--] = 48;
    while(n) {
        buf[i--] = n % 10 + 48;
        n /= 10;
    }
    if(sign < 0) put('-');
    while(++i < 10) put(buf[i]);
}
 
void wii(LL n)
{
    LL sign = n >= 0 ? 1 : -1;
    n = n>0 ? n : -n;
    char buf[25];
    LL i = 24;
    if(!n) buf[i--] = 48;
    while(n) {
        buf[i--] = n % 10 + 48;
        n /= 10;
    }
    if(sign < 0) put('-');
    while(++i < 25) put(buf[i]);
}

ll gs(char *s)
{
    char ch=skipwhitespace();
    ll n=0;
    while( (ch != '\n' && ch != ' ' && ch != '\t') )
    {
        s[n++] = ch;
        ch = get();
    }
    s[n] = 0;
    return n;
}

void ws(char *s)
{
    char *p = s;
    while(*p) {
        put(*p);
        p++;
    }
}

//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={2,1,-1,-2,-1,1};int dy[]={0,1,1,0,-1,-1}; //Hexagonal Direction

#define N 200005
typedef struct { ll ans,lazy,len; char c; } nod;
nod a[N<<2];

void build(ll nn,ll s,ll e) {
	if(s==e) { if(a[s].c=='<') a[nn].ans=1; a[nn].len=1; return ; }
	build(l(nn),left(s,e));
	build(r(nn),right(s,e));
	a[nn].len=a[l(nn)].len+a[r(nn)].len;
	a[nn].ans=a[l(nn)].ans+a[r(nn)].ans;
}

void refresh(ll nn,ll s,ll e) {
	if(a[nn].lazy) {
		a[nn].ans=a[nn].len-a[nn].ans;
		if(s!=e) {
			a[l(nn)].lazy=1-a[l(nn)].lazy;
			a[r(nn)].lazy=1-a[r(nn)].lazy;
		}
		a[nn].lazy=0;
	}
}

void Refresh(ll nn,ll s,ll e) {
	a[nn].ans=a[nn].len-a[nn].ans;
	if(s!=e) {
		a[l(nn)].lazy=1-a[l(nn)].lazy;
		a[r(nn)].lazy=1-a[r(nn)].lazy;
	}
}

void update(ll nn,ll s,ll e,ll l,ll r) {
	refresh(nn,s,e);
	if(s==l && r==e) { Refresh(nn,s,e); return ; }
	ll m=mid(s,e);
	if(e<l || r<s) return ;
	if(r<=m || l>m) {
		update(l(nn),left(s,e),l,r);
		update(r(nn),right(s,e),l,r);
	} else {
		update(l(nn),left(s,e),l,m);
		update(r(nn),right(s,e),m+1,r);
	}
	a[nn].len=a[l(nn)].len+a[r(nn)].len;
	a[nn].ans=a[l(nn)].ans+a[r(nn)].ans;
}

nod query(ll nn,ll s,ll e,ll l,ll r) {
	refresh(nn,s,e);
	if(s==l && r==e) return a[nn];
	ll m=mid(s,e);
	if(r<=m) return query(l(nn),left(s,e),l,r);
	if(l>m) return query(r(nn),right(s,e),l,r);
	nod aa,bb,cc;
	aa=query(l(nn),left(s,e),l,m);
	bb=query(r(nn),right(s,e),m+1,r);
	cc.len=aa.len+bb.len;
	cc.ans=aa.ans+bb.ans;
	return cc;
}

int main() {
	ll n,m;
	gi(n); gi(m);
	rep(i,n-1) scanf(" %c",&a[i].c);
	build(0,0,n-2);
	while(m--) {
		ll c;
		gi(c);
		if(c==1) {
			ll l,r;
			gi(l); gi(r); l-=1; r-=2;
			update(0,0,n-2,l,r);
		} else {
			ll l,r;
			gi(l); gi(r);
			if(l<r) {
				l-=1; r-=2;
				wi(query(0,0,n-2,l,r).ans); pn;
			} else {
				swap(l,r);
				l-=1; r-=2;
				nod ans=query(0,0,n-2,l,r);
				wi(ans.len-ans.ans); pn;
			}
		}
	}
	return 0;
}



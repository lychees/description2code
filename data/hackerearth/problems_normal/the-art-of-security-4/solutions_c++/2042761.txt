#include<iostream>
#include<vector>
#include<queue>
#include<set>
#include<algorithm>
#include<stdio.h>
#include<math.h>
#include<string.h>

using namespace std;

#define ll                  long long int
#define INF                 999999999999999999
#define MOD                 1000000007
#define repi(i,x,y)         for(i=x;i<=y;i++)
#define invrepi(i,x,y)      for(i=x;i>=y;i--)
#define trace1(x)           cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
#define trace2(x,y)         cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
#define trace3(x,y,z)       cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
#define trace4(a,b,c,d)     cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<endl;
#define trace5(a,b,c,d,e)   cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<" | "#e" = "<<e<<endl;
#define trace6(a,b,c,d,e,f) cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<" | "#e" = "<<e<<" | "#f" = "<<f<<endl;

class Arr
{
	public:
	ll *a;
	Arr()
	{
		a = new ll[8];
	}
	Arr(const Arr& ar)
	{
		a = new ll[8];
		int i;
		repi(i,0,7)
		{
			a[i] = ar.a[i];
		}
	}
	void swap(int i,int j)
	{
		ll temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
};

ll calways(Arr& array,ll n, ll sum1, ll sum2)
{
	ll ans = 0, temp,i;
	if(sum1>sum2)
		return 0;
	if(n==0)
		return 1;
	repi(i,0,n-1)
	{
		Arr ar(array);
		temp = ar.a[i];
		ar.swap(i,n-1);
		ans += calways(ar,n-1,sum1+temp,sum2) + calways(ar,n-1,sum1,sum2+temp);
	}
	return ans;
}

int main()
{
    ll n,i,sum,ways;
    Arr array;
    cin>>n;
    sum = 0;
    repi(i,0,n-1)
    {
    	cin>>array.a[i];
    	sum += array.a[i];
    }
    ways = calways(array,n,0,0);
    cout<<ways<<" "<<sum<<endl;
    if(ways>sum)
    	cout<<"We will win!"<<endl;
    else
    	cout<<"Got no way out!"<<endl;
    return 0;
}

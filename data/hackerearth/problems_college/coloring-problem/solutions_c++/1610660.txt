#include <iostream>
#include <stdio.h>
#include <vector>
#include <queue>

using namespace std;

bool BFS( vector< vector<int> >&A, int n ) {
	
	vector<bool> visit( n, false );
	vector<int> color( n );
	vector<int> :: iterator it;
	int u, v;
	
	queue<int> Q;
	
	Q.push( 0 );
	color[ 0 ] = 1;
	visit[ 0 ] = true;
	
	while( !Q.empty() ) {
		u = Q.front();
		Q.pop();
		
		for( it = A[ u ].begin();it != A[ u ].end();it++ ) {
			v = *it;
			if( color[ v ] == color[ u ] )
				return false;
			else if( !visit[ v ] ) {
				visit[ v ] = true;
				Q.push( v );
				color[ v ] = 3 - color[ u ];

			}
		}
	}
	
	return true;
}

int main()
{
	int t, n, m, i, a, b;
	
	scanf("%d", &t );
	
	while( t-- ) {
		
		scanf("%d", &n );
		scanf("%d", &m );
		
		vector< vector<int> > A( n, vector<int> () );
		
		for( i = 0;i < m;i++ ) {
			
			scanf("%d %d", &a, &b );
			A[ a ].push_back( b );
			A[ b ].push_back( a );
		}
		
		if( BFS( A, n ) )
			printf("BICOLORABLE.\n");
		else
			printf("NOT BICOLORABLE.\n");
		
	}
	return 0;
}

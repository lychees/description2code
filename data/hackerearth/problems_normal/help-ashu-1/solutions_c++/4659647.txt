#include<bits/stdc++.h>
int tree[4000000];
using namespace std;
void build(int node, int start, int end, int A[]){
	if(start==end){
		if(A[start]%2==0){
			tree[node]=1;
		}
		else
			tree[node] = 0;
	}
	else{
		int mid = (start+end)/2 ;
		build(2*node, start, mid, A);
		build(2*node+1, mid+1, end, A);
		tree[node] = tree[2*node] + tree[2*node + 1];
	}
}
void update(int node, int start, int end, int idx, int val, int A[]){
	if(start==end){
		A[idx] = val;
		tree[node]= (val%2==0)?1:0 ;
	}
	else{
		int mid = (start+end)/2 ;
		if(start <= idx && idx<= mid){
			update(2*node, start, mid, idx, val, A);
		}
		else{
			update(2*node+1, mid+1, end, idx, val, A);
		}

		tree[node] = tree[2*node] + tree[2*node+1] ;
	}
}

int query(int node, int start, int end, int l, int r){
	if(r<start || end<l){
		return 0;
	}
	if(l<= start && end <= r){
		return tree[node];
	}
	int mid = (start+ end)/2;
	int p1 = query(2*node, start, mid, l, r);
	int p2 = query(2*node+1, mid+1, end, l, r);
	return (p1+p2);
}


int main(){
	int N, Q;
	cin>>N;
	int A[N+1];
	for(int i=1;i<=N;i++){
		cin>>A[i];
	}
	cin>>Q;
	int a, x, y; 
	build(1, 1, N, A);
	while(Q--){
		cin>>a>>x>>y;
		if(a==0){
			//modify the number at index x to y
			update(1, 1, N, x, y, A);
		}
		else if(a==1){
			cout<<query(1, 1, N, x, y)<<endl;
		}
		else if(a==2){
			cout<<(y-x)-query(1, 1, N, x, y) +1<<endl; 
		}
	}
	return 0;
}
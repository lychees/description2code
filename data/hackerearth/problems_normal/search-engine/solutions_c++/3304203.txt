#include<bits/stdc++.h>
using namespace std;
struct Trie
{
    int prior;
    struct Trie *arr[26];
};

int insert_Trie(struct Trie** tree, string str, int pr,int j,int n)
{
    if((*tree)==NULL)
    {
        int i;
        struct Trie *temp=(struct Trie*)malloc(sizeof(struct Trie));
        for(i=0;i<26;i++)
             temp->arr[i]=0;
       temp->prior=-1;
       (*tree)=temp;
    }
        if(j==n)
        {
            if((*tree)->prior<pr)
                 (*tree)->prior=pr;
          return (*tree)->prior;
        }

    return (*tree)->prior=max((*tree)->prior,insert_Trie(&((*tree)->arr[str[j]-'a']),str,pr,j+1,n));

}

int find_prior(struct Trie *tree, string str, int j,int n)
{
    if(j==n)
    {
        return tree->prior;
    }

    if(tree->arr[str[j]-'a'] !=NULL )
         return find_prior(tree->arr[str[j]-'a'],str,j+1,n);
    else
        return -1;
}
int main()
{
    int n,q;
    cin>>n>>q;
    struct Trie *tree=NULL;
    while(n--)
     {
         int pr;
         string str;
         cin>>str>>pr;
      // cout<<str<<" "<<pr<<endl;
         insert_Trie(&tree,str,pr,0,str.length());
     }
    while(q--)
    {
       string str;
       cin>>str;
       cout<<find_prior(tree,str,0,str.length())<<endl;
    }
    return 0;
}


#include <bits/stdc++.h>

#define FOR(i,b,e) for(int i=(b); i <= (e); ++i)
#define FORD(i,b,e) for(int i=(b); i >= (e); --i)
#define SIZE(c) (int) (c).size()
#define FORE(i,c) FOR(i,0,SIZE(c)-1)
#define FORDE(i,c) FORD(i,SIZE(c)-1,0)
#define PB push_back
#define MP make_pair
#define ST first
#define ND second

using namespace std;

typedef long long int LLI;
typedef pair < int , int > PII;
typedef pair < LLI , LLI > PLL;

typedef vector < int > VI;
typedef vector < bool > VB;
typedef vector < PII > VP;
typedef vector < LLI > VL;
typedef vector < PLL > VPL;

typedef vector < VI > VVI;
typedef vector < VL > VVL;
typedef vector < VB > VVB;
typedef vector < VP > VVP;

const int MOD = 1000000007;
const int INF = 1000000001;
const LLI LLINF = 1000000000000000001LL;


/*************************************************************************/

const int M = (1e9)+7;
const int N = 3500;
int dp[N][N];
int sc[N][N];
int sd[N][N];

int main()
{
    int n, l, t, k;
    scanf("%d%d%d%d", &n, &l, &t, &k);


    for(int i = 1; i <= n; ++i) {
        for(int j = 0; j <= t; ++j) {
            if(i < l) {
                dp[i][j] = (j == 0 ? k : 0);
            } else {
                dp[i][j] = (i-l+1 == j ? k : 0);
            }

            dp[i][j] += (LLI)(k-1) * (sc[i-1][j]-sc[max(i-l, 0)][j]+M) % M;
            if(dp[i][j] >= M)
                dp[i][j] -= M;



            dp[i][j] += (LLI)(k-1) * (i-l > 0 && j ? sd[i-l][j-1] : 0) % M;
            if(dp[i][j] >= M)
                dp[i][j] -= M;

            sc[i][j] = dp[i][j] + (i ? sc[i-1][j] : 0);
            if(sc[i][j] >= M) sc[i][j] -= M;
            sd[i][j] = dp[i][j] + (i && j ? sd[i-1][j-1] : 0);
            if(sd[i][j] >= M) sd[i][j] -= M;
        }
    }

    printf("%d\n", dp[n][t]);
    return 0;
}

/*************************************************************************/


#include <iostream>
#include <set>
#include <bitset>
using namespace std;

int main()
{
	string s1, s2;

	cin >> s1 >> s2;

	bitset<30> b(s1);
	set<unsigned long> n1;

	// binary possibilities are easier
	for(int i = 0; i<s1.length(); i++)
	{
		b.set(i, b[i]==0?1:0);
		n1.insert(b.to_ulong());
		b.set(i, b[i]==0?1:0);
	}

	// now work through the base-3 values
        for(int i=0; i<s2.length();i++)
	{
		string t = s2;
		for(int j=0;j<3;j++)
		{
			t[i]=j+48;
			if(t==s2)continue;
			unsigned long v=0;
			for(string::iterator k=t.begin();k!=t.end();k++)
			{
				v *= 3;
				v += *k - 48;
			}

			set<unsigned long>::iterator k = n1.find(v);
			if(k==n1.end())continue;
			
			cout << v << endl;
		}
	}
}

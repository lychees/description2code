#include<bits/stdc++.h>
using namespace std;
struct point {int x;int y;};
bool operator <(const point &a,const point &b){return (a.x<b.x);}
int compare (const void * a, const void * b){return ( *(int*)a - *(int*)b );}
#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,b) REP(i,0,b)
#define si(n) scanf("%d",&n)
int gcd(int a, int b){return (b==0)?a:gcd(b,a%b);}

const int MAX = 300000;
const int MOD=1000000007;
int BIT[10][MAX];

inline void update(int x, int bitNumber,int val){
    x+=2;
    while(x < MAX){
        BIT[bitNumber][x] += val;
        x += x & -x;
    }
}

inline long long int read(int x, int bitNumber){
    x+=2;
    long long int ret = 0;
    while(x > 0){
        ret += BIT[bitNumber][x];
        x -= x & -x;
    }
    return ret;
}

long long int getDistinctDigits(long long int num) {
    if(num==0)
        return 1;

    bool cnt[10];
    for(int i=0;i<10;i++)
        cnt[i]=false;
    while(num!=0) {
        cnt[num%10]=true;
        num/=10;
    }
    long long int ans=0;
    for(int i=0;i<10;i++)
        ans+=(cnt[i]==true);
    return ans;
}

int main()
{
    long long int n,i,q,l,r;
    cin >> n;
    long long int a[n];
    rep(i,n){
        cin >> a[i];
        update(i,getDistinctDigits(a[i])-1,1);
    }
    cin >> q;
    string s;
        
    while(q--) {
        cin >> s >> l >> r;
        if(s=="MAX") {
            l--;r--;
            for(i=9;i>=0;i--)
                if(read(r,i)!=read(l-1,i))
                    break;
            cout << i+1 << " "<< read(r,i) - read(l-1,i) << endl;
        } else if (s=="MIN") {
            l--;r--;
            for(i=0;i<10;i++)
                if(read(r,i)!=read(l-1,i))
                    break;
            cout << i+1 << " "<< read(r,i) - read(l-1,i) << endl;
        } else if (s=="MUL") {
            update(l-1,getDistinctDigits(a[l-1])-1,-1);
            a[l-1]=(a[l-1]*r)%MOD;
            update(l-1,getDistinctDigits(a[l-1])-1,1);
        } else if (s=="ADD") {
            update(l-1,getDistinctDigits(a[l-1])-1,-1);
            a[l-1]=(a[l-1]+r)%MOD;
            update(l-1,getDistinctDigits(a[l-1])-1,1);
        } else if (s=="REP") {
            update(l-1,getDistinctDigits(a[l-1])-1,-1);
            a[l-1]=r%MOD;
            update(l-1,getDistinctDigits(a[l-1])-1,1);
        }
    }
    return 0;
}

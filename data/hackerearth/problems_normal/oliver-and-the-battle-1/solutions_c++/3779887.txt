#include <bits/stdc++.h>
using namespace std;
int g[1001][1001],visited[1001][1001];
int n,m;

bool isValid(pair <int,int> x)
{
    if(x.first<0||x.first>=n)
        return false;
    if(x.second<0||x.second>=m)
        return false;
    if(g[x.first][x.second]==0)
        return false;
    if(visited[x.first][x.second])
        return false;
    return true;
}

long int bfs(pair <int,int> s)
{
    int dx[] = {0,1,-1},dy[] = {0,1,-1};
    long int ret = 1;
    queue < pair <int,int> > q;
    q.push(s);
    visited[s.first][s.second] = true;
    while(!q.empty())
    {
      pair <int,int> u = q.front();
      q.pop();
      for(int i=0;i<3;i++)
          for(int j=0;j<3;j++)
          {
              pair <int,int> v = make_pair(u.first+dx[i],u.second+dy[j]);
              if(isValid(v))
              {
                  q.push(v);
                  visited[v.first][v.second] = true;
                  ret++;
              }
          }
    }
    return ret;
}

void init()
{
    cin>>n>>m;
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
        scanf("%d",&g[i][j]);

    long int troops = 0;
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
        visited[i][j] = false;
    long int ans = 0;
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
        {
            if(!visited[i][j]&&g[i][j])
            {
                troops++;
                ans = max(ans,bfs(make_pair(i,j)));
            }
        }
    cout<<troops<<" "<<ans<<endl;
}

int main()
{
    int t;
    cin>>t;
    while(t--)
        init();
    return 0;
}

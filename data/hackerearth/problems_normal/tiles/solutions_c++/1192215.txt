#include <iostream>
#include <cstdio>
 
using namespace std;
 
const int MOD=1000000007;
const long long MODSQ=1LL*MOD*MOD;
int M, N;
 
struct matrix
{
    long long data[64][64];
    matrix multiply(const matrix& other) const
    {
        matrix ret;
        for(int i=0; i<64; i++)
            for(int j=0; j<64; j++)
            {
                ret.data[i][j]=0;
                for(int k=0; k<64; k++)
                {
                    ret.data[i][j]+=data[i][k]*other.data[k][j];
                    if(ret.data[i][j]>=MODSQ)
                        ret.data[i][j]-=MODSQ;
                }
                ret.data[i][j]%=MOD;
            }
        return ret;
    }
} P[7][21];
 
int calc(int len, int cur, int last)
{
    int ret=0, pre=1, pre2=0;
    for(int i=0; i<len; i++)
    {
        ret=0;
        if((cur>>i)&1)
        {
            // assign vertical
            if(((last>>i)&1)==0)
                ret+=pre;
            // assign horizontal
            if(i>0 && ((cur>>(i-1))&1)==1)
                ret+=pre2;
        }
        // assign none
        else
            ret=pre;
        pre2=pre;
        pre=ret;
    }
    return ret;
}
 
void solve()
{
    scanf("%d%d", &M, &N);
    matrix p, v;
    for(int i=0; i<64; i++)
        for(int j=0; j<64; j++)
            p.data[i][j]=i==j, v.data[i][j]=0;
    v.data[(1<<M)-1][0]=1;
    for(int i=0; N; i++, N/=2)
        if(N&1)
            p=p.multiply(P[M][i]);
    matrix r=p.multiply(v);
    int ans=0;
    for(int i=0; i<(1<<M); i++)
        ans=(ans+r.data[i][0])%MOD;
    printf("%d\n", ans);
}
 
int main()
{
    for(int k=1; k<=6; k++)
    {
        for(int i=0; i<(1<<k); i++)
            for(int j=0; j<(1<<k); j++)
                P[k][0].data[i][j]=calc(k, i, j);
        for(int i=1; i<=20; i++)
            P[k][i]=P[k][i-1].multiply(P[k][i-1]);
    }
    int T;
    scanf("%d", &T);
    while(T--)
        solve();
    return 0;
}
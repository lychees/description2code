#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cstring>
#include <map>
#include <string>
#include <queue>
#include <set>
#include <stack>
#define rep(i, a, b) for(int i = a; i < b; i++)
#define red(i, a, b) for(int i = a; i > b; i--)
#define RED true
#define BLACK false
#define pb push_back
#define mk make_pair
#define fi first
#define se second
using namespace std;
typedef pair<int, int> ii;
typedef long long ll;
typedef pair<ii, int> iii;
const int N = 1e3 + 7;
const int M = 60;
const int inf = (int)1e9 + 7;
const ll base = (ll)1e18;
const double pi = acos(-1);
const double ep = 1e-18;

int inverse(int x, int n){
    int r = n, newr = x;
    int t = 0, newt = 1;
    while (newr > 0){
        int q = r / newr;
        int tmp = newr;
        newr = r % newr;
        r = tmp;

        tmp = newt;
        newt = t - q * newt;
        t = tmp;
    }
    if (t < 0) t += n;
    return t;
}

ll f[N], invf[N];

ll C(int n, int k){
    return f[n] * invf[n - k] % inf * invf[k] % inf;
}

ll L[N];

int n, k;

int main(){
    //freopen("in.txt", "r", stdin);
    f[0] = invf[0] = 1;
    rep(i, 1, N){
        f[i] = (f[i - 1] * i) % inf;
        invf[i] = inverse(f[i], inf);
    }
    cin >> n >> k;
    ll ans = 0;
    L[0] = 1;
    rep(i, 1, n + 1){
        rep(j, 0, i)
            L[i] = (L[i] + C(i - 1, j) * f[j + 1] % inf * L[i - j - 1] % inf) % inf;
    }
    cout<<L[n] * C(n, k) % inf;

}

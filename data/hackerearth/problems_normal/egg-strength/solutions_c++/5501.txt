# include <cstdio>
# include <climits>
# include <fstream>
# include <iostream>

using namespace std;

// A utility function to get maximum of two integers
int max(int a, int b) { return (a > b)? a: b; }

int eggFloor[501][501];

void init(){
    for (int i = 1; i <= 500; i++)
    {
        eggFloor[i][1] = 1;
        eggFloor[i][0] = 0;
    }

    // We always need j trials for one egg and j floors.
    for (int j = 1; j <= 500; j++)
        eggFloor[1][j] = j;

     for (int i = 2; i <= 500; i++)
    {
        for (int j = 2; j <= 500; j++)
        {
            eggFloor[i][j] = INT_MAX;
        }
    }
}

/* Function to get minimum number of trails needed in worst
  case with n eggs and k floors */
int eggDrop(int n, int k)
{
    /* A 2D table where entery eggFloor[i][j] will represent minimum
       number of trials needed for i eggs and j floors. */
    //int eggFloor[n+1][k+1];
    int res;
    int i, j, x;

    // We need one trial for one floor and0 trials for 0 floors


    // Fill rest of the entries in table using optimal substructure
    // property
    for (i = 2; i <= n; i++)
    {
        for (j = 2; j <= k; j++)
        {
        	if(eggFloor[i][j] != INT_MAX)	continue;
           // eggFloor[i][j] = INT_MAX;
            for (x = 1; x <= j; x++)
            {
                res = 1 + max(eggFloor[i-1][x-1], eggFloor[i][j-x]);
                if (res < eggFloor[i][j])
                    eggFloor[i][j] = res;
            }
        }
    }

    // eggFloor[n][k] holds the result
    return eggFloor[n][k];
}

/* Driver program to test to pront printDups*/
int main()
{
    //ifstream cin("infile.txt");
    init();
    int n;
    cin>>n;
    while(n--){
        int m,k;
        cin>>m>>k;
        //cout<<m<<k<<"\n";
        cout<<eggDrop(k, m)<<"\n";
    }
    return 0;
}

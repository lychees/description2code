#include<iostream>
#include<vector>

using namespace std;

	bool primes[100001];
	vector<int> v;

	void fillSieve() {
		for(int i=0;i<100001;i++)
            primes[i]=true;
		 // assume all integers are prime.
		primes[0] = primes[1] = false; // we know 0 and 1 are not prime.
		for (int i = 2; i < 100001; i++) {
			// if the number is prime,
			// then go through all its multiples and make their values false.
			if (primes[i]) {
				v.push_back(i);
				for (int j = 2; i * j < 100001; j++) {
					primes[i * j] = false;
				}
			}
		}
	}

	int main(){

		int test_cases = 0, l, r;

		int lowest_prime_fac[100001];

		fillSieve();

		int sum[100001];
		for (int i = 2; i < 100001; i++) {
			int j = 2;
			for (int j2 = 0; j2 < v.size(); j2++) {
				j = v[j2];
				if (j == i)
					break;

				if (i % j == 0) {
					lowest_prime_fac[i] = j;
					break;
				}
				j++;
			}
			sum[i] = (lowest_prime_fac[i] + sum[i - 1]) % 1000000007;
		}

		// System.out.println(Arrays.toString(lowest_prime_fac));

        cin>>test_cases;
		for (int i = 0; i < test_cases; i++) {
			cin>>l>>r;

			cout<<(sum[r] - sum[l - 1])<<endl;
		}
	}




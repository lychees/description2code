/*
#########################################
#        Syed Omar Ali                  #
#        Aligarh Muslim University      #
#        III Year                       #
#########################################
*/
#include<bits/stdc++.h>

using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;

#define rep(n) for(ll i=0; i<(n); i++)
#define wl(n) while(n--)
#define mem(x,val) memset((x),(val),sizeof(x));
#define vl vector<ll>
#define vb vector<bool>
#define vvl vector<vl >
#define vvb vector<vb >
#define all(x) (x.begin(),x.end())
#define sz(x) ((ll)x.size())
#define pb push_back
#define em(x) (!x.empty())
#define MAX INT_MAX*INT_MAX
#define MIN INT_MIN*INT_MIN
#define MOD 1000000007
#define pr pair<ll,ll>
#define mp make_pair
#define F first
#define S second
#define sl(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
#define t() ll tst,test=1; sl(tst); while(tst--)

template<class T1> void deb(T1 e1) {
    cout << e1 << endl;
}

template<class T1,class T2> void deb(T1 e1, T2 e2) {
    cout << e1 << " " << e2 << endl;
}
vector<ll> knowledge;
vector<list<ll> > adjList;
vector<bool> visited;
priority_queue<ll,vector<ll> > q,empty;
void DFS(ll u);
int main(){
    ll N,M;
    sl(N);sl(M);
    ll no;
    list<ll> blank;
    for(ll i=0;i<N;i++){
        sl(no);
        knowledge.pb(no);
        adjList.pb(blank);
        visited.pb(false);
    }
    ll u,v;
    wl(M){
        sl(u);
        sl(v);
        u--;v--;
        adjList[u].pb(v);
        adjList[v].pb(u);
    }
    ll mul = 1;
    for(ll i=0;i<N;i++){
        if(!visited[i]){
            q=empty;
            DFS(i);
            ll top = q.top();
            ll counter = 0;
            while(!q.empty() && q.top()==top){
                counter++;
                q.pop();
            }
            mul = ((mul%MOD)*(counter%MOD))%MOD;
        }
    }
    cout << mul << endl;
    return 0;
}
void DFS(ll u){
    visited[u] = true;
    q.push(knowledge[u]);
    for(list<ll> :: iterator i=adjList[u].begin();i!=adjList[u].end();i++){
        ll v = (*i);
        if(!visited[v]){
            DFS(v);
        }
    }
}

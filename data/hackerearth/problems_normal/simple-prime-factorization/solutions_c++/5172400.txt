#include <bits/stdc++.h>
 
using namespace std;
 
bool debug = false;
const int MAXN = 1e6;
bool is_prime[MAXN + 1];
vector <int> prime;
 
void sieve() {
	fill(is_prime + 2, is_prime + MAXN + 1, true);
	for (int i = 2; i * i <= MAXN; ++i) {
		if (is_prime[i] == true) {
			for (int j = i * i; j <= MAXN; j += i) {
				is_prime[j] = false;
			}
		}
	}
	for (int i = 2; i <= MAXN; i++) {
		if (is_prime[i] == true) {
			prime.push_back(i);
		}
	}
}
 
map <int, int> prime_fac(int n) {
	map <int, int> fac;
	fac[2] = 0;
	if (is_prime[n]) {
		return fac;
	} 
	for (int i = 0; i < prime.size() && prime[i] <= n; i++) {
		while (n % prime[i] == 0) {
			n /= prime[i];
			fac[prime[i]]++;
		}
	}
	return fac;
}
 
int main() {
	sieve();
	int tt;
	scanf("%d", &tt);
	for (int tc = 1; tc <= tt; tc++) {
		int n;
		scanf("%d", &n);
		auto fac = prime_fac(n);
		for (auto it = fac.begin(); it != fac.end(); ++it) {
			if (it != fac.begin()) {
				printf("*");
			} 
			printf("%d^%d", it->first, it->second);
		}
		printf("\n");
	}
	return 0;
}
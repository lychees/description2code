#include <bits/stdc++.h>
using namespace std;

bool visited[11]={false};
bool all_visited()
{
	for(int i=1;i<11;i++)
	{
		if(visited[i]==false)
		return false;
	}
	return true;
}

int main()
{
   vector<pair<int,int> > v;
   vector<pair<int,int> >v_state(11);
   for(int i=1;i<11;i++)
   {
   	   v_state[i].first=(i+3<=10?i+3:(i+3)%10);
   	   v_state[i].second=(i+7<=10?i+7:(i+7)%10);
   }
   int area[10];
   for(int i=0;i<10;i++)
   {
   	  scanf("%d",&area[i]);
   	  v.push_back(make_pair(area[i],i+1));
   }
   
   sort(v.begin(),v.end());
   
   vector<int> V;
   int s_indx=v[0].second;
   
   V.push_back(area[s_indx-1]);
   visited[s_indx]=true;
   
   int t_indx,rot=0;
   int x=v_state[s_indx].first;
   int y=v_state[s_indx].second;
   
   if(area[x-1]>area[y-1])
   {
   	//visited[y]=true;
   	V.push_back(area[y-1]);
   	t_indx=y;
   	rot=1;
   }
   else
   {
   	 t_indx=x;   
   	 V.push_back(area[x-1]);
   	 //visited[x]=true;
   }
   int cntr=7;
   while(!all_visited()&&cntr>0)
   {
   	        if(rot==0)	
   	    	{
   	    	   t_indx=(t_indx+3<=10?t_indx+3:(t_indx+3)%10);
   	    	   visited[t_indx]=true;
   	    	   if(area[t_indx-1]>area[y-1])
   	    	   {
   	    	   	  V.push_back(area[y-1]);
   	    	   	  cntr--;
   	    	   	  visited[y]=true;
   	    	   	  rot=1;
   	    	   	  x=t_indx;
   	    	   	  t_indx=y;
   	    	   }
   	    	   else
   	    	   {
   	    	   	  V.push_back(area[t_indx-1]);
   	    	   	  cntr--;
   	    	   	  int z=(t_indx<=3?t_indx+3:(t_indx+3)%10);
   	    	   	  visited[z]=true;
   	    	   }
   	        }
   	        else
   	        {
   	           t_indx=(t_indx+7<=10?t_indx+7:(t_indx+7)%10);
   	           visited[t_indx]=true;
   	           if(area[t_indx-1]>area[x-1])
   	           {
   	           	  V.push_back(area[x-1]);
   	           	  cntr--;
   	           	  visited[x]=true;
   	           	  rot=0;
   	           	  y=t_indx;
   	           	  t_indx=x;
   	           }
   	           else
   	           {
   	           	  V.push_back(area[t_indx-1]);
   	           	  cntr--;
   	           	  int z=(t_indx+7<=10?t_indx+7:(t_indx+7)%10);
   	           	  visited[z]=true;
   	           }
   	        }
   }
   for(int j=0;j<V.size();j++)cout<<V[j]<<" ";
   cout<<endl;
   
   
    return 0;
}

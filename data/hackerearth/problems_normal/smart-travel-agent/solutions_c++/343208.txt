// A C / C++ program for Dijkstra's single source shortest path algorithm.
// The program is for adjacency matrix representation of the graph
 
#include<bits/stdc++.h>
 using namespace std;
// Number of vertices in the graph
int V;


int min(int a,int b)
{
	if(a>b)
		return b;
	else
		return a;	
}
 
// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[])
{
   // Initialize min value
   int min = INT_MAX, min_index;
 
   for (int v = 0; v < V; v++)
     if (sptSet[v] == false && dist[v] <= min)
         min = dist[v], min_index = v;
 
   return min_index;
}
 
// A utility function to print the constructed distance array
int printSolution(int dist[], int n)
{
   printf("Vertex   Distance from Source\n");
   for (int i = 0; i < V; i++)
      printf("%d \t\t %d\n", i, dist[i]);
}
 
// Funtion that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void dijkstra(int graph[101][101], int src,int d,int p)
{
	
	stack<int> st;
     int dist[101];     // The output array.  dist[i] will hold the shortest
                      // distance from src to i
 
     bool sptSet[101]; // sptSet[i] will true if vertex i is included in shortest
                     // path tree or shortest distance from src to i is finalized
 	int t[101];
 	for(int i=1;i<=V;i++)
 		t[i]=src;
     // Initialize all distances as INFINITE and stpSet[] as false
     for (int i = 1; i <= V; i++)
        dist[i] = graph[src][i], sptSet[i] = false;
 
     // Distance of source vertex from itself is always 0
     dist[src] = 0;
     sptSet[src]=true;
 
     // Find shortest path for all vertices
     int max,v;
     for(int i=1;i<=V;i++)
     {
     	max=INT_MIN;
     	for(int w=1;w<=V;w++)
     	{
     		if(!sptSet[w] && dist[w]>max)
     		{
     			v=w;
     			max=dist[w];
     		}
     	}
     	sptSet[v]=true;
     	for(int w=1;w<=V;w++)
     	{
     		if(!sptSet[w])
     			if(min(max,graph[v][w])>dist[w])
     			{
     				
     				dist[w]=min(max,graph[v][w]);
     				t[w]=v;
     			}
     			if(min(max,graph[v][w])==dist[w]  &&  t[w]>v)
     			{
     				dist[w]=min(max,graph[v][w]);
     				t[w]=v;
     			}
     	}
     }
     
     
     for(int i=d;i!=src;)
     {
     	st.push(i);
     	i=t[i];
     }
     st.push(src);
     
     
     while(!st.empty())
     {
     	cout<<st.top()<<" ";
     	st.pop();
     }
     
     
     if(p%(dist[d]-1)==0)
		cout<<endl<<p/(dist[d]-1);
	else
		cout<<endl<<p/(dist[d]-1)+1	 ;    
     
     
     
     
     
     
     
     
     
     
     
     
     
     /*
     for (int count = 0; count < V-1; count++)
     {
       // Pick the minimum distance vertex from the set of vertices not
       // yet processed. u is always equal to src in first iteration.
       int u = minDistance(dist, sptSet);
 
       // Mark the picked vertex as processed
       sptSet[u] = true;
 
       // Update dist value of the adjacent vertices of the picked vertex.
       for (int v = 0; v < V; v++)
 
         // Update dist[v] only if is not in sptSet, there is an edge from 
         // u to v, and total weight of path from src to  v through u is 
         // smaller than current value of dist[v]
         if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX 
                                       && dist[u]+graph[u][v] < dist[v])
            dist[v] = dist[u] + graph[u][v];
     }
 */
     // print the constructed distance array
     //printSolution(dist, V);
}
 
// driver program to test above function
int main()
{
	int R,a,b,c,s,d,t;
	int graph[101][101];
	for(int i=0;i<=100;i++)
		for(int j=0;j<=100;j++)
			graph[i][j]=0;
	
	
	cin>>V>>R;
	
	for(int i=0;i<R;i++)
	{
		cin>>a>>b>>c;
		graph[a][b]=c;
		
	}
	
	cin>>s>>d>>t;
   /* Let us create the example graph discussed above */
   /*int graph[V][V] = {{0, 4, 0, 0, 0, 0, 0, 8, 0},
                      {4, 0, 8, 0, 0, 0, 0, 11, 0},
                      {0, 8, 0, 7, 0, 4, 0, 0, 2},
                      {0, 0, 7, 0, 9, 14, 0, 0, 0},
                      {0, 0, 0, 9, 0, 10, 0, 0, 0},
                      {0, 0, 4, 0, 10, 0, 2, 0, 0},
                      {0, 0, 0, 14, 0, 2, 0, 1, 6},
                      {8, 11, 0, 0, 0, 0, 1, 0, 7},
                      {0, 0, 2, 0, 0, 0, 6, 7, 0}
                     };
 */
    dijkstra(graph,s,d,t);
 
    return 0;
}

#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<iomanip>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<climits>
#include<cmath>
#include<cctype>


#define pb push_back
#define mp make_pair
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define ren(i,a,b) for(int i=a;i>=b;i--)
#define ff first
#define ss second
#define pll pair<long long int,long long int>
#define pii pair<int,int>
#define vll vector<long long int>  
#define vii vector<int>
#define gi(n) scanf("%d",&n)
#define gll(n) scanf("%lld",&n)
#define gstr(n) scanf("%s",n)
#define gl(n) cin >> n
#define oi(n) printf("%d",n)
#define oll(n) printf("%lld",n)
#define ostr(n) printf("%s",n)
#define ol(n) cout << n
#define os cout<<" "
#define on cout<<"\n"
#define o2(a,b) cout<<a<<" "<<b
#define all(n) n.begin(),n.end()
#define present(s,x) (s.find(x) != s.end()) 
#define cpresent(s,x) (find(all(s),x) != s.end()) 
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
using namespace std;
 
typedef unsigned long long int ull;
typedef long long int ll;
typedef vector<vector<ll> > mat;

int n,m;
ll a[200005],mod=1e9+7,f[200005];


struct node
{
	ll a[2];int size=0;
}tree[6000005],x1;

node cmb(node a,node b)
{
	int off=a.size;
	node r;
	r.size=a.size+b.size;
	if(off>0)
	{
	r.a[0]=(a.a[0]+f[off]*b.a[1]+f[off-1]*b.a[0])%mod;
	r.a[1]=(a.a[1]+f[off+1]*b.a[1]+f[off]*b.a[0])%mod;
    }
	return r;
}

void build(int lo,int hi,int i)
{
  if(lo==hi)
  {
  	tree[i].a[1]=tree[i].a[0]=a[lo];
  	tree[i].size=1;
  	return;
  }	
  int mid=(lo+hi)/2;
  build(lo,mid,2*i);
  build(mid+1,hi,2*i+1);
  tree[i]=cmb(tree[2*i],tree[2*i+1]);
}

node query(int left,int right,int l,int r,int i)
{
	 if(left>=l&&right<=r)
	 {
		return tree[i];
	 }
	 int mid=(left+right)/2;
	
	 node t1,t2;
	 if(r<=mid)
	 {
	   return  query(left,mid,l,r,2*i);
     }
	 if(l>mid)
	 {
	  return query(mid+1,right,l,r,2*i+1);
     }
	 t2=query(mid+1,right,mid+1,r,2*i+1);
	 t1=query(left,mid,l,mid,2*i);
  
 	 node ans;
 	 ans=cmb(t1,t2);
 	 
     return ans;
}

void update(int left,int right,int pos,int d,int i)
{
	if(left==right)
	{
	 tree[i].a[0]=tree[i].a[1]=a[left];
	 tree[i].size=1;
	 return;
	}

	int mid=(left+right)/2;
	if(pos<=mid)
	update(left,mid,pos,d,2*i);
	else
	update(mid+1,right,pos,d,2*i+1);
	
	tree[i]=cmb(tree[2*i],tree[2*i+1]);
}

int main()
{ios_base::sync_with_stdio(false);
cin>>n>>m>>mod;
f[0]=0,f[1]=1;
x1.a[0]=x1.a[1]=x1.size=0;
rep(i,0,n-1)cin>>a[i];
rep(i,2,200004)
f[i]=(f[i-1]+f[i-2])%mod;
build(0,n-1,1);
while(m--)
{
	int c,l,r;
	cin>>c>>l>>r;
	if(c==1)
	{
		l--;
		a[l]=r;
		update(0,n-1,l,a[l],1);	
	}
	else
	{
		l--;r--;
		ol(query(0,n-1,l,r,1).a[0]);on;
	}
}
return 0;
}
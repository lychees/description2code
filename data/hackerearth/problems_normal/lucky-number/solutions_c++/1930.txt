#include <queue>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;

bool isLucky[10];
int x;

int dist[1100000], pre[1100000];
int a[1100000];

/*
	Original - Chamka
	Edited by - LMO and KHONGOR (SMCS)
*/
#define DIGIT 1100000
typedef struct INT
{
	char* a;
	char sign;
	int digit;
	INT()
	{
		sign=0;
		digit=0;
		a = new char[DIGIT];
	}
};
int max(int x,int y) {return (x>y)?x:y;}
int min(int x,int y) {return (x<y)?x:y;}
INT convert(long long val)
{
	INT b;
	if (val<0) b.sign=1,val=-val;
	if (val==0) { b.a[b.digit++]=0; return b; }
	while(val)
	{
		b.a[b.digit++]=val%10;
		val/=10;
	}
	return b;
}
INT add(const INT b1,const INT b2){//only plus
  INT b;
  b.sign=0;
  b.digit=max(b1.digit,b2.digit);
  int i,d=0,dmax=min(b1.digit,b2.digit);
  for (i=0;i<dmax;i++){
    b.a[i]=b1.a[i]+b2.a[i]+d;
    d=b.a[i]/10;
    b.a[i]%=10;
  }
  if (dmax==b1.digit){
    for (i=dmax;i<b2.digit;i++){
      b.a[i]=b2.a[i]+d;
      d=b.a[i]/10;
      b.a[i]%=10;
    }
  }
  if (dmax==b2.digit){
    for (i=dmax;i<b1.digit;i++){
      b.a[i]=b1.a[i]+d;
      d=b.a[i]/10;
      b.a[i]%=10;
    }
  }
  if (d){
    b.a[b.digit]=d;
    b.digit++;
  }
  return b;
}
INT sub(const INT b1,const INT b2){//only sub and b1>b2
  INT b;
  b.sign=0;
  b.digit=b1.digit;
  int i,d=0;
  for (i=0;i<b2.digit;i++){
    b.a[i]=b1.a[i]-b2.a[i]-d;
    if (b.a[i]<0){
      b.a[i]+=10;  d=1;
    }
    else d=0;
  }
  for (i=b2.digit;i<b1.digit;i++){
    b.a[i]=b1.a[i]-d;
    if (b.a[i]<0){
      b.a[i]+=10;  d=1;
    }
    else d=0;
  }
  for (i=b.digit-1;i>=0;i--)
    if (b.a[i]!=0) break;
  b.digit=i+1;
  return b;
}

INT b;
void mod(INT b1, INT b2){ //doesn't matter

  if ((b2.digit==1&&b2.a [0]==0)||b2.digit==0){
    fprintf(stderr,"Division by 0!\n");
    b.sign=2;
    return;
  }
  if (b2.digit>b1.digit){
    b.sign=0;
    b.digit=0;
    return;
  }
  b.sign=(b1.sign+b2.sign)%2;
  int i,j,nonstop=1,res=0,d;
  for (i=0;i<b1.digit/2;i++)
    swap(b1.a[i],b1.a[b1.digit-i-1]);
  for (i=0;i<b2.digit/2;i++)
    swap(b2.a[i],b2.a[b2.digit-i-1]);
  b.digit=b1.digit-b2.digit+1;
  for (i=0;i<b.digit;i++)
    b.a[i]=0;
  for (i=0;i<=b1.digit-b2.digit&&nonstop;i++){
    while (b1.a[i]&&nonstop){
      res=0;
      for (j=0;j<b2.digit;j++)
        if (b2.a[j]>b1.a[i+j]) {res=1; break;}
        else if (b2.a[j]<b1.a[i+j]) {res=-1; break;}
      if (res==0){
        for (j=0;j<b2.digit;j++)
          b1.a[i+j]=0;
        b.a[i]++;
      }
      else if (res==1){
        if (i+1+b2.digit>b1.digit){
          nonstop=0;
          break;
        }
        else{
          d=0;
          for (j=b2.digit-1;j>=0;j--){
            b1.a[i+j+1]-=(b2.a[j]+d);
            if (b1.a[i+j+1]<0){
              b1.a[i+j+1]+=10;
              d=1;
            }
            else d=0;
          }
          if (d) b1.a[i]--;
          b.a[i+1]++;
        }
      }
      else{
        d=0;
        for (j=b2.digit-1;j>=0;j--){
          b1.a[i+j]-=(b2.a[j]+d);
          if (b1.a[i+j]<0){
            d=1;
            b1.a[i+j]+=10;
          }
          else d=0;
        }
        b.a[i]++;
      }
    }//while
  }//for
  for (i=0;i<b.digit/2;i++)
    swap(b.a[i],b.a[b.digit-1-i]);
  for (i=0;i<b1.digit/2;i++)
    swap(b1.a[i],b1.a[b1.digit-i-1]);
  for (i=0;i<b2.digit/2;i++)
    swap(b2.a[i],b2.a[b2.digit-i-1]);
  for (i=b.digit-1;i>=0;i--)
    if (b.a[i]) break;
  b.digit=i+1;
}
bool operator ==(const INT b1,const INT b2){
  int i;
  if (b1.sign!=b2.sign) return false;
  if (b1.digit!=b2.digit) return false;
  else{
    for (i=b1.digit-1;i>=0;i--)
    if (b1.a[i]!=b2.a[i]) return false;
    return true;
  }
}
bool operator >(const INT b1,const INT b2){
  int i;
  if (b1.sign!=b2.sign){
    if (b1.sign==0) return true;
    else return false;
  }
  if (b1.digit<b2.digit){
    if (b1.sign==0) return false;
    else return true;
  }
  else if (b1.digit>b2.digit){
    if (b1.sign==0) return true;
    else return false;
  }
  else{
    for (i=b1.digit-1;i>=0;i--)
    if (b1.a[i]<b2.a[i]){
      if (b1.sign==0) return false;
      else return true;
    }
    else if (b1.a[i]>b2.a[i]){
      if (b1.sign==0) return true;
      else return false;
    }
    return false;
  }
}
bool operator <=(const INT b1,const INT b2){
  return !(b1>b2);
}
bool operator <(const INT b1,const INT b2){
  return (b2>b1);
}
bool operator >=(const INT b1,const INT b2){
  return !(b2>b1);
}
bool isGreater(const INT b1,const INT b2){
  int i;
  if (b1.digit!=b2.digit){
    return (b1.digit>b2.digit);
  }
  for (i=b1.digit-1;i>=0;i--)
  if (b1.a[i]!=b2.a[i]){
    return (b1.a[i]>b2.a[i]);
  }
  return false;
}
INT operator +(const INT b1,const INT b2){
  INT b;
  if (b1.sign==b2.sign){
    b=add(b1,b2);
    b.sign=b1.sign;
  }
  else{
    if (isGreater(b1,b2)){
      b=sub(b1,b2);
      b.sign=b1.sign;
    }
    else{
      b=sub(b2,b1);
      b.sign=b2.sign;
    }
    if ((b.digit==1&&b.a[0]==0)||b.digit<1){
      b.digit=1;
      b.sign=0;
      b.a[0]=0;
    }
  }
  return b;
}
INT operator -(INT b1,INT b2){
  INT b;
  char s1;
  if (b1.sign!=b2.sign){
    b=add(b1,b2);
    b.sign=b1.sign;
  }
  else{
    if (isGreater(b1,b2)){
      b=sub(b1,b2);
      b.sign=b1.sign;
    }
    else{
      b=sub(b2,b1);
      b.sign=1-b1.sign;
    }
    if ((b.digit==1&&b.a[0]==0)||b.digit<1){
      b.digit=1;
      b.sign=0;
      b.a[0]=0;
    }
  }
  return b;
}
INT convert(INT &b, const char *buf){
  int i,l;
  l=strlen(buf)-1;
  if (buf [0]=='-') {b.sign=1; b.digit=l;}
  else {b.sign=0; b.digit=l+1;}
  for (i=l;i>=b.sign;i--)
    b.a[l-i]=buf[i]-'0';
  for (l=b.digit-1;l>=0;l--)
    if (b.a[l]) break;
  b.digit=l+1;
}
void show(const INT b, char *s=NULL){
  int i;
  if (b.sign&&b.digit) printf("-");
  if (b.digit==0) printf("0");
  for (i=b.digit-1;i>=0;i--)
    printf("%d",b.a[i]);
  if (s) printf("%s",s);
}
void shown(const INT b){
  show(b,"\n");
}


char buf[1100000];

INT bb;

void findLeast() {
	memset(dist, -1, sizeof(dist));

	queue<int> q;
	for (int i = 1; i < 10; i++)
		if (isLucky[i]) {
			int k = (1 << i) * 1000 + i % x;
			q.push(k);
			dist[k] = 1;
			pre[k] = -1;
			a[k] = i;
		}

	int fullMask = 0;
	for (int i = 0; i < 10; i++)
		if (isLucky[i]) fullMask |= 1 << i;

	while (q.size()) {
		int cur = q.front(), next;
		int mask = cur / 1000;
		int rem = cur - mask * 1000;
		q.pop();

		if (rem == 0 && mask == fullMask) break;

		for (int i = 0; i < 10; i++)
			if (isLucky[i]) {
				next = mask * 1000 + (rem * 10 + i) % x;
				if (!(mask & 1 << i)) next += 1000 * (1 << i);

				if (dist[next] == -1) {
					dist[next] = dist[cur] + 1;
					pre[next] = cur;
					a[next] = i;
					q.push(next);
				}
			}
	}

	if (dist[fullMask * 1000] == -1) {
		printf("Impossible\n");
		return;
	}

	int k = fullMask * 1000, m = dist[fullMask * 1000];
	buf[m] = '\0';
	while (k != -1) {
		buf[--m] = a[k] + 48;
		k = pre[k];
	}

	convert(bb, buf);
	show(bb, " = ");
	printf("%d * ", x);
	mod(bb, convert(x));
	shown(b);
}

int main() {
	int T;
	char c;
	scanf("%d", &T);
	while (T--) {
		scanf("%c", &c);
		memset(isLucky, false, sizeof(isLucky));

		while (true) {
			int d;
			scanf("%d%c", &d, &c);
			isLucky[d] = true;
			if (c == '\n') break;
		}

		scanf("%d", &x);
		findLeast();
	}
	return 0;
}

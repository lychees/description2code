#include <iostream>
using namespace std;
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <cmath>
#include <set>
#include <ctime>
#include <stack>
#include <list>
#include <cassert>
#include <iomanip>
#include <deque>
#include <sstream>
#include <fstream>
typedef pair<int,int> pii;
#define rep(i,j,n) for(i=j;i<n;i++)
#define pb push_back
#define ff first
#define ss second 
#define lli long long int
#define get getchar

inline int scan() {
    int n=0;
    char p=get();
    while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=get();
    if(p=='-') p=get();
    while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=get(); }
    return n;
}
const int maxn = 1e6 + 100;
long long ans[maxn];
class trie {
	public:
	trie* next[26];
	long long freq;
	trie () {
		for (int i = 0; i < 26; i++)
			next[i] = NULL;
		freq = 0;
	}
};

void trie_add(string s, trie* root) {
	trie *cur = root;
	for (int i = 0; i < s.length(); i++) {
		cur->freq++;
		if (cur->next[s[i]-'a'] == NULL) {
			trie* tmp = new trie();
			cur->next[s[i]-'a'] = tmp;
		}
		ans[i] += cur->freq  - cur->next[s[i]-'a']->freq - 1;
		cur = cur->next[s[i]-'a'];
	}
	cur->freq++;
	ans[s.length()] += cur->freq-1;
	
}
int main() {
        
    ios::sync_with_stdio(false);
    
    //clock_t start = std::clock();
    //freopen ("inp.txt","r",stdin);
    //freopen ("out.txt","w",stdout);
    //cout << "Time: " << (std::clock() - start) / (double)(CLOCKS_PER_SEC / 1000) << " ms" << std::endl;

    int n,q,i;
    int len = 0;
    cin >> n;

    trie *root = new trie;

    rep(i,0,n) {
    	string s;
    	cin >> s;
    	len = (len > s.length())?len:s.length();
    	trie_add(s,root);
    }
    
    rep(i,0,len + 1) {
    	cout << ans[i] << " ";
    }

	delete root;

    return 0;
        
}
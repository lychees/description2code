#include<iostream>
#include<vector>
#include<string.h>
#include<stdio.h>
#include<climits>
#include<map>
#include<math.h>
#include<set>
#include<algorithm>
#define LL long long int
#define P(N) printf("%d\n",N);
#define S(N) scanf("%d",&N);
#define SL(N) scanf("%lld",&N);
#define pb push_back
#define mp make_pair
#define pnl printf("\n");
#define FOR(i,a,b) for (i=a;i<=b;i++)
#define mem(a,val) memset(a,val,sizeof(a))
using namespace std;
int gcd(int a, int b){ int temp; while(b>0)	{ temp= b; b=a%b; a=temp;}	return a;}
int ar[100010];
int ST[400010];
int buildTree(int ss,int se, int node)
{
    if(ss==se)
    {
            ST[node]=ar[ss];return ST[node];
    }
    int mid= ss+(se-ss)/2;
    ST[node]= buildTree(ss,mid,2*node+1)+buildTree(mid+1,se,2*node+2);
    return ST[node];
}
int query(int ss, int se, int qs, int qe,int node)
{
    if(qs<=ss && se<=qe)
        return ST[node];
    if(se<qs || ss>qe)return 0;
    int mid= ss+(se-ss)/2;
    return query(ss,mid,qs,qe,2*node+1)+query(mid+1,se, qs,qe,2*node+2);
}
void update (int ss ,int se, int i, int diff, int node)
{
    if(i<ss || i>se)return;
    ST[node]= ST[node]+diff;
    if(se!=ss)
    {
        int mid =ss+(se-ss)/2;
        update(ss,mid,i,diff,2*node+1);
        update(mid+1,se,i,diff,2*node+2);
    }
}
int main()
{
       #ifndef ONLINE_JUDGE
       //     freopen("C:\\Users\\hp pc\\Desktop\\input.txt", "r", stdin);
      #endif
      int i,j,t,x,N,Q,type,L,R;
      S(N);
      for(int i=0;i<N;i++)
          {
                S(x)ar[x]++;
          }
          N=100001;
       buildTree(0,N-1,0);
       S(Q)
       while(Q--)
       {
            scanf("%d",&type);
            if(type==0)
            {
                scanf("%d %d",&L,&R);
                int ans= query(0,N-1,L,R,0);
                printf("%d\n",ans);
            }
            else if(type==1)
            {
                scanf("%d",&x);
                update(0,N-1,x,-1,0);
            }
            else
            {
                scanf("%d",&x);
                update(0,N-1,x,1,0);
            }
       }
return 0;
}



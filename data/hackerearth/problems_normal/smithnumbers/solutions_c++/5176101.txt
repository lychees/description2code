#include <bits/stdc++.h>

using namespace std;

const int N = 1e7 + 10;
int sum_dig[N], cs[N];

void sieve_sd() {
	for (int i6 = 0; i6 < 10; i6++) {
		for (int i5 = 0; i5 < 10; i5++) {
			for (int i4 = 0; i4 < 10; i4++) {
				for (int i3 = 0; i3 < 10; i3++) {
					for (int i2 = 0; i2 < 10; i2++) {
						for (int i1 = 0; i1 < 10; i1++) {
							for (int i0 = 0; i0 < 10; i0++) {
								int num = i6 * 1e6 + i5 * 1e5 + i4 * 1e4 + i3 * 1e3 + i2 * 1e2 + i1 * 10 + i0;
								int sum = i6 + i5 + i4 + i3 + i2 + i1 + i0;
								sum_dig[num] = sum;
							}
						}
					}
				}
			}
		}
	}
}

const int MAXN = 1e7 + 5;
bool is_prime[MAXN + 1];
int sum_dig_factors[MAXN + 1];

void sieve() {
	sieve_sd();
	fill(is_prime + 2, is_prime + MAXN + 1, true);
	for (int i = 2; 2 * i <= MAXN; ++i) {
		if (is_prime[i] == true) {
			for (int j = 2 * i; j <= MAXN; j += i) {
				is_prime[j] = false;
				int n = j;
				while (n != 0 && n % i == 0) {
					n /= i;
					sum_dig_factors[j] += sum_dig[i];
				}
			}
		}
	}
	for (int i = 1; i <= MAXN; i++) {
		if (is_prime[i] || sum_dig[i] == sum_dig_factors[i]) {
			cs[i + 1] = cs[i] + 1;
		} else {
			cs[i + 1] = cs[i];
		}
	}
}

int main() {
	sieve();
	int tt;
	scanf("%d", &tt);
	for (int tc = 1; tc <= tt; tc++) {
		int x, y;
		scanf("%d %d", &x, &y);
		printf("%d\n", cs[y + 1] - cs[x]);
	}
	return 0;
}
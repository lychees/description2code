#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
#include <bitset>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define y1 __y1
#define sqr(x) ((x) * (x))
 
typedef long long li;
typedef long double ld;
typedef pair<li, li> pt;
 
const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-9;
const ld pi = ld(3.1415926535897932384626433832795);
 
inline bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}
 
inline int myrand()
{
    return (rand() ^ (rand() << 15));
}
 
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
 
const int N = 2e5 + 555;

int n;
int a[N];

inline void gen()
{
    return;
}
 
inline bool read()
{
	if(scanf("%d", &n) != 1)
		return false;

	forn1(i, n)
	{
		assert(scanf("%d", &a[i]) == 1);
	}

    return true;
}

int t[4 * N];

void build(int idx, int l, int r)
{
	if(l == r)
	{
		t[idx] = a[l];
		return;
	}

	int mid = (l + r) / 2;

	build(2 * idx + 1, l, mid);
	build(2 * idx + 2, mid + 1, r);

	t[idx] = max(t[2 * idx + 1], t[2 * idx + 2]);
	return;
}

int get(int idx, int l, int r, int L, int R)
{
	if(l == L && r == R)
	{
		return t[idx];
	}

	int mid = (l + r) / 2;
	int res = 0;

	if(L <= mid)
		res = max(res, get(2 * idx + 1, l, mid, L, min(R, mid)));

	if(R > mid)
		res = max(res, get(2 * idx + 2, mid + 1, r, max(mid + 1, L), R));

	return res;
}

inline void solve()
{
	build(0, 0, n + 1);
	vector<int> ans;
	
	for(int i = 1; i <= n; i++)
	{
		int mx1 = get(0, 0, n + 1, 0, i - 1);
		int mx2 = get(0, 0, n + 1, i + 1, n + 1);
		if(mx1 > a[i] && mx2 > a[i])
			continue;
		ans.pb(i);
	}

	forn(i, sz(ans))
		printf("%d ", ans[i]);
	printf("\n");
    return;
}
 
int main()
{
#ifdef _DEBUG
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
 
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;
 
    srand(int(time(NULL)));

	int T = 1;
	//assert(scanf("%d", &T) == 1);
 
	forn(i, T)
	{
		assert(read());
		solve();
	}
 
#ifdef _DEBUG
    cerr << "TIME == " << clock() << " ms" << endl;
#endif
    return 0;
} 
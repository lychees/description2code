#include<bits/stdc++.h>
#define gc getchar//_unlocked
using namespace std;
long long  tree1[1000010];
int a[200010],b[200010];

inline int inp(){
	 int n=0,sign=1;
	char c;
	c=gc();
	while(c<'0' || c>'9'){
		if(c=='-')	sign=-sign;
		c=gc();
	}
	while(c>='0' && c<='9'){
		n=(n<<3)+(n<<1)+c-'0';
		c=gc();
	}
	n=n*sign;
	return n;
}
inline void update(long long int tree[],int p, int v,int N){
    for (; p <= N; p += p&(-p))
        tree[p] += v;}


inline long long query(long long tree[],int b){
	long long sum=0;
	for(; b > 0; b -= b&(-b))
        sum += tree[b];
    return sum;
}
inline long long qri(int b)
{    return query(tree1, b);}

int check(long long no){
	for(int i=2;i*i<=no;i++)
		if(no%i==0)
			return 0;
	return 1;
}
int main(){
	
	int n;
	n=inp();
	for(int i=1;i<=n;i++){
		a[i]=inp();
	}
	for(int i=1;i<=n;i++){
		b[i]=inp();
	}
	long long sum=0;
	for(int i=1;i<=n;i++){
		sum+=(i-qri(a[i])-1);
		update(tree1,b[i],1,n);
		
	}
	//cout<<sum<<endl;
	if(check(sum)){
		cout<<"MAGIC INVERSION"<<endl;
		
	}
	else
		cout<<"SIMPLE INVERSION"<<endl;
	
	return 0;
}

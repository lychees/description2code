#include<iostream>
#include<cmath>
#include<map>

using namespace std;
typedef long long ll;

/*ll gcd(ll a, ll b) {
    ll GCD;
    if(a == 0 || b == 0) return 1;
    while (b != 0)
    {
        GCD = b;
        b = a % b;
        a = GCD;
    }
    if(GCD == 0) return 1;
    return GCD;
}*/

void primeFactors(int n, map<ll, ll> &m)
{
    while (n%2 == 0)
    {
        m[2]++;
        n /= 2;
    }
    for (int i = 3; i <= sqrt(n); i = i+2)
    {
        while (n%i == 0)
        {
            m[i]++;
            n = n/i;
        }
    }

    if (n > 2)
        m[n]++;
}

int main() {
    int z;
    cin>>z;
    while(z--) {
        map <ll, ll> m1, m2;
        map <ll, ll> :: iterator it;
        ll a, b, c, d;
        cin>>a>>b>>c>>d;
        primeFactors(a, m1);
        primeFactors(c, m2);
        int flag = 1;
        for(it = m2.begin(); it != m2.end(); it++) {
        	if(m1[it -> first] == 0) {flag = 0; break;}
            if((it -> second) * d > m1[it -> first] * b) {flag = 0; break;}
        }
        if(d == 0) cout<<"Divisible"<<endl;
        else if(flag == 0) cout<<"Not divisible"<<endl;
        else cout<<"Divisible"<<endl;
    }
    return 0;
}


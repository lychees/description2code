#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>

#define intl long long int

using namespace std;

class tt {
public:
        intl id;
        intl new_ps;
        intl diff_ps;
};

class st {
public:
        intl id;
        intl new_ps;
};

bool operator< (const tt& t1, const tt& t2) {
        return t1.diff_ps<t2.diff_ps;
}
bool operator> (const tt& t1, const tt& t2) {
        return t1.diff_ps>t2.diff_ps;
}
bool operator< (const st& t1, const st& t2) {
        return t1.id<t2.id;
}
bool operator> (const st& t1, const st& t2) {
        return t1.id>t2.id;
}

int main() {
        priority_queue<tt, vector<tt>, less<vector<tt>::value_type> > pq;
        intl N, tid, czs, p, l, c, s;
        cin >> N;
        for(intl i=0;i<N;i++) {
                tt t1;
                cin >> tid;
                cin >> czs;
                cin >> p;
                cin >> l;
                cin >> c;
                cin >> s;
                t1.id = tid;
                t1.new_ps = p*50+l*5+c*10+s*20;
                t1.diff_ps = t1.new_ps - czs;
                //cout << "push tid = " << t1.id << "," << t1.diff_ps << endl;
                pq.push(t1);
        }

        intl i=0, max=pq.top().diff_ps;
        vector<st> tempv;
        st t2;
        t2.id = pq.top().id;
//      cout << "top_id.. = " << t2.id << endl;
        t2.new_ps = pq.top().new_ps;
        tempv.push_back(t2);
        pq.pop();
        while(!pq.empty() && (i<4)) {
                if(pq.top().diff_ps<max) {
                        sort(tempv.begin(), tempv.end(), greater<st>());
                        for(vector<st>::iterator it=tempv.begin(); it!=tempv.end(); it++) {
                                cout << it->id << " " << it->new_ps << endl;
                        }
                        tempv.erase(tempv.begin(), tempv.end());
                        max = pq.top().diff_ps;
                        //cout << "top_id = " << pq.top().id << endl;
                        cout << pq.top().id << " " << pq.top().new_ps << endl;
                        pq.pop();
                        i++;
                } else {
                        while(pq.top().diff_ps == max) {
                                st t;
                                t.id = pq.top().id;
                                //cout << "top_id_ = " << t.id << endl;
                                t.new_ps = pq.top().new_ps;
                                tempv.push_back(t);
                                pq.pop();
                                i++;
                        }
                }
        }
        if(tempv.size()>0) {
                sort(tempv.begin(), tempv.end(), greater<st>());
                for(vector<st>::iterator it=tempv.begin(); it!=tempv.end(); it++) {
                        if(it>tempv.begin()+4)
                                break;
                         cout << it->id << " " << it->new_ps << endl;
                }
        }
        return 0;
}

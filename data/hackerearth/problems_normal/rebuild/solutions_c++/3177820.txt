/*
USER: aditya
ALGO: MST using disjoint set/union find ds
COMPLEXITY: O(ELogE + ELogV)
*/
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define mod 1000000007
#define f first
#define s second
#define si(x)   scanf("%d",&x);
#define CLR(x)  memset(x,0,sizeof(x))
#define RESET(x) memset(x,-1,sizeof(x))
#define pi pair<int,int>
#define pb pusha_back
#define mp make_pair

const int V=100005;
const int E=100005;

struct Edge {
    int u, v, weight;
};

bool comp(Edge a, Edge b)   {
    if(a.weight==b.weight)
    {
        if(a.u==b.u)
            return a.v > b.v;
        return a.u > b.u;
    }
    return a.weight < b.weight;
}

void init( int Arr[ ], int num[ ], int N)
{
    for(int i = 0; i<N; i++)
    {
        Arr[ i ] = i ;
        num[ i ] = 1;
    }
}

int root(int Arr[ ], int i)
{
    while(Arr[ i ] != i)
    {
        Arr[ i ] = Arr[ Arr[ i ] ] ;
        i = Arr[ i ];
    }
    return i;
}

void join(int Arr[ ],int num[ ],int A,int B)
{
    int root_A = root(Arr,A);
    int root_B = root(Arr,B);
    if(num[root_A] < num[root_B ])
    {
        Arr[ root_A ] = Arr[root_B];
        num[root_B] += num[root_A];
    }
    else
    {
        Arr[ root_B ] = Arr[root_A];
        num[root_A] += num[root_B];
    }

}

bool find(int Arr[ ],int A,int B)
{
    if( root(Arr,A)==root(Arr,B) )
        return true;
    else
        return false;
}

int A[V],len[V],deg[V];
Edge adj[E],mst[V];

void solve()
{
    int v,e,i,j,x,y;
    ll cost;
    scanf("%d%d",&v,&e);
    for(i=0;i<v+2;i++)
        deg[i]=0;
    for(i=0; i<e; i++)
    {
        scanf("%d %d %d", &x, &y, &adj[i].weight);
        x--;y--;
        adj[i].u=min(x,y);
        adj[i].v=max(x,y);
    }
    sort(adj,adj+e,comp);
    init(A,len,v);
    for(i=j=0,cost=0LL; i<e && j<v-1; i++)
    {
        x=adj[i].u; y=adj[i].v;
        if(!find(A,x,y))
        {
            join(A,len,x,y);
            mst[j++]=adj[i];
            cost+=(ll)adj[i].weight;
        }
    }
    printf("%lld\n",cost);
    for(i=0; i<j; i++)
    {
        deg[ mst[i].u ]++;
        deg[ mst[i].v ]++;
    }
    for(i=0;i<v;i++)
        printf("%d ", deg[i]);
    printf("\n");
}

int main()
{
    int t;
    si(t);
    while(t--)
    {
        solve();
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

#define repu(i, begin, end) for (__typeof(begin) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define repe(i, begin, end) for (__typeof(begin) i = (begin); i != (end) + 1 - 2 * ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 101;
string s;
int m;
ll dp[N], sum[N];

int cvt(int ss, int ee) {
	int ans = 0;
	for (int i = ss; i <= ee; ++i) {
		ans = 10 * ans + (s[i] - '0');
	}
	return ans;
}

int f(int ss, int ee) {
	if (ee - ss + 1 >= 3) return sum[100];
	int x = cvt(ss, ee);
	return sum[x];
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest;
    cin >> ntest;
    while (ntest--) {
    	cin >> s;
    	cin >> m;
    	int len = s.length();
    	dp[0] = 1;
    	repu(i, 1, N) dp[i] = (dp[i - 1] * i) % m;
    	sum[0] = 0;
    	repu(i, 1, N) sum[i] = (sum[i - 1] + dp[i]) % m;
    	int ans = 0;
    	repu(i, 0, len) {
    		if (s[i] != '0') {
    			ans = (ans + f(i, i)) % m;
    		}
    		int ss = i - 1, ee = i + 1;
    		while (ss >= 0 && ee < len && s[ss] == s[ee]) {
    			if (s[ss] != '0') ans = (ans + f(ss, ee)) % m;
    			ss--; ee++;
    		}
    	}
    	repu(i, 0, len - 1) {
    		if (s[i] == s[i + 1]) {
    			if (s[i] != '0') ans = (ans + f(i, i + 1)) % m;
    			int ss = i - 1, ee = i + 2;
    			while (ss >= 0 && ee < len && s[ss] == s[ee]) {
    				if (s[ss] != '0') ans = (ans + f(ss, ee)) % m;
    				ss--; ee++;
    			}
    		}
    	}
    	printf("%d\n", ans);
    }
    return 0;
}

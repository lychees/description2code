#include <iostream>
#include <stack>
#include <vector>
#include <queue>
#include <stdio.h>
 
using namespace std;
 
int main()
{
    int t, n, m;
 
    cin >> t;
 
    while(t--)
    {
        cin >> n >> m;
 
        int arr[n][m], visited[n][m];
 
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                cin >> arr[i][j];
 
                visited[i][j]=-1;
            }
        }
 
        visited[0][0]=arr[0][0];
 
        queue <pair<int, int>> que;
 
        que.push(make_pair(0, 0));
 
        int i, j;
 
        while(!que.empty())
        {
            i=que.front().first;
 
            j=que.front().second;
 
            que.pop();
 
            if(i>0 && (visited[i-1][j]==-1 || visited[i-1][j]>visited[i][j]+arr[i-1][j]))
            {
                visited[i-1][j]=visited[i][j]+arr[i-1][j];
 
                que.push(make_pair(i-1, j));
            }
 
            if(j>0 && (visited[i][j-1]==-1 || visited[i][j-1]>visited[i][j]+arr[i][j-1]))
            {
                visited[i][j-1]=visited[i][j]+arr[i][j-1];
 
                que.push(make_pair(i, j-1));
            }
 
            if(i<n-1 && (visited[i+1][j]==-1 || visited[i+1][j]>visited[i][j]+arr[i+1][j]))
            {
                visited[i+1][j]=visited[i][j]+arr[i+1][j];
 
                que.push(make_pair(i+1, j));
            }
 
            if(j<m-1 && (visited[i][j+1]==-1 || visited[i][j+1]>visited[i][j]+arr[i][j+1]))
            {
                visited[i][j+1]=visited[i][j]+arr[i][j+1];
 
                que.push(make_pair(i, j+1));
            }
        }
 
        int ci, cj, en;
 
        cin >> ci >> cj >> en;
 
        ci--;
 
        cj--;
 
        if(visited[ci][cj]>en)
        {
            cout << "NO" << endl;
        }
        else
        {
            cout << "YES" << endl << en-visited[ci][cj] << endl;
        }
    }
 
    return 0;
}
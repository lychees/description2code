def dfs(grid, cell, ver_i, ver_j, n, m, d):
    x = ver_i+1
    y = ver_j
    val = grid[ver_i][ver_j]
    if ((x >= 0 and x < n) and (y >= 0 and y < m)):
        if (cell[x][y] == 0 and abs(val-grid[x][y]) <= d):
            cell[x][y] = 1
            dfs(grid, cell, x, y, n, m, d)
    x = ver_i-1
    y = ver_j
    if ((x >= 0 and x < n) and (y >= 0 and y < m)):
        if (cell[x][y] == 0 and abs(val-grid[x][y]) <= d):
            cell[x][y] = 1
            dfs(grid, cell, x, y, n, m, d)
    x = ver_i
    y = ver_j-1
    if ((x >= 0 and x < n) and (y >= 0 and y < m)):
        if (cell[x][y] == 0 and abs(val-grid[x][y]) <= d):
            cell[x][y] = 1
            dfs(grid, cell, x, y, n, m, d)
    x = ver_i
    y = ver_j+1
    if ((x >= 0 and x < n) and (y >= 0 and y < m)):
        if (cell[x][y] == 0 and abs(val-grid[x][y]) <= d):
            cell[x][y] = 1
            dfs(grid, cell, x, y, n, m, d)


n, m, q = map(int, raw_input().split())
grid = []
for _ in xrange(n):
    temp = [int(i) for i in raw_input().split()]
    grid += [temp]
for _ in xrange(q):
    x, y, d = map(int, raw_input().split())
    cell = []
    for i in xrange(n):
        cell += [[0]*m]
    cell[x-1][y-1] = 1
    dfs(grid, cell, x-1, y-1, n, m, d)
    xy = 0
    for i in cell:
        xy += i.count(1)
    print xy

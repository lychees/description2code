#ifndef PRAGMA_COMMENT_LINKER
#pragma comment(linker, "/STACK:199999999")
#endif

#define  _CRT_SECURE_NO_WARNINGS
//#define  NDEBUG

#pragma warning(error : 4700)
#pragma warning(error : 4715)
#pragma warning(error : 4716)

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <chrono>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <functional>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define all(v)                  v.begin(), v.end()
#define db(x)                   cout << #x << " = " << (x) << "\n"
#define fend(x)                 ((x) & ((x)+1)) - 1
#define fenu(x)                 (x) | ((x)+1)
#define forn(i, n)              for (int i = 0; i < (int)n; ++i)
#define forr(i, _s_, _f_)		for (int i=_s_; i < (int)_f_; ++i)
#define ft                      first
#define len(s)                  s.length()
#define max_value(type)         std::numeric_limits<type>::max()
#define min_value(type)         std::numeric_limits<type>::min()
#define mp                      std::make_pair
#define pob                     pop_back
#define pof                     pop_front
#define popcnt                  __popcnt
#define popcnt64                __popcnt64
#define pub                     push_back
#define puf                     push_front
#define sc                      second

#ifdef _WIN32
#define LL "%I64d"
#else
#define LL "%lld"
#endif

typedef double                  dbl;
typedef long double             ldbl;
typedef long long               ll;
typedef unsigned long long      ull;

const   long long               MILLER_RABIN = 3215031751;
const   long double             EPS = 1e-20;
const   long double             PI = 3.14159265358979323846;

inline int lg2(ll n) { int h = 0; while ((1ll << h) < n) ++h; return h; }

struct config_io { config_io() { cin.tie(nullptr); ios_base::sync_with_stdio(false); } } cnf_io;
struct config_rand { config_rand() { srand(chrono::duration_cast<chrono::nanoseconds>(chrono::high_resolution_clock::now().time_since_epoch()).count()); } } cnf_rand;

namespace std
{
	template<>
	struct hash < pair<int, int> > {
		size_t operator()(const pair<int, int> &x) const {
			return (x.first * 31 + x.second) % ((int)1e9 + 7);
		}
	};
}

inline void scan(int &x) { scanf("%d", &x); }
inline void scan(long long &x) { scanf(LL, &x); }
inline void scan(double &x) { scanf("%lf", &x); }
inline void scan(long double &x) { scanf("%Lf", &x); }
inline void scan(int &x, int &y) { scanf("%d%d", &x, &y); }
inline void scan(int &x, int &y, int &z) { scanf("%d%d%d", &x, &y, &z); }
inline void print(const int x) { printf("%d\n", x); }
inline void print(const long long x) { printf(LL"\n", x); }
inline void print(const double x) { printf("%lf\n", x); }
inline void print(const long double x) { printf("%Lf\n", x); }
inline void print(const int x, const int y) { printf("%d %d\n", x, y); }
inline void print(const int x, const int y, const int z) { printf("%d %d %d\n", x, y, z); }

inline void tobin(long long x) { cout << bitset<64>(x) << endl; }
template<class T> inline void trace(T collection) { for (auto elem : collection) { cout << elem << " "; } cout << endl; }

const int ML = 1e6 + 10;
char s[ML];

void solve() {
	int n;
	scan(n);
	getchar();
	gets(s);
	int cnt1 = 0;
	for (int i = 0; i < 2 * n; ++i) {
		if (i % 2 == 0) {
			if (s[i] != 'B') cnt1++;
		}
		else {
			if (s[i] != 'G') cnt1++;
		}
	}
	int cnt2 = 0;
	for (int i = 0; i < 2 * n; ++i) {
		if (i % 2 == 0) {
			if (s[i] != 'G') cnt2++;
		}
		else {
			if (s[i] != 'B') cnt2++;
		}
	}
	print(min(cnt1, cnt2) / 2);
}

int main() {
#ifdef HOME
#define TASK "home"
	freopen(TASK".in", "r", stdin); freopen(TASK".out", "w", stdout);
#endif

	int tt;
	scan(tt);
	forn(i, tt) {
		solve();
	}

#ifdef HOME	
	cout << "\n\nTime: " << clock() / (double)CLOCKS_PER_SEC << endl;
#endif
	return 0;
}
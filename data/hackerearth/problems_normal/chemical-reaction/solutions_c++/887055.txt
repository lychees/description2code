#include <bits/stdc++.h>
using namespace std;
int A[500005];
char S[500005][11];
int n;
int tree[1000005];
int LIM;
void update(int idx, int val)
{
	while ( idx <= LIM+1 ) {
		tree[idx] += val;
		idx += (idx & (-idx));
	}
	return;
}
int query(int idx)
{
	int res = 0;
	while ( idx > 0 ) {
		res += tree[idx];
		idx -= (idx & (-idx));
	}
	return res;
}
inline void fi(int *a)
{
 register char c=0;
 while (c<33) c=getchar_unlocked();
 *a=0;
 int tmp = 0;
 while (c>33)
 {
     if ( c == 45 ) tmp = 1;
     else *a=*a*10+c-'0';
     c=getchar_unlocked();
 }
 if ( tmp == 1 ) *a = 0-(*a);
}
	
int main()
{
	int t,x,val;
	fi(&t);
	while ( t-- ) {
		fi(&n);
		LIM = (int)log2(n);
		LIM++;
		LIM = 1<<LIM;
		val = -1;
		for ( int i = 1; i <= n; i++ ) scanf("%s", S[i]);
		for ( int i = 1; i <= n; i++ ) fi(&A[i]);
		for ( int i = 0; i <= LIM; i++ ) tree[i] = 0;
		for ( int i = 1; i <= LIM; i++ ) update(i,1);
		for ( int i = 1; i <= n; i++ ) {
			if ( i == n ) x = 1;
			else fi(&x);
			int mask = LIM,L=0,ans;
			while ( mask != 0 && L < n ) {
				int M = (L+mask);
				if ( x == tree[M] ) ans = M;
				else if ( x > tree[M] ) {
					L = M;
					x -= tree[M];
				}
				mask >>= 1;
			}
			val = max(val, A[ans]);
			printf("%s %d\n", S[ans], val);
			update(ans,-1);
		}
	}
	return 0;
}
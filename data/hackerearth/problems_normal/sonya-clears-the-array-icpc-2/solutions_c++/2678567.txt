#include <bits/stdc++.h>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define MOD 1000000007
#define ll long long int
#define MAXINT 1000000000000LL
#define CLEAR(a) memset((a),0,sizeof(a))

using namespace std;

int sieve[10000007],nextprime[10000007],p[10000007];
vector<int> primes;
int A[1002];
ll DP[1003][1003];

int nearest(int q) {
	int l,r,m,ans;
	l=0;
	r=(int)primes.size()-1;
	while(l<=r) {
		m=(l+r)>>1;
		if(primes[m]>=q)
			{ans=m;r=m-1;}
		else
			l=m+1;
	}
	return ans;
}

void getP(void) {
	int i,j,x;
	sieve[1]=1;
	for(i=2;i*i<=10000000;i++) {
		if(sieve[i])	continue;
		for(j=i;j*i<=10000000;j++) {
			sieve[j*i]=1;
		}
	}
	for(i=2;i<=10000000;i++) {
		if(sieve[i]==0) {
			p[i]=primes.size();
			primes.pb(i);
		}
	}
	x=0;
	for(i=9000000;i>=1;i--) {
		if(sieve[i]==0) {
			x=i;
		}
		nextprime[i]=p[x];
	}
}

ll work(int x,int y) {
	int p1,p2;
	ll ans;
	p1=nextprime[x];
	p2=nextprime[y];
	if(p1==p2) {
		ans=primes[p1]+primes[p2+1];
	}
	else if(p1<p2) {
		ans=primes[p2]+primes[p2-1];
	}
	else {
		ans=primes[p1+1]+primes[p1];
	}
	return ans-x-y;
}

void solve(void) {
	int n,p1,p2,i,j,l,k;
	ll ans,q;
	getP();
	cin>>n;
	for(i=1;i<=n;i++)
		cin>>A[i];
	for(i=1;i<n;i++)
		DP[i][i+1]=work(A[i],A[i+1]);
	for(l=4;l<=n;l+=2) {
		for(i=1;i+l-1<=n;i++) {
			j=i+l-1;
			DP[i][j]=MAXINT;
			for(k=i+1;k<=j;k+=2) {
				q=work(A[i],A[k]);
				if(k<j)
					q+=DP[k+1][j];
				if(k>i+1)
					q+=DP[i+1][k-1];
				DP[i][j]=min(DP[i][j],q);
			} 
		}
	}
	cout<<DP[1][n]+n/2<<endl;
}

int main () {
	int i,test;
	test=1;
	for(i=1;i<=test;i++)
		solve();
	return 0;
}
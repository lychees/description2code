#include <set>
#include <iostream>
#include <algorithm>
#include <map>
#define mid(l,r)((l+r)/2)
using namespace std;

typedef long long ll;

ll t, a, b;

ll stree[4000000];

ll result[1000005];

// false if prime
bool flag[1000005] = {false};
set<ll> primes;

// factors[i] is the smallest prime apart from 1 which divides i
ll factors[1000005];

ll build( ll l, ll r, ll id) {
	if( l == r )
		stree[id] = result[l];
	else
		stree[id] = build( l, mid(l,r), 2*id+1) + build( mid(l,r)+1, r, 2*id+2);
	return stree[id];
}

ll query( ll id, ll l, ll r) {
	if( a <= l && b >= r )
		return stree[id];
	else if( a > r || b < l )
		return 0;
	else
		return query( 2*id+1, l, mid(l,r)) + query( 2*id+2, mid(l,r)+1, r);
}

int main()
{
    cin >> t;

	for( ll i = 2; i <= 1000000; i++ ) {
		if( !flag[i] )
			primes.insert( i );
		
		ll x = i+i;
		while( x <= 1000000 ) {
			flag[x] = true;
			x += i;
		}
	}
	
	for( ll i = 2; i <= 1000000; i++ ) {
		if( !flag[i] ) {
			factors[i] = i;
			continue;
		}
		
		for( ll x : primes ) {
			if( !(i%x) ) {
				factors[i] = x;
				break;
			}
		}
	}

	result[1] = 0;

	for( ll i = 2; i <= 1000000; i++ ) {
		if( factors[i] == i )
			result[i] = 1;
		else
			result[i] = result[ i / factors[i] ] + 1;
	}

	build( 1, 1000000, 0);

	while( t-- ) {
    	scanf("%lld%lld",&a,&b);
    	ll x = query( 0, 1, 1000000);
    	printf("%lld\n",x);
    }
    
    return 0;
}

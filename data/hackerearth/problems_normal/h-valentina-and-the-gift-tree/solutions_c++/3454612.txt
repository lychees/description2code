#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) (((n) >> (i)) & 1)
#define bitcount(n) __builtin_popcount(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
#define EPS 1e-9
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = 2 * acos((ld) 0);
ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
template<class T> void setmin(T& a, T val) {if (a > val) a = val;}
template<class T> void setmax(T& a, T val) {if (a < val) a = val;}
void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}
int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}

struct Node {
	ll sum, lmax, rmax, dmax;
	
	Node() {
		sum = 0;
		lmax = rmax = dmax = -LINF;
	}
};

Node merge(Node n1, Node n2) {
	if (n1.dmax == -LINF) return n2;
	if (n2.dmax == -LINF) return n1;
	Node res;
	res.sum = n1.sum + n2.sum;
	setmax(res.lmax, n1.lmax);
	setmax(res.lmax, n1.sum + n2.lmax);
	setmax(res.rmax, n2.rmax);
	setmax(res.rmax, n2.sum + n1.rmax);
	setmax(res.dmax, n1.dmax);
	setmax(res.dmax, n2.dmax);
	setmax(res.dmax, n1.rmax + n2.lmax);
	setmax(res.dmax, res.lmax);
	setmax(res.dmax, res.rmax);
	return res;
}

const int maxn = 100010;
const int maxe = 20;
int n, q;
vi adj[maxn];
int a[maxn];
int p[maxn][maxe];
Node node[maxn][maxe];
int lev[maxn];
int tin[maxn];
int tou[maxn];
int tms;

void dfs(int u, int dad = -1) {
	tin[u] = tms++;
	FOR(i, 1, maxe) {
		p[u][i] = p[p[u][i - 1]][i - 1];
		node[u][i] = merge(node[u][i - 1], node[p[u][i - 1]][i - 1]);
	}
	FOR(i, 0, sz(adj[u])) {
		int v = adj[u][i];
		if (v != dad) {
			p[v][0] = u;
			lev[v] = lev[u] + 1;
			node[v][0].sum = node[v][0].lmax = node[v][0].rmax = node[v][0].dmax = a[u];
			dfs(v, u);
		}
	}
	tou[u] = tms++;
}

int isparent(int u, int v) {
	return tin[u] <= tin[v] && tou[u] >= tou[v];
}

ll query(int u, int v) {
	if (u == v) return a[u];
	if (lev[u] < lev[v]) swap(u, v);
	Node r1, r2, r3, r4;
	r3.sum = r3.lmax = r3.rmax = r3.dmax = a[u];
	r4.sum = r4.lmax = r4.rmax = r4.dmax = a[v];
	FORd(i, maxe, 0) {
		if (lev[p[u][i]] >= lev[v]) {
			r1 = merge(r1, node[u][i]);
			u = p[u][i];
		}
	}
	FORd(i, maxe, 0) {
		if (p[u][i] != p[v][i]) {
			r1 = merge(r1, node[u][i]);
			r2 = merge(r2, node[v][i]);
			u = p[u][i];
			v = p[v][i];
		}
	}
	if (!isparent(v, u)) {
		r1 = merge(r1, node[u][0]);
	}
	else {
		r4.dmax = -LINF;
	}
	swap(r2.lmax, r2.rmax);
	return merge(merge(r3, r1), merge(r2, r4)).dmax;
}

void solve() {
	scanf("%d", &n);
	FOR(i, 0, n - 1) {
		int u, v; scanf("%d%d", &u, &v); u--; v--;
		adj[u].pb(v); adj[v].pb(u);
	}
	FOR(i, 0, n) scanf("%d", a + i);
	dfs(0);
	scanf("%d", &q);
	while (q--) {
		int u, v; scanf("%d%d", &u, &v); u--; v--;
		printf("%lld\n", query(u, v));
	}
}

int main() {
//	ios_base::sync_with_stdio(0); cin.tie(0);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
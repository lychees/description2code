/*    ironstark    */
#include<bits/stdc++.h>
#define pii pair<long long,long long>
#define fi first
#define se second
#define mp make_pair
#define vpi vector< pii >
#define pb push_back
#define ll long long int
#define mod 1000000007
#define gcd(a,b) __gcd(a,b)
#define sf(n) scanf("%lld",&(n))
#define pf(n) printf("%lld\n",(n))
#define setbits(n) __builtin_popcount((n))
#define pq priority_queue
using namespace std;
vector<pii> v[1005];
bool visited[1005];
int cost[1005][1005];
void ini()
{
	for(int i=0;i<1005;i++)
		v[i].clear();
	memset(visited,0,sizeof(visited));
	memset(cost,0,sizeof(cost));
}
void dfs(int node,int ch)
{
	visited[node]=true;
	for(int i=0;i<v[node].size();i++)
	{
		int to=v[node][i].fi;
		int cost=v[node][i].se;
		if(!visited[to] && cost<ch)
			dfs(to,ch);
	}
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    ini();
		int n,k;
		cin>>n>>k;
		for(int i=0;i<k;i++)
		{
			int a,b,c;
			cin>>a>>b>>c;
			v[a].pb(mp(b,c));
			v[b].pb(mp(a,c));
			cost[a][b]=c;
			cost[b][a]=c;
		}
		int q;
		cin>>q;
		int ans=0;
		for(int i=1;i<=q;i++)
		{
			memset(visited,0,sizeof(visited));
			int a,b;
			cin>>a>>b;
			dfs(a,cost[a][b]);
			if(visited[b]==false)
				ans++;
		}
		int a1=__gcd(ans,q);
		cout<<(ans/a1)<<"/"<<(q/a1)<<"\n";
	}
}

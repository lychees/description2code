import sys

def solve():
    n, S, M, P = map(int, sys.stdin.readline().split())
    heights = map(int, sys.stdin.readline().split())

    val_map = dict()
    max_arr = [0]
    for ind in range(len(heights)-1, -1, -1):
        if len(val_map) == 0:
            val_map[heights[ind]] = 0
            max_arr.append(0)
        else:
            max_val = 0
            for key in val_map:
                val_map[key] += convert(heights[ind], key, S, M, P)
                if val_map[key] > max_val:
                    max_val = val_map[key]
            val_map[heights[ind]] = findMax(max_arr, heights, ind, S, M, P)
            if val_map[heights[ind]] > max_val:
                max_val = val_map[heights[ind]]
            max_arr.append(max_val)
    return max_arr[len(max_arr) - 1]

def convert(cand_val, target_val, S, M, P):
    if cand_val < target_val:
        return S - P * (target_val - cand_val)
    elif cand_val > target_val:
        return S - M * (cand_val - target_val)
    else:
        return S

def findMax(max_arr, heights, ind, S, M, P):
    max_ind = len(max_arr) - 1
    cur_max = max_arr[max_ind]
    temp_ind = ind + 1
    max_ind -= 1
    cur_val = 0
    while max_ind > -1:
        cur_val += convert(heights[temp_ind], heights[ind], S, M, P) 
        temp_val = cur_val + max_arr[max_ind]
        max_ind -= 1
        temp_ind += 1
        if temp_val > cur_max:
            cur_max = temp_val
    return cur_max

print solve()

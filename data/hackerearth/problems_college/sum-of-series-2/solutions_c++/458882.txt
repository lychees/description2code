#include<bits/stdc++.h>
using namespace std;
#define F(i,p,n) for(i=p;i<n;i++)
#define Ss(x) scanf("%s",x)
#define S(x) scanf("%lld",&x)
#define P(x) printf("%lld\n",x)
#define Ps(x) printf("%lld ",x)
#define LL long long int
const LL mod=1000000007,siz=2000005;
LL fact[siz],ifact[siz],fin[siz/2],sv[siz/2],prime[siz/2],k;
LL _pow(LL x,LL y)
{
    if(!y)
        return 1;
    if(y==1)
        return x;
    if(y==2)
        return (x*x)%mod;
    if(y&1)
        return (x*_pow(x,y-1))%mod;
    else
        return (_pow(_pow(x,y/2),2))%mod;
}
void sieve()
{
    LL i,j,m,n;
    k=1;
    prime[k++]=2;
    memset(sv,0,sizeof(sv));
    m=sqrt(siz/2);
    //printf("sqrt of siz/2=%lld\n",m);
    for(i=3;i<=m;i+=2)
    {
        if(!sv[i])
            for(j=i*i;j<siz/2;j+=2*i)
            sv[j]=1;
    }
    for(i=3;i<siz/2;i+=2)
    if(!sv[i])
        prime[k++]=i;
    //printf("k=%lld prime[1]=%lld\n",k,prime[1]);
}
void pre()
{
    LL i;
    fact[0]=1;
    F(i,1,siz)
    fact[i]=(i*fact[i-1])%mod;
    ifact[siz-1]=_pow(fact[siz-1],mod-2);
    ifact[0]=1;
    for(i=siz-2;i>0;i--)
    {
        ifact[i]=((i+1)*ifact[i+1])%mod;
    }
}
void result()
{
    LL i,j,m,n,ans;
    F(i,1,k)
    {
        m=prime[i];
        ans=((((fact[2*m-2]*ifact[m-1])%mod)*ifact[m-1])%mod);
        fin[i]=((((ans*m)%mod)*m)%mod+fin[i-1])%mod;
    }
}
LL bs(LL n)
{
    LL p,q,m;
    p=1; q=k-1;
    while(p!=q)
    {
        m=(p+q)/2;
        if(prime[m]<n)
            p=m+1;
        else
            q=m;
    }
    if(prime[p]>n)
        return p-1;
    else
        return p;
}
main()
{
    LL i,j,m,n,t,p,q;
    pre();
    sieve();
    result();
    //printf("k=%lld\n",k);
   // printf("ifact[1]=%lld\n",ifact[1]);
    //printf("fin[1]=%lld fin[2]=%lld fin[3]=%lld fin[4]=%lld\n",fin[1],fin[2],fin[3],fin[4]);
    S(t);
    while(t--)
    {
        S(n);
        m=bs(n);
        //printf("m=%lld\n",m);
        P(fin[m]);
    }
}

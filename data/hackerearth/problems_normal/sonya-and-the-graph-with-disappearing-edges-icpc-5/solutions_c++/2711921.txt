#include<iostream>
#include<stdio.h>
#include<queue>
#include<vector>
#define maxm 100001
#define maxn 1000000009
using namespace std;

vector < pair<int,int> >v[maxm];
int dist[maxm];
bool visited[maxm];
int N;

long int a[maxm];

void bfs()
{
    //visited[n]=true;
    queue <int> q;
    q.push(1);
    int i;
    while(!q.empty())
    {
    	int temp;
    	temp = q.front();
    	q.pop();
        for(i=0;i<v[temp].size();i++)
        {
        	int edge=v[temp][i].second;
        	if(a[edge]>dist[temp])
        	{
        		if(dist[v[temp][i].first] > dist[temp]+1)
        		{   
        			dist[v[temp][i].first]=dist[temp]+1;
        	    	q.push(v[temp][i].first);
        		}
        	} 
        }
    }
       
}
int main()
{

    long int m,k,i;
    scanf("%d%ld%ld",&N,&m,&k);
    for(i=0;i<=N;i++)
        visited[i]=false;
    for(i=0;i<maxm;i++)
        a[i]=maxn;
    for(i=0;i<m;i++)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        v[a].push_back(make_pair(b,i+1));
        v[b].push_back(make_pair(a,i+1));

    }
    for(i=0;i<k;i++)
    {
        long int t;
        int e;
        scanf("%ld%d",&t,&e);
        a[e]=t;
    }
    for(i=0;i<=N+1;i++)
     dist[i]=maxn;
    dist[1]=0;
    bfs();
    
    if(dist[N]==maxn)
     printf("-1\n");
    else
     printf("%d\n",dist[N]);
    return 0;
}

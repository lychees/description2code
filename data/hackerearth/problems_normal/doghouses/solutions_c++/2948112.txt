#include <bits/stdc++.h>

#define mp make_pair
#define MATH_DEFINES
#define pb push_back
#define pf push_front
#define F first
#define S second
#define left lef
#define right rig
#define MS0(a) memset((a),0,sizeof(a))
#define MS1(a) memset((a),-1,sizeof(a))
#define fname ""
#define ed cout << endl
#define sz(a) (int)((a).size())

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int N = (int)1e3 + 123;
const int INF = (int)1e9 + 123;
const double eps = 1e-6;
int n, a[N], l[N], r[N], left, right;
int now, ans;
int cnt[N], s[N][N], sum[N][N];
void init()
{
	for (int i = 1; i <= 1000; i ++)
	{
		for (int j = 0; j <= 1000; j ++)
		{
			sum[i][j] = (i ? sum[i - 1][j] : 0) + (j ? sum[i][j - 1] : 0) - (i + j > 1 ? sum[i - 1][j - 1] : 0) + s[i][j];
//			cout << i << " " << j << " " << s[i][j] << " " << sum[i][j] << " " << (i ? sum[i - 1][j] : 0) << " " << (j ? sum[i][j - 1] : 0) << " " << (i && j ? sum[i - 1][j - 1] : 0) << "\n";
//			cout << sum[i][j] << " ";
		}                              
//		ed;
	}
}
int get(int lx, int ly, int rx, int ry)
{
	if (lx > rx || ly > ry)
	{
		return 0;
	}
//	cout << lx << " " << ly << " " << rx << " " << ry << " " << sum[rx][ry] << " " << (ly ? sum[rx][ly - 1] : 0) << " " << (ly ? sum[rx][ly - 1] : 0);
	return sum[rx][ry] - (ly ? sum[rx][ly - 1] : 0) - (lx ? sum[lx - 1][ry] : 0) + (lx && ly ? sum[lx - 1][ly - 1] : 0);
}
int main()
{
	ios_base::sync_with_stdio(0);cin.tie(NULL);
//	freopen(fname".in","r",stdin);
//	freopen(fname".out","w",stdout);
	cin >> n;
	for (int i = 1; i <= n;i ++)
	{
		cin >> a[i];
		s[i][a[i]] = 1;
		if (!l[a[i]])
		{
			l[a[i]] = i;
		}
		r[a[i]] = i;
		cnt[a[i]] ++;
	}
	init();
//	cout << sum[1000][1000] << "\n";
	for (int i = 0; i <= 1000;i ++)
	{
		for (int j = i; j <= 1000;j ++)
		{
			now = cnt[i];
			if (!l[i] || !r[i] || !l[j] || !r[j])
			{
				continue;
			}
			if (i != j)
			{
				now += cnt[j];
			}
			if (min(l[i], l[j]) > 1 && get(1, i, min(l[i], l[j]) - 1, j))
			{
				now ++;
			}
			if (r[i] != n && r[j] != n && get(max(r[i], r[j]) + 1, i, n, j))
			{
				now ++;
			}
//			cout << i << " " << j << " " << now << " " << l[i] << " " << l[j] << " " << r[i] << " " << r[j] << " " << get(1, i, min(l[i], l[j]) - 1, j) << " " << get(max(r[i], r[j]) + 1, i, n, j) << "\n";
			ans = max(ans, now);
		}
	}
	cout << ans;
 	return 0;
}
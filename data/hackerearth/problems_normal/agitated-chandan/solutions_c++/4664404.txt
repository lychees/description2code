#include <bits/stdc++.h>
using namespace std;
const int MAX=100000 +7;
struct node
{
	int i ;
	int d;
	
};
vector <node > G[MAX];
bool visited[MAX];
int dist[MAX];
int N;
int bfs ( int start )
{
  queue < int > q;
  
   for(int i = 1 ; i <= N; i++)
   {
   	
   	visited[i]  = 0;
   	dist[i] = 0;
   }
	
	q.push(start);
	visited[start] = 1;

    while ( !q.empty()){
    	
    	int te = q.front();
    	q.pop();
    	
    	for(int i = 0; i < (int) G[te].size(); i++)
    	{	int vertex = G[te][i].i ;
    		if(visited[vertex])continue;
    	      
    	      visited[vertex]  = 1;
    	      
    	     dist[G[te][i].i] =  G[te][i].d + dist[te];
    		
    		q.push(vertex);
    	}
    	
    	
    }
	
	
	
	return (max_element(dist+1 , dist+N+1)-dist);
	
	
}
int main()
{
    
    int T , a ,b , weight , temp;
    
    cin >> T;
    while ( T--)
    {
    	
      cin >> N;
      temp = N;
      for(int i = 1; i <=N; i++)
        G[i].clear();
      for(int i = 0; i < N-1; i++){	
      cin >> a >> b >> weight;	
        node t ;
        t.i = b;
        t.d = weight;
        G[a].push_back(t);
        t.i = a;
        G[b].push_back(t);
      }
      
      int start  = bfs (1);
      
	  int end = bfs(start);
	  
	   int finalans = dist[end];
	   int money = 0;
	   if (finalans>100)
			money = 100;
		if (finalans>1000)
			money = 1000;
		if (finalans>10000)
			money = 10000;
      cout <<money <<" "<<finalans << endl;
   
     
     	
    	
    	
    	
    }
   
    
    return 0;
}

#include <bits/stdc++.h>

using namespace std;

const int N = 100005;
int dp[N][105], sum[105][105];
int n, a[105];

set <int> ss;

int solve(int s, int id) {
  int& res = dp[s][id];
  
  if(res != -1) return res;
  res = 0;
  if(id == n - 1) {
    if(a[id] == s) {
      return res = 1;
    } else {
      return res = 0;
    }
  }
  
  if(id >= n) return res = 0;
  
  for(int i = id; i < n; ++i) {
    if(sum[id][i] == s) {
      res = max(res, 1 + solve(s, i + 1));
    } else {
      res = max(res, solve(s, i + 1));
    }
  }
  
  return res;
}

int main()
{
  scanf("%d", &n);
  
  for(int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
  }
  
  for(int i = 0; i < n; ++i) {
    for(int j = i; j < n; ++j) {
      if(i == j) {
        sum[i][j] = a[i];
      } else {
        sum[i][j] = sum[i][j - 1] + a[j];
      }
      ss.insert(sum[i][j]);
    }
  }
  
  memset(dp, -1, sizeof(dp));
  
  int mx = 0;
  for(int vv : ss) {
    int xx = solve(vv, 0);
    mx = max(mx, xx);
  }
  
  vector <int> res;
  
  for(int vv : ss) {
    int xx = solve(vv, 0);
    if(xx == mx) {
      res.push_back(vv);
    }
  }
  
  sort(res.begin(), res.end());
  
  int nn = res.size();
  
  printf("%d\n", mx);
  for(int i = 0; i < nn; ++i) {
    printf("%d%c", res[i], (i == nn - 1)?'\n':' ');
  }
  
  return(0);
}
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const long long mod1 = 1e6 + 3, mod2 = 1e9 + 7, base = 1e5 + 31;
int n, q;
int trstp = 1;

long long pw(long long x, long long y, long long mod)
{
	long long ans = 1;
	while(y > 0)
	{
		if(y % 2 == 1) ans = (ans * x) % mod;
		x = (x*x) % mod;
		y /= 2;
	}
	return ans;
}

long long bp[2][100005], ibp[2][100005], tree[4][262150];

long long query(int p, int root, int u, int v, int s = 0, int e = trstp - 1)
{
	if(v < s || e < u) return 0;
	if(u <= s && e <= v) return tree[p][root];
	int mid = (s + e)/2;
	return query(p, 2*root, u, v, s, mid) + query(p, 2*root + 1, u, v, mid + 1, e);
}

void update(int p, int i, char x, long long mod)
{
	tree[p][i + trstp] = ((x)*bp[p/2][i]) % mod;
	i += trstp;
	i /= 2;
	while(i > 0)
	{
		tree[p][i] = (tree[p][2*i] + tree[p][2*i + 1]) % mod;
		i /= 2;
	}
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	cin >> n >> q;
	while(trstp < n) trstp *= 2;

	bp[0][0] = ibp[0][0] = bp[1][0] = ibp[1][0] = 1;
	bp[0][1] = bp[1][1] = base;
	ibp[0][1] = pw(base, mod1 - 2, mod1);
	ibp[1][1] = pw(base, mod2 - 2, mod2);
	for(int i = 2; i <= n; i++)
	{
		bp[0][i] = (bp[0][1]*bp[0][i - 1]) % mod1;
		ibp[0][i] = (ibp[0][1]*ibp[0][i - 1]) % mod1;
		bp[1][i] = (bp[1][1]*bp[1][i - 1]) % mod2;
		ibp[1][i] = (ibp[1][1]*ibp[1][i - 1]) % mod2;
	}

	string s;
	cin >> s;

	for(int i = 0; i < n; i++)
	{
		tree[0][trstp + i] = ((s[i] - 'a')*bp[0][i]) % mod1;
		tree[1][trstp + i] = ((s[n - i - 1] - 'a')*bp[0][i]) % mod1;
		tree[2][trstp + i] = ((s[i] - 'a')*bp[1][i]) % mod2;
		tree[3][trstp + i] = ((s[n - i - 1] - 'a')*bp[1][i]) % mod2;
	}

	for(int i = trstp - 1; i > 0; i--)
	{
		tree[0][i] = (tree[0][2*i] + tree[0][2*i + 1]) % mod1;
		tree[1][i] = (tree[1][2*i] + tree[1][2*i + 1]) % mod1;
		tree[2][i] = (tree[2][2*i] + tree[2][2*i + 1]) % mod2;
		tree[3][i] = (tree[3][2*i] + tree[3][2*i + 1]) % mod2;
	}

	while(q--)
	{
		int t;
		cin >> t;
		if(t == 1)
		{
			int l, r;
			cin >> l >> r;
			l--; r--;
			long long h1 = (query(0, 1, l, r)*ibp[0][l]) % mod1;
			long long h2 = (query(1, 1, n - r - 1, n - l - 1)*ibp[0][n - r - 1]) % mod1;
			long long h3 = (query(2, 1, l, r)*ibp[1][l]) % mod2;
			long long h4 = (query(3, 1, n - r - 1, n - l - 1)*ibp[1][n - r - 1]) % mod2;
			if(h3 == h4 || (n > 99999 && h1 == h2)) cout << "Yes\n";
			else cout << "No\n";
		}
		else
		{
			int p;
			char x;
			cin >> p >> x;
			p--;
			update(0, p, x - 'a', mod1);
			update(1, n - p - 1, x - 'a', mod1);
			update(2, p, x - 'a', mod2);
			update(3, n - p - 1, x - 'a', mod2);
		}
	}

	return 0;
}
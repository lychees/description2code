#include <iostream>                                                             //kruskal algo for maximum spanning tree
#include<bits/stdc++.h>
using namespace std;
long n,m;
vector<pair<long,long> > adj[5100];
long vis[5200];
long long prim(long ini)
{
    priority_queue<pair<long,long> > pq;
    long long ans=0;
    long cost,a,b,i;
    pq.push(make_pair(0,ini));
    pair<long,long> pa1,pa2;
    while(!pq.empty())
    {
        pa1=pq.top();
        pq.pop();
        cost=pa1.first;
        a=pa1.second;
        if(vis[a]==true)
            continue;
        vis[a]=true;
        ans=ans+cost;
        for(i=0;i<adj[a].size();i++)
        {
            b=adj[a][i].second;
            if(vis[b]==false)
                pq.push(adj[a][i]);
        }
    }
    return ans;
}
int main()
{
    int te;
    long i,a,b,c;
    long long ans;
    pair<long,long> pa;
    scanf("%d",&te);
    while(te--)
    {
        scanf("%ld %ld",&n,&m);
        for(i=1;i<=n;i++)
        {
            vis[i]=false;
            adj[i].clear();
        }
        for(i=0;i<m;i++)
        {
            scanf("%ld %ld %ld",&a,&b,&c);
            pa=make_pair(c,b);
            adj[a].push_back(pa);
            pa=make_pair(c,a);// undirected graph
            adj[b].push_back(pa);
        }
        ans=prim(1);
        ans=ans;
        printf("%lld\n",ans);
    }
    return 0;
}

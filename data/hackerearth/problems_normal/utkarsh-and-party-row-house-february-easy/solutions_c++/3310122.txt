#include <bits/stdc++.h>
#define ll long long
using namespace std;
const int ma = 1e7+5;
ll tree[ma], tree2[ma];
ll a[ma];
void seg1(int b, int e, int node)
{
	if(b==e)
	{
		tree[node] =  a[b]*b;

	}
	else
	{
		seg1(b,(b+e)/2,node*2);
		seg1((b+e)/2+1,e,node*2+1);
		tree[node] = tree[node*2] + tree[node*2+1];

	}
}
ll query1(int node,int b, int e, int l, int r)
{
	if(l>e or r<b)
		return -1;
	if(b>=l and e<=r)
		return tree[node];
	ll p1 = query1(node*2,b,(b+e)/2,l,r);
	ll p2 = query1(node*2+1,(b+e)/2+1,e,l,r);
	if(p1==-1)
		return p2;
	else if(p2==-1)
		return p1;
	else
		return p1+p2;

}
void seg2(int b, int e, int node)
{
	if(b==e)
	{
		tree2[node] = a[b];
	}
	else
	{
		seg2(b,(b+e)/2,node*2);
		seg2((b+e)/2+1,e,node*2+1);

		tree2[node]= tree2[2*node]+tree2[node*2+1];
	}
}
ll query2(int node,int b,int e, int l,int r)
{
	if(l>e or r<b)
		return -1;
	if(b>=l and e<=r)
		return tree2[node];
	ll p1 = query2(node*2,b,(b+e)/2,l,r);
	ll p2 = query2(node*2+1,(b+e)/2+1,e,l,r);
	if(p1==-1)
		return p2;
	else if(p2==-1)
		return p1;
	else
		return p1+p2;
}
void update(int node, int b, int e, int k, int s)
{
	if(k<b or k>e)
		return;
	if(b==e and b==k)
	{
		a[b]=a[b]+s;
		tree[node] = a[b]*b;
		tree2[node] = a[b];
		return;
	}
	update(node*2,b,(b+e)/2,k,s);
	update(node*2+1,(b+e)/2+1,e,k,s);
	tree[node] = tree[node*2] + tree[node*2+1];
	tree2[node] = tree2[node*2] + tree2[node*2+1];
}
int main()
{
	//freopen("i.txt","r",stdin);
	//freopen("o.txt","w",stdout);
	ll n,q;
	scanf("%lld%lld",&n,&q);
	for(int i = 1; i <= n; ++i)
	{
		cin>>a[i];
	}
	seg1(1,n,1);
	seg2(1,n,1);
	ll x,s,k,l,r,ans;
	for (int i = 0; i < q; ++i)
	{
		scanf("%lld",&x);
		if(x==1)
		{

			scanf("%lld%lld%lld",&k,&l,&r);
			if(k<=l)
			{
				ans = query1(1,1,n,l,r) - query2(1,1,n,l,r)*k;
			}
			else if(k<=r)
			{
				ans = query1(1,1,n,k,r) - query2(1,1,n,k,r)*k + query2(1,1,n,l,k)*k - query1(1,1,n,l,k);
			}
			else
			{
				ans = query2(1,1,n,l,r)*k - query1(1,1,n,l,r);
			}
			printf("%lld\n",ans);

		}
		else
		{
			scanf("%lld%lld",&k,&s);
			update(1,1,n,k,s);
		}
	}
	return 0;
}
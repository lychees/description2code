#include <bits/stdc++.h>
#define ll long long
using namespace std;
string s;
int dpr[1010][1010],dpc[1010][1010];
char mat[1010][1010];
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int m,n;
	cin>>m>>n;
	int i,j,ans,r1,r2,j2;
	for(i=0;i<m;i++)
	{
		cin>>s;
		for(j=0;j<n;j++)
		{
			mat[i][j]=s.at(j);
		}
	}
	//Maximum fence possible row-wise from a cell
	for(i=0;i<m;i++)
	{
		ans=0;
		for(j=(n-1);j>=0;j--)
		{
			if(mat[i][j]=='x')
			ans=0;
			else
			ans++;
			dpr[i][j]=ans;
		}
	}
	//Maximum fence possible column-wise from a cell
	for(j=0;j<n;j++)
	{
		ans=0;
		for(i=(m-1);i>=0;i--)
		{
			if(mat[i][j]=='x')
			ans=0;
			else
			ans++;
			dpc[i][j]=ans;
		}
	}
	vector<int> v;
	ans=0;
	for(r1=0;r1<m;r1++)
	{
		for(r2=r1+1;r2<m;r2++)
		{
			for(j=0;j<n;j++)
			{
				if(dpc[r1][j]>=(r2-r1+1))
				{
					v.push_back(j);
				}
			}
			for(j=0;j<v.size();j++)
			{
				j2=min(upper_bound(v.begin(),v.end(),v[j]+dpr[r1][v[j]]-1)-v.begin(),upper_bound(v.begin(),v.end(),v[j]+dpr[r2][v[j]]-1)-v.begin());
				if(v[j2-1]>v[j])
				ans=max(ans,(2*((v[j2-1]-v[j])+(r2-r1))));
			}
			v.clear();
		}
	}
	if(ans==0)
	cout<<"impossible\n";
	else
	cout<<ans<<endl;
	return 0;
}

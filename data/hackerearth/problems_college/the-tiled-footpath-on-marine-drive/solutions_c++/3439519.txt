#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef double ld;
typedef pair<ll,ll> pl;

#define sl(x) scanf("%lld",&x)
#define pl(x) printf("%lld\n",x);
#define sf(x) sort(x.begin(),x.end(),func)
#define s(x) sort(x.begin(),x.end())
#define pb push_back
#define all(v) v.begin(),v.end()
#define rs(v) { s(v) ; r(v) ; }
#define r(v) {reverse(all(v));}
#define mp make_pair
#define F first
#define S second
#define f(i,n) for(int i=0;i<n;i++)
#define fab(i,a,b) for(int i=a;i<=b;i++)


const ll inf = LLONG_MAX;
const ll ninf = LLONG_MIN;
const ld eps = 1e-10;
const ll N = 1000005;
const ll LOGN = log2(N);
ll mod;
ll A=1,B=2;
void matmult(long long  a[][2],long long  b[][2],long long c[][2],long long  M)//multiply matrix a and b. put result in c
{
    int i,j,k;
    for(i=0;i<2;i++)
    {
        for(j=0;j<2;j++)
        {
            c[i][j]=0;
            for(k=0;k<2;k++)
            {
                c[i][j]+=(a[i][k]*b[k][j] + M)%M;
                c[i][j] = (c[i][j] + M)%M;
            }
        }
    }

}
void matpow(long long Z[][2],int n,long long ans[][2],long long M)
//find ( Z^n )% M and return result in ans
{

    long long temp[2][2];
    //assign ans= the identity matrix
    ans[0][0]=1;
    ans[1][0]=0;
    ans[0][1]=0;
    ans[1][1]=1;
    int i,j;
    while(n>0)
    {
        if(n&1)
        {
            matmult(ans,Z,temp,M);
            for(i=0;i<2;i++)
                for(j=0;j<2;j++)
                    ans[i][j]=temp[i][j];
        }
        matmult(Z,Z,temp,M);
        for(i=0;i<2;i++)
            for(j=0;j<2;j++)
                Z[i][j]=temp[i][j];


        n=n/2;
    }

    return;

}
long long findFibonacci(long long n,long long M)
{

    long long fib;
    if(n>2)
    {
        long long int Z[2][2]={{1,1},{1,0}},result[2][2];//modify matrix a[][] for other recurrence relations
        matpow(Z,n-2,result,M);
        fib= (((result[0][0]+mod)%mod)*2 + ((result[0][1]+mod)%mod)*1 + mod)%mod;    //final multiplication of Z^(n-2) with the initial terms of the series
        return fib;
    }
    else if(n==1)
         return 1;
    else return 2;
    //return fib;
}
int main()
{
    ll t;
    cin >> t;
    while(t--)
    {

        ll n,k;
        cin >> n >> k;
        mod = 1<<k;
        cout << (findFibonacci(n,mod)+mod)%mod << "\n";
    }
}

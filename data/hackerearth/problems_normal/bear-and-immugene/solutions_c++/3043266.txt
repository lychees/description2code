#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <numeric>
#include <cmath>
#include <complex>
#include <map>
#include <queue>
using namespace std;
typedef unsigned long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
typedef vector<string> vs;
const int mod = 1000000007;
int dw(int x) {
	if (x >= mod) return x-mod;
	return x;
}

char s[1000005];
char buf[4];
int n;

vvi mul(const vvi &x, const vvi &y) {
	vvi res(x.size(), vi(x[0].size()));
	for (int i = 0; i < x.size(); ++i) for (int j = 0; j < y[0].size(); ++j) {
		ll s = 0;
		for (int l = 0; l < x[i].size(); ++l) s += x[i][l]*(ll)y[l][j];
		res[i][j] = s % mod;
	}
	return res;
}

const int N = 1 << 20;
vvi v[2*N];

int f() {
	vi res(26);
	int sum = 1;
	for (int i = 0; i < n; ++i) {
		int cur = dw(sum - res[s[i]-'A'] + mod);
		res[s[i]-'A'] = sum;
		sum = dw(sum + cur);
	}
	return sum;
}

vvi g(int t) {
	vvi res(5, vi(5));
	for (int i = 0; i < 4; ++i) if (i != t)
		res[i][i] = 1;
	res[4][4] = 2;
	res[t][4] = 1;
	res[4][t] = mod - 1;
	return res;
}

int main() {
    int q;
    scanf("%d%d%s",&n,&q,s);
    vvi b[26];
    b[0] = g(0);
    b['c'-'a'] = g(1);
    b['g'-'a'] = g(2);
    b['t'-'a'] = g(3);
	for (int i = 0; i < n; ++i) {
		v[N + i] = b[s[i]-'A'];
	}
	vvi id(5, vi(5));
	for (int i = 0; i < 5; ++i) id[i][i] = 1;
	for (int i = n; i < N; ++i) {
		v[N + i] = id;
	}
	for (int i = N - 1; i > 0; --i) v[i] = mul(v[2*i+1], v[2*i]);
    for (int t = 0; t < q; ++t) {
    	int x;
    	scanf("%d%s", &x, buf);
    	--x;
    	s[x] = buf[0];
    	v[N + x] = b[s[x]-'A'];
    	int pos = (N + x) / 2;
    	while (pos) {
    		v[pos] = mul(v[2*pos + 1], v[2*pos]);
    		pos /= 2;
    	}
    	cout << v[1][4][4] << endl;
    	//printf("%d\n", f());
    }
    return 0;
}
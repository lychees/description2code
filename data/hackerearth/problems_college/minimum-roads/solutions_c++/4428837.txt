// The truth is always either terrible or boring
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;

#define X first
#define Y second
#define rep(i,n) for(int i = 0, _n = (n); i < _n; i++)
#define rep1(i,a,b) for(int i = a, _b = (b); i <= _b; i++)
#define rep2(i,b,a) for(int i = b, _a = (a); i >= _a; i--)
#define mem(a,val) memset(a, (val), sizeof a)
#define mp make_pair
#define mt make_tuple // remember tie & ignore
#define eb emplace_back
#define all(c) (c).begin(), (c).end()
#define uni(c) c.resize(distance(c.begin(), unique(all(c))))
#define tr(c,it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define cases int __t; cin >> __t; rep1(_t,1,__t)
#define case(ans) "Case #" << _t << ": " << ans << "\n"
#define cout(d) cout << fixed << setprecision(d)
#define err(x) cerr << #x << " = " << x << '\n'
const int mod = 1e9 + 7;

struct dsu {
    int width;
    vi par, sz;
    dsu(int n): par(n), sz(n), width(n) { rep(i,n) par[i] = i, sz[i] = 1;}
    void adopt(int a, int b) {
        a = dad(a);
        b = dad(b);
        if(sz[a] < sz[b]) swap(a,b);
        
        sz[a] += sz[b];
        par[b] = a;
        width--;
    }
    int dad(int a) { return a == par[a] ? a : par[a] = dad(par[a]);}
    bool dogla(int a, int b) { return dad(a) != dad(b);}
};

int main() {
//    ios_base::sync_with_stdio(false); cin.tie(NULL);
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
    int n, u, v; cin >> n;
    dsu d(n);
    cases {
        cin >> u >> v;
        u--, v--;
        if(d.dogla(u,v)) d.adopt(u,v);
    }
    cout << d.width - 1;
    return 0;
}
#include<bits/stdc++.h>
using namespace std;
#define MAX 10001
#define INF (1<<20)

struct comp
{
    bool operator()(const pair<int,int> &p1,const pair<int,int> &p2)
    {
        return p1.second>p2.second;
    }
};
priority_queue<pair<int,int> , vector < pair<int,int> >,comp > q;
vector<pair<int,int> > edges[MAX];

int D[MAX];
bool visited[MAX];

int main()
{
    int t,n,m,x,y,z,a,k;
    scanf("%d",&t);
    while(t--)
    {
        for(int i=0;i<MAX;i++)
            edges[i].clear();
        scanf("%d%d",&n,&m);
        for(int i=0;i<m;i++)
        {
            scanf("%d%d%d",&x,&y,&z);
            edges[x].push_back(make_pair(y,z));
            edges[y].push_back(make_pair(x,z));
        }
        /*for(int i=0;i<n;i++)
        {
            for(int j=0;j<edges[i].size();j++)
                cout<<i<<"->"<<edges[i][j].first<<":"<<edges[i][j].second<<"     ";
            cout<<"\n";
        }*/
        for(int i=2;i<=n;i++)
            D[i]=INF;
        for(int i=1;i<=n;i++)
            visited[i]=false;
        D[1]=0;
        q.push(make_pair(1,0));
        while(!q.empty())
        {
            int u=q.top().first;
            //cout<<"u="<<u<<endl;
            q.pop();
            if(visited[u]==true)
                continue;
            int s=edges[u].size();
            int v,w;
            for(int i=0;i<s;i++)
            {
                v=edges[u][i].first;
                w=edges[u][i].second;
                if((visited[v]==false)&&(D[u]+w)<D[v])
                {
                    D[v]=D[u]+w;
                    q.push(make_pair(v,D[v]));
                }
            }
            //q.push(make_pair(u,D[u]));
            visited[u]=true;
        }
        //for(int i=1;i<=n;i++)
          //  cout<<D[i]<< " ";
        int q;
        scanf("%d",&q);
        while(q--)
        {
            scanf("%d%d",&a,&k);
            int tim=k-D[a]*2;
            if(tim>0)
                printf("%d\n",tim);
            else
                printf("0\n");
        }
    }
    return 0;
}

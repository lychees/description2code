#include <iostream>
#include <vector>
#include <limits.h>
#define ll long long
#define parent(i) (i/2)
using namespace std;

typedef vector<ll int> vi;
typedef vector<vi> vvi;
vi heap;
vvi psumlist;

// Magic Sum
int main()
{
	int T, N, nleafs, nitnodes;
	cin >> T;
	while(T--)
	{
		cin >> N;
		nleafs = N/2+1;
		nitnodes = N - nleafs;
		//cout << nitnodes << " -- " << nleafs << endl;
		heap.assign(N+1, 0);
		psumlist.assign(N+1, vi());
		for (int i = 1; i <= N; ++i)
		{
			cin >> heap[i];
		}
		// build plist
		for (int i = nitnodes+1; i <= N; ++i)
		{
			int u = i;
			ll int sum = heap[u];
			while(u > 1)
			{
				u = parent(u);
				sum += heap[u];
				psumlist[i].push_back(sum);
				//cout << i << " >> " << sum << endl;
			}
		}
		//cout << "build "  <<  psumlist[nitnodes+2].size() << endl;
		// check all the combinations
		ll int magic_sum = LLONG_MIN;
		for (int i = nitnodes+1; i <= N; ++i)
		{
			for (int j = nitnodes+1; j <= N; ++j)
			{
				int sum;
				if( i == j) 
					sum = heap[i];
				else
				{
					int pi = i, pj = j;
					int count = -1;
					while (pi != pj)
					{
						pi = parent(pi);
						pj = parent(pj);
						count++;
					}
					//cout << pi << " " << pj << endl;
					sum = psumlist[i][count] + psumlist[j][count] - heap[pi];
					//cout << pi << " " << pj << endl;
				}
				if (sum > magic_sum)
					magic_sum = sum;
			}	
		}
		cout << magic_sum << endl;;
	}
}
#include <iostream>
#include <cstring>
#include <cstdio>
using namespace std;
typedef long long ll;
const int MAXN = 16;
const int MAXS = 1 << MAXN;
const int MOD = 1000000007;
int cmul( int x0, int y0, int x1, int y1, int x2, int y2 ){
	x1 -= x0; y1 -= y0;
	x2 -= x0; y2 -= y0;
	return x1*y2-x2*y1;
}
int x[MAXN],y[MAXN];
int n,maxs;
inline int low_bit(int n){return n&(-n);}
int st[MAXN][MAXS];
int cst[MAXN],cast;
int f[MAXS][2];
int q[MAXS];
int qst,qed;
int main(){
	int T; cin >> T;
	while ( T-- > 0 ){
		cin >> n;
		for( int i = 0; i < n;i ++ )
			cin >> x[i] >> y[i];
		maxs = 1 << n;
		memset(cst,0,sizeof(cst));
		cast = 0;
		for( int s = 1; s < maxs; s++ ){
			int l[MAXN], cl = 0;
			for( int i = 0; i < n; i++ ) if ( s & ( 1 << i ) )
				l[cl++] = i;
			bool coline = true;
			for( int i = 2; i < cl; i++ )
				if ( cmul( x[l[0]], y[l[0]], x[l[1]], y[l[1]], x[l[i]], y[l[i]] ) )
					coline = false;
			if ( coline ){
				st[ l[0] ][ cst[l[0]]++ ] = s;
				cast ++;
			}
		}
		if ( cast == maxs-1 ){
			puts("1 1");
		}else if ( n >= 2 && cast == (n-1)*(n-2)/2+(n-1)  ){
			printf("%d %d\n",2,n*2);
		}else{
			memset(f,-1,sizeof(f));
			f[0][0] = 0, f[0][1] = 1;
			qst = qed = 0;
			q[qed++] = 0;
			while ( qst < qed ){
				int s = q[qst++];
				if ( s == maxs-1 ) break;
				int id_start = 0;
				for( ; (1<<id_start) != low_bit( (maxs-1)^s ) ; id_start++ )
					;
				for( int i = 0; i < cst[ id_start ]; i++ ){
					int new_part = st[ id_start ][i];
					if ( ( new_part & s ) == 0 ){
						int next_s = s | new_part;
						if ( f[next_s][0] == -1 || f[next_s][0] > f[s][0] + 1 ){
							f[next_s][0] = f[s][0]+1;
							f[next_s][1] = f[s][1];
							q[qed++] = next_s;
						}else if ( f[next_s][0] == f[s][0] + 1 ){
							f[next_s][1] += f[s][1];
							if ( f[next_s][1] >= MOD )
								f[next_s][1] -= MOD;
						}
					}
				}
			}
			long long count = f[maxs-1][1];
			for( int i = 2; i <= f[maxs-1][0]; i++ )
				count = count * i % MOD;
			printf("%d %d\n",f[maxs-1][0], int(count) );
		}
	}
	return 0;
}
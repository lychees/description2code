#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)

#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     (int)c.size()
#define clr(c)    c.clear()
#define pb        push_back
#define mp        make_pair

#define GI(x)     scanf("%d",&x)

#define FOR(i,a,b)      for(int i=(int)(a);i<(int)(b);i++)
#define RFOR(i,a,b)     for(int i=(int)(b)-1;i>=(int)(a);i--)

#define MOD       1000000007
#define EPS       1E-10

#define PI  acos(-1)

#define CASE(x)   cout << "Case #" << x << ": ";

VI primes;
int marker[5000001] = {0};
void sieve(int limit = 5000000)
{
	FOR(i,2,limit+1) marker[i] = 1;
	FOR(i,2,limit+1)
	{
		if(!marker[i]) continue;
		primes.pb(i);
		int j = 2*i;
		while(j<=limit)
		{
			marker[j] = 0;
			j += i;
		}
	}
}

const int oo = 500000000;

int costMat[600][600];

int getCost(int a , int b)
{
	int pos = (int)(lower_bound(all(primes) , b) - primes.begin());
	pos = max(pos , 1 + (int)(lower_bound(all(primes) , a) - primes.begin()));
	if(pos == 0) pos = 1;
	while(a > primes[pos-1]) pos += 1;
	return (primes[pos-1] + primes[pos] - (a+b));
}

int dp[501][501] = {{0}};

int solve(int i , int j)
{
	if(j-i+1 == 0) return 0;
	else if(i > j or (j-i+1)%2) return (dp[i][j] = oo);
	else if(j-i+1 == 2) return 1 + costMat[i][j];
	else if(dp[i][j] != -1) return dp[i][j];
	int ret = oo;
	for(int k = i + 1; k <= j; k++)
	{
		ret = min(ret , 1 + solve(i+1 , k-1) + solve(k + 1 , j) + costMat[i][k]);
	}
	return (dp[i][j] = ret);
}

int main()
{
	inp_s;
	sieve();
	int n;
	cin >> n;
	vector<int> arr(n);
	FOR(i,0,n) cin >> arr[i];
	FOR(i,0,n)
		FOR(j,i+1,n)
			costMat[i][j] = getCost(arr[i] , arr[j]);
	FOR(i,0,501) FOR(j,0,501) dp[i][j] = -1;
	cout << solve(0 , n-1) << endl;
	return 0;
}
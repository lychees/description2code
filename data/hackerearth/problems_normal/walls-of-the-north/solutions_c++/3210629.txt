#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker, "/STACK:128777216")

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <sstream>

#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <deque>
#include <stack>

#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <string.h>

#include <memory.h>
#include <cassert>
#include <time.h>
#include <functional>

using namespace std;

#define forn(i,n) for (int i = 0; i < (int)(n); i++)
#define fornd(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i,a,b) for (int i = (int)(a); i <= (int)(b); i++)
#define forabd(i, b, a) for (int i = (int)(b); i >= (int)(a); i--)
#define forit(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); i++)

#define _(a, val) memset (a, val, sizeof (a))
#define sz(a) (int)((a).size())
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()

typedef long long lint;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef vector<int> vii;

const lint LINF = 1000000000000000000LL;
const int INF = 1000000000;
const long double eps = 1e-9;
const long double PI = 3.1415926535897932384626433832795l;

#ifdef MY_DEBUG
#define dbgx( x ) { cerr << #x << " = " << x << endl; }
#define dbg( ... ) { fprintf(stderr, __VA_ARGS__); fflush(stderr); }
#else
#define dbgx( x ) {  } 
#define dbg( ... ) {  } 
#endif

void prepare(string s) {
#ifdef MY_DEBUG
    freopen ("input.txt", "r", stdin);
    //freopen ("output.txt", "w", stdout);
#else
    if (s.length() != 0) {
        freopen ((s + ".in").c_str(), "r", stdin);
        freopen ((s + ".out").c_str(), "w", stdout);
    }
#endif
}

const int NMAX = 100005;

class Tree
{
public:
  int a[NMAX*4];
  int start;
  void build(int n) {
    start = 1;
    while (start < n) 
      start <<= 1;
    _(a, 0);
  }

  int get(int v, int i, int j, int l, int r) {
    if (i > r || l > j)
      return 0;
    if (i <= l && r <= j)
      return a[v];
    int m = (l + r) >> 1;
    return max(get(v*2, i, j, l, m), get(v*2 + 1, i, j, m + 1, r));
  }

  int get(int l, int r) {
    return get(1, l, r, 1, start);
  }

  void upd(int v, int val) {
    v += start;
    a[v] = max(a[v], val);
    v >>= 1;
    while (v) {
      a[v] = max(a[v*2], a[v*2 + 1]);
      v >>= 1;
    }
  }
};

Tree tree[2];

int N;
int a[NMAX];
int tmp[NMAX];
int d[NMAX][2];

void read() {
	scanf("%d", &N);
  forn(i, N) {
    scanf("%d", &a[i]);
  }
}

void solve() {
	forn(i, N) {
    tmp[i] = a[i];
  }
  sort(tmp, tmp + N);
  int TN = unique(tmp, tmp + N) - tmp;
  forn(i, N) {
    a[i] = lower_bound(tmp, tmp + TN, a[i]) - tmp + 1;
  }

  forn(i, 2) 
    tree[i].build(N);

  forn(i, N) {
    d[i][0] = tree[1].get(1, a[i]) + 1;
    d[i][1] = tree[0].get(a[i], N) + 1;
    tree[0].upd(a[i] - 1, d[i][0]);
    tree[1].upd(a[i] - 1, d[i][1]);
  }
  int ans = 0;
  forn(i, N) {
    ans = max(ans, d[i][0]);
    ans = max(ans, d[i][1]);
  }
  printf("%d\n", ans);
}

int main() {
	prepare("");
  int t;
  scanf("%d", &t);
  forn(i, t) {
	  read();
	  solve();
  }
	return 0;
}

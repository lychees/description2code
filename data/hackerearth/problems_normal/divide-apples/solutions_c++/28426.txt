#include<iostream>
#include<stdio.h>
#include<algorithm>
using namespace std;
#include<vector>
#include<stack>
#include<math.h>


struct minmin{
	int i;
	long long val;
	bool operator < (const minmin& str) const
	{
		return (val < str.val);
	}
};

int main()
{
	int N,i,j,z,avg;
	long long tot=0;
	scanf("%d",&N);
	int arr[N];
	for(i=0;i<N;i++){
		scanf("%d",&arr[i]);
		tot+=arr[i];
	}
	avg =(int) (tot/N);
	long long minSteps = 9223372036854775807L,steps;
	int rootN=(int)pow(N,0.5);
	int end,start;
	vector<minmin> minSTEPS;
	int lim=10;
	for(i=0;i<lim;i++){
		minmin temp;
		temp.i=0;temp.val=minSteps;
		minSTEPS.push_back(temp);
	}
	int minz;
	for(z=0;z<N;z+=rootN){
		long long last=arr[z];
		steps=0;
		for(i=z;;i=(i+1)%N){
			int i1=(i+1)%N;
			if(last<avg){
				steps+= avg-last;
				last = arr[i1]-avg+last;
			}
			else{
				steps+=last-avg;
				last = arr[i1]+last-avg;
			}

			if(i==(z+N-1)%N)
				break;
		}


		if(minSTEPS.back().val>steps){
			minSTEPS[lim-1].val=steps;
			minSTEPS[lim-1].i=z;
			sort(minSTEPS.begin(),minSTEPS.end());
		}
	}

	for(int k=0;k<lim;k++){
		if(minSTEPS[k].val == minSteps)continue;
		minz=minSTEPS[k].i;

		start=(minz-rootN/2+N)%N;
		end = (minz+rootN/2)%N;

		if(N<5000){
			start=0;end=N;}
		for(z=start;;z++){
			long long last=arr[z];
			steps=0;
			for(i=z;;i=(i+1)%N){
				int i1=(i+1)%N;
				if(last<avg){
					steps+= avg-last;
					last = arr[i1]-avg+last;
				}
				else{
					steps+=last-avg;
					last = arr[i1]+last-avg;
				}

				if(i==(z+N-1)%N)
					break;
			}


			if(minSteps>steps){
				minSteps=steps;
				minz=z;
			}
			if(z==end)break;
		}
	}


	printf("%lld",minSteps);
	//printf("\n%lld",minSTEPS[0].val);


}

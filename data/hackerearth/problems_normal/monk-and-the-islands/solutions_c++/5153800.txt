#include <bits/stdc++.h>

using namespace std;

int bfs(vector< list<int> > &g, int start, int end){
	list<int>::iterator it;
	queue<int> q;
	q.push(start);
	vector<bool> visited(g.size()+1,false);
	visited[start] = true;
	vector<int> parent(g.size());
	parent[start] = -1;
	while(!q.empty()){
		int i = q.front();
		q.pop();
		it = g[i].begin();
		while(it!=g[i].end()){
			if(!visited[*it]){
				visited[*it] = true;
				parent[*it] = i;
				q.push(*it);
			}
			it++;
		}
	}
	int j = end;
	int dist = 0;
	while(parent[j] != -1){
		j = parent[j];
		dist++;
	}
	return dist;
}

int main(){
	int vertices, edges,u,v, n,t;
	cin>>t;
	while(t--){
		cin>>vertices>>edges;
		vector< list<int> > graph(vertices + 1);
		while(edges--){
			cin>>u>>v;
			graph[u].push_back(v);
			graph[v].push_back(u);
		}
		cout<<bfs(graph,1,vertices)<<endl;
	}
	return 0;
}
#include <iostream>
using namespace std;
#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <cmath>

#include <vector>
#include <map>
#include <list>
#include <algorithm>
#include <string>
#include <set>
#include <stack>
#include <queue>
#include <deque>

//  Input format:--
//  1. n as no. upto which, primes are to be found
//  2. arr[] be boolean array of size n+1 
//  3. primes[] be integer array in which you want primes.


//  Result:--
//  1. boolean array as to check if no. is prime
//  2. primes array as list of primes
//  3. k as no. of primes


#define getcx getchar_unlocked
inline void input(int &n)
{
   n=0;
   register int ch=getcx();
   int sign=1;
   while( ch < '0' || ch > '9' )
   {
      if(ch=='-')
         sign=-1; 
         ch=getcx();
   }

   while(  ch >= '0' && ch <= '9' )
           n	 = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   
   n=n*sign;
}

void markMultiples(bool arr[], int a, int n)
{
    int i = 2, num;
    while ( (num = i*a) <= n )
    {
        arr[num] = 1;
        ++i;
    }
}
 

int SieveOfEratosthenes(int n, bool arr[])//, int primes[])
{
    int k=0;
    if (n >= 2)
    {
        memset(arr, 0, n+1);
        for (int i=2; i<=n; ++i)
            if ( arr[i] == 0 )
            {
		//primes[k++] = i;
                markMultiples(arr, i, n);
            }
    }
    return k;
}



int main()
{
   int t;
   cin>>t;
   bool isPrime[1000005];
   SieveOfEratosthenes(1000005, isPrime);
   int ans[1000005];
   int cnt=0;
   for(int i=1 ; i<= 1000004; i++)
   		{
   			char a[50];
   			if(isPrime[i])
   			{
   				sprintf(a, "%d", i);
   				for(int i=0; a[i]; i++)
   					if(a[i]=='7')
   					{
   						cnt++;
   						goto out;
   					}
   			}
   			out:
   			ans[i] = cnt;
   		}
   
   while(t--)
   {
   		int m, n;
   		input(m);
   		input(n);
   		if(m>n)
   			m = m + n - (n = m);
   		cnt = ans[n] - ans[m-1];
   		if(cnt)
   			cout<<cnt<<endl;
   		else
   			cout<<"-1"<<endl;
   }
    return 0;
}

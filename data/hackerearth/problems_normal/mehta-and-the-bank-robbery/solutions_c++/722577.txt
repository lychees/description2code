#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define MAX 2005
ll profit[MAX];
ll weight[MAX];
ll dp[2][MAX][MAX];
int prime[]={1,2,3,5,7,11,13,17,19,23,29};
int main()
{
	int n;ll W;
	scanf("%d%lld",&n,&W);
	vector< pair<int , ll> >val;
	for(int i=1;i<=n;i++)
	{
		scanf("%lld%lld",&profit[i],&weight[i]);
		val.push_back(make_pair(profit[i],weight[i]));
	}
	sort(val.begin(),val.end());
	for(int i=1;i<=n;i++)
	{
		profit[i]= val[i-1].first;
		weight[i]= val[i-1].second;
	}
	for(int p=0;p<11;p++)
	{
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=W;j++)
			{
				if(!p)
				{
					dp[p][i][j]= max(dp[p][i][j],dp[p][i-1][j]);
					if(j>=weight[i])
					{
						dp[p][i][j]= max(dp[p][i][j],dp[p][i-1][j-weight[i]]+profit[i]);
					}
				}
				else
				{
				  int cur = p&1;
				  int prev= 1-cur;
				  dp[cur][i][j] = dp[prev][i][j];
				  dp[cur][i][j]= max(dp[cur][i][j],dp[cur][i-1][j]);
				  if(j>=weight[i])
				  {
				  	dp[cur][i][j]= max(dp[cur][i][j],dp[cur][i-1][j-weight[i]]+profit[i]);
				  	dp[cur][i][j]= max(dp[cur][i][j],dp[prev][i-1][j-weight[i]]+prime[p]*profit[i]);
				  } 	
				}
			}
		}
	}
	printf("%lld\n",dp[0][n][W]);
	
	
}
//Hope is a good thing and maybe the best thing of all...
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <list>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
using namespace std;

//DEBUG
#define trace(x) cerr << #x << "=" << x <<endl;
#define trace2(x, y) cerr << #x << "=" << x << " " << #y << "=" << y <<endl;
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int p = 0; p < n; p++) {cerr << x[p] << " ";} cerr << endl;}
#define track(x) {cerr << #x << ":" << endl; for (int p = 0; p < x.size(); p++) {cerr << x[p] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}

void readwrite() {
	#ifndef ONLINE_JUDGE
		freopen("input.txt", "r", stdin);
		freopen("output.txt", "w", stdout);
	#else
		ios::sync_with_stdio(false);
	#endif
}

//CONSTANTS
const int MAX = 100005;
const int MOD = 1000000007;
const int INF = 1000000000;

int main() {
    int n, K;
    scanf("%d%d", &n, &K);
    int a[MAX];
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    bool dp[2][365] = {};
    int prev = 1, current = 0;
    dp[prev][0] = true;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 360; j++) {
            memset(dp[current], 0, sizeof(dp[current]));
            for (int k = 0; k < 360; k++) {
                dp[current][k] |= dp[prev][k];
                dp[current][(k + a[i]) % 360] |= dp[prev][k];
                dp[current][(k + 360 - a[i]) % 360] |= dp[prev][k];   
            }
            swap(prev, current);
        }
    }

    while (K--) {
        int a;
        scanf("%d", &a);
        a %= 360;
        bool possible = dp[prev][a];
        if (possible) {
            printf("YES\n");
        } else {
            printf("NO\n");
        }
    }  
}

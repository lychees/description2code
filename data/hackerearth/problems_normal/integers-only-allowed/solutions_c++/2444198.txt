#include <iostream>
#include <cmath>
#include <math.h>
#include <vector>
#include <algorithm>
#include <stdio.h>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <tuple>
#include <complex>

using namespace std;

#define vec vector
#define ALL(x) (x).begin(), (x).end()
#define mp make_pair

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const ll inf = 1000000000ll;
const ll inf64 = inf * inf;
const ll base = inf + 7;

ll gcd(ll x, ll y) {
	return (x == 0?y : gcd(y % x, x));
}

bool solve() {

	int n;
	cin >> n;

	vec< pair< ll, ll > > a(n);

	for(int i = 0;i < n;i++) {
		cin >> a[i].first >> a[i].second;
	}

	ll s = 0, cnt = 0;

	for(int i = 0;i < n;i++) {
		ll d1, d2;
		d1 = a[i].first - a[(i + 1) % n].first;
		d2 = a[i].second - a[(i + 1) % n].second;
		if(d1 < 0) d1 = -d1;
		if(d2 < 0) d2 = -d2;
		if(d1 > 0 && d2 > 0) cnt += gcd(d1, d2);
		else cnt += max(d1, d2);
	}

	for(int i = 0;i < n;i++) {
		ll x1, y1, x2, y2;
		x1 = a[i].first;
		y1 = a[i].second;
		x2 = a[(i + 1) % n].first;
		y2 = a[(i + 1) % n].second;
		s += (x1 - x2) * (y1 + y2) / 2;
	}

	if(s < 0) s = -s;

	cout << s - cnt / 2 + 1 << '\n';

	return true;
}

int main() {

	//while(solve());
	solve();    

	return 0;
}
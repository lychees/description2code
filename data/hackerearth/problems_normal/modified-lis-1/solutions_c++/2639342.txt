#include <bits/stdc++.h>
#define endl '\n'

#define int long long

using namespace std;
const int MAXN = (1 << 20);
const int mod = (int)(1e9 + 7);

int a[MAXN];

struct node
{
	int mx, cnt_mx;

	node() {mx = 0; cnt_mx = 1;}
	node(int s)
	{
		mx = s;
		cnt_mx = 1;
	}
};	

node temp;

node merge(node _a, node _b)
{
	temp.mx = max(_a.mx, _b.mx);
	temp.cnt_mx = 0;

	if(temp.mx == _a.mx)
		temp.cnt_mx = _a.cnt_mx;
	
	if(temp.mx == _b.mx)
		temp.cnt_mx = (temp.cnt_mx + _b.cnt_mx) % mod;
	
	temp.cnt_mx %= mod;

	return temp;
}

struct segment_tree
{
	node tr[4 * MAXN];

	void init(int l, int r, int idx)
	{
		if(l == r)
		{
			tr[idx] = node(0);	
			return;
		}

		int mid = (l + r) >> 1;
		init(l, mid, 2 * idx + 1);
		init(mid + 1, r, 2 * idx + 2);

		tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}

	node query(int qL, int qR, int l, int r, int idx)
	{
		if(qL <= l && r <= qR)
			return tr[idx];

		if(qL > r || qR < l)
			return node(0);

		int mid = (l + r) >> 1;
		node _left = query(qL, qR, l, mid, 2 * idx + 1);
		node _right = query(qL, qR, mid + 1, r, 2 * idx + 2);

		return merge(_left, _right);	
	}

	void update(int pos, int val, int c, int l, int r, int idx)
	{
		if(l > pos || r < pos)
			return;

		if(l == r && l == pos)
		{
			if(tr[idx].mx == val) tr[idx].cnt_mx += c;
			if(tr[idx].mx < val) tr[idx].cnt_mx = c;
			
			tr[idx].cnt_mx %= mod;
			
			tr[idx].mx = max(tr[idx].mx, val);
			return;
		}

		int mid = (l + r) >> 1;
		update(pos, val, c, l, mid, 2 * idx + 1);
		update(pos, val, c, mid + 1, r, 2 * idx + 2);

		tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}	
};

int n;

void read()
{
	cin >> n;

	for(int i = 0; i < n; i++)
		cin >> a[i];
}

segment_tree ls, gs;

void solve()
{
	ls.init(0, MAXN - 1, 0);
	gs.init(0, MAXN - 1, 0);

	int ans = 0, cnt = 0;
	for(int i = 0; i < n; i++)
	{
		if(a[i] < 0)
		{
			int dp = gs.query(0, (-a[i]) - 1, 0, MAXN - 1, 0).mx, c = gs.query(0, -(a[i]) - 1, 0, MAXN - 1, 0).cnt_mx;
			
			if(dp == 0)
			c = 1;
			
			if(dp + 1 > ans) cnt = c;
			else if(dp + 1 == ans) cnt += c;
			cnt %= mod;
			
			ans = max(ans, dp + 1);
			ls.update(-a[i], dp + 1, c, 0, MAXN - 1, 0);
		}
		else
		{
			int dp = ls.query(0, a[i] - 1, 0, MAXN - 1, 0).mx, c = ls.query(0, a[i] - 1, 0, MAXN - 1, 0).cnt_mx;
			
			if(dp == 0)
			c = 1;
			
			if(dp + 1 > ans)  cnt = c;
			else if(dp + 1 == ans) cnt += c;
			cnt %= mod;

			ans = max(ans, dp + 1);
			gs.update(a[i], dp + 1, c, 0, MAXN - 1, 0);
		}
	}

	cout << ans << " " << cnt << endl;
}

#undef int
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}


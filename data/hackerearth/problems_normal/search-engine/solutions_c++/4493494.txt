#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>

using namespace std;
int lexiprint(struct node* ,char*);
void insertion(struct node*,char* ,int);
int count(struct node* tree);
struct node
{
struct node* parent;
struct node* child[26];int weight;
    int val[26];
};

int main()
{
int n,i,q;
char word[1000000];
 struct node * trieTree = (struct node *) calloc(1, sizeof(struct node));
    cin>>n>>q;
    int weight;
for(i=0;i<n;i++)
 {
    cin>>word>>weight;
  insertion(trieTree,word,weight);
  }
  string str;
  int ans;
  int j;
  for(i=0;i<q;i++)
  {
  	cin>>word;
  	if(i>0)
  	if(str==word)
  	{
  		printf("%d\n",ans);
  		continue;
  	}
  	str=word;
 ans=lexiprint(trieTree,word);
 printf("%d\n",ans);
  }
  
}
int lexiprint(struct node* tree,char *word )
{ 
    int i=0,ans=0,max=-1;
    while(*word!='\0')
        {
        if(tree->child[*word-'a']==NULL)
            {
            return -1;
        }
        else
            {
            //ans=tree->val[*word-'a'];
        tree=tree->child[*word-'a'];
            
        }
     
        ++word;
    }
    
    for(i=0;i<26;i++)
    {
    if(tree->child[i]!=NULL)
    {
      ans= count(tree->child[i]);
      if(ans>max)
      max=ans;
    }
    }
    return max;
}

int count(struct node* tree)
{
	if(tree==NULL)
	return -1;
   int i,max=-1,ans;
   for(i=0;i<26;i++)
   {
   	if(tree->child[i]!=NULL)
   	{
   	ans= count(tree->child[i]);
      if(ans>max)
      max=ans;
   	}
   }
   if(max==-1)
   {
   	return tree->weight;
   }
 return max;
}


void insertion(struct node* tree,char* word,int index)
{
struct node* traverse=tree;
while(*word!='\0')
{
    traverse->val[*word-'a']++;
 if(traverse->child[*word-'a']==NULL)
   {
    traverse->child[*word-'a']=(struct node* )calloc(1,sizeof(struct node));
     
    traverse->child[*word-'a']->parent=traverse;
    }
 traverse=traverse->child[*word-'a'];
 ++ word;
}

traverse->weight=index;
}

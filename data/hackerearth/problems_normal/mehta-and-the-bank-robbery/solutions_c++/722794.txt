#include<iostream>
#include<algorithm>

using namespace std;
int primes[]= {2,3,5,7,11,13,17,19,23,29};

typedef long long ll;

struct arr{
	unsigned long long  profit;
	unsigned long long weight;
}a[2001];

bool keep[2001][2001];

unsigned long long dp[2][2001][2001];

bool compare(const arr& ab,const arr& b){
return ab.profit==b.profit?(ab.weight<b.weight):ab.profit<b.profit;
}

int main(){

	int n,w;

	cin>>n>>w;

	int j1,i=0;
	for(i=0;i<n;i++){
		int x,y;
		cin>>x>>y;
		a[i].profit = x;	
		a[i].weight = y;
	}	

sort(a,a+n,compare);
	



for(int p=0;p<=10;p++){
for(int i=0;i<=n;i++){
	for(int j=0;j<=w;j++){
	if(i==0 || j==0)
		dp[p%2][i][j] = 0;
	else if(p==0){
		if(a[i-1].weight<=j){

			ll x = dp[0][i-1][j];
			ll y = dp[0][i-1][j-a[i-1].weight]+ a[i-1].profit;
			
			ll m =max(x,y);
			//m = max(m,z);
			
			dp[0][i][j] = m;
		}
		else{
			dp[0][i][j] = dp[0][i-1][j];
		}
				
	
	}
	else if(p%2==0){
		
		if(a[i-1].weight<=j){

			ll x = dp[0][i-1][j];
			ll y = dp[1][i-1][j-a[i-1].weight]+ a[i-1].profit*primes[p-1];
			ll z = dp[0][i-1][j-a[i-1].weight]+ a[i-1].profit;
			
			ll m =max(x,y);
			m = max(m,z);
			
			dp[0][i][j] = m;
		}
		else{
			dp[0][i][j] = dp[0][i-1][j];
		}
	}
	else {
		if(a[i-1].weight<=j){

			ll x = dp[1][i-1][j];
			ll y = dp[0][i-1][j-a[i-1].weight]+ a[i-1].profit*primes[p-1];
			ll z = dp[1][i-1][j-a[i-1].weight]+ a[i-1].profit;
			
			ll m =max(x,y);
			m = max(m,z);
			
			dp[1][i][j] = m;
		}
		else{
			dp[1][i][j] = dp[1][i-1][j];
		}
	}
	
}
}
}


cout<<dp[0][n][w]<<endl;




}
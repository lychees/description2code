#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <set>
#include <map>
#include <queue> 
#include <climits>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;
typedef pair< int, pii > tri;

typedef vector<int> array;
typedef vector<LL> array_LL;
typedef vector<vector<int> > matrix;
typedef vector<vector<LL> > matrix_LL;


#define pb push_back
#define mp make_pair
#define sz size()
#define ln length()
#define forr(i,a,b)                 for(int i=a;i<b;i++)
#define rep(i,n)                    forr(i,0,n) 
#define all(v)                      v.begin(),v.end()    
#define uniq(v)                     sort(all(v));v.erase(unique(all(v)),v.end())
#define clr(a)                      memset(a,0,sizeof a)
    
#define debug                       if(1)
#define debugoff                    if(0)    

#define print(x)                 cerr << x << " ";    
#define pn()                     cerr << endl;
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;

#define endl '\n'
#define MAX 3010
#define MOD 1000000007
LL mem[MAX][MAX];
LL solve(int i,int j){

    if(j == 0)  return 1;
    if(i == j)  return 1;

    LL& res = mem[i][j];
    if(res != -1)   return res;

    res = (solve(i-1,j) + solve(i-1,j-1))%MOD;

    return res;
}
vector< pii > v;
int main()
{
    memset(mem,-1,sizeof mem);
    ios::sync_with_stdio(false);
    cin.tie(0);
    int t,n,q,a,b,x,y;
    LL pro;
    cin>>t;
    while(t--)
    {
        v.clear();
        cin>>n>>q;
        v.pb(mp(0,0));v.pb(mp(n-1,n-1));
        for(int i=0;i<q;i++){
            cin>>a>>b;
            v.pb(mp(a,b));
        }
        sort(all(v));
        pro = 1;
        int size = v.size();
        for(int i=1;i<size;i++){
            x = (v[i].first  - v[i-1].first);
            y = (v[i].second - v[i-1].second);
            assert(x >= 0);
            assert(y >= 0);
            if(x < y) swap(x,y);
            //trace2(x,y);
            pro = (pro * solve(x+y,y))%MOD;
        }
        cout<<pro<<endl;
    }
    return 0; 
}


#include<bits/stdc++.h>
using namespace std ;
long long  dp[16][136] , d  ;

long long recur ( int len , int sum )
{
    if ( len == 0 )
        return ( sum == 0 ) ;
    if ( dp[len][sum] != -1)
        return dp[len][sum] ;
    long long ans = 0 ;
    for ( int i = 0 ; i < 10 ; i++)
    {
        if  ( ( sum - i  ) >= 0  )
        ans += recur ( len - 1 , sum - i  ) ;
    }
    dp[len][sum] = ans ;
   return ans ;
}


long long  findnum( string n )
{

    int len = n.length() ;
    //cout << " len is " << len << endl ;
    int temp  = len ;
    long long  ans = 0 ;
    int got = 0 ;

    for ( int i = 0 ; i < len ; i++)
    {
        int y1 = n[i] - '0' ;
        for ( int j = 0 ; j < y1 ; j++)
        {
            if ( ( d - j ) >= 0  )
            {
               ans += recur( temp - 1  ,  d - j ) ;
            }

        }
        d = d - y1 ;
            temp-- ;
    }

return ans ;

}

int main()
{
    long long  ans , ans1 , ans2 , ans3 , ans4  ;
    long long  a , b  ;
    string h ;
    int s1 ;
    cin >> a >> b >> s1 ;
    int n ;
    char cad[29] ;
    memset ( dp , -1 , sizeof(dp)) ;

    d = s1 ;
    sprintf( cad , "%lld" , b + 1  ) ;
    h = cad ;
    //cout << " h is " << h << endl ;
    ans1 = findnum(h) ;

     sprintf( cad , "%lld" , a ) ;
     h = cad ;
     d = s1 ;
     //memset ( dp , -1 , sizeof(dp)) ;
     //cout << " h is " << h << endl ;
     ans2 = findnum(h) ;

     ans = ans1 - ans2 ;
     cout << ans << endl ;


    d = s1 ;
    //memset ( dp , -1 , sizeof(dp)) ;
    sprintf( cad , "%lld" , a - 1 ) ;
     h = cad ;
     ans3 = findnum(h) ;



    d = s1 ;
    //memset ( dp , -1 , sizeof(dp)) ;
    sprintf( cad , "%lld" , b ) ;
    h = cad ;
    ans4 = findnum(h) ;



     // Finding smallest of them

     long long  low = a ;
     long long  high = b ;
     long long mid , fmid  ;

     while ( low < high )
      {
         mid = ( low + high ) / 2 ;
      //   memset ( dp , -1 , sizeof(dp)) ;
         sprintf( cad , "%lld" , mid + 1 ) ;
         d = s1 ;
         h = cad ;

         if ( ( findnum(h) - ans2 ) >= 1 )
         {
             //cout << " mid is " << mid << endl ;
            high = mid ;
            fmid = mid ;
         }
         else
         {
            low  = mid + 1 ;
         }

      }
      if ( ( ans2 - ans3 ) == 1 )
        fmid = a ;
        if ( ( ans1 - ans4) == 1 )
            fmid = b ;
      cout << fmid << endl ;
    return 0 ;
}

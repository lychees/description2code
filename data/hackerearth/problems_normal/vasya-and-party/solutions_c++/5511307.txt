#include<iostream>
#include<cstdio>
#include<iomanip>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
#include<sstream>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define vb vector<bool>
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}

int maxi=0, c=0;

class graph
{
	vi * adj;
	int time;
	public:
		graph( int v)
		{
			adj = new vi[v];
			time = 0;
		}
		void add_edge(int u, int v)
		{
			adj[u].pb( v);
			adj[v].pb( u);
		}
		void dfs(int v,vb& visited,vi& k)
		{
			visited[v]=true;
			if(maxi < k[v])
			{
				maxi=k[v];
				c=1;
			}
			else if(maxi==k[v])
			{
				c++;
			}
			vi::iterator it;
			for( it=adj[v].begin();it!=adj[v].end();it++ )
			{
				if(!visited[*it])
				{
					dfs(*it, visited, k);
				}
			}
		}
};
int main()
{
	ios_base::sync_with_stdio(false);
	int i, n, t, m, u, v;
	cin >> n >> m;
	graph g(n);
	vi k(n);
	for( i=0;i<n;i++ )
	{
		cin >> k[i];
	}
	ll ans=1;
	vb visited( n);
	for( i=0;i<m;i++ )
	{
		cin >> u >> v;
		u--;
		v--;
		g.add_edge(u, v);
	}
	for( i=0;i<n;i++ )
	{
		if( !visited[i])
		{
			c=0;
			maxi=0;
			g.dfs(i, visited, k);
			ans=(ans*c)%mod;
		}
	}
	cout << ans ;
    return 0;
}
//int i=1000;
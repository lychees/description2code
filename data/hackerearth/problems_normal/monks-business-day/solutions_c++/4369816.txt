#include <bits/stdc++.h>
using namespace std;
#define inf INT_MAX
class G_W
{
	
	int V;	
	vector< vector< pair<int,int> > > G;

	//G.size() number of vertices
	//G[i].size() number of vertices directly reachable from vertex with index i
	//G[i][j].first is the index of j-th vertex reachable from vertex i
	//G[i][j].second is the length of the edge heading from vertex i to vertex G[i][j].first

	public:
	
	G_W(int v)
	{
		this->V=v;
		G.resize(v, vector<pair<int,int> >() );
	}
	
	void add_edge(int u,int v,int c)
	{
		G[u].push_back(make_pair(v,c));
	//	G[v].pb(ii(u,c));
	}
	
	void bellmanford(int s)
	{
		vector<int> D(V,inf);
		D[s]=0;
		int flag=0;

		for(int i=0;i<V;i++)
			for(int j=0;j<V;j++)
				for(int k=0;k<G[j].size();k++)
					if(D[j]!=inf && D[G[j][k].first] > D[j]+G[j][k].second)
						D[G[j][k].first]=D[j]+G[j][k].second;
		for(int j=0;j<V;j++)
				for(int k=0;k<G[j].size();k++)
					if(D[j]!=inf && D[G[j][k].first] > D[j]+G[j][k].second)
						flag=1;	
		
		if(flag==1)
			cout<<"Yes"<<endl;
		else
			cout<<"No"<<endl;
	}
};
int main()
{
    int n,m,t;
    cin>>t;
    int u,v,c;
    while(t--)
    {
    	cin>>n>>m;
    	
    	G_W g(n);
    	
    	while(m--)
    	{
    		cin>>u>>v>>c;
    		g.add_edge(u-1,v-1,-c);
    	}
    	
    	g.bellmanford(0);
    }
    
    return 0;
}

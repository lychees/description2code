//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <fstream>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define ull unsigned long long
//#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
#define sz(a) (int)(a).size()
/* Defines end */

int n, m;
double a[1005][1005];
double f[1005][1005];

void Solve() {
    scanf("%d %d", &n, &m);
    f[1][1] = 1;
    for (int i = 1; i <= n + 1; ++i) {
        for (int j = 1; j <= m + 1; ++j) {
            if (j != m + 1 && i != n + 1) scanf("%lf", &a[i][j]);
            if (i == 1 && j == 1) continue;
            f[i][j] = 0;
            if (i > 1 && j != m + 1) f[i][j] += f[i - 1][j] * (1 - a[i - 1][j]);
            if (j > 1 && i != n + 1) f[i][j] += f[i][j - 1] * a[i][j - 1];
        }
    }
    double res = 0;
    for (int i = 1; i <= n; ++i) {
        res += f[i][m + 1] * (m + i - 1);
    }
    for (int i = 1; i <= m; ++i) {
        res += f[n + 1][i] * (n + i - 1);
    }
    printf("%.6f\n", res);
}

int main(void) {
    #ifdef nobik
        freopen("input.txt", "rt", stdin);
        freopen("output.txt", "wt", stdout);
    #endif
    int t; cin >> t;
    for (int i = 1; i <= t; ++i) {
        Solve();
    }
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef long long int ll;
#define F(i,a,b) for(int i = (int)(a); i <= (int)(b); i++)
#define RF(i,a,b) for(int i = (int)(a); i >= (int)(b); i--)
#define TRvii(c, it) for(vii::iterator it = (c).begin(); it != (c).end(); it++)
#define MAX 100005
vector<int> path;
int dist[MAX];
int parent[MAX];
int invites[MAX];
vii AdjList[MAX];
#define gc getchar_unlocked
int read_int(){
    register int x = 0, c = gc();
    int sign = 1;
    while(c!='-' && (c<48 || c>57) ) c = gc();
    if(c=='-')
        sign = -1, c = gc();
    while(c>=48 && c<=57)
        x = (x<<1) + (x<<3) + c - 48, c = gc();
    return sign*x;
}
int main()
{
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int N,u,v,k,E,s;
    queue<int> q;
    N = read_int();
    E = read_int();
    F(i,1,E)
    {
        u = read_int();
        v = read_int();
        AdjList[u].push_back(make_pair(v,0));
        AdjList[v].push_back(make_pair(u,0));
    }
    s = read_int();
    q.push(s);
    parent[s] = -1;
    memset(dist, -1, sizeof(dist));
    dist[s]=0;
    while(!q.empty())
    {
        u = q.front();
        q.pop();
        TRvii(AdjList[u], _v)
        if(dist[_v->first] == -1)
        {
            dist[_v->first] = dist[u]+1;
            parent[_v->first] = u;
            q.push(_v->first);
        }
    }
    int M = -1;
    F(i,1,N) M = max(dist[i],M);
    vector<vi> V;
    V.resize(N);
    F(i,1,N)
    {
        V[dist[i]].push_back(i);
    }
    F(i,0,V[M].size()-1)
        invites[V[M][i]] = 1;
    RF(i,M-1,0)
    {
        int z = V[i].size();
        F(j,0,z-1)
        {
            u = V[i][j];
            TRvii(AdjList[u],_v)
            {
                if(dist[_v->first] == dist[u]+1)
                    invites[u] += invites[_v->first];
            }
        }
    }
    F(i,1,N) printf("%d ",invites[i]);
    /*F(i,1,N)
    {
        if(dist[i] == M)
        {
            printf("1 ");
            continue;
        }
        int C = 0;
        TRvii(AdjList[i], _v)
        {

            if(dist[_v->first] == dist[i]+1)
                C++;
        }
        printf("%d ",C);
    }*/
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
#define ll long long 
const int MOD=1e09+7;
map<ll,ll>nfib;
ll nthnonfib(ll n) {
	if(nfib.find(n)!=nfib.end())return nfib[n];
    vector<ll> fibs(3);
    fibs[0]=2,fibs[1]=3,fibs[2]=5;
    for (int x = 3; x < 50; ++x)
        fibs.push_back(fibs[x - 1] + fibs[x - 2]);
    vector<ll> gaps(3);
    gaps[0]=0,gaps[1]=1,gaps[2]=2;
    for (int x = 3; x < 50; ++x)
        gaps.push_back(gaps[x - 1] + gaps[x - 2] + 1);
    partial_sum(gaps.begin(), gaps.end(), gaps.begin());
    ll result;
    for (int x = 1; x < gaps.size(); ++x) {
        if (gaps[x] >= n) {
            result = fibs[x] + n - gaps[x - 1];
            break;
        }
    }
    nfib[n]=result;
    return result;
}
map<ll,ll> Fib;
ll fib(ll n){
    if(n<2) return 1;
    if(Fib.find(n) != Fib.end()) return Fib[n];
    Fib[n] = (fib((n+1) / 2)*fib(n/2) + fib((n-1) / 2)*fib((n-2) / 2)) % MOD;
    return Fib[n];
}
ll fastexp(ll a,ll b){
	ll ans=1;
	while(b){
		if(b&1)ans=(ans*a)%MOD;
		b>>=1;
		a=(a*a)%MOD;
	}
	return ans;
}
int main() {
    int t;
    long long n;
    cin>>t;
    while(t--){
    	//cin>>n;
    	scanf("%lld",&n);
    	ll a=fib((ll)(n-1));
    	ll b=nthnonfib(n)%MOD;
    //	cout<<a<<" "<<b<<"\n";
    	printf("%lld\n",fastexp(b,a)%MOD);
    	//cout<<fastexp(b,a)%MOD<<"\n";
    }
	return 0;
}
class Node:
	def __init__(self):
		self.max_w = -1
		self.edges = {}

def add(root, word, w):
	
	node = root
	for l in word:
		
		if node.max_w < w:
			node.max_w = w
			
		if node.edges.has_key(l):
			node = node.edges[l]
		else:
			node.edges[l] = Node()
			node = node.edges[l]
	
	if node.max_w < w:
			node.max_w = w

def find_max(root, prefix):
	node = root
	for l in prefix:
		if node.edges.has_key(l):
			node = node.edges[l]
		else:
			return -1
	
	return node.max_w

n, q = map(int, raw_input().split())
root = Node()
for i in range(n):
	word, w = raw_input().split()
	w = int(w)
	add(root, word, w)

for i in range(q):
	prefix = raw_input()
	print find_max(root, prefix)
		

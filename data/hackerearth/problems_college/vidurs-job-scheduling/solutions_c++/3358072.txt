#include <bits/stdc++.h>
 
using namespace std;
 
long long arr [2000 + 10];
long long dp [2000 + 10][2000 + 10];
long long n;
 
long long rec (long long l , long long r){			// Top Down DP Approach
 
    long long day = n - (r - l);					// you can calculate the day using this equation
	
    if(day == n) return dp [l][l] = n * arr [l];   // base case when (l == r) or (day == n)
	
    if(dp[l][r] != -1) return dp [l][r];           // return the state if it is calculated before
 
    return dp [l][r] = max (day * arr[l] + rec(l + 1 , r) , day * arr[r] + rec(l , r - 1));     // try to pop from first or from last
}
 
int main()
{
 
    cin >>  n       ;
 
    for(int i = 0; i < n; i++)
        cin >> arr[i];
 
    memset(dp , -1 , sizeof(dp));                 // states aren't calculated yet
    cout <<  rec(0 ,  n  -  1);
 
    return 0;
}
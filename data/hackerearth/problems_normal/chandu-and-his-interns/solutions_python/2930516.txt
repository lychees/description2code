def rwh_primes1(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Returns  a list of primes < n """
    sieve = [True] * (n//2)
    for i in range(3,int(n**0.5)+1,2):
        if sieve[i//2]:
            sieve[i*i//2::i] = [False] * ((n-i*i-1)//(2*i)+1)
    return [2] + [2*i+1 for i in range(1,n//2) if sieve[i]]

def can_drink(x,primes):
    if x <= 2:
        return False
    sq_root = int(x**0.5)+1
    for prime in primes:
        if prime >= sq_root:
            return False
        if x%prime==0:
            y = x//prime
            if prime != y:
                return True
    return False

primes = rwh_primes1(10**4)

assert not can_drink(1, primes)
assert not can_drink(2, primes)
assert not can_drink(3, primes)
assert not can_drink(4, primes)
assert not can_drink(5, primes)
assert can_drink(6, primes)
assert not can_drink(7, primes)
assert can_drink(8, primes)
assert not can_drink(9, primes)
assert can_drink(10, primes)

t = int(raw_input())
for _ in xrange(t):
    x = int(raw_input())
    print 'YES' if can_drink(x,primes) else 'NO'

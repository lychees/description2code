#include<bits/stdc++.h>
#define ll long long int
using namespace std;
vector<ll> v;

// marks all mutiples of 'a' ( greater than 'a' but less than equal to 'n') as 1.
bool search_(ll x){
ll i;
for(i=0;i<v.size();i++)
    if (x%v[i]==0) return false;
return true;
}


void markMultiples(bool arr[], ll a, ll n)
{
    ll i = 2, num;
    while ( (num = i*a) <= n )
    {
        arr[ num-1 ] = 1; // minus 1 because index starts from 0.
        ++i;
    }
}

// A function to print all prime numbers smaller than n
void SieveOfEratosthenes(ll n)
{
    // There are no prime numbers smaller than 2
    if (n >= 2)
    {
        // Create an array of size n and initialize all elements as 0
        bool arr[n];
        memset(arr, 0, sizeof(arr));

        /* Following property is maintained in the below for loop
           arr[i] == 0 means i + 1 is prime
           arr[i] == 1 means i + 1 is not prime */
        for (ll i=1; i<n; ++i)
        {
            if ( arr[i] == 0 )
            {
                //(i+1) is prime, print it and mark its multiples
                v.push_back(i+1);
               // printf("%d ", i+1);
                markMultiples(arr, i+1, n);
            }
        }
    }
}

int main(){
SieveOfEratosthenes(1000000);
ll q;
scanf("%lld",&q);
while(q--){
        ll x,y,sum=0;;
        cin>>x>>y;
        while(x!=y){
            if (log2(x)>log2(y)){
             if (x<1000000){
            if (binary_search(v.begin(),v.end(),x))
                sum-=x;
            else sum+=x;}
            else{
               if (search_(x)) sum-=x;
               else sum+=x;
            }
            x/=2;}
            else  if (log2(x)<log2(y)){
                if (y<1000000){
            if (binary_search(v.begin(),v.end(),y))
                sum-=y;
            else sum+=y;}
            else{
                if (search_(y)) sum-=y;
               else sum+=y;

            }
            y/=2;}
            else{
                if (y<1000000){
            if (binary_search(v.begin(),v.end(),y))
                sum-=y;
            else sum+=y;}
            else{
                if (search_(y)) sum-=y;
               else sum+=y;

            }
            y/=2;
           if (x<1000000){
            if (binary_search(v.begin(),v.end(),x))
                sum-=x;
            else sum+=x;}
            else{
               if (search_(x)) sum-=x;
               else sum+=x;
            }
            x/=2;
            }
        }
          if (x<1000000){
            if (binary_search(v.begin(),v.end(),x))
                sum-=x;
            else sum+=x;}
            else{
               if (search_(x)) sum-=x;
               else sum+=x;
            }
        cout<<sum<<endl;

}
return 0;
}


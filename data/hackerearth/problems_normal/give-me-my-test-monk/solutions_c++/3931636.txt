#include <cstdio>
#include <cstring>

#define MOD 1000000007

long long choose[101][101];

long long computeChoose(int n, int k)
{
	if (choose[n][k] != -1)
	{
		return choose[n][k];
	}
	if (k == 0 || k == n)
	{
		choose[n][k] = 1;
		return 1;
	}
	choose[n][k] = (computeChoose(n-1, k) + computeChoose(n-1, k-1)) % MOD;
	return choose[n][k];
}

int main()
{
	int n, l, r, inverse[100] = {MOD}, last = 1;
	scanf("%d %d %d", &n, &l, &r);
	long long derange[101] = {1, 0}, num = 0, den = 1, a = 1, b;
	for (int i = 2; i <= 100; i++)
	{
		derange[i] = (i-1) * (derange[i-2] + derange[i-1]);
		derange[i] %= MOD;
	}
	memset(choose, -1, sizeof(choose));
	for (int i = l; i <= r; i++)
	{
		num += derange[i] * computeChoose(n, i);
		num %= MOD;
	}
	for (int i = 2; i <= n; i++)
	{
		den *= i;
		den %= MOD;
	}
	inverse[1] = den;
	for (int i = 2; inverse[i-1] != 1; i++)
	{
		inverse[i] = inverse[i-2] % inverse[i-1];
		last = i;
	}
	b = -(inverse[last-2] / inverse[last-1]);
	for (int i = last-3; i >= 0; i--)
	{
		long long tempa = b, tempb = a - b * (inverse[i]/inverse[i+1]);
		a = tempa;
		b = tempb;
	}
	b %= MOD;
	while (b < 0)
	{
		b += MOD;
	}
	printf("%lld\n", (num * b) % MOD);
}
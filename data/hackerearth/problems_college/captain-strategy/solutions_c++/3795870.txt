#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<double,int> pdi;
typedef pair<pii,int> ppi;
typedef pair<ll,int> pli;
typedef pair<int,ll> pil;
typedef pair<ll,ll> pll;
#define debug 0
#define PB push_back
#define MP make_pair
#define LB lower_bound
#define UB upper_bound
#define B begin()
#define E end()
#define F first
#define S second
#define CLR0(qwgh) memset(qwgh,0,sizeof(qwgh))
#define CLR1(qwgh) memset(qwgh,-1,sizeof(qwgh))
#define rep(i,a,b) for(i=a;i<=b;i++)
#define rem(i,a,b) for(i=a;i>=b;i--)
#define scd(x) scanf("%d",&x)
#define scl(x) scanf("%lld",&x)
#define scs(x) scanf("%s",x)
#define scc(x) scanf("%c",&x)
#define prd(x) printf("%d\n",x)
#define prl(x) printf("%lld\n",x)
#define prc(x) printf("%c\n",x)
#define prs(x) printf("%s\n",x)
#define parr(a,n) for(int o=0;o<n;o++) printf("%d ",a[o]);printf("\n")
#define parr1(a,n) for(int o=1;o<=n;o++) printf("%d ",a[o]);printf("\n")
#define MX 100005
int tree[400005];
vector<int>v[MX];
int cnt,ar[MX],n;
int con1[MX],con2[MX];
map<int,pii>map1;
void dfs(int a,int p){
	vector<int>::iterator it,it1;
	int temp;
	temp=cnt++;
	for(it=v[a].B;it!=v[a].E;it++){
		if(*it!=p){
			dfs(*it,a);
		}
	}
	con1[a]=temp;
	con2[a]=cnt-1;
	if(debug==1)
	cout<<"Hello";
}
 
void update_tree(int i,int value){
	//ar[i]+=value;
	while(i<=100000){
		tree[i]+=value;
		i+=(i&-i);
		//printf("i %d\n",i);
	}
}
 
 
int query_tree(int i){
	int sum=0;
	while(i>0){
		sum+=tree[i];
		i-=(i&-i);
		//printf("i %d\n",i);
	}
	return sum;
}
 
int main(){
	int i,t1,t2,m;
	char ch;
	//freopen("inp.in","r",stdin);
		if(debug==1)
	cout<<"Hello";
	scd(n);scd(m);
	for(i=1;i<=n;i++){
		scd(ar[i]);
	}
		if(debug==1)
	cout<<"Hello";
	for(i=1;i<n;i++){
		scanf("%d%d\n",&t1,&t2);
		v[t1].PB(t2);
		v[t2].PB(t1);
	}
	cnt=1;
	dfs(1,-1);
	CLR0(tree);
		if(debug==1)
	cout<<"Hello";
		if(debug==1)
	cout<<"Hello";
	
	for(i=1;i<=n;i++)
		update_tree(con1[i],ar[i]);
	for(i=1;i<=m;i++){
		scanf("%c",&ch);
		while(ch<'A' || ch>'Z')
			scanf("%c",&ch);
		if(ch=='Q'){
			scanf("%d\n",&t1);
			t2=query_tree(con2[t1]);
				if(debug==1)
	cout<<"Hello";
			t2-=(query_tree(con1[t1]-1));
				if(debug==1)
	cout<<"Hello";
			printf("%d\n",t2);
		}
		else if(ch=='U'){
			scanf("%d%d\n",&t1,&t2);
			update_tree(con1[t1],t2-ar[t1]);
			ar[t1]=t2;
		}
			if(debug==1)
	cout<<"Hello";
		if(debug==1)
	cout<<"Hello";
	}
	return 0;
}
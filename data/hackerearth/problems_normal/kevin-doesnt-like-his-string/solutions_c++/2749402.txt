#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<utility>
#include<set>
#include<map>
#include<queue>
#include<vector>
#include<string>
#include<functional>
#include<cstring>

//code by cl3488

#define ri(X) scanf("%d", &(X))
#define rii(X, Y) scanf("%d%d", &(X), &(Y))
#define riii(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define dri(X) int (X); scanf("%d", &X)
#define drii(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define driii(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define pb push_back
#define mp make_pair
#define rep(i, s, t) for ( int i=(s) ; i <(t) ; i++)
#define fill(x, v) memset (x, v, sizeof(x))
#define why(d) cout << (d) << "!\n";
typedef long long ll;
using namespace std;
typedef pair<int, int> pii;
const ll INF = 'a' + 27;
const ll MOD = 1e9 + 7;

int main(){
	if (fopen("input.txt", "r")) freopen("input.txt", "r", stdin);
	drii(N, K);
	string s; cin >> s;
	string ans = s;
	if (K == 1){
		cout << ans << "\n";
		return 0;
	}
	priority_queue<pii, vector<pii>, greater<pii>> suff;
	rep(i, 0, N){
		suff.push(pii(s[i], -i));
	}
	priority_queue<pii, vector<pii>, greater<pii>> Q;//the pii is only to preserve duplicates.
	rep(i, 0, N){
		//why(i);
		if (K == 0){
			//why(5000);
			if (s[i] == INF){
				//why(50);
				s[i] = Q.top().first;
				Q.pop();
			}
			continue;
		}
		if (K == 1 && s[i] != INF){
			//why(3000);
			if (s[i] > Q.top().first){
				K = 0;
				//why(Q.top().first - '0');
				//why(40);
				Q.push(pii(s[i], i));
				s[i] = Q.top().first;
				Q.pop();
			}
			continue;
		}
		while (!suff.empty() && -suff.top().second <= i) suff.pop();//lazy deletion.
		
		if ((suff.empty() || s[i] <= suff.top().first) && (Q.empty() || s[i] <= Q.top().first)){
			//why(4000);
			continue;
		}
		//otherwise, we replace it.  Preference goes to the one in Q.
		if (!suff.empty() && (Q.empty() || suff.top().first < Q.top().first)){
			//why(2000);
			if (s[i] != INF) K -= 2;
			else K--;
			Q.push(pii(s[i], i));
			int j = -suff.top().second;
			s[i] = s[j];
			s[j] = INF;
			//why(j);
			suff.pop();
			
		}
		else{
			//why(9000);
			if (s[i] != INF) K--;
			Q.push(pii(s[i], i));
			s[i] = Q.top().first;
			Q.pop();
		}
		
		//cout << s[i] << "\n";
	}
	cout << s << "\n";
	return 0;
}
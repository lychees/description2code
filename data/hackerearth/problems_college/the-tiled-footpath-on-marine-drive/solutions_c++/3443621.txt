#include <iostream>
#include <math.h>
using namespace std;


void multiply(long long F[2][2], long long M[2][2], long long p);
 
void power(long long F[2][2], long long n, long long p);
 
/* function that returns nth Fibonacci number */
long long fib(long long n, long long p)
{
  long long F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-1, p);
  return F[0][0]%p;
}
 
/* Optimized version of power() in method 4 */
void power(long long F[2][2], long long n, long long p)
{
  if( n == 0 || n == 1)
      return;
  long long M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2, p);
  multiply(F, F, p);
 
  if (n%2 != 0)
     multiply(F, M,p);
}
 
void multiply(long long F[2][2], long long M[2][2], long long p)
{
	
  long long x =  F[0][0]*M[0][0] + F[0][1]*M[1][0];
  long long y =  F[0][0]*M[0][1] + F[0][1]*M[1][1];
  long long z =  F[1][0]*M[0][0] + F[1][1]*M[1][0];
  long long w =  F[1][0]*M[0][1] + F[1][1]*M[1][1];

  int a = pow(2,15);
  if(x>=a) 
  	 x=x%p;
  if(y>=a) 
  	 y=y%p;
  if(w>=a) 
  	 w=w%p;
  if(z>=a) 
  	 z=z%p;
  	 
 
  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}

int main()
{
	long long test,k;
	long long n;
	cin >> test;
	while(test-->0)
	{
	cin >> n >> k;	
	if(n==0)
	 	cout << 0 << endl;
	else 
	{
    
    long long p = pow(2,k);
    long long ans = fib(n+1,p);
    // ans=ans % p;
    
    cout << ans << endl;
	}
	}
	return 0;
}

#include<iostream>
#include<list>
#include<iterator>
using namespace std;
class Graph{
    int v;
    list<int> *adj;
    public:
    Graph(int v);
    void add_edge(int v,int w);
    void bfs(int s);
};
Graph :: Graph(int v)
{
    this->v=v;
    adj = new list<int>[v];
}
void Graph::add_edge(int v,int w)
{
    adj[v].push_back(w);
}
void Graph:: bfs(int s)
{
    list<int> queue;
    bool *visited = new bool[v];
    for(int i=0;i<v;++i)
        visited[i]=false;
    queue.push_back(s);
    visited[s]=true;
    list<int>::iterator i;
    int *dis = new int[v];
    for(int i=0;i<v;++i)
        dis[i]=-1;
    dis[s]=0;
    int d;
    while(!queue.empty())
    {
        s=queue.front();
        //cout<<s<<" ";
        d=dis[s];
        queue.pop_front();
        for(i=adj[s].begin();i!=adj[s].end();++i)
        {
            if(!visited[*i])
            {
                queue.push_back(*i);
                visited[*i]=true;
                dis[*i]=d+1;
            }
        }
    }
    cout<<endl;
    for(int i=1;i<v;++i)
    {
        cout<<dis[i]<<endl;
    }
}

int main()
{
    int t,i,j,n,m,temp,l,r;
        cin>>n>>m;
        Graph g(n);
        for(j=0;j<m;++j)
        {
            cin>>l>>r;
            g.add_edge(l,r);
            g.add_edge(r,l);
        }
        g.bfs(0);
  /*  Graph g(5);
    g.add_edge(0,1);
    g.add_edge(0,4);
    g.add_edge(1,2);
    g.add_edge(2,4);
    g.add_edge(3,2);
    g.add_edge(4,3);
    g.add_edge(4,2);
    //g.add_edge(2,0);
    g.bfs(3); */
    return 0;
}

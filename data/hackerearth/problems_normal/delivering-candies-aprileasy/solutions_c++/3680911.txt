#include <stdio.h>
#include <vector>
#include <algorithm>
#include <queue>
#define pb push_back
#define lli long long int
#define MAXN 100005
#define INF 10000000000000000LL
using namespace std;

int k[MAXN];
vector <int> g[MAXN];
vector <int> w[MAXN];
lli d[MAXN];
lli r[MAXN];

void dijkstra(int s, int n) {
	priority_queue <pair <lli, int> > pq;
	for (int i = 1; i <= n; i++) {
		d[i] = INF;
	}
	d[s] = 0;
	pq.push(make_pair(0, s));
	while(!pq.empty()) {
		lli cost = -pq.top().first;
		int next = pq.top().second;
		pq.pop();
		if (d[next] < cost) {
			continue;
		}
		for (int i = 0; i < (int)g[next].size(); i++) {
			int viz = g[next][i];
			if (d[viz] > d[next] + w[next][i]) {
				d[viz] = d[next] + w[next][i];
				pq.push(make_pair(-d[viz], viz));
			}
		}
	}
	return;
}	

int main(void) {
	int n, m, s;
	int x, y, z;

	scanf(" %d %d %d", &n, &m, &s);
	for (int i = 1; i <= n; i++) {
		scanf(" %d", &k[i]);
	}
	for (int i = 0; i < m; i++) {
		scanf(" %d %d %d", &x, &y, &z);
		g[x].pb(y);
		g[y].pb(x);
		w[x].pb(z);
		w[y].pb(z);
	}
	dijkstra(s, n);
	lli res = 0;
	lli sum = 0;
	for (int i = 1; i <= n; i++) {
		if (d[i] != INF) {
			sum += k[i];
			res += d[i] * k[i];
		}
	}

	lli r;
	for (int i = 1; i <= n; i++) {
		if (d[i] != INF) {
			r = res - d[i] * k[i] + (sum - k[i]) * d[i];
		} else {
			r = 0;
		}
		if (i != 1) {
			printf(" ");
		}
		printf("%lld", r);
	}
	printf("\n");
	return 0;
}
	
		
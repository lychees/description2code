#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i = 0;i < N;i++)
#define frep(i,a,b) for(int i = a;i <= b;i++)
#define pii pair<int , int>
#define pll pair<ll , ll>
#define vii vector<int>
#define vpii vector< pii >
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcount(x)
#define print(A,j,k) for(int ii=j;ii<=k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)
#define FILE freopen("inp.txt" , "r" , stdin);
#define ld long double

const int N = 2505;
const int MOD = 1e9 + 9;

ll A[N] , B[N] , dp[N][N] , maxdp[N];
ll n , s , m , p;

ll Distance(ll prev , ll next) {
	if (prev >= next)
		return (prev - next) * m;
	return (next - prev) * p;
}

int main(int argc, char const *argv[])
{
	fast;

//	FILE;

	cin >> n >> s >> m >> p;

	rep(i , n) {
		cin >> A[i];
		B[i] = A[i];
	}

	sort(B , B + n);
	map<int , int> M , rev;
	int r = 0;
	rep(i , n) {
		if (M[B[i]] == 0) {
			M[B[i]] = ++r;
			rev[r] = B[i];
		}
	}

	rep(i , n) {
		A[i] = M[A[i]];
	}

	// frep(i , 1 , r)
	// 	cout << rev[i] << '\n';

	//r distinct values

	rep(i , n) {
		maxdp[i] = -INF;
		frep(j , 1 , r) {	//taking height of jth sorted building
			int ph = rev[A[i]];
			int nh = rev[j];
			// cout << ph << ' ' << nh << '\n';
			if (i == 0) {	
				dp[i][j] = -Distance(ph , nh);
				maxdp[i] = max(maxdp[i] , dp[i][j]);
			}
			else {
				//we are giving building i height sorted[j]
				dp[i][j] = -Distance(ph , nh) + dp[i - 1][j] + s;
				dp[i][j] = max(dp[i][j] , -Distance(ph , nh) + maxdp[i - 1]);
				maxdp[i] = max(maxdp[i] , dp[i][j]);
			}
		}
	}

	// rep(i , n) {
	// 	frep(j , 1 , r) {
	// 		cout << dp[i][j] << ' ';
	// 	}
	// 	cout << '\n';
	// }

	ll ans = 0;
	frep(i , 1 , r)
		ans = max(ans , dp[n - 1][i]);
	cout << ans << '\n';

	return 0;
}
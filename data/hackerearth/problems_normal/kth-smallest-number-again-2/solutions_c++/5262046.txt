#include <bits/stdc++.h>
using namespace std;

#define long long long 
typedef pair<long, long> ll;
#define xx first
#define yy second
int n, q;
vector<ll> a;
void read() {
	scanf("%d%d", &n, &q);
	a.resize(n);
	for (int i = 0; i < n; ++i) scanf("%lld%lld", &a[i].xx, &a[i].yy);
}

vector<long> b;
void preprocess() {
	sort(a.begin(), a.end());
	for (int i = 0; i < (int) a.size(); ++i) {
		if (a[i] == ll(LLONG_MAX, LLONG_MAX)) continue;
		for (int f = i + 1; f < (int) a.size(); ++f) {
			if (a[f] == ll(LLONG_MAX, LLONG_MAX)) continue;
			if (a[i].yy + 1 >= a[f].xx) {
				a[i].yy = max(a[i].yy, a[f].yy);
				a[f] = ll(LLONG_MAX, LLONG_MAX);
			}
		}
	}
	sort(a.begin(), a.end());
	while (a.size() and a.back() == ll(LLONG_MAX, LLONG_MAX)) a.pop_back();
	b.clear();
	for (int i = 0; i < (int) a.size(); ++i) {
		b.push_back(a[i].yy - a[i].xx + 1);
	}
	partial_sum(b.begin(), b.end(), b.begin());
}

long process(long k) {
	int t = lower_bound(b.begin(), b.end(), k) - b.begin();
	if (t == (int) a.size()) return -1;
	if (t) k -= b[t - 1];
	return a[t].xx + k - 1;
}

void processAll() {
	while (q--) {
		long k; scanf("%lld", &k);
		long ans = process(k);
		printf("%lld\n", ans);
	}
}

int main() {
    int t; cin >> t;
    while (t--) {
    	read();
    	preprocess();
    	processAll();
    }
    return 0;
}

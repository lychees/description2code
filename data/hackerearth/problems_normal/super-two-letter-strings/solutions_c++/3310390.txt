#include <iostream>
using namespace std;
long mod=1000000000+7;
int u=0;
long dp[10005][11][2];
void init()
{
	for(int i=0;i<10005;i++)
	{
		for(int j=0;j<11;j++)
		{
			dp[i][j][0]=0;dp[i][j][1]=0;
		}
	}
}
long solve(int n,int p,int last)
{
	if(n==0)return (long)1;
	if(n==1 && p>0)return (long)2;
	if(p<0)return 0;
	if(n==1)return (long)1;
	if(dp[n][p][last]!=0)return dp[n][p][last];
	if(last==1)
		dp[n][p][last]=((solve(n-1,p-1,0)%mod)+(solve(n-1,u,1)%mod))%mod;
	else if(last==0)
		{
			if(p>0)
				dp[n][p][last]=((solve(n-1,p-1,0)%mod)+(solve(n-1,u,1)%mod))%mod;
			else 
				dp[n][p][last]=solve(n-1,u,1)%mod;
		}
	return dp[n][p][last];
}
int main()
{
    int t;
    cin>>t;
    while(t>0)
    {
    	t--;
    	init();
    	int n,p;
    	cin>>n>>p;
    	u=p-1;
    	cout<<solve(n-1,p-1,1)<<endl;
    }
    return 0;
}

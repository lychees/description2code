#include<iostream>
#include<cstdio>
#define mod 1000000007
long long int d[200];
long long int nck[101][101];
int n;
void compute()
{
int i,j;
for(i=0;i<=n;i++)
{
  for(j=0;j<=i;j++)
  {
   if(i==j||j==0)
   nck[i][j]=1;
   else
   nck[i][j]=(nck[i-1][j]+nck[i-1][j-1])%mod;
  }


}
d[0]=1;
d[1]=0;
for(i=2;i<=n;i++)
{
d[i]=((i-1)%mod)*(d[i-1]+d[i-2])%mod;
}


}
long long int fast_exponentation(long long int a ,long long int b)
{
long long int ans=1;
while(b!=0)
{
if(b&1)
{
ans=(ans*a)%mod;
}

a=a*a;
a=a%mod;
b=b>>1;
}
return ans;
}
long long int fermet_inverse(long long int a)  ///   (a^(-1))%m=(a^(m-2))%m
{
return fast_exponentation(a,mod-2)%mod;
}
long long int fact(int nn)
{
long long int ans=1,i;
for(i=1;i<=nn;i++)
{
ans=(ans*i)%mod;
ans%=mod;

}
return ans;

}
using namespace std;
int main()
{
int l,r,i,j;
long long int ans=0;

scanf("%d%d%d",&n,&l,&r);
compute();
/***for(i=0;i<=n;i++)
{
for(j=0;j<=n;j++)
{
printf("%lld ",nck[i][j]);
}

printf("\n");
}

printf("\n\n");


for(i=0;i<=n;i++)
printf("%lld ",d[i]);*///
for(i=l;i<=r;i++)
{
ans+=((nck[n][i])%mod)*(d[i]%mod);
ans%=mod;
}
long long int jj;
jj=fermet_inverse(fact(n));
///printf("\n %lld %lld\n",ans,jj);
ans=ans*jj;
ans%=mod;
printf("%lld\n",ans);
return 0;
}

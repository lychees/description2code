/*input
2
1 2
1 3
*/
#include <bits/stdc++.h>
#include<stdio.h>
using namespace std;
#define pii pair<long long,long long>
#define F(i,a,b) for(ll i = (ll)(a); i <= (ll)(b); i++)
#define RF(i,a,b) for(ll i = (ll)(a); i >= (ll)(b); i--)
#define PI 3.14159265
#define ll long long
#define ff first
#define ss second
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define INF 1000000009
#define mod 1000000007
vector <ll> v;
ll arr[1005][1005];
bool vis[1005][1005];
ll dp[1005][1005];
ll n;
bool check(ll i,ll j,ll x,ll y)
{
	if(i>=1 && i<=n && j>=1 && j<=n && arr[i][j]<arr[x][y])
		return true;
	else
		return false;
}
ll dfs(ll x,ll y)
{
	if(vis[x][y])
		return dp[x][y];
	vis[x][y] = 1;
	if(check(x-1,y,x,y))
	{
		if(!vis[x-1][y])
			dp[x][y] += dfs(x-1,y);
		else
			dp[x][y] = (dp[x][y]%mod + dp[x-1][y]%mod)%mod;
	}
	if(check(x+1,y,x,y))
	{
		if(!vis[x+1][y])
			dp[x][y] += dfs(x+1,y);
		else
			dp[x][y] = (dp[x][y]%mod + dp[x+1][y]%mod)%mod;
	}
	if(check(x,y+1,x,y))
	{
		if(!vis[x][y+1])
			dp[x][y] += dfs(x,y+1);
		else
			dp[x][y] = (dp[x][y]%mod + dp[x][y+1]%mod)%mod;
	}
	if(check(x,y-1,x,y))
	{
		if(!vis[x][y-1])
			dp[x][y] += dfs(x,y-1);
		else
			dp[x][y] = (dp[x][y]%mod + dp[x][y-1]%mod)%mod;
	}
	return dp[x][y];
}
int main() 
{
	std::ios::sync_with_stdio(false);
	cin>>n;
	F(i,1,n)
	{
		F(j,1,n)
		{
			cin>>arr[i][j];
			dp[i][j] = 1;
		}
	}
	memset(vis,0,sizeof(vis));
	F(i,1,n)
	{
		F(j,1,n)
		{
			if(vis[i][j]==0)
			{
				dp[i][j] = dfs(i,j);
			}
		}
	}
	ll ans = 0;
	F(i,1,n)
	{
		F(j,1,n)
		{
			ans = (ans%mod + dp[i][j]%mod)%mod;
		}
	}
	cout<<ans<<endl;
	return 0;
}
#include<stdio.h>
#include<stdlib.h>
void merge(int a[],int first,int mid,int last)
{
     int i=first,j=mid+1,l=first,b[101];
     while(i<=mid && j<=last)
     {
        if(a[i]<a[j])
        b[l++]=a[i++];
        else b[l++]=a[j++];
     }
     while(i<=mid)
     b[l++]=a[i++];
     while(j<=last)
     b[l++]=a[j++];
     for(i=first;i<=last;i++)
     a[i]=b[i];
}
void mergesort(int a[],int first,int last)
{
     int mid;
     if(first<last)
     {
      mid=(first+last)/2;
      mergesort(a,first,mid);
      mergesort(a,mid+1,last);
      merge(a,first,mid,last);
      }
}

int find(int set[], int n, int sum)
{
    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    //  with sum equal to i
    int subset[sum+1][n+1];
    int y=1,i,j;

    // If sum is 0, then answer is true
    for (i = 0; i <= n; i++)
      subset[0][i] = 1;

    // If sum is not 0 and set is empty, then answer is false
    for (i = 1; i <= sum; i++)
      subset[i][0] = 0;

     // Fill the subset table in botton up manner
     for (i = 1; i <= sum; i++)
     {
       for (j = 1; j <= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= set[j-1])
           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
       }
       if(subset[i][n]==1)
       y++;
     }

    

     return y;
}
int main()
{
    int i,t,n,a[101];
    scanf("%d",&t);
    while(t--)
    {
        int y=0;
        scanf("%d",&n);
        for(i=0;i<n;i++)
        scanf("%d",&a[i]),y+=a[i];
        printf("%d\n",find(a,n,y));
    }
    return 0;
}
#include <bits/stdc++.h>
using namespace std;

int n;
vector<vector<int>> a;
vector<int> dest;

void read() {
	cin >> n;
	a.clear();
	a.resize(n, vector<int>(26, 0));
	for (int i = 0; i < n; ++i) {
		string t; cin >> t;
		for (auto& c: t) {
			a[i][c - 'a'] ++;
		}
	}
	string t; cin >> t;
	dest.clear(); dest.resize(26, 0);
	for (auto& c: t) dest[c - 'a'] ++;
}

vector<int>& operator+= (vector<int>& a, vector<int>& b) {
	for (int i = 0; i < 26; ++i) a[i] += b[i];
	return a;
}

vector<int>& operator-= (vector<int>& a, vector<int>& b) {
	for (int i = 0; i < 26; ++i) a[i] -= b[i];
	return a;
}

void processState(int begin, int state, vector<int>& ans) {
	ans.clear();
	ans.resize(26, 0);
	for (; state; state >>= 1, ++begin) {
		if (!(state & 1)) continue;
		ans += a[begin];
	}
}

set<vector<int>> se;
vector<int> t;
bool process() {
	se.clear();
	int halfN = n / 2;
	for (int i = 0; i < (1 << (halfN)); ++i) {
		processState(0, i, t);
		se.insert(t);
	}
	
	for (int i = 0; i < (1 << (n - halfN)); ++i) {
		processState(halfN, i, t);
		vector<int> u = dest;
		u -= t;
		if (se.count(u)) return true;
	}
	return false;
}

int main() {
    ios_base::sync_with_stdio(false);
    int t; cin >> t;
    while (t--) {
    	read();
    	bool ans = process();
    	cout << (ans ? "YES\n" : "NO\n");
    }
    return 0;
}

#include<iostream>
#include<string>
#include<vector>
#include<algorithm>

using namespace std;

bool is_pallindrome(string s)
{
	string str;
	str = s;
	reverse(s.begin(),s.end());
	if(str == s)
		return 1;
	else
		return 0;

}

int main(void)
{
	int test_cases,i=0;
	cin >> test_cases;
	while(i!=test_cases)
	{
		string line;
		cin >> line;
		int aCost,bCost;
		int total_cost = 0;
		cin >> aCost;
		cin >> bCost;

		unsigned found;
		found = line.find('/');
		if(found == string::npos)
		{
			if(is_pallindrome(line))
				cout << 0 << endl;
			else
				cout << -1 << endl;
		}	
		else
		{
			for(int i=0,j=line.length()-1;i<j;i++,j--)
			{
				if( (line[i] == '/') && (line[j] =='/') )
				{
					total_cost += (2*(min(aCost,bCost)));
					if(min(aCost,bCost) == aCost)
					{
						line[i] = 'a';
						line[j] = 'a';
					}
					else
					{
						line[i] = 'b';
						line[j] = 'b';
					}
				}
				else if(line[i] == '/')
				{
					line[i] = line[j];
					if(line[j] == 'a')
						total_cost += aCost;
					else
						total_cost += bCost;
				}
				else if(line[j] == '/')
				{
					line[j] = line[i];
					if(line[i] == 'a')
                                                total_cost += aCost;
                                        else
                                                total_cost += bCost;
				}
			}
			if(is_pallindrome(line))
				cout << total_cost << endl;
			else
				cout << -1 << endl;
		}	
		i++;
	}
	return 0;
}









#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

int main() {
	int T;
	scanf("%d", &T);
	char *A = new char[2001], *B = new char[2001];
	rep(ii, T) {
		int N, x, y, z, t;
		scanf("%d%d%d%d%d", &N, &x, &y, &z, &t);
		scanf("%s", A);
		scanf("%s", B);
		vector<int> zeros, ones;
		rep(i, N) {
			if(B[i] == '0')
				zeros.push_back(i);
			else
				ones.push_back(i);
		}
		int Z = zeros.size(), O = ones.size();
		vector<vi> dp(N+1, vi(Z+1, INF));
		dp[0][0] = 0;
		rep(i, N) rer(j, 0, Z) {
			int r = dp[i][j];
			if(r == INF) continue;
//			cerr << i << ", " << j << ": " << x << endl;
			char c = A[i];
			int k = i - j;
			if(j < Z)
				amin(dp[i+1][j+1], r + (c == '1' ? y : c == '?' ? z : 0) + abs(i - zeros[j]) * t);
			if(k < O)
				amin(dp[i+1][j], r + (c == '0' ? x : c == '?' ? z : 0));
		}
		int ans = dp[N][Z];
		printf("%d\n", ans);
	}
	return 0;
}
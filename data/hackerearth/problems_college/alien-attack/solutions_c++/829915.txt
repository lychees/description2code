#include <stdio.h>
#include <iostream>
 
using namespace std;

int64_t num= 1000000007;

static int64_t modmul( int64_t a, int64_t b, int64_t mod )
{
       if(a>=mod)
       a %=mod;

       if(b>=mod)
       b%=mod;

       long double res = a;
       res *= b;
       int64_t c = (int64_t)(res / mod);
       a *= b;
       a -= c * mod;
       a %= mod;
       if (a < 0)
       a += mod;
       return a;

}


/* Helper function that multiplies 2 matricies F and M of size 2*2, and
  puts the multiplication result back to F[][] */
void multiply(int64_t F[2][2], int64_t M[2][2]);
 
/* Helper function that calculates F[][] raise to the power n and puts the
  result in F[][]
  Note that this function is desinged only for fib() and won't work as general
  power function */
void power(int64_t F[2][2], int64_t n);
 
int64_t fib(int64_t n)
{
  int64_t F[2][2] = {{1,2},{1,0}};
  if (n == 0)
      return 0;
  power(F, n-2);

  int64_t M[2][2] = {{7,2},{2,0}};
  multiply(F, M);
 
  return F[0][0];
}
 
void multiply(int64_t F[2][2], int64_t M[2][2])
{
  int64_t x =  (modmul(F[0][0],M[0][0],num) + modmul(F[0][1],M[1][0],num))%num;
  int64_t y =  (modmul(F[0][0],M[0][1],num) + modmul(F[0][1],M[1][1],num))%num;
  int64_t z =  (modmul(F[1][0],M[0][0],num) + modmul(F[1][1],M[1][0],num))%num;
  int64_t w =  (modmul(F[1][0],M[0][1],num) + modmul(F[1][1],M[1][1],num))%num;
 
  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}
 
void power(int64_t F[2][2], int64_t n)
{
  if( n == 0 || n == 1)
      return;
  
 int64_t M[2][2] = {{1,2},{1,0}};
  power(F, n/2);
  multiply(F, F);
 
 if(n%2!=0)
  multiply(F,M);
  
}
 
/* Driver program to test above function */
int main()
{
  int64_t T;
  cin>>T;
  while(T--)
  {
    int64_t n;
    cin>>n;
    if(n==1)  cout<<2<<endl;
    else if(n==2) cout<<7<<endl;
    else cout<<fib(n)<<endl;
  }
  return 0;
}
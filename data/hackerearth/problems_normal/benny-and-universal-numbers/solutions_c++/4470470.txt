#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
using namespace std;

typedef long long ll;

const int N = (int)1e6 + 10;
int n;
bool p[100];
ll a[N];
int b[20];

void brute(ll x, int len, bool havePrime)
{
	if (havePrime)
		a[n++] = x;
	if (len == 15) return;
	for (int i = 0; i < 10; i++)
	{
		ll y = x * 10 + i;
		if (y % (len + 1) != b[len + 1]) continue;
		int z = (x % 10) * 10 + i;
		brute(y, len + 1, havePrime || p[z]);
	}
	return;
}

void solve()
{
	for (int i = 1; i <= 15; i++)
	{
		scanf("%d", &b[i]);
		if (b[i] >= i)
		{
			a[n++] = (ll)1e16;
			return;
		}
	}
	for (int i = 2; i < 100; i++)
		p[i] = 1;
	for (int i = 2; i < 100; i++)
	{
		if (!p[i]) continue;
		for (int j = 2 * i; j < 100; j += i)
			p[j] = 0;
	}
	n = 0;
	for (int i = 1; i < 10; i++)
		brute(i, 1, 0);
	if (n > N - 10) throw;
	sort(a, a + n);
	a[n++] = (ll)1e16;
	return;
}

int main()
{
	solve();
	int q;
	scanf("%d", &q);
	while(q--)
	{
		ll l, r;
		scanf("%lld%lld", &l, &r);
		l--;
		printf("%d\n", upper_bound(a, a + n, r) - upper_bound(a, a + n, l));
	}
    return 0;
}

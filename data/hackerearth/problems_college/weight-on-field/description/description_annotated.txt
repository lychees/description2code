Probably you all are familiar with famous tiles problem in which you have to fill 2*n size field using tiles of size 2*1. Now consider that same 2*n size field is composed of 1*1 size cells. So there are total 2*n cells in field. Now we will fill that field with tiles randomly. There would be
a number of ways in which we can fill that field using these tiles ( Actually in classic version of problem, we count the no of ways). Now assume that when a tile is 
put vertically in the field (for example when tile is placed covering cell no (1,1) and (2,1)), it adds a weight of 1 unit each on both cells. But when a tile is 
placed horizontally ( for example when tile is placed covering cell no (1,1) and (1,2)), it doesn't add any weight on any cell. Now as you know there are a lot of 
ways to fill a 2*n size field, in some ways there can be weight on some particular cell, in some other ways there might not be weight on that particular cell 
(depending upon whether the tile covering that particular cell is horizontal or vertical). So there will be some expected value of weight on every cell when you will
fill a 2*n size field randomly. You have to calculate expected value of weight on every cell and find their sum. So you will be given 'n' in input and you have to output desired 
sum of expected value of weight on each cell.

Ex: If n=2, then there are two ways to arrange tiles. In one way both tiles will be horizontal and in other both are vertical. Let four cells are
(1,1), (1,2), (2,1), (2,2). So in first method there will be '0' weight on each cell and in second there will be '1' weight on each cell. So for every cell
expected value of weight is 0.5 , so sum of all four cell will be 0.5 * 4 = 2.

Input: First line will contain 't', number of test cases. 't' lines follow, each containing value of n.

Output: For each test case output the sum of expected weight on each cell (answer must be correct upto 6 decimal places).

Constraints: 

1 ≤ t ≤ 1000

1 ≤ n ≤ 50

SAMPLE INPUT
4
1
2
3
4

SAMPLE OUTPUT
2.000000
2.000000
3.333333
4.000000


/*
Template belongs to : Himanshu Jaju [himanshujaju]
*/

#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)

#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<LL,LL>
#define all(c)    c.begin(),c.end()
#define sz(c)     c.size()
#define clr(c)    c.clear()
#define msi       map<string,int>
#define msit      map<string,int>::iterator
#define pb        push_back
#define mp        make_pair

#define GI(x)     scanf("%d",&x)
#define PI(x)     printf("%d\n",x)

#define FOR(i,a,b)      for(int i=a;i<b;i++)
#define RFOR(i,a,b)     for(int i=b-1;i>=a;i--)

#define gcd(a,b)  __gcd(a,b)
#define MOD       1000000007

#define PI  acos(-1)

#define CASE(x)   cout<<"Case "<<x<<":"<<endl;

VI segTree(1000000);
VI arr(100010);

void buildTree(int l,int r,int pos)
{
      if(l == r)
      {
            segTree[pos] = arr[l];
            return ;
      }
      int mid = (l+r)/2;
      buildTree(l,mid,2*pos);
      buildTree(mid+1,r,2*pos + 1);
      segTree[pos] = segTree[2*pos] + segTree[2*pos + 1];
}

void update(int idx,int val,int l,int r,int pos)
{
      if(l>r || idx>r || idx<l) return ;
      if(l == r && l == idx)
      {
            arr[l] += val;
            segTree[pos] = arr[l];
            return ;
      }
      int mid = (l+r)/2;
      update(idx,val,l,mid,2*pos);
      update(idx,val,mid+1,r,2*pos+1);
      segTree[pos] = segTree[2*pos] + segTree[2*pos + 1];
}

int query(int lQ,int rQ,int l,int r,int pos)
{
      if(l>r || lQ>r || rQ<l) return 0;
      else if(l>=lQ && r<=rQ) return segTree[pos];
      int mid = (l+r)/2;
      return (query(lQ,rQ,l,mid,2*pos) + query(lQ,rQ,mid+1,r,2*pos+1));
}

int main()
{
      inp_s;
      int n;
      cin>>n;
      FOR(i,0,n)
      {
            int x;
            cin>>x;
            arr[x]++;
      }
      buildTree(0,100000,1);
      DRT()
      {
            int type;
            cin>>type;
            if(!type)
            {
                  int a,b;
                  cin>>a>>b;
                  cout<<query(a,b,0,100000,1)<<endl;
            }
            else
            {
                  int a;
                  cin>>a;
                  if(type == 1) update(a,-1,0,100000,1);
                  else update(a,1,0,100000,1);
            }
      }
      return 0;
}


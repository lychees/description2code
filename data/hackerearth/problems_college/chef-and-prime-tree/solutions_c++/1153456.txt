#include <bits/stdc++.h>
using namespace std;
#define si(t) scanf("%d", &t)
string s;
#define MAX 5000006
int primes[MAX];
void gen_primes()
     {
       int i,j;
       for(i=0;i<MAX;i++) primes[i] = 1;
       for(i=2;i<=(int)sqrt(MAX);i++)
         if (primes[i])
           for(j=i;j*i<MAX;j++) primes[i*j] = 0;
        primes[0] = primes[1] = 0;
     }

long long check(int l, int r)
{
    long long ans = 0;
    int flag = 0;
    vector<int>first;
    vector<int>second;
    //finding binary of l
    while(l) {
        first.push_back(l % 2);
        l /= 2;
    }
    reverse(first.begin(), first.end());
    int value = 1;
    first[0] = value;
    for(int i = 1; i < first.size(); i++) {
        if(first[i] == 0) {
            first[i] = value * 2;
            value = value * 2;
        }
        else if(first[i] == 1) {
            first[i] = value * 2 + 1;
            value = value * 2 + 1;
        }
    }

    //finding binary of r
    while(r) {
        second.push_back(r % 2);
        r /= 2;
    }
    reverse(second.begin(), second.end());
    value = 1;
    second[0] = value;
    for(int i = 1; i < second.size(); i++) {
        if(second[i] == 0) {
            second[i] = value * 2;
            value = value * 2;
        }
        else if(second[i] == 1) {
            second[i] = value * 2 + 1;
            value = value * 2 + 1;
        }
    }
    /*cout << "first" << endl;
    for(int i = 0; i < first.size(); i++) {
        cout << first[i] << " ";
    }
    cout << endl;

    cout << "second" << endl;
    for(int i = 0; i < second.size(); i++) {
        cout << second[i] << " ";
    }
    cout << endl;*/

    //finding common point
    int i = 0, j = 0;
    int n = first.size(), m = second.size();
    while(i < n && j < m) {
        if(first[i] != second[j]) {
            break;
        }
        i++; j++;
    }
    i--; j--;
    if(i < n) {
        //cout << "first" << first[i] << endl;
        if(primes[first[i]]) {
            ans -= (long long)first[i];
        }
        else {
            ans += (long long)first[i];
        }
    }
    else {
        //cout << "second" << second[j] << endl;
        if(primes[second[j]]) {
            ans -= (long long)second[j];
        }
        else {
            ans += (long long)second[j];
        }
    }
    i++;
    j++;
    for(int temp = i; temp < n; temp++) {
        //cout << "first " << first[temp] << endl;
        if(primes[first[temp]]) {
            ans -= (long long)first[temp];
        }
        else {
            ans += (long long)first[temp];
        }
    }
    for(int temp = j; temp < m; temp++) {
       // cout << "second " << second[temp] << endl;
        if(primes[second[temp]]) {
            ans -= (long long)second[temp];
        }
        else {
            ans += (long long)second[temp];
        }
    }
    return ans;
}

int main()
{
    gen_primes();
    int n, q;
    si(q);
    while(q--) {
        int l, r;
        si(l); si(r);
        long long ans = check(l, r);
        printf("%lld\n", ans);
    }
    return 0;
}


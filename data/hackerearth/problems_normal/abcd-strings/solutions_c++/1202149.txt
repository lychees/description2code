#include <bits/stdc++.h>

#define REP(i, a) for (int i = 0; i < (int) (a); i ++)
#define REPP(i, a, b) for (int i = (int) (a); i <= (int) (b); i ++)
#define MST(a, b) memset(a, b, sizeof(a))
#define LL long long

using namespace std;

const int C = 4;
const int N = 155;
const int MOD = 1e9 + 7;

void add(int &x, int y) {
	x += y;
	if (x >= MOD) x -= MOD;
}

struct Matrix{
	int v[N][N];

	Matrix(bool ident) {
		MST(v, 0);
		if (ident) {
			REP(i, N) {
				v[i][i] = 1;
			}
		}
	}

	int * operator [] (int i) {
		return v[i];
	}

	const int * operator [] (int i) const {
		return v[i];
	}
};

Matrix mul(const Matrix &a, const Matrix &b, int N) {
	Matrix ans(0);
	REP(i, N) REP(j, N) REP(k, N) {
		add(ans[i][j], 1LL * a[i][k] * b[k][j] % MOD);
	}
	return ans;
}

Matrix pow_mod(Matrix a, LL b, int node) {
	Matrix ans(1);
	while (b) {
		if (b & 1) {
			ans = mul(ans, a, node);
		}
		b >>= 1;
		a = mul(a, a, node);
	}
	return ans;
}

struct AC_Automation {
	int tr[N][C], fail[N], val[N], node;

	int New_Node() {
		MST(tr[node], 0);
		fail[node] = val[node] = 0;
		return node++;
	}

	void init() {
		node = 0;
		New_Node();
	}

	void insert(char *s) {
		int now = 0, pos = 0;
		while (s[pos]) {
			int x = s[pos++] - 'a';
			if (!tr[now][x]) {
				tr[now][x] = New_Node();
				val[tr[now][x]] = val[now];
			}
			now = tr[now][x];
		}
		val[now] = 1;
	}

	void getfail() {
		queue<int> q;
		REP(i, C) {
			if (tr[0][i]) {
				fail[tr[0][i]] = 0;
				q.push(tr[0][i]);
			}
		}

		while (q.size()) {
			int x = q.front(); q.pop();
			REP(i, C) {
				int &y = tr[x][i];
				if (!y) {
					y = tr[fail[x]][i];
					continue;
				}
				fail[y] = tr[fail[x]][i];
				val[y] |= val[fail[y]];
				q.push(y);
			}
		}
	}

	void getMatrix(Matrix &fun) {
		REP(i, node) {
			if (!val[i]) {
				REP(j, C) {
					if (val[tr[i][j]]) {
						continue;
					}
					fun[i][tr[i][j]]++;
				}
			}
		}
	}
}AC;

char s[N];

int main() {
	ios :: sync_with_stdio(0);

	int t, m;
	LL n;
	cin >> t;
	while (t--) {
		cin >> n >> m;
		AC.init();
		REP(i, m) {
			cin >> s;
			AC.insert(s);
		}
		AC.getfail();
		Matrix func(0);
		AC.getMatrix(func);
		int node = AC.node;
		Matrix ans(0);
		ans[0][0] = 1;
		ans = mul(ans, pow_mod(func, n, node), node);
		int answer = 0;
		REP(i, node) {
			add(answer, ans[0][i]);
		}
		cout << answer << endl;
	}

	return 0;
}

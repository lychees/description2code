#include <iostream>
#include <algorithm>
#include <vector>
#include<cstring>
using namespace std;
#define N 100010
int arr[N<<1];
int bt[N];
long long numOfInv[N];
int sa[N<<1],rk[N<<1],LCP[N<<1];
void init_sa(int sz)
{
	for(int i=0;i<sz;++i)
	{
		sa[i] = i;
		rk[i] = arr[i];
	}
	for(int k=1;k<sz;k<<=1)
	{
		sort(sa,sa+sz,[k](int l,int r)
		{
			return rk[l]<rk[r] || rk[l]==rk[r] && rk[l+k]<rk[r+k];
		});
		LCP[sa[0]] = 0;
		for(int i=1;i<sz;++i)
		{
			if(rk[sa[i]]==rk[sa[i-1]] &&
			rk[sa[i]+k]==rk[sa[i-1]+k])
			{
				LCP[sa[i]] = LCP[sa[i-1]];
			}
			else
			{
				LCP[sa[i]] = 1+LCP[sa[i-1]];
			}
		}
		memcpy(rk,LCP,sizeof rk);
		if(rk[sz-1]==sz-1)break;
	}
	for(int i=0,j=0;i<sz;++i)
	{
		if(rk[i]>0)
		{
			int k = sa[rk[i]-1];
			while(i+j<sz && k+j<sz && arr[i+j]==arr[k+j]) ++j;
			LCP[rk[i]] = j;
			if(j>0)--j;
		}
		else j=0;
	}
}
void update(int idx,int d)
{
	while(idx<N)
	{
		bt[idx]+=d;
		idx+=idx&-idx;
	}
}
int query(int idx)
{
	int ans=0;
	while(idx)
	{
		ans+=bt[idx];
		idx&=idx-1;
	}
	return ans;
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
    	memset(bt,0,sizeof bt);
    	int n;
    	scanf("%d",&n);
    	vector<int> data;
    	for(int i=0;i<n;++i)
    	{
    		scanf("%d",&arr[i]);
    		data.push_back(arr[i]);
    	}
    	sort(data.begin(),data.end());
    	data.erase(unique(data.begin(),data.end()),data.end());
    	for(int i =0;i<n;++i)
    	{
    		arr[i] = arr[n+i]  =lower_bound(data.begin(),data.end(),arr[i])-data.begin()+1;
    	}
    	arr[n+n] = 0;
    	long long num=0;
    	for(int i=n-1;i>=0;--i)
    	{
    		num+=query(arr[i]-1);
    		update(arr[i],1);
    	}
    	numOfInv[0] = num;
    	long long mx = num;
    	for(int i=1,j=n;i<n;++i,++j)
    	{
    		num-=query(arr[i-1]-1);
    		update(arr[i-1],-1);
    		num+=n-1-query(arr[j]);
    		update(arr[j],1);
    		numOfInv[i] = num;
    		mx = max(num,mx);
    	}
    	/////////////
    	init_sa(2*n+1);
    	int i;
    	for( i=0;i<2*n+1;++i)
    	{
    		if(sa[i]<n&&numOfInv[sa[i]]==mx) break;
    	}
    	int j =i+1;
    	while(j<2*n+1 && LCP[j]>=n) ++j;
    	int ans = sa[i];
    	while(++i<j)
    	{
    		if(sa[i]<ans && numOfInv[sa[i]]==mx)
    		{
    			ans = sa[i];
    		}
    	}
    	printf("%d %lld\n",ans,mx);
    }
    return 0;
}

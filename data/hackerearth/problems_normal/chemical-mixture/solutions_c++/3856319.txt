#include <bits/stdc++.h>

using namespace std;

#define LOCAL 0
#define ull unsigned long long
#define uint unsigned int

bool get_bit(const uint &mask, int k)
{
    return (mask >> k) & 1; 
}

ull count(const vector <ull> &a, uint mask)
{
    ull res = 0;
    for (int k = 0; k < (int)a.size(); ++k)
        if (get_bit(mask, k) == 1)
            res += a[k];
    return res;
}

bool can(const vector <ull> &a, ull s)
{
    for (int i = 0; i < (int)a.size(); ++i)
        if (s >= a[i])
            s -= a[i];
    return s == 0;
}

void print(const vector <ull> &a, ull s)
{
    cout << "YES\n";
    stack <ull> st;
    for (int i = 0; i < (int)a.size(); ++i)
        if (s >= a[i])
        {
            s -= a[i];
            st.push(a[i]);
        }
        
    while (!st.empty())
    {
        cout << st.top() << ' ';
        st.pop();
    }
    cout << '\n';
}

void solve()
{
    ull m;
    int n1, n2;
    cin >> m >> n1 >> n2;
    
    vector <ull> a1(n1);
    for (int i = 0; i < n1; ++i)
        cin >> a1[i];
    
    sort(a1.rbegin(), a1.rend());
    
    vector <ull> a2(n2);
    for (int i = 0; i < n2; ++i)
        cin >> a2[i];
    
    ull best = -1;
    uint sz = 1 << n2;
    for (uint mask = 0; mask < sz; ++mask)
    {
        ull s = count(a2, mask);
        if (s <= m && can(a1, m - s))
            best = min(best, s);
    }
    
    if (best == -1)
        cout << "NO\n";
    else
        print(a1, m - best);
}

int main()
{
#if LOCAL == 1
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
#endif
    
    int t;
    cin >> t;
    
    for (int i = 0; i < t; ++i)
        solve();
    
    return 0;
}

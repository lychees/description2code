//The Above Code is reffered from geeks for geeks.
#include <bits/stdc++.h>
using namespace std;

#define _ ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<long long,long long> ii;
#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
pair<long long,long long> D;

long long orientation(const ii &A,const ii &B,const ii &C)
{
    long long val= (B.second-A.second)*(C.first-B.first)-(C.second-B.second)*(B.first-A.first);
    if(val==0) return 0;
    return (val>0)? 1:2;
}

bool onSegment(const ii &A,const ii &B,const ii &C)
{
    if(C.first>=min(A.first,B.second)&&C.first<=max(A.first,B.second)&&C.second>=min(A.second,B.second)&&C.second<=max(A.second,B.second))
            return true;
    return false;

}

bool doIntersect(const ii &A,const ii &B,const ii &C)
{
    int o1=orientation(A,B,C);
    int o2=orientation(A,B,D);
    int o3=orientation(C,D,A);
    int o4=orientation(C,D,B);
    if(o1!=o2&&o3!=o4)
        return true;
    if(o1==0&&onSegment(A,B,C)) return true;
    if(o2==0&&onSegment(A,B,D)) return true;
    if(o3==0&&onSegment(C,D,A)) return true;
    if(o4==0&&onSegment(C,D,B)) return true;

    return false;

}

int main(void)
{
    _
    pair<long long ,long long> A,B,C;
    int t;
    cin>>t;
    while(t--)
    {
        D.first=0;D.second=0;
        cin>>A.first>>A.second>>B.first>>B.second>>C.first>>C.second;
        if(doIntersect(A,B,C))
            cout<<"NO\n";
        else
            cout<<"YES\n";

    }
    return 0;
}

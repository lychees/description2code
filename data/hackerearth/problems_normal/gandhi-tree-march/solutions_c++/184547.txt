#include<iostream>
//#include<conio.h>
#include<cstdio>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;

class node
{
      public:
             node *left;
             node *right;
             node *parent;
             char label;
      node()
      {
            this->left=NULL;
            this->right=NULL;
            this->parent=NULL;
            }
      node(node *parent)
      {
            this->left=NULL;
            this->right=NULL;
            this->parent=parent;
                }
      ~node()
      {
             if(this->left)delete this->left;
             if(this->right)delete this->right;
             }
      };
/*struct node 
{
       struct node *left;
       struct node *right;
       struct node *parent;
       char label;
       };
       */
node *buildTree(string s)
{
       node *root=new node();
       node *curr=root;
       for(int i=0;i<s.length();i++)
       {
               switch(s[i])
               {
                           case '(': 
                                if(s[i+1]!='.')
                                {
                                               curr->left=new node(curr);
                                               curr=curr->left;
                                               }     
                                break;
                           case ')' :
                                curr=curr->parent;
                                if(i+1<s.length() && s[i+1]>='a' && s[i+1]<='z')
                                {
                                              curr->right=new node(curr);
                                              curr=curr->right;
                                              }
                                break;
                           case '.' :
                                if(s[i+1]>='a' && s[i+1]<='z')
                                {
                                              curr->right=new node(curr);
                                              curr=curr->right;
                                              }
                                break;
                           default: curr->label=s[i];
                           }
               }
       return root;
       }
void preorderTraversal(node *root, int col, int targetCol, vector<char>*values )
{
     if(root==NULL)return;
     if(col==targetCol)
         values->push_back(root->label);
     preorderTraversal(root->right, col+1, targetCol, values);
     preorderTraversal(root->left, col-1, targetCol, values);
     }
int main()
{
    int t,n;
    string str;
    cin>>t;
    while(t--)
    {
              cin>>n>>str;
              node *root=buildTree(str);
              vector<char>col;
              preorderTraversal(root, 0, n, &col);
              if(col.size()==0)
              {
                                cout<<"Common Gandhijee!"<<endl;
                                continue;
                                }
              sort(col.begin(), col.end());
              for(int i=0;i<col.size();i++)
                      cout<<col[i];
              cout<<endl;
              }
    //getch();
    return 0;
    }

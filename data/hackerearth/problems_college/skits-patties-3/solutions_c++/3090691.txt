#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
using namespace std;
typedef long long int LL;
typedef vector<LL> VL;
typedef vector<int> VI; 
typedef vector<VL> VVL; 
typedef pair<LL,LL> PLL; 
typedef pair<int ,int> II;
typedef vector<II> VII;
/*
long long int mmax(long long int a , long long int b){
	if(a>b)
		return a;
	return b;
}
typedef struct node{
	int a;
}node;
vector<int > primes;
int is_prime[1000010];
void seive(){
for(int i=0;i<=1000005;i++)
	is_prime[i] = 1;
is_prime[1] = 0;
is_prime[0] = 0;
for(long long int j=2;j<=1000000;j++){
	if(is_prime[j]==1){
		primes.push_back(j);
		for(long long int k=(j*j);k<=1000000;k+=j)
			is_prime[k] = 0;
	}
}
}
//int prime(long long int x){if(x==1)return 0;if(x<=3)return 1;if(x%6==1||x%6==5){long long int y=sqrt(x),i;for(i=2;i<=y;i++)if(x%i==0)return 0;return 1;} return 0;}
//long long int fastpow(long long int a, long long int b,long long int m){long long int r = 1;while (b > 0){if (b % 2 == 1)r = (r * a) % m;b = b >> 1;a = (a * a) % m;}return r;}
//long long int gcd(long long int m, long long int n){if(n == 0) return m;return gcd(n, m % n);} 
int compare(const void *a , const void *b){
	struct node *x,*y;
	x = (struct node *)a;
	y = (struct node *)b;
	return 1;
}
*/
void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}
bool cancan[10000010];
int main()
{
//FastIO();
memset(cancan , 0 , sizeof(cancan));

cancan[6] = 1;
cancan[9] = 1;
cancan[20] = 1;

for(int i=1;i<=10000000;i++)
{
	if(i>=6 && cancan[i-6]==1)
		cancan[i] = 1;
	if(i>=9 && cancan[i-9]==1)
		cancan[i] = 1;
	if(i>=20 && cancan[i-20]==1)
		cancan[i] = 1;
}
int T , U;
cin >>T;
while(T--)
{
	cin >> U;
	if(cancan[U])
		printf("True\n");
	else
		printf("False\n");
}


return 0;
}












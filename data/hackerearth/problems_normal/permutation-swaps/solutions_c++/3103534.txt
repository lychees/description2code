#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

typedef long long LL;
#define rep(it,s) for(__typeof((s).begin()) it=(s).begin();it!=(s).end();it++)

int n, m;
pair<int,int> a[100010];
int p[100010], q[100010];
int par[100010], rk[100010];
int h[100010];
bool vis[100010];

int find(int x) {
    if (x==par[x]) return par[x];
    par[x] = find(par[x]);
    return par[x];
}

void merge(int x, int y) {
    x = find(x);
    y = find(y);

    if (x==y) return;

    if (rk[x] > rk[y]) {
        par[y] = x;
    }
    else if (rk[y] > rk[x]) {
        par[x] = y;
    }
    else {
        rk[x]++;
        par[y] = x;
    }
}

int main() {

    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);

    int t;
    cin>>t;
    while (t--) {

        cin>>n>>m;
        for (int i=0; i<n; i++) scanf("%d", p+i);
        for (int i=0; i<n; i++) scanf("%d", q+i);
        for (int i=0; i<m; i++) scanf("%d%d", &a[i].first, &a[i].second);

        for (int i=0; i<n; i++) {
            p[i]--;
            q[i]--;
        }
        for (int i=0; i<m; i++) {
            a[i].first--;
            a[i].second--;
        }

        for (int i=0; i<n; i++) {
            par[i] = i;
            rk[i] = 0;
        }

        for (int i=0; i<m; i++) {
            merge(a[i].first, a[i].second);
        }

        for (int i=0; i<n; i++) vis[i] = 0;
        for (int i=0; i<n; i++) h[p[i]] = i;

        bool res = true;
        for (int i=0; i<n; i++) if (!vis[i]) {

            int x = i;
            bool done = false;
            bool good = true;
            int root = find(i);
            vis[x] = 1;

            while (!done || x!=i) {

                done = true;
                x = h[q[x]];

                if (root != find(x)) {
                    good = false;
                }

                vis[x] = 1;
            }

            if (!good) {
                res = false;
            }

        }

        if (res) {
            cout<<"YES"<<endl;
        }
        else {
            cout<<"NO"<<endl;
        }

    }

    return 0;

}

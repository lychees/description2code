/*
Author :Akash Kumar
IIITD
*/
#include<bits/stdc++.h>
using namespace std;

long long int mod_pow(long long int a, long long int b,long long int mod)
{
	long long int ans=1;
	while(b)
	{
		int r=b%2;
	
		if(r!=0)
		ans=(ans*a)%mod;
		
		a=(a*a)%mod;
		
		b/=2;
	}	
	return ans;
}

long long gcdf(long long a,long long b)
{
	if(a==0)
	return b;
	return gcdf(b%a,a);	
}

long long min1(long long a,long long b)
{
	return a>b?b:a; 	
}

long long max1(long long a,long long b)
{
	return a<b?b:a; 	
}

long long int fact(long long int n)
{
	long long int ans=n,mod=1000000007;
	for(int i=1;i<=n-1;i++)
	{
		ans=(ans*i)%mod;
	}
	
	return ans;
}

struct node{
int s,e,v;
};

/*bool comp(struct node less,struct node more)
{
	if(less.val=more.val)
	return less.ind<more.ind;
	return less.val<more.val;	
}
*/

int lps(string str)
{
   int n = str.size();
   int i, j, cl;
   int L[n][n];  
 
   for (i = 0; i < n; i++)
      L[i][i] = 1;
 
    for (cl=2; cl<=n; cl++)
    {
        for (i=0; i<n-cl+1; i++)
        {
            j = i+cl-1;
            if (str[i] == str[j] && cl == 2)
               L[i][j] = 2;
            else if (str[i] == str[j])
               L[i][j] = L[i+1][j-1] + 2;
            else
               L[i][j] = max(L[i][j-1], L[i+1][j]);
        }
    }
 
    return L[0][n-1];
}

long long primepow(long long a)
{
	long long ans=0;
	
		while(a%2==0)
		{
			ans++;
			a/=2;
		}
	
    for(long long i=3;i<=sqrt(a);i+=2)
	{
     	   
		while(a%i==0)
		{
			a/=i;
			ans++;	
		}
	}
	
	if(a>2)
	ans++;
	
	return ans;
}	

int main()
{
	int n,m;
	cin>>n>>m;
	
	long long int a[n];
	a[0]=1;
	a[1]=1;
	
	long long int ans=2;
	for(int i=2;i<n;i++)
	{
		a[i]=a[i-1]+a[i-2];
		ans+=a[i];
	}	
	
	int j=0;
	for(int i=0;i<m;i++)
	{
		long long int x;
		cin>>x;
		ans-=x;
	}
	
	cout<<ans<<endl;
	return 0;
}

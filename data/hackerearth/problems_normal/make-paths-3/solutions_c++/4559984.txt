#include <bits/stdc++.h>

#define gc getchar_unlocked

using namespace std;

typedef long long        ll;
typedef pair<int, int>   pii;
typedef pair<int, pii>   piii;
typedef vector<int>      vi;
typedef set<int>         si;
typedef vector<pii>      vii;
typedef vector<piii>     viii;

#define rep(i,n)     for (int (i)=0; (i)<(n); (i)++)
#define repn(i,n)    for (int (i)=1; (i)<=(n); (i)++)
#define repd(i,n)    for (int (i)=(n)-1; (i)>=0; (i)--)
#define foreach(i,X) for(__typeof((X).begin()) i = (X).begin(); i != (X).end(); i++)
#define all(a)       a.begin(),a.end()

const int inf = numeric_limits<int>::max();
const ll linf = numeric_limits<ll>::max();

#define fi           first
#define se           second
#define pb           push_back
#define mp           make_pair

void fs(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

int id[100001];
pii x[100001];
pii y[100001];
multiset<piii> e;
int mst, weight;

void init(int n)
{
    repn(i,n) id[i]=i;
}

int root(int x)
{
    while(x!=id[x])
    {
        id[x]=id[id[x]];
        x=id[x];
    }
    return x;
}


void kruskal(piii p)
{
    int w=p.fi;
    int a=p.se.fi;
    int b=p.se.se;
    int u=root(a);
    int v=root(b);
    if(u==v) return;
    weight+=w;
    id[u]=v;
    mst++;
}


int main()
{
    int n; cin>>n;
    init(n);
    repn(i,n)
    {
        int a,b; cin>>a>>b;
        x[i]=mp(a,i);
        y[i]=mp(b,i);
    }
    vii xs, ys;
    repn(i,n)
    {
        xs.pb(x[i]);
        ys.pb(y[i]);
    }
    sort(all(xs)); sort(all(ys));
    rep(i,n-1)
    {
        e.insert(mp( min( abs(xs[i].fi-xs[i+1].fi) , abs(y[xs[i].se].fi-y[xs[i+1].se].fi) ) , mp(xs[i].se,xs[i+1].se) ));
    }
    rep(i,n-1)
    {
        e.insert(mp( min( abs(ys[i].fi-ys[i+1].fi) , abs(x[ys[i].se].fi-x[ys[i+1].se].fi) ) , mp(ys[i].se,ys[i+1].se) ));
    }
    while(e.size() && mst<n)
    {
        piii p=*e.begin();
        e.erase(e.begin());
        kruskal(p);
    }
    cout<<weight<<endl;
    return 0;
}
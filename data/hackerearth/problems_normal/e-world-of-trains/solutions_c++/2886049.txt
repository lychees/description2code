#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <cassert>

using namespace std;

typedef long long llint;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) for (int i = 0; i < (n); ++i)
#define TRACE(x) cout << #x << " = " << x << endl
#define _  << "_" <<

const int MAXN = 3400;
const int MOD = 1e9 + 7;

int n, l, t, K;
int dp[2][MAXN], tot[MAXN][3 * MAXN], sum[MAXN][MAXN];

int main(void) {
  scanf("%d %d %d %d",&n,&l,&t,&K);
  if (l == 1) {
    int ways = 1;
    for (int i = 0; i < n; ++i)
      ways = (llint)ways * K % MOD;
    printf("%d\n",t == n ? ways : 0);
    return 0;
  }
  dp[n&1][0] = tot[n][n] = sum[n][0] = 1;

  for (int i = n - 1; i >= 0; --i) {
    for (int k = 0; k <= t; ++k) {
      dp[i&1][k] = sum[i+1][k];
      if (i + l <= n) {
	dp[i&1][k] = (dp[i&1][k] - sum[i+l][k]) % MOD;
	dp[i&1][k] = (dp[i&1][k] + tot[i+l][(k+i+l-1)]) % MOD; 
      }
    }

    llint mul = (i == 0) ? K : K - 1;

    for (int x = 0; x < 3 * MAXN; x++)
      tot[i][x] = tot[i + 1][x];

    for (int k = 0; k <= t; ++k) {
      dp[i&1][k] = mul * dp[i&1][k] % MOD; 
      sum[i][k] = (dp[i&1][k] + sum[i + 1][k]) % MOD;
      tot[i][k+i] = (tot[i][k+i] + dp[i&1][k]) % MOD;
    } 
  }

  if (dp[0][t] < 0) dp[0][t] += MOD;
  cout << dp[0][t] << endl;

  return 0;
}


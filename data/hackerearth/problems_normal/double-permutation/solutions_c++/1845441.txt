
#include <bits/stdc++.h>

#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)
#define EACH(it,a) for(__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)

#define DEBUG(x) { cout << #x << " = "; cout << (x) << endl; }
#define PR(a,n) { cout << #a << " = "; FOR(_,1,n) cout << a[_] << ' '; cout << endl; }
#define PR0(a,n) { cout << #a << " = "; REP(_,n) cout << a[_] << ' '; cout << endl; }

#define sqr(x) ((x) * (x))
using namespace std;

const int MN = 200111;
const long long MOD = 1e9 + 7;

#define _(X) ((X) & (-(X)))
int bit[MN];
int get(int u) {
    int res = 0;
    while (u > 0) {
        res += bit[u];
        u -= _(u);
    }
    return res;
}

void update(int u) {
    while (u < MN) {
        bit[u]++;
        u += _(u);
    }
}

int n, a[MN];
long long p2[MN];

int main() {
    ios :: sync_with_stdio(false);
    p2[0] = 1; FOR(i,1,MN-1) p2[i] = p2[i-1] * 2 % MOD;
    while (cin >> n) {
        FOR(i,1,n+n) cin >> a[i];
        if (n == 1) {
            cout << 1 << endl;
            continue;
        }

        long long res = p2[n-1] * (long long) n % MOD;
        FORD(i,n+n,1) {
            // b a
            int cnt = get(a[i] - 1);
            res = (res + p2[n-2] * 3 * cnt) % MOD;

            // a b
            cnt = get(n) - get(a[i]);
            res = (res + p2[n-2] * cnt) % MOD;

            update(a[i]);
        }
        cout << res << endl;
    }
    return 0;
}


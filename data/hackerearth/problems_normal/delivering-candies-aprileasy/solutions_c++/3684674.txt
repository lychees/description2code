#include<bits/stdc++.h>
using namespace std;
long long INF= 100000000;
typedef long long ll;
long long di[100005];
// This class represents a directed graph using 
// adjacency list representation
class Graph
{
    ll V;    // No. of vertices
 
    // In a weighted graph, we need to store vertex 
    // and weight pair for every edge
    list< pair<ll, ll> > *adj;
 
public:
    Graph(ll V);  // Constructor
 
    // function to add an edge to graph
    void addEdge(ll u, ll v, ll w);
 
    // prints shortest path from s
    void shortestPath(ll s);
};
 
// Allocates memory for adjacency list
Graph::Graph(ll V)
{
    this->V = V;
    adj = new list< pair<long long, long long> >[V];
}
 
void Graph::addEdge(ll u, ll v, ll w)
{
    adj[u].push_back(make_pair(v, w));
    adj[v].push_back(make_pair(u, w));
}
 
// Prints shortest paths from src to all other vertices
void Graph::shortestPath(ll src)
{
    // Create a set to store vertices that are being
    // prerocessed
    set< pair<long long, long long> > setds;
 
    // Create a vector for distances and initialize all
    // distances as infinite (INF)
    vector<long long> dist(V, INF);
 
    // Insert source itself in Set and initialize its
    // distance as 0.
    setds.insert(make_pair(0, src));
    dist[src] = 0;
 
    /* Looping till all shortest distance are finalized
       then setds will become empty */
    while (!setds.empty())
    {
        // The first vertex in Set is the minimum distance
        // vertex, extract it from set.
        pair<ll, ll> tmp = *(setds.begin());
        setds.erase(setds.begin());
 
        // vertex label is stored in second of pair (it
        // has to be done this way to keep the vertices
        // sorted distance (distance must be first item
        // in pair)
        ll u = tmp.second;
 
        // 'i' is used to get all adjacent vertices of a vertex
        list< pair<ll, ll> >::iterator i;
        for (i = adj[u].begin(); i != adj[u].end(); ++i)
        {
            // Get vertex label and weight of current adjacent
            // of u.
            ll v = (*i).first;
            ll weight = (*i).second;
 
            //  If there is shorted path to v through u.
            if (dist[v] > dist[u] + weight)
            {
                /*  If distance of v is not INF then it must be in
                    our set, so removing it and inserting again
                    with updated less distance.  
                    Note : We extract only those vertices from Set
                    for which distance is finalized. So for them, 
                    we would never reach here.  */
                if (dist[v] != INF)
                    setds.erase(setds.find(make_pair(dist[v], v)));
 
                // Updating distance of v
                dist[v] = dist[u] + weight;
                setds.insert(make_pair(dist[v], v));
            }
        }
    }
 
    // Print shortest distances stored in dist[]
   // printf("Vertex   Distance from Source\n");
    for (ll i = 0; i < V; ++i)
        di[i] = dist[i];
      //  printf("%d \t\t %d\n", i, dist[i]);
}
 ll a[100005];
long long sol[100005];
// Driver program to test methods of graph class
int main()
{
    // create the graph given in above fugure
    //int V = 9;
    ll n,m,s;
    long long all = 0;
    INF = INF*INF;
    scanf("%lld%lld%lld",&n,&m,&s);
    s--;
    Graph g(n);
 ll x,y,w;
    ll i;
    
    for(i=0;i<n;i++)
        scanf("%lld",&a[i]);
    for(i=0;i<m;i++)
        {
        scanf("%lld%lld%lld",&x,&y,&w);
        x--;
        y--;
         g.addEdge(x, y, w);
    }
    //  making above shown graph
   
   
 
    g.shortestPath(s);
    long long total = 0,cur;
 for(i=0;i<n;i++)
     {
     if(di[i]<INF)
         {
         all+= a[i];
         sol[i] = di[i] * a[i];
         total += sol[i];
     }
 }
    for(i=0;i<n;i++)
        {
        if(di[i]<INF)
            {
             cur = total - sol[i];
            cur += (all - a[i])*di[i];
           // if(i==s)cur = 0;
            printf("%lld ",cur);
        }
        else printf("0 ");
    }
    return 0;
}

/*
 Anton Gulikov
*/
#pragma comment(linker,"/STACK:300000000")
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <list>
#include <math.h>
#include <string>
#include <stdlib.h>

#define gcd(a,b) __gcd((a),(b))
#define sqr(a) ((a)*(a))
#define odd(a) ((a)&1)
#define foru(i,n) for (int i=0;i<(n);i++)
#define ford(i,n) for (int i=(n)-1;i>=0;i--)
#define forab(i,l,r) for (int i=(l);i<=(r);i++)
#define forabd(i,r,l) for (int i=(r);i>=(l);i--)
#define fillchar(a,b) memset((a),(b),sizeof((a)))
#define pb push_back
#define F first
#define S second
#define all(x) x.begin,x.end
#define pw2(x) (1ull<<(x))
#define mp make_pair

const long double eps=1e-20;
const long double pi=acos(-1.0);
const long long inf=1000*1000*1000*1000*1000*1000;
const long long base=1000*1000*1000+7;

using namespace std;

int n,p;
int l,r,test;
int a[111111];
int top[111111];
int kol[111111];

bool ok(int x){
	foru(i,x) top[i] = a[i];
	foru(i,x) kol[i] = 1;
	int pos = x;
	int cur = 0;
	while (pos < n){
		while (pos < n && top[cur] == a[pos]) pos++;
		if (pos < n && top[cur] > a[pos]){
			top[cur] = a[pos];
			kol[cur]++;
			cur = (cur  + 1) % x;
			pos++;
		}
	}
	bool fl = true;
	foru(i,x) fl &= (kol[i] >= p);
	return fl; 	
}

int main(){
	ios_base :: sync_with_stdio(false);
	cin >> test;
	while (test--){
	cin >> n >> p;
	foru(i,n) cin >> a[i];
	sort(a,a+n);
	reverse(a,a+n);
	l = 0; r = n / p;
	while (r - l > 1){
		int c = (r+l) >> 1;
		if (ok(c)) l = c; else r = c;
	}
	if (ok(r)) cout << r << endl; else cout << l<< endl;
}
return 0;
}

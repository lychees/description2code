#pragma comment(linker, "/STACK:66777216")
#include <cstdio>
#pragma warning(disable : 4996)
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <utility>
#include <functional>
#include <iostream>
#include <iomanip>
#include <ctime>
#include <cassert>
#include <queue>
#include <cmath>
#include <random>
#include <sstream>
#include <numeric>
#include <limits>
#include <chrono>
#pragma hdrstop

using namespace std;

#ifdef _MSC_VER
#include <intrin.h>
#else
#define LLD "%lld"
#define LLU "%llu"
#define popcount(a) __builtin_popcount(a)
#define clz(a) __builtin_clz(a)
#endif

#define fill(a, x) memset(a, x, sizeof(a))

#define ll long long


template<class T> inline void addMod(T& a, const T& b, const T& mod = 1000000007) {
	if ((a += b) >= mod) {
		a -= mod;
	}
}


#ifdef _MSC_VER
#endif


inline bool isDigit(const char ch) {
	return (ch >= '0' && ch <= '9');
}


class IO {
public:

	static const int IO_ERR = -1;
	static const int BUFFER_SIZE = 1 << 18;
	
	bool eof;
	char curChar;

	IO() : rbCount(0), rbOffset(0), curChar(0), eof(false) {}

	~IO() {
		fwrite(writeBuffer, sizeof(writeBuffer[0]), wbOffset, stdout);
	}


	inline int nextInt();

	IO& operator >>(int& x);

	void newline();

	void printInt(int x);

	IO& operator <<(int x);
	IO& operator <<(ostream& (*fn)(ostream&));


private:
	char readBuffer[BUFFER_SIZE], writeBuffer[BUFFER_SIZE];
	size_t rbCount, rbOffset, wbOffset;

};

extern bool useFastIO;
extern istream * pin;
extern ostream * pout;
extern IO io;

inline int nextInt() {
	if (useFastIO) {
		return io.nextInt();
	}
	int ret;
	*pin >> ret;
	return ret;
}


inline void newline() {
	if (useFastIO) {
		io.newline();
		return;
	}
	*pout << endl;
}

inline void printInt(int x) {
	if (useFastIO) {
		io.printInt(x);
		return;
	}
	*pout << x;
}


IO io;
const int MOD = 1000000007;
const int MAXN = 222222;

struct Node {

	int sumValue, upd, sqrValue;

	Node() {
		sumValue = 0;
		sqrValue = 0;
		upd = 0;
	}

	void inc(int l, int r, ll add = 1) {
		addMod(sqrValue, (int)((add * sumValue * 2 + add * add * (r - l + 1)) % MOD));
		addMod(sumValue, int(add * (r - l + 1) % MOD));
	}

};

int n, x,  last[MAXN], ans, cur;
Node t[525555];

void push(int v, int tl, int tm, int tr) {
	if (t[v].upd) {
		t[v << 1].upd += t[v].upd;
		t[(v << 1) ^ 1].upd += t[v].upd;

		addMod(t[(v << 1) ^ 1].sqrValue, int(((ll)t[v].upd * 2 * t[(v << 1) ^ 1].sumValue + (ll)t[v].upd * t[v].upd * (tr - tm)) % MOD));
		addMod(t[v << 1].sqrValue, int(((ll)t[v].upd * 2 * t[v << 1].sumValue + (ll)t[v].upd * t[v].upd * (tm - tl + 1)) % MOD));

		addMod(t[v << 1].sumValue, int((ll)t[v].upd * (tm - tl + 1) % MOD));
		addMod(t[(v << 1) ^ 1].sumValue, int((ll)t[v].upd * (tr - tm) % MOD));
	}

	t[v].upd = 0;
}

int getSum(int v, int tl, int tr, int l, int r) {
	if (l > r) {
		return 0;
	}
	if (tl == l && r == tr) {
		return t[v].sqrValue;
	}
	int ret = 0, tm = (tl + tr) >> 1;
	push(v, tl, tm, tr);
	addMod(ret, getSum(v << 1, tl, tm, l, min(tm, r)));
	addMod(ret, getSum((v << 1) ^ 1, tm + 1, tr, max(tm + 1, l), r));
	return ret;
}

void addValue(int v, int tl, int tr, int l, int r) {
	if (l > r) {
		return;
	}
	if (l == tl && r == tr) {
		t[v].upd++;
		t[v].inc(tl, tr);
		return;
	}
	int tm = (tl + tr) >> 1;
	push(v, tl, tm, tr);
	addValue(v << 1, tl, tm, l, min(tm, r));
	addValue((v << 1) ^ 1, tm + 1, tr, max(tm + 1, l), r);
	t[v].sumValue = 0;
	addMod(t[v].sumValue, t[v << 1].sumValue);
	addMod(t[v].sumValue, t[(v << 1) ^ 1].sumValue);
	t[v].sqrValue = 0;
	addMod(t[v].sqrValue, t[v << 1].sqrValue);
	addMod(t[v].sqrValue, t[(v << 1) ^ 1].sqrValue);
}

void solve(istream& ins, ostream& out) {
	io >> n;
	fill(t, 0);
	fill(last, 0);
	ans = 0;
	for (int i = 1; i <= n; ++i) {
		io >> x;
		addValue(1, 1, n, last[x] + 1, i);
		cur = getSum(1, 1, n, 1, i);
		addMod(ans, cur, MOD);
		last[x] = i;
	}
	io << ans << endl;
}
#include <fstream>


extern class IO io;
bool useFastIO = false;
istream * pin;
ostream * pout;

int main() {
    srand(time(NULL));
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    istream& in = cin;
    useFastIO = true;

    ostream& out = cout;
    out << fixed << setprecision(16);
    pin = &in; pout = &out;
    solve(in, out);
    return 0;
}


namespace Random {


}


inline int IO::nextInt() {
	while (!eof && !isDigit(curChar) && curChar != '-') {
		// shiftChar begin
		if (rbOffset == rbCount) {
			rbCount = fread(readBuffer, sizeof(readBuffer[0]), sizeof(readBuffer), stdin);
			if (rbCount <= 0) {
				eof = true;
				return IO_ERR;
			}
			rbOffset = 0;
		}
		curChar = readBuffer[rbOffset++];
		// shiftChar end
	}
	bool neg = false;
	if (curChar == '-') {
		neg = true;
		// shiftChar begin
		if (rbOffset == rbCount) {
			rbCount = fread(readBuffer, sizeof(readBuffer[0]), sizeof(readBuffer), stdin);
			if (rbCount <= 0) {
				eof = true;
				return IO_ERR;
			}
			rbOffset = 0;
		}
		curChar = readBuffer[rbOffset++];
		// shiftChar end
	}
	int result = 0;
	while (!eof && isDigit(curChar)) {
		result = (result << 3) + (result << 1) + curChar - '0';
		// shiftChar begin
		if (rbOffset == rbCount) {
			rbCount = fread(readBuffer, sizeof(readBuffer[0]), sizeof(readBuffer), stdin);
			if (rbCount <= 0) {
				eof = true;
				return (neg ? -result : result);
			}
			rbOffset = 0;
		}
		curChar = readBuffer[rbOffset++];
		// shiftChar end
	}
	return (neg ? -result : result);
}


IO& IO::operator >>(int& x) {
	x = ::nextInt();
	return *this;
}


void IO::newline() {
	if (wbOffset == BUFFER_SIZE) {
		// flush begin
		fwrite(writeBuffer, sizeof(writeBuffer[0]), wbOffset, stdout);
		wbOffset = 0;
		// flush end
	}
	writeBuffer[wbOffset++] = '\n';
}

void IO::printInt(int x) {
	if (wbOffset + 12 > BUFFER_SIZE) {
		// flush begin
		fwrite(writeBuffer, sizeof(writeBuffer[0]), wbOffset, stdout);
		wbOffset = 0;
		// flush end
	}
	if (x < 0) {
		writeBuffer[wbOffset++] = '-';
		x = -x;
	}
	else
	if (!x) {
		writeBuffer[wbOffset++] = '0';
		return;
	}
	int st = wbOffset;
	while (x) {
		writeBuffer[wbOffset++] = x % 10 + '0';
		x /= 10;
	}
	for (int l = st, r = wbOffset - 1; l < r; ++l, --r) {
		char t = writeBuffer[l];
		writeBuffer[l] = writeBuffer[r];
		writeBuffer[r] = t;
	}
}


IO& IO::operator <<(int x) {
	::printInt(x);
	return *this;
}


IO& IO::operator <<(ostream& (*fn)(ostream&)) {
	::newline();
	return *this;
}

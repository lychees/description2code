#include <bits/stdc++.h>
#define maxM 100010
using namespace std;
struct skill{
	int x,y;
};
struct skill newP[maxM];
struct skill oldP[maxM];
bool cmpFunc(struct skill a,struct skill b){
	if(a.x<b.x){
		return true;
	}else if(a.x==b.x && a.y<b.y){
		return true;
	}else{
		return false;
	}
}
int m,n;
int main()
{
    int t;
    cin>>t;
    while(t--){
    	int a,b;
    	cin>>m>>n;
    	assert(m>=1 && m<=100000);
    	assert(n>=1 && n<=100000);
    	for(int i=0;i<m;i++){
    		cin>>a>>b;
    		newP[i].x=a;
    		newP[i].y=b;
    		assert(newP[i].x>=1 && newP[i].x<=100000);
    		assert(newP[i].y>=1 && newP[i].y<=100000);
    	}
    	for(int i=0;i<n;i++){
    		cin>>a>>b;
    		oldP[i].x=a;
    		oldP[i].y=b;
    		assert(oldP[i].x>=1 && oldP[i].x<=100000);
    		assert(oldP[i].y>=1 && oldP[i].y<=100000);
    	}
    	int g,h;
    	cin>>g>>h;
    	assert(g>=1 && g<=100000);
    	assert(h>=1 && h<=100000);
    	
    	sort(newP,newP+m,cmpFunc);
    	sort(oldP,oldP+n,cmpFunc);
    	int i=0,j=0;
    	int grt=0,gud=0;
    	for(i=0;i<m && j<n;){
    		if(newP[i].x==oldP[j].x){
    			if(newP[i].x==oldP[j].x && newP[i].y==oldP[j].y){
    				grt++;
    			}
    			if(newP[i].x==oldP[j].x)
    				gud++;
    			j++;
    		}else if(newP[i].x>oldP[j].x){
    			while(newP[i].x>oldP[j].x){
    				j++;
    			}
    		}
    		i++;
    	}
    	if(gud==g && h==grt){
    		cout<<"Great"<<endl;
    	}else if(gud==g){
    		cout<<"Good"<<endl;
    	}else{
    		cout<<":("<<endl;
    	}
    }
    return 0;
}
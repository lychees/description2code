#include<bits/stdc++.h>
using namespace std;
int degree[1009];
vector<int> edges[1009];
int solve(int n){
    //Check if topological ordering is possible or not, by removing each time zeroDegree Node.
    bool isVisited[1009];
    memset(isVisited,false,sizeof(isVisited));
    queue<int> zeroDegree;
    for(int i=1 ; i<=n ; i++)
        if(degree[i]==0) zeroDegree.push(i);
    while(!zeroDegree.empty()){
        int q=zeroDegree.front(); zeroDegree.pop();
        isVisited[q]=true;
        for(int i=0 ; i<edges[q].size() ; i++){
            degree[edges[q][i]]--;
            if(degree[edges[q][i]]==0){
                if(!isVisited[edges[q][i]]){
                    isVisited[edges[q][i]]=true;
                    zeroDegree.push(edges[q][i]);
                }
            }
        }
    }
    int fl=n;
    for(int i=1 ; i<=n ; i++)
      {  if(!isVisited[i])
      fl--;
      }
    return fl;
}
int main(){
    int t,n,m,a,b;
    scanf("%d",&t);
    while(t--){
        scanf("%d %d",&n,&m);
        memset(degree,0,sizeof(degree));
        for(int i=0 ; i<=n ; i++)
            edges[i].clear();
        for(int i=0 ; i<m ; i++){
            scanf("%d %d",&a,&b);
            edges[a].push_back(b);
            degree[b]++;
        }
            cout<<solve(n)<<endl;
    
    }
    return 0;
}

#include <iostream>
#include <utility>
#include <queue>
using namespace std;

int BFSSearch(vector<vector<int>> adjList, int n){
	bool done[n];
	for(int i = 0; i < n; i++)
		done[i] = false;
	queue<pair<int, int>>Q;
	Q.push(make_pair(1, 0));
	int length;
	while(!Q.empty()){
		auto item = Q.front();
		//cout << "item " << item.first << endl;
		if(item.first == n){
			length = item.second;
			//cout << "out " << endl;
			break;
		}
		Q.pop();
		//cout << "after the pop" << endl;
		//cout << item.first - 1 << endl;
		for(auto& el : adjList[item.first]){
		//	cout << el << " ";
			if(!done[el - 1]){
				Q.push(make_pair(el, item.second + 1));
				done[el - 1] = true;
			}
		}
	}
	return length;
}

int main()
{
    vector<vector<int>> adjList(10004);
    int t, n, x, y;
    long int m;
    cin >> t;
    while(t--){
    	cin >> n >> m;
    	while(m--){
    		cin >> x >> y;
    		adjList[x].push_back(y);
    		adjList[y].push_back(x);
    	}
    	cout << BFSSearch(adjList, n) << endl;
    	for(auto& x : adjList)
    		x.clear();
    }
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
ll bit[11][100005];
ll arr[100005];
ll bitarr[100005];
int n;
ll read(int x,int idx)
{
	ll sum=0;
	while(idx>0)
		sum+=bit[x][idx],idx-=idx&-idx;
	return sum;
}
void update(int x,int idx,int val)
{
	while(idx<=n)
	{
		bit[x][idx]+=val,idx+=idx&-idx;
	}
}
ll read_simple(int idx)
{
	ll sum=0;
	while(idx>0)
		sum+=bitarr[idx],idx-=idx&-idx;
	return sum;
}
void update_simple(int idx,ll val)
{
	while(idx<n)
		bitarr[idx]+=val,idx+=idx&-idx;
}
int count(ll x)
{
	int ret=0;
	int cc[10];
	memset(cc,0,sizeof(cc));
	while(x)
	{
		cc[x%10]++;
		x/=10;
	}
	for(int i=0;i<10;i++)
	{
		if(cc[i])
			ret++;
	}
	return ret;
}
int main()
{
	cin>>n;
	ll x;
	for(int i=1;i<=n;i++)
	{
		cin>>x;
		update_simple(i,x);
		int cc=count(x);
		update(cc,i,1);
	}
	int q;
	cin>>q;
	while(q--)
	{
		ll ty,u,v,c;
		cin>>ty>>u>>v;
		ll elem=read_simple(u)-read_simple(u-1);
		if(ty==0)
		{
			update_simple(u,v);
			int cc=count(elem);
			update(cc,u,-1);
			cc=count(elem+v);
			update(cc,u,1);
		}
		else if(ty==1)
		{
			update_simple(u,v-elem);
			int cc=count(elem);
			update(cc,u,-1);
			cc=count(v);
			update(cc,u,1);
		}
		else
		{
			cin>>c;
			ll ans=read(c,v)-read(c,u-1);
			cout<<ans<<endl;
		}
	}
	return 0;
}

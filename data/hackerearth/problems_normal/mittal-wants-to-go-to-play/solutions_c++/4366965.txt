#include <bits/stdc++.h>
using namespace std;
vector<pair<int,int> >v[10001];
int dist[10001];
bool vis[10001]={false};
void djikstra(int n,int source);
int main()
{
    int t,n,q,m,a,k,x,y,c;
    cin>>t;
    while(t--)
    {
    	for(int i=0;i<10001;i++)
    	{
            vis[i]=false;
            v[i].clear();
            dist[i]=0;
    	}
    	cin>>n>>m;
    	for(int i=0;i<m;i++)
    	{
    		cin>>x>>y>>c;
    		v[x].push_back(make_pair(y,c));
    		v[y].push_back(make_pair(x,c));
    	}
    	djikstra(n,1);
    	cin>>q;
    	for(int i=0;i<q;i++)
    	{
    		cin>>a>>k;
    		if((2*dist[a])>k)
    		cout<<0<<endl;
    		else
    		cout<<k-(2*dist[a])<<endl;
    	}
    }
    return 0;
}
class pri{
	public:
	bool operator()(pair<int,int>&p1,pair<int,int>&p2)
	{
		return p1.second>p2.second;
	}
};
void djikstra(int n,int source)
{
	for(int i=0;i<=n;i++)
	dist[i]=INT_MAX;
	dist[source]=0;
		priority_queue<pair<int,int>,vector<pair<int,int> >,pri> p;
		p.push(make_pair(source,dist[source]));
		while(!p.empty())
		{
			pair<int,int> cur=p.top();
			p.pop();
			int w=cur.first;
			int z=cur.second;
			if(vis[w]==true)
			continue;
			vis[w]=true;
			for(int i=0;i<v[w].size();i++)
			{
				if((v[w][i].second+z<dist[v[w][i].first]) && !vis[v[w][i].first]){
				dist[v[w][i].first]=v[w][i].second+z;
				p.push(make_pair(v[w][i].first,dist[v[w][i].first]));
				}
			}
		}
	}

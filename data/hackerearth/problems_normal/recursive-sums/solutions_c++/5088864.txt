#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <string.h>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#define  rev for(std::string::reverse_iterator rit=str.rbegin(); rit!=str.rend(); ++rit) {std::cout << *rit;}cout << "\n";
#define ll long long int
using namespace std;
namespace patch{
    template<typename T>std::string to_string(const T& n){
    std::ostringstream stm;
    stm << n;
    return stm.str();
    }
}
template <typename T>
string NumberToString ( T Number )
{
	stringstream ss;
	ss << Number;
	return ss.str();
}
template <typename T>
T StringToNumber ( const string &Text )//Text not by const reference so that the function can be used with a 
{                               //character array as argument
	stringstream ss(Text);
	T result;
	return ss >> result ? result : 0;
}
struct greater
{
    template<class T>
    bool operator()(T const &a, T const &b) const { return a > b; }
};
void recursive_sum(){
    ll n,len,d;
    cin >> n;
    ll ans = 0;
    bool flag = false;
    for(int i =0; i < n; i++){
        cin >> len >> d;
        if(d > 0)
            flag = true;
        ans += (len * d) % 9;
        if(ans >= 9)
            ans -= 9;
    }
    if(ans == 0 and flag){
        ans = 9;
    }
    cout << ans << "\n";
}
int main(){
    int t;
    cin >> t;
    for(int i = 0; i < t; i++){
        recursive_sum();
    }   
    return 0;
}

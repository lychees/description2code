#include <bits/stdc++.h>
using namespace std;
#define ll long long

ll N;
ll dynamic[105][105];
ll inpu[105][105];
ll rec(int pos, int x)
{
	if(pos == N + 1)
		return 0;

	if(dynamic[pos][x] != -1)
		return dynamic[pos][x];

	ll ans = 0;

	ans = rec(pos + 1, x) + inpu[pos][x];
	int y = x;

	bool row[N + 2];
	memset(row, false, sizeof row);

	while(y*2 <= N) {
			if(!row[y * 2])
				ans = max(ans, rec(pos + 1, 2*y) + inpu[pos][2*y]);
			y = y * 2;

			int z = y;
			while((z / 2) >= 1) {
				if(!row[z / 2])
					ans = max(ans, rec(pos + 1, z / 2) + inpu[pos][z / 2]);
				z = z / 2;;
				row[z] = true;
			}
			row[y] = true;
	}

	y = x;
	while(y / 2 >= 1) {
			ans = max(ans, rec(pos + 1, y / 2) + inpu[pos][y / 2]);
			y = y / 2;

			int z = y;
			while(z * 2 <= N) {
				if(!row[z * 2]) {
					ans = max(ans, rec(pos + 1, z * 2) + inpu[pos][z * 2]);
				}
				z *= 2;
				row[z] = true;
			}
			row[y] = true;
	}
	return dynamic[pos][x] = ans;
}

int main()
{
	scanf("%lld", &N);

	for(int i = 1; i <= N; ++i) {
		for(int j = 1; j <= N; ++j) {
			scanf("%lld", &inpu[i][j]);
		}
	}

	memset(dynamic, -1, sizeof dynamic);
	ll ans = 0;
	for(int i = 1; i <= N; ++i) {
			ans = max(ans, rec(2, i) + inpu[1][i]);
	}

	printf("%lld\n", ans);

	return 0;
}

# include <iostream>
# include <sstream>
# include <algorithm>
# include <cstdio>
# include <cmath>
# include <numeric>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>
# include <complex>
using namespace std;
typedef long long ll ;
typedef unsigned long long ull;
ll INF = 1e9 ;
typedef pair < int , int > pii ;
typedef  vector < int > vi ;
typedef vector < pii > vpi ;
typedef vector < ll > vl ;
typedef pair < int , pii > tri ;
typedef vector < string > vs ;
typedef vector < vi > mat ;
#define all(a) a.begin(),a.end()
#define si(n) scanf("%d",&n)
#define ss(n) scanf("%s" , n)
#define sl(n) scanf("%lld" , &n)
#define pi(n) printf("%d" , n)
#define ps(n) printf("%s" , n)
#define pl(n) printf("%lld" , n)
#define pnl() printf("\n")
#define fors( i , a , b ) for ( int i = a ; i < b ; i++ )
#define pb push_back
#define ff first
#define mp make_pair
#define sz(a) a.size()
#define fill(a,v)  memset(a,v,sizeof(a))
#define index(arr,ind) (lower_bound(all(arr),ind)-arr.begin())
int a[105][105] , m , n  ;
vi dp[105][105] ;


void cl()
{
    fors( i , 0 , m)
    fors( j , 0 , n)
    {
        dp[i][j].clear() ;
    }
}


int main()
{
    int t , q , tx , ty , k ;
    si(t) ;
    string s ;
    stringstream ss ;
    while(t--)
    {
        si(m) , si(n) ;
        fors( i , 0 , m )
        {
        fors( j , 0 , n )
        {
          cin >> s ;
          ss.clear() ; 
          if ( s == "##")
            a[i][j] = -100 ;
           else
           {
               ss << s ;
               ss >> a[i][j] ;
           }
        }
        }

        cl() ;
        dp[0][0].pb(a[0][0]) ;

        // first coloum

        fors ( i , 1 , m )
        {
            if ( a[i][0] != -100)
            {
               if ( dp[i-1][0].size() > 0 )
                dp[i][0].pb(  dp[i-1][0][0] + a[i][0] ) ;
            }
        }

        // first row

        fors ( i , 1 , n )
        {
            if ( a[0][i] != -100)
            {
               if ( dp[0][i-1].size() > 0 )
                dp[0][i].pb( dp[0][i-1][0] + a[0][i] ) ;
            }
        }

        int no1 , no2  , tot , i1 , i2  ;
        fors( i , 1 , m )
        {
            fors( j , 1 , n )
            {
            	if ( a[i][j] != -100 )
            	{
                no1 = dp[i-1][j].size() ;
                no2 = dp[i][j-1].size() ;
                i1 = i2 = 0 ; 
                tot = 0 ;
                while ( ( ( i1 < no1 ) || ( i2 < no2) ) && ( tot < 102) )
                {
                    if ( i1 == no1)
                    {
                        dp[i][j].pb(a[i][j] + dp[i][j-1][i2]) ;
                        i2++ ;
                    }
                    else if ( i2 == no2)
                    {
                        dp[i][j].pb(a[i][j] + dp[i-1][j][i1]) ;
                        i1++ ;
                    }
                    else
                    {
                         if ( dp[i-1][j][i1] < dp[i][j-1][i2])
                         {
                         dp[i][j].pb(a[i][j] + dp[i-1][j][i1]) ;
                        i1++ ;

                         }
                         else
                            {
                            dp[i][j].pb(a[i][j] + dp[i][j-1][i2]) ;
                        i2++ ;
                            }

                    }
                    tot++ ;
                }
                 }
            }
        }
        si(q) ;
        while ( q--)
        {
            si(tx) , si(ty) , si(k) ;
            if ( a[tx][ty] == -100)
            {
                cout << "Obstacle\n" ;
            }
            else if ( dp[tx][ty].size() < k )
                cout << "Not so many paths\n" ;
            else
                cout << dp[tx][ty][k-1] << endl ;

        }
        }

    return 0 ;
}

#include <iostream>
#include <stdio.h>
#include <bitset>
#include <math.h>
using namespace std;

int countSetBits(long n) {
        unsigned int count = 0;
        while(n) {
                count += n & 1;
                n >>= 1;
        }
        return count;
}

int main() {
    int testCases;
    cin >> testCases;

    while (testCases-- > 0) {

        int N, K;
        cin >> N >> K;

        std::bitset<500> dishes[10];
        for(int index=0;index<N;index++) {
            string input;
            cin >> input;
            std::bitset<10> x(input);
            for(int i=0;i<K;i++)
                dishes[i][index] = x[i];
        }

        int i=0;
        int max=pow(2,K)-1;
        while (i<pow(2,K)) {
            std::bitset<500> dish;
            if (countSetBits(max)>countSetBits(i)) {
                for(int k=0; k<K; k++) {
                   if(i& (k==0 ? 1 : 1<<k))
                      dish |= dishes[k];
                }
                if(dish.count()==N)
                   max = i;
            }
            i++;
        }
        cout<<countSetBits(max)<<endl;
    }
    return 0;
}

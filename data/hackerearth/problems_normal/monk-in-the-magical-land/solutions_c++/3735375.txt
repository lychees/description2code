#include<bits/stdc++.h>
using namespace std;
#define fs first
#define sc second
#define GCD __gcd
#define p 1000000007
#define pb push_back
#define mp make_pair
typedef long long Int;
typedef pair<Int,Int> pii;
typedef vector<Int> vi;
typedef vector<pii> vii;
int main()
{
    Int T;
    cin>>T;
    while (T--)
    {
        Int N,M,K,maxm=0;
        cin>>N>>M>>K;
        vi V[22];
        Int X[22];
        Int C[102],Z[102];
        //Int bits128[22][2]={0};
        for (Int i=0;i<N;++i)
            cin>>X[i];
        for (Int i=0;i<M;++i)
            cin>>C[i];
        for (Int i=0;i<M;++i)
            cin>>Z[i];
         for (Int i=0;i<N;++i)
         {
             for (Int j=0;j<M;++j)
             {
                 /*if (GCD(X[i],C[j])>1)
                 {
                    if (j<50)
                        bits128[i][0]=(bits128[i][0]|(1<<j));
                    else
                        bits128[i][1]=(bits128[i][1]|(1<<(j-50)));
                 }*/
                 if (GCD(X[i],C[j])>1)
                    V[i].pb(j);
             }
         }
         for (Int mask=(1<<K)-1;mask<(1<<N);++mask)
         {
             if (__builtin_popcountll(mask)!=K)
                continue;
             //Int temp[2]={0};
             Int Hash[102]={0},res=0;
             for (Int i=0;i<N;++i)
             {
                 if ((mask&(1<<i))==0)
                    continue;
                for (Int j=0;j<V[i].size();++j)
                    Hash[V[i][j]]=1;
                //temp[0]=(temp[0]|bits128[i][0]);
                //temp[1]=(temp[1]|bits128[i][1]);
             }
             for (Int i=0;i<M;++i)
             {
                 /*if (i<50&&(temp[0]&(1<<i)))
                    res+=Z[i];
                 else if (i>=50&&(temp[1]&(1<<(i-50))))
                    res+=Z[i];*/
                if (Hash[i])
                    res+=Z[i];
             }
             maxm=max(maxm,res);
         }
         cout<<maxm<<"\n";
    }
    return 0;
}

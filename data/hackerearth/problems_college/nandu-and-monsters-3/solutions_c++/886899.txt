#include <bits/stdc++.h>
using namespace std;
#define si(t) scanf("%d", &t)
string s;

bool check(int l, int r)
{
    int flag = 0;
    vector<int>first;
    vector<int>second;
    //finding binary of l
    while(l) {
        first.push_back(l % 2);
        l /= 2;
    }
    reverse(first.begin(), first.end());
    int value = 1;
    first[0] = value;
    for(int i = 1; i < first.size(); i++) {
        if(first[i] == 0) {
            first[i] = value * 2;
            value = value * 2;
        }
        else if(first[i] == 1) {
            first[i] = value * 2 + 1;
            value = value * 2 + 1;
        }
    }

    //finding binary of r
    while(r) {
        second.push_back(r % 2);
        r /= 2;
    }
    reverse(second.begin(), second.end());
    value = 1;
    second[0] = value;
    for(int i = 1; i < second.size(); i++) {
        if(second[i] == 0) {
            second[i] = value * 2;
            value = value * 2;
        }
        else if(second[i] == 1) {
            second[i] = value * 2 + 1;
            value = value * 2 + 1;
        }
    }

    //finding common point
    int i = 0, j = 0;
    int n = first.size(), m = second.size();
    while(i < n && j < m) {
        if(first[i] != second[j]) {
            break;
        }
        i++; j++;
    }
    i--; j--;
    for(int temp = i; temp < n; temp++) {
        if(s[first[temp] - 1] == '1') {
            return 1;
        }
    }
    for(int temp = j; temp < m; temp++) {
        if(s[second[temp] - 1] == '1') {
            return 1;
        }
    }
    return 0;
}

int main()
{
    int n, q;
    si(n); si(q);
    cin >> s;
    while(q--) {
        int l, r;
        si(l); si(r);
        int flag = check(l, r);
        if(flag) {
            printf("No\n");
        }
        else {
            printf("Yes\n");
        }
    }
    return 0;
}

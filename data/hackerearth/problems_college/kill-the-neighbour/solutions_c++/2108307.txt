#pragma comment(linker, "/STACK:66777216")
#include <cstdio>
#pragma warning(disable : 4996)
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <utility>
#include <functional>
#include <iostream>
#include <iomanip>
#include <ctime>
#include <cassert>
#include <queue>
#include <cmath>
#include <random>
#include <sstream>
#include <numeric>
#include <limits>
#pragma hdrstop

using namespace std;


inline bool isDigit(const char ch) {
	return (ch >= '0' && ch <= '9');
}


class IO {
public:

	static const int IO_ERR = -1;
	static const int BUFFER_SIZE = 1 << 18;
	
	bool eof;
	char curChar;

	IO() : rbCount(0), rbOffset(0), curChar(0), eof(false) {}

	~IO() {
		fwrite(writeBuffer, sizeof(writeBuffer[0]), wbOffset, stdout);
	}


	inline int nextInt();

	IO& operator >>(int& x);

	void newline();

	void printInt(int x);

	IO& operator <<(int x);
	IO& operator <<(ostream& (*fn)(ostream&));


private:
	char readBuffer[BUFFER_SIZE], writeBuffer[BUFFER_SIZE];
	size_t rbCount, rbOffset, wbOffset;

};

extern bool useFastIO;
extern istream * pin;
extern ostream * pout;
extern IO io;

inline int nextInt() {
	if (useFastIO) {
		return io.nextInt();
	}
	int ret;
	*pin >> ret;
	return ret;
}


inline void newline() {
	if (useFastIO) {
		io.newline();
		return;
	}
	*pout << endl;
}

inline void printInt(int x) {
	if (useFastIO) {
		io.printInt(x);
		return;
	}
	*pout << x;
}


IO io;
const int MAXN = 111111;

int n, a[MAXN], bad[2][MAXN], cc, nxt[MAXN];

void solve(istream& ins, ostream& out) { 
	io >> n;
	for (int i = 0; i < n; ++i) {
		io >> a[i];
		nxt[i] = i + 1;
	}
	cc = 0;
	for (int i = 0; i < n - 1; ++i) {
		if (a[i] > a[i + 1]) {
			bad[0][cc++] = i;
		}
	}
	int ans;
	for (ans = 0; cc; ++ans) {
		int ci = ans & 1, ni = ci ^ 1, cnt = 0;
		for (int i = cc - 1; i >= 0; --i) {
			int v = bad[ci][i];
			nxt[v] = nxt[nxt[v]];
			if (a[v] > a[nxt[v]] && nxt[v] < n) {
				bad[ni][cnt++] = v;
			}
		}
		reverse(bad[ni], bad[ni] + cnt);
		cc = cnt;
	}
	io << ans << endl;
}
#include <fstream>


extern class IO io;
bool useFastIO = false;
istream * pin;
ostream * pout;

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    istream& in = cin;
    useFastIO = true;

    ostream& out = cout;
    out << fixed << setprecision(16);
    pin = &in; pout = &out;
    solve(in, out);
    return 0;
}


inline int IO::nextInt() {
	while (!eof && !isDigit(curChar) && curChar != '-') {
		// shiftChar begin
		if (rbOffset == rbCount) {
			rbCount = fread(readBuffer, sizeof(readBuffer[0]), sizeof(readBuffer), stdin);
			if (rbCount <= 0) {
				eof = true;
				return IO_ERR;
			}
			rbOffset = 0;
		}
		curChar = readBuffer[rbOffset++];
		// shiftChar end
	}
	bool neg = false;
	if (curChar == '-') {
		neg = true;
		// shiftChar begin
		if (rbOffset == rbCount) {
			rbCount = fread(readBuffer, sizeof(readBuffer[0]), sizeof(readBuffer), stdin);
			if (rbCount <= 0) {
				eof = true;
				return IO_ERR;
			}
			rbOffset = 0;
		}
		curChar = readBuffer[rbOffset++];
		// shiftChar end
	}
	int result = 0;
	while (!eof && isDigit(curChar)) {
		result = (result << 3) + (result << 1) + curChar - '0';
		// shiftChar begin
		if (rbOffset == rbCount) {
			rbCount = fread(readBuffer, sizeof(readBuffer[0]), sizeof(readBuffer), stdin);
			if (rbCount <= 0) {
				eof = true;
				return (neg ? -result : result);
			}
			rbOffset = 0;
		}
		curChar = readBuffer[rbOffset++];
		// shiftChar end
	}
	return (neg ? -result : result);
}


IO& IO::operator >>(int& x) {
	x = ::nextInt();
	return *this;
}


void IO::newline() {
	if (wbOffset == BUFFER_SIZE) {
		// flush begin
		fwrite(writeBuffer, sizeof(writeBuffer[0]), wbOffset, stdout);
		wbOffset = 0;
		// flush end
	}
	writeBuffer[wbOffset++] = '\n';
}

void IO::printInt(int x) {
	if (wbOffset + 12 > BUFFER_SIZE) {
		// flush begin
		fwrite(writeBuffer, sizeof(writeBuffer[0]), wbOffset, stdout);
		wbOffset = 0;
		// flush end
	}
	if (x < 0) {
		writeBuffer[wbOffset++] = '-';
		x = -x;
	}
	else
	if (!x) {
		writeBuffer[wbOffset++] = '0';
		return;
	}
	int st = wbOffset;
	while (x) {
		writeBuffer[wbOffset++] = x % 10 + '0';
		x /= 10;
	}
	for (int l = st, r = wbOffset - 1; l < r; ++l, --r) {
		char t = writeBuffer[l];
		writeBuffer[l] = writeBuffer[r];
		writeBuffer[r] = t;
	}
}


IO& IO::operator <<(int x) {
	::printInt(x);
	return *this;
}


IO& IO::operator <<(ostream& (*fn)(ostream&)) {
	::newline();
	return *this;
}

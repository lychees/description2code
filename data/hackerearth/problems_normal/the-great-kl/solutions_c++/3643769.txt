#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;

#define ff first
#define ss second

const int INF = int(1e9);
const int MAXN = 100010;

class LCA {
    vector<vi> adj, anc;
    vi par, lvl;
    void dfs(int u, int p){
	for (int v : adj[u]){
	    if (v == p) continue;
	    par[v] = u;
	    lvl[v] = 1 + lvl[u];
	    dfs(v, u);
	}
    }
public:
    LCA(int n, const vector<vi> &G){
	adj = G;
	par.assign(n, -1);
	lvl.assign(n, 0);
	dfs(0, -1);
	anc.assign(n, vi(20, -1));
	for (int i = 0; i < n; i++){
	    anc[i][0] = par[i];
	}
	for (int j = 1; j < 20; j++){
	    for (int i = 0; i < n; i++){
		if (anc[i][j-1] != -1)
		    anc[i][j] = anc[ anc[i][j-1] ][j-1];
	    }
	}
    }
    
    int lca(int u, int v){
	if (lvl[u] > lvl[v]) swap(u, v);
	for (int k = 19; k >= 0; k--){
	    if (lvl[v] - (1 << k) >= lvl[u])
		v = anc[v][k];
	}
	if (u == v) return u;
	for (int k = 19; k >= 0; k--){
	    if (anc[u][k] != anc[v][k]){
		u = anc[u][k];
		v = anc[v][k];
	    }
	}
	return par[u];
    }

    int dist(int u, int v){
	return lvl[u] + lvl[v] - 2 * lvl[lca(u, v)];
    }
};
int main(){
    std::ios_base::sync_with_stdio(false);
    int n, m; cin >> n >> m;
    vi arr(n);
    vector<vi> adj(n, vi());
    for (int i = 0; i < n; i++) cin >> arr[i];
    for (int i = 0; i < n-1; i++){
	int u, v; cin >> u >> v;
	u--; v--;
	adj[u].push_back(v);
	adj[v].push_back(u);
    }
    LCA cc(n, adj);
    vector<vi> col(m + 1, vi());
    for (int i = 0; i < n; i++){
	col[arr[i]].push_back(i);
    }
    vi ans(m + 1, 0);
    for (int i = 1; i <= m; i++){
	vi &vec = col[i];
	int st = vec[0];
	int Ma = 0, id = st;
	for (int u : vec){
	    if (u == st) continue;
	    int d = cc.dist(st, u);
	    if (d > Ma){
		Ma = d;
		id = u;
	    }
	}
	st = id;
	for (int u : vec){
	    if (u == st) continue;
	    int d = cc.dist(st, u);
	    if (d > Ma){
		Ma = d;
		id = u;
	    }
	}
	ans[i] = Ma;
    }
    for (int i = 1; i <= m; i++){
	cout << ans[i];
	if (i != m) cout << ' ';
    }
    cout << endl;

    return 0;
}

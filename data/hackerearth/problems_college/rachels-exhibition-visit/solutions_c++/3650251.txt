#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
 
#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;
 
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;
 
template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {
 
    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        int n,k,l,r;
        cin>>n>>k>>l>>r;
        string s;
        cin>>s;
        string sp;
        cin>>sp;
        vi spe ( 255 );
        for ( char c: sp ) spe[c]=1;
        vi dr ( n );
        rep ( i,n ) if ( spe[s[i]] ) dr[i]=1;
        int first=0,last=0;
        int fcnt=dr[0],lcnt=dr[0];
        int ld=0;
        ll tot=0;
        rep ( i,n ) {
            while ( first<i ) {
                first++;
                if ( dr[first] ) fcnt++;
            }
            while ( last<i ) {
                last++;
                if ( dr[last] ) lcnt++;
            }
            fcnt-=ld;
            lcnt-=ld;
            while ( first<n &&fcnt<l ) {
                first++;
                if ( dr[first] ) fcnt++;
            }
            while ( last<n &&lcnt<=r ) {
                last++;
                if ( dr[last] ) lcnt++;
            }
            tot+=last-first;
            ld=dr[i];
        }
        cout<<tot<<endl;
    }
}
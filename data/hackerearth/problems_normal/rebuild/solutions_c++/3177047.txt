#include <bits/stdc++.h>
using namespace std;
vector<int>p;
struct Edge
{
    int src, dest, weight;
};
struct Graph
{
    int V, E;
    struct Edge* edge;
};
 
struct Graph* createGraph(int V, int E)
{
    struct Graph* graph = (struct Graph*) malloc( sizeof(struct Graph) );
    graph->V = V;
    graph->E = E;
 
    graph->edge = (struct Edge*) malloc( graph->E * sizeof( struct Edge ) );
 
    return graph;
}
 
struct subset
{
    int parent;
    int rank;
};
 

int find(struct subset subsets[], int i)
{
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
 
    return subsets[i].parent;
}

void Union(struct subset subsets[], int x, int y)
{
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
 

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;

    else
    {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

int myComp(const void* a, const void* b)
{	
    struct Edge* a1 = (struct Edge*)a;
    struct Edge* b1 = (struct Edge*)b;
    if(a1->weight != b1->weight)
    return a1->weight > b1->weight;
    if(min(a1->src,a1->dest)!=min(b1->src,b1->dest))
    return min(a1->src,a1->dest)<min(b1->src,b1->dest);
    else return max(a1->src,a1->dest)<=max(b1->src,b1->dest);
    
}
 
void KruskalMST(struct Graph* graph)
{
    int V = graph->V;
 
    int e = 0;  
    int i = 0;  
	struct Edge result[V];

    
    qsort(graph->edge, graph->E, sizeof(graph->edge[0]), myComp);
 
    struct subset *subsets =
        (struct subset*) malloc( V * sizeof(struct subset) );
 
    for (int v = 0; v < V; ++v)
    {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
 
  	long long cost=0;

    while (e < V - 1)
    {

        struct Edge next_edge = graph->edge[i++];
 
        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);

        if (x != y)
        {	
            result[e++] = next_edge;
            p[result[e-1].src]++;
    	    p[result[e-1].dest]++;
    	    cost+=result[e-1].weight;

            Union(subsets, x, y);
        }
    }

    
        cout<<cost<<"\n";
    for(int i=0;i<V;i++)cout<<p[i]<<" ";
    cout<<"\n";

    return;
}
 
int main()
{
	int t;
	scanf("%d",&t);
	while(t--){
		map<pair<int,int>,long long > mp;
		int n,m;
		scanf("%d%d",&n,&m);
		p.clear();
		p.resize(n);
		vector<pair<long long,pair<int,int> > >g;
		for(int i=0;i<m;i++){
			int a,b;long long c;
			scanf("%d%d%lld",&a,&b,&c);
			a--;b--;
			if(a==b)continue;
			map<pair<int,int>,long long >::iterator it=mp.find(make_pair(a,b));
			
			if(it==mp.end())mp[make_pair(a,b)]=c;

			mp[make_pair(a,b)]=min(c,mp[make_pair(a,b)]);
			
			map<pair<int,int>,long long >::iterator it1=mp.find(make_pair(b,a));
			
			if(it1==mp.end())mp[make_pair(b,a)]=c;

			mp[make_pair(b,a)]=min(c,mp[make_pair(b,a)]);
			

		}
	    struct Graph* graph = createGraph(n, mp.size());
		int i=0;
		for(map<pair<int,int>,long long >::iterator it = mp.begin(); it != mp.end(); ++it ,i++) {
			
    	    graph->edge[i].src = it->first.first;
    graph->edge[i].dest =it->first.second ;
    graph->edge[i].weight = it->second;
    }

    KruskalMST(graph);

		
	}
    
    return 0;
}

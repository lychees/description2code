#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for (unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for (unsigned   i=0; i<v.size(); i++ )
       in>>v[i];
    return in;
}
struct DFSSort {
    const int n;
    const vector<vi> &adj;
    vi start,end;
    vi depth;
    DFSSort ( const vector<vi> &_adj, int root=0 ) :n ( _adj.size() ),adj ( _adj ),start(n),end(n),depth(n) {
        build ( root );
    }
    int _cnt=0;
    void build(int r){
        _cnt=0;
        build(r,-1,0);
    }
    int build ( int no,int p, int d ) {
        start[no]=_cnt++;
        depth[no]=d;
        int e=_cnt;
        for ( int j: adj[no] ) {
            if ( j==p ) continue;
            e=build ( j,no ,d+1);
        }
        end[no]=e;
        return e;
    }
    bool isParent(int x, int y){
    int n2=start[y];
    if(start[x]<n2 &&n2<end[x])return 1;
    return 0;
        
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    inrep{
        int n; cin>>n;
        vector<vi> adj(n+1);
       vi res;
        reu(i,1,n+1){
        int x;
        cin>>x;
        adj[i].push_back(x);
        adj[x].push_back(i);
            
        }
         DFSSort dfs(adj,0);
         int q; cin>>q;
         rep(qq,q){
             int x,y;cin>>x>>y;
         if(!dfs.isParent(y,x))res.push_back(-1);
         else res.push_back(dfs.depth[x]-dfs.depth[y]-1);
             
        }
        for(int r: res)cout<<r<<'\n';
    }
}
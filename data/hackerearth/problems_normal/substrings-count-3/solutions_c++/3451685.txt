#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
template<typename T> T null();
template<>  int null() {
    return -1;
}
template<> vi null() {
    return vi();
}



template<typename S>  struct VILeaf {
    S value=null<S>();
    vector<VILeaf> childs;
    VILeaf() {};
    VILeaf ( S v, int mx ) {
        value=v;
        childs=vector<VILeaf<S>> ( mx );
    }
    void init ( int mx ) {
        childs=vector<VILeaf<S>> ( mx );
    }
    bool isNull() {
        return childs.size() ==0;
    }
    S& getVal ( const vi &v, int c,int e ) {
        if (c==e ) return value;
        if ( childs[v[c]].isNull() ) childs[v[c]].init ( childs.size() );
        return childs[v[c]].getVal ( v,c+1,e );
    }
};

template<typename T>  struct VITrie {



    const  int mx;
    VILeaf<T> root;
    VITrie ( int _mx ) :mx ( _mx ) {
        root.init ( mx );
    }
    T & val ( const vi &v, int beg, int e ) {
        return root.getVal ( v,beg,end );
    }
    T & val ( const vi &v ) {
        return root.getVal ( v,0,v.size() );
    }
};
int main() {
    ios_base::sync_with_stdio ( false );
    int n;
    cin>>n;
    VITrie<vi> occs ( 'z'-'a'+1 );
    rep ( is,n ) {
        string s;
        cin>>s;
        rep ( i,s.size() ) s[i]-='a';
        rep ( i,s.size() ) reu ( j,i+1,s.size() +1 ) {
            vi repr ( s.begin() +i, s.begin() +j );
            vi &v=occs.val ( repr );
            if ( v.empty() || v.back() !=is ) v.push_back ( is );
        }

    }
    int q;
    cin>>q;
    vi ans ( q );
    rep ( i,q ) {
        int l,  r;
        string s;
        cin>>l>>r>>s;
        l--;
        r--;
        vi repr ( all ( s ) );
        rep ( i,repr.size() ) repr[i]-='a';
        vi &v=occs.val ( repr );
        int res=upper_bound ( all ( v ), r )-lower_bound ( all ( v ),l );
        ans[i]=res;
    }
    for ( int x: ans ) cout<<x<<'\n';
}

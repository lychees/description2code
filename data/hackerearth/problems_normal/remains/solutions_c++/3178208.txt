#include <bits/stdc++.h>
#define sz(x) (int((x).size()))
#define pb push_back
#define eb emplace_back
#define all(x) (x).begin(), (x).end()
template<typename T> bool domax(T &a, T b) { return (b > a ? (a = b, true) : false); }
template<typename T> bool domin(T &a, T b) { return (b < a ? (a = b, true) : false); }
typedef long long ll;

int T;
ll x, y, z, n, ans;

ll arith(ll a0, ll d, ll n) {
	return (a0 + a0 + d*(n-1))*n/2;
}
ll f(ll x, ll y, ll n) {
	ll ans = 0;
	if (n <= 3) {
		if (n >= 1) ans += x;
		if (n >= 2) ans += y;
		if (n >= 3) ans += std::abs(x-y);
		return ans;
	}
	if (n >= 3 && x < y) {
		z = y-x;
		ans += x;
		x = y;
		y = z;
		n--;
	}
	assert(x >= y);
	z = x-y;
	if (z == 0) {
		ll turns = n/3;
		ans += turns * (x+y);
		ans += f(x, y, n - turns*3);
	} else {
		ll turns1 = (x+z) / (2*z);
		ll turns2 = (y+z) / (2*z);
		ll turns3 = n/3;
		if (turns3 <= turns2) {
			ans += arith(x+y, -4*z, turns3);
			ans += turns3 * z;
			x -= (turns3-1) * 2*z;
			y -= (turns3-1) * 2*z;
			x = std::abs(y-z);
			y = std::abs(z-x);
			ans += f(x, y, n - turns3*3);
		} else if (turns2 < turns1) {
			ans += arith(x+y, -4*z, turns2);
			ans += turns2 * z;
			x -= turns2 * 2*z;
			y -= turns2 * 2*z;
			ans += x;
			ans += f(y, z, n - turns2*3 - 1);
		} else {
			assert(turns1 == turns2);
			ans += arith(x+y, -4*z, turns1);
			ans += turns1 * z;
			x -= turns1 * 2*z;
			y = std::abs(z-x);
			ans += f(x, y, n - turns1*3);
		}
	}
	return ans;
}

int main()
{
	scanf("%d", &T);
	for (int t = 0; t < T; t++) {
		scanf("%lld%lld%lld", &x, &y, &n);
		printf("%lld\n", f(x, y, n));
	}
}


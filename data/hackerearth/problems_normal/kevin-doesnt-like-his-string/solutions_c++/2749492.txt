#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define inrep int t;cin>>t; while(t--)
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
const char EMPTY='z'+1;
int main() {
    ios_base::sync_with_stdio ( false );
    int n,k;
    cin>>n>>k;
    string s;
    cin>>s;
    set<pii> least;
    rep ( i,n ) {
        least.insert ( mp ( s[i],-i ) );

    }
    priority_queue<int,vector<int>,greater<int>> repl;
    int cnt=0;
    rep ( i,n ) {
        if ( least.empty() &&repl.empty() ) break;
        int curr=s[i];
        int replaceLeft=k-cnt;
        if ( curr==EMPTY ) replaceLeft++;

//         cout<<"curr: "<<char(curr)<<" "<<replaceLeft<<"repl"<<endl;

        if ( ( replaceLeft>=2 ) && ( !least.empty() ) && ( repl.empty() || least.begin()->first<repl.top() ) ) {
            if ( least.begin()->first<curr ) {
                cnt++;
                if ( curr!=EMPTY ) {
                    cnt++;
                    repl.push ( curr );
                }
                assert(-least.begin()->second>i);
                s[-least.begin()->second]=EMPTY;
                s[i]=least.begin()->first;
                least.erase ( least.begin() );
                assert ( s[i]!=EMPTY );
//                 cout<<char ( curr ) <<"<->"<<s[i]<<endl;
            }

        } else  if ( replaceLeft>=1 ) {
            if ( !repl.empty()  && ( repl.top() <curr ) ) {
                if ( curr!=EMPTY ) {
                    cnt++;
                    repl.push ( curr );
                }
                s[i]=repl.top();
                repl.pop();
                assert ( s[i]!=EMPTY );
//                       cout<<char ( curr ) <<"<->"<<s[i]<<endl;
            }

        } else assert ( s[i]!=EMPTY );
//         cout<<cnt<<endl;
        least.erase ( mp ( curr,-i ) );
    }
//     rep ( i,n ) assert ( s[i]!=EMPTY );
//      assert ( repl.empty() );
    cout<<s<<endl;

}

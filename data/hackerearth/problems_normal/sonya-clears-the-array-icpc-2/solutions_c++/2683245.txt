//Copyright of code reserved with Arpit Bajaj
//Date : 22-08-2015
#include<bits/stdc++.h>
#define pii pair<int,int>
#define ll long long
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define ll long long
#define debug(x) cout<<">value ("<<#x<<") : "<<x<<endl;
#define MOD 1000000007
#define INF 100000000000LL
using namespace std;

int sv[5000010];
int prime[1000000];
int A[600];
ll C[505][505];
ll cost[505][505];

inline int fin(int p[],int len, int ele)
{
    return lower_bound (p,p+len,ele)-p;
}

void computec(int n,int prime[], int tot)
{
    int i,j;
    for(i=0;i<n;i++)
    {
        ll ops1=(ll)(sv[A[i]]-A[i]);
        int p1=sv[A[i]];

        for(j=0;j<n;j++)
        {

            ll ops2=(ll)(sv[A[j]]-A[j]);
            int p2=sv[A[j]];

            int i1=fin(prime,tot,p1);
            int i2=fin(prime,tot,p2);

            if(i1==i2)
            {
                C[i][j]= (ll)(prime[i1+1]-prime[i1])+ 1LL + ops1+ops2;
            }
            else if(i1<i2)
            {
                C[i][j] = (ll)(prime[i2-1]-p1)+ 1LL + ops1+ops2;
            }
            else
            {
                C[i][j] = (ll)(prime[i1+1]-p2)+ 1LL + ops1+ops2;
            }
        }
    }
}

ll computecost(int s, int e)
{
    if(s==e)
        return 0LL;
    if(s>e)
        return INF;
    if(e==s+1)
        cost[s][e]=(ll)C[s][e];
    if(cost[s][e]!=INF)
        return cost[s][e];
    int i=s,j=e,k;
    ll res=INF;
    for(k=s+1;k<=e;k+=2)
    {
        ll tmp;
        if(k==s+1)
            tmp=computecost(k+1,j)+C[i][k];
        else if(k==e)
            tmp=computecost(i+1,k-1) + C[i][k];
        else
            tmp=computecost(i+1,k-1)+computecost(k+1,j)+C[i][k];
        res=min(res,tmp);
    }
    return cost[s][e]=res;
}
ll computecost2(int n)
{
    int i,j,k;
    for(i=0;i<n-1;i++)
    {
        cost[i][i+1]=C[i][i+1];
    }
    for(i=0;i<n;i++)
    {
        for(j=i+3;j<n;j+=2)
        {
            ll res=INF;
            for(k=i+1;k<=j;k++)
            {
                long long tmp = INF;
                if(k-1>i+1 && k+1<j)
                    tmp=cost[i+1][k-1] + C[i][k] + cost[k+1][j];
                else if(k-1>i+1)
                    tmp=cost[i+1][k-1] + C[i][k];
                else if(k+1<j)
                    tmp=C[i][k] + cost[k+1][j];

                res=min(res,tmp);
            }
            cost[i][j]=res;
        }
    }
    return cost[0][n-1];
}
int main()
{
	ios_base::sync_with_stdio(false);
    	cin.tie(NULL);
    int n,i,j,tot;
    ll ops=0LL;
    sv[0]=1;sv[1]=1;
    for(i=2;i<=1001;i++)
    {
        if(sv[i]==0)
        for(j=i*i;j<5000010;j+=i)
            sv[j]=1;
    }
    sv[1000009]=1000009;
    for(i=5000008;i>=0;i--)
    {
        if(sv[i]==0)
            sv[i]=i;
        else
            sv[i]=sv[i+1];
    }
    j=0;
    for(i=0;i<5000010;i++)
    {
        if(sv[i]==i)
        {
            prime[j]=i;
            j++;
        }
    }
    tot=j;
    cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>A[i];

    }
    computec(n,prime,tot);
//    for(i=0;i<n;i++)
//    {
//        for(j=0;j<n;j++)
//            cout<<C[i][j]<<" ";
//        cout<<endl;
//    }
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
            cost[i][j]=INF;
    }
    if(n==0)
    {
        cout<<0<<endl;
        return 0;
    }
    cout<<computecost(0,n-1)<<endl;
//    for(i=0;i<n;i++)
//    {
//        for(j=0;j<n;j++)
//            cout<<cost[i][j]<<" ";
//        cout<<endl;
//    }
	return 0;
}

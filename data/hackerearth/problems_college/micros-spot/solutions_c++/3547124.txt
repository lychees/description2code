#include <bits/stdc++.h>

#define left nadnlassad
#define right asdaslknd
#define y1 kjdajasjdsas

#define pb push_back
#define mp make_pair

#define f first
#define s second

#define ll long long
#define ld long double
#define ull unsigned ll

#define _hash pair<ll, ull>
#define pii pair<int, int>
#define prr pair<pii, pii>

#define sqr(x) (x * 1LL * x)

#define vec vector<int>
#define sz(v) int(v.size())
#define all(v) v.begin(), v.end()
#define upper(v, x) (upper_bound(all(v), x) - v.begin())
#define lower(v, x) (lower_bound(all(v), x) - v.begin())
#define iter set<int>::iterator
#define _bits(x) __builtin_popcountll(x)

using namespace std;


const int nx[8] = {2, -2, -2, 2, 1, 1, -1, -1};
const int ny[8] = {1, 1, -1, -1, 2, -2, -2, 2};

const ll LINF = (ll) 2e18;
const int INF = 1e9 + 7;

const int N = 1e3 + 100;
const int MAXN = 5e7 + 50;
const double EPS = 1e-9, PI = 2 * acos(0.0);
int t, n, m;
int a[N][N];
int b[N][N];
int mx[N], mx1[N];

int main() {
   #define fn ""
   #ifdef sony
      freopen("input.txt", "r", stdin);
      //freopen("output1.txt", "w", stdout);
   #else
      //freopen(fn".in", "r", stdin);
      //freopen(fn".out", "w", stdout);
   #endif // sony
   srand(time(NULL));
   int t;
   scanf("%d", &t);
   while(t--) {
      scanf("%d%d", &n, &m);
      for(int i = 1; i <= n; i++)
         mx[i] = 0;
      for(int j = 1; j <= m; j++)
         mx1[j] = 0;
      for(int i = 1; i <= n; i++) {
         for(int j = 1; j <= m; j++) {
            scanf("%d", &a[i][j]);
            mx1[j] = max(mx1[j], a[i][j]);
         }
      }
      for(int i = 1; i <= n; i++) {
         for(int j = 1; j <= m; j++) {
            scanf("%d", &b[i][j]);
            mx[i] = max(mx[i], b[i][j]);
         }
      }
      int ans = 0;
      for(int i = 1; i <= n; i++) {
         for(int j = 1; j <= m; j++) {
            if(mx1[j] == a[i][j] && mx[i] == b[i][j])
               ans++;
         }
      }
      printf("%d\n", ans);
   }
   return 0;
}

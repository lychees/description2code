//Aditya Shah

#include <bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef pair<int,int> pii;

#define vi vector<int>
#define vs vector<string>
#define vpii vector<pii>
#define all(v) v.begin(), v.end()

#define fr freopen("input.in","r",stdin)
#define fw freopen("output.out","w",stdout)

#define foreach(i,X) for(__typeof((X).begin()) i = (X).begin(); i != (X).end(); i++)
#define forup(i,a,b) for(int i=(a); i<(b); ++i)
#define fordn(i,a,b) for(int i=(a); i>(b); --i)
#define rep(i,a) for(int i=0; i<(a); ++i)

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf(" %s",x)

#define F first
#define S second

#define pb push_back
#define pf push_front
#define mp make_pair

const int inf=numeric_limits<int>::max();
const LL linf=numeric_limits<LL>::max();

int main(){
	//fr;
	int T,n;
	vector<pii> Value;
	set<int> Index;
	set<int>::iterator it;
	vi A;
	gi(T);
	while(T--){

		Index.clear();

		LL cost = 0;

		gi(n);

		A.resize(n+2);
		Value.resize(n);

		rep(i,n){
			gi(A[i+1]);
			Index.insert(i+1);
			Value[i] = mp(A[i+1],i+1);
		}

		A[0] = A[n+1] = inf;
		sort(all(Value));

		Index.insert(0);
		Index.insert(n+1);

		rep(i,n){
			pii current = Value[i];
			int upperVal = *Index.upper_bound(current.S);
			it = Index.lower_bound(current.S);
			--it;
			int lowerVal = *it;
			cost += min(A[upperVal], A[lowerVal]);
			Index.erase(current.S);
		}
		cost -= inf;
		cout << cost << "\n";
	}
	return 0;
}
#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>  
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <ctime> 
#include <assert.h>

#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash

#define eps 1e-13
#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 512

const int N = 500005;

using namespace std;

int n,k,d;
long long ar[N];
long long s[N];
int ans;
int lz,lp;
vector<long long> A;

int bound(int x)
{
	int id=upper_bound(A.begin(),A.end(),x)-A.begin();
	return A[id-1];
}
int main(){
	//freopen("beavers.in","r",stdin);
	//freopen("beavers.out","w",stdout);
	//freopen("F:/in.txt","r",stdin);
	//freopen("F:/output.txt","w",stdout);
	ios_base::sync_with_stdio(0);
	//cin.tie(0);
	
	cin>>n>>k>>d;
	
	for (int i=1;i<=n;i++)
	{
		cin>>ar[i];
		s[i]=s[i-1]+ar[i];
		if (ar[i]>0)
			A.push_back(i);
	}
	
	int lz=0;
	
	for (int i=1;i<=n;i++)
	{
		if (ar[i]>0)
			lz=i;
		
		if (i>=k)
		{
			long long S=s[i]-s[i-k];
			
			if (S<d)
			{
				if (lz<=i-k)
				{
					cout<<-1<<endl;
					return 0;
				}
				if (lp<=i-k)
				{
					ans++;
					lp=bound(lz+k-1);
				}
				else
					continue;
			}
		}
	}
	
	cout<<ans<<endl;
	
	return 0;
}
/**
Prashant Gupta(GHOST_YO)
IIITA
**/
#include <bits/stdc++.h>
using namespace std;
#define For(i,a,b) for(i=a;i<b;i++)
#define Ford(i,a,b) for(i=a;i>=b;i--)
#define Rep(i,c) for(__typeof(c.begin()) it(c.begin());i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define modul 1000000007
#define infi 99999999
#define BUG(x) {cout<<#x<<" = "<<x<<endl;}
#define PR(x,a,b) {For(i,a,b+1)cout<<x[i]<<' ';cout<<endl;}
#define FILL(a,x) memset(a,x,sizeof(a));
#define sc(a) scanf("%d", &a)
#define pii pair<int,int>
#define ll long long
#define PI acos(-1)
#define gc getchar
#define pc putchar
#define TIN {cout<<"Time started\n";time_t __t_v=clock();
#define TOUT cout<<"Time Taken : "<<(clock()-__t_v)/(double)CLOCKS_PER_SEC<<"\n";}

inline void scanint(int &x){register int c=0;x=0;int flag=0;for(;((c!=45)&&(c<48||c>57));c=gc());
for(;((c==45)||(c>47&&c<58));c=gc()){if(c==45)flag=1;else x=(x<<1)+(x<<3)+c-48;}if(flag)x=-x;}

#define MAX 400005
ll arr[MAX], tree1[MAX], tree2[MAX];

void build_tree1(int node, int a, int b) {
    if(a > b) return;
  	if(a == b) {
        tree1[node] = arr[a];
		return;
	}
	build_tree1(node*2, a, (a+b)/2);
	build_tree1(node*2+1, 1+(a+b)/2, b);
	tree1[node] = (tree1[node*2] + tree1[node*2+1]);
}

void update_tree1(int node, int a, int b, int i, int j, ll value) {
	if(a > b || a > j || b < i)
		return;
  	if(a == b) {
        tree1[node] += value;
        return;
	}
	update_tree1(node*2, a, (a+b)/2, i, j, value);
	update_tree1(1+node*2, 1+(a+b)/2, b, i, j, value);
	tree1[node] = (tree1[node*2] + tree1[node*2+1]);
}

ll query_tree1(int node, int a, int b, int i, int j) {
	if(a > b || a > j || b < i) return 0;
	if(a >= i && b <= j)
		return tree1[node];
	ll q1 = query_tree1(node*2, a, (a+b)/2, i, j);
	ll q2 = query_tree1(1+node*2, 1+(a+b)/2, b, i, j);
	return (q1 + q2);
}

void build_tree2(int node, int a, int b) {
    if(a > b) return;
  	if(a == b) {
        tree2[node] = arr[a]*(ll)(a+1);
		return;
	}
	build_tree2(node*2, a, (a+b)/2);
	build_tree2(node*2+1, 1+(a+b)/2, b);
	tree2[node] = (tree2[node*2] + tree2[node*2+1]);
}

void update_tree2(int node, int a, int b, int i, int j, ll value) {
	if(a > b || a > j || b < i)
		return;
  	if(a == b) {
        tree2[node] += value*(ll)(a+1);
        return;
	}
	update_tree2(node*2, a, (a+b)/2, i, j, value);
	update_tree2(1+node*2, 1+(a+b)/2, b, i, j, value);
	tree2[node] = (tree2[node*2] + tree2[node*2+1]);
}

ll query_tree2(int node, int a, int b, int i, int j) {
	if(a > b || a > j || b < i) return 0;
	if(a >= i && b <= j)
		return tree2[node];
	ll q1 = query_tree2(node*2, a, (a+b)/2, i, j);
	ll q2 = query_tree2(1+node*2, 1+(a+b)/2, b, i, j);
	return (q1 + q2);
}

int main()
{
    int t,n,q,m,i,j,k,l,r,s,ans,count,temp,sum,flag;

    sc(n), sc(q);

    For(i, 0, n)
        cin >> arr[i];

    build_tree1(1, 0, n-1);
    build_tree2(1, 0, n-1);

    while(q--) {
        sc(t);
        ll an;
        if(t == 1) {
            sc(k), sc(l), sc(r);

            if(k <= l) {
                an = query_tree2(1, 0, n-1, l-1, r-1);
                an -= (ll)k * query_tree1(1, 0, n-1, l-1, r-1);
            } else if(k >= r) {
                an = (ll)k * query_tree1(1, 0, n-1, l-1, r-1);;
                an -= query_tree2(1, 0, n-1, l-1, r-1);
            } else {
                an = (ll)k * query_tree1(1, 0, n-1, l-1, k-1);
                an -= (ll)k * query_tree1(1, 0, n-1, k-1, r-1);
                an -= query_tree2(1, 0, n-1, l-1, k-1);
                an += query_tree2(1, 0, n-1, k-1, r-1);
            }

            cout << an << endl;
        } else {
            sc(k), sc(s);

            update_tree1(1, 0, n-1, k-1, k-1, (ll)s);
            update_tree2(1, 0, n-1, k-1, k-1, (ll)s);
        }
    }

    return 0;
}

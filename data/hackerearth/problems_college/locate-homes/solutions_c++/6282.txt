#include<iostream>
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<math.h>
#include<string>
#include<time.h>
using namespace std;
 
struct points
{
long x;
int count;
};
points *pX;
points *pY;
 
inline long long tot(points *p,int &diff,int num)
{
int n;
long long sum=0;
for(n=0;n<diff;n++)
sum+=abs((p[n].x-p[num].x)*p[n].count);
return sum;
}
 
long Find(points *p,int &diff,double &mean)
{
int n,m;
long check=1,checkT1=0,checkT2=0;
long long sumT1,sumT2;
 
if(diff==1)
return check;
for(n=0;n<diff;n++)
if(p[n].x<=mean && p[n+1].x>mean)
break;
 
m=n;
while(n>0)
if(tot(p,diff,n)>=tot(p,diff,n-1))
n--;
else break;
sumT1=tot(p,diff,n);
while(n<m)
if(tot(p,diff,n)==tot(p,diff,n+1))
{
checkT1+=abs(p[n].x-p[n+1].x);
n++;
}
else break;
n=m;
while(n<diff-1)
if(tot(p,diff,n)>=tot(p,diff,n+1))
n++;
else break;
sumT2=tot(p,diff,n);
while(n>m)
if(tot(p,diff,n)==tot(p,diff,n-1))
{
checkT2+=abs(p[n].x-p[n-1].x);
n--;
}
else break;
if(sumT1==sumT2)
check+=(checkT1+checkT2);
else if(sumT1<sumT2)
check+=checkT1;
else
check+=checkT2;
return check;
 
}
int main() {
int T,b,n,N,diffX,diffY;
long long sumX,sumY,check;
long check1,check2;
double meanX,meanY;
 
 
scanf("%d",&T);
 
for(b=0;b<T;b++)
{
scanf("%d",&N);
long X[N];
long Y[N];
pX=new points[N];
pY=new points[N];
sumX=0;sumY=0;
for(n=0;n<N;n++)
{
scanf("%ld %ld",&X[n],&Y[n]);
 
}
 
meanX=((double)sumX)/N;
meanY=((double)sumY)/N;
sort(X,X+N);
sort(Y,Y+N);
 
 
diffX=0;diffY=0;
pX[0].x=X[0]; pX[0].count=1;
diffX++;
for(n=1;n<N;n++)
if(X[n-1]==X[n])
pX[diffX-1].count++;
else
{
pX[diffX].x=X[n];
pX[diffX].count=1;
diffX++;
}
pY[0].x=Y[0]; pY[0].count=1;
diffY++;
for(n=1;n<N;n++)
if(Y[n-1]==Y[n])
pY[diffY-1].count++;
else
{
pY[diffY].x=Y[n];
pY[diffY].count=1;
diffY++;
}
 
check1=Find(pX,diffX,meanX);
check2=Find(pY,diffY,meanY);
check=(long long)check1*check2;
printf("%lld \n",check);
 
}
 
 
return 0;
}
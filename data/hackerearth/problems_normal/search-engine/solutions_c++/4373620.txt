#include<bits/stdc++.h>
using namespace std;
struct node
{
    char val;
    int arr[27];
    int weight;
    int max1;
};
node graph[7000000];
int count1;
char s2[2000000];
char s3[2000000];
void ins(char [],int,int,int);
int calc(char [],int,int);
int main()
{

    int n,q;int w;
    node temp;
    scanf("%d %d",&n,&q);
    int i;
    temp.val='*';
    for(i=0;i<27;i++)
        temp.arr[i]=0;
    temp.weight=0;
    temp.max1=0;
    graph[0]=temp;
    count1=1;
    for(i=0;i<n;i++)
    {
        getchar();
           scanf("%s %d",s2,&w);
           ins(s2,w,0,0);
    }
    for(i=0;i<q;i++)
    {
        getchar();
        scanf("%s",s3);
        cout<<calc(s3,0,0)<<"\n";
    }

return 0;
}//main

void ins(char s[],int weight,int index,int pos)
{
    graph[index].max1=max(graph[index].max1,weight);
    int i;
    if (pos<strlen(s))
    {
        if (graph[index].arr[s[pos]-'a']==0)
        {
            graph[count1].val=s[pos];
            for(i=0;i<27;i++)
                graph[count1].arr[i]=0;
            graph[count1].weight=0;
            graph[count1].max1=weight;
            graph[index].arr[s[pos]-'a']=count1;
            count1++;
            ins(s,weight,count1-1,pos+1);

        }
        else
            {
            ins(s,weight,graph[index].arr[s[pos]-'a'],pos+1);
            }
    }
    else
    {
        graph[index].arr[26]=1;
        graph[index].weight=weight;
        graph[index].max1=max(graph[index].max1,weight);
    }
}

int calc(char s[],int index,int pos)
{
    int i;
    if (pos<strlen(s))
    {
        if (graph[index].arr[s[pos]-'a']==0)
            return -1;
        else
            return calc(s,graph[index].arr[s[pos]-'a'],pos+1);
    }
    else
        {
            return graph[index].max1;
    }
}

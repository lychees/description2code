#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cstdio>
using namespace std;
#define pp pair<int,int>
#define ppp pair<pp,int>
#define pb push_back
#define mp make_pair
int compound[300][300];
bool visit[300][300];
bool compare(ppp a,ppp b)
{
        pp A=a.first,B=b.first;
        if(A.second<B.second)return true;
        if(A.first>B.first&&A.second==B.second)return true;
        return false;
}
#define INF 100000000
int main()
{
        int tst;
        //cin>>tst;
        scanf("%d",&tst);
        while(tst--) {
                int L,K;
        //        cin>>L>>K;
		    scanf("%d%d",&L,&K);
                vector<ppp >vecc;
                for(int i=0; i<K; i++) {
                        int a,b,c;
                        //cin>>a>>b>>c;
                        scanf("%d%d%d",&a,&b,&c);
                        vecc.pb(mp(mp(a,b),c));
                }
                for(int i=0; i<300; i++) {
                        for(int j=0; j<300; j++) {
                                visit[i][j]=false;
                                compound[i][j]=INF;
                        }
                }
                sort(vecc.begin(),vecc.end(),compare);
                for(int t=0; t<K; t++) {
                        pp A=vecc[t].first;
                        visit[A.first][A.second]=true;
                        compound[A.first][A.second]=min(vecc[t].second,compound[A.first][A.second]);
                        for(int y=A.second; y>=A.first; y--) {
                                for(int x=A.first-1; x>=0; x--) {
                                        if(visit[x][y]) {
                                                compound[x][A.second]=min(compound[x][y]+compound[A.first][A.second],compound[x][A.second]);
                                                visit[x][A.second]=true;
                                        }
                                }
                        }
                }
                if(!visit[0][L]) {
                        //cout<<"-1\n";
                        printf("-1\n");
                } else {
                        //cout<<compound[0][L]<<endl;
                        printf("%d\n",compound[0][L]);
                }
        }
        return 0;
}

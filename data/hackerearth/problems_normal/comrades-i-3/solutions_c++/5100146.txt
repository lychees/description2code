#include<bits/stdc++.h>
using namespace std;
vector<int> v[100001];
int lvl[100001],dfsin[100001],dfsout[100001];
bool visited[100001];
int r;
void dfs(int s)
{
    dfsin[s]=r;
    visited[s]=true;
    for(int i=0;i<v[s].size();i++)
    {
        if(visited[v[s][i]]==false)
           {
               r++;
               dfs(v[s][i]);
           }
    }
    dfsout[s]=++r;
}
int main()
{
    int t,n,x,y,Q,C;
    scanf("%d",&t);
    while(t--)
    {
        r=0;
        scanf("%d",&n);
        for(int i=0;i<=n;i++)
        {
            v[i].clear();
            visited[i]=false;
        }
        for(int i=1;i<=n;i++)
        {
            scanf("%d",&x);
            if(x==0)
                {
                    lvl[i]=0;
                    C=i;
                }
            else
            {
                v[x].push_back(i);
            }
        }
        queue<int> q;
        while(!q.empty())
            q.pop();
        q.push(C);
        visited[C]=true;
        while(!q.empty())
        {
            int u=q.front();
            q.pop();
            for(int i=0;i<v[u].size();i++)
            {
                if(visited[v[u][i]]==false)
                {
                    lvl[v[u][i]]=lvl[u]+1;
                    q.push(v[u][i]);
                    visited[v[u][i]]=true;
                }
            }
        }
        for(int i=0;i<=n;i++)
            visited[i]=false;
        dfs(C);
        /*for(int i=1;i<=n;i++)
        {
            cout<<dfsin[i]<< " ";
        }
        cout<<"\n";
        for(int i=1;i<=n;i++)
        {
            cout<<dfsout[i]<<" ";
        }*/
        scanf("%d",&Q);
        int ans;
        while(Q--)
        {
            scanf("%d%d",&x,&y);
            if(dfsin[y]<dfsin[x]&&dfsout[x]<dfsout[y])
            {
                ans=lvl[x]-lvl[y]-1;
                printf("%d\n",ans);
            }
            else
                printf("-1\n");
        }
    }
    return 0;
}

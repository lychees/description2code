#include <bits/stdc++.h>
using namespace std;

struct Dis_Set{
	vector<int>sz, id;
	Dis_Set( int N ){
		sz.assign(N, 1);
		id.assign(N, 0);
		for(int i=0 ; i < N; i++) {
			id[i] = i;
		}
	}
	
	int find( int x ) {
		while( id[x]!=x ){
			id[x] = id[ id[x] ];
			x = id[x];
		}
		return x;
	}
	
	void merge( int p, int q){
		int x = find(p);
		int y = find(q);
		if(x==y)
			return;
		
		if( sz[x]<sz[y] ){
			id[x] = y;
			sz[y] += sz[x];
		} else {
			id[y] = x;
			sz[x] += sz[y];
		}
	}
	
};

int main()
{
	int lim = 100000;
	long long fact[lim];
	long long mod = 1e9 + 7;
	
	fact[0] = 1;
	for( int i=1; i <= lim; i++){
		fact[i] = (fact[i-1]*i)%mod;
	}
	
    for( int n, k; cin>>n>>k; ){
    	Dis_Set ds(n);
    	int u, v, i;
    	long long res = 1;
    	
    	
    	for( i=0; i<k; i++ ){
    		cin>>u>>v;
    		ds.merge(u, v);
    	}
    	vector<int>used(n,0);
    	int aux;
    	for(int i=0;i < n; i++){
    		aux = ds.find(i);
    		if( !used[aux] ){
    			used[aux] = 1;
    			res = (res*fact[ds.sz[aux]] )%mod;
    		}
    	}
    	cout<<res<<"\n";
    }
}

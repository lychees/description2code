// ANKUR MAHIWAL IT MNNIT Allahabad

#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<cstring>
#include<algorithm>
#include<limits.h>
#include<math.h>
#define L1(n) for(int i=0;i<n;i++)
#define L2(n,m) for(int i=0;i<n;i++) { for(int j=0;j<m;j++){

			
using namespace std;


long long int GCD(long long int a,long long  int b)
{
    long long int gcd = 0;
    if(a < 0)
    {
        a = -a;
    }
    if(b < 0)
    {
        b = -b;
    }
    if (a%b==0)
    {
        gcd = b;
        return gcd;
    }
    return GCD(b,a%b);
}

int main()
{
 int test;
long long int N,R;

cin >> test;

while(test--)
{
 
scanf("%lld %lld",&N,&R);

long long int n = R-1;
long long int num_factors = 1;
for (long long int i = 2; i * i <=n; ++i) // for each number i up until the square root of the given number
{
    long long int power = 0; // suppose the power i appears at is 0
    while (n % i == 0) // while we can divide n by i
    {
        n = n / i; // divide it, thus ensuring we'll only check prime factors
        ++power;// increase the power i appears at
    }
    num_factors = num_factors * (power + 1); // apply the formula
}

if (n > 1) // will happen for example for 14 = 2 * 7
{
    num_factors = num_factors * 2; // n is prime, and its power can only be 1, so multiply the number of factors by 2
}
//cout << num_factors << endl;
num_factors=N-num_factors;

//cout << num_factors << endl;

int gret=GCD(N,num_factors);

cout << num_factors/gret << "/" << N/gret << endl;

}



return 0;
}

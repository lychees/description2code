n,d=list(map(int,raw_input().split()))

graph={}

def dfs(node,visited,ct):
    ct+=1
    #print(node,graph)
    if node in graph:
        for nodeAjacent in graph[node]:
            if nodeAjacent not in visited:
                visited.append(nodeAjacent)
                return dfs(nodeAjacent,visited,ct)
    
    return ct

nodesDepended=[1 for i in range(n)]
for i in range(d):
    x,y=list(map(int,raw_input().split()))
    
    if x in graph:
        graph[x].append(y)
    else:
        graph[x]=[y]
        

for node in graph:
    visited=[node]
    ct=0
    
    nodesDepended[node-1]=dfs(node,visited,ct)     
    #print("node",node,nodesDepended[node-1])
    
#print(nodesDepended)
print(min(nodesDepended))    
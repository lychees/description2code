#include<bits/stdc++.h>
#define CONST 100009
#define MOD 1000000007
using namespace std;
typedef long long int ll;
long long int fact[CONST];
long long int invfact[CONST];
char str[100009];
int cumulative[100009];
long long int mod_expo(long long int a,long long int b,long long int p)
{
   long long int ans=1;
   a%=p;
   while(b)
   {
      if(b&1)
      ans=(ans*a)%p;
      b>>=1;
      a=(a*a)%p;
   }
   return ans;
}
void pre_calculate()
{
   fact[1]=1;
   invfact[1]=1;
   for(int i=2;i<CONST;i++)
   {
      fact[i]=(fact[i-1]*i)%MOD;
      invfact[i]=mod_expo(fact[i],MOD-2,MOD);
   }
}
long long int nCr(int n,int r)
{
   if(r==0||r==n)
      return 1;
   if(n<r)
      return 0;
   long long int ans=(fact[n]*((invfact[r]*invfact[n-r])%MOD))%MOD;
   return ans;
}
int main()
{
    pre_calculate();
    int test;
    scanf("%d",&test);
    while(test--)
    {
        int n,L;
        scanf("%s%d",str,&n);
        L=strlen(str);
        cumulative[0]=0;
        if(str[0]=='l')
            cumulative[0]=1;
        for(int i=1;i<L;i++)
        {
            cumulative[i]=0;
            if(str[i]=='l')
                cumulative[i]=1;
            cumulative[i]+=cumulative[i-1];
        }
        ll ans=0;
        for(int i=0;i<L;i++)
        {
            if(str[i]=='u')
            {
                int lo,hi;
                lo=cumulative[i];
                hi=cumulative[L-1]-cumulative[i];
 //               printf("%d %d\n",lo,hi);
                int req=n/2;
                ans+=(nCr(lo,req)*nCr(hi,req))%MOD;
                ans%=MOD;
            }
        }
        printf("%lld\n",ans%MOD);
    }
}

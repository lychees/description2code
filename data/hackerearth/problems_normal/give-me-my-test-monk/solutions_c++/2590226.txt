#include<iostream>
#include<stdio.h>
#include<limits.h>
#include<algorithm>
#include<vector>
#include<string.h>
#include<math.h>
#include<set>
#include<map>
#include<string>
#include<queue>
#include<deque>
#include<assert.h>
#define ones(A) memset(A,-1,sizeof(A))
#define zeros(A) memset(A,0,sizeof(A))
#define SZ size
#define mii map<int,int>
#define mli map<long long int,int>
#define mil map<int,long long int>
#define mll map<long long int,long long int>
#define msi map<string,int>
#define mis map<int,string>
#define si(x) scanf("%d",&x)
#define s2i(x,y) scanf("%d%d",&x,&y)
#define sll(x) scanf("%lld",&x)
#define s2ll(x,y) scanf("%lld%lld",&x,&y)
#define pi(x) printf("%d\n",x)
#define pll(x) printf("%lld\n",x)
#define ss(s) scanf("%s",&s)
#define ps(s) printf("%s\n",s)
#define FOR(i,n) for(int i=0;i<n;i++)
#define FOR2(i,start,end,inc) for(int i=start;i<=end;i+=inc)
#define DEC(i,start,end,inc) for(int i=start;i>=end;i-=inc)
#define vi vector<int>
#define ub upper_bound
#define lb lower_bound
#define bs binary_search
#define vll vector<long long int>
#define pb push_back
#define MOD 1000000007
typedef long long int ll;
typedef unsigned long long int ull;
using namespace std;
ll deran[101];
ll fact[101];
ll C[101][101];
int binomialCoeff(int n, int k)
{
    int i, j;
    for (i = 0; i <= n; i++)
    {
        for (j = 0; j <= min(i, k); j++)
        {
            if (j == 0 || j == i)
                C[i][j] = 1;
        else
                C[i][j] = C[i-1][j-1] + C[i-1][j];
                C[i][j]%=MOD;
        }
    }
}
void preprocess(){
	deran[0]=1;
	deran[1]=0;
	deran[2]=1;
	FOR2(i,3,100,1){
		deran[i]=i*deran[i-1];
		deran[i]%=MOD;
		if(i%2){
			deran[i]=deran[i]-1+MOD;
			deran[i]%=MOD;
		}
		else{
			deran[i]++;	
			deran[i]%=MOD;
		} 
	}
	//pi(deran[100]);
	fact[0]=1;fact[1]=1;
	FOR2(i,2,100,1){
		fact[i]=fact[i-1]*i;
		fact[i]%=MOD;
	}
}
ll gcd(ll a,ll b){
	if(b==0)return a;
	return gcd(b,a%b);
}
ll modular_pow(ll base,ll exponent,ll modulus){ 
	ll result = 1;
	while (exponent>0){
		if(exponent%2==1)
			result = (result * base)% modulus;
		exponent=exponent>>1;
		base=(base*base)%modulus;
	}
return result;
}
int main(){
	int n,l,r;
	si(n);s2i(l,r);
	preprocess();
	binomialCoeff(100,100);
	ll denom=0,num=0;
	FOR2(i,0,n,1){
		ll t1=C[n][i]*deran[i];
		t1%=MOD;
		denom+=t1;
		denom%=MOD;
		if(i>=l && i<=r){
			num+=t1;
			num%=MOD;
		}
	}
//	denom++;
//	denom%=MOD;
	ll gcdd=gcd(num,denom);
	num/=gcdd;
	denom/=gcdd;
	ll inv=modular_pow(denom,MOD-2,MOD);
	num*=inv;
	num%=MOD;
	pll(num);
	return 0;
}
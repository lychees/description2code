#include<bits/stdc++.h>
#define MAXN 110
using namespace std;
int dist[MAXN][MAXN];
int graph[MAXN][MAXN];
int N,M;
void floydWarshell()
{
   	int V=N;
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
    for (int k = 0; k < V; k++)
    {
        for (int i = 0; i < V; i++)
        {
            for (int j = 0; j < V; j++)
            {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX && dist[i][k] + dist[k][j] < dist[i][j])
    			dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
}

int main()
{
    cin>>N>>M;
    map<string,int> nameMap;
    for(int i=0;i<N;i++){
    	string x;
    	cin>>x;
    	nameMap[x]=i;
    }
    for(int i=0;i<N;i++)
    for(int j=0;j<N;j++)
    graph[i][j]=INT_MAX;
    
    for(int i=0;i<N;i++){
    	graph[i][i]=0;
    }
    /*
    map<string,int>::iterator it=nameMap.begin();
    for(it=nameMap.begin();it!=nameMap.end();it++){
    	cout<<it->first<<" "<<it->second<<"\n";
    }*/
    while(M--){
    	string src,dest;
    	int dist;
    	cin>>src>>dest>>dist;
    	int s=nameMap[src];
    	int d=nameMap[dest];
    	//cout<<"CONNECTING SRC "<<src<<" AND "<<dest<<"\n";
    	graph[s][d]=dist;
    	graph[d][s]=dist;
    }
    /*
    for(int i=0;i<N;i++){
    	for(int j=0;j<N;j++){
    		cout<<graph[i][j]<<" ";
    	}
    	cout<<"\n";
    }*/
    floydWarshell();
    int Q;
    cin>>Q;
    while(Q--){
    	string src,dest;
    	cin>>src>>dest;
    	int s=nameMap[src];
    	int d=nameMap[dest];
    	cout<<dist[s][d]<<"\n";
    }
}
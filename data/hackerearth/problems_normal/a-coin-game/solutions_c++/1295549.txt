

    #include <string>
    #include <vector>
    #include <algorithm>
    #include <numeric>
    #include <set>
    #include <map>
    #include <queue>
    #include <iostream>
    #include <sstream>
    #include <cstdio>
    #include <cmath>
    #include <ctime>
    #include <cstring>
    #include <cctype>
    #include <cassert>
    #include <limits>
    #include <functional>
    #include <complex>
    #define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
    #define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
    #define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
    #if defined(_MSC_VER) || __cplusplus > 199711L
    #define aut(r,v) auto r = (v)
    #else
    #define aut(r,v) __typeof(v) r = (v)
    #endif
    #define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
    #define all(o) (o).begin(), (o).end()
    #define pb(x) push_back(x)
    #define mp(x,y) make_pair((x),(y))
    #define mset(m,v) memset(m,v,sizeof(m))
    #define INF 0x3f3f3f3f
    #define INFL 0x3f3f3f3f3f3f3f3fLL
    using namespace std;
    typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
    template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
    template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }
    bool solve(int N1, int N2) {
    const int N = 1000000;
    if(N1 > N || N2 > N) exit(1);
    static vector<int> a(N+1);
    if(!a[1]) {
    vector<bool> used(N * 2 + 2, false);
    int lastnum = 0;
    for(int n = 0; lastnum < N; ++ n) {
    while(used[lastnum])
    ++ lastnum;
    int p = lastnum, q = p + n;
    if(p <= N) a[p] = q;
    if(q <= N) a[q] = p;
    used[p] = used[q] = true;
    }
    }
    return a[N1] != N2;
    }
    int main() {
    int T;
    scanf("%d", &T);
    assert(1 <= T && T <= 100000);
    rep(ii, T) {
    int N1, N2;
    scanf("%d%d", &N1, &N2);
    assert(0 <= N1 && N1 <= 1000000 && 0 <= N2 && N2 <= 1000000);
    bool ans = solve(N1, N2);
    puts(ans ? "Play" : "Don't Play");
    }
    return 0;
    }


#include<iostream>
#include<cstdio>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<cassert>
#define PB push_back
#define MP make_pair
#define sz(v) (in((v).size()))
#define forn(i,n) for(in i=0;i<(n);++i)
#define forv(i,v) forn(i,sz(v))
#define fors(i,s) for(auto i=(s).begin();i!=(s).end();++i)
#define all(v) (v).begin(),(v).end()
using namespace std;
typedef long long in;
typedef vector<in> VI;
typedef vector<VI> VVI;
struct unifnd{
  VI ht,pr;
  in fnd(in a){
    in ta=a;
    while(a!=pr[a])a=pr[a];
    in tt=ta;
    while(ta!=a){
      tt=pr[ta];
      pr[ta]=a;
      ta=tt;
    }
    return a;
  }
  void uni(in a, in b){
    a=fnd(a);
    b=fnd(b);
    if(a==b)return;
    if(ht[b]<ht[a])swap(a,b);
    pr[a]=b;
    ht[b]+=(ht[a]==ht[b]);
  }
  void ini(in n){
    ht.resize(n);
    pr.resize(n);
    forn(i,n){
      ht[i]=0;
      pr[i]=i;
    }
  }
};
unifnd uf;
const in mx=100009;
VI invp(mx);
VI invq(mx);
int main(){
  ios::sync_with_stdio(0);
  cin.tie(0);
  in t;
  cin>>t;
  in ta,tb;
  forn(z,t){
    in n,m;
    cin>>n>>m;
    uf.ini(n+1);
    forn(i,n){
      cin>>ta;
      invp[ta]=i+1;
    }
    forn(i,n){
      cin>>ta;
      invq[ta]=i+1;
    }
    forn(i,m){
      cin>>ta>>tb;
      uf.uni(ta,tb);
    }
    bool ok=1;
    forn(i,n)
      if(uf.fnd(invp[i])!=uf.fnd(invq[i]))
	ok=0;
    cout<<(ok?"YES":"NO")<<"\n";
  }
  return 0;
}

#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <cstring>
#include <cmath>
#include <cassert>
#define FI first
#define SE second
#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i)
#define REV(i,a,b) for(int i= (int )a ; i >= (int)b ; --i)
#define REP(i,n) FOR(i,0,n)
#define DEP(i,n) REV(i,n,0)
#define PB push_back
#define PP pop()
#define MAX(x,y) (x)>(y)?(x):(y)
#define MIN(x,y) (x)<(y)?(x):(y)
#define PF push_front
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define V(x) vector< x >
#define Debug false
#define PRINT(x)        cout << #x << " " << x << endl
#define LET(x,a)         __typeof(a) x(a)
#define IFOR(i,a,b)     for(LET(i,a);i!=(b);++i)
#define EACH(it,v)      IFOR(it,v.begin( ),v.end( ))
#define PRESENT(c,x)    ((c).find(x) != (c).end( ))
#define SZ(x)           x.size()
#define CPRESENT(c,x)   (find(c.begin(),c.end(),x) != (c).end())
#define D(N)            int N
#define S(N)            scanf("%d",&N)
#define SD(N)           int N;scanf("%d",&N)
#define MP make_pair
#define EM empty()
using namespace std;
typedef pair<int ,int >   PI;
typedef pair<int,PI>    TRI;
typedef V( int ) VI;
typedef V( PI  )        VII;
typedef V( string )     VS;
typedef long long LL;
typedef long double LD;
 
 
bool isOneChild(int number , int digit){
    int start = 1 , end = 10;
    int times = 0;
    REP(i,digit){
        end = start * 10;
        FOR(j,i,digit){
            int val = number%end - number%start;
            val /= start;
            end *= 10;
            if (val%digit == 0)
                times++;
        }
        start *= 10;
    }
    if (times == 1)
        return true;
    else return false;
}
 
int size[1000010];
int main(int argc, char const *argv[]){
    FOR(i,1,10)
        size[i] = size[i-1] + 1;
    int factor = 100;
    int digit = 2;
    
    FOR(i,10,1000010){
        if (factor == i){
            factor *= 10;
            digit+=1;
        }
        if (isOneChild(i ,digit))
            size[i] = size[i-1] + 1;
        else size[i] = size[i-1];
 
    }
    
    int n;
    while(1){
    	scanf("%d",&n);
    	if(n==0) break;
    	if(n==10000000) printf("277674\n");
    	else printf("%d\n",size[n-1]);
    }
    
    return 0;
}
 
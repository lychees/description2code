using namespace std;
#include<bits/stdc++.h>

#define BG begin()
#define ED end()
#define st first
#define nd second
#define PB push_back
#define PF push_front
#define FOR(i,a,b) for (long long i=a;i<b;i++)
#define FORE(i,a,b) for (long long i=a;i<=b;i++)
#define FORD(i,a,b) for (long long i=a;i>=b; i--)
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define PI 2 * acos(0)
#define ri(n)({\
    int neg=0;\
    n=0;\
    char ch;\
    for(ch=getchar(); ch<'0' || ch>'9'; ch=getchar()) if (ch=='-') neg=1-neg;\
    n=ch-48;\
    for(ch=getchar(); ch>='0' && ch<='9'; ch=getchar()) n=(n<<3)+(n<<1)+ch-48;\
    if (neg) n=-n;\
})

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> II;
typedef pair<int,II> III;
typedef pair<ll,ll> LL;
const ll INF=1000000000+7;
const double esp=1e-13;

struct node{
    int gt,vt;
    bool operator <(const node &op)const{
        return op.gt>gt;
    }
}a[100000+10],b[100000+10];

struct node2{
    int gt1,gt2,value;
    bool operator <(const node2 &op)const{
        return op.value>value;
    }
}c[200000+10];

int par[100000+10],rank2[100000+10];
int n,m;
ll ans;

int get(int u){
    if (u==par[u]) return u;
    else return par[u]=get(par[u]);
}

void union2(int u, int v, ll w){
    u=get(u);
    v=get(v);
    if (u!=v){
        ans+=w;
        if (rank2[u]<rank2[v]) swap(u,v);
        par[v]=u;
        if (rank2[u]==rank2[v]) rank2[u]++;
    }
}

int main(){
 //   freopen("make-paths-3.inp", "r", stdin);
 //   freopen("make-paths-3.out", "w", stdout);
    ios_base::sync_with_stdio (false);
    cin >> n;
    FORE(i,1,n){
        cin >> a[i].gt;
        a[i].vt=i;

        cin >> b[i].gt;
        b[i].vt=i;
    }
    sort(a+1,a+n+1);
    sort(b+1,b+n+1);
    m=0;
    FORE(i,2,n){
        m++;
        c[m].gt1=a[i].vt;
        c[m].gt2=a[i-1].vt;
        c[m].value=a[i].gt-a[i-1].gt;

        m++;
        c[m].gt1=b[i].vt;
        c[m].gt2=b[i-1].vt;
        c[m].value=b[i].gt-b[i-1].gt;
    }
    sort(c+1,c+m+1);
    FORE(i,1,n) rank2[i]=0;
    FORE(i,1,n) par[i]=i;
    ans=0;
    FORE(i,1,m) union2(c[i].gt1,c[i].gt2,c[i].value);
    cout << ans;
}

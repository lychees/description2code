#include <bits/stdc++.h>
using namespace std;
#define M 1000005
typedef long long ll;
int a[32005];
  int tree[32000*4+5];
bool isprime[M];
// if isprime[x]=true it is prime
void prime(){
isprime[0]=false;isprime[1]=false;
for(int i=2;i*i<=M;i++){
    if(isprime[i]==true){
        for(int j=i*i;j<=M;j+=i){
            isprime[j]=false;
        }
    }
}
}
void build(int node,int start,int ending){
if(start==ending){
        if(isprime[a[start]]==true)
    tree[node]=1;
    else
        tree[node]=0;
    return;
}
build(2*node+1,start,(start+ending)/2);
build(2*node+2,1+(start+ending)/2,ending);
tree[node]=tree[2*node+1]+tree[2*node+2];
return;
}
void update(int node,int start,int ending,int ind,int val){
if(start==ending)
{
    if(isprime[val]==true)
    tree[node]=1;
    else
        tree[node]=0;
     return;

}
if(ind<=(start+ending)/2)
    update(2*node+1,start,(start+ending)/2,ind,val);
else
    update(2*node+2,1+(start+ending)/2,ending,ind,val);
tree[node]=tree[2*node+1]+tree[node*2+2];
return;
}
int query(int node,int start,int ending ,int l,int r){
if(r < start || ending  < l)
    {
        // range represented by a node is completely outside the given range
        return 0;
    }
 if(l <= start and ending  <= r)
    {
        // range represented by a node is completely inside the given range
        return tree[node];
    }
int mid=(start+ending)/2;
int p1 = query(2*node+1, start, mid, l, r);
    int p2 = query(2*node+2, mid+1, ending , l, r);
    return (p1 + p2);

}




int main()
{
   for(int i=0;i<=M;i++)
    isprime[i]=true;
    prime();
   int t;
   cin>>t;
   while(t--){
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    cin>>a[i];
    build(0,0,n-1);
    int q;
    cin>>q;
    for(int i=0;i<q;i++){
            int x,y;
              char c;
        cin>>c>>x>>y;
        if(c=='C')// CHANGE AT INDEX X(here zero indexing) WITH VALUE Y
            update(0,0,n-1,x-1,y);
        else
           cout<< query(0,0,n-1,x-1,y-1)<<endl;

    }


   }

    return 0;
}

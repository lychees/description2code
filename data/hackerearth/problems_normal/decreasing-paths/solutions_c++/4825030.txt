#include <iostream>
#include <stdio.h>
#include <cstring>
#include <string>
#include <algorithm>
#include <assert.h>
using namespace std;
struct no{
	int r;
	int c;
	int v;
};
bool operator<(no a, no b){
	return a.v>b.v;
}
int fld[1010][1010];
int dp[1010][1010];
no arr[1001001];
int k=0;
int n;
int mod=1000000007;
int main(){
	cin>>n;
	assert(1<=n && n<=1000);
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			cin>>fld[i][j];
			assert(1<=fld[i][j] && fld[i][j]<=100);
			arr[k].r=i;
			arr[k].c=j;
			arr[k].v=fld[i][j];
			k++;
		}
	}
	string h;
	if(cin>>h)
		assert(false);
	sort(arr,arr+k);
	long long sol=0;
	for(int i=0;i<k;i++){
		int r=arr[i].r;
		int c=arr[i].c;
		int v=arr[i].v;
		dp[r][c]=1;
		if(c>1 && fld[r][c-1]>v)
			dp[r][c]+=dp[r][c-1];
		dp[r][c]%=mod;
		if(c<n && fld[r][c+1]>v)
			dp[r][c]+=dp[r][c+1];
		dp[r][c]%=mod;
		if(r<n && fld[r+1][c]>v)
			dp[r][c]+=dp[r+1][c];
		dp[r][c]%=mod; 
		if(r>1 && fld[r-1][c]>v)
			dp[r][c]+=dp[r-1][c];
		dp[r][c]%=mod;
		sol+=dp[r][c];
		sol%=mod;
	}
	cout<<sol<<endl;
}
#include <bits/stdc++.h>

using namespace std;

int maxPrimes[1000001];
vector<int> primes[1000001];

long long phi(long long val, vector<int> primes) {
	long long res = val;
	for (int i = 0; i < primes.size(); i++) {
		while (val % primes[i] == 0) {
			val /= primes[i];
		}
		res = res/primes[i] * (primes[i]-1);
	}
	if (val > 1)
		res = res/val * (val-1);
	return res;
}

int main() {
	maxPrimes[1] = 1;
	for (int i = 2; i <= 1000000; i++) {
		if (maxPrimes[i] == 0) {
			for (int j = 2*i; j <= 1000000; j += i) {
				maxPrimes[j] = 1;
			}
		}
	}
	
    int T;
    cin >> T;
    for (int t = 0; t < T; t++) {
    	long long l, r, k;
    	cin >> l >> r >> k;
    	
    	for (long long i = l; i <= r; i++) {
    		primes[i-l].clear();
    	}
    	for (int i = 2; i <= 1000000; i++) {
    		if (maxPrimes[i] != 0)
    			continue;
    		long long bound = l/i * i;
    		if (l % i > 0)
    			bound += i;
    		for (long long j = bound; j <= r; j += i) {
    			primes[j-l].push_back(i);
    		}
    	}
    	
    	int num = 0, den = r-l+1;
    	for (long long i = l; i <= r; i++) {
    		if (phi(i, primes[i-l]) % k == 0)
    			num++;
    	}
    	
    	double ans = (double)(num)/(double)(den);
    	
    	cout << fixed << setprecision(6) << ans << endl;
    }
    return 0;
}
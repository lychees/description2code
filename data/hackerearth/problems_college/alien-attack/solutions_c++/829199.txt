#include <stdio.h>
 
void multiply(long long F[2][2], long long M[2][2]);
 long long mod=1000000007;
void power(long long F[2][2], long long n);
 
/* function that returns nth Fibonacci number */
long long fib(long long n)
{
  long long F[2][2] = {{1,2},{1,0}};
  if (n == 1)
    return 2;
  if(n==2)
  return 7;
  power(F, n-2);
  return 7*F[0][0]+2*F[0][1];
}
 
/* Optimized version of power() in method 4 */
void power(long long F[2][2], long long n)
{
  if( n == 0 || n == 1)
      return;
  long long M[2][2] = {{1 ,2},{1,0}};
 
  power(F, n/2);
  multiply(F, F);
 
  if (n%2 != 0)
     multiply(F, M);
}
 
void multiply(long long F[2][2], long long M[2][2])
{
  long long x =  F[0][0]*M[0][0] + F[0][1]*M[1][0];
  long long y =  F[0][0]*M[0][1] + F[0][1]*M[1][1];
  long long z =  F[1][0]*M[0][0] + F[1][1]*M[1][0];
  long long w =  F[1][0]*M[0][1] + F[1][1]*M[1][1];
 
  F[0][0] = x%mod+mod;
  F[0][1] = y%mod+mod;
  F[1][0] = z%mod+mod;
  F[1][1] = w%mod+mod;
}
 
/* Driver program to test above function */
int main()
{
    int t;
    scanf("%d",&t);
    while(t-->0){
  int n;scanf("%d",&n);
  printf("%d\n", (fib(n)%mod+mod)%mod);}
  return 0;
}
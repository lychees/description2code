from collections import defaultdict

N = input()
rootArr = [i for i in xrange(N+1)]
risk_of_city = [0] + map(int, raw_input().split())

r = defaultdict(list)

def root(i):
	while not (rootArr[i] == i):
		i = rootArr[i]
	return i

def union(i, j):
	root_i = root(i)
	root_j = root(j)
	rootArr[root_j] = root_i

def riskOfConnectedCities():
	# returns number of connected components
	for city in xrange(1, N+1):
		r[root(city)].append(risk_of_city[city])

def ways():
    riskOfConnectedCities()
    ways = 1
    for city, risk in r.iteritems():
        ways *= risk.count(min(risk))
    return ways % ((10**9)+7)

for _ in xrange(input()):
	i, j = map(int, raw_input().split())
	union(i, j)

print ways()
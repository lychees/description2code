#include<bits/stdc++.h>
using namespace std;\
int ans,flag=0;
#define max_vertice 10000
vector<int>graph[max_vertice];
void d_f_s(int n,int *visited)
{
    visited[n]=-1;
    vector<int>::iterator it;
    for(it=graph[n].begin();it!=graph[n].end();it++)
    {
        if(visited[*it]==1)
            {   flag=-1;}
        else if(!visited[*it])
            d_f_s(*it,visited);
    }
    visited[n]=1;
}
void dfs()    //driver programm
{
    int visited[max_vertice]={0}; // to keep track of visited nodes;
     for(int i=0;i<max_vertice;i++)
     {
         if(!visited[i])
            d_f_s(i,visited);
     }
}
int main()
{   int t;
scanf("%d",&t);
while(t--){
    ans=0;
    for(int i=0;i<=10000;i++)
         graph[i].clear();
    int n,m,x,y;
    scanf("%d %d",&n,&m);
    for(int i=0;i<m;i++)
    {
        scanf("%d %d",&x,&y);
        graph[x].push_back(y);
        graph[y].push_back(x);
    }
    if(m==n-1)
    dfs();
        if(flag==-1||m!=n-1)
            printf("NOT BICOLORABLE.\n");
        else
            printf("BICOLORABLE.\n");
}
    return 0;
}

//Program: dperm
//Author: gary
//Date: 23/05/2015
#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> pii;
// const int INF = 1e9;
const int MAX_N = 1e5 + 1;
const int mod = 1e9 + 7;
void madd(int& a, int b){
  a += b;
  if(a >= mod) a -= mod;
}
int mul(int a, int b){
  return 1LL * a * b % mod;
}
int mpow(int a, int n){
  int r = 1;
  while(n > 0){
    if(n & 1)
      r = mul(r, a);
    a = mul(a, a);
    n >>= 1;
  }
  return r;
}

int N;
bool C[MAX_N];

int ft[MAX_N];
void add(int i){
  for(; i < MAX_N; i += i & -i)
    ft[i] ++;
}
int get(int i){
  int s = 0;
  for(; i > 0; i -= i & -i)
    madd(s, ft[i]);
  return s;
}

int main(){
  scanf("%d", &N);
  if(N == 1) printf("%d\n", 1);
  else {
    int res = 0, x;
    for(int i = 0; i < 2 * N; i++){
      scanf("%d", &x);
      int l = get(x - 1);
      int b = i - l - C[x];
      madd(res, l);
      madd(res, mul(3, b));
      add(x);
      C[x] = 1;
    }
    madd(res, 2 * N);
    res = mul(res, mpow(2, N - 2));
    printf("%d\n", res);
  }

//   double res = 2 * N; 
//   for(int i = 0; i < 2 * N; i++){
//     for(int j = 0; j < i; j++){
//       if(A[i] == A[j]) continue;
//       if(A[j] < A[i]){
//         res += 1;
//       } else {
//         res += 3;
//       }
//     }
//   }



  return 0;
}

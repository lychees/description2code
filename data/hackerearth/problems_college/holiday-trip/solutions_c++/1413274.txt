#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int> ii;
typedef vector<ii> vii;
#define TRvii(c, it) for(vii::iterator it = (c).begin(); it != (c).end(); it++)
#define F(i,a,b) for(int i = (int)(a); i <= (int)(b); i++)
#define RF(i,a,b) for(int i = (int)(a); i >= (int)(b); i--)
#define dfs_white -1
#define dfs_black 1
#define MAX(a,b) ((a) > (b) ? (a) : (b))
int dfs_num[2005];
vii AdjList[2005];
int Distance[2005];
#define gc getchar_unlocked

int read_int(){
    register int x = 0, c = gc();
    int sign = 1;
    while(c!='-' && (c<48 || c>57) ) c = gc();
    if(c=='-')
        sign = -1, c = gc();
    while(c>=48 && c<=57)
        x = (x<<1) + (x<<3) + c - 48, c = gc();
    return sign*x;
}
int dfs(int u)
{
    dfs_num[u]=dfs_black;
    TRvii(AdjList[u], v)
    if(dfs_num[v->first] == dfs_white)
    {
        Distance[v->first]=max(Distance[v->first],Distance[u]+1);
        dfs(v->first);
    }
}

int main()
{
     #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int N,u,v,k,M,j,T;
    T = read_int();
    while(T--){
    N = read_int();
    F(i,0,N-1) AdjList[i].clear();
    M = -1;
    F(i,1,N-1)
    {
        u = read_int();
        v = read_int();
        AdjList[u].push_back(make_pair(v,0));
        AdjList[v].push_back(make_pair(u,0));
    }
    memset(dfs_num, dfs_white, sizeof(dfs_num));
    memset(Distance,0 , sizeof(Distance));
    Distance[0] = 1;
    dfs(0);
    F(i,0,N-1)
    {
        if(Distance[i]>M)
        {
            M=Distance[i];
            j=i;
        }
    }
    memset(dfs_num, dfs_white, sizeof(dfs_num));
    memset(Distance,0 , sizeof(Distance));
    M = -1;
    Distance[j] = 1;
    dfs(j);
    F(i,0,N-1)
    {
        if(Distance[i]>M)
        {
            M=Distance[i];
            j=i;
        }
    }
    printf("%d\n",M);
    }
    return 0;

}



#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;
 
void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}
 
int CeilIndex(int A[], int l, int r, int key) {
    int m;
 
    while( r - l > 1 ) {
        m = l + (r - l)/2;
        (A[m] >= key ? r : l) = m; // ternary expression returns an l-value
    }
 
    return r;
}
 
int LongestIncreasingSubsequenceLength(int A[], int size) {
    // Add boundary case, when array size is one
 
    int *tailTable   = new int[size];
    int len; // always points empty slot
 
    memset(tailTable, 0, sizeof(tailTable[0])*size);
 
    tailTable[0] = A[0];
    len = 1;
    for( int i = 1; i < size; i++ ) {
        if( A[i] < tailTable[0] )
            // new smallest value
            tailTable[0] = A[i];
        else if( A[i] > tailTable[len-1] )
            // A[i] wants to extend largest subsequence
            tailTable[len++] = A[i];
        else
            // A[i] wants to be current end candidate of an existing subsequence
            // It will replace ceil value in tailTable
            tailTable[CeilIndex(tailTable, -1, len-1, A[i])] = A[i];
    }
 
    delete[] tailTable;
 
    return len;
}
 
void solve()
{
	int n;
	s(n);
	int arr[n];
	rep(i, n) s(arr[i]);
	int ans =  LongestIncreasingSubsequenceLength(arr, n);
	printf("%d\n", n - ans);
}
 
int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
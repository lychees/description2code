#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <cstring>
#include <sstream>
#include <set>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cstdlib>

#define rep(i,n) for(int i=0;i<(int)(n);++i)
#define iter(a) __typeof(a.begin())
#define FOR(it,a) for(iter(a)it=a.begin();it!=a.end();++it)
#define F first
#define S second
#define SZ(a) (int)((a).size())
#define sz(a) SZ(a)
#define pb(a) push_back(a)
#define mp(a,b) make_pair(a,b)
#define ALL(a) (a).begin(),(a).end()
using namespace std;

typedef long long ll;
typedef pair<int,int> PI;
typedef unsigned long long ull;

#define PR(...) do{cerr << "line : " << __LINE__ << endl; pr(#__VA_ARGS__, __VA_ARGS__);}while(0);
template<class T>
void pr(const string& name, T t){
  cerr << name << ": " << t << endl;
}

template<typename T, typename ... Types>
void pr(const string& names, T t, Types ... rest) {
  auto comma_pos = names.find(',');
  cerr << names.substr(0, comma_pos) << ": " << t << ", ";
  
  auto next_name_pos = names.find_first_not_of(" \t\n", comma_pos + 1);
  pr(string(names, next_name_pos), rest ...);
}

template<class T,class U> ostream& operator<< (ostream& o, const pair<T,U>& v){return o << "(" << v.F << ", " << v.S << ")";}
template<class T> ostream& operator<< (ostream& o, const vector<T>& v){o << "{";rep(i,SZ(v)) o << (i?", ":"") << v[i];return o << "}";}

const int dx[] = {0,1,0,-1};
const int dy[] = {-1,0,1,0};
#define endl '\n'

typedef long long ll;

string s,op;
const ll mod=1000000009;

ll memo[310][310][2];

inline ll rec(int l,int r,bool p){
  if(l+1 == r){
    return s[l]-'0' == p;
  }

  if(memo[l][r][p] >= 0)
    return memo[l][r][p];
  ll& ret = memo[l][r][p] = 0;
  for(int i = l+1; i < r; ++i){
    ll lt = rec(l,i,true);
    ll lf = rec(l,i,false);
    ll rt = rec(i,r,true);
    ll rf = rec(i,r,false);
    ll tt = 0;
    ll al= (lt+lf) * (rt+rf) % mod;
    if(op[i-1]=='a') tt += lt * rt;
    else if(op[i-1]=='x') tt += lt * rf + lf * rt;
    else tt += (lt + lf) * rt + lt * rf;
    tt %= mod;
    if(!p){
      tt = al-tt;
      if(tt < 0) tt += mod;
    }
    
    ret += tt;
    if(ret >= mod) ret -= mod;
  }
  
  return ret;
}


int main(int argc, char *argv[])
{
  ios::sync_with_stdio(0);
  cin.tie(0);
  cin >> s >> op;
  memset(memo,-1,sizeof(memo));
  int q;
  cin >> q;
  rep(i,q){
    int l,r;
    string tf;
    cin >> l >> r >> tf;
    --l;
    cout << rec(l,r,tf=="true") << endl;
  }
  return 0;
}

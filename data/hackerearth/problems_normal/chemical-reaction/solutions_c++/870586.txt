#include <cstdio>
#include <iostream>
#include <map>
#include <cstring>
#include <cmath>

using namespace std;
const int SIZE = 500005;
int MAXN;

char chemicals[500005][15];

int times[500005];
int BIT[SIZE];

void update(int idx, int val)
{
	//printf("%d\n", MAXN);

	for(int i = idx;i <= MAXN;i += (i &-i)) {
		BIT[i] += val;
	}
}

int read(int idx)
{
	int sum = 0;
	for(int i = idx;i > 0;i-=(i & -i)) {
		sum += BIT[i];
	}
	return sum;
}

int readsingle(int idx)
{
	int sum = BIT[idx];
	if(idx > 0) {
		int z = idx - (idx & -idx);
		idx--;
		while(z != idx) {
			sum-=BIT[idx];
			idx-=(idx&-idx);
		}
	}
	return sum;
}

int findkth(int cumfre)
{
	int idx = 0;
	int bitmask = 1<<(int)log2(MAXN);

	int tidx;

	while(bitmask && idx < MAXN) {
		tidx = idx + bitmask;

		if(tidx <= MAXN && cumfre > BIT[tidx]) {
			cumfre-=BIT[tidx];
			idx = tidx;
		}
		bitmask>>=1;
		//printf("hain\n");
	}

	if(cumfre == readsingle(idx+1)) {
		return idx+1;
	} else {
		return -1;
	}
}

int main()
{
	int t, val;
	scanf("%d", &t);
	while(t--) {
		memset(BIT, 0, sizeof(BIT));
		int N;
		scanf("%d", &N);

		MAXN = N;

		for(int i = 1;i <= N;i++) {
			scanf("%s", chemicals[i]);
		}

		for(int i = 1;i <= N;i++){
			scanf("%d", &times[i]);
		}

		for(int i = 1;i <= N;i++) {
			update(i, 1);
		}

		N--;
		int maxi = 0;

		while(N--) {
			scanf("%d", &val);

			int idx = findkth(val);
			//printf("IDX:%d\n", idx);
			update(idx, -1);
			printf("%s %d\n", chemicals[idx], max(maxi, times[idx]));
			maxi = max(maxi, times[idx]);
		}

		int vop = findkth(1);
		printf("%s %d\n", chemicals[vop], max(maxi, times[vop]));

	}

	return 0;
}
#include<bits/stdc++.h>
#include <iostream>
using namespace std;
 
#define lol unsigned long
#define max 20001
bool* visited=new bool[max];
bool* set1=new bool[max];
 
class Edge{
	public:
      lol src;
      lol des;
};
class GraphE{
   lol V;
   Edge* e;
   list<lol>* adj;
   public:
     GraphE(lol V);
     void addEdge(lol pos,lol s,lol t);
     lol BFS(lol s);
};
 
GraphE::GraphE(lol V)
{
	this->V=V;
	e=new Edge[V];
	adj=new list<lol>[20001];

}
 
void GraphE::addEdge(lol pos,lol s,lol t)
{
	    e[pos].src=s;
	    e[pos].des=t;
  	    adj[s].push_back(t);
  	    adj[t].push_back(s);
}
 
lol GraphE::BFS(lol s)
{
	s=e[s].src;
	if(visited[s])return 0;
	list<lol> q;
	visited[s]=true;
	set1[s]=true;
	q.push_back(s);
	
	lol count1=0,count2=0;
	bool flag=false; //start
	list<lol>::iterator i;
	while(!q.empty())
	{
		s=q.front();

		q.pop_front();
		if(set1[s])count1++;  
		else count2++;
		for(i=adj[s].begin();i!=adj[s].end();i++)
		{
			if(!visited[*i])
			{
				visited[*i]=true;
				q.push_back(*i);
				set1[*i]=!set1[s];
			}
	
		}
	}

	if(count1>count2)return count1;
	else return count2;
	
	return 0;
}
int main()
{
    lol t,t1;
    cin>>t;
    t1=t;
    while(t--)
    {
    	lol n,i,x,y,count=0,maxC=0;
    
       for(i=0;i<max;i++){
       	visited[i]=false;
       	set1[i]=false;
       }
       
    	
    	cin>>n;
    	GraphE g(n);
    	
    	for(i=0;i<n;i++)
    	{
    		cin>>x>>y;
    		g.addEdge(i,x,y);
    	}
    	for(i=0;i<n;i++)
    	{
    		count=g.BFS(i);
    		maxC+=count;
    	}
    	cout<<"Case "<<t1-t<<": "<<maxC<<'\n';
    }
    return 0;
}
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <iterator>
#include <set>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstring>
#include <string>
#include <queue>
#include <stack>
#include <list>
#include <sstream>
#include <ctype.h>
#include <utility>
#include <cstdlib>
#include <functional>
#include <numeric>


using namespace std;

#define DEBUG(x) { cerr << #x << " = " << x << endl; }
#define ll long long
#define lINF 998877665544332211ll
#define INF 987654321ll
#define MOD 1000000007ll
#define ADD(v) accumulate(v.begin(),v.end(), 0)
#define PRO(v) accumulate(v.begin(),v.end(), 1,multiplies <int>())
ll POS(ll x) { if (x > 0)  return x; else return 0; }
#define maxe(v) max_element(v.begin(),v.end())
#define mine(v) min_element(v.begin(),v.end())
#define rep(k,a,b) for(int k=(a); k < (b); ++k)
#define per(k,a,b) for(int k=(b-1); k >= (a); --k)

struct shvm {
	long double z, y, x;
	shvm() {}
	shvm(long double z, long double y, long double x) : z(z), y(y), x(x) {}
	shvm operator + (const shvm &p) const { return shvm(z + p.z, y + p.y, x + p.x); }
	shvm operator - (const shvm &p)  const { return shvm(z - p.z, y - p.y, x - p.x); }
	shvm operator * (long double con)     const { return shvm(z*con, y*con, x*con); }
	shvm operator / (long double con)     const { return shvm(z / con, y / con, x / con); }
	bool operator<(const shvm &rhs) const { return make_pair(z, make_pair(y, x)) < make_pair(rhs.z, make_pair(rhs.y, rhs.x)); }
	bool operator==(const shvm &rhs) const { return make_pair(z, make_pair(y, x)) == make_pair(rhs.z, make_pair(rhs.y, rhs.x)); }
};
int main() {
	int t;
	cin >> t;
	while (t--) {
		ll r, c, even = 0, odd = 0, n;
		cin >> r >> c;
		if (r <= c) {
			if (r & 1) {
				n = r / 2;
				even = even + (n*(4 + (n - 1) * 2)) / 2;
				n = (r + 1) / 2;
				odd = odd + (n*(2 + (n - 1) * 2)) / 2;
			}
			else {
				n = r / 2;
				even = even + (n*(4 + (n - 1) * 2)) / 2;
				odd = odd + (n*(2 + (n - 1) * 2)) / 2;
			}
		}
		else {
			if (c & 1) {
				n = c / 2;
				even = even + (n*(4 + (n - 1) * 2)) / 2;
				n = (c + 1) / 2;
				odd = odd + (n*(2 + (n - 1) * 2)) / 2;
				if ((r - c) & 1) {
					even = even + ((r - c + 1) / 2)*c;
					odd = odd + ((r - c) / 2)*c;
				}
				else {
					even = even + ((r - c) / 2)*c;
					odd = odd + ((r - c) / 2)*c;
				}
			}
			else {
				n = c / 2;
				even = even + (n*(4 + (n - 1) * 2)) / 2;
				odd = odd + (n*(2 + (n - 1) * 2)) / 2;
				if ((r - c) & 1) {
					even = even + ((r - c) / 2)*c;
					odd = odd + ((r - c + 1) / 2)*c;
				}
				else {
					even = even + ((r - c) / 2)*c;
					odd = odd + ((r - c) / 2)*c;
				}
			}
		}
		cout << even << " " << odd << endl;
	}
	return 0;
}



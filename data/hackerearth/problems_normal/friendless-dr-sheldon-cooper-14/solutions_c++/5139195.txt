#include <iostream>
#include <utility>
#include <algorithm>
#define MP make_pair
#define X first
#define Y second
#define MAX 10000
#define P pair <int,int>
using namespace std;

int id[MAX], node, edge;
P p[MAX];

int root(int x)
{
	while (id[x] != x)
	{
		id[x] = id[id[x]];
		x = id[x];
	}
	return x;
}

int trust(P p[])
{
	int driver = 0, x, y, i;
	for (i = 0; i < edge; i++)
	{
		x = p[i].X;
		x = root(x);
		y = p[i].Y;
		y = root(y);
		if (x != y)
		{
			driver++;
			id[x] = id[y];
		}
	}
	return driver;
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t, i, x, y;
	cin >> t;
	while (t--)
	{
		cin >> node >> edge;
		for (i = 1; i <= node; i++)
			id[i] = i;
		for (i = 0; i < edge; i++)
		{
			cin >> x >> y;
			p[i] = MP(x, y);
		}
		sort(p, p + edge);
		cout << trust(p) << "\n";
	}
	return 0;
}

#include <bits/stdc++.h>
using namespace std;
#define pb push_back

bool isgood(int i,int j,int k, vector<int> &prime)
{
	for(int t=0;t<prime.size();t++)
	{
		if(i%prime[t]==0 && j%prime[t]==0 && k%prime[t]==0)
		return false;
	}
	return true;
}

int hcf(int a,int b)
{
	if(a==0 || b==0) return 1;
	if(a<b) swap(a,b);
	if(a%b==0) return b;
	else return hcf(b,a%b);
}

int main()
{
   int n=3600*23+59*60+60;n+=3;
   vector<int > arr(n,0);
   //none is a good number
   vector<int> prime;
   prime.pb(2);prime.pb(3);
   prime.pb(5);prime.pb(7);
   prime.pb(11);prime.pb(13);
   prime.pb(17);prime.pb(19);
   prime.pb(23);prime.pb(29);
   prime.pb(31);prime.pb(37);
   prime.pb(41);prime.pb(43);
   prime.pb(47);prime.pb(53);
   prime.pb(59);
   
   int pn=prime.size();
   for(int i=0;i<=23;i++)
   for(int j=0;j<60;j++)
   for(int k=0;k<60;k++)
   {
   	 int index=i*3600+j*60+k+1;
   	 if(isgood(i,j,k,prime))
   	 arr[index]+=(1+arr[index-1]);
   	 else arr[index]=arr[index-1];
   }
   
   int last=3600*23+59*60+59+1;
 
   int t;cin>>t;
   while(t--)
   {
   	int hr,min,sec;
   	cin>>hr>>min>>sec;
   	int index=hr*3600+min*60+sec+1;
   	int total=last-index+1;
   	int num1=total-arr[last]+arr[index-1];
   	int num2=arr[last]-arr[index-1];
   	int x=hcf(num1,num2);
   	cout<<num1/x<<":"<<num2/x<<endl;
   }
   
    return 0;
}

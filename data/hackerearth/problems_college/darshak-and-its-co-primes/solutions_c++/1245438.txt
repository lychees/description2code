#include<iostream>
#include<algorithm>
#include<cstdio>
#include<map>
#include<memory>
#include<iomanip>
#include<string>
#include<istream>
#include<wchar.h>
#include<vector>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<ctime>
#include<sstream>
#include<stack>
#include<queue>
#include<fstream>
#include<ostream>
#ifdef _WIN32
#define gc getchar
#define pc putchar
#else
#define gc getchar_unlocked
#define pc putchar_unlocked
#endif
#define nl pc('\n')
#ifndef __cpp__
#define in_s(s) scanf("%s",&s)
#define in_c(s) scanf("%c",&s)
#define out_s(s) printf("%s",s)
#define out_c(s) printf("%c",s)
#endif
#define MAX 1000002
#define V(type,name) vector<type> name
#define FOR(i,n) for(i=0;i<n;i++)
#define ll long long 
using namespace std;
long BinarySearch(long ar[],long l,long u,long n);
void QuickSort(long arr[], long l, long r);
inline void getInt(long& x)
{
        long c = gc();
        x = 0;
    	for(;(c<48 || c>57);c = gc());
		for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
 
inline void out_d(long n) 
{
		if(n<0){n=-n;pc('-');}
		long i=10;char output_buffer[10];
		do{
				output_buffer[--i]=(n%10)+'0';n/=10;
		}while(n);
		do{
				pc ( output_buffer [ i ] ) ; 
		} while ( ++i< 10 ) ; 
		pc(' ');
}
long BinarySearch(long ar[],long a, long b,long search)
{
    int bottom = a,top = b-1,mid;
    while(top >= bottom)
    {
        mid=(top+bottom)/2;
        if(ar[mid]==search)
            return(mid+1);
        else
        {
            if(ar[mid] < search)
                bottom=mid+1;
            else
                top=mid;
        }
    }
return(-1);
}
void QuickSort(long arr[], long l, long r)
 {
  long i = l, j = r;
  long tmp;
  long mid = arr[(l + r) / 2];
  
  while (i <= j) {
        while (arr[i] < mid)
              i++;
        while (arr[j] > mid)
              j--;
        if (i <= j) {
              tmp = arr[i];
              arr[i] = arr[j];
              arr[j] = tmp;
              i++;
              j--;
    }
}
    if (l < j)
        QuickSort(arr, l, j);
    if (i < r)
        QuickSort(arr, i, r);
}

void Sieve_Atkins(ll int n)
{
    vector<bool> is_prime(n + 1);
    is_prime[2] = true;
    is_prime[3] = true;
    for (ll int i = 5; i <= n; i++)
    {
        is_prime[i] = false;
    }
    ll int lim = ceil(sqrt(n));
    for (ll int x = 1; x <= lim; x++)
    {
        for (ll int y = 1; y <= lim; y++)
        {
            ll int num = (4 * x * x + y * y);
            if (num <= n && (num % 12 == 1 || num % 12 == 5))
            {
                is_prime[num] = true;
            }
            num = (3 * x * x + y * y);
            if (num <= n && (num % 12 == 7))
            {
                is_prime[num] = true;
            }
 
            if (x > y)
            {
                num = (3 * x * x - y * y);
                if (num <= n && (num % 12 == 11))
                {
                    is_prime[num] = true;
                }
            }
        }
    }
    for (ll int i = 5; i <= lim; i++)
    {
        if (is_prime[i])
        {
            for (ll int j = i * i; j <= n; j += i)
            {
                is_prime[j] = false;
            }
        }
    }
    ll run = 0;
    for (ll int i = 2; i <= n; i++)
    {
         if (is_prime[i])
         {
             printf("%lld,",i);
             run++;
             if(run%100 == 0)
             printf("\n");
         }
    }
    printf("\n\n%lld",run);
}
long gcd ( long a, long b )
{
  if ( a==0 ) return b;
  return gcd ( b%a, a );
}
int main()
{
        stringstream sstr;
        string str;
        int t;
        cin>>t;
        while(t--){
            long long a,b;
            scanf("%lld %lld",&a,&b);
            if(gcd(a,b) == 1){
                sstr<<"Is a Co-Prime\n";
            }else{
                sstr<<"Not a Co-Prime\n";
            }
        }
        str.append(sstr.str());    
        std::cout<<str;
		return 0;
}
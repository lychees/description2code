#include <bits/stdc++.h>
using namespace std;

vector<long long> v;
int n;

void f(long long x) {
	v.push_back(x);
	for(long long i = 0; i <= 8; i += 2) {
		long long num = x*10ll + i;
		if(num > 1000000000ll)	return;
		f(num);
	}
}

int lesss(int x) {
	int l = -1, h = n;

	while(l+1 < h) {
		int mid = l + (h-l)/2;
		if(v[mid]<= x)	l = mid;
		else			h = mid;
	}

	if(l != -1)	return v[l];
	return -1;
}

int more(int x) {
	int l = -1, h = n;

	while(l+1 < h) {
		int mid = l + (h-l)/2;
		if(v[mid] >= x)	h = mid;
		else			l = mid;
	}

	if(h != n)	return v[h];
	return -1;
}

int gc(int a, int b) {
	return (b == 0 ? a : gc(b, a%b));
}

int num, den;

int divide() {
	int g = gc(num, den);
	while(g != 1 && num != 0 && den != 0) {
		num /= g;
		den /= g;
		g = gc(num, den);
	}
}

int main()
{
    for(int i = 2; i <= 8; i += 2)
    	f(i);
    
    v.push_back(0);
    v.push_back(2000000000);

    n = v.size();

    sort(v.begin(), v.end());

    int t;
    scanf("%d", &t);
    for(int i = 0; i < t; ++i) {
    	int x;
    	scanf("%d", &x);
    	int low = lesss(x);
    	int hi = more(x);
    	den = abs(low-x);
    	num = abs(hi-x);
    	divide();

    	if(num == 0) {
    		if(den == 0) {
    			printf("Unlimited Power\n");
    			continue;
    		}
    	}

    	printf("%d/%d\n", num, den);

    }

    return 0;
}

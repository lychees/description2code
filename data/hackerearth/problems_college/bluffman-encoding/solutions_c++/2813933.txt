#include<bits/stdc++.h>
#include<vector>
#include<string>
using namespace std;
map<string, string>mp;
struct node
{


 node * leftChild;
 node * rightChild;
 double frequency;
    string content;
 string code;


};


vector<node> nodeArray;


node  extractMin()
{ 
 double temp = (double) -1;
    vector<node>::iterator i1,pos;
    for(i1 = nodeArray.begin();i1!=nodeArray.end();i1++)
 {
  
  if(temp<=(*i1).frequency)
  {
     pos = i1;
     temp = (*i1).frequency;
  }
 }
 
 node tempNode = (*pos);
 nodeArray.erase(pos);
 
 
 
 return tempNode;
}
                     


node getHuffmanTree()
{


 
 
 while(!nodeArray.empty())
 {
      
  
   node * tempNode = new node;   
      node * tempNode1 = new node;
   node * tempNode2 = new node;
      *tempNode1 = extractMin();
   *tempNode2 = extractMin();
   
  
   tempNode->leftChild = tempNode1;
   tempNode->rightChild = tempNode2;
   tempNode->frequency = tempNode1->frequency+tempNode2->frequency;
   nodeArray.push_back(*tempNode);
   if(nodeArray.size() == 1)//only the root node exsits
   {
    break;
   }
 }
    return nodeArray[0];
}


void BFS(node * temproot,string s)
{
   node * root1 = new node;
   root1 = temproot;
  
   root1->code = s;
   if(root1 == NULL)
   {
    
   }
   else if(root1->leftChild == NULL && root1->rightChild == NULL)
   {
    mp[root1->code] = root1->content;
   }
   else
   {
   
      root1->leftChild->code = s.append("1");
   s.erase(s.end()-1);
   root1->rightChild->code = s.append("0");
   s.erase(s.end()-1);


      BFS(root1->leftChild,s.append("1"));
   s.erase(s.end()-1);
      BFS(root1->rightChild,s.append("0"));
   s.erase(s.end()-1);
 }
   
}




void getHuffmanCode()
{
	int tc;
	cin >> tc;
	while(tc--)
	{
		nodeArray.clear();
		mp.clear();
		int size,i;
		 double tempDouble;
		 string tempString = "";
		 
		 cin>>size;
		 
		 for(i = 0;i<size;i++)
		 {
		  node tempNode;
		  cin>>tempString;
		  cin>>tempDouble;


		  tempNode.frequency = tempDouble;
		  tempNode.content = tempString;
		  tempNode.leftChild = NULL;
		  tempNode.rightChild = NULL;
		  nodeArray.push_back(tempNode);
		 }


		 node root = getHuffmanTree();


		 BFS(&root,"");
		 string s;
		cin >> s;
		string temp = "";
		for(int i=0;i<s.size();i++)
		{
			temp += s[i];
			if(mp.find(temp) != mp.end())
			{
				cout << mp.find(temp)->second;
				temp = "";
			}
		}
		cout << "\n";
		mp.clear();
	}
 
}


int main()
{
 
 getHuffmanCode();
 return 0;
}

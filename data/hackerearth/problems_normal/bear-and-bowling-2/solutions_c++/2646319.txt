/*
*/

//#pragma comment(linker, "/STACK:16777216")
#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>  
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <ctime> 
#include <assert.h>

#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash

#define eps 1e-8
#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 512

using namespace std;

int n,ar[1<<20];
vector<pair<int,pair<int, int> > > events;
set<int> turned;
set<int>::iterator it;
int L1[1<<20],R1[1<<20],L2[1<<20],R2[1<<20];
int cnt[1<<20];

int main(){
//freopen("beavers.in","r",stdin);
//freopen("beavers.out","w",stdout);
//freopen("F:/in.txt","r",stdin);
//freopen("F:/output.txt","w",stdout);
ios_base::sync_with_stdio(0);

cin>>n;
for (int i=1;i<=n;i++)
{
	cin>>ar[i];
	events.push_back(make_pair(ar[i],make_pair(-1,i)));
	events.push_back(make_pair(ar[i],make_pair(1,i)));
}
sort(events.begin(),events.end());


// smaller, bounds

for (int i=0;i<events.size();i++)
{
	int id=events[i].second.second;
	int tp=events[i].second.first;
	if (tp==-1)
	{
		it=turned.lower_bound(id);
		if (it!=turned.end())
			R1[id]=(*it)-1;
		else
			R1[id]=n;
		if (it==turned.begin())
			L1[id]=1;
		else
		{
			--it;
			L1[id]=(*it)+1;
		}
	}
	else
	{
		turned.insert(id);
	}
}

turned.clear();
reverse(events.begin(),events.end());

//larger, have to
for (int i=0;i<events.size();i++)
{
	int id=events[i].second.second;
	int tp=events[i].second.first;
	if (tp==1)
	{
		L2[id]=R2[id]=id;
		if (turned.size()==0)
		{
			continue;
		}
		else
		{
			it=turned.begin();
			int val=(*it);
			L2[id]=min(L2[id],val);
			it=turned.end();
			--it;
			val=(*it);
			R2[id]=max(R2[id],val);
		}
	}
	else
	{
		turned.insert(id);
	}
}
/*
for (int i=1;i<=n;i++)
	cout<<L1[i]<<" "<<R1[i]<<" "<<L2[i]<<" "<<R2[i]<<endl;
*/
for (int i=1;i<=n;i++)
{
	if (L1[i]>L2[i])
		continue;
	if (R1[i]<R2[i])
		continue;
	int mn=R2[i]-L2[i]+1;
	int mx=R1[i]-L1[i]+1;
	cnt[mn]++;
	cnt[mx+1]--;
}

int s=0;

for (int i=1;i<=n;i++)
{
	s+=cnt[i];
	if (s)
		cout<<1;
	else
		cout<<0;
}
cout<<endl;

//cin.get();cin.get();
return 0;}
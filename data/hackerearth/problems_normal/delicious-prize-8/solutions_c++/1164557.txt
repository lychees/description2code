#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
int t;
vector<long long int> p;
bool use[100001];
priority_queue<long long int,vector<long long int>,greater<long long int> > q;
int main(){
	p.push_back(2);
	for (int i = 3; i < 100001; i += 2){
		if (!use[i]){
			p.push_back(i);
			for (int j = i * 2; j < 100001; j += i){
				use[j] = true;
			}
		}
	}
	scanf("%d", &t);
	while (t--){
		int n;
		long long int k;
		scanf("%d%lld", &n, &k);
		vector<int> f;
		f.clear();
		for (int i = 0; i < p.size() && p[i]*p[i] <= k; i++){
			if (k%p[i] == 0){
				while (k%p[i] == 0){
					f.push_back(p[i]);
					k /= p[i];
				}
			}
		}
		if (k!=1){
			f.push_back(k);
		}
		for (int i = 0; i < n; i++){
			q.push(1);
		}
		for (int i = f.size() - 1; i >= 0; i--){
			long long int kari = q.top();
			q.pop();
			kari *= f[i];
			q.push(kari);
		}
		long long int sum = 0;
		while (!q.empty()){
			sum += q.top();
			q.pop();
		}
		printf("%lld\n", sum);
	}
	return 0;
}
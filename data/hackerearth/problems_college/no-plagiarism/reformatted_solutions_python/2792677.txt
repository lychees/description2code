"""int LevenshteinDistance(string s, string t)
{
    if (s == t) return 0;
    if (s.Length == 0) return t.Length;
    if (t.Length == 0) return s.Length;
    int[] v0 = new int[t.Length + 1];
    int[] v1 = new int[t.Length + 1];
    for (int i = 0; i < v0.Length; i++)
        v0[i] = i;

    for (int i = 0; i < s.Length; i++)
    {
        v1[0] = i + 1;
        for (int j = 0; j < t.Length; j++)
        {
            var cost = (s[i] == t[j]) ? 0 : 1;
            v1[j + 1] = Minimum(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
        }
      for (int j = 0; j < v0.Length; j++)
            v0[j] = v1[j];
    }
    return v1[t.Length];
}
"""
a = raw_input()
b = raw_input()
len_a = len(a)
len_b = len(b)
if a == b:
    c = 0
else:
    d = [[0 for i in xrange(len_b+1)] for j in xrange(len_a+1)]
    for i in xrange(len_a+1):
        d[i][0] = i
    for i in xrange(len_b+1):
        d[0][i] = i
    for j in xrange(1, len_b+1):
        for i in xrange(1, len_a+1):
            if a[i-1] == b[j-1]:
                d[i][j] = d[i-1][j-1]
            else:
                d[i][j] = min(d[i-1][j], d[i][j-1])+1
    c = d[len_a][len_b]
    """v0=[i for i in xrange(len_b+1)]
	v1=[i for i in xrange(len_b+1)]
	for i in xrange(len_a):
		v1[0]=i+1
		for j in xrange(len_b):
			if a[i]==b[j]:
				cost=0
			else:
				cost=1
			v1[j+1]=min(v1[j]+1,v0[j+1]+1,v0[j]+cost)
		for j in xrange(len_b+1):
			v0[j]=v1[j]
	c=v1[len_b]"""
print c

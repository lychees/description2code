#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }


int main() {
	int N, M;
	scanf("%d%d", &N, &M);
	vector<vi> g(N);
	rep(i, M) {
		int X, Y;
		scanf("%d%d", &X, &Y), -- X, -- Y;
		g[X].push_back(Y);
		g[Y].push_back(X);
	}
	int Z;
	scanf("%d", &Z), -- Z;
	vi q, nq;
	vector<int> dist(N, INF);
	vi ord;
	int d = 0;
	nq.push_back(Z);
	while(!nq.empty()) {
		q.swap(nq);
		while(!q.empty()) {
			int i = q.back(); q.pop_back();
			if(dist[i] != INF) continue;
			dist[i] = d;
			ord.push_back(i);
			each(j, g[i])
				nq.push_back(*j);
		}
		++ d;
	}
	int maxd = 0;
	rep(i, N) if(dist[i] != INF)
		amax(maxd, dist[i]);
	vector<int> cnt(N, 0);
	for(int ix = (int)ord.size() - 1; ix >= 0; -- ix) {
		int i = ord[ix];
		if(dist[i] == maxd) {
			cnt[i] = 1;
		}else {
			each(j, g[i]) if(dist[*j] == dist[i] + 1)
				cnt[i] += cnt[*j];
		}
	}
	rep(i, N) {
		if(i != 0) putchar(' ');
		printf("%d", cnt[i]);
	}
	puts("");
	return 0;
}

#include<bits/stdc++.h>
using namespace std;
struct qu
{
int data;
int distance;
struct qu* next;
};
struct qu* head=NULL;
struct qu* rear=NULL;   int n; int answer[100000];

struct graph
{
  int data;
  int distance;
  struct graph* next;
};
struct graph* g[10000];

void push(int data,int distance)
{
struct qu* temp=(struct qu*)malloc(sizeof(struct qu*));
temp->data=data;
temp->distance=distance;
temp->next=NULL;
if(head==NULL)
{
  head=temp; rear=temp; return;
}
rear->next=temp;
rear=temp;
}

void pop()
{
  if(head==rear)
    {  head=NULL; rear=NULL; return;}

  head=head->next;
}

void insert(int vi,int vj)
{
struct graph* temp=(struct graph*)malloc(sizeof(struct graph*));
temp->data=vj;
temp->next=NULL;
if(g[vi]==NULL)
{ g[vi]=temp; return;}
struct graph* temp1=g[vi];
while(temp1->next!=NULL)
  temp1=temp1->next;
  temp1->next=temp;
}

bool visited[100000];
void bfs()
{
  push(0,0);

  for(int i=0;i<n;i++)
    visited[i]=false;

    while(head!=NULL)
    {
      int current_vertex=head->data;
      int current_distance=head->distance;
      pop();
      struct graph* temp=g[current_vertex];
      while(temp!=NULL)
      {
        if(visited[temp->data]==false)
        { visited[temp->data]=true;
          push(temp->data,current_distance+1);
          answer[temp->data]=current_distance+1;
        }
        temp=temp->next;
      }

    }

}

main()
{
int b;
cin>>n>>b;
for(int i=0;i<n;i++)
  g[i]=NULL;
for(int i=0;i<b;i++)
{
   int x,y;
   cin>>x>>y;
   insert(x,y);
   insert(y,x);
}
bfs();

for(int i=1;i<n;i++)
{
   if(visited[i]==false)
     cout<<"-1"<<endl;
     else
     cout<<answer[i]<<endl;
}

}

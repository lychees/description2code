#include <iostream>
#include <cstdio>
#include <vector>
#include <deque>

using namespace std;

struct otr {
    long long l, r, d;
    otr(long long l, long long r, long long d): l(l), r(r), d(d) {};
};

void solve() {
    long long n, k;
    cin >> n >> k;
    
    deque<otr> v;
    v.push_back(otr(1, n, 1));
    
    bool skeep = false;
    
    while (k) {
        otr o = *v.begin(); v.pop_front();
        if (o.l > o.r) continue;
        
        if (skeep) {
            v.push_back(otr(o.l, o.l, o.d));
            o.l += o.d;
            v.push_front(o);
            skeep = false;
            continue;
        } else {
            long long l = o.l;
            long long r = o.r;
            long long d = o.d;
            
            long long k_has = (r - l + 1 + d - 1) / d;
            
            long long k_del = (k_has + 1) / 2;
            long long k_rem = k_has - k_del;
            
            if (k_del >= k) {
                cout << l + 2 * d * (k - 1) << endl;
                return;
            } else {
                k -= k_del;
                v.push_back(otr(l + d, r, d * 2));
                skeep = (k_del != k_rem);
            }
        }
    }
}

int main() {
    long long t;
    cin >> t;
    while (t --> 0) solve();
    return 0;
}

// Author: NIRWAN DOGRA
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define all(v) v.begin(),v.end()
#define MAX 100001
#define MOD 1000000007
ll bit[11][MAX];
vector<ll> arr;
vector<ll> C;
ll n;
inline void update(ll idx,ll val,ll count)
{
   while(idx<=n)
   {
      bit[count][idx]+=val;
      idx+=(idx&(-idx));
   }
}
inline ll sum(ll idx,ll count)
{
   ll summ=0;
   while(idx>0)
   {
      summ+=bit[count][idx];
      idx-=(idx&(-idx));
   }
   return summ;
}
inline ll query(ll l,ll r,ll count)
{
   return sum(r,count)-sum(l-1,count);
}
inline ll distinct_digits(ll temp)
{
   bool bit[10];
   ll count=0;
   memset(bit,0,sizeof(bit));
   while(temp)
   {
      bit[temp%10]=true;
      temp/=10;
   }
   for(ll j=0; j<10; j++)
      if(bit[j])
         count++;
   return count;
}
int main()
{
//  #ifndef ONLINE_JUDGE
//      //generatetests(1000);
//      freopen("in.txt","r",stdin);
//      //freopen("out.txt","w",stdout);
//  #endif
  
   cin>>n;
   ll count;
   arr.resize(n+1);
   C.resize(n+1);
   for(ll i=1; i<=n; i++)
   {
      cin>>arr[i];
      C[i]=distinct_digits(arr[i]);
      update(i,1,C[i]);
   }
   ll q;
   cin>>q;
   ll choice;
   ll l,r;
   ll val;
   while(q--)
   {
      cin>>choice;
      if(choice==0)
      {
         cin>>l>>val;
         arr[l]=(val+arr[l]);
         update(l,-1,C[l]);
         C[l]=distinct_digits(arr[l]);
         update(l,1,C[l]);
      }
      else if(choice==1)
      {
         cin>>l>>val;
         arr[l]=(val);
         update(l,-1,C[l]);
         C[l]=distinct_digits(arr[l]);
         update(l,1,C[l]);;
      }
      else
      {
         ll c;
         cin>>l>>r>>c;
         ll i,T;
         T=query(l,r,c);
         cout<<T<<endl;
      }
   }
   return 0;
}

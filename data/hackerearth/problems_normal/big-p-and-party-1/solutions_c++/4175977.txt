#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long l;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef pair<int,pair<int,int> > tii;
typedef vector<pair<int,int> > vec_pii;
typedef vector<vector<int> > vec_vec;
#define mp make_pair
#define setbits(n) __builtin_popcount((n))
#define pb push_back
#define mod 1000000007
#define gcd(a,b) __gcd(a,b)
#define sf(n) scanf("%lld",&(n))
#define pf(n) printf("%lld\n",(n))
#define min3(a,b,c) (min((c),min((a),(b))))
#define max3(a,b,c) (max((a),max((b),(c))))
#define newline "\n"
vec_vec graph;
bool visited[1001];
int lucky[1001];
void bfs(int node)
{
    visited[node] = true;
    queue<int> q;
    q.push(node);
    while(!q.empty())
    {
        node = q.front();
        q.pop();
        for(int i=0;i<graph[node].size();++i)
            if(visited[graph[node][i]]==false)
            {
                q.push(graph[node][i]);
                lucky[graph[node][i]]= lucky[node]+1;
                visited[graph[node][i]]= true;
            }
    }
}
int main()
{
    int n,m;
    cin>>n>>m;
    graph.clear();
    graph.resize(n+1);
    fill(lucky,lucky+n+1,0);
    for(int i=1;i<=m;++i)
    {
        int x,y;
        cin>>x>>y;
        graph[x].pb(y);
        graph[y].pb(x);
    }
    bfs(0);
    for(int i=1;i<n;++i)
        cout<<lucky[i]<<newline;
}
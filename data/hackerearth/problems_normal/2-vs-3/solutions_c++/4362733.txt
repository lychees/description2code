#include<bits/stdc++.h>
#define ll long long int
using namespace std;
ll tree[300000];
ll a[100000];
ll p[100001];
void fastpow(){
	p[0]=1;
	for(int i=1; i<=100000; i++){
		p[i]=(p[i-1]*2)%3;
	}
}
void buildtree(int node, int start, int end){
	if(start==end){
		tree[node]=a[start];
	}else{
		int mid = (start+end)/2;
		buildtree(2*node,start,mid);
		buildtree(2*node+1,mid+1,end);
		tree[node]=((tree[2*node]*p[end-mid])%3 + tree[2*node+1])%3;
	}
}
void update(int node, int index, int start, int end){
	if(start==end){
		a[index]=1;
		tree[node]=1;
	}else{
		int mid = (start+end)/2;
		if(start<=index && index<=mid)update(2*node,index,start,mid);
		else update(2*node+1,index,mid+1,end);
		tree[node]=((tree[2*node]*p[end-mid])%3 + tree[2*node+1])%3;
	}
}
ll query(int node, int l, int r, int start, int end){
	if(r<start || end<l)return 0;
	if(l<=start && end<=r)return (tree[node]*p[r-end])%3;
	int mid = (start+end)/2;
	ll p1 = query(2*node,l,r,start,mid);
	ll p2 = query(2*node+1,l,r,mid+1,end);
	return (p1+p2)%3;
}
int main(void){
	int n,q,l,r,t;
	string s;
	cin>>n;
	cin>>s;
	fastpow();
	for(int i=1; i<=n; i++){
		a[i]=s[i-1]-48;
	}
	buildtree(1,1,n);
	cin>>q;
	while(q--){
		cin>>t;
		if(t==0){
			cin>>l>>r;
			cout<<query(1,l+1,r+1,1,n)<<endl;
		}else{
			cin>>l;
			if(s[l]=='0'){
				s[l]='1';
				a[l+1]=1;
				update(1,l+1,1,n);
			}
		}
	}
	return 0;
}
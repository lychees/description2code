#include <bits/stdc++.h>
using namespace std;

#define rep1(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define rep2(i, begin, end) for (__typeof(end) i = (begin); i != (end) + 1 - 2 * ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}
#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }
void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}


typedef pair<int, int> P;

const int N = 105, M = 300;
const int INF = (int) 1E9;

struct edge { int to, cap, cost, rev; };

struct MinCostFlow {
    int V;
    vector<edge> G[M];
    int h[M], dist[M], prevv[M], preve[M];
    
    MinCostFlow(int _V) : V(_V) {}

    void add_edge(int from, int to, int cap, int cost) {
        G[from].push_back((edge) {to, cap, cost, G[to].size()});
        G[to].push_back((edge) {from, 0, -cost, G[from].size() - 1});
    }
    
    int min_cost_flow(int s, int t, int f) {
        int res = 0;
        fill(h, h + V, 0);
        while (f > 0) {
            priority_queue<P, vector<P>, greater<P> > que;
            fill(dist, dist + V, INF);
            dist[s] = 0;
            que.push(P(0, s));
            while (!que.empty()) {
                P p = que.top(); que.pop();
                int v = p.second;
                if (dist[v] < p.first) continue;
                rep1(i, 0, G[v].size()) {
                    edge &e = G[v][i];
                    if (e.cap > 0 && dist[e.to] > dist[v] + e.cost + h[v] - h[e.to]) {
                        dist[e.to] = dist[v] + e.cost + h[v] - h[e.to];
                        prevv[e.to] = v;
                        preve[e.to] = i;
                        que.push(P(dist[e.to], e.to));
                    }
                }
            }
            if (dist[t] == INF) return -1;
            rep1(v, 0, V) h[v] += dist[v];
            int d = f;
            for (int v = t; v != s; v = prevv[v]) {
                d = tmin(d, G[prevv[v]][preve[v]].cap);
            }
            f -= d;
            res += d * h[t];
            for (int v = t; v != s; v = prevv[v]) {
                edge &e = G[prevv[v]][preve[v]];
                e.cap -= d;
                G[v][e.rev].cap += d;
            }
        }
        return res;
    }
    void check() {
    	rep1(i, 0, V) if (G[i].size()) printf("%d %d\n", i, G[i].size());
    }
};

int n, m[N], k[N], u[N][N], c[N][N];

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int q, cnt;
    cin >> n;
    
    rep2(i, 1, n) {
    	cin >> m[i];
    	rep1(j, 0, m[i]) {
    		cin >> u[i][j] >> c[i][j];
    	}
    }
    cin >> q;
    rep1(t, 0, q) {
    	map<int, int> mp, tot;
    	int cnt = n + 1;
    	MinCostFlow minf = MinCostFlow(n + n + 5);
    	rep2(i, 1, n) {
    		cin >> k[i];
    		minf.add_edge(0, i, 1, 0);
    		if (!mp[k[i]]) mp[k[i]] = cnt++;
    		tot[k[i]]++;
    	}
    	rep2(i, 1, n) {
	    	rep1(j, 0, m[i]) {
	    		int x = mp[u[i][j]];
    			if (x) minf.add_edge(i, x, 1, c[i][j]);
    		}
    	}
    	for (map<int, int>::iterator it = mp.begin(); it != mp.end(); ++it) {
    		minf.add_edge(it->second, cnt, tot[it->first], 0);
    	}
    	
    	printf("%d\n", minf.min_cost_flow(0, cnt, n));
    }
    return 0;
}

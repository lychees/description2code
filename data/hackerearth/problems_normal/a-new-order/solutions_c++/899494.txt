#include <bits/stdc++.h>
using namespace std;

bool Euv[100][100];
int node(char c) { return c-'a'; }
set<char> letters;

vector<char> getTopoOrder()
{
	vector<char> order,rem;
	order.clear();
	set<char>::iterator li;
	int in_deg,i,j;
	char cur;
	rem.clear();
	while(letters.size())
	{
		for(li=letters.begin();li!=letters.end();li++)
		{	
			cur=(*li);
			in_deg=0;
			for(i=0;i<26;i++) if(Euv[i][node(cur)]) in_deg++;
			if(in_deg==0)
			{
				printf("%c",cur);	
				order.push_back(cur);
				rem.push_back(cur);
			}
		}
		for(i=0;i<rem.size();i++) 
		{
			letters.erase(rem[i]);
			for(j=0;j<26;j++) Euv[node(rem[i])][j]=false;
		}
		rem.clear();
		printf("\n");
	}
	return order;
}

int main()
{
    int w,i,j,k;
    string word;
    vector<string> words;
    vector<char> order;
    scanf("%d",&w);
    words.clear();
    for(i=0;i<w;i++) 
    {
    	cin>>word;
    	words.push_back(word);
    }
    for(i=0;i<100;i++) for(j=0;j<100;j++) Euv[i][j]=false;
    letters.clear();
    for(i=0;i<w;i++) for(k=0;k<words[i].size();k++) letters.insert(words[i][k]);
    for(i=0;i<w;i++)
    {
    	for(j=i+1;j<w;j++)
    	{
    		k=0;
    		while(k<words[i].size() && k<words[j].size() && words[i][k]==words[j][k]) k++;
    		if(k<words[i].size() && k<words[j].size()) Euv[node(words[i][k])][node(words[j][k])]=true;
    	}
    }
    order=getTopoOrder();
    //for(k=0;k<order.size();k++) printf("%c\n",order[k]);
    return 0;
}

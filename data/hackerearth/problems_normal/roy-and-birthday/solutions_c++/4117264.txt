/* NumeriX
   "Hard Work Beats Talent
   When Talent Doesn't Work Hard"
*/
#include <bits/stdc++.h>
#define ll long long int
#define sii(x) scanf("%d",&x)
#define pii(x) printf("%d\n",x)
#define sll(x) scanf("%lld",&x)
#define pll(x) printf("%lld\n",x)
#define present_set_map(container, element) (container.find(element) != container.end()) 
#define present_vec(container, element) (find(all(container),element) != container.end()) 
#define mp make_pair
#define all(x) x.begin(),x.end()
#define all_rev(x) x.rbegin(),x.rend()
#define pb push_back
#define fr first
#define se second
using namespace std;

ll factorial[1000009];

void fac(ll mod)
{
    ll i;
    factorial[0]=1;
    for(i=1;i<=1000005;i++)
        factorial[i]=(factorial[i-1]%mod*i%mod)%mod;
}

long int  modPow(long long int a,long long  int b,long long  int MOD)
{
    long long int x=1,y=a; 
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y)%MOD;
            //if(x>MOD) x%=MOD;
        }
        b/=2;
        y = (y*y)%MOD;
        //if(y>MOD) y%=MOD; 
    }
    return x;
}
 
ll modInverse(ll a,ll p)
{
	return modPow(a,p-2,p);
}

ll nCr(ll n,ll r,ll mod)
{
    if(n<=0 || r<0 || n<r)
        return 0ll;
    ll res=(factorial[n]%mod*modInverse(factorial[r],mod)%mod*modInverse(factorial[n-r],mod)%mod)%mod;
    return res;
}

int main()
{
    ll tc,i,consonants,len,vowels,C,total_n,mod=1e9+7;
    fac(mod);
    //printf("fac[5]=%lld\n",factorial[5]);
    scanf("%lld\n",&tc);
    while(tc--)
    {
        string str;
        ll vowels=consonants=0;
        ll res,temp;
        getline(cin,str);
        ll freq[26]={0};
        for(i=0;i<str.size();i++)
        {
            freq[str[i]-'a']++;
            if(str[i]=='a' || str[i]=='e' || str[i]=='i' || str[i]=='o' || str[i]=='u')
                vowels++;
            else
                consonants++;
        }
        if(consonants+1<vowels)
            printf("-1\n");
        else
        {
            total_n=consonants+1;
            C=nCr(total_n,vowels,mod);
            C%=mod;
            res=(C%mod*factorial[consonants]%mod*factorial[vowels]%mod)%mod;
            for(i=0;i<26;i++)
            {
                temp=i;
                if(freq[i]==0 ||freq[i]==1)
                    continue;
                res=(res%mod*modInverse(factorial[freq[temp]],mod))%mod;
            }
            pll(res);
        }
    }
}
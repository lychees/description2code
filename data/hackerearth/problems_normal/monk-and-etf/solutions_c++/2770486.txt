#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <string>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define read freopen("C:\\Users\\USER\\Desktop\\in.txt", "r", stdin)
#define write freopen("C:\\Users\\USER\\Desktop\\out.txt", "a", stdout)
#define inf 1<<30
#define pii pair<int, int>
#define ff first
#define ss second
#define in(a) scanf("%lld", &a)
#define in2(a, b) scanf("%lld%lld", &a, &b)
#define in3(a, b, c) scanf("%lld%lld%lld", &a, &b, &c)
#define pn printf("\n");
#define pr(a) printf("%lld\n", a)
#define prs(a) printf("%lld ", a)
#define pr2(a, b) printf("%lld %lld\n", a, b)
#define pr3(a, b ,c) printf("%lld %lld %lld\n", a, b, c)
#define vi vector<int>
#define msi map<string, int>
#define mii map<int, int>
#define si set<int>
#define cl clear()
#define sz size()
#define pb push_back
#define MAX(A,B) (((A)>(B))?(A):(B))
#define MIN(A,B) (((A)<(B))?(A):(B))
#define all(X) (X).begin(), (X).end ()
#define iter(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
//LL dx[]={1,0,-1,0};LL dy[]={0,1,0,-1}; //4 Direction
//LL dx[]={1,1,0,-1,-1,-1,0,1};LL dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//LL dx[]={2,1,-1,-2,-2,-1,1,2};LL dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(LL n, LL pos) {return (bool) (n & (1<<pos));}
//LL on(LL n, LL pos) {return n | (1<<pos);}
//LL off(LL n, LL pos) {return n & ~(1<<pos);}
//bool operator < (const data &d) const{return cost<d.cost;}
#define M 1001000
#define prm 78573
typedef long long LL;
typedef struct data sd;
LL pr_nums[prm+10], A[M], temp[M];
void put_prime()
{
    LL i, j, k=0;
    for (i=0; i<M; i++) A[i]=true;
    for (i=2; i<M; i++){
        if (A[i]==true){
            pr_nums[k++]=i;
            for (j=i; j<M; j+=i) A[j]=false;
        }
    }
}
void cut_him(LL *n, LL p)
{
    while ((*n)%p==0) (*n)/=p;
}
LL segmented(LL low, LL high, LL d)
{
    int x=low;
    if (low<2) low=2;
    LL i, j, k=low, count=0, lim=(high-low)+1;
    for (i=0; i<lim; i++) A[i]=temp[i]=i+low;

    for (i=0; i<prm; i++)
    {
        k=low%pr_nums[i]==0?low:(low-low%pr_nums[i])+pr_nums[i];
        k=k==pr_nums[i]?k+pr_nums[i]:k;

        for (j=k-low; j<lim; j+=pr_nums[i])
        {
            A[j]=(A[j]*(pr_nums[i]-1))/pr_nums[i];
            //pr3(A[j], pr_nums[i], j+low);
            cut_him(&temp[j], pr_nums[i]);
        }
    }
    for (i=0; i<lim; i++)
    {
  //      pr2(i+low, temp[i]);
        if (A[i]==i+low) A[i]--;
        else if (temp[i]>1) A[i]=(A[i]*(temp[i]-1))/temp[i];
    }
    for (i=0; i<lim; i++)
    {
        if (A[i]%d==0) count++;
//        pr2(i+low, A[i]);
    }

return (x==1&&1%d==0)?count+1:count;
}
int main()
{
  //  read;

    LL t, i, j, k, d;
    put_prime();
    in(t);
    while (t--)
    {
        in3(j, k, d);
        i=segmented(j, k, d);
    //    pr(i);
        printf("%.6lf\n", (double)i/(double)(k-j+1));
    }

//file?
return 0;
}

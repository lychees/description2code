#include<bits/stdc++.h>
using namespace std;
#define pp pair<int,int>
#define vi vector<int>
#define mp(i,j) make_pair(i,j)
class comp
{
	public:
	bool operator()(const pp& p1,const pp&p2)
	{
		return((p1.second)<(p2.second));
	}	
};
class graph
{
	int v;
	vector<pp > *adj;
	public:
	graph(int v)
	{
		this->v=v;
		adj=new vector<pp >[v];
	}
	void add_edge(int u,int v,int w)
	{
		adj[u].push_back(make_pair(v,w));
		adj[v].push_back(make_pair(u,w));
	}
	void dijshtra(int s,int tar,int n,vi& d)
	{
		int u,v,w,i,j;
		//vi parent(n,-1);
		d[s]=0;
		priority_queue<pp,vector<pp >,comp> q;
		for(u=0;u<n;u++)
		{
			q.push(mp(u,d[u]));
		}
		vector<pp >::iterator it;
		while(!q.empty())
		{
			u=(q.top()).first;
			q.pop();
			for(it=adj[u].begin();it!=adj[u].end();it++)
			{
				v=(it->first);
				w=(it->second);
				if(d[v]>d[u]+w)
				{
					d[v]=d[u]+w;
					//parent[v]=u;
					q.push(mp(v,d[v]));
				}
			}
		}
		
	}	
};
int main()
{
	int n,s,d,i,u,v,w,ans,e,t;
	scanf("%d",&t);
	while(t--)
	{
	scanf("%d%d",&n,&e);
	graph g(n);
	//vector<vector<int> > t(n,vector<int>(n));
	for(i=0;i<e;i++)
	{
		scanf("%d%d%d",&u,&v,&w);
		u--;
		v--;
		g.add_edge(u,v,w);
	}
	scanf("%d",&s);
	s--;
	vi dist(n,1e9);
	g.dijshtra(s,d,n,dist);
	for( i=0;i<n;i++)
	{
		if(i^s)
		{
			if(dist[i]==1e9)
			{
				printf("-1 ");
			}
			else
				printf("%d ",dist[i]);
		}
	}
	printf("\n");
}
	return 0;
}

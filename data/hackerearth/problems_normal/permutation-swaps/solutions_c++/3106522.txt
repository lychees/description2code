// Bismillahirrahmanirrahim
// AgriCoder IPB
#include <cstdio>
#include <iostream>
#include <cmath>
#include <cstring>
#include <string>
#include <cctype>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <sstream>
#include <clocale>
#include <ctime>
//#include <unordered_map>
using namespace std;

#define FOR(i, agri, coder) for (int i = (int)agri; i <= (int)coder; i++)
#define REP(agri,coder) for (int agri = 0; agri < (int)coder; agri++)
#define FOREACH(i,agricoder) for (typeof((agricoder).end()) i = (agricoder).begin(); i != (agricoder).end(); ++i)
//for (auto& it: agricoder)
#define RESET(agri,coder) memset(agri, coder, sizeof(agri))
#define pb push_back
#define mp make_pair
#define INF 1000000000
#define NL printf("==========================\n")
#define EPS 1e-7
#define AMAN(x,y,xmin,ymin,xmaks,ymaks) ( (x)>=(xmin) && (y)>=(ymin) && (x)<=(xmaks) && (y)<=(ymaks) )
#define modul(x,y) ( ( ((x)%(y))+(y) ) % (y) )

int arahbar[8] = {0,1,0,-1,1,1,-1,-1};
int arahkol[8] = {1,0,-1,0,1,-1,-1,1};
int kudabar[8] = {-2,-1,1,2, 2,1 , -1 ,-2};
int kudakol[8] = {1 ,2 ,2,1,-1,-2 , -2,-1};

typedef long long ll;
typedef unsigned long long ULL;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef pair<ll,ll> PLL;

//template<typename T>
//T getNum() {
   //T res=0;
   //char c;
   //while(1)
   //{
      //c=getchar_unlocked();
      //if(c==' ' || c=='\n') continue;
      //else break;
   //}
   //bool negatif;
   //if (c=='-') {
       //negatif = true;
       //res = 0;
   //}
   //else {
       //res=c-'0';
       //negatif = false;
   //}
   //while(1)
   //{
      //c=getchar_unlocked();
      //if('0'<=c && c<='9') res=10*res + c-'0';
      //else break;
   //}
   //if (negatif) res*=-1;
   //return res;
//}

inline int mutlak(int x) {
	if (x>0) return x; return -x;
}

inline void boost() {
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
}


//freopen("badmilk.in", "r", stdin);
//freopen("badmilk.out", "w", stdout);
//fclose(stdin);
//fclose(stdout);

#define MAXN 100005
// ================================  TEMPLATE ENDS HERE ================================================== //

int tests;
int komp[MAXN];
vector<vi> AdjList;
int n,m;
int P[MAXN],Q[MAXN];
vi Pkump[MAXN], Qkump[MAXN];

int main() {
    scanf("%d",&tests);
    while (tests--) {
        scanf("%d %d",&n,&m);
        REP(i,n) scanf("%d",&P[i]);
        REP(i,n) scanf("%d",&Q[i]);
        AdjList.assign(n,vi());
        REP(i,m) { //bangun AdjList
            int x,y;
            scanf("%d %d",&x,&y);
            x--; y--;
            AdjList[x].pb(y);
            AdjList[y].pb(x);
        }

        RESET(komp,-1);
        int Nkomp = 0; // isi komp
        REP(i,n) if (komp[i]==-1) {
            komp[i] = Nkomp;
            queue<int> q;
            q.push(i);
            while (!q.empty()) {
                int sel = q.front(); q.pop();
                REP(a,AdjList[sel].size()) {
                    int v = AdjList[sel][a];
                    if (komp[v]==-1) {
                        komp[v] = Nkomp;
                        q.push(v);
                    }
                }
            }
            Nkomp++;
        }

        REP(i,Nkomp) { //mulai isi tiap kumpulan
            Pkump[i].clear();
            Qkump[i].clear();
        }
        REP(i,n) {
            Pkump[komp[i]].pb(P[i]);
            Qkump[komp[i]].pb(Q[i]);
        }
        REP(i,Nkomp) {  // sort tiap kumpulan
            sort(Pkump[i].rbegin(),Pkump[i].rend());
            sort(Qkump[i].rbegin(),Qkump[i].rend());
        }
        REP(i,n) { // kembalikan ke array
            P[i] = Pkump[komp[i]].back();
            Pkump[komp[i]].pop_back();
            Q[i] = Qkump[komp[i]].back();
            Qkump[komp[i]].pop_back();
        }

        bool benar = true;
        REP(i,n) if (P[i]!=Q[i]) { // cek kesamaan
            benar = false;
            break;
        }
        if (benar) printf("YES\n");
        else printf("NO\n");
    }

}




// Alhamdulillahirabbilalamin

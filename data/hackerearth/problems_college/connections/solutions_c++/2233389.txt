/*
      *** PATIENCE ABOVE PERFECTION ***
        "When in doubt, use brute force. :D"

        -Founder of alloj.wordpress.com
*/
#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define nline cout<<"\n"
#define fast ios_base::sync_with_stdio(false),cin.tie(0)
#define ull unsigned long long int
#define ll long long int
#define pii pair<int,int>
#define MAXX 100009
#define fr(a,b,i) for(int i=a;i<b;i++)
vector<int>G[MAXX];
int dis[MAXX];
bool vis[MAXX];
void bfs(int src)
{
	vis[src]=true;
	dis[src]=0;
	queue<int>q;
	q.push(src);
	while(not q.empty())
	{
		int s=q.front();
		q.pop();
		for(int i=0;i<G[s].size();i++)
		{
			if(not vis[G[s][i]])
			{
				vis[G[s][i]]=true;
				dis[G[s][i]]=dis[s]+1;
				q.push(G[s][i]);
			}
		}
	}
}
int main()
{
	fast;
   int n,e;
   cin>>n>>e;
   while(e--)
   {
   	int u,v;
   	cin>>u>>v;
   	G[u].pb(v);
   	G[v].pb(u);
   }
   int q;
   cin>>q;
   while(q--)
   {
   	int src,des;
   	cin>>src>>des;
   	memset(vis,false,sizeof vis);
   	memset(dis,0,sizeof dis);
   	bfs(src);
   	if(vis[des]==false)
   	cout<<"No Connection"<<endl;
   	else if(dis[des]-dis[src]==1)
   	cout<<"Direct Connection"<<endl;
   	else if((dis[des]-dis[src])>1)
   	cout<<"Indirect Connection"<<endl;
   }
   return 0;
}


#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:16777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>

#include <fstream>
#include <sys/stat.h>
#include <stdlib.h>
#include <stdio.h>
using namespace std;

#define FOR(i, a, b) for(int i=(a);i<(b);i++)
#define RFOR(i, b, a) for(int i=(b)-1;i>=(a);--i)
#define FILL(A,value) memset(A,value,sizeof(A))
#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979

typedef long long Int;
typedef unsigned long long UInt;
typedef vector<int> VI;
typedef pair<int, int> PII;

const int INF = 1000000000;
const int MAX = 1007;
const int MAX2 = 1000000;
const int MAXD = 20;
const int BASE = 1000000007;
const int MOD = 1000000007;

const int MAGIC = 74;
const int ITER = 180;

Int gcd(Int a, Int b)
{
    if (!b) return a;
    return gcd(b , a % b);
}

Int lcm(Int a , Int b)
{
    Int g = gcd(a , b);
    return a / g * b;
}

Int dp[4747];

Int F(Int X)
{
    Int A = 1;
    dp[1] = 0;
    Int res = 0;

    FOR(i,2,474747)
    {
        Int B = lcm(A , i);
        dp[i] = 1;
        FOR(j,1,i)
        {
            if (i % j != 0)
            {
                dp[i] += dp[j];
                break;
            }
        }
        //cout << i << ' ' << dp[i] << ' ' << A << ' ' << B << ' ' << (X / A - X / B) << endl;
        res += (dp[i] + 1) * (X / A - X / B);
        if (B > X) break;
        A = B;
    }
    if (X >= 1) res -= 2;
    if (X >= 2) res -= 2;

    return res;
}

int main() {

    Int L, R;
    cin >> L >> R;

    //cout << F(R) << endl;

    cout << F(R) - F(L - 1) << endl;

    return 0;
}

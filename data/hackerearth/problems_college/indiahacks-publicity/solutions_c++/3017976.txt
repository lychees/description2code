#include<iostream>
#include<list>
using namespace std;
typedef long long ll;
ll cnt;
class Graph
{
	ll tN;
	list<ll> *adj_List;
	void _DFS(ll curr, bool visited[]);
	
	public:
		Graph(ll tN);
		void addEdge(ll a, ll b);
		void DFS();
};

Graph::Graph(ll tN)
{
	this->tN=tN;
	adj_List=new list<ll>[tN];
}

void Graph::addEdge(ll a, ll b)
{
		adj_List[a].push_back(b);
		adj_List[b].push_back(a);
}

void Graph::_DFS(ll node, bool visited[])
{
	visited[node]=true;
	//System.out.print(node+" ");
		
	list<ll>::iterator i;
    for(i=adj_List[node].begin();i!=adj_List[node].end();i++)
       	if(!visited[*i])
           	_DFS(*i, visited);
}

void Graph::DFS()
{
	bool visited[tN];
	for(ll i=0;i<tN;i++)
		visited[i]=false;
		
	for(ll i=0;i<tN;i++)
		if(!visited[i])
		{
			cnt++;
			_DFS(i,visited);
		}
}
	
int main()
{
	int tc;
	cin>>tc;
	while(tc--)
	{
		ll N,a,b,e;
		cin>>N;
		Graph g (N);
		cnt=0;
		cin>>e;
		while(e--)
		{
			cin>>a>>b;
			g.addEdge(a,b);
		}
		g.DFS();
		cout<<cnt<<endl;
	}
	return 0;
}
#include <iostream>
#include <cstdio>
#include <set>
#include <stack>
#include <queue>
#include <utility>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <map>
#include <iomanip>

using namespace std;

#define ll long long int
#define MOD 1000000007

ll fact[100001];
ll arr[100001], term[100001];
map <ll, ll> mp;
map <ll, ll> :: iterator it;

ll inv(ll);
ll ncr(ll, ll);

int main()
{
	ll ans, t, n, m, tot, i, j, k, a, b, c, x, y, z;
	
	fact[0] = 1;
	for (i = 1; i <= 100000; ++i) {
		fact[i] = (i * fact[i-1]) % MOD;
	}

	scanf("%lld", &n);
	tot = 0;
	for (i = 0; i < n; ++i) {
		scanf("%lld", &m);
		tot += m;
		arr[i] = m;
		mp.clear();
		for (j = 0; j < m; ++j) {
			scanf("%lld", &y);
			if (mp.find(y) == mp.end()) {
				mp[y] = 1;
			} else {
				mp[y] += 1;
			}
		}

		x = 1;
		for (it = mp.begin(); it != mp.end(); ++it) {
			x = (x * fact[it->second]) % MOD;
		}
		term[i] = x;
	}

	ans = 1;
	for (i = 0; i < n; ++i) {
		ans = (ans * ncr(tot, arr[i])) % MOD;
		ans = (ans * term[i]) % MOD;
		tot -= arr[i];
	}

	printf("%lld\n", ans);

	return 0;
}

ll inv(ll a)
{
	ll ans = 1, b = MOD - 2;
	while (b) {
		if (b & 1) {
			ans = (ans * a) % MOD;
		}

		a = (a * a) % MOD;
		b = b >> 1;
	}

	return ans;
}

ll ncr(ll n, ll r)
{
	ll a, b;
	a = fact[n];
	b = inv((fact[n-r] * fact[r]) % MOD);
	return ((a * b) % MOD);
}
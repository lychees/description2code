#include<iostream>
#include<algorithm>
using namespace std;
long long dp[507][507], bestsqrsum[507][507];
const long long INF = 100000000000000007;
long long a[507], ps[507];
int main()
{
	for (int i = 0; i < 507; i++)
	{
		for (int j = 0; j < 507; j++)
		{
			dp[i][j] = INF;
			bestsqrsum[i][j] = INF;
		}
	}
	int n, k;
	cin >> n >> k;
	for (int i = 1; i <= n; i++)
	{
		cin >> a[i];
		ps[i] = ps[i - 1] + a[i];
	}
	dp[0][0] = 0;
	bestsqrsum[0][0] = 0;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= k; j++)
		{
			for (int p = 0; p < i; p++)
			{
				if (bestsqrsum[p][j - 1] + (ps[i] - ps[p])*(ps[i] - ps[p]) <= bestsqrsum[i][j])
				{
					bestsqrsum[i][j] = bestsqrsum[p][j - 1] + (ps[i] - ps[p])*(ps[i] - ps[p]);					
				}
			}
		}
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= k; j++)
		{
			for (int p = 0; p < i; p++)
			{
				dp[i][j] = min(dp[i][j], dp[p][j - 1] + bestsqrsum[p][j - 1] + (j - 1)*(ps[i] - ps[p])*(ps[i]-ps[p]) - 2 * ps[p] * (ps[i] - ps[p]));				
			}
		}
	}
	cout << dp[n][k] << endl;
	return 0;
}
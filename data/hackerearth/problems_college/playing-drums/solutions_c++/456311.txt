//MD SHAKIM-MNNIT ALLAHABAD
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>
#include <map>
#include <string>
#include <climits>
#include <set>
#include <string>
#include <sstream>
#include <ctime>
using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;
#define IT iterator
#define getcx getchar
#define SIZE(A) ((int)A.size())
#define pb push_back
#define ALL(c) c.begin(), c.end()
#define INF (int(1e9))
#define INFL (LL(1e18))
#define F(i, a, n) for(int i = a; i <= n; i++)
#define R(i, a, n) for(int i = a; i >= n; i--)
#define loop(n) F(i, 0, n-1)
#define loop1(n) F(i, 1, n)
#define TR(c,i) for(VI::iterator i = (c).begin(); i != (c).end(); i++)
#define pii pair< int,int >
#define piii pair< pii , int >
#define temp 0
#define wait 1
#define perm 2
struct comp
{
    bool operator()(const pii &a,const pii &b)
    {
        return a.second>b.second;
    }
};
struct myclass {
  bool operator() (const pii &a,const pii &b)
  {
        return a.first>b.first;
  }
} myobject;
#define in2(n,m) scanf("%d %d",&n,&m);
#define in3(x,y,z) scanf("%d %d %d",&x,&y,&z);
#define mod 1000000007
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
int search(int a[],int b,int n,int c);
int main()
{
    int t,n,m,i,a[1005];
    LL l,h,mid,curr,cnt,prev;
    in(t);
    while(t--)
    {
        in(n);
        in(m);
        for(i=0; i<n; i++)
        {
            in(a[i]);
        }
        int ans=search(a,0,n,m);
        printf("%d\n",ans);
        /*l=a[1];
        h=1000000000+10;
        while(l<h)
        {
            mid=l+(h-l+1)/2;
            curr=mid;
            cnt=0;
            prev=0;
            for(i=1; i<=n; i++)
            {
                if(curr>a[i]-prev)
                {
                    curr-=(a[i]-prev);
                    prev=a[i];
                }
                else if(a[i]-prev>=curr)
                {
                    curr=0;
                    prev=a[i];
                    curr=mid;
                    cnt++;
                }
            }
            if(cnt>=m)
            {
                l=mid+1;
            }
            else
            {
                h=mid;
            }
        }
        printf("%lld\n",l);*/
    }
    return 0;
}
int search(int a[],int b,int n,int c)
{
    int mid,i,l,h,req=0,low=a[b],initial=a[b];
    l=a[b];
    h=a[n-1];
    //printf("%d %d %d\n",l,h,c);
    while(l<h)
    {
        mid=l+(h-l)/2;
        req=0;
        initial=a[b];
        for(i=0; i<n; i++)
        {
            if(a[i]-initial>mid-low)
            {
                req++;
                initial=a[i];
            }
        }
        if(req>=c-1)
        {
            //printf("low %d changed to %d value of reqd is %d\n",l,mid+1,req);
            l=mid+1;
        }
        else
        {
            //printf("high %d changed to %d and value of reqd is %d\n",h,mid,req);
            h=mid;
        }
    }
    return l-low;;
}

"""
From HackerEarth February Easy Challenge

http://www.hackerearth.com/feb-easy-challenge-14/algorithm/matrix-symmetry/
"""

import sys
import cProfile


def is_vertical(m):
    n = len(m)
    for col in xrange(n/2):
        for row in xrange(n):
            if m[row][col] != m[row][n-1-col]:
                return False
    return True


def is_horizontal(m):
    n = len(m)
    for row in xrange(n/2):
        if m[row] != m[n-1-row]:
            return False
    return True


def check_symmetry(m):
    horz = is_horizontal(m)
    vert = is_vertical(m)
    if vert and horz:
        return "BOTH"
    elif vert:
        return "VERTICAL"
    elif horz:
        return "HORIZONTAL"
    else:
        return "NO"


def load_matrix(input):
    """Load the next matrix from the input stream"""
    m = []
    n = int(input.next())
    for i in xrange(n):
        m.append(list(input.next()))
    return m


def load_matrices(input):
    """ Returns input matrices """
    t = int(input.next())
    for i in xrange(t):
        yield load_matrix(input)

#
# input support
#


def input_from_string(data):
    """ Input generator, using given data as input """
    for line in data.splitlines():
        yield line


def input_from_file(file):
    """ Input generator, using given file as input """
    return input_from_fd(open(file, "r"))


def input_from_fd(fd):
    """ Input generator, using given file descriptor as input """
    for line in fd:
        yield line.rstrip()


if __name__ == '__main__':
    if len(sys.argv) > 1:
        input = input_from_file(sys.argv[1])
    else:
        input = input_from_fd(sys.stdin)

    for m in load_matrices(input):
        print check_symmetry(m)

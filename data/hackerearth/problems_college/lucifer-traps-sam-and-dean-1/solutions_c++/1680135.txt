#include<bits/stdc++.h>
#define ll long long int
#define s(a) scanf("%lld",&a)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second

using namespace std;

struct trie {
    struct trie *left,*right;
    ll val;
};

ll naruto=0;
ll sasuke=INT_MAX;

struct trie *insert(struct trie *root,ll ind,ll x)
{
    struct trie *dick=root;
    ll i;
    for(i=(1<<30);i>0;i>>=1) {
        if(x & (i)) {
            if(dick->right == NULL) {
                struct trie *ab=(struct trie *)malloc(sizeof(struct trie));
                ab->val=INT_MAX;
                ab->left=NULL;
                ab->right=NULL;
                dick->right=ab;
            }
            dick=dick->right;
            dick->val=min(dick->val,ind);
        }
        else {
            if(dick->left == NULL) {
                struct trie *ab=(struct trie *)malloc(sizeof(struct trie));
                ab->val=INT_MAX;
                ab->left=NULL;
                ab->right=NULL;
                dick->left=ab;
            }
            dick=dick->left;
            dick->val=min(dick->val,ind);
        }
    }
    return root;
}

ll maximum(struct trie *root,ll x)
{
    ll ans=0,i;
    struct trie *dick=root;
    for(i=(1<<30);i>0;i>>=1) {
        if(x & (i)) {
            if(dick->left == NULL) {
                dick=dick->right;
                ans=ans*2 + 1;
            }
            else {
                dick=dick->left;
                ans=2*ans;
            }
        }
        else {
            if(dick->right == NULL) {
                dick=dick->left;
                ans=2*ans;
            }
            else {
                dick=dick->right;
                ans=ans*2 + 1;
            }
        }
        naruto=dick->val;
    }
    ans=x^ans;
    return ans;
}

ll xors[100001]={0};
bitset<100001>visit;
vector <pair<ll,ll> >v[100001];

void dfs(ll ind,ll xr)
{
    ll i;
    visit[ind]=1;
    xors[ind]=xr;
    for(i=0;i<v[ind].size();i++) {
        if(visit[v[ind][i].fr]==1) continue;
        visit[v[ind][i].fr]=1;
        dfs(v[ind][i].fr,xr^v[ind][i].sc);
    }
}

bitset<100001> b;
vector<ll> path;

void traverse(ll x,ll y)
{
    ll i;
    b[x]=1;
    if(x==y) {
        for(i=0;i<path.size();i++) {
            printf("%lld ",path[i]);
        }
        cout<<endl;
        exit(0);
    }
    for(i=0;i<v[x].size();i++) {
        if(b[v[x][i].fr]==1) continue;
        path.pb(v[x][i].fr);
        traverse(v[x][i].fr,y);
        path.pop_back();
    }
}

int main()
{
    struct trie *root=(struct trie *)malloc(sizeof(struct trie));
    root->val=0;
    root->left=NULL;
    root->right=NULL;
    ll i,n,x,y,z;
    s(n);
    for(i=1;i<n;i++) {
        s(x);s(y);s(z);
        v[x].pb(mp(y,z));
        v[y].pb(mp(x,z));
    }
    dfs(1,0);
    for(i=1;i<=n;i++) {
        root=insert(root,i,xors[i]);
    }
    ll m=0,start=INT_MAX,k;
    for(i=1;i<=n;i++) {
        k=maximum(root,xors[i]);
        if(k>m) {
            m=k;
            sasuke=naruto;
            start=i;
        }
        else if(m==k) {
            if(min(start,sasuke) > min(i,naruto)) {
                start=i;
                sasuke=naruto;
            }
            else if(min(start,sasuke) == min(i,naruto)) {
                if(max(start,sasuke) > max(i,naruto)) {
                    start=i;
                    sasuke=naruto;
                }
            }
        }
    }
    cout<<m<<endl;
    x=min(start,sasuke);
    y=max(start,sasuke);

    printf("%lld ",x);
    traverse(x,y);

    return 0;
}

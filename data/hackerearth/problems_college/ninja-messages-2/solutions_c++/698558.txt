#include <cassert>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#include <algorithm>
#include <deque>
#include <functional>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#include <fstream>
#include <iostream>
#include <sstream>

#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;
// }}}

typedef long long int64;
const int INF = 0x3f3f3f3f;
template <class T> inline int len (const T &a) { return a.size (); }

// Globals.
int memo [1 << 16];
int par [1 << 16];
int G [16][16];
int N;

// Calculate the value of every one who is superceded.
int
calc (int x, int mask) {
    int ret = 0;
    for (int i = 0; i < N; i++)
        if (! (mask & 1 << i))
            ret += G [i][x];
    return ret;
}

// DP with bitmask.
int
solve (int mask) {
    if (mask == (1 << N) - 1) return 0;
    if (memo [mask] != -1) return memo [mask];
    int ret = INF;
    for (int i = 0; i < N; i++)
        if (! (mask & 1 << i)) {
            int w = calc (i, mask) + solve (mask | 1 << i);  // Set ith bit in the mask.
            if (ret > w) {
                ret = w;
                par [mask] = mask | 1 << i;  // Set up the parent pointer.
            }
        }
    return memo [mask] = ret;
}

void
trace () {
    int mask = 0;
    while (par [mask] != -1) {
        int omask = mask, nmask = par [mask], bits = 0;
        // Calculate ith unmatched bit.
        while ((omask & 1) == (nmask & 1)) {
            omask /= 2;
            nmask /= 2;
            bits++;
        }
        printf ("%d ", bits);
        mask = par [mask];
    }
    putchar ('\n');
}

int
main () {
#ifdef LOCALHOST
    freopen ("test.in", "r", stdin);
    // freopen ("test.out", "w", stdout);
#endif
    int T, num;
    scanf ("%d", &T);
    while (T--) {
        scanf ("%d", &N);
        memset (G, 0, sizeof (G));         // Reset the graph.
        memset (memo, -1, sizeof (memo));  // Reset the memo table.
        memset (par, -1, sizeof (par));    // Reset the parent table.
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++) {
                scanf ("%d", &num);
                G [i][j] = num;            // Build the graph.
            }
        solve (0);  // DP.
        trace ();   // Trace the path.
    }

    return 0;
}
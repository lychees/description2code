#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 100;

int n;
vector <int> g[N];
vector <int> gt[N];
bool was[N];
vector <int> order;

void dfs1(int x) {
  was[x] = true;
  int sz = g[x].size();
  for (int i = 0; i < sz; ++i) {
    int y = g[x][i];
    if (!was[y]) {
      dfs1(y);
    }
  }
  order.push_back(x);
}

vector <int> comp;

void dfs2(int x) {
  comp.push_back(x);
  was[x] = true;
  int sz = gt[x].size();
  for (int i = 0; i < sz; ++i) {
    int y = gt[x][i];
    if (!was[y]) {
      dfs2(y);
    }
  }
}

int ans[N];

int main() {
  // freopen("in", "r", stdin); freopen("out", "w", stdout);
  int n, m;
  scanf("%d %d", &n, &m);
  for (int i = 0; i < n; ++i) {
    g[i].clear();
  }
  for (int i = 0; i < m; ++i) {
    int x, y;
    scanf("%d %d", &x, &y);
    --x;
    --y;
    g[x].push_back(y);
    gt[y].push_back(x);
  }
  order.clear();
  memset(was, false, sizeof was);
  for (int i = 0; i < n; ++i) {
    if (!was[i]) {
      dfs1(i);
    }
  }
  memset(was, false, sizeof was);
  memset(ans, 0, sizeof ans);
  for (int i = n - 1; i >= 0; --i) {
    if (!was[order[i]]) {
      comp.clear();
      dfs2(order[i]);
      int sz = comp.size();
      if (sz > 1) {
        for (int j = 0; j < sz; ++j) {
          ans[comp[j]] = 1;
        }
      }
    }
  }
  for (int i = 0; i < n; ++i) {
    printf("%d", ans[i]);
    if (i < n - 1) {
      printf(" ");
    }
  }
  printf("\n");
  return 0;
}
def binary_search(l, r, transactions, t_val, sum_list=[]):
    if l <= r:
        mid = l + (r-l)/2
        t_sum = 0
        t_sum_prev = 0

        if sum_list:
            if mid <= len(sum_list)-1:
                t_sum = sum_list[mid]
                if len(sum_list) > 1 and mid >= 1:
                    t_sum_prev = sum_list[mid-1]
            else:
                t_sum = sum_list[-1]
                for i in xrange(len(sum_list), mid+1):
                    t_sum = t_sum + int(transactions[i])
                    sum_list.append(t_sum)
                    if i == mid-1:
                        t_sum_prev = t_sum
        else:
            for i in xrange(mid+1):
                t_sum = t_sum + int(transactions[i])
                sum_list.append(t_sum)
                if i == mid-1:
                    t_sum_prev = t_sum

        if t_sum == t_val:
            return mid+1
        elif t_sum > t_val:
            if t_sum_prev < t_val:
                return mid+1
            if t_sum_prev == t_val:
                return mid
            return binary_search(
                l, mid-1, transactions, t_val, sum_list=sum_list)
        else:
            return binary_search(
                mid+1, r, transactions, t_val, sum_list=sum_list)
    else:
        return -1


useless_N = raw_input()
transactions = raw_input().split()
Q = int(raw_input())
targets = []
for i in xrange(Q):
    targets.append(int(raw_input()))

for t in targets:
    loc = binary_search(0, len(transactions)-1, transactions, t)
    print loc

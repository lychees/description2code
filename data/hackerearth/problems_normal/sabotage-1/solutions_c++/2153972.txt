#include <cstdio>
#include <algorithm>
#include <vector>
#include <iostream>
#include <cstring>
#include <queue>
#include <assert.h>
#include <cmath>
#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;
#define inf 1<<30
#define lc(x) x<<1
#define rc(x) x<<1|1
#define m(a,b) (a+b)/2
#define EPS 1e-6
#define PI 3.1415926535897932384
#define For(a,b,c) for(int a = b;a<=c;a++)
#define pb push_back
#define mp make_pair
#define io cin.sync_with_stdio(0); cin.tie(0);

using namespace std;
const int MAXN =  100001;

int N,M,a,b,cnt = 0;
struct edge {
      int a, b;
};
vector<edge> E;
int root[MAXN], rnk[MAXN];

int find(int x) {
      if (x != root[x])
            root[x] = find(root[x]);
      return root[x];
}
vector<int> vec;
bool FLAG[MAXN];
void kruskal () {
      For(i,0,E.size()-1) {
            int fa = find(E[i].a);
            int fb = find(E[i].b);
            if (fa != fb) {
                  if (rnk[fa] > rnk[fb]) {
                        root[fb] = fa;
                  } else {
                        root[fa] = fb;
                        if (rnk[fa] == rnk[fb])
                              rnk[fb] ++;
                  }
                  FLAG[E.size()-1-i] = 1;
                  cnt ++;
            }
      }
}
int main() { io
      cin >> N >> M;
      For(i,1,N) {root[i] = i, rnk[i] = 1;}
      For(i,1,M) {
            cin >> a >> b;
            E.push_back({a,b});
      }
      reverse(E.begin(),E.end());
      kruskal();
      cout << M - cnt << endl;
      For(i,0,M-1) {
            if (!FLAG[i]) cout << i + 1 << endl;
      }
}
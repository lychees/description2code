#include <iostream>
#include <string>
#include <algorithm>
#include <queue>
#include <cassert>
#include <unordered_set>
using namespace std;

#define FOR(k,a,b) for(typeof(a) k=(a); k <= (b); ++k)
#define REP(k,a) for(int k=0; k < (a); ++k)
#define FI first
#define SE second

int m1[] = {0,1,3,4,6,7,0,1,2,3,4,5};
int m2[] = {1,2,4,5,7,8,3,4,5,6,7,8};

int encode(vector<int> val)
{
	int ret=0;
        assert(val.size()==9);
  	REP(i,9) {
  		ret = ret*10+val[i];
  	}
  	return ret;
}

void solve(vector<int> val)
{
	bool p[23]={false}; //primes index-1
	p[2]=p[3]=p[5]=p[7]=p[11]=p[13]=p[17]=p[19]=true;
        
	unordered_set<int> visited;
	queue<pair<vector<int>, int> > q;
	q.push(make_pair(val, 0));
        visited.insert(encode(val));
		
	//cout << "Solving : "; REP(i,9) cout << val[i]; cout << endl; 
	while(!q.empty()){
		pair<vector<int>, int> st = q.front();
		q.pop();
		
		if(encode(st.FI)==123456789){
			cout << st.SE << endl;
			return;
		}
		
		REP(i,12){
			int s = st.FI[m1[i]] + st.FI[m2[i]];
			if(p[s]) {
				vector<int> newst = st.FI;
				swap( newst[m1[i]], newst[m2[i]] );
				if(visited.find(encode(newst))==visited.end()) {
					q.push( make_pair(newst,st.SE+1) );
					visited.insert( encode(newst) );
				}
			}
		}
	}
	cout << "-1" << endl;
}

int main()
{
    int T;
    cin >> T;
    
    REP(i,T){
    	vector<int> val(9);
    	REP(j,9) cin >> val[j];
    	solve(val);
    }
    
    return 0;
}

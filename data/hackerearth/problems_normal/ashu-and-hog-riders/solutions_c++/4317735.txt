#include<bits/stdc++.h>
using namespace std;


#define MEM(a,N,b) fill(a,(a+N),b)
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define FORR(i,n) for(i=n-1;i>=0;--i)
#define elif else if
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define all(x)  (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define sd(x)   scanf("%lf",&x);
#define sll(x)  scanf("%lld",&x)
#define sl(x)   scanf("%ld",&x)
#define si(x)   scanf("%d",&x)
#define sstr(x) scanf("%s",&x)
#define pi(x)   printf("%d",x)
#define pl(x)   printf("%ld",x)
#define pd(x)   printf("%lf",x)
#define pll(x)  printf("%lld",x)
#define pstr(x) printf("%s",x)
#define nl      printf("\n")
#define sp      printf(" ")

#define ll long long
#define l long
#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define ABS(x)   ((x) < 0 ? (-1)*(x) : (x))
#define Pi 3.1415926535897
#define MOD 1000000007
#define coolreshab ios::sync_with_stdio(false);//cin.tie(NULL)


/*freopen("test.txt","r",stdin);
  freopen("out.txt","w",stdout);
  cout << clock() / (double) CLOCKS_PER_SEC << "\n";*/



vector< vector<bool> >graph;
vector< vector<bool> >visited;
pair<int,int>Y;
int N,ans,god;
pair<int,int> check(pair<int,int>P)
{
    int i,j;
    if(P.ss==N)
        {
            (P.ff)++;
             P.ss=1;
        }
    else
        (P.ss)++;
    FORAB(i,(P.ff),N)
    {
        FORAB(j,(P.ss),N)
            {
                if(!visited[i][j] and graph[i][j])
                    return mp(i,j);
            }
        P.ss=1;
    }
    return mp(0,0);
}
void dfs(pair<int,int>Z) //O(V+E)
{
    visited[Z.ff][Z.ss]=1;
    ++ans;
    if((Z.ff)<=N and !visited[(Z.ff)+1][Z.ss] and graph[(Z.ff)+1][Z.ss])
        dfs(mp((Z.ff)+1,Z.ss));
    if( (Z.ss)<=N and !visited[(Z.ff)][(Z.ss)+1] and graph[(Z.ff)][(Z.ss)+1])
        dfs(mp((Z.ff),(Z.ss)+1));
    if( (Z.ss)>=0 and !visited[(Z.ff)][(Z.ss)-1] and graph[(Z.ff)][(Z.ss)-1])
        dfs(mp((Z.ff),(Z.ss)-1));
    if( (Z.ff)>=0 and !visited[(Z.ff)-1][(Z.ss)] and graph[(Z.ff)-1][(Z.ss)])
        dfs(mp((Z.ff)-1,(Z.ss)));
}
main()
 { int i,j;
   bool lol;
   coolreshab;
   cin>>N;
   graph.resize(N+5,vector<bool>(N+5,0));
   visited.resize(N+5,vector<bool>(N+5,0));
   FORN(i,N)
    FORN(j,N)
    {
        cin>>lol;
        graph[i+1][j+1]=lol;

    }
   Y=check(mp(1,1));
   god=INT_MIN;
   while(Y!=mp(0,0))
   {
       ans=0;
       dfs(Y);
       god=MAX(god,ans);
       Y=check(Y);
   }
   cout<<god<<endl;

 }

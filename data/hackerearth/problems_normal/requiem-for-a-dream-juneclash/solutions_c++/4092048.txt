#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5, LOGN = 20;
#define ll long long

struct data{
	ll prefix, suffix, best, total;
	bool isSpecial;
	data(){
		prefix = suffix = best = total = 0;
		isSpecial = false;
	}
} val[N][LOGN];

vector<pair<int, int> > adj[N];
int h[N], p[N][LOGN], pW[N];

data init(int val){
	data tmp;
	tmp.prefix = tmp.suffix = tmp.total = val;
	tmp.best = max(val, 0);
	return tmp;
}

data combine(data a, data b){
	
	if(a.isSpecial)	return b;
	else if(b.isSpecial)	return a;
	
	data tmp;
	tmp.total = a.total + b.total;
	tmp.prefix = max(a.prefix, a.total + b.prefix);
	tmp.suffix = max(b.suffix, b.total + a.suffix);
	tmp.best = max(max(a.best, b.best), a.suffix + b.prefix);
	return tmp;
}

void dfs(int u, int prev, int edge){
	
	h[u] = h[prev] + 1;
	pW[u] = edge;

	p[u][0] = prev;
	val[u][0] = init(edge);

	for(int i = 1; i < LOGN; i++){
		p[u][i] = p[p[u][i - 1]][i - 1];
		val[u][i] = combine(val[u][i - 1], val[p[u][i - 1]][i - 1]);
	}

	for(auto v : adj[u])
		if(v.first != prev)
			dfs(v.first, u, v.second);
}

data calc(int u, int v){
	if(h[v] > h[u])	swap(u, v);
	int diff = h[u] - h[v];
	data l, r;
	l.isSpecial = r.isSpecial = true;
	for(int i = LOGN - 1; i >= 0; i--){
		if((1 << i) & diff){
			l = combine(l, val[u][i]);
			u = p[u][i];
		}
	}
	if(u == v)	return l;
	for(int i = LOGN - 1; i >= 0; i--){
		if(p[u][i] != p[v][i]){
			l = combine(l, val[u][i]);
			r = combine(r, val[v][i]);
			u = p[u][i], v = p[v][i];
		}
	}
	l = combine(l, combine(init(pW[u]), init(pW[v])));
	swap(r.prefix, r.suffix);
	l = combine(l, r);
	return l;
}

int main(){

	int n, q, u, v, w;

	cin>>n>>q;
	for(int i = 1; i < n; i++){
		cin>>u>>v>>w;
		adj[u].push_back({v, w});
		adj[v].push_back({u, w});
	}

	dfs(1, 0, 0);

	while(q--){
		cin>>u>>v;
		cout<<calc(u, v).best<<"\n";
	}
}
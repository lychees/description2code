#include <cstring>
#include <vector>
#include <bits/stdc++.h>
using namespace std;
int L[1000],R[1000],paths[1000],n,m;
vector<int>pathSet[1000];
bool hasFriendSacrificed(int i)
{
    paths[i]=1;
    for(int k=0;k<pathSet[i].size();k++)
    {
        int j=pathSet[i][k];
        if(R[j]==-1)
        {
            R[j]=i;
            L[i]=j;
            return true;
        }
        if(paths[R[j]]==0 && hasFriendSacrificed(R[j]))
        {
            R[j]=i;
            L[i]=j;
            return true;
        }
    }
    return false;
}
void printSacrificedFriends()
{
    int total=0,isfriendSacrificed=0,result=0;
    memset(L,-1,sizeof(L));
    memset(R,-1,sizeof(R));
    do
    {
        isfriendSacrificed=0;
        memset(paths,0,sizeof(paths));
        for(int i=1;i<=n;i++)
        {
            if(L[i]==-1)
            {
                if(hasFriendSacrificed(i)==true) total++,isfriendSacrificed=1;
            }
        }
    }while(isfriendSacrificed!=0);

	result=n-total-1;
	printf("%d\n",result);
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        for(int i=0;i<1000;i++) pathSet[i].clear();
		scanf("%d",&n);
		scanf("%d",&m);
        while(m--)
        {
            int r1,r2;
		    scanf("%d",&r1);
		    scanf("%d",&r2);
            pathSet[r1].push_back(r2);
        }
        printSacrificedFriends();
    }
}
#include <queue>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <limits.h>
#include <cassert>

using namespace std;

#define rep(i,a,b) for(int i=(a);i<(b);i++)
#define ll long long int
#define ii pair<int,int>
#define Clear(x,val) memset(x,val,sizeof(x))
#define SZ(v) (v).size()
#define MAX 1000001

int mark[MAX] , nxt[MAX] , par[MAX];
int depth[MAX] , CYC[MAX];

void dfs1( int u ) {
	if( mark[u] == 1 ) {
		int ver = u;int cnt = 1;
		while( par[ver] != u ) {
			cnt++; ver = par[ver];
		}
		ver = u;
		while( par[ver] != u ) {
			depth[ver] = cnt;CYC[ver]=1;
                	ver = par[ver];
			depth[ver] = cnt;CYC[ver]=1;
                }
		mark[u] = 2;
		return;
	}	
	else if( mark[u] == 2 ) {
		return;
	}

	mark[u] = 1; par[nxt[u]]=u; 
	dfs1( nxt[u] );
	if( !CYC[u] ) { depth[u] = 1+depth[ nxt[u] ]; }	
//	cout << "Depth" << u <<  " " << depth[u] << " " << nxt[u] <<" " <<  depth[nxt[u]] << "\n";
		
	mark[u] = 2;
}


int main()
{
	int T;cin >> T;
	while( T-- ) {
		int N; cin >> N;
		rep( i , 0, N ) { 
			scanf("%d" ,&nxt[i] );mark[i]=0;depth[i]=0;CYC[i]=0;par[i]=-1;
		}


		int ans = 0 , lowest = MAX;
		rep( i , 0 , N ) {
			if(!mark[i]) { 
				dfs1( i );
			}
			if( depth[i] > ans ) { ans = depth[i]; lowest = i; }
			if( depth[i] == ans ) lowest = min( lowest , i ); 
//			cout << depth[i] << " " << i << "\n";
		}
		cout << lowest << "\n";
	}
	return 0;
}
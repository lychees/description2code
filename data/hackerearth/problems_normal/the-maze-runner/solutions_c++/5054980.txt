#include <bits/stdc++.h>

using namespace std;

#define INF (1<<29)
#define EPSILON 1e-9
 
int N;
double x[200], y[200], H;
double dp[200][200];
 
double dist(double x1, double y1, double x2, double y2) {
	return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
}
 
bool check(int l, int r, double Y) {
	for (int i = l; i <= r; i++)
		if (Y < y[i]-EPSILON || Y > y[i]+EPSILON+H)
			return false;
	return true;
}
 
bool valid(double x1, double y1, double x2, double y2, int l, int r) {
	for (int i = l; i <= r; i++) {
		double nx = x[i];
		double ny = y1 + (nx-x1)*(y2-y1)/(x2-x1);
		if (ny < y[i]-EPSILON || ny > y[i]+H+EPSILON)
			return false;
	}
	return true;
}
 
int main(){
	cin >> N;
	for (int i = 0; i <= N; i++) {
		cin >> x[i] >> y[i];
	}
	cin >> H;
	 
	 
	for (int i = 0; i <= N; i++) {
		dp[i][0] = INF;
		dp[i][1] = INF;
	}
	 
	dp[0][0] = 0;
	dp[0][1] = 0;
	 
	for (int i = 1; i <= N; i++) {
		if (check(0, i-1, y[i]))
			dp[i][0] = min(dp[i][0], x[i]-x[0]);
		if (check(0, i-1, y[i]+H))
			dp[i][1] = min(dp[i][1], x[i]-x[0]);
	}
	 
	for (int i = 0; i < N; i++) {
		for (int j = 0; j <= 1; j++) {
			for (int k = i+1; k <= N; k++) {
				for (int l = 0; l <= 1; l++) {
					double x1 = x[i];
					double y1 = y[i] + H*j;
					double x2 = x[k];
					double y2 = y[k] + H*l;
					if (valid(x1, y1, x2, y2, i+1, k-1))
						dp[k][l] = min(dp[k][l], dp[i][j] + dist(x1, y1, x2, y2));
				}
			}
		}
	}
				
	double ans = INF;
	for (int i = 0; i <= N; i++) {
		if (check(i+1, N, y[i]))
			ans = min(ans, dp[i][0] + x[N]-x[i]);
		if (check(i+1, N, y[i]+H))
			ans= min(ans, dp[i][1] + x[N]-x[i]);
	}

	cout << fixed << setprecision(10) << ans << endl;
	 
	return 0;
}
#include<iostream>
#include<cstdio>
#include<string>
#include<vector>
#include<cstring>
#include<iomanip> 
#include<utility> 
#include<climits>
#include<climits>
#include<cmath>
#include<algorithm>


using namespace std;


#define LL long long int
#define sc1(x) scanf("%d", &x)
#define sc2(x, y) scanf("%d%d", &x, &y)
#define sc3(x, y, z) scanf("%d%d%d", &x, &y, &z)
#define pr1(x) printf("%lld\n", x)
#define FOR(i, a, n) for(int i=a;i<n;i++)
#define pp pair<int, int>

#define MAX 200
#define MOD 1000000007LL

int graph[MAX][MAX];
LL mat[MAX][MAX], temp[MAX][MAX];

bool visited[MAX][MAX];
int n;

LL func(int n) {
	FOR(i, 0, n) {
		FOR(j, 0, n) {
			if(i && j) {
				if(!graph[i][j]) mat[i][j] = mat[i-1][j] + mat[i][j-1];
			} else if(i) {
				if(!graph[i][j]) mat[i][j] = mat[i-1][j];
			} else if(j) {
				if(!graph[i][j]) mat[i][j] = mat[i][j-1];
			} else {
				if(!graph[i][j]) mat[i][j] = 1;
			}
		}
	}
	
	return mat[n-1][n-1];
}


int dx[] = {-1, 0, 0, 1};
int dy[] = {0, -1, 1, 0};

bool isValid(int x, int y) {
	if((x < 0) || (y < 0) || (x >= n) || (y >= n)) {
		return false;
	}
	return true;
}


LL ways(int x, int y) {
	if((x==n-1) && (y==n-1)) return 1;

	LL result = 0;
	visited[x][y] = true;
	FOR(i, 0, 4) {
		int x1 = x + dx[i];
		int y1 = y + dy[i];
		
		if(isValid(x1, y1) && (!visited[x1][y1]) && (!graph[x1][y1])) {
			result += ways(x1, y1);
		}	
	}

	visited[x][y] = false;
	return result;
}


int main() {

	

	sc1(n);

	FOR(i, 0, n) {
		FOR(j, 0, n) {
			sc1(graph[i][j]);
		}
	}

	if(!graph[0][0]) pr1(ways(0, 0));
	else pr1(0LL);

	return 0;
}














#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cmath>
#include <iostream>
#include <set>
#include <fstream>
#include <string>
#include <vector>
#include <bits/stdc++.h>

using namespace std;
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s); i>=(e); i--)
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define debug(args...) {vector<string> _v = split(#args, ','); err(_v.begin(), args); puts("");}
#define LL long long
#define ULL unsigned long long
#define eps 1e-9
#define pi acos(-1.0)
#define df(s) {freopen("s.in", "r", stdin); freopen("s.out", "w", stdout);}
LL max(LL a,LL b){if (a>b){return a;} else {return b;}}
LL min(LL a,LL b){if (a<b){return a;} else {return b;}}

vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c))
		v.emplace_back(x);
	return move(v);
}

void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << ", ";
	err(++it, args...);
}

template<typename T>
struct number_iterator : std::iterator<random_access_iterator_tag, T>{
	T v;
	number_iterator(T _v) : v(_v) {}
	operator T&(){return v;}
	T operator *() const {return v;}
};
template <typename T>
struct number_range {
	T b,e;
	number_range(T b, T e):b(b),e(e){}
	number_iterator<T> begin(){return b;}
	number_iterator<T> end(){return e;}
};

template<typename T> number_range<T> range(T e) {return number_range<T>(1, e + 1);}

template<typename T> number_range<T> range(T b, T e) {return number_range<T>(b, e + 1);}

int a[16][16], n, m;
int f[16];
int res;

int c(int id){
	if (id > n){
		res++;
		return 0;
	}
	c(id + 1);
	bool ok = true;
	FOE(j, 1, id) if (f[j] && a[j][id]) ok = false;
	if (ok){
		f[id] = 1;
		c(id + 1);
		f[id] = 0;
	}
}

void solve(){
	res = 0;
	scanf("%d", &n); 
	FOE(i, 1, n) FOE(j, 1, n) a[i][j] = 0;
	scanf("%d", &m);
	FOE(i, 1, m){
		int xy, yx;
		scanf("%d%d", &xy, &yx);
		a[xy][yx] = a[yx][xy] = 1;
	}
	FOE(i, 1, n) f[i] = 0;
	c(1);
	printf("%d\n", res - 1);
}

int main(){
	int t;
	scanf("%d", &t);
	while (t--) solve();
    return 0;
}

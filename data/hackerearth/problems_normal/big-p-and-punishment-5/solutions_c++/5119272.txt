#include<bits/stdc++.h>
using namespace std;
bool visited[100000];
list<int> adj[100000];
//int s=0;
int counts;

void dfs(int v){

    visited[v]=true;
    counts++;
    list<int>::iterator it;
    for(it=adj[v].begin();it!=adj[v].end();it++){
        if(!visited[*it]){
        dfs(*it);
    }
    }


}

int main(){
int nodes,edges;
int x,y;

int s;
set<int> req;
set<int>::iterator it1;
int t;
cin>>t;
while(t--){
counts=0;
cin>>nodes>>edges>>s;
for(int i=0;i<100000;i++){
    visited[i]=false;
}
for(int i=0;i<100000;i++){
    adj[i].clear();
}

for(int i=0;i<edges;i++){
    cin>>x>>y;
    //x--;
    //y--;
    adj[x].push_back(y);
    //adj[y].push_back(x);
}
int z;
for(int i=0;i<s;i++){
    cin>>z;
    if(!visited[z]){
    //counts=0;
    dfs(z);
    }
    //int x=counts;

}
cout<<counts<<endl;
//cout<<sum<<endl;
}
return 0;
}

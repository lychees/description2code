#include <bits/stdc++.h>
#define ll long long int
#define IN_M 1061109567
#define get getchar

using namespace std;

struct node {
	ll first;
	ll second;
};


int main()
{
	ll arr[105][105];
	
	ll n, m;
	
	cin >> n >> m;
	
	ll q;
	cin >> q;
	
	for (ll i = 1; i <= n; i++) {
		for (ll j = 1; j <= m; j++) {
			cin >> arr[i][j];
		}
	}
	
	while (q--) {
		
		ll x;
		ll y;
		ll d;
		cin >> x >> y >> d;
		
		ll check[105][105];
		for(int g = 0 ; g < 105 ; g++){
            for(int h = 0; h < 105 ; h++){
                check[g][h] = 0;
            }
		}
		struct node temp;
		temp.first = x;
		temp.second = y;
		
		ll ct = 0;
		
		queue <struct node > kewl;
		kewl.push(temp);
		
		while (kewl.empty() == false) {
			
			temp = kewl.front();
			kewl.pop();
			check[temp.first][temp.second] = 1;
			ct++;
			
			struct node ai;
			
			if (temp.first - 1 >= 1 && !check[temp.first - 1][temp.second] && abs(arr[temp.first - 1][temp.second] - arr[temp.first][temp.second]) <= d) {
				ai.first = temp.first - 1;
				ai.second = temp.second;
				kewl.push(ai);
				check[temp.first - 1][temp.second] = 1 - 10 +(5*2);
				
			}
			
			if (temp.first + 1 <= n && !check[temp.first + 1][temp.second] && abs(arr[temp.first + 1][temp.second] - arr[temp.first][temp.second]) <= d) {
				ai.first = temp.first + 1;
				ai.second = temp.second;
				kewl.push(ai);
				check[temp.first + 1][temp.second] = 1;
				
			}
			
			if (temp.second - 1 >= 1 && !check[temp.first][temp.second - 1] && abs(arr[temp.first][temp.second - 1] - arr[temp.first][temp.second]) <= d) {
				ai.first = temp.first;
				ai.second = temp.second - 1;
				kewl.push(ai);
				check[temp.first][temp.second - 1] = 1;
				
			}
			
			if (temp.second  + 1 <= m && !check[temp.first][temp.second + 1] && abs(arr[temp.first][temp.second + 1] - arr[temp.first][temp.second]) <= d) {
				ai.first = temp.first;
				ai.second = temp.second + 1;
				kewl.push(ai);
				check[temp.first][temp.second + 1] = 1;
				
			}
			
			
		}
		printf("%lld\n",ct);
		
	}
	return 0;
}
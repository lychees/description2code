#include <iostream>
using namespace std;

#include <bits/stdc++.h>
using namespace std;
class bfs
{
    int n;
    vector<int> *adj;
    bool *visited;
    queue<int> q;
    int *values;
public:
    bfs(int n)
    {
        this->n=n;
        adj=new vector<int>[n+1];
        visited=new bool[n+1];
        values=new int[n+1];
    }
    void add_edge(int x,int y)
    {
        adj[x].push_back(y);
    }
    int do_bfs(int start)
    {
        for(int i=1;i<=n;i++)
        {
            visited[i]=false;
        }
        q.push(start);
        visited[start]=true;
        values[start]=0;
        while(!q.empty())
        {
            int s=q.front();
            q.pop();
            //cout<<s<< " ";
            vector<int>::iterator i;
            for(i=adj[s].begin();i!=adj[s].end();i++)
            {
                if(!visited[*i])
                {
                    visited[*i]=true;
                    values[*i]=values[s]+1;
                    q.push(*i);
                }
            }
        }
        return values[n];
    }
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,m;
		cin>>n>>m;
		bfs b(n);
		while(m--)
		{
			int x,y;
			cin>>x>>y;
			b.add_edge(x,y);
			b.add_edge(y,x);
		}
		int ans=b.do_bfs(1);
		cout<<ans<<endl;
	}
    return 0;
}

#include <iostream>
#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <climits>
#include <vector>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <algorithm>
#include <limits>
using namespace std;

typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<vi> vvi;
typedef vector<ii> vii;
typedef long long ll;
typedef vector<ll> vll;
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()

#define trace(x) cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define track(a) cerr << #a << ": "; for (auto tmp: a) cerr << tmp << " "; cerr << endl;
#define trackp(a) cerr << #a << ": "; for (auto tmp: a) cerr << "(" << tmp.first << ", " << tmp.second << "), "; cerr << endl;

#define MOD 1000000007
#define MAX 200050

int fibonacci[MAX + 5];
int prefix[MAX + 5];

void init()
{
    int a = 1;
    fibonacci[a] = 2;
    int b = 2;
    fibonacci[b] = 1;
    int c = a + b;
    while (c <= 200005) {
        fibonacci[c] = 1;
        a = b;
        b = c;
        c = a + b;
    }
    for (int i = 1; i < MAX; i++) {
        prefix[i] = prefix[i-1];
        prefix[i]+=fibonacci[i];
    }
}

int main()
{
    ios::sync_with_stdio(false);
    init();
    int t;
    scanf("%d", &t);
    while (t--) {
        int a, b;
        scanf("%d%d", &a, &b);
        if (a > b) swap(a, b);
        int count = 0;
        count = prefix[b] - prefix[a-1];
        /*for (int i = 0; i < 10; i++) {
            printf("%d ", prefix[i]);
        }*/
        //printf("\n");
        if (count & 1) {
            printf("INVALID\n");
        } else {
            printf("VALID\n");
        }
    }
}

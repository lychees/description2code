#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) (((n) >> (i)) & 1)
#define bitcount(n) __builtin_popcount(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
#define EPS 1e-9
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = 2 * acos((ld) 0);
ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
template<class T> void setmin(T& a, T val) {if (a > val) a = val;}
template<class T> void setmax(T& a, T val) {if (a < val) a = val;}
void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}
int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}

const int maxn = 50010;
const int magic = 250;
int n, q;
int a[maxn];
int cnt[magic][maxn];
ll x[maxn][magic];
int c[maxn];
int d[maxn];
int f[maxn];

ll calc(int l, int L, int R) {
	if (L > R) return 0;
	if (!L) return x[l][R];
	return x[l][R] - x[l][L - 1];
}

ll calc(int l, int r, int L, int R) {
	if (l > r) return 0;
	if (!l) return calc(r, L, R);
	return calc(r, L, R) - calc(l - 1, L, R);
}

void solve() {
	scanf("%d", &n);
	FOR(i, 0, n) {
		scanf("%d", a + i);
		cnt[i / magic][a[i]]++;
	}
	FOR(i, 0, magic) {
		FOR(j, 0, n) {
			x[j][i] += cnt[i][a[j]];
		}
	}
	FOR(i, 1, magic) {
		FOR(j, 0, maxn) {
			x[j][i] += x[j][i - 1];
		}
	}
	FOR(i, 0, magic) {
		FOR(j, 1, maxn) {
			x[j][i] += x[j - 1][i];
		}
	}
	scanf("%d", &q);
	while (q--) {
		int l1, r1, l2, r2; scanf("%d%d%d%d", &l1, &r1, &l2, &r2); l1--; r1--; l2--; r2--;
		int p = l1 / magic, q = r1 / magic;
		int u = l2 / magic, v = r2 / magic;
		ll res = calc(l1, r1, u + 1, v - 1);
		res += calc(l2, min(r2, (u + 1) * magic - 1), p + 1, q - 1);
		if (u < v) {
			res += calc(v * magic, r2, p + 1, q - 1);
		}
		vi vx;
		FOR(i, l1, min(r1, (p + 1) * magic - 1) + 1) {
			if (!f[a[i]]) {
				f[a[i]] = 1;
				vx.pb(a[i]);
			}
			c[a[i]]++;
		}
		if (p < q) {
			FOR(i, q * magic, r1 + 1) {
				if (!f[a[i]]) {
					f[a[i]] = 1;
					vx.pb(a[i]);
				}
				c[a[i]]++;
			}
		}
		FOR(i, l2, min(r2, (u + 1) * magic - 1) + 1) {
			if (!f[a[i]]) {
				f[a[i]] = 1;
				vx.pb(a[i]);
			}
			d[a[i]]++;
		}
		if (u < v) {
			FOR(i, v * magic, r2 + 1) {
				if (!f[a[i]]) {
					f[a[i]] = 1;
					vx.pb(a[i]);
				}
				d[a[i]]++;
			}
		}
		FOR(i, 0, sz(vx)) {
			res += c[vx[i]] * d[vx[i]];
			c[vx[i]] = d[vx[i]] = f[vx[i]] = 0;
		}
		printf("%lld\n", res);
	}
}

int main() {
//	ios_base::sync_with_stdio(0); cin.tie(0);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}

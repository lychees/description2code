#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (ll i = ll(a); i <= ll(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define MOD 1000000007
#define INF 2000000000 // 2 billion
// If you need to recall how to use memset:
#define MEMSET_INF 127 // about 2B
#define MEMSET_HALF_INF 63 // about 1B
//memset(dist, MEMSET_INF, sizeof dist); // useful to initialize shortest path distances
//memset(dp_memo, -1, sizeof dp_memo); // useful to initialize DP memoization table
//memset(arr, 0, sizeof arr); // useful to clear array of integers

ll fastexp(ll base,ll pow)
{
    if(pow==0)
        return 1;
    if(pow==1)
        return base;
    ll res=fastexp(base,pow/2);
    res=(res*res)%MOD;
    if(pow%2==1)
        res=(res*base)%MOD;
    return res;
}


int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    int t;s(t);
    while(t--)
    {
        int n;s(n);
        ll ans=0;
        ll ini=n;
        ll sqrtn = sqrt(n);
        ll m2=fastexp(2,MOD-2);
        ll sub=0;
        if((n/sqrtn)!=(sqrtn))
        {
            //ans =(ans+ (sqrtn+1)*(sqrtn))%MOD;
            sub = (-1)*(sqrtn+1)*(sqrtn);
            sqrtn++;
        }
        REP(i,1,sqrtn)
        {
            ans=(ans+(i*(n/i)))%MOD;

            ll no = ini - n/i;
      //      printf("%lld ",ans);
            ans += ((((no)*(((2*(ini))%MOD+((no-1)*(-1))%MOD)*(i-1))%MOD)%MOD)*m2)%MOD;
        //    printf("%lld\n",ans);
            ini = n/i;
            //printf("%lld %lld\n",ini,i);
        }
        ans = (ans + sub + MOD)%MOD;
        printf("%lld\n",ans);
    }
    return 0;
}


#include <bits/stdc++.h>
using namespace std;
int n,q,m,t,x,y,ST[700005],lazy[700005];
char s[200010];

void build(int node, int start, int end){
	if(start==end){
		if(s[start]=='>')
		ST[node]=1;
		return;
	}
	int mid = (start+end)/2;
	build(node<<1,start,mid);
	build((node<<1)+1,mid+1,end);
	ST[node]=ST[node<<1]+ST[(node<<1)+1];
}

void update(int node, int start, int end, int l, int r)
{
    if(lazy[node]==1){
    	ST[node]=(end-start+1)-ST[node];
    	if(start!=end){
    		lazy[2*node]=1-lazy[2*node];
    		lazy[2*node+1]=1-lazy[2*node+1];
    	}
    	lazy[node]=0;
    }
    if(end<l||start>r) return;
    if(start>=l&&end<=r){
    	ST[node]=(end-start+1)-ST[node];
    	if(start!=end){
    		lazy[2*node]=1-lazy[2*node];
    		lazy[2*node+1]=1-lazy[2*node+1];
    	}
    	return;
    }
    int mid=(start+end)/2;
    update(2*node,start,mid,l,r);
    update(2*node+1,mid+1,end,l,r);
    ST[node]=ST[2*node]+ST[2*node+1];
}
 
int query(int node, int start, int end, int l, int r)
{
	if(end<l||start>r) return 0;
    if(lazy[node]==1){
    	ST[node]=(end-start+1)-ST[node];
    	if(start!=end){
    		lazy[2*node]=1-lazy[2*node];
    		lazy[2*node+1]=1-lazy[2*node+1];
    	}
    	lazy[node]=0;
    }
    
    if(start>=l&&end<=r) return ST[node];
    int mid=(start+end)/2;
    int p1 = query(2*node, start, mid, l, r);
    int p2 = query(2*node+1, mid+1, end, l, r);
    return (p1 + p2);
}
 
int main()
{
    cin>>n>>q;
    scanf("%s",s+1);
    build(1,1,n-1);
    while(q--){
        cin>>t>>x>>y;
        if(t==2){
        	if(x>y){
            printf("%d\n",query(1,1,n-1,y,x-1));
        	}else printf("%d\n",y-x-query(1,1,n-1,x,y-1));
        }
        else
        	update(1,1,n-1,x,y-1);
    }
    return 0;
}
#include <bits/stdc++.h>
using namespace std;

int dr[5] = { 0, 1, 0, -1, 0 };
int dc[5] = { 1, 0, -1, 0, 0 };
int rs, cs;
char f[22][51];

bool check(int r, int c, int t)
{
	if (r == 0 || r == rs - 1)
		return false;
	if ((rs - r) % 2)
		return f[r][(c + t) % cs] == 'V';
	return f[r][(c + cs - t) % cs] == 'V';
}

int main()
{
    int tt;
    for (scanf("%d", &tt); tt > 0; tt--)
    {
    	scanf("%d%d", &rs, &cs);
    	rs += 2;
    	int limit;
    	scanf("%d", &limit);
    	
    	for (int i = 0; i < rs; i++)
    		scanf("%s", f[i]);
    		
		pair<int, int> start, finish;
		for (int i = 0; i < cs; i++)
		{
			if (f[0][i] == 'G')
				finish = make_pair(0, i);
			if (f[rs - 1][i] == 'B')
				start = make_pair(rs - 1, i);
		}	
		
		queue<pair<int, int>> q;
		q.push(start);
		int iter = 0;
		bool saved = false;
		bool visited [rs][cs][cs];
		memset(visited, 0, sizeof visited);
		visited[start.first][start.second][0] = true;
		while (!saved && q.size() > 0 && iter < limit + 1)
		{
			iter++;
			int next = iter % cs;
			queue<pair<int, int>> nq;
			while (q.size() > 0)
			{
				if (q.front() == finish)
				{
					saved = true;
					break;
				}
				int r = q.front().first;
				int c = q.front().second;
				q.pop();
				
				for (int k = 0; k < 5; k++)
				{
					int nr = r + dr[k];
					int nc = c + dc[k];
					if (nr < 0 || nr == rs || nc < 0 || nc == cs ||
						visited[nr][nc][next] || check(nr, nc, next))
						continue;
					visited[nr][nc][next] = true;
					nq.push(make_pair(nr, nc));
				}
			}
			q = nq;
		}
		
		if (saved)
			printf("SUCCESS IN %d SECOND(S).\n", iter - 1);
		else
			puts("SOUP BOY.");
    }
    
    return 0;
}

#!/usr/bin/python
class Hello:
    def __init__(self):
        ini = raw_input()
        self.rows, self.cols, self.qs = tuple(ini.split())
        self.rows = int(self.rows)
        self.cols = int(self.cols)
        self.qs = int(self.qs)

    def iterate(self, x, y):
        _direct = {'u': (x-1, y), 'd': (x+1, y), 'l': (x, y-1), 'r': (x, y+1)}
        if x > 0 and self.flag[x-1].get(y) is None:
            _flag = self.mark(x, y, _direct['u'])
            if _flag:
                self.iterate(x-1, y)
        if x < (self.rows-1) and self.flag[x+1].get(y) is None:
            _flag = self.mark(x, y, _direct['d'])
            if _flag:
                self.iterate(x+1, y)
        if y > 0 and self.flag[x].get(y-1) is None:
            _flag = self.mark(x, y, _direct['l'])
            if _flag:
                self.iterate(x, y-1)
        if y < (self.cols-1) and self.flag[x].get(y+1) is None:
            _flag = self.mark(x, y, _direct['r'])
            if _flag:
                self.iterate(x, y+1)

    def mark(self, x, y, direct):
        tx, ty = direct
        if self.flag[tx].get(ty) is not None:
            return False
        if abs(self.grid[x][y] - self.grid[tx][ty]) <= self.d:
            self.flag[tx][ty] = True
            return True
        return False

    def run(self):
        self.grid = {}
        for row in list(range(self.rows)):
            self.grid[row] = {}
            inp = raw_input()
            inp = inp.split()
            for col in list(range(self.cols)):
                self.grid[row][col] = int(inp[col])

        for q in list(range(self.qs)):
            _inp = raw_input()
            _inp = _inp.split()
            row, col, self.d = tuple(_inp)
            row = int(row)
            col = int(col)
            if row > self.rows or col > self.cols:
                return 1
            self.d = int(self.d)
            self.flag = {}
            for i in list(range(self.rows)):
                self.flag[i] = {}
            self.flag[row-1][col-1] = True
            self.iterate(row-1, col-1)
            count = 0
            for i in list(range(self.rows)):
                count += self.flag[i].values().count(True)
            print(count)
        return 0


obj = Hello()
ret = obj.run()

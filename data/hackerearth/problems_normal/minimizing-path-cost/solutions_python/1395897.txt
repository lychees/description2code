def mincost(costs, stations, start, end):
	unvisited = {node: None for node in stations}
	visited = {}
	current = start
	currentDistance = 0
	unvisited[current] = currentDistance

	while True:
	    for neighbour, distance in costs[current].items():
	        if neighbour not in unvisited: continue
	        newDistance = currentDistance + distance
	        if unvisited[neighbour] is None or unvisited[neighbour] > newDistance:
	            unvisited[neighbour] = newDistance
	    visited[current] = currentDistance
	    del unvisited[current]
	    if not unvisited or current == end : break
	    candidates = [node for node in unvisited.items() if node[1]]
	    current, currentDistance = sorted(candidates, key = lambda x: x[1])[0]

	return visited[end]


nm = raw_input().split(' ')
n = int(nm[0])
m = int(nm[1])

costs = {}

stations_ = raw_input()
stations = stations_.split(' ')


for station in stations:
	costs[station] = {}

for i in xrange (0, m):
	dlink = raw_input().split(' ')
	costs[dlink[0]][dlink[1]] = int(dlink[2])
	costs[dlink[1]][dlink[0]] = int(dlink[2])

n = int(raw_input())
out = {}

for i in xrange(0, n):
	input = raw_input().split(' ')
	out[i] = mincost(costs, stations, input[0], input[1])

for out_ in out:
	print out[out_]

/*********************************ENTER THE DRAGON**********************************/

#include <cstdio>
#include <iostream>
#include <cmath>
#include <string>
#include <list>
#include <vector>
#include <algorithm>
#include <functional>
#include <utility>
#include <set>
#include <map>
#include <complex>
#include <queue>
#include <stack>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string.h>
#include <cassert>
#include <climits>
using namespace std;

/************************************************************************************/

inline void multiply(long long (&F)[2][2], long long (&M)[2][2], int mod)
{
  long long x =  (F[0][0]*M[0][0]) + (F[0][1]*M[1][0]) ;
  long long y =  (F[0][0]*M[0][1]) + (F[0][1]*M[1][1]) ;
  long long z =  (F[1][0]*M[0][0]) + (F[1][1]*M[1][0]) ;
  long long w =  (F[1][0]*M[0][1]) + (F[1][1]*M[1][1]) ;
 
  F[0][0] = x % mod;
  F[0][1] = y % mod;
  F[1][0] = z % mod;
  F[1][1] = w % mod;
  return;
}

void power(long long (&F)[2][2], long long n, int mod)
{
  if( n == 0 || n == 1)
      return;
  long long M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2, mod);
  multiply(F, F, mod);
 
  if (n % 2)
     multiply(F, M, mod);
  return;
}

long long fib(long long n, int mod)
{
  long long F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-1, mod);
  return F[0][0] % mod;
}

int main()
{
	ios::sync_with_stdio(false);
    int t;
    cin >> t;
    while (t--) {
    	int n, k;
    	cin >> n >> k;
    	cout << fib(n + 1, (1 << k)) << endl;
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

#define LL_MAX 200000000000
#define MOD 1000000007
#define INF 1000000000
#define EPS 1e-14
#define PI 3.14159265358979

#define ll long long int
#define llu long long unsigned
#define ld long
#define mp make_pair
#define pb push_back
#define maX(a,b) ( (a) > (b) ? (a) : (b))
#define miN(a,b) ( (a) < (b) ? (a) : (b))
#define minelt(A) *min_element(b2e(A))
#define maxelt(A) *max_element(b2e(A))
#define s(a) scanf("%d",&a)
#define sl(a) scanf("%ld",&a)
#define pn(a) printf("%d\n",a)
typedef long long int64;
typedef vector<vector<int> > vvi;
typedef vector <ll> vi;
typedef pair <ll, ll> pii;
typedef pair <pii, ll> pii1;
typedef vector<bool> vb;
typedef vector<vector<bool> > vvb;
typedef vector<string> vs;
ll gcd(ll a, ll b) {if (a == 0 || b == 0) return max(a,b); if (b % a == 0) return a; return gcd(b%a, a);}
ll modpow(ll a,ll b) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
inline int mod(int64 x, int m){if(x >= 0 && x < m)return x;x %= m;if(x<0)return x + m;return x;}
int min(int a, int b) { return (a > b)? a : b; }

// Returns the maximum value that can be put in a knapsack of capacity W
int knapSack(int W,int S, int wt[],int si[], int val[], int n)
{
   int i, w,s;
   int K[n+1][W+1][S+1];

   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
       for(s = 0;s<=S;s++)
       {
           if (i==0 || w==0||s==0)
               K[i][w][s] = 0;
           else if (wt[i-1] <= w && si[i-1]<=s)
                 K[i][w][s] = min(val[i-1] + K[i-1][w-wt[i-1]][s-si[i-1]],  K[i-1][w][s]);
           else
                 K[i][w][s] = K[i-1][w][s];
       }
   }
   }

   return K[n][W][S];
}
int main()
{
	long sum=0;
int N,E,T,i;
     s(N);s(E);s(T);
     int e[N],t[N],d[N];
     for(i=0;i<N;i++)
     s(e[i]);
     for(i=0;i<N;i++)
     s(t[i]);
     for(i=0;i<N;i++)
     {s(d[i]);sum+=d[i];}
      printf("%d", sum-knapSack(E,T,e,t,d,N));
	return 0;
}

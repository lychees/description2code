#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <fstream>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <limits>
#include <string.h>

#define pb push_back
#define mp make_pair


using namespace std;
typedef long long LL;

static struct IO {
char tmp[1 << 10];
 
// fast input routines
char cur;
 
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
inline char nextChar() { return cur = getc_unlocked(stdin); }
inline char peekChar() { return cur; }
 
inline operator bool() { return peekChar(); }
inline static bool isBlank(char c) { return (c < '-' && c); }
inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
inline IO& operator >> (char * buf) {
if (skipBlanks()) {
if (peekChar()) {
*(buf++) = peekChar();
while (!isBlank(nextChar())) *(buf++) = peekChar();
} *(buf++) = 0; } return *this; }
 
inline IO& operator >> (string & s) {
if (skipBlanks()) {	s.clear(); s += peekChar();
while (!isBlank(nextChar())) s += peekChar(); }
return *this; }
 
inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}
 
#define defineInFor(intType) \
inline IO& operator >>(intType & n) { \
if (skipBlanks()) { \
int sign = +1; \
if (peekChar() == '-') { \
sign = -1; \
n = nextChar() - '0'; \
} else \
n = peekChar() - '0'; \
while (!isBlank(nextChar())) { \
n += n + (n << 3) + peekChar() - 48; \
} \
n *= sign; \
} \
return *this; \
}
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
 
// fast output routines
 
//#define putChar(c) putc_unlocked((c), stdout)
inline void putChar(char c) { putc_unlocked(c, stdout); }
inline IO& operator << (char c) { putChar(c); return *this; }
inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
#define defineOutFor(intType) \
inline char * toString(intType n) { \
char * p = (tmp + 30); \
if (n) { \
bool isNeg = 0; \
if (n < 0) isNeg = 1, n = -n; \
while (n) \
*--p = (n % 10) + '0', n /= 10; \
if (isNeg) *--p = '-'; \
} else *--p = '0'; \
return p; \
} \
inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(long long)
 
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
#define ll long long

ll prime[1000007];
ll vt[1000007];
vector<ll> pp;
void sieve()
{
    memset(prime,1,sizeof(prime));
    memset(vt,0,sizeof(vt));
    prime[0]=0;
    prime[1]=0;
    for(int i=2;i*i<=1000001;i++)
    {
    	if(prime[i]){
        for(int j=i*i;j<=1000001;j+=i)
        {
            prime[j]=0;
        }}
    }
    for(int i=1;i<=1000001;i++)
    {
        vt[i]=vt[i-1];
        if(prime[i])
        {
            pp.push_back(i);
            vt[i]+=i;
        }
    }
}

bool isprime(ll number){
	if(number%2==0) return 0;
    bool is=true;
    for(int i=0;i<pp.size();i++)
    {
        ll tmp=pp[i];
        if(number%tmp==0)
        {
            is=false;
            break;
        }
    }
    return is;
}

void solve()
{
	
    int l,r;
    cin>>l>>r;
    if(r==1000000) cout<<"YES\n";
    else
    {
    ll tmp = vt[r]-vt[l-1];
    if(tmp <= 1000000)
    {
        if(prime[tmp]) cout<<"YES"<<"\n";
        else cout<<"NO\n";
    }
    else
    {
        if(isprime(tmp)) cout<<"YES"<<"\n";
        else cout<<"NO\n";
    }
    }
}

int main()
{
    sieve();
    int t;
    cin>>t;
    while(t--) solve();
}
/*
ID: ashish1610
PROG:
LANG: C++
*/
#include<bits/stdc++.h>
using namespace std;
#define ll				long long int
#define vi				vector<int>
#define vl				vector<ll>
#define	pii				pair<int,int>
#define pil				pair<int, ll>
#define pll				pair<ll, ll>
#define pli 			pair<ll, int>
#define pb(v, a)		v.push_back(a)
#define mp(a, b)		make_pair(a, b)
#define MOD				1000000007
#define rep(i, a, b)	for(i=a; i<=b; ++i)
#define rrep(i, a, b)	for(i=a; i>=b; --i)
#define si(a)			scanf("%d", &a)
#define sl(a)			scanf("%lld", &a)
#define pi(a)			printf("%d", a)
#define pl(a)			printf("%lld", a)
#define pn 				printf("\n")
ll pow_mod(ll a, ll b) {
	ll res = 1;
	while(b) {
		if(b & 1)
			res = (res * a) % MOD;
		a = (a * a) % MOD;
		b >>= 1;
	}
	return res;
}
ll dp[60];
void pre_compute() {
	dp[1] = 1;
	dp[2] = 3;
	for(int i = 3; i <= 55; ++i) {
		dp[i] = 2 * dp[i - 1] + 1;
	}
}
char solve(int n, ll k, int &cnt) {
	if(n == 1 && k == 1) {
		return 'G';
	} else if(n == 1) {
		return '#';
	} else if(n == 2 && k < 3) {
		return 'G';
	} else if(n == 2 && k == 3) {
		return 'C';
	} else if(n == 2) {
		return '#';
	}
	if(dp[n - 1] >= k) {
		return solve(n - 1, k, cnt);
	}
	if(dp[n - 1] + 1 == k) {
		return 'G';
	}
	cnt++;
	return solve(n - 1, 2 * dp[n - 1] + 2 - k, cnt);
}
int main() {
	pre_compute();
	int t;
	si(t);
	while(t--) {
		int n;
		si(n);
		ll k;
		sl(k);
		if(n == 1 && k == 1) {
			printf("G\n");
		} else if(n == 1) {
			printf("-1\n");
		} else if(n == 2 && k < 3) {
			printf("G\n");
		} else if(n == 2 && k == 3) {
			printf("C\n");
		} else if(n == 2) {
			printf("-1\n");
		} else if(dp[n] < k) {
			printf("-1\n");
		} else {
			int cnt = 0;
			char res = solve(n, k, cnt);
			if(cnt & 1) {
				if(res == 'G') {
					printf("C\n");
				} else {
					printf("G\n");
				}
			} else {
				if(res == '#') {
					printf("-1\n");
				} else {
					printf("%c\n", res);
				}
			}
		}
	}
	return 0;
}
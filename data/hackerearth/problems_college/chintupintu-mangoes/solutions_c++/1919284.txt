#include <bits/stdc++.h>
#define vec vector
#define sz(c) int(c.size())
#define FOR(i, a, b) for (int i = a; i < (b); ++i)
#define DOWN(i, a, b) for(int i = (a) - 1; i >= (b); --i)
using namespace std;
const char eol = '\n';
typedef long long int64;
typedef pair<int,int> pii;
typedef vec<int> vi;

int d;
unordered_map<int,int> gr;

int grundy(int h) {
  if (h <= d) return 0;
  if (gr.count(h)) return gr[h];

  int &res = gr[h];

  for (int i = 1; i * i < h; ++i) {
    if (h % i == 0) {
      int j = h / i;
      if (i >= d && j > 1 && (j % 2 == 0 || grundy(i) == 0)) return (res = 1);
      if (j >= d && i > 1 && (i % 2 == 0 || grundy(j) == 0)) return (res = 1);
    }
  }

  return (res = 0);
}

bool wins(int x, int h) {
  if (x % 2 == 0) return false;
  gr.clear();
  return grundy(h) != 0;
}

void gen() {
  srand(int(time(0)));
  int T = 10000;
  while (T--) {
    int x = rand() % int(1e9) + 1;
    int h = rand() % int(1e9) + 1;
    int D = rand() % int(1e9) + 1;
    cout << x << " " << h << " " << D << endl;
  }
}

void stress() {
  int x = rand() % int(1e9) + 1;
  int h = rand() % int(1e9) + 1;
  d = rand() % int(1e9) + 1;
  gr.clear();
  cout << x << " " << h << " " << d << " " << wins(x, h) << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout << fixed << setprecision(10);

  #ifdef STRESS
  srand(int(time(0)));
  while (true) stress();
  return 0;
  #endif

  //gen(); return 0;

  int T;
  cin >> T;
  while (T--) {
    int x, h;
    cin >> x >> h >> d;
    if (wins(x, h)) {
      cout << "Chintu" << eol;
    }
    else {
      cout << "Pintu" << eol;
    }
  }

  return 0;
}

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <memory.h>
#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <list>
#include <queue>
#define y1 vamdlsfmvldf
using namespace std;
#define mp make_pair
typedef long long ll;
const ll mod = 1000000009;
const int inf = (int)(1e9 + 7);
const double pi = 3.1415926535897932;
const int N = 305;
typedef unsigned long long LL;
string s;
string tmp;
int q;
int l, r;
ll dp[305][305][2];
int main(){
    cin >> tmp >> s;
    int n = tmp.size();
    memset(dp, 0, sizeof(dp));
    for(int i = 0; i < n; ++i){
        dp[i][i][tmp[i] - '0'] = 1;
    }
    for(int dlin = 2; dlin <= n; dlin++){
        for(int i = 0; i + dlin - 1 < n; ++i){
            int j = i + dlin - 1;
            for(int k = i; k < j; ++k){
                if(s[k] == 'a'){
                    dp[i][j][1] += (dp[i][k][1] * dp[k + 1][j][1]) % mod;
                    dp[i][j][0] += (dp[i][k][1] * dp[k + 1][j][0]) % mod + (dp[i][k][0] * dp[k + 1][j][0]) % mod + (dp[i][k][0] * dp[k + 1][j][1]) % mod;
                }
                if(s[k] == 'x'){
                    dp[i][j][1] += (dp[i][k][1] * dp[k + 1][j][0]) % mod + (dp[i][k][0] * dp[k + 1][j][1]) % mod;
                    dp[i][j][0] += (dp[i][k][1] * dp[k + 1][j][1]) % mod + (dp[i][k][0] * dp[k + 1][j][0]) % mod;
                }
                if(s[k] == 'o'){
                    dp[i][j][0] += (dp[i][k][0] * dp[k + 1][j][0]) % mod;
                    dp[i][j][1] += (dp[i][k][1] * dp[k + 1][j][0]) % mod + (dp[i][k][1] * dp[k + 1][j][1]) % mod + (dp[i][k][0] * dp[k + 1][j][1]) % mod;
                }
                dp[i][j][1] %= mod;
                dp[i][j][0] %= mod;
            }
        }
    }
    cin >> q;
    string tmp;
    //if(n > 10) while(true);
    while(q --> 0){
        cin >> l >> r >> tmp;
        l--, r--;
        cout << dp[l][r][tmp == "true"] % mod << "\n";
    }
    return 0;
}

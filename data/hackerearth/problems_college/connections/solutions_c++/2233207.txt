#include <iostream>
#include <set>
#include <vector>
#include <list>
#include <cstdlib>
#include <cstdio>
using namespace std;

#define MP(x,y) make_pair(x,y)
#define REP(a,b) for(int a=0;a<b;a++)
#define FOR(a,b,c) for(int a=b;a<c;a++)
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vi> vvi;

int n;
vvi G(100005);
bool visited[100005];
void addEdge(int from,int to)
{
   G[from].push_back(to);
   G[to].push_back(from);
}



void DFSUtil(int v, bool visited[])
{

    visited[v] = true;
    vi::const_iterator i;
    for(i = G[v].begin(); i != G[v].end(); ++i)
        if(!visited[*i])
        {
            DFSUtil(*i, visited);
        }
}

int main()
{

    ios::sync_with_stdio(false);
    cin>>n;
    int e,q,to,from;
    cin>>e;
    set<ii> s;
    for(int i=0;i<e;i++)
    {
        cin>>to>>from;
        addEdge(from,to);
        s.insert(MP(from,to));
        s.insert(MP(to,from));
    }
    cin>>q;
    REP(i,q)
    {
        cin>>to>>from;
        if(s.find(MP(to,from))!=s.end())
        {
            cout<<"Direct Connection\n";
            continue;
        }
        else
        {
            REP(j,n)
             visited[j]=false;
            DFSUtil(to,visited);
            if(visited[from]==true)
                cout<<"Indirect Connection\n";
            else
                cout<<"No Connection\n";

        }
    }
}


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <limits.h>
#include <vector>
#include <stdlib.h>
#include <algorithm>
#include <memory.h>
#include <string.h>
#include <math.h>
#include <string>
#include <algorithm>
#include <functional>
#include <cassert>
#include <map>
#include <set>
#include <list>
#include <iostream>

using namespace std;
typedef long long lli;
typedef vector<int> vi;
typedef vector<lli> vli;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef long double ld;

const int INF = 0x3f3f3f3f;
const lli LINF = 0x3f3f3f3f3f3f3f3f;

//#define _LOCAL_DEBUG_
#ifdef _LOCAL_DEBUG_
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
#define eprintf(...) 
#endif

lli m;
int n1, n2;
lli a[100], w[100];

void clear() {
}

void solve() {
	scanf("%lld", &m);
	scanf("%d%d", &n1, &n2);
	for (int i = 0; i < n1; i++) scanf("%lld", &a[i]);
	for (int i = 0; i < n2; i++) scanf("%lld", &w[i]);
	sort(a, a + n1);

	set<lli> ws;
	for (int mask = 0; mask < (1 << n2); mask++) {
		lli tmp = 0;
		for (int i = 0; i < n2; i++)
			if (mask >> i & 1)
				tmp += w[i];
		ws.insert(tmp);
	}

	set<lli>::iterator it;
	for (it = ws.begin(); it != ws.end(); it++) {
		lli wl = *it;
		lli amulusNeeded = m - wl;
		vli amulus;
		for (int i = n1 - 1; i >= 0; i--)
			if (amulusNeeded >= a[i]) {
				amulus.push_back(a[i]);
				amulusNeeded -= a[i];
			}
		if (amulusNeeded == 0) {
			reverse(amulus.begin(), amulus.end());
			printf("YES\n");
			for (int i = 0; i < amulus.size(); i++)
				printf("%lld ", amulus[i]);
			printf("\n");
			return;
		}
	}
	printf("NO\n");
}

int main() {
#ifdef _LOCAL_VAN
	freopen("in.txt", "r", stdin);
#endif
	int t;
	scanf("%d", &t);
	while (t--) {
		clear();
		solve();
	}
	return 0;
}
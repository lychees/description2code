#include <iostream>
using namespace std;
#define mp make_pair
#include <vector>
#include <algorithm>
#include <cassert>
typedef long long ll;
int main()
{
	int T; cin>>T;
	while(T--){
		int n,q;
		cin>>n>>q;
		vector<pair<ll,ll> > rangesIn(n);

		for(int i=0;i<n;i++){
			ll a,b;
			cin>>a>>b;
			rangesIn[i]=mp(a,b);
		}
		sort(rangesIn.begin(),rangesIn.end());
	//	for(int i=0;i<n;i++)
	//	cout<<rangesIn[i].first<<" "<<rangesIn[i].second<<endl;
		
		vector<pair<ll,ll> >ranges;
		for(int i=0;i<n-1;i++){
		if (rangesIn[i].second>=rangesIn[i+1].first){
			rangesIn[i+1].second=max(rangesIn[i+1].second,rangesIn[i].second);
			rangesIn[i].second=rangesIn[i+1].first-1;
		}
		if (rangesIn[i].second>=rangesIn[i].first){
			ranges.push_back(rangesIn[i]);
	//	cout<<rangesIn[i].first<<" "<<rangesIn[i].second<<endl;
		}
		}
		if (rangesIn[n-1].second>=rangesIn[n-1].first)
			ranges.push_back(rangesIn[n-1]);
	//	cout<<n<<" "<<ranges.size()<<endl;
		//assert(n==rangesIn.size());
		n=ranges.size();
				vector<ll> acc(n);
	ll last=0;
	for(int i=0;i<n;i++){
		last=last+ranges[i].second-ranges[i].first+1;
		acc[i]=last;
		assert(0<=last<=2.e18);
		}
		while(q--){
			ll k;
			cin>>k;
		vector<ll>::iterator it=	lower_bound(acc.begin(),acc.end(),k);
		if(it==acc.end())
		cout<<-1<<endl;
		else{
			ll taken=(it==acc.begin()?0:*(it-1));
			ll rest=k-taken;
			assert(ranges[it-acc.begin()].first+rest-1<=ranges[it-acc.begin()].second);
			cout<<ranges[it-acc.begin()].first+rest-1<<endl;
		}
		}
	}

    return 0;
}

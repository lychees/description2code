#include <cstdio>
#include <algorithm>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <string>
#include <string.h>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <numeric>
#include <cctype>
#define fi first
#define se second
#define rep(i,n) for(int i = 0; i < n; ++i)
#define rrep(i,n) for(int i = 1; i <= n; ++i)
#define drep(i,n) for(int i = n-1; i >= 0; --i)
#define gep(i,g,j) for(int i = g.head[j]; i != -1; i = g.e[i].next)
#define each(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define rng(a) a.begin(),a.end()
#define maxs(x,y) x = max(x,y)
#define mins(x,y) x = min(x,y)
#define pb push_back
#define sz(x) (int)(x).size()
#define pcnt __builtin_popcount
#define snuke srand((unsigned)clock()+(unsigned)time(NULL));
#define df(x) int x = in()
using namespace std;
typedef long long int ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
inline int in() { int x; scanf("%d",&x); return x;}
inline void priv(vi a) { rep(i,sz(a)) printf("%d%c",a[i],i==sz(a)-1?'\n':' ');}

const int MX = 100005, INF = 1000010000;
const ll LINF = 1000000000000000000ll;
const double eps = 1e-10;

// Mod int
const int mod = 1000000007;
struct mint{
  ll x;
  mint():x(0){}
  mint(ll x):x((x%mod+mod)%mod){}
  mint operator+=(const mint& a){ if((x+=a.x)>=mod) x-=mod; return *this;}
  mint operator-=(const mint& a){ if((x+=mod-a.x)>=mod) x-=mod; return *this;}
  mint operator*=(const mint& a){ (x*=a.x)%=mod; return *this;}
  mint operator+(const mint& a)const{ return mint(*this) += a;}
  mint operator-(const mint& a)const{ return mint(*this) -= a;}
  mint operator*(const mint& a)const{ return mint(*this) *= a;}
  bool operator==(const mint& a)const{ return x == a.x;}
};
//
typedef pair<int,mint> P;

// Segment tree (RMQ type)
struct seg {
  vector<P> d;
  int x2;
  seg(){}
  seg(int mx){ x2 = 1; while(x2 < mx) x2 <<= 1; d.resize(x2<<1,P(-10,1));}
  void up(P &p, P x) {
    if (p.fi < x.fi) {
      p = x;
    } else if (p.fi == x.fi) p.se += x.se;
  }
  void add(int i, P x){
    // for(i+=x2,d[i]=x,i>>=1;i;i>>=1) d[i] = max(d[i<<1],d[i<<1|1]); // replace!!
    for(i+=x2;i;i>>=1) {
      up(d[i],x);
    }
  }
  P get(int a, int b, int i=1, int l=0, int r=-1){
    if (r == -1) r = x2;
    if(a <= l && r <= b) return d[i];
    int c = (l+r)>>1; P res = P(-10,1);
    if(a < c) up(res,get(a,b,i<<1,l,c));
    if(c < b) up(res,get(a,b,i<<1|1,c,r));
    return res;
  }
};
//

int main() {
  df(n);
  vi a;
  rep(i,n) a.pb(in());
  seg s(MX), t(MX);
  s.add(0,P(0,1));
  t.add(0,P(0,1));
  rep(i,n) {
    if (a[i] > 0) {
      P p = s.get(0,a[i]);
      p.fi++;
      t.add(a[i],p);
    } else {
      a[i] *= -1;
      P p = t.get(0,a[i]);
      if (p.fi == -1) continue;
      p.fi++;
      s.add(a[i],p);
    }
  }
  P p = s.get(0,MX);
  s.up(p,t.get(0,MX));
  cout<<p.fi<<" "<<p.se.x<<endl;
  return 0;
}






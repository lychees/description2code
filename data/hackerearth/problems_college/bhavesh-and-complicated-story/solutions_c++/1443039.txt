#include <iostream>
using namespace std;
int freq[100001]; 
int sume[1000001]; 
void build (int start, int end, int node)
{
	if (start==end)
	{
		sume[node]=freq[start]; 
		return; 
	}
	build(start, (start+end)/2, 2*node); 
	build((start+end)/2+1, end, 2*node+1); 
	sume[node]=sume[2*node]+sume[2*node+1]; 
}
void update (int start, int end, int i, int node, int boo)
{
	if (start>i || end<i) return; 
	if (start==end)
	{
		if (boo)
		sume[node]--;
		else sume[node]++; 
		return; 
	}
	update (start, (start+end)/2, i, 2*node, boo);
	update ((start+end)/2+1, end, i, 2*node+1, boo); 
	sume[node]=sume[2*node]+sume[2*node+1]; 
}
int query (int start, int end, int i, int j, int node)
{
	if (start>j || end<i) return 0;
	if (start>=i && end<=j) return sume[node]; 
	return query(start, (start+end)/2, i, j, 2*node)+query((start+end)/2+1, end, i, j, 2*node+1); 
}
main()
{
    int a; cin >> a;
    for (int g=1;g<=a; g++)
    {
    	int b; cin >> b;
    	freq[b]++; 
    }
    build (1, 100000, 1); 
    int Q; cin >> Q;
    for (int g=0; g<Q; g++)
    {
    	int r; cin >> r;
    	if (r==0)
    	{
    		int d,e; cin >> d >> e; cout << query(1, 100000, d, e, 1) << '\n'; 
    	}
    	else if (r==1)
    	{
    		int d; cin >> d; 
    		update(1, 100000, d, 1, 1); 
    	}
    	else
    	{
    		int d; cin >> d;
    		update(1, 100000, d, 1, 0); 
    	}
    }
    return 0;
}

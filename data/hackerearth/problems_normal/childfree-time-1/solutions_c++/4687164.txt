#include <iostream>
#include <vector>
#include <utility>
#include <cmath>
#include <algorithm>
#define MAX 1000001

using namespace std;

int R;
int P;
bool vis[MAX];
long long ans = 0;

vector < pair<int, int> > adj[MAX];
vector < pair<int, int> > r_adj[MAX];

vector < int > topo;
long long dp[MAX];

void dfs(int s)
{
	vis[s] = true;
	for(int i=0; i< (int)adj[s].size(); i++)
	{
		if(!vis[adj[s][i].first])
		{
			dfs(adj[s][i].first);
		}
	}
	topo.push_back(s);

}

int main() {

	int r1, r2, t;
	cin >> R >> P;

	for(int i=1; i<= P; i++)
	{
		cin >> r1 >> r2 >> t;
		adj[r1].push_back(make_pair(r2,t));
		r_adj[r2].push_back(make_pair(r1,t));

	}

	for(int i=1; i<=R; i++) if(!vis[i]) dfs(i);

    reverse(topo.begin(),topo.end());

    for(int i=0; i<topo.size(); i++)
    {
        int r2 = topo[i];
        for(int j=0; j < r_adj[r2].size(); j++)
        {
           int r1 = r_adj[r2][j].first;
           int t = r_adj[r2][j].second;
           long long c = dp[r1] + 2 + t;
            if(dp[r2] < c)
            {
                dp[r2] = c;
            }
        }
    }

    ans = *(max_element(dp, dp+topo.size()+1));
    cout << ans ;

	return 0;
}

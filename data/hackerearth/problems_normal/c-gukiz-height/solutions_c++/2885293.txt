#include <bits/stdc++.h>
using namespace std;

long long arr[100001], H, N;

long long getG(long long d){
	return H-((d*(d+1))/2);
}

long long getH(long long d){
	long long q=d/N, r=d%N, ans=0;
	ans += q*arr[N-1];
	if(r) ans += arr[r-1];
	return ans;
}

pair<long long, long long> find(){
	long long d=1, g, h;
	if(getH(0)>=getG(0)) return make_pair(0, 0);
	g = getG(d);
	h = getH(d);
	while(h<g){
		d *= 2;
		g = getG(d);
		h = getH(d);
	}
	return make_pair(0, d);
}

long long search(long long l, long long h){
	if(h==1||h==0) return h;
	long long d, g, H;
	while(l<h){
		d = (l+h)/2;
		g = getG(d);
		H = getH(d);
		if(H>=g){
			h=d;
		}
		else{
			l=d+1;
		}
	}
	return l;
}

long long force(long long t){
	long long d;
	for(d=1;;d++){
		if(getH(d)>=getG(d)) break;
	}
	return d;
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	
	long long i, T, t=-1, d;
	pair<long long, long long> p;
	
	//cin >> T;
	//while(T--){
	cin >> N >> H;
	for(i=0;i<N;i++){
		cin >> arr[i];
	}
	
	for(i=1;i<N;i++){
		arr[i] += arr[i-1];
		if(arr[i]>=H&&t==-1) t=i;
	}
	if(H<0) cout << 0 << '\n';
	else if(t!=-1){
		cout << force(t) << '\n';
	}
	else{
		p = find();
		t = search(p.first, p.second);
		d = t-1;
		for(i=0;i<10000000;i++){
			if(getH(d)>=getG(d)){
				t=d;
			}
			d--;
			if(d<0) break;
		}
		cout << t << '\n';
		//cout << p.first << ' ' << p.second << '\n';
	}
	//}
	return 0;
}
#include<bits/stdc++.h>
#define ll long long 
#define PLL pair<ll,ll> 
#define MAX 1000000
#define MAX2 1000000000
#define INF 0x3f3f3f3f
using namespace std;

vector<PLL> adj[MAX];


void dijkstra(ll nodes,ll src)
{
	priority_queue<PLL,vector<PLL>,greater<PLL> > pq;
	pq.push(make_pair(0,src));
	vector<ll> dis(nodes+1,INF);
	dis[src]=0;
	
	while(!pq.empty())
	{
		ll x = pq.top().second;
		pq.pop();
		for(ll i=0;i<adj[x].size();i++)
		{
			ll u =	adj[x][i].second;
			ll weight = adj[x][i].first;
			
			if(dis[u]>weight + dis[x])
			{
				dis[u] = weight + dis[x];
				pq.push(make_pair(dis[u],u));
			}
		}
	}
	
	ll q,ans,x,y;
	cin>>q;
	
	while(q--)
	{
		cin>>x>>y;
		if(2*dis[x]>=y) cout<<"0"<<endl;
		else
		{
			ans = y - 2*dis[x];
			cout<<ans<<endl;
		}
	}
}

int main()
{
	ll t,edges,nodes,weight,x,y,q;
	cin>>t;
	
	while(t--)
	{
		cin>>nodes>>edges;
		for(ll i=0;i<MAX;i++) adj[i].clear();
		
		for(ll i=0;i<edges;i++)
		{
			cin>>x>>y>>weight;
			adj[x].push_back(make_pair(weight,y));
			adj[y].push_back(make_pair(weight,x));
		}

		dijkstra(nodes,1);
	}
	return 0;
}
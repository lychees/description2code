#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<ll, ll> pll;
typedef vector<ll> vi;
typedef vector<ll> vll;

#define X first
#define Y second
#define rep(i,n) for(ll i=0; i<(n); i++)
#define repp(i,a,b) for(ll i=a; i<=(b); i++)
#define rep2(i,b,a) for(ll i=b; i>=(a); i--)
#define fill(a,val) memset(a, (val), sizeof a)
#define mp make_pair
#define pb push_back
#define all(c) (c).begin(), (c).end()
#define uni(c) sort(all(c));c.resize(distance(c.begin(), unique(all(c))))
#define io ios_base::sync_with_stdio(false);cin.tie(NULL);
#define l_b(v,i) lower_bound(v.begin(),v.end(),i)-v.begin();
#define u_b(v,i) upper_bound(v.begin(),v.end(),i)-v.begin();
#define IO(input_file_name) ifstream cin(input_file_name);ofstream cout("output.txt")
ll mod= 1e9 + 7;

ll n,k;
map <ll,ll> dad,rnk;

ll m_p(ll base, ll exponent)
{  ll modulus=mod;
    ll result = 1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = (result * base) % modulus;
        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }
    return result;
}




ll root(ll v)
{
    if (dad.find(v)==dad.end() || v == dad[v]) return v;
    return dad[v] = root(dad[v]);
}
void merge(ll v1, ll v2)
{
    v1 = root(v1), v2 = root(v2);
    if (v1 == v2) return;
    
    if (rnk[v1] < rnk[v2]) swap(v1, v2);
    dad[v2] = v1;
    rnk[v1]+=rnk[v2];
}


int main()
{   io;
  
cin>>n>>k;
ll ans=m_p(2,n);
while(k--){
    ll x,y;
    cin>>x>>y;
    x--;
    if(root(x)!=root(y)){
        merge(x,y);
        ans*=(mod+1)/2;
        ans%=mod;
    }
    cout<<ans<<endl;
    
}

    return 0;

}

nmq = raw_input()
nmq_list = map(int, nmq.split())
n = nmq_list[0]
m = nmq_list[1]
q = nmq_list[2]
matrix = []


class cordinates():
    def __init__(self, x, y):
        self.x = x
        self.y = y


cordinate_list = []
nomore = True  # binary flag to limit search space
control_pointer = 0
if not (1 <= n <= 100):
    n = 0
if not (1 <= m <= 100):
    m = 0
if not (1 <= q <= 100):
    q = 0
for row in range(0, n):
    column = raw_input()
    matrix.append(map(int, column.split()))


while q > 0:
    xyd = raw_input()
    xyd_list = map(int, xyd.split())
    x = xyd_list[0]
    y = xyd_list[1]
    d = xyd_list[2]

    if not (1 <= x <= n) and not (1 <= y <= m) and not (1 <= d <= 100000):
        nomore = False


# colouring
    cordinate_list.append(cordinates(x-1, y-1))

    while nomore:
        if control_pointer < len(cordinate_list):
            temp_cord = cordinate_list[control_pointer]

        else:
            nomore = False
            continue
        # up
        if temp_cord.x-1 >= 0 and not (any(temp.x == temp_cord.x-1 and temp.y == temp_cord.y for temp in cordinate_list)) and (
                abs(matrix[temp_cord.x][temp_cord.y] - matrix[temp_cord.x-1][temp_cord.y])) <= d:
            cordinate_list.append(cordinates(temp_cord.x-1, temp_cord.y))
            # print "up"
        # down
        if temp_cord.x+1 < n and not (any(temp.x == temp_cord.x+1 and temp.y == temp_cord.y for temp in cordinate_list)) and (
                abs(matrix[temp_cord.x][temp_cord.y] - matrix[temp_cord.x+1][temp_cord.y])) <= d:
            cordinate_list.append(cordinates(temp_cord.x+1, temp_cord.y))
            # print "down"
        # right
        if temp_cord.y+1 < m and not (any(temp.x == temp_cord.x and temp.y == temp_cord.y+1 for temp in cordinate_list)) and (
                abs(matrix[temp_cord.x][temp_cord.y] - matrix[temp_cord.x][temp_cord.y+1])) <= d:
            cordinate_list.append(cordinates(temp_cord.x, temp_cord.y+1))
            # print "right"
        # left
        if temp_cord.y-1 >= 0 and not (any(temp.x == temp_cord.x and temp.y == temp_cord.y-1 for temp in cordinate_list)) and (
                abs(matrix[temp_cord.x][temp_cord.y] - matrix[temp_cord.x][temp_cord.y-1])) <= d:
            cordinate_list.append(cordinates(temp_cord.x, temp_cord.y-1))
            # print "left"
        control_pointer += 1
    print len(cordinate_list)
    q -= 1
    cordinate_list = []
    nomore = 1
    control_pointer = 0

#include <bits/stdc++.h>
using namespace std;

struct node{
	int x;
	int c;
	int w;
};

class cmp
{
	public:
	bool operator() (const node &x, const node &y) const{
		return x.w > y.w;
	}
};

bool cmpc(node x, node y){
	return x.w < y.w;
}

int main()
{
	int n, m;
	cin >> n >> m;
	vector<node> v[n];
	int x, y, c;
	for(int i = 0; i < m; i++){
		scanf("%d%d%d", &x, &y, &c);
		node temp;
		temp.x = y-1;
		temp.w = c;
		v[x-1].push_back(temp);
		temp.x = x-1;
		v[y-1].push_back(temp);
	}

	for(int i = 0; i < n; i++){
		sort(v[i].begin(), v[i].end(), cmpc);
	}
	bool visited[n];
	memset(visited, 0, sizeof visited);
	priority_queue<node, vector<node>,  cmp> pq;
	node temp;
	temp.x = 0;
	temp.w = 0;
	temp.c = 0;
	pq.push(temp);
	long long ans = 0;
	while(!pq.empty()){
		node temp = pq.top();
		//cout << temp.x+1 << " " << temp.w << endl;
		pq.pop();
		if (! visited[temp.x]){
			ans += temp.w;
			visited[temp.x] = true;
			int len = v[temp.x].size();
			for(int i = 0; i < len; i++){
				if (!visited[v[temp.x][i].x]){
					pq.push(v[temp.x][i]);
				}
			}
		}
	}
	
	cout << ans;
	
}

/* GG */

#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

#define f first
#define s second

#define pb push_back
#define mp make_pair

using namespace std;

typedef pair<int, int> pii;
typedef long long ll;

const double EPS = 1e-9;
const double PI = acos(-1);

const int MAXN = (int) 1e5 + 7;
const int MOD = (int) 1e9 + 7;

int lcm;
int target[16];

bool is_prime(int x) {
  if (x < 2) return false;
  for (int i = 2; i * i <= x; i++)
    if (x % i == 0)
      return false;
  return true;
}

vector<ll> all;
int total;

void gen(int len, int mod, int last, bool flag, ll val = 0) {
  if (len < 15) {
    for (int put = (len == 0); put < 10; put++) {
      int new_mod = (mod * 10 + put) % lcm;
      if (new_mod % (len + 1) == target[len]) {
        gen(len + 1, new_mod, put, flag | (len > 0 && is_prime(last * 10 + put)), val * 10 + put);
      }
    }
  }
  if (len > 1 && flag) 
    all.pb(val);
}

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  #endif

  lcm = 1;
  for (int i = 1; i <= 15; i++) {
    lcm = lcm / __gcd(lcm, i) * i;
  }

  for (int i = 0; i < 15; i++) {
    cin >> target[i];
  }
  gen(0, 0, 0, 0);
  sort(all.begin(), all.end());
  
  int n; cin >> n;
  while (n--) {
    ll l, r;
    cin >> l >> r;
    cout << upper_bound(all.begin(), all.end(), r) - lower_bound(all.begin(), all.end(), l) << "\n";
  }

  return 0;
}
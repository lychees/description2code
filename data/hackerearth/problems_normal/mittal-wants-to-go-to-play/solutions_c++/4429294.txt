#include <bits/stdc++.h>
#define INFI 1e6
#define mp make_pair
#define pb push_back
#define ff first.first
#define fs first.second
#define s  second
#define f  first
#define WHITE 0
#define GREY  1
#define BLACK 2
using namespace std;
typedef pair<long,long> pi;
typedef pair<pair<long,long>,long> ppi;
const int MAXN=(int)1e4+3;
long dist[MAXN];
vector< vector<pi> > graph;
void dijk(int start){
	priority_queue<pi,vector<pi>,greater<pi> > pq;
	pq.push(mp(0,start));
	dist[start]=0;
	while(!pq.empty()){
		pi tp=pq.top();
		pq.pop();
		long d=tp.f;
		long v=tp.s;
		if(d<=dist[v]){
			for(int i=0;i<graph[v].size();i++){
				if(dist[graph[v][i].f]  >  (dist[v]+graph[v][i].s)){
					dist[graph[v][i].f]=dist[v]+graph[v][i].s;
					pq.push(mp(dist[graph[v][i].f],graph[v][i].f));
				}
			}
		}
	}
}
int main(){
	int T;
	cin>>T;
	while(T--){
		int N,M;
		cin>>N>>M;
		graph.clear();
		graph.resize(N+1);
		for(int i=0;i<M;i++){
			int x,y,c;
			cin>>x>>y>>c;
			graph[x].pb(mp(y,c));
			graph[y].pb(mp(x,c));
		}
		memset(dist,INFI,sizeof(dist));
		dijk(1);

		int Q;
		cin>>Q;
		while(Q--){
			int house,K;
			cin>>house>>K;
			cout<<max(0,K-(2*(int)dist[house]))<<endl;
		}
	}


	return 0;
}
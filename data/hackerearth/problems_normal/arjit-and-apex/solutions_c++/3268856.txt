#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
set<int> s[10001];
map<int,int> m;
pair<int,int> neww[100000];
pair<int,int> old[100000];
int main() {
	int t;
	cin >> t;
	int M,N,i,j,k;
	int gp,gc;
	while(t--){
		m.clear();
		for(i = 0; i <= 10000; i++)
			s[i].clear();
		cin >> M >> N; // M are the new ppl, N are the old ppl
		gp = gc = 0;
		//messed up the input :( wrote code thinking M is no of old ppl and N is no of new ppl
		for(i = 0; i < M; i++)
			cin >> neww[i].first >> neww[i].second;
		for(i = 0; i < N; i++)
			cin >> old[i].first >> old[i].second;
		
		for(i = 0; i < N; i++){
			j = old[i].first;
			k = old[i].second;
			//cin >> j >> k;
			s[j].insert(k);
		}
		for(i = 0; i < M; i++){
			j = neww[i].first;
			k = neww[i].second;
			//cin >> j >> k;
			auto it = s[j].lower_bound(k);
			if(it != s[j].end() && *it == k){ //exactly matched
				gp++;
				gc++;
				s[j].erase(it);
				continue;
			}
			auto it2 = m.find(j);
			if(it2 == m.end())
				m.insert(make_pair(j,1));
			else
				it2->second++;
		}
		cin >> j >> k; //G and H
		for(auto it = m.begin(); it != m.end(); it++){
			//cout << it->second << "," << s[it->first].size() << endl;
			gp += std::min(it->second, (int)s[it->first].size());
		}
		//cout << gp << " " << gc << "\n";
		if(gp >= j && gc >= k)
			cout << "Great";
		else if(gp >= j)
			cout << "Good";
		else
			cout << ":(";
		cout << "\n";
	}
	return 0;
}
#include <bits/stdc++.h>
using namespace std;
#define REP(i,n) for (int i = 1; i <= n; i++)
using namespace std;
typedef long long unsigned llu;
typedef vector< vector<llu> > matrix;
const llu MOD = 1000000007;
const int K = 2;
// computes A * B
matrix mul(matrix A, matrix B)
{
    matrix C(K+1, vector<llu>(K+1));
    REP(i, K) REP(j, K) REP(k, K)
        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
    return C;
}

// computes A ^ p
matrix pow(matrix A,llu p)
{
    if (p == 1)
        return A;
    if (p % 2)
        return mul(A, pow(A, p-1));
    matrix X = pow(A, p/2);
    return mul(X, X);
}

// returns the N-th term of Fibonacci sequence
llu fib(llu N)
{
    // create vector F1
    vector<llu> F1(K+1);
    F1[1] = 2;
    F1[2] = 7;

    // create matrix T
    matrix T(K+1, vector<llu>(K+1));
    T[1][1] = 0, T[1][2] = 1;
    T[2][1] =2, T[2][2] = 1;

    // raise T to the (N-1)th power
    if (N == 1)
        return 2;
    T = pow(T, N-1);

    // the answer is the first row of T . F1
    llu res = 0;
    REP(i, K)
        res = (res + T[1][i] * F1[i]) % MOD;
    return res;
}
int main() {
	int t;
	cin>>t;
	while(t--)
	{
		unsigned long long N;
		cin>>N;
        printf("%llu\n",fib(N)%MOD);	
	}
	return 0;
}
#include<iostream>
#include<vector>
#include <algorithm> 

using namespace std;
typedef unsigned long long UI;

class Trend
{
	UI ID;
	UI Old_Z;
	UI New_Z;
	long long Difference;

public:
	Trend(UI id, UI z_old, UI P, UI L, UI C, UI S)
	{
		ID = id;
		Old_Z = z_old;
		New_Z = P * 50 + L * 5 + C * 10 + S * 20;
		Difference = New_Z - Old_Z;
	}
	void print()
	{
		cout << ID << " " << New_Z;
	}
	bool compare(Trend b)
	{
		bool ret = false;
		if (this->Difference > b.Difference) return true;
		if (this->Difference == b.Difference)
		{
			if (this->ID > b.ID) return true;
		}
		return false;
	}
};

bool intTrend(Trend a, Trend b);

int main()
{
	vector<Trend> CollTrend;
	int count;
	cin >> count;
	for (int i = 0; i < count; i++)
	{
		int id;
		int z;
		int P, L, C, S;
		cin >> id >> z >> P >> L >> C >> S;
		Trend inpt(id, z, P, L, C, S);
		CollTrend.push_back(inpt);
	}
	sort(CollTrend.begin(), CollTrend.end(), intTrend);

	for (int i = 0; i < 5; i++)
	{
		CollTrend[i].print();
		cout << "\n";
	}
	return 0;
}


bool intTrend(Trend a, Trend b)
{
	return a.compare(b);
}
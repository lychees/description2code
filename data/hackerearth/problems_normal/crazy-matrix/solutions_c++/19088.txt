#include<iostream>

using namespace std ;

int check_1( int **arr , int size , int pos , int row ) ;
int check_2( int **arr , int size , int pos , int col ) ;

int main()
{

	int row ;
	int col ;
	int size ;
	int **arr ;
	int i = 0 ;
	int j = 0 ;
	
	//size input 
	cin >> size ;
	//memory allocation 	
	arr = new int * [size] ;
	for( col = 0 ; col < size ; col++ )
	{
		arr[col] = new int [size] ;
	}

	//input 
	for( row = 0 ; row < size ; row++ )
	{
		for( col = 0 ; col < size ; col++ )
		{
			cin >> arr[row][col] ;
		}
	}
	
	for( col = 0 ; col < size ; col++ )	//check path for 1 .. for top to bottom 
	{
		if( arr[0][col] == 1 )
		{
			//cout << "check_1 is called " << col << endl ;
			i = check_1( arr , size , col , 0 ) ;
			if( i == 1 )
			{
				
				break ; 
			}
		}
	}
	
	for( row = 0 ; row < size ; row++ )	//check path for 2 ... form lefr to rightmost 
	{
		if( arr[row][0] == 2 )	
		{
			j = check_2( arr , size , row , 0 ) ;
			if( j == 2 )
			{
				break ;
			}
		}
		
	}
	if( i == 1 && j ==2 )
	{
		cout << "AMBIGUOUS\n" ;		
	}
	else
	if( i == 1 )
	{
		cout << i << endl ;
	}else
	if( j == 2 )
	{
		cout << j << endl ;
	}else
	{
		cout << "0" << endl ;
	}

return 0 ;
}

int check_1( int **arr , int size , int pos , int row ) 
{
	int i = 0 ;
	if( size -1 == row )
	{
		return 1 ;			//control has reached bottom 
	}
	if( pos + size - 1 >= size * ( row + 1 ) )
	{
		if( arr[row + 1][ (pos + size - 1)%size ] == 1 )
		{
			
			i = check_1( arr , size , pos + size - 1 , row + 1 ) ;
			if( i == 1 )
			{
				return 1 ;
			}else
			{
				arr[row + 1][ (pos + size - 1)%size ] = 0 ;
			}
		}
	}
	i = 0 ;
	if( arr[row + 1][ pos%size ] == 1 )
	{
		i = check_1( arr , size , pos + size , row + 1 ) ;
		if( i == 1 )
		{
			return 1 ;
		}
		else
		{
			arr[row + 1][ pos%size ] = 0 ;
		}
	}
	i = 0 ;
	if( pos + size + 1 < size * ( row + 2 ) )
	{
		if( arr[ row + 1 ][ (pos + size + 1)%size ] == 1 )
		{
			i = check_1( arr , size , pos + size + 1 , row + 1 ) ;
			if( i == 1 )
			{
				return 1 ;
			}
			{
				arr[ row + 1 ][ (pos + size + 1)%size ] = 0 ;
			}
		}		
	}	
	
return -1 ;
}

int check_2( int **arr , int size , int pos , int col ) 
{
	int j = 0 ;
	int r , c ;

	if( col == size - 1 )
	{
		return 2 ;
	}
	
	if( pos > 0 )
	{
		if( arr[pos - 1][col + 1] == 2 )	
		{
			j = check_2( arr , size , pos - 1 , col + 1 ) ;
			if( j == 2 )
			{
				return 2 ;
			}
			else
			{
				arr[pos - 1][col + 1] = 0 ;
			}
		}	
	}
	if( arr[pos][col + 1] == 2 )
	{
		j = check_2( arr , size , pos , col + 1 ) ;
		if( j == 2 )
		{
			return 2 ;
		}
		else
		{
			arr[pos][col + 1] = 0 ;
		}
	}
	if( pos < size - 1 )
	{
		if( arr[pos + 1][ col + 1] == 2 )
		{
			j = check_2( arr , size , pos + 1 , col + 1 ) ;
			if( j == 2 )
			{
				return 2 ;
			}else
			{
				arr[pos + 1][ col + 1] = 0 ;
			}
		}
	}
return -1 ;
}


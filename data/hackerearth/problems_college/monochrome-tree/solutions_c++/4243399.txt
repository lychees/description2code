#include <bits/stdc++.h>
using namespace std;

bool vis[100001];
int bcolor[100001],gcolor[100001],dp[100001][2];
int n;
vector<int> graph[100001];

void dfs(int i)
{
	int samecolor=0,invcolor=0;
	vis[i]=1;
	for(int j=0;j<graph[i].size();j++)
		{
			if(!vis[graph[i][j]])
				{
					dfs(graph[i][j]);
					samecolor+=dp[graph[i][j]][0];
					invcolor+=dp[graph[i][j]][1];
				}
		}
	dp[i][0]=min((bcolor[i]!=gcolor[i])+samecolor,1+(bcolor[i]==gcolor[i])+invcolor);
	dp[i][1]=min((bcolor[i]!=gcolor[i])+1+samecolor,(bcolor[i]==gcolor[i])+invcolor);
}
int main()
{
	cin>>n;
	int x,y;
	int m=n-1;
	while(m--)
	{
		cin>>x>>y;
		graph[x].push_back(y);
		graph[y].push_back(x);
	}
	for(int i=1;i<=n;i++)
	cin>>bcolor[i];
	for(int i=1;i<=n;i++)
	cin>>gcolor[i];
	dfs(1);
	cout<<dp[1][0];
    return 0;
}

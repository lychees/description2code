#include <iostream>
#include<string.h>
#include<math.h>
using namespace std;
long long tree[400005];
int A[400005];
int B[4000005];
long long query(int idx)
{ long long res = 0;
 while ( idx > 0 )
    { res += tree[idx];
 idx -= (idx & (-idx));
 } return res;
 }
 int prime(long long l);
 void update(int idx)
 {
      while ( idx <= 200001)
        { tree[idx] += 1; idx += (idx &(-idx));
      }
      return;}
      int main()
      {
          int t=1,n;
          while ( t-- )
            { cin >> n;
          for ( int i = 0; i < n; i++ )

       cin >> A[i];
        for ( int i = 0; i < n; i++ )
            cin >> B[i];
        memset(tree, 0, sizeof(tree));
         long long ans = 0;
          for ( int i = n-1; i >= 0; i-- )
 {
      ans += query(A[i]-1);
      update(B[i]);
      }
      int y=prime(ans);
      if(y==0)
      {
          cout<<"SIMPLE INVERSION\n";
      }
      else
        cout<<"MAGIC INVERSION\n";
      }
      return 0;
      }
int prime(long long k)
{
    long long h=sqrt(k);
    for(long long i=2;i<=h;i++)
        if(k%i==0)
        return 0;
    return 1;
}

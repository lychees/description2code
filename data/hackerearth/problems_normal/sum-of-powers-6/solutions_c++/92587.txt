//Codeplay
//theycallhimavi : Template 3.00
#include <ctime>
#include <cctype>
#include <functional>
#include <numeric>
#include <utility>
#include <algorithm>
#include <cmath>
#include <stack>
#include <list>
#include <cassert>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <vector>
#include <cstring>
#include <string>
#include <queue>
#include <map>
#include <iterator>
#include <set>

using namespace std;

typedef long long LL;
typedef vector<long long> VL;
typedef vector<vector<long long> > VVL;
typedef vector<vector<int> > VVI;
typedef vector<int> VI;
typedef vector<long double> VD;
typedef vector<vector<long double> > VVD;
#define infs 987654
#define inf 987654321
#define infl 10000000000000000000ll
#define REP(k,a,b) for(long long k=(a); k < (b); ++k)
#define PER(k,a,b) for(long long k=(b-1); k >= (a); k--)
#define SUM(v) accumulate(v.begin(), v.end(), 0)
#define PROD(v) accumulate(v.begin(), v.end(), 1, multiplies<long long>())
#define MAX(v) max_element(v.begin(), v.end())
#define MIN(v) min_element(v.begin(), v.end())

LL POS(LL x) { if (x>0)  return x; else return 0; }

struct ele {
	long double z, y, x;
	ele() {}
	ele(long double z) : z(z), y(0), x(0) {}
	ele(long double z, long double y) : z(z), y(y), x(0) {}
	ele(long double z, long double y, long double x) : z(z), y(y), x(x) {}
	ele operator + (const ele &p) const { return ele(z + p.z, y + p.y, x + p.x); }
	ele operator - (const ele &p)  const { return ele(z - p.z, y - p.y, x - p.x); }
	ele operator * (long double con)     const { return ele(z*con, y*con, x*con); }
	ele operator / (long double con)     const { return ele(z / con, y / con, x / con); }
	bool operator<(const ele &rhs) const { return make_pair(z, make_pair(y, x)) < make_pair(rhs.z, make_pair(rhs.y, rhs.x)); }
	bool operator==(const ele &rhs) const { return make_pair(z, make_pair(y, x)) == make_pair(rhs.z, make_pair(rhs.y, rhs.x)); }
};

struct ele2 {
	long long z, y, x;
	ele2() {}
	ele2(long long z) : z(z), y(0), x(0) {}
	ele2(long long z, long long y) : z(z), y(y), x(0) {}
	ele2(long long z, long long y, long long x) : z(z), y(y), x(x) {}
	ele2 operator + (const ele2 &p) const { return ele2(z + p.z, y + p.y, x + p.x); }
	ele2 operator - (const ele2 &p)  const { return ele2(z - p.z, y - p.y, x - p.x); }
	ele2 operator * (long long con)     const { return ele2(z*con, y*con, x*con); }
	ele2 operator / (long long con)     const { return ele2(z / con, y / con, x / con); }
	bool operator<(const ele2 &rhs) const { return make_pair(z, make_pair(y, x)) < make_pair(rhs.z, make_pair(rhs.y, rhs.x)); }
	bool operator==(const ele2 &rhs) const { return make_pair(z, make_pair(y, x)) == make_pair(rhs.z, make_pair(rhs.y, rhs.x)); }
};

typedef vector<ele> VS;
typedef vector<vector<ele> > VVS;

map<int, int> mapp;
vector<int> divisors;
int main()
{
    int t;

    cin >> t;
	divisors.push_back(1);
	for (int i = 2; i <= 1000; i++) {
		if (mapp[i]) continue;
		int val = i*i;
		while (val <= 1000000) {
			divisors.push_back(val);
			mapp[val] = 1;
			val = val * i;
		}
	}
	//cout<<t<<endl;
    sort(divisors.begin(), divisors.end());
    while(t--) {
        int x;
        cin >> x;
        int lower = 0;
        int upper = divisors.size()-1;
        bool flag = false;
        while(lower <= upper && upper < divisors.size() && lower >= 0) {
            if(divisors[lower]+divisors[upper] == x) {
                flag = 1;
                cout << "Yes\n";
                break;
            }
            else if(divisors[lower]+divisors[upper] > x) {
                upper--;
            }
            else if(divisors[lower]+divisors[upper] < x) {
				lower++;
				upper++;
            }
        }
        if(flag==0) {
            cout << "No" << endl;
        }
    }
}

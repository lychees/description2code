#include <bits/stdc++.h>
using namespace std;

#define display(arr,s,e) for(unsigned long long i=s; i<=e; i++) cout<<arr[i]<<" ";
#define rep(i,s,e) for (i=s; i<=e; i++)
#define ull unsigned long long
#define ll long long
#define pb push_back
#define ri(x) scanf("%d",&x)
#define ri2(x,y) scanf("%d%d",&x,&y)
#define rll(x) scanf("%lld",&x)
#define rll2(x,y) scanf("%lld%lld",&x,&y)
#define pi(x) printf("%d\n",x)
#define pll(x) printf("%lld\n",x)
#define mset(arr,x) memset(arr,x,sizeof(arr))
#define md 1000000007


void multiply(ll F[2][2], ll M[2][2]);

void power(ll F[2][2], ll n);

/* function that returns nth Fibonacci number */
ll fib(ll n)
{
  ll F[2][2] = {{1,2},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-2);
  return (F[0][0]*7 + F[0][1]*2)%md;
}

/* Optimized version of power() in method 4 */
void power(ll F[2][2], ll n)
{
  if( n == 0 || n == 1)
      return;
  ll M[2][2] = {{1,2},{1,0}};

  power(F, n/2);
  multiply(F, F);

  if (n%2 != 0)
     multiply(F, M);
}

void multiply(ll F[2][2], ll M[2][2])
{
  ll x =  (((F[0][0]%md)*(M[0][0]%md)%md) + ((F[0][1]%md)*(M[1][0]%md))%md)%md;
  ll y =  (((F[0][0]%md)*(M[0][1]%md)%md) + ((F[0][1]%md)*(M[1][1]%md))%md)%md;
  ll z =  (((F[1][0]%md)*(M[0][0]%md)%md) + ((F[1][1]%md)*(M[1][0]%md))%md)%md;
  ll w =  (((F[1][0]%md)*(M[0][1]%md)%md) + ((F[1][1]%md)*(M[1][1]%md))%md)%md;

  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}

/* Driver program to test above function */
int main()
{
	ll t; rll(t);
	ll test;
	rep (test,0,t-1){
		ll a; rll(a);
		if (a==1) printf("2\n");
		else if (a==2) printf("7\n");
		else
		printf("%lld\n", fib(a)%md);
	}
  return 0;
}

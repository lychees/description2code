
/* Trico ------------------------> NIT Silchar

“All power is within you; you can do anything and everything.
Believe in that, do not believe that you are weak; do not believe that you are half-crazy lunatics,
as most of us do nowadays. You can do any thing and everything, without even the guidance
of any one. Stand up and express the divinity within you.”

 */
#include<bits/stdc++.h>
#define ll long long
#define pll pair<ll,ll>
#define vl vector<ll>
#define mod 1000000007
#define fori(z,n) for(int i=z;i<n;i++)
#define forj(z,n) for(int j=z;j<n;j++)
#define fork(z,n) for(int k=z;k<n;k++)
#define db(x) cout << (#x) << " = " << x << endl;
#define trico() int t;cin>>t ; while(t--)
#define CHECK_BIT(var,pos) ((var) & (1<<(pos)))
#define p_iter vector<pll>::iterator
#define l_iter vector<ll>::iterator
#define forstl(m) for(it=m.begin();it!=m.end();it++)
#define bitcnt(x) __builtin_popcountll(x)
const int nax = 1e6 + 5;
const int lax = 1e5 + 5;
const int pax = 2e5 + 5;
const int inf = 1e9 + 5;
#define sl(n) scanf("%I64d",&n)
#define pl(n) printf("%I64d",n)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
using namespace std;
static int u=0;
void f_case(){u++;cout<<"Case "<<u<<": ";}
//ll modPow(ll a,ll b,ll MOD) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
//ll modInverse(ll a){return modPow(a,MOD-2);}
char str[1005][1005];
bool visited[1000005];
int x[]={1,-1,0,0};
int y[]={0,0,-1,1};
int dist[nax];
vector<int> v[nax];
int main()
{
 //freopen("input.in", "r", stdin);
 int strt,end,n;
 cin>>n;
 fori(0,n)
 {

  forj(0,n) {
        cin>>str[i][j];
        if(str[i][j]=='S')
        {


          strt=i*n+j;
          str[i][j]='P';
        }
        if(str[i][j]=='E')
        {


            end=i*n+j;
            str[i][j]='P';
        }


  }
 }
 //cout<<strt<<" "<<end<<"\n";
 fori(0,n)
 {

     forj(0,n)
     {
         if(str[i][j]=='P')
         {
             if(i+1<n && str[i+1][j]=='P')
             {


             v[(i*n+j)].push_back((i+1)*n+j);
             v[((i+1)*n+j)].push_back((i)*n+j);
             }
               if(j+1<n && str[i][j+1]=='P')
             {


             v[(i*n+j)].push_back((i)*n+j+1);
             v[((i)*n+j+1)].push_back((i)*n+j);
             }
         }
     }
 }

 queue<int> q;
 for(int i=0;i<n*n;i++)
 {


    dist[i]=-1;
    visited[i]=false;
 }
 q.push(strt);
 dist[strt]=0;
 while(!q.empty())
 {
     int k=q.front();
     q.pop();
     if(!visited[k])
     {

         visited[k]=true;
         for(int i:v[k])
         {

           if(!visited[i])
           {


            q.push(i);
            if(dist[i]==-1)
                dist[i]=dist[k]+1;

           }
         }
     }
 }
 cout<<dist[end];




}


#include<bits/stdc++.h>
using namespace std;
int arr[100005];
int size1[100005];
void intialize()
{
    for(int i=1;i<=100005;i++)
    {
        size1[i]=1;
        arr[i]=i;
    }
}
bool find1(long long a,long long b)
{
    if(arr[a]==arr[b])
        return true;
    else
        return false;
}
long long root(long long i)
{
    while(i!=arr[i])
    {
        arr[i]=arr[arr[i]];
        i=arr[i];
    }
    return i;
}
long long union1(long long a,long long b)
{
    long long ans;
    if(size1[a] < size1[b])
    {
        arr[a]=arr[b];
        size1[b]+=size1[a];
        ans=size1[b];
    }
    else
    {
        arr[b]=arr[a];
        size1[a]+=size1[b];
        ans=size1[a];
    }
    return ans;
}
int main()
{
    int n,k,x,y;

    long long ans=0;
    cin>>n>>k;
    intialize();
    multiset <long long> mst;
    for(int i=1;i<=n;i++)
        mst.insert(1);
    multiset <long long>::iterator first;
    multiset <long long>::iterator last;
    while(k--)
    {
        cin>>x>>y;
        long long root_x=root(x);
        long long root_y=root(y);
        if(root_x == root_y)
        {
            if(mst.size()>1)
            {
                first=mst.begin();
                last=mst.end();
                last--;
                ans=(*last)-(*first);
            }
            else
                ans=0;
        }
        else
        {
            mst.erase(mst.find(size1[root_x]));
            mst.erase(mst.find(size1[root_y]));
            mst.insert(union1(root_x,root_y));
            if(mst.size()>1)
            {
                first=mst.begin();
                last=mst.end();
                last--;
                ans=(*last)-(*first);
            }
            else
                ans=0;
        }
        cout<<ans<<"\n";
    }
    return 0;
}

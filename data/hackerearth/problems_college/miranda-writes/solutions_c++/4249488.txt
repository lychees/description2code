#include <stdio.h>
#include <limits.h>
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int V,dist[405][405],mini=1000000000;
int minDistance(int dist[][405], bool sptSet[],int src)
{
	int min = 1000000000, min_index;
	for (int v = 1; v <= V; v++)
		if (sptSet[v] == false && dist[src][v] <= min)
			min = dist[src][v], min_index = v;
	return min_index;
}
void dijkstra(int graph[][405], int src)
{
	bool sptSet[V];
	for (int i = 1; i <=V; i++)
	dist[src][i] = 1000000000,sptSet[i] = false;
	dist[src][src] = 0;
	for (int count = 1; count <=V; count++)
	{
		int u = minDistance(dist, sptSet,src);
		sptSet[u] = true;
		for (int v = 1; v <=V; v++)
			if (!sptSet[v] && graph[u][v] && dist[src][u] != 1000000000
					&& (dist[src][u]+graph[u][v] < dist[src][v]))
				dist[src][v] = dist[src][u] + graph[u][v];
	}
}
int memo[265005][30];
int get_min(int v,int len,int iteration,int arr[],int bitmaska)
{
	int ans=1000000000,flag=0;
	if(memo[bitmaska][v]>=0)
		return memo[bitmaska][v];
	if(v==V && iteration>=len)
	{
		memo[bitmaska][v]=0;
		return (0);
	}
	else
	{
		for(int i=2;i<=len;i++)
		{
			if(!(arr[i]==V && iteration<len-1))
			{
			if(!(bitmaska &(1<<i)))
			{
				flag=1;
				ans=min(ans,dist[v][arr[i]]+get_min(arr[i],len,iteration+1,arr,(bitmaska|(1<<i))));
			}
		}
		}
		memo[bitmaska][v]=ans;
		return ans;
		}
}
int main()
{
	int m,k,graph[405][405],arr[30];
	cin >> V >> m >> k;
	for(int i=0;i<m;i++)
	{
		int x,y,z;
		cin >> x >> y >> z;
		graph[x][y]=z;
		graph[y][x]=z;
	}
	dijkstra(graph, 1);
	dijkstra(graph,V);
	arr[0]=0;
	arr[1]=1;
	arr[k+2]=V;
	for(int i=2;i<=k+1;i++)
	{
		int x;
		cin >> x;
		arr[i]=x;
		dijkstra(graph,x);
	}
	for(int i=0;i<265005;i++)
		{
			for(int j=0;j<405;j++)
				memo[i][j]=-1;
		}
	cout << get_min(1,k+2,1,arr,2) << '\n';
	return 0;
}

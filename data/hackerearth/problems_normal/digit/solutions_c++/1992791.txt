#include <bits/stdc++.h>
using namespace std;
long long a,b,k,p,q;
int digits[20];
long long dp[2][100500][160][2];
int digisum(long long x)
{
	int res=0;
	while (x)
	{
		res+=x%10;
		x/=10;
	}
	return res;
}
long long naive()
{
	long long res=0;
	for (long long x=k;x<=b;x+=k)
	{
		if (x<a)continue;
		int s=digisum(x);
		if (s>=p&&s<=q)
			++res;
	}
	return res;
}
long long solve(long long x,long long L,long long y)
{
	if (x==0)return 0;

	if (y>130)y=130;

	for (int i=0;i<=11;i++)
		for (int j=0;j<k;j++)
			for (int q=0;q<=y;q++)
				for (int flag=0;flag<=1;flag++)
					dp[i%2][j][q][flag]=0;

	for (int i=0;i<=14;i++)
	 digits[i]=0;

	for (int i=13;i>=0;--i)
	{
		digits[i]=x%10;
		x/=10;
		if (x==0)break;
	}
	dp[0][0][0][0]=1;
	for (int i=0;i<15;i++)
		{
		for (int j=0;j<k;j++)
			for (int q=0;q<=y;q++)
				for (int flag=0;flag<=1;flag++)
					dp[1^(i%2)][j][q][flag]=0;

		for (int j=0;j<k;j++)
			for (int q=0;q<=y;q++)
				for (int flag=0;flag<=1;flag++)
					if (dp[i%2][j][q][flag])
					for (int new_digit=0;new_digit<=9;new_digit++)
					{
						if (new_digit>digits[i]&&flag==0)
							break;
						if (new_digit+q>y)
							break;
						dp[(i+1)%2][(j*10+new_digit)%k][q+new_digit][flag|(new_digit<digits[i])]+=dp[i%2][j][q][flag];
					}
		}
	long long answ=0;

	for (int i=L;i<=y;i++)
	 answ+=dp[0][0][i][0]+dp[0][0][i][1];
	return answ;
}
int main(){

cin>>a>>b>>p>>q>>k;
if (k>=40000)
{
	cout<<naive()<<endl;
}
else
{
	long long res=solve(b,p,q)-solve(a-1,p,q);
	cout<<res<<endl;
}
return 0;}

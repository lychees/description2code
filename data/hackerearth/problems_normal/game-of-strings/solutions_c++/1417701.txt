#include <stdio.h>
#include <iostream>
#include <string.h>
#include <string>
#include<stdlib.h>

using namespace std;

int max(int a, int b);
  
  int L[5005][5005];
/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( string X, string Y, int m, int n )
{
   
   int i, j;
  
   /* Following steps build L[m+1][n+1] in bottom up fashion. Note 
      that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
   for (i=0; i<=m; i++)
   {
     for (j=0; j<=n; j++)
     {
       if (i == 0 || j == 0)
         L[i][j] = 0;
  
       else if (X[i-1] == Y[j-1])
         L[i][j] = L[i-1][j-1] + 1;
  
       else
         L[i][j] = max(L[i-1][j], L[i][j-1]);
     }
   }
    
   /* L[m][n] contains length of LCS for X[0..n-1] and Y[0..m-1] */
   return L[m][n];
}

string s;
string t;

int main ()
{
	int i;
	
	cin >> s >> t;
	
	i = 0;
	
	while (s [i] != '\0') {
		if (s [i] == 'a' || s [i] == 'i' || s [i] == 'o' || s [i] == 'e' || s [i] == 'u') {
			s.erase (i,1);
			i--;
		}
		i++;
	}
	
	i = 0;
	
	while (t [i] != '\0') {
		if (t [i] == 'a' || t [i] == 'i' || t [i] == 'o' || t [i] == 'e' || t [i] == 'u') {
			t.erase (i,1);
			i--;
		}
		i++;
	}
	//cout << s << " " << t << endl;
	char ss [2];
	int m = s.size ();
    int n = t.size ();
  
  printf("%d\n", lcs( s, t, m, n ) );
  
  return 0;
	
	
}

int max(int a, int b)
{
    return (a > b)? a : b;
}
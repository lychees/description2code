#include <iostream>
using namespace std;
#include<stdlib.h>

void Merge(int *A,int *L,int leftCount,int *R,int rightCount) {
	int i,j,k;
	i = 0; j = 0; k =0;

	while(i<leftCount && j< rightCount) {
		if(L[i]  < R[j]) A[k++] = L[i++];
		else A[k++] = R[j++];
	}
	while(i < leftCount) A[k++] = L[i++];
	while(j < rightCount) A[k++] = R[j++];
}

void MergeSort(int *A,int n) {
	int mid,i, *L, *R;
	if(n < 2) return;
	mid = n/2;  // find the mid index.

	// create left and right subarrays
	// mid elements (from index 0 till mid-1) should be part of left sub-array
	// and (n-mid) elements (from mid to n-1) will be part of right sub-array
	L = (int*)malloc(mid*sizeof(int));
	R = (int*)malloc((n- mid)*sizeof(int));

	for(i = 0;i<mid;i++) L[i] = A[i]; // creating left subarray
	for(i = mid;i<n;i++) R[i-mid] = A[i]; // creating right subarray

	MergeSort(L,mid);  // sorting the left subarray
	MergeSort(R,n-mid);  // sorting the right subarray
	Merge(A,L,mid,R,n-mid);  // Merging L and R into A as sorted list.
        free(L);
        free(R);
}

int main()
{
    int t;
    cin>>t;
    for(int z=0;z<t;z++)
    {
    	long long int n,x,y,cost=0;
    	cin>>n>>x>>y;
    	int a[n],b[n];
    	for(int i=0;i<n;i++)
    	{
    		cin>>a[i]>>b[i];
    	}
    	MergeSort(a,n);
    	MergeSort(b,n);
    	for(int i=0;i<n;i++)
    	{
    		if(a[i]>b[i])
    		{
    			int j=a[i]-b[i];
    			cost+=j*y;
    			
    		}
    			
    		else if(b[i]>a[i])
    		{
    			int j=b[i]-a[i];
    			cost+=j*x;
    		}
    			
    		else
    			cost+=0;
    	}
    	cout<<cost<<endl;
    }
    return 0;
}

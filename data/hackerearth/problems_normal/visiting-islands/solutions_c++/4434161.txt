//#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>
#include <string>
#include <cmath>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>

#define gc getchar_unlocked

using namespace std;

typedef long long        ll;
typedef pair<int, int>   pii;
typedef pair<int, pii>   piii;
typedef vector<int>      vi;
typedef vector<pii>      vii;
typedef vector<piii>     viii;

#define forup(a,b,c) for (int (a)=(b); (a)<(c); (a)++)
#define forn(a,b,c)  for (int (a)=(b); (a)<=(c); (a)++)
#define ford(a,b,c)  for (int (a)=(b); (a)>=(c); (a)--)
#define rep(i,n)     forup(i,0,n)
#define repn(i,n)    forn(i,1,n)
#define repd(i,n)    ford(i,n,1)
#define foreach(i,X) for(__typeof((X).begin()) i = (X).begin(); i != (X).end(); i++)
#define all(a)       a.begin(),a.end()

const int inf = numeric_limits<int>::max();
const ll linf = numeric_limits<ll>::max();

#define fi           first
#define se           second
#define pb           push_back
#define mp           make_pair

void fs(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

int n;
vi e1[1000000];
vi e2[1000000];
vi grp[1000000];
vi grpedges[1000000];
int seen1[1000000];
int seen2[1000000];
int seen3[1000000];
int seen4[1000000];
int parent[1000000];
int dp[1000000];
stack<int> stk;
int grpind=0;

void topodfs(int v)
{
    seen1[v]=1;
    foreach(it,e1[v]) if(!seen1[*it]) topodfs(*it);
    stk.push(v);
}

void sccdfs(int v)
{
    seen2[v]=1;
    grp[grpind].pb(v);
    parent[v]=grpind;
    foreach(it,e2[v]) if(!seen2[*it]) sccdfs(*it);
}

void connectgrps(int v)
{
    seen3[v]=1;
    foreach(it, e1[v])
    {
        if(parent[v]==parent[*it]) continue;
        else
        {
            grpedges[parent[v]].pb(parent[*it]);
            if(!seen3[*it])connectgrps(*it);
        }
    }
}

int calc(int g)
{
    if(dp[g]!=-1) return dp[g];
    int ans=grp[g].size();
    foreach(it, grpedges[g])
        ans+=calc(*it);
    dp[g]=ans;
    return ans;
}

int main()
{
    int t; cin>>t;
    while(t--)
    {
        cin>>n;

        rep(i,n)
        {
            e1[i].clear();
            e2[i].clear();
            grp[i].clear();
            grpedges[i].clear();
            dp[i]=-1;
            seen1[i]=0;
            seen2[i]=0;
            seen3[i]=0;
            seen4[i]=0;
            parent[i]=0;
            grpind=0;
        }

        rep(i,n)
        {
            int m; cin>>m;
            e1[i].pb(m);
            e2[m].pb(i);
        }

        rep(i,n) if(!seen1[i]) topodfs(i);

        while(!stk.empty())
        {
            int v=stk.top();
            stk.pop();
            if(!seen2[v])
            {
                sccdfs(v);
                grpind++;
            }
        }

        rep(i,n) if(!seen3[i]) connectgrps(i);

        int ans=0,ind=0;
        rep(i,grpind)
        {
            int sum=calc(i);
            if(sum>ans)
            {
                ans=sum;
                ind=i;
            }
            else if(sum==ans)
            {
                int min1=inf, min2=inf;
                foreach(it, grp[ind]) min1=min(min1, *it);
                foreach(it, grp[i])   min2=min(min2, *it);
                if(min2<min1) {ind=i;}
            }
        }
        int minind=inf;
        foreach(it, grp[ind]) if(*it<minind) minind=*it;
        cout<<minind<<endl;
    }
    return 0;
}
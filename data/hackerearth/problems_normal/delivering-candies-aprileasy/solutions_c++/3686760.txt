#include<bits/stdc++.h>
using namespace std;

#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define rep(i,a,n) for(__typeof(n) i=a;i<=n;++i)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair


const int INF = 100000000000 ;
vector<pair<int,int> > g[100005];
int n,m,s,k[100005];
bool vis[100006];
int dist[100006];
void dfs(int node,int parent)
{
    vis[node]=true;
    for(auto it : g[node])
    {
        if(it.first == parent)continue;
        if(vis[it.ff]==false)dfs(it.first,node);
    }
    return ;
}
int32_t main()
{
    fast;
    cin>>n>>m>>s;
    rep(i,1,n)cin>>k[i];
    while(m--)
    {
        int u,v,w;
        cin>>u>>v>>w;
        g[u].pb(mp(v,w));
        g[v].pb(mp(u,w));
    }
    dfs(s,0);
    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >Q;
    Q.push({0,s});
    rep(i,1,n)dist[i] = INF;
    dist[s] = 0;
    while(!Q.empty())
    {
        int node = Q.top().second;
        int d = Q.top().first;
        Q.pop();
        for(auto it : g[node])
        {
            if(d + it.ss < dist[it.ff])
            {
                dist[it.ff] = d + it.ss ;
                Q.push({dist[it.ff],it.ff});
            }
        }
    }
    //calculated distances from shop
    vector<int>nodes;
    rep(i,1,n)if(vis[i])nodes.pb(i);
    int tot = 0,sum=0;
    for(auto it:nodes)
    {
        tot += k[it]*dist[it];
        sum += k[it];
    }

    rep(i,1,n)
    {
        if(not vis[i])
        {
            cout << 0 << " ";
        }
        else
        {
            cout << (sum-k[i])*dist[i] + tot - dist[i]*k[i] << " ";
        }
    }
    return 0;
}
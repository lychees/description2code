
#include<stdio.h>
#include<iostream>
#include<math.h>
using namespace std;

int primes[200];
int count;

#define max 1000001
long dp[max];
int dp_max=3;

void generate_prime(int r)
{
primes[0] = 2;
count++;
	for(int i=3;i<r;i=i+2)
	{
	int j;
		for(j=0;j<count && primes[j]<sqrt(r);j++)
		{
			if(i%primes[j]==0)		
				//continue;	
				break;
		}
		if( (count==j) || (primes[j]>sqrt(r) ) )
			primes[count++]=i;
	}
}

int check_power(int x, int p)
{
int power=0;
	while(x%p==0)
	{
		x=x/p;
		power++;
	}
return power;
}

int power_primes( int x )
{
	int r = ceil(sqrt(x)) ;
	int total_power = 0;
	int check=1;

	for(int i=0;primes[i]<x && i<count ;i++)
	{
		int temp = check_power(x,primes[i]);
		//cout << "| " << x << " " << primes[i] << " " << check_power(x,primes[i]) << endl ;
		
		if(temp)		
		{
			total_power += temp ;
			check *= pow(primes[i],temp) ;
		}
	}
	if(total_power==0)
			return 1;
	//else if((x>1999)&&(total_power==1))
	//	return 2;
	else if(x>1999)
	{
		if(check<x)
			return total_power+1;
	}

	return total_power;
}

void init()
{
	for(int i=4;i<max;i++)
	{
		dp[i] = dp[i-1] + power_primes(i);	
	}
}

int somefunc(int X)
{
int ans=0;
	if(dp[X]!=0)
	{
		ans = dp[X];
//		return temp;
	}
	else
	{
	for(int i=dp_max+1;i<=X;i++)
		{
			dp[i] = dp[i-1] + power_primes(i);
		}
	dp_max = X;
	ans = dp[X];
	}	
return ans;
}

int main()
{
count=0;
//primes = {0};
 int T,A,B;
generate_prime(1000);
dp[0]=0;
dp[1]=0;
dp[2]=1;
dp[3]=2;
init();
/*
	for(int i=0;i<max;i++)
	{
		dp[i]=0;
	}
int temp;
	for(int i=0;i<max;i++)
	{
		temp = somefunc(i) ;	
	}
*/

cin >> T;
int ans[T];

	for(int i=0;i<T;i++)
	{
		scanf("%d%d",&A,&B);
//		ans[i] = 0;
		//ans[i] =  dp[B] - dp[A-1]; //somefunc(B) - somefunc(A-1) ;
//		cout << dp[B] - dp[A-1]  << endl;	
		printf("%ld\n", dp[B] - dp[A-1] ) ;	
	}

//for(int i=0;i<T;i++)
//	cout << ans[i] << endl;

return 0;
}



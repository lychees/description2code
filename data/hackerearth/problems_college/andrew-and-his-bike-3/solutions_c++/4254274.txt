#include<iostream>
using namespace std;
class element 
{
	public:
	int data;
	element* next;		
};
class node 
{  
  public:
  int node_no;
  element *top;
  int i=0;
  int n;
  node(){top=0;}
  void pushing(int x)
  {
  	element *p=new element;
  	p->data=x;
  	p->next=top;
  	top=p;
  }
  void del_all()
  {
  	element *p=top;
  	while(top)
  	{	
  	  top=top->next;
	  delete p;
	  p=top;		
	}
  }
};
class tree
{
  public:	
  node **B;
  tree(int n)
  {
  B=new node*[n];
  int i;
  for(i=0;i<n;i++)
  B[i]=0;
  }	
  void push(int x,int y)
  {
  	if(!B[x])
  	{
  	node *p=new node;
  	p->node_no=x;
  	B[x]=p;
    }
    if(!B[y])
    {
     node *p=new node;
	 p->node_no=y;
	 B[y]=p;	
	}
     B[x]->pushing(y);
     (B[x]->i)++;
	 B[y]->pushing(x);
	 (B[y]->i)++;
  }
  int f(node *p,node *q)
  {
  	int sum=(p->i)-1;
  	element *r=p->top;
    while(r)
	{	
	  if(B[r->data]!=q)	
	  sum+=f(B[r->data],p);	
	  r=r->next;
    }
	p->n=sum; 
	return sum;	
  }
};
int main()
{
	int n,i,x,y;
	cin>>n;
	tree *p=new tree(n);
	for(i=0;i<n-1;i++)
	{
	 cin>>x>>y;	
	 p->push(x-1,y-1);
	}
	if(n==1)
	{
	cout<<0;
	delete p;
	return 0;
	}
	cout<<(p->f(p->B[0],0))+1<<" ";
	p->B[0]->del_all();
	delete p->B[0];
    for(i=1;i<n;i++)
    {
      cout<<1+(p->B[i]->n)<<" ";
      p->B[i]->del_all();
	  delete p->B[i];	
	}
	delete p->B;
	delete p;
	return 0;
}
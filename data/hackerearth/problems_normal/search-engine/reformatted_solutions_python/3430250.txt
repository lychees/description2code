class Node:
    def __init__(self):
        self.maxW = -1
        self.nxt = [None]*128


class Trie:
    def __init__(self):
        self.T = [Node()]

    def add(self, word, weight):
        v = 0
        for char in word:
            if not self.T[v].nxt[ord(char)]:
                self.T[v].nxt[ord(char)] = len(self.T)
                self.T.append(Node())
            self.T[v].maxW = max(self.T[v].maxW, weight)
            v = self.T[v].nxt[ord(char)]
        self.T[v].maxW = max(self.T[v].maxW, weight)

    def query(self, word):
        v = 0
        for char in word:
            if not self.T[v].nxt[ord(char)]:
                return -1
            v = self.T[v].nxt[ord(char)]
        return self.T[v].maxW


N, Q = map(int, raw_input().split())
T = Trie()
for _ in xrange(N):
    s, weight = raw_input().split()
    T.add(s, int(weight))
for _ in xrange(Q):
    print T.query(raw_input())

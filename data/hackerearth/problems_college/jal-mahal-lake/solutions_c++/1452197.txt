#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
typedef long long ll;
 
bool comp(pair<int,int> f, pair<int,int> s) {
    return f.first < s.first;
}
  
  ll findCost(vector<pair<ll,ll> > cars, ll st) {
    ll ret = 0;
    for(int i=0;i<cars.size();i++) {
      ret += abs(st-cars[i].first);
      st = st + cars[i].second;
    }
    return ret;
  }
  
  long long minimizeCost(vector <int> positions, vector <int> lengths) {
    vector<pair<ll,ll> > cars;
    for(int i=0;i<positions.size();i++) {
      cars.push_back(make_pair(positions[i], lengths[i]));
    }
    sort(cars.begin(), cars.end(), comp);
    ll low = 0, high = 10e9+10, mid;
    ll ans = 10e9 ;
    while( low <= high ) {
      mid = (low+high)/2;
      ll cur = findCost(cars, mid);
      ll next = findCost(cars,mid+1);
      if( cur < next ) {
        ans = cur;
        high = mid-1;
      } else if ( cur == next ) {
        ans = cur; break;
      } else if ( cur > next ) {
        ans = next;
        low = mid+1;
      }
    }
    return ans;
  }

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,x,i;
		cin>>n;
		vector<int>positions;
		vector<int>lengths;
		for(i=0;i<n;i++)
		{
			cin>>x;
			positions.push_back(x);
		}
		for(i=0;i<n;i++)
		{
			cin>>x;
			lengths.push_back(x);
		}
		cout<<minimizeCost(positions,lengths)<<endl;
	}
	return 0;
}
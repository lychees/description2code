/*logic ------------

*/
#include<iostream>
#include<cmath>
#include<cstring>
#include<string>
#include<bitset>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<stack>
#include<stdio.h>
#include<queue>
#define si(n) scanf("%d",&n)
#define sll(n) scanf("%lld",&n)
#define mod 1000000007 // 10**9 + 7
#define INF 1e9
#define FOR(i,a,b) for(int (i) = (a); (i) < (b); ++(i))
#define RFOR(i,a,b) for(int (i) = (a)-1; (i) >= (b); --(i))
#define CLEAR(a) memset((a),0,sizeof(a))
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define rep(i, a, b) for (int i = a; i < b; i++)
#define rrep(i, b, a) for (int i = b; i > a; i--)
#define all(v) v.begin(), v.end()
#define GETCHAR getchar_unlocked
#define pi(n) printf("%d\n",n)
#define pll(n) printf("%lld\n",n)
#define rk() int t; scanf("%d",&t); while(t--)
using namespace std;
const double pi = acos(-1.0);
//freopen("in","r",stdin);
//freopen("out","w",stdout);

const int er[8] = {-1,-1,0,1,1,1,0,-1};
const int ec[8] = {0,1,1,1,0,-1,-1,-1};
const int fr[4] = {-1,1,0,0};
const int fc[4] = {0,0,1,-1};
typedef unsigned long long ull;
typedef long long ll;
typedef long l;
typedef pair<int,int> pii;
typedef vector<int> vec;
typedef vector<pii> vpii;
ll po(ll a,ll p)
{ll ret = 1;while(p){if(p&1)ret = (ret*a)%mod;a=(a*a)%mod;p=p>>1;}return ret%mod;}

#define D(x) cout << #x " is " << x << endl

int rows, cols;
bool on[15][15];
bool backup[15][15];

#define inside(i, j) (0 <= (i) && (i) < rows && 0 <= (j) && (j) < cols)
#define toggle(x) x = !x

void dance(int i, int j) {
	int di[] = {0, 0, 1, -1};
	int dj[] = {1, -1, 0, 0};
	toggle(on[i][j]);
	for(int k = 0; k < 4; k++) {
		if(inside(i + di[k], j + dj[k])) {
			toggle(on[i + di[k]][j + dj[k]]);
		}
	}
}

void print() {
	for(int i = 0; i < rows; i++) {
		for(int j = 0; j < cols; j++) {
			cout << on[i][j] << " ";
		}
		cout << "\n";
	}
}

int main() {
	while(cin >> rows >> cols && rows && cols) {
		for(int i = 0; i < rows; i++) {
			for(int j = 0; j < cols; j++) {
				char c;
				cin >> c;
				on[i][j] = (c == '.');
			}
		}
		
		memcpy(backup, on, sizeof on);
		bool solved = false;
		vector< pair<int, int> > ans(rows * cols + 1);
		for(int set = 0; set < (1 << cols); set++) {
			memcpy(on, backup, sizeof on);
			vector< pair<int, int> > path;
			for(int j=0; j<cols; j++) {
				if(set & (1 << j)) {
					dance(0, j);
					path.push_back(mp(0, j));
				}
			}
			for(int i = 1; i < rows; i++) {
				for(int j = 0; j < cols; j++) {
					if(!on[i-1][j]) {
						dance(i, j);
						path.push_back(mp(i, j));
					}
				}
			}
			bool ok = true;
			for(int i = 0; i < rows; i++) {
				for(int j = 0; j < cols; j++) {
					ok &= on[i][j];
				}
			}
			if(ok && path.size() < ans.size()) {
				ans = path;
				solved = true;
			}
		}
		if(!solved) {
			cout << -1 << endl;
		}
		else {
			cout << ans.size() << endl;
			//for(int i = 0; i < ans.size(); i++) {
			//	cout << ans[i].second + 1 << " " << ans[i].first + 1 << endl;
			//}
		}
	}
	return 0;
}

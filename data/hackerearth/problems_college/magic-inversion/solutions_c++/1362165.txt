#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define MOD 1000000007
int pc(ll x)
{
    int i,f=1;
    for(i=2;i<=sqrt(x);i++)
    {
        if(x%i==0)
        {
            f=0;
            break;
        }
    }
    return f;
}

ll tree[4 * 200005], ar[200005], ar1[200005], mix[2 * 200005];
ll read(int ind)
{
ll res = 0;
while(ind)
{
res += tree[ind];
ind -= (ind & (-ind));
}
return res;
}
void update(int ind, ll val, int sz)
{
while(ind <= sz)
{
tree[ind] += val;
ind += (ind & (-ind));
}
}
int main()
{
ios_base::sync_with_stdio(false);
int n, cnt = 0;
cin>>n;
for(int i=0; i<n; ++i)
{
cin>>ar[i];
mix[cnt] = ar[i];
cnt++;
}
for(int i=0; i<n; ++i)
{
cin>>ar1[i];
mix[cnt] = ar1[i];
cnt++;
}
sort(mix, mix + cnt);
for(int i=0; i<n; ++i)
{
int rnk = int(lower_bound(mix, mix + cnt, ar[i]) - mix);
ar[i] = rnk + 1;
}
for(int i=0; i<n; ++i)
{
int rnk = int(lower_bound(mix, mix + cnt, ar1[i]) - mix);
ar1[i] = rnk + 1;
}
memset(tree, 0, sizeof(tree));
ll inv_cnt = 0;
for(int i=n-1; i>=0; --i)
{
ll x = read(ar[i] - 1);
inv_cnt += x;
update(ar1[i], 1, 2 * n);
}
if(pc(inv_cnt))
    cout<<"MAGIC INVERSION";
else cout<<"SIMPLE INVERSION";
return 0;
}

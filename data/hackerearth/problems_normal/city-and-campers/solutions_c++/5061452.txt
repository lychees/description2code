/*	I will not win immediately,
 *	but I will win definitely...
 */
#include<bits/stdc++.h>
#define opt				ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define li				long int
#define lli				long long int
#define sd(n)				scanf("%d",&n)
#define sld(n)				scanf("%ld",&n)
#define slld(n)				scanf("%lld",&n)
#define pd(n)				printf("%d\n",n)
#define pld(n)				printf("%ld\n",n)
#define plld(n)				printf("%lld\n",n)
#define pn				printf("\n")
#define rep(i,a,b)			for(i=a;i<b;i++)
#define repr(i,a,b)			for(i=a;i>b;i--)
#define repi(i,v)			for(i=v.begin();i!=v.end();i++)
#define vi				vector<int>
#define vli				vector<li>
#define vlli				vector<lli>
#define pb				push_back
#define pob				pop_back
#define all(v)				v.begin(),v.end()
#define sz				size()
#define lb				lower_bound
#define ub				upper_bound
#define elif				else if
#define mp				make_pair
#define pa				pair<li,li>
#define vpp				vector<pair<li,li> >
#define F				first
#define S				second
#define mod				1000000000
#define itr				iterator
using namespace std;
li power(li a, li b){
		li ans=1L;
		while(b){
				if(b&1)
						ans=(ans*a)%mod;
                a=(a*a)%mod;
                b>>=1;
		}
		return ans;
}
li mmi(li n){
		return power(n,mod-2);
}
li gcd(li a, li b){
        if(a%b==0)
                return b;
        else
                return gcd(b,a%b);
}
/**************************MAIN CODE BEGINS NOW!**************************/

li arr[100001];
li sizea[100001];
li n;
multiset<pa > ms;

void initialize(){
        li i;
        rep(i,1,n+1){
                arr[i]=i;
                sizea[i]=1L;
                ms.insert(mp(1L,i));
        }
}

li root(li i){
        while(arr[i]!=i)
                i=arr[i];
        return i;
}

void unionof(li a, li b){
        li root_a=root(a);
        li root_b=root(b);
        if(root_a==root_b)
                return;
        if(sizea[root_b]>sizea[root_a])
                swap(root_b,root_a);
        ms.erase(ms.find(mp(sizea[root_a],root_a)));
        ms.erase(ms.find(mp(sizea[root_b],root_b)));
        sizea[root_a]+=sizea[root_b];
        arr[root_b]=root_a;
        ms.insert(mp(sizea[root_a],root_a));
}

int main(){
        li q;
        sld(n),sld(q);
        initialize();
        while(q--){
                li a,b;
                sld(a),sld(b);
                unionof(a,b);
                pld((*(--ms.end())).F - (*(ms.begin())).F);
        }
        return 0;
}

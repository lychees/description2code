#include<bits/stdc++.h>
using namespace std;
vector<pair<int,int > > v[10100];
int dist[10001];
int vert;
void dijkstra(int s)
{
    for(int i=0;i<=vert+1;i++)
        dist[i]=INT_MAX;
    priority_queue <pair<int,int> >pq;
    dist[s]=0;
    pq.push(make_pair(0,1));
    while(!pq.empty())
    {
        pair<int,int> p=pq.top();
        pq.pop();
        int i=p.second;
          if(dist[i]==INT_MAX)
            continue;

        for(int j=0;j<v[i].size();j++)
        {
          int x=v[i][j].first;
          int w=v[i][j].second;
            if(dist[x]>dist[i]+w)
            {
                dist[x]=dist[i]+w;
                pq.push(make_pair(-dist[x],x));
            }
        }

    }
    for(int i=0;i<=vert;i++)
	v[i].clear();
}

int main()
{
    int t;
	cin>>t;
	while(t--)
	{
	int n,m;
	cin>>n>>m;
	vert =n;
	for(int i=0;i<m;i++)
	{
		int a,b,c;
		cin>>a>>b>>c;
		v[a].push_back(make_pair(b,c));
		v[b].push_back(make_pair(a,c));
	}
	dijkstra(1);
//	for(int i=1;i<=n;i++)
	//	cout<<dist[i]<<endl;
	int q;
	cin>>q;
	while(q--)
	{
		int j,k;
		cin>>j>>k;
		if(2*dist[j]>k)
			cout<<0<<endl;
		else
			cout<<(k-2*dist[j])<<endl;
	}
	}
	return 0;

}

#include <bits/stdc++.h>
using namespace std;

long long d[1000010];
long long hvalA[1000010];
unordered_set <long long> S;

void init(int len, string &A) {
    d[0] = 1;
    for(int i = 1; i <= len; ++i) d[i] = d[i - 1] * 33;

    hvalA[0] = A[0];
    for(int i = 1; i < len; ++i) {
        hvalA[i] = (hvalA[i-1] * 33) + A[i];
    }
}

int f(string &T, int k, int n) {
    long long hval = hvalA[k-1];
    S.clear();
    S.insert(hval);
    for(int i = 1; i <= n - k; ++i) {
        hval = 33 * (hval - T[i-1] * d[k - 1]) + T[i + k - 1];
        if (S.find(hval)!=S.end())
			return true;
        S.insert(hval);
    }

    return 0;
}

int main() {
    string T;
    cin >> T;

    int len = T.length();
    init(len, T);

    int low = 1, up = len - 1, mid = 0, sofar = 0;
    while(low <= up) {
        mid = low + (up - low) / 2;
        int temp = f(T, mid, len);
        if(temp == 1) {
            sofar = max(sofar, mid);
            low = mid + 1;
        } else {
            up = mid - 1;
        }
    }

    cout << sofar << endl;
    return 0;
}

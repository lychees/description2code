#pragma comment (linker, "/STACK:128000000")
#define _CRT_SECURE_NO_WARNINGS
//#include "testlib.h"
#include <cstdio>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <bitset>
#include <deque>
#include <unordered_map>
#include <unordered_set>
#include <ctime>
#include <stack>
#include <queue>
#include <fstream>
#include <sstream>
#include <complex>
using namespace std;
//#define FILENAME ""
#define mp make_pair
#define all(a) a.begin(), a.end()
typedef long long li;
typedef long double ld;
void solve();
void precalc();
clock_t start;
//int timer = 1;

int testNumber = 1;

bool todo = true;

int main() {
#ifdef room111
	freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	//freopen(FILENAME".in", "r", stdin);
	//freopen(FILENAME ".out", "w", stdout);
#endif
	start = clock();
	int t = 1;
	cout.sync_with_stdio(0);
	cin.tie(0);
	precalc();
	cout.precision(10);
	cout << fixed;
	cin >> t;
	int testNum = 1;
	while (t--) {
		//cerr << testNum << endl;
		//cout << "Case #" << testNum++ << ": ";
		solve();
		++testNumber;
		//++timer;
	}

#ifdef room111
	cerr << "\n\n" << (clock() - start) / 1.0 / CLOCKS_PER_SEC << "\n\n";
#endif

	return 0;
}

//BE CAREFUL: IS INT REALLY INT?

//#define int li

/*int pr[] = { 97, 2011 };
int mods[] = { 1000000007, 1000000009 };

const int C = 300500;
int powers[2][C];*/

//int MOD = 1000000007;

//int c[5010][5010];

//int catalan[200500];

//ld doubleC[100][100];

template<typename T>
T binpow(T q, T w, T mod) {
	if (!w)
		return 1 % mod;
	if (w & 1)
		return q * 1LL * binpow(q, w - 1, mod) % mod;
	return binpow(q * 1LL * q % mod, w / 2, mod);
}

/*int curMod = 1000000009;

int fact[100500], revfact[100500];

int getC(int n, int k) {
int res = fact[n] * revfact[n - k] % curMod * revfact[k] % curMod;
return res;
}*/

/*const int C = 7000500;

int least_prime[C];*/


void precalc() {

	/*for (int i = 2; i < C; ++i) {
	if (!least_prime[i]) {
	least_prime[i] = i;
	for (li j = i * 1LL * i; j < C; j += i) {
	least_prime[j] = i;
	}
	}
	}*/

	/*fact[0] = revfact[0] = 1;
	for (int i = 1; i < 100500; ++i) {
	fact[i] = fact[i - 1] * i % curMod;
	revfact[i] = binpow(fact[i], curMod - 2, curMod);
	}*/

	/*for (int w = 0; w < 2; ++w) {
	powers[w][0] = 1;
	for (int j = 1; j < C; ++j) {
	powers[w][j] = (powers[w][j - 1] * 1LL * pr[w]) % mods[w];
	}
	}*/

	/*catalan[0] = 1;
	for (int n = 0; n < 200500 - 1; ++n) {
	catalan[n + 1] = catalan[n] * 2 * (2 * n + 1) % MOD * binpow(n + 2, MOD - 2, MOD) % MOD;
	}*/

	/*for (int i = 0; i < 5010; ++i) {
	c[i][i] = c[i][0] = 1;
	for (int j = 1; j < i; ++j) {
	c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % MOD;
	}
	}*/

	/*for (int i = 0; i < 100; ++i) {
	doubleC[i][i] = doubleC[i][0] = 1.0;
	for (int j = 1; j < i; ++j) {
	doubleC[i][j] = doubleC[i - 1][j - 1] + doubleC[i - 1][j];
	}
	}*/

}

template<typename T>
T gcd(T q, T w) {
	while (w) {
		q %= w;
		swap(q, w);
	}
	return q;
}
template<typename T>
T lcm(T q, T w) {
	return q / gcd(q, w) * w;
}

#define int li

const int mod = 1000000007;

vector<vector<int>> matrix3 = { { 3, 3, 4 }, { 4, 3, 3 }, { 3, 4, 3 } };

vector<vector<int>> mult(const vector<vector<int>>& q, const vector<vector<int>>& w) {
	vector<vector<int>> res(q.size(), vector<int>(q.size()));
	for (int i = 0; i < q.size(); ++i) {
		for (int k = 0; k < q.size(); ++k) {
			for (int j = 0; j < q.size(); ++j) {
				res[i][j] += q[i][k] * w[k][j];
				res[i][j] %= mod;
			}
		}
	}
	return res;
}

vector<int> mult(const vector<vector<int>>& q, const vector<int>& w) {
	vector<int> res(q.size(), 0);
	for (int i = 0; i < q.size(); ++i) {
		for (int j = 0; j < q.size(); ++j) {
			res[i] += q[i][j] * w[j];
			res[i] %= mod;
		}
	}
	return res;
}

vector<vector<int>> get_power(const vector<vector<int>>& matrix, int n) {
	auto step = matrix;
	vector<vector<int>> res(matrix.size(), vector<int>(matrix.size()));
	for (int i = 0; i < res.size(); ++i) {
		res[i][i] = 1;
	}
	while (n) {
		if (n & 1) {
			res = mult(res, step);
		}
		step = mult(step, step);
		n >>= 1;
	}
	return res;
}

vector<int> get_nums3(int k, int n) {
	auto matrix = matrix3;
	if (k == 9) {
		matrix.assign(9, vector<int>(9, 1));
		for (int i = 0; i < 9; ++i) {
			++matrix[(i + 1) % 9][i];
		}
	}
	auto res = get_power(matrix, n);
	auto start = vector<int>(k, 0);
	start[0] = 1;
	return mult(res, start);
}

vector<int> now_vec;

int get_rev(int cur) {
	now_vec.clear();
	while (cur) {
		now_vec.push_back(cur % 10);
		cur /= 10;
	}
	cur = 0;
	for (auto item : now_vec) {
		cur = (cur * 10 + item);
	}
	return cur;
}

int get_rev(int cur, int signs) {
	now_vec.clear();
	for (int i = 0; i < signs; ++i) {
		now_vec.push_back(cur % 10);
		cur /= 10;
	}
	cur = 0;
	for (auto item : now_vec) {
		cur = (cur * 10 + item);
	}
	return cur;
}

void solve() {
	int n, k;
	cin >> n >> k;

	if (k == 3 || k == 9) {
		int res = (binpow(10LL, n, mod) + k - 1) * binpow(k, mod - 2, mod) % mod;
		cout << res << "\n";
		return;
	}

	int rev3 = binpow(3LL, mod - 2, mod);
	int rev9 = binpow(9LL, mod - 2, mod);

	if (k == 6) {
		int res = 2;
		for (int i = 0; i < 10; i += 2) {
			for (int j = 2; j < 10; j += 2) {
				int rest = 3 - (i + j) % 3;
				if (rest == 3) {
					rest = 0;
				}
				if (rest == 0) {
					int add = (2 * (n - 1) + (binpow(10LL, n - 1, mod) - 1) * rev9) % mod * rev3;
					add %= mod;
					res += add;
					res %= mod;
				}
				else {
					int add = ((binpow(10LL, n - 1, mod) - 1) * rev9 - (n - 1)) % mod * rev3;
					add %= mod;
					res += add;
					res %= mod;
				}
			}
		}
		if (res < 0) {
			res += mod;
		}
		cout << res << "\n";
		return;
	}

	if (k == 7) {
		int rest = n % 6;
		vector<int> start_vec(7 * 7);
		int step = binpow(10LL, rest, mod);
		for (int i = 0; i < step; ++i) {
			int first_rest = i % 7;
			int second_rest = get_rev(i, 6) % 7;
			++start_vec[first_rest * 7 + second_rest];
		}

		vector<vector<int>> adds(7, vector<int>(7));
		for (int i = 0; i < 1000000; ++i) {
			int cur = get_rev(i, 6);
			++adds[i % 7][cur % 7];
		}

		vector<vector<int>> matrix(7 * 7, vector<int>(7 * 7));
		for (int i = 0; i < 7; ++i) {
			for (int j = 0; j < 7; ++j) {
				for (int x = 0; x < 7; ++x) {
					for (int y = 0; y < 7; ++y) {
						int nex_x = (i + x) % 7, nex_y = (j + y) % 7;
						matrix[nex_x * 7 + nex_y][i * 7 + j] += adds[x][y];
					}
				}
			}
		}

		vector<int> result = mult(get_power(matrix, n / 6), start_vec);

		cout << result[0] << "\n";
		return;
	}



	int res = 0;

	{
		int max_num = 1;
		for (int i = 0; i < min(n, 6LL); ++i) {
			max_num *= 10;
		}
		for (int i = 0; i < max_num; i += k) {
			int cur = get_rev(i);
			if (cur % k == 0) {
				++res;
			}
		}
	}

	if (n <= 6) {
		cout << res << "\n";
		return;
	}

	if (k == 2 || k == 4 || k == 8 || k == 5 || k == 10) {
		for (int i = 0; i < 1000; i += k) {
			for (int j = k; j < 1000; j += k) {
				if (j % 10 == 0) {
					continue;
				}
				res += (binpow(10LL, n - 5, mod) - 1) * rev9 - 1;
				res %= mod;
				if (res < 0) {
					res += mod;
				}
			}
		}
		cout << res << "\n";
		return;
	}

	
	

	assert(false);

}
from itertools import *


def p():
    D = {}
    q = 2
    while True:
        if q not in D:
            yield q
            D[q*q] = [q]
        else:
            for p in D[q]:
                D.setdefault(q+p, []).append(p)
            del D[q]
        q += 1


n, k = map(int, raw_input().split())


def C(s):
    return s <= n


P = list(takewhile(C, p()))

print "YNEOS"[len(filter(lambda s: s <= n and s in P,  map(sum, zip(P[1:], P, [1]*n)))) < k::2]

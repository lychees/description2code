#include <iostream>
#include <list>
#include <stdio.h>
using namespace std;
class Graph
{
  int v;
  list <int> *adj;
  int *dfsin;
  int *dfsout;
  int *heightof;
  int time_t;
  public:
  Graph(int v);
  void add_edge(int x, int y);
  void dfs(int s, int height);
  void find_height(int x, int y);
};
Graph :: Graph(int v)
{
	this->v=v;
	adj=new list<int> [v+1];
	dfsin=new int[v+1];
	dfsout=new int[v+1];
	heightof=new int[v+1];
	time_t=0;
}
void Graph :: add_edge(int x, int y)
{
	adj[x].push_back(y);
}
void Graph :: dfs(int s, int height)
{
	heightof[s]=height;
	dfsin[s]=time_t;
	time_t++;
	list <int> :: iterator i;
	for(i=adj[s].begin();i!=adj[s].end();i++)
	{
		dfs(*i,height+1);
	}
	time_t++;
	dfsout[s]=time_t;
}
void Graph :: find_height(int x, int y)
{
	if(dfsin[y]<dfsin[x] && dfsout[y]>dfsout[x])
	{
		cout<<heightof[x]-heightof[y]-1<<endl;
	}
	else
	cout<<-1<<endl;
}
int main()
{
	int v,m,i,x,y,root,t;
	cin>>t;
	while(t--)
	{
		cin>>v;
		Graph g(v);
		for(i=1;i<=v;i++)
		{
			cin>>x;
			g.add_edge(x,i);
			if(x==0)
			root=x;
		}
		cin>>m;
		g.dfs(root,0);
		for(i=1;i<=m;i++)
		{
			cin>>x;
			cin>>y;
			g.find_height(x,y);
		}
	}
}
def find_room_sub_function(Rooms, N, K, S, min_room_count):
    """BOUNDARY CONDITION"""
    if N >= len(Rooms):
        return -1

    """EXIT CONDITION"""
    if len(S.union(Rooms[N][1:])) >= K:
        return min_room_count+1

    else:
        not_include = find_room_sub_function(Rooms, N+1, K, S, min_room_count)
        include = find_room_sub_function(
            Rooms, N+1, K, S.union(Rooms[N][1:]), min_room_count+1)
        minimum = not_include if not_include <= include else include
        maximum = not_include if not_include >= include else include
        return maximum if minimum < 0 else minimum


def find_minimum_number_of_rooms():
    test_cases = int(raw_input())
    for test_number in range(1, test_cases+1):
        NK = raw_input().split()
        N = int(NK[0])
        K = int(NK[1])
        Rooms = []
        for n in range(1, N+1):
            CV = raw_input().split()
            Rooms.append(CV)
        print find_room_sub_function(Rooms, 0, K, set(), 0)


find_minimum_number_of_rooms()

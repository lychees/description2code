#include<bits/stdc++.h>
using namespace std;
void unionset(int parent[],int rank[],int x,int y);
int findset(int parent[],int x);
int main()
{
    int test,n,m,i,ans,check,a,b,x,y;
    cin>>test;
    while(test--)
    {
        cin>>n>>m;
        int parent[n+1],rank[n+1],arr1[n+1],arr2[n+1];
        ans=0;
        check=0;
        for(i=1;i<=n;i++)
        {
        	cin>>arr1[i];
            parent[i]=i;
            rank[i]=0;
        }
        for(i=1;i<=n;i++)
        {
            cin>>arr2[i];
        }
        for(i=1;i<=m;i++)
        {
            cin>>a>>b;
           // cout<<a<<" "<<b<<endl;
            unionset(parent,rank,arr1[a],arr1[b]);
        }
        for(i=1;i<=n;i++)
        {
            if(arr1[i]!=arr2[i])
            {
                if(findset(parent,arr1[i])!=findset(parent,arr2[i]))
                {
                    check=1;
                    break;
                }
            }
        }
        if(check==0)
            cout<<"YES"<<endl;
        else
            cout<<"NO"<<endl;
    }
return 0;
}


void unionset(int parent[],int rank[],int x,int y)
{
	//cout<<" union "<<x<<" "<<y<<endl;
	int px=findset(parent,x);
	int py=findset(parent,y);
	if(rank[px]>rank[py])
	parent[py]=px;
	else if(rank[px]<rank[py])
	parent[px]=py;
	else
	{
		parent[px]=py;
		rank[py]++;
	}
}
int findset(int parent[],int x)
{
	if(parent[x]==x)
	return x;
	parent[x]=findset(parent,parent[x]);
	return parent[x];
}
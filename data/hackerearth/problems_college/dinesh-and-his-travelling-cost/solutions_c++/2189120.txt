#include <iostream>
#include<vector>
#include<queue>
using namespace std;


int visited[1000]={0};
int value[1010];
typedef pair<int,int> ii;
typedef vector<ii> vi;
typedef vector<vi> V;
V Ar(1000);

void bfs(int node)
{
	for(int i=0;i<1000;i++)value[i]=10000000;
	queue<int> Q;
	Q.push(node);
	visited[node]=1;
	value[node]=0;
	while(!Q.empty())
	{
		node=Q.front();
		Q.pop();
		for(int i=0;i<Ar[node].size();i++)
		{
   if(!visited[Ar[node][i].first]||value[Ar[node][i].first]>value[node]+Ar[node][i].second)
   {
   value[Ar[node][i].first]=value[node]+Ar[node][i].second;
   		visited[Ar[node][i].first]=1;
   		Q.push(Ar[node][i].first);
   }
		}
		
	}
}

int main()
{
   int N;
   cin>>N;
   int A,B,W;
   for(int i=0;i<N;i++)
   {
   	cin>>A>>B>>W;
   	Ar[A].push_back(ii(B,W));
   	Ar[B].push_back(ii(A,W));
   }
   int U;
   cin>>U;
   bfs(U);
   int Q;
   cin>>Q;
   while(Q--)
   {
   		int q;
   		cin>>q;
   		if(visited[q]==0)
   		cout<<"NO PATH\n";
   		else cout<<value[q]<<"\n";
   }
   return 0;
}

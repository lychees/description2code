#include <iostream>
#include <queue>
#include <cstring>
using namespace std;

char a[32][32];
int n,count1;
int visited[32][32];
int dist[32][32];
int bfs(int x,int y){
	
	queue <pair<int,int>> q;
	visited[x][y]=1;
	q.push(make_pair(x,y));
	while(!q.empty()){
		x=q.front().first;
		y=q.front().second;
		q.pop();
		
			if(a[x][y]=='E'){
				
				break;
			}
			if(x-1>=1 && visited[x-1][y]==0 && (a[x-1][y]=='P'||a[x-1][y]=='E')){
				
				visited[x-1][y]=1;
				dist[x-1][y]=dist[x][y]+1;
				q.push(make_pair(x-1,y));
				
			}
			if(x+1<=n && visited[x+1][y]==0 && (a[x+1][y]=='P'|| a[x+1][y]=='E')){
				
				visited[x+1][y]=1;
				dist[x+1][y]=dist[x][y]+1;
				q.push(make_pair(x+1,y));
				
			}
			if(y-1>=1 && visited[x][y-1]==0 && (a[x][y-1]=='P'||a[x][y-1]=='E')){
				
				visited[x][y-1]=1;
				dist[x][y-1]=dist[x][y]+1;
				q.push(make_pair(x,y-1));
				
			}
				if(y+1<=n && visited[x][y+1]==0 && (a[x][y+1]=='P'||a[x][y+1]=='E')){
				
				visited[x][y+1]=1;
				dist[x][y+1]=dist[x][y]+1;
				q.push(make_pair(x,y+1));
				
			}
			
			
		
		
		
	}

	
		
		return dist[x][y];
	
	
	
	
	
}
int main()
{
    //cout << "Hello World!" << endl;
    cin>>n;
    for(int i=1;i<=n;i++){
    	for(int j=1;j<=n;j++){
    		
    		cin>>a[i][j];
    	}
    }
    count1=1;
    int ans;
    memset(visited,0,sizeof(visited));
    for(int k=1;k<=n;k++){
    	for(int m=1;m<=n;m++){
    		if(a[k][m]=='S'){
    			dist[k][m]=0;
    			ans=bfs(k,m);
    		}
    	
    	}
    }
    cout<<ans;
    
    return 0;
}

#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>
#include <fstream>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vector <int> > vvi;
typedef vector<pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME ""

const int MAXN = 300 + 10;
//const int MOD = 7190;
const int MODS[3] = { 2, 5, 719 };

int inv[3][800];

void precalc() {
  memset (inv, 0, sizeof inv);

  forn(c, 3) {
    forn(x, MODS[c]) {
      forn(y, MODS[c]) {
        if  ((x * y) % MODS[c] == 1) {
          inv[c][x] = y;
          break;
        }
      }
    }
  }
}

int w[MAXN][MAXN];
int n, q;

bool read() {
  if  (scanf("%d%d", &n, &q) < 2) {
    return false;  
  }
  forn(i, n) forn(j, n) {
    scanf("%d", &w[i][j]);
  }
  return true;
}

const int SWAP = 0; // swap(i1, i2)
const int ADD = 1; // i1 += coef * i2

struct Event {
  int type, i1, i2, coef;
};

vector<Event> gauss(int MOD, int a[MAXN][MAXN], int inv[800], int pos_col[MAXN]) {
  vector<Event> es;

  forn(i, n) forn(j, n) a[i][j] = w[i][j] % MOD;

  for (int row = 0, col = 0; col < n && row < n; ++col) {
    int i = row;
 //   printf("row = %d, col = %d\n", row, col);
    while (i < n && !a[i][col]) ++i;
    if  (i == n) {
      continue;
    }
    if  (i != row) {
      forn(j, n) {
        swap(a[row][j], a[i][j]);
      }
      es.pb(Event{ SWAP, row, i, -1 });
    //  printf("swap([%d], [%d])\n", row, i);
    }
    forn(i, n) {
      if  (i != row && a[i][col]) {
        int coef = (inv[a[row][col]] * a[i][col]) % MOD;
        coef = (-coef + MOD) % MOD;
        forn(j, n) {
          a[i][j] = (a[i][j] + coef * a[row][j]) % MOD;
        }
     //   printf("[%d] += [%d] * %d\n", i, row, coef);
        es.pb(Event{ ADD, i, row, coef });
      }
    }
    pos_col[row] = col;
    ++row;
  }

  /*
  printf("MOD = %d\n", MOD);
  forn(i, n) {
    forn(j, n) {
      printf("%d ", a[i][j] % MOD);
    }
    puts("");
  }
  forn(i, n) {
    printf("pos_col[%d] = %d\n", i, pos_col[i]);
  }
  */

  return es;
}

bool check(vi y, int pos_col[MAXN], int MOD, const vector<Event>& es) {
  for (const auto& e : es) {
    if  (e.type == ADD) {
      y[e.i1] = (y[e.i1] + e.coef * y[e.i2]) % MOD;
    } else {
      swap(y[e.i1], y[e.i2]);
    }
  }

  forn(i, sz(y)) {
    y[i] %= MOD;
    if  (y[i] && pos_col[i] == -1) {
      return false;
    }
  }   
  return true;
}

int a[3][MAXN][MAXN];
int pos_col[3][MAXN];

void solve() {
//  forn(i, n) forn(j, n) if  (i > j) swap(w[i][j], w[j][i]);

  vector<vector<Event>> es(3);
  memset (pos_col, -1, sizeof pos_col);
  forn(c, 3) {
    es[c] = gauss(MODS[c], a[c], inv[c], pos_col[c]);
  }

  forn(it, q) {
    vi y(n);
    forn(i, n) {
      scanf("%d", &y[i]);
    }
    //swap(y[0], y[1]);
    bool ok = true;
    forn(c, 3) {
      if  (!check(y, pos_col[c], MODS[c], es[c])) {
        ok = false;
      }
    } 
    puts(ok ? "Yes" : "No");
  }
}

int main() {
#ifdef LOCAL
  freopen(FILE_NAME ".in", "r", stdin);
  freopen(FILE_NAME ".out", "w", stdout);
#endif

  precalc();

  while (read()) {
    solve();
    break;
  }

#ifdef LOCAL
  cerr << "Time: " << (double) clock() / CLOCKS_PER_SEC << endl;
#endif
  return 0;
}

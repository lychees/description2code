class Node:
    def __init__(self, Points):
        self.Points = Points
        self.up = None

    def __getitem__(self, P):
        return self.Points


class BST:
    def __init__(self, arr):
        self.arr = [[arr[i], Node(None)] for i in xrange(len(arr))]
        self.root = self.arr
        self.notused = len(arr)

    def createBST(self):
        arr = self.arr
        unused = None
        while len(arr) != 1:
            if len(arr) % 2 == 1:
                unused = arr[len(arr)-1]
            x, i, l = [], 0, len(arr)/2
            while (i+1) < len(arr):
                x.append([max(arr[i][0], arr[i+1][0]), Node(None)])
                arr[i][1] = arr[i+1][1] = x[len(x)-1]
                i = i+2
            if len(x) % 2 == 1 and unused is not None:
                x.append(unused)
                unused = None
            arr = x
            # print arr
        return self.root


N, Q = raw_input().strip().split(' ')
N, Q = int(N), int(Q)
arr = list(map(int, raw_input().strip().split(' ')))
ar1 = BST(arr)
root = ar1.createBST()
for i in xrange(Q):
    T = int(raw_input().strip())
    x, z, count = root[T-1], arr[T-1], 0
    # print x
    while x[0] is not None and x[0] == z:
        x = x[1]
        count += 1
    if x[0] is None:
        count = count-1
    print count

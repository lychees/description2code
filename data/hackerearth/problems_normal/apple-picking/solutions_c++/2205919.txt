#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }
 
int N;
int trees[20];
long long cumsum[21];
long long remsum[21];
long long ans;
long long ansX, ansY, ansZ;
 
void solve_dfs(int i, long long X, long long Y, long long Z) {
	long long rem = remsum[i];
	if(X > min(Y, Z) + rem) return;
	if(Z + rem < max(X, Y)) return;
	if(Z - X - rem >= ans) return;
	if(i == N) {
		ans = Z - X;
		ansX = X, ansY = Y, ansZ = Z;
		return;
	}
	int t = trees[i];
	solve_dfs(i+1, X + t, Y, Z);
	solve_dfs(i+1, X, Y + t, Z);
	solve_dfs(i+1, X, Y, Z + t);
}
 
int main() {
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		scanf("%d", &N);
		rep(i, N) {
			scanf("%d", &trees[i]);
		}
		sort(trees, trees + N, greater<int>());
		rep(i, N) cumsum[i+1] = cumsum[i] + trees[i];
		rep(i, N+1) remsum[i] = cumsum[N] - cumsum[i];
		ans = INFL;
		solve_dfs(0, 0, 0, 0);
		printf("%lld %lld %lld\n", ansX, ansY, ansZ);
	}
	return 0;
}
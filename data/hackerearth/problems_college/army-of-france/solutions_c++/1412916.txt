//http://www.hackerearth.com/submission/1313803/
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
#include <cstring>
using namespace std;
vector<int> g[1001];
int match[1001],vis[1001];
int ct = 0;
bool augument(int u){
	for(int v:g[u]){
		if (vis[v]) continue;
		vis[v] = 1;
		if (match[v]==-1 || augument(match[v])){
			match[v]=u;
			return true;
		}
	}
	return false;
}
int main()
{
    ios::sync_with_stdio(0);
    int t;
    cin>>t;
    while(t--){
    	int n,m;
    	cin>>n>>m;
    	int y,p;    	
    	unordered_map<int,int> hashx, hashy;
    //	int cntx = 0,cnty = 0;
    	for(int i=0;i<=1000;i++) g[i].clear();
    	vector<pair<int, int> > v;
    	for(int i=0;i<n;i++){
    		cin>>p;
    		for(int x=0;x<p;x++){   
    			cin>>y;
    		//	if (!hashx.count(x)) hashx[x] = cntx++;
    		//	if (!hashy.count(y)) hashy[y] = cnty++;
    			g[i].push_back(y);
    			hashx[y]++;
    		}
    		v.push_back({g[i].size(),i});
    	}
    	sort(v.begin(),v.end());
    	memset(vis,0,sizeof(vis));
    	memset(match,0,sizeof(match));
    	int ans  =0;
    	int best = 0;
    	for(int i=0;i<n;i++){
    		int idx = v[i].second;
    		int v=-1;
    		int tot = 10000;
    		for(int u:g[idx]){
    			if (!vis[u]){
    				if (hashx[u]<tot){
    					v = u;
    					tot = hashx[u];
    				}
    				
    			}
    		}
    		if (v!=-1){
    			ans++;
    				vis[v]=1;
    				match[idx] = v;
    			//	break;
    		}
    	}
    	best = max(ans,best);
    	ans = 0;
    	memset(vis,0,sizeof(vis));
    	memset(match,0,sizeof(match));
    	for(int i=0;i<n;i++){
    		int idx = v[i].second;
    		for(int u:g[idx]){
    			if (!vis[u]){
    				ans++;
    				vis[u]=1;
    				match[idx] = u;
    				break;
    			}
    		}
    	}
    	cout << max(best,ans) << "\n";
    }
    return 0;
}
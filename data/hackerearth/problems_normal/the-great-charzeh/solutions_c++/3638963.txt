#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
struct BiPartMatch {
    typedef vector<vi> vvi;
    const vvi &adj;
    const int n,m;

    vi mr,mc;
    int ct=0;
    vector<bool> seen;
    BiPartMatch ( const vvi & _adj,int _m ) :adj ( _adj ),n ( adj.size() ),m ( _m ),mr ( n,-1 ),mc ( m,-1 ),seen ( m ) {
        run();
    }
    bool FindMatch ( int i ) {

        for ( int j: adj[i] ) {
            if ( !seen[j] ) {
                seen[j] = 1;
                if ( mc[j] < 0 || FindMatch ( mc[j] ) ) {
                    mr[i] = j;
                    mc[j] = i;
                    return 1;
                }
            }
        }
        return 0;
    }

    void run ( ) {
        rep ( i,n ) {
            fill ( all ( seen ),0 );
            if ( FindMatch ( i ) ) ct++;
        }

    }
};
struct Solve {
    int n;
    const vi&a,f;
    Solve ( const vi &_a, const vi&_f ) :n ( _a.size() ),a ( _a ),f ( _f ) {

    }
    bool check ( int maxv ) {
//         cout<<f<<" "<<maxv<<endl;
        vector<vi> adj ( n );
        rep ( i,n ) {
            rep ( j,n )
            if ( f[j+a[i]]<=maxv ) adj[i].push_back ( j );
        }
//         cout<<adj;
        BiPartMatch mtch ( adj,n );
//         cout<<n<<" "<<mtch.ct<<endl;
        return mtch.ct==n;
    }
};
int main() {
    ios_base::sync_with_stdio ( false );
    int n,m;
    cin>>n>>m;
    vi a ( n );
    cin>>a;
    vi f ( n+m-1 );
    cin>>f;
    vi fsorted ( f );
    sort ( all ( fsorted ) );
    fsorted.resize ( unique ( all ( fsorted ) )- fsorted.begin() );
    int mi=-1;
    int ma=fsorted.size()-1;
    Solve solve(a,f);
    while ( ma-mi>1 ) {
        int s=(ma+mi)>>1;
        if(solve.check(fsorted[s]))ma=s; else mi=s;
//         cout<<mi<<" "<<ma<<" "<<s<<endl;
    }
    cout<<fsorted[ma]<<endl;
}

//Hope is a good thing and maybe the best thing of all...
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <list>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
using namespace std;

#define trace(x) cerr << #x << "=" << x <<endl;
#define trace2(x, y) cerr << #x << "=" << x << " " << #y << "=" << y <<endl;
#define track(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) {cerr << x[i] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int i = 0; i < n; i++) {cerr << x[i] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}

#define MAX 1500
#define INF 1e9
#define MOD 1000000007

int n, k, t;
int bias = 2050;
int sum;

long long dp[2005][4500];
bool exist[2005][4500];

int a[2050];
bool hasLetter[2050];

long long solve(int i, int sumSoFar) {
    if (i == n+1) {
        if (sum + sumSoFar == t) {
            return 1;
        } else {
            return 0;
        }
    }
    if (!exist[i][sumSoFar + bias]) {
        long long ways = 0;

        if (hasLetter[i]) {
            ways += solve(i+1, sumSoFar+1);
            ways += solve(i+1, sumSoFar-1);
            ways %= MOD;
        } else {
            ways = solve(i+1, sumSoFar);
        }

        exist[i][sumSoFar + bias] = true;
        dp[i][sumSoFar + bias] = ways;
    }
    return dp[i][sumSoFar + bias];
}

int main() {
    cin >> n >> k >> t;
    for (int i = 0; i < k; i++) {
        cin >> a[i];
        hasLetter[a[i]] = true;
        sum += a[i];
    }

    long long ways = solve(1, 0);

    cout << ways << endl;
}


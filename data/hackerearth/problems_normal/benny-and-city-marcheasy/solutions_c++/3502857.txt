#include<iostream>
#include<algorithm>

using namespace std;

int ans = -(1e9), n, m, c;
int a[20][20], psum[20][(1<<20)], sumall;

void dfs(int i, int sum, int pos, int mask){
	if(pos == m - 1){
		psum[i][mask] = sum;
		psum[i][mask ^ (1 << pos)] = sum + a[i][pos];
	}else{
		dfs(i, sum, pos+1, mask);
		dfs(i, sum + a[i][pos], pos + 1, mask ^ (1 << pos));
	}
}

int getBits(int v){
	int ret = 0;
	while(v){
		ret += (v&1);
		v /= 2;
	}
	return ret;
}

int main(){
#ifdef _DEBUG
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif
	scanf("%d%d%d",&n,&m,&c);
	for(int i=0;i<n;++i){
		for(int j=0;j<m;++j){
			scanf("%d",&a[i][j]);
		}
	}
	for(int i=0;i<n;++i){
		dfs(i, 0, 0, 0);
	}

	for(int mask=0;mask<(1<<m);++mask){
		int maskx = ((1 << m) - 1) ^ mask;
		int cur = -c * getBits(mask);
		for(int j=0;j<n;++j){
			cur += max(psum[j][maskx], -c);
		}
		ans = max(ans, cur);
	}
	printf("%d\n",ans);



	return 0;
}
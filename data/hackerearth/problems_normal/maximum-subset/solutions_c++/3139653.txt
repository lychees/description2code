#include <iostream>
#include <algorithm>

#define P 1000000007
#define ll long long
using namespace std;
ll  pow(ll a, ll b, ll MOD) {
	ll x = 1, y = a;
    while(b > 0) {
        if(b%2 == 1) {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}
 
ll modinv(ll a, ll m) {
    return pow(a,m-2,m);
}

int next(int mask[], int n) {
    int i;
    for (i = 0; (i < n) && mask[i]; ++i)
        mask[i] = 0;
 
    if (i < n) {
        mask[i] = 1;
        return 1;
    }
    return 0;
}
 

int main()
{
	int t;
	cin >> t;
	while (t--) {
		int n;
		cin >> n;
		ll arr[n];
		for (int i = 0; i < n; i++) cin >> arr[i];
		int mask[n + 1];
		for (int i = 0; i < n; i++) mask[i] = 0;
		ll maxp = 0;
		while (next(mask, n)) {
			vector <int> v;

			for (int i = 0; i < n; i++) {
				if (mask[i]) v.push_back(arr[i]);
			}
			int vs = v.size();
			if (vs%2 != 0) continue;
			sort(v.begin(), v.end());

			long long res = 1;
			for (int i = 0; i < vs/2; i++) {
				res = (res*v[vs - 1 - i])%P;
			}
			for (int i = 0; i < vs/2; i++) {
				res = (res*modinv(v[i], P))%P;
			}
			maxp = max(maxp, (res+P)%P);
		}

		cout << maxp << endl;
	}

    return 0;
}

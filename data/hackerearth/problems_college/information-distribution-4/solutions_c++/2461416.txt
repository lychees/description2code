#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
//#define _LOCAL_
#ifdef _LOCAL_
#include "testlib.h"
/* rnd */
#endif

using namespace std;

#define dbg(x) cout << #x << " = " << (x) << endl
#define dbg2(x,y) cout << #x << " = " << (x) << ", " << #y << " = " << (y) << endl
#define dbg3(x,y,z) cout << #x << " = " << (x) << ", " << #y << " = " << (y) << ", " << #z << " = " << (z) << endl

template<class T> inline T cabs(const T &x) { return x > 0 ? x : (-x); }
template<class T> inline T gcd(const T &x, const T &y) { return (y == 0) ? x : gcd(y, x % y); }
template<class T> inline T lcm(const T &x, const T &y) { return x * y / gcd(x, y); }
template<class T> inline T sgn(const T &x) { return (x > 0) - (x < 0); }

#define out(x) cout << (x) << endl
#define out2(x,y) cout << (x) << " " << (y) << endl
#define out3(x,y,z) cout << (x) << " " << (y) << " " << (z) << endl

int prime[100];
int total_prime = 0;
bool vst[100];

void init() {
    memset(vst, 0, sizeof(vst));
    prime[total_prime ++] = 2;
    for(int i = 3; i < 100; i += 2) {
        if( !vst[i] ) {
            prime[total_prime ++] = i;
            for(int j = i + i; j < 100; j += i)
                vst[j] = 1;
        }
    }
    // 25, p7
    //dbg2(total_prime, prime[total_prime - 1]);
}

long long lcs(long long n, long long p) {
    if( n < p ) return 0;
    return n / p + lcs(n / p, p);
}

long long go(long long a, long long b, long long c) {
    long long res = 1;
    while( b ) {
        if( b & 0x1 )
            res= (res * a) % c;
        a = (a * a) % c;
        b >>= 1;
    }
    return res;
}

long long calc(long long n, long long m, long long P) {
    if( n < m ) return 0;
    if( n == m ) return 1 % P;
    long long ans = 1;
    for(int i = 0; i < total_prime; i ++) {
        long long x = lcs(n, prime[i]);
        long long y = lcs(m, prime[i]);
        long long z = lcs(n - m, prime[i]);
        ans = (ans * go(prime[i], x - y - z, P)) % P;
    }
    return ans;
}

long long get_mod(long long N, long long M, long long P) {
    if( N < M ) return  0LL % P;
    if( N == M ) return 1LL % P;
    long long ans = 1LL;
    for(int i = 0; ans && N && M && i < 60; i ++) {
        long long n = N % P;
        long long m = M % P;
        ans = (ans * calc(n, m, P)) % P;
        N = (N - n) / P;
        M = (M - m) / P;
    }
    return ans;
}

long long ext_gcd (long long a, long long b, long long &x, long long &y){
	int t, ret;
	if ( !b ) {
		x = 1, y = 0;
		return a;
	}
	ret = ext_gcd (b, a % b, x, y);
	t = x, x = y, y = t - a / b * y;
	return ret;
}

long long china(long long b[],long long w[], long long len){//x = b[len] mod w[len]
	long long  d, x, y, a = 0, m, n = 1, i;
	for (i = 0; i < len; i ++) n *= w[i];
	for (i = 0; i < len; i ++){
		m = n / w[i];
		d = ext_gcd (w[i],m,x,y);
		a = (a + y * m * b[i]) % n;
	}
	return (((a + n) % n) + n) % n;
}

long long b[100], w[100];

long long comb_mod(long long N, long long M, long long K) {
    vector<long long> fact;
    long long Mod = K;
    for(long long x = 2; Mod > 1 && x < 100; x ++) {
        if( Mod % x == 0 ) {
            fact.push_back(x);
            Mod /= x;
        }
    }
    vector<long long> vals;
    for(int i = 0; i < (int)fact.size(); i ++)
        vals.push_back(get_mod(N, M, fact[i]));
    for(int i = 0; i < (int)fact.size(); i ++) {
        b[i] = vals[i];
        w[i] = fact[i];
    }
    long long ans = china(b, w, (long long)fact.size());
    ans %= K; if( ans < 0 ) ans += K;
    return ans % K;
}

long long run(long long N, long long M, long long K) {
    N -= M;
    return comb_mod(N + M - 1, M - 1, K);
}

int main()
{
    init();
    int nt;
    scanf("%d", &nt);
    long long N, M, K;
    for(; nt > 0; nt --) {
        scanf("%lld %lld %lld", &N, &M, &K);
        printf("%lld\n", run(N, M, K));
    }
    return 0;
}

#include <algorithm>
#include <cstdio>
#include <iostream>
#include <vector>
#include <map>
#include <cstring>
#include <string>
#include <set>
#include <cmath>
#include <memory>
#include <functional>
#include <numeric>
#include <queue>
#include <sstream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const ull MOD = 1000000007;

bool visited[100007];
int dist[100007];
vector < pair<int, int>> tree[100007];

int main()
{
	int t; cin >> t;
	while (t--) {
		int n; cin >> n;
		for (int i = 0; i <= n; ++i) {
			tree[i] = vector<pair<int, int>>();
		}
		for (int i = 0; i < n - 1; ++i) {
			int a, b, w; cin >> a >> b >> w;
			tree[b].push_back(make_pair(a, w));
			tree[a].push_back(make_pair(b, w));
		}

		memset(dist, 0, sizeof(dist));
		memset(visited, 0, sizeof(visited));
		dist[1] = 0;
		queue<int> q;
		q.push(1);
		while (!q.empty()) {
			auto current = q.front();
			visited[current] = true;
			q.pop();

			for (auto node : tree[current]) {
				if (!visited[node.first]) {
					q.push(node.first);
					dist[node.first] = dist[current] + node.second;
				}
			}
		}
		int maxelement = max_element(dist + 1, dist + n + 1) - dist;

		memset(dist, 0, sizeof(dist));
		memset(visited, 0, sizeof(visited));
		dist[maxelement] = 0;
		q.push(maxelement);
		while (!q.empty()) {
			auto current = q.front();
			visited[current] = true;
			q.pop();

			for (auto node : tree[current]) {
				if (!visited[node.first]) {
					q.push(node.first);
					dist[node.first] = dist[current] + node.second;
				}
			}
		}
		int maxdistance = *max_element(dist + 1, dist + n + 1);

		if (maxdistance <= 100) cout << "0 " << maxdistance << endl;
		else if (maxdistance <= 1000) cout << "100 " << maxdistance << endl;
		else if (maxdistance <= 10000) cout << "1000 " << maxdistance << endl;
		else cout << "10000 " << maxdistance << endl;
	}
	return 0;
}

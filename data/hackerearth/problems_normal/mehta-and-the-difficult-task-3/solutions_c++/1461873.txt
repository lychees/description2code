#include "bits/stdc++.h"

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define x1 x12345
#define y1 y12345

using namespace std;

template <typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template <class _T> inline _T sqr(const _T& x) {return x * x;}
template <class _T> inline string tostr(const _T& a) {ostringstream os(""); os << a; return os.str();}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair < int, int > PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int c;
    a = 0;
    while (!isdigit(c = getchar()) && c != '-') {}
    char neg = 0;
    if (c == '-') {
        neg = 1;
        c = getchar();
    }
    while (isdigit(c)) {
        a = 10 * a + c - '0';
        c = getchar();
    }
    if (neg) a = -a;
}

template <typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

typedef vector <vector <long long> > matrix;

long long mod = 1000000007;

matrix operator*(const matrix &l, const matrix &r) {
    int n = l.size();
    int m = l[0].size();
    int k = r[0].size();
    matrix res(n, vector <long long>(k));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < k; ++j) {
            for (int z = 0; z < m; ++z) {
                res[i][j] += l[i][z] * r[z][j];
                res[i][j] %= mod;
            }
        }
    }
    return res;
}

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "war"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif
    int k = 4;
    matrix A(2 * (1 << k), vector <long long>(2 * (1 << k)));
    matrix B(2 * (1 << k), vector <long long>(2 * (1 << k)));

    for (int i = 0; i < (1 << k); ++i) {
        for (int j = 0; j < 10; ++j) {
            if (j < 4) {
                A[(i ^ (1 << j)) + (1 << k)][i]++;
                A[i ^ (1 << j)][i]++;
            } else {
                A[i + (1 << k)][i]++;
                A[i][i]++;
            }
        }
        A[(1 << k) + i][(1 << k) + i] = 1;
    }

    for (int i = 0; i < (1 << k); ++i) {
        for (int j = 0; j < 9; ++j) {
            if (j < 4) {
                B[(i ^ (1 << j)) + (1 << k)][i]++;
                B[i ^ (1 << j)][i]++;
            } else {
                B[i + (1 << k)][i]++;
                B[i][i]++;
            }
        }
        A[(1 << k) + i][(1 << k) + i] = 1;
    }

    const int K = 63;
    matrix pw[K];

    pw[0] = A;

    for (int i = 1; i < K; ++i) {
        pw[i] = pw[i - 1] * pw[i - 1];
    }

    int t = nxt();
    while (t--) {
        long long n = nxt<ll>();
        int mask = 0;
        mask = mask * 2 + nxt();
        mask = mask * 2 + nxt();
        mask = mask * 2 + nxt();
        mask = mask * 2 + nxt();

        matrix s(2 * (1 << k), vector <long long>(1));
        s[0][0] = 1;

        s = B * s;
        --n;
        for (int i = 0; i < K; ++i) {
            if (n & (1ll << i)) {
                s = pw[i] * s;
            }
        }
        s[(1 << k)][0]++;
        cout << s[mask + (1 << k)][0] << "\n";
    }


#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
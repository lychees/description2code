#include <bits/stdc++.h>
using namespace std;

#define MP make_pair
#define A first
#define B second

int N,M,K;
vector<pair<int,int> > adj[100013];
pair<pair<int,int>,int> edges[100013];

queue<int> frontier;
int dist[100013];
int bfs() {
	for (int i=1;i<=N;i++) dist[i] = 1e9;
	frontier.push(1);
	dist[1] = 0;
	while (frontier.size()>0) {
		int x = frontier.front();
		frontier.pop();
		for (auto i: adj[x]) {
			if (i.B>dist[x] && dist[x]+1<dist[i.A]) {
				dist[i.A] = dist[x]+1;
				frontier.push(i.A);
			}
		}
	}
	return (dist[N]==(int) 1e9) ? -1 : dist[N];
}

int main() {
	scanf("%d%d%d",&N,&M,&K);
	for (int i=0;i<M;i++) {
		int a,b;
		scanf("%d%d",&a,&b);
		edges[i] = MP(MP(a,b),1e9);
	}
	for (int i=0;i<K;i++) {
		int t,x;
		scanf("%d%d",&t,&x);
		edges[x-1].B = t;
	}
	for (int i=0;i<M;i++) {
		adj[edges[i].A.A].push_back(MP(edges[i].A.B,edges[i].B));
		adj[edges[i].A.B].push_back(MP(edges[i].A.A,edges[i].B));
	}
	printf("%d\n",bfs());
	
    return 0;
}

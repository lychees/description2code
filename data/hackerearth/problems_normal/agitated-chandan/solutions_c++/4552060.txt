#include<bits/stdc++.h>
using namespace std;
bool func(pair<int,int> a,pair<int,int> b)
{
	return b.second > a.second;
}
main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		vector<pair<int,int> > a[n+1];
		long long int max1=-1;
		for(int i=1;i<n;i++)
		{
			int f,e,w;
			scanf("%d %d %d",&f,&e,&w);
			a[f].push_back(make_pair(e,w));
			a[e].push_back(make_pair(f,w));
		}
	
        	int distance[n+1];
			for(int i=0;i<=n;i++)
			   distance[i]=0;
			queue<int> pq;
			pq.push(1);
			distance[1]=0;
			bool visited[n+1];
			memset(visited,0,sizeof(visited));
			visited[1]=1;
			while(pq.size())
			{
				int u = pq.front();
				pq.pop();
			//	visited[u]=1;
				for(vector<pair<int,int> > :: iterator p = a[u].begin();p!=a[u].end();p++)
				{
					int d = distance[u] + (*p).second;
					if( !visited[(*p).first])
					{
						visited[(*p).first]=1;
						distance[(*p).first]=d;
						pq.push((*p).first);
					}
				}
			}
			int pos=-1;
			for(int i=1;i<=n;i++)
			{
				if(max1<distance[i])
				{
					pos=i;
					max1=distance[i];
				}
			
		   		distance[i]=0;
			    visited[i]=0;
			}
			pq.push(pos);
			visited[pos]=1;
			distance[pos]=0;
			max1=0;
			while(pq.size())
			{
				int u = pq.front();
				pq.pop();
			//	visited[u]=1;
				for(vector<pair<int,int> > :: iterator p = a[u].begin();p!=a[u].end();p++)
				{
					int d = distance[u] + (*p).second;
					if(!visited[(*p).first])
					{
						visited[(*p).first]=1;
						distance[(*p).first]=d;
						pq.push((*p).first);
						if(max1<d)
						   max1=d;
					}
				}
			}
			if(max1<=100)
			{
				cout<<0;
				cout<<" "<<max1;
			}
			else if(max1<=1000)
			{
				cout<<100;
				cout<<" "<<max1;
			}
			else if(max1<=10000)
			   cout<<1000<<" "<<max1;
			else
			   cout<<10000<<" "<<max1;
			cout<<endl;
	}
}
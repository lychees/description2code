#include <iostream>
#include <cstring>
#include<stdio.h>
#include <vector>
#include <string>
#include <sstream>
using namespace std;
#define mod 1000000009
int main()
{
	
	string symb,ops;
	cin >> symb;
	cin >> ops;
  /*  string buf; // Have a buffer string
    stringstream ss(str); // Insert the string into a stream

    vector<string> tokens; // Create vector to hold our words

    while (ss >> buf)
        tokens.push_back(buf);*/
//	string symb=tokens[0];
//	string ops=tokens[1];
//	cout << symb+"\n";
//	cout << ops ;
	

int n=symb.length();
//cout << n;
	
	
	//preprocessing starts
	long long int F[n][n], T[n][n];
 
    // Fill diaginal entries first
    // All diagonal entries in T[i][i] are 1 if symbol[i]
    // is T (true).  Similarly, all F[i][i] entries are 1 if
    // symbol[i] is F (False)
    for (int i = 0; i < n; i++)
    {
        F[i][i] = (symb[i] == '0')? 1: 0;
        T[i][i] = (symb[i] == '1')? 1: 0;
    }
 
    // Now fill T[i][i+1], T[i][i+2], T[i][i+3]... in order
    // And F[i][i+1], F[i][i+2], F[i][i+3]... in order
    for (int gap=1; gap<n; ++gap)
    {
        for (int i=0, j=gap; j<n; ++i, ++j)
        {
            T[i][j] = F[i][j] = 0;
            for (int g=0; g<gap; g++)
            {
                // Find place of parenthesization using current value
                // of gap
                int k = i + g;
 
                // Store Total[i][k] and Total[k+1][j]
                long long int tik = T[i][k] + F[i][k];
                long long int tkj = T[k+1][j] + F[k+1][j];
 
                // Follow the recursive formulas according to the current
                // operator
                if (ops[k] == 'a')
                {
                    T[i][j] += (T[i][k]*T[k+1][j]);
                    F[i][j] += ((tik*tkj - T[i][k]*T[k+1][j]));
                }
                if (ops[k] == 'o')
                {//printf("here");
                    F[i][j] += (F[i][k]*F[k+1][j]);
                    T[i][j] += (tik*tkj - F[i][k]*F[k+1][j]);
                }
                if (ops[k] == 'x')
                {
                    T[i][j] +=( F[i][k]*T[k+1][j] + T[i][k]*F[k+1][j]);
                    F[i][j] += (T[i][k]*T[k+1][j] + F[i][k]*F[k+1][j]);
                }
                T[i][j]%=mod;
                F[i][j]%=mod;
            }
        }
    }
	//ends*/
	int q,l,r;
	cin >> q;
	string query;
	while(q--)
	{
	cin >> l;
	cin >> r;
	cin >> query;
	//cout << query;
	if (query=="false")
	{
		cout << F[l-1][r-1]%mod << endl;
	}
		
	if (query=="true")
		{cout << T[l-1][r-1]%mod << endl;
		}
	}
}

#include <iostream>
#include <cstdio>
#include<cmath>
#include<limits.h>
#include<algorithm>
using namespace std;
struct duo{
int num;
int index;
};
bool acompare(struct duo lhs, struct duo rhs) { return lhs.num < rhs.num; }
int main()
{
        int test_cases;
        scanf("%d",&test_cases);
        while(test_cases > 0)
        {
                int N,arr[10000],i=0,ans;
                scanf("%d",&N);
                struct duo arr1[N+1];
                for(int i=0;i<=10005;i++)
               /* {
                	left1[i]=INT_MAX;
                	left2[i]=INT_MAX;
                }*/
                while(i<N)
                {
                        scanf("%d",&arr[i]);
                        arr1[i].num=arr[i];
                        arr1[i].index=i;
                        i = i+1;
                }
               /* for(int i=0;i<N;i++)
                cout<<left1[arr[i]]<<endl;
                cout<<endl;*/
                stable_sort(arr1,arr1+N,acompare);
               /* for(int i=0;i<N;i++)
                {
                	if(left2[arr[i]]>=i)
                        left2[arr[i]]=i;
                        if(right2[arr[i]]<=i)
                        right2[arr[i]]=i;
                }
                for(int i=0;i<N;i++)
                {
                	cout<<left1[arr[i]]<<" "<<right1[arr[i]];
                	cout<<" "<<left2[arr[i]]<<" "<<right2[arr[i]]<<endl;
                }
                int maxim=0,x;
                for(int i=0;i<N;i++)
                {
                	if((x=max(abs(left1[arr[i]]-left2[arr[i]]),abs(right1[arr[i]]-right2[arr[i]])))>maxim)
                	maxim=x;
                }*/
                int maxim=0;
                for(int i=0;i<N;i++)
                {
                	if(abs(i-arr1[i].index)>maxim)
                	maxim=abs(i-arr1[i].index);
                }
                //your code here
                cout<<maxim<<endl;
                test_cases--;
        }
        return 0;
}
#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)

template<class T> inline void amin(T &a, T b) { if (a>b) a=b; }
template<class T> inline void amax(T &a, T b) { if (a<b) a=b; }

typedef long long LL;
typedef vector<LL> Arr;
typedef vector<Arr> Mat;

Mat identity(int n) {
    Mat r(n, Arr(n, 0));
    for (int i=0; i<n; i++) r[i][i] = 1;
    return r;
}
Mat mulMatMod(const Mat&a, const Mat&b, LL mod) {
    int m=a.size(), n=a[0].size(), p=b[0].size();
    Mat r(m, Arr(p, 0));
    for (int i=0; i<m; i++)
        for (int j=0; j<n; j++)
            for (int k=0; k<p; k++)
                r[i][k] = (r[i][k]+a[i][j]*b[j][k])%mod;
    return r;
}

Mat powMatMod(Mat a, LL b, LL mod) {
    Mat r = identity(a.size());
    for (;b; b>>=1) {
	if (b&1) r = mulMatMod(r, a, mod);
	a = mulMatMod(a, a, mod);
    }
    return r;
}

const int A[10] = {-1, 0, 1, 2, 0, 4, 3, 8, 1, 0};
const LL MOD = 1e9+7;
int T;
LL N;
int main() {
    Mat M(16, Arr(16));
    REP (S, 16) {
	for (int i=1; i<10; i++) {
	    M[S^A[i]][S]++;
	}
    }

    scanf("%d", &T);
    REP ($, T) {
	scanf("%lld", &N);
	Mat Z = powMatMod(M, N, MOD);
	LL sum = 0;
	for (int i=1; i<16; i++) sum += Z[i][0];
	sum %= MOD;
	printf("%d\n", (int)sum);
	
    }
    return 0;
}

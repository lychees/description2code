#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int bit[2000005];
ll x[100005],y[100005];
int n;
void update(int pos)
{
	while(pos<=n)
	{
		bit[pos]++;
		pos+= pos&(-pos);
	}
}
int query(int pos)
{
	int ans = 0;
	while(pos>0)
	{
		ans+= bit[pos];
		pos-= pos&(-pos);
	}
	return ans;
}
int main()
{
    //cout << "Hello World!" << endl;
    queue<ll> q;
    q.push(4);
    q.push(7);
    set<ll> s;
    set<ll> lucky;
    map<ll,int> rank;
    ll hi = 100000000;
    hi = hi*hi;
    while(!q.empty())
    {
    	ll cur = q.front();
    	s.insert(cur);
    	lucky.insert(cur);
    	if(cur<=hi){
    		q.push(cur*10 + 4);
    		q.push(cur*10 + 7);
    	}
    	q.pop();
    }
   // printf("total %d\n",s.size());
    int m;
    scanf("%d",&m);
    int i;
    for(i=0;i<m;i++)
    {
    	scanf("%lld%lld",&x[i],&y[i]);
    	s.insert(x[i]);
    	s.insert(y[i]);
    }
    int ra = 1;
    set<ll>::iterator I;
    for(I=s.begin();I!=s.end();I++)
    {
    
    	rank[*I] = ra++;
    }
    n = ra;
    for(I=lucky.begin();I!=lucky.end();I++){
    
    update(rank[*I]);
    }
    
    for(i=0;i<m;i++)
    {
    	int hi = rank[y[i]];
    	int lo = rank[x[i]];
    //	printf("query from %d to %d\n",lo,hi);
    	printf("%d\n",query(hi) - query(lo-1));
    }
    return 0;
}

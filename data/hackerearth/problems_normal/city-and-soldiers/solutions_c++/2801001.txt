#include <iostream>
using namespace std;

const int MAX = 100001;				
int size[MAX];
int parent[MAX];

void make_set(int x) {
	parent[x] = x;
	size[x] = 0;					// singleton set created
}

int find_set(int x) {					// returns representative element of the set to which x belongs
	if(parent[x] == x) {
		return x;
	}

	return find_set(parent[parent[x]]);		//path compression
}			

void union_set(int x, int y) {				//union by rank(or size) -> makes union O(lg n) directly from O(nlg n)
	int x_root = find_set(x);
	int y_root = find_set(y);

	if(x_root == y_root) {
		return;
	}
	parent[x_root] = y_root;
}

void make_leader(int x) {
	int x_root = find_set(x);
	parent[x] = x;
	parent[x_root] = x;
}

int main() {
	int N, Q; 
	cin >> N >> Q;
	for(int i = 1; i <= N; ++i) {
		make_set(i);
	}

	for(int i = 0; i < Q; ++i) {
		int a;
		cin >> a;
		if(a == 1) {
			int b, c;
			cin >> b >> c;
			union_set(b, c);
		}
		else if (a == 2) {
			int b;
			cin >> b;
			make_leader(b);
		}
		else if(a == 3) {
			int b;
			cin >> b;
			cout << find_set(b) << endl;
		}
	}
	return 0;
}
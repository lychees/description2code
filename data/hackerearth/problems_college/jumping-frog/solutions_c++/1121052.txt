#include <iostream>
#include <queue>
#include <vector>
#include <cstdlib>
#include <cstdio>
using namespace std;
 
class Frog{
int N;
vector< vector<int> > colors;
vector <int> l;
int* stones;
public:
Frog(int,int*);
int bfsThrough(int,int,int);
int bfs(int,int);
};
 
Frog::Frog(int n,int* st): colors(101),l(0,0)
{
N = n;
stones = st;
for(int i=0;i<N;i++)
colors[st[i]].push_back(i);
l.resize(N);
}
 
int Frog::bfsThrough(int S,int M,int E)
{
int s1 = bfs(S,M);
if(s1==-1)
return s1;
int s2 = bfs(M,E);
if(s2==-1)
return s2;
return (s1+s2);
}
 
int Frog::bfs(int A,int B)
{
if(A==B)
return 0;
vector<bool> v(N,false);
vector<bool> flag(101,false);
queue<int> q;
v[A]=true;
q.push(A);
l[A]=0;
int cur,x;
while(!q.empty())
{
cur = q.front();
q.pop();
if(!flag[stones[cur]]) {
	

for (vector<int>::iterator it = colors[stones[cur]].begin() ; it != colors[stones[cur]].end(); ++it)
{
if (*it==B)
return l[cur]+1;
if(!v[*it])
{
v[*it]=true;
q.push(*it);
l[*it]=l[cur]+1;
}
}

flag[stones[cur]]=true;

}
if(cur>0)
{
x = cur-1;
if(x==B)
return l[cur]+1;
if(!v[x])
{
v[x]=true;
q.push(x);
l[x]=l[cur]+1;
}
}
}
return -1;
}
 
int main()
{
int n,q,s,m,e;
scanf("%d",&n);
int* st=new int[n];
for(int i=0;i<n;i++)
scanf("%d",&st[i]);
Frog ans(n,st);
scanf("%d",&q);
for(int i=0;i<q;i++)
{
scanf("%d%d%d",&s,&m,&e);
printf("%d\n",ans.bfsThrough(s,m,e));
}
return 0;
}
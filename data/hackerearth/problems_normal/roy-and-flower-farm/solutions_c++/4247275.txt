#include <iostream>
#include <string.h>
using namespace std;

int main()
{
    long T, N, P;
    cin >> T;

    while(T--) {

    	cin >> N >> P;
    	long X[N], Y[N];
    	long Dp[N + 1][P + 1], ferti[N + 1][P + 1];

    	memset(Dp, 0, sizeof(Dp));
    	memset(ferti, 0, sizeof(ferti));

    	for (long n = 0; n <= N; n++) {
    		Dp[n][0] = P;
    	}
    	for (long p = 0; p <= P; p++) {
    		Dp[0][p] = P;
    	}
    	for (long n = 0; n < N; n++) {
    		cin >> X[n] >> Y[n];
    	}

    	for (long n = 1; n <= N; n++) {
    		for (long p = 1; p <= P; p++) {
    			if (p < Y[n - 1]) {
    				Dp[n][p] = Dp[n - 1][p];
    			}
    			else {
    				Dp[n][p] = max(Dp[n - 1][p], (Dp[n - 1][p - Y[n - 1]] + X[n - 1] - Y[n - 1]));
    			}
    		}
    	}

    	long c = 0;
        for(int i = 0; i <= P; i++) {
            if(Dp[N][i] == Dp[N][P]) {
                c = i;
                break;
            }
        }
    	cout << c << " " << Dp[N][P] << endl;
    }
    return 0;
}
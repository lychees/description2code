#include<bits/stdc++.h>
#define ll long long int
#define sc(v) v.size()
#define eb push_back
#define pb pop_back
#define stl(a,it) for(auto it: a)
#define f(i,a,b) for(int i=a;i<b;i++)
#define TC() int t;cin>>t;while(t--)
#define contain(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define mk make_pair
#define fi first
#define se second 
#define trace1(x)                cout <<#x<<": "<<x<<endl;
#define trace2(x, y)             cout <<#x<<": "<<x<<" | "<<#y<<": "<<y<< endl;
#define trace3(x, y, z)          cout <<#x<<": "<<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl;
#define trace4(a, b, c, d)       cout <<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl;
#define trace5(a, b, c, d, e)    cout <<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<<": "<<e<<endl;
#define mem(a,b) memset(a,b,sizeof(a))
#define vi vector<int>
#define vll vector<ll>
#define pi pair<int,int>
#define pll pair<ll,ll>
using namespace std;
struct vv {
	double x, y, z;
};
 
int main()
{
	int T;
	scanf("%d",&T);
	f(test,1,T+1)
	{
		int NN; 
		scanf("%d",&NN);
		double N = (double)NN;
		vv start, velocity;
		start.x=start.y=start.z=velocity.x=velocity.y=velocity.z=0;
		for (int i = 0; i < NN; i++)
		{
			vv tmp;
			int x,y,z;
			scanf("%lf%lf%lf",&tmp.x,&tmp.y,&tmp.z);
			start.x+=tmp.x/N;
			start.y+=tmp.y/N;
			start.z+=tmp.z/N;
			scanf("%lf%lf%lf",&tmp.x,&tmp.y,&tmp.z);
			velocity.x+=tmp.x/N;
			velocity.y+=tmp.y/N;
			velocity.z+=tmp.z/N;
		}
		int flag=0;
		if (velocity.x*velocity.x+velocity.y*velocity.y+velocity.z*velocity.z < .00000001)
			flag=1;
		double amt = start.x*velocity.x + start.y*velocity.y + start.z * velocity.z;
		amt /= -(velocity.x*velocity.x+velocity.y*velocity.y+velocity.z*velocity.z);
		printf("Case #%d: ",test);
		if (flag||amt < 0)
		{
			vv tmp;
			tmp.x = start.x;
			tmp.y = start.y;
			tmp.z = start.z;
			printf("%.8f %.8f\n",sqrt(tmp.x*tmp.x+tmp.y*tmp.y+tmp.z*tmp.z),0);
		}
		else
		{
			vv tmp;
			tmp.x = start.x + amt*velocity.x;
			tmp.y = start.y + amt*velocity.y;
			tmp.z = start.z + amt*velocity.z;
			printf("%.8f %.8f\n",sqrt(tmp.x*tmp.x+tmp.y*tmp.y+tmp.z*tmp.z),amt);
		}
	}
}
#include <bits/stdc++.h>
#define vec vector
#define sz(c) int(c.size())
#define FOR(i, a, b) for (int i = a; i < (b); ++i)
#define DOWN(i, a, b) for(int i = (a) - 1; i >= (b); --i)
#define cerr2 cerr << __func__ << ":" << __LINE__ << ": "
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef vec<int> vi;
const char eol = '\n';

int n, m;
vi l, r;

bool check(const vi &p) {
  FOR(j, 1, n) {
    if (p[j] < p[j - 1]) return false;
  }
  return true;
}

bool sorted(vi p) {
  FOR(i, 0, m) {
    sort(p.begin() + l[i] - 1, p.begin() + r[i]);
  }
  return check(p);
}

vi solve() {
  vi res;
  vi p(n);
  FOR(s, 0, n) {
    FOR(e, s, n) {
      FOR(f, 0, n) {
        if (f + e - s >= n) {
          break;
        }
        vec<bool> used(n);
        FOR(i, s, e + 1) {
          p[i] = f + i - s + 1;
          used[p[i] - 1] = true;
        }
        int cur = 0;
        FOR(i, 0, n) {
          if (i >= s && i <= e) continue;
          while (cur < n && used[cur]) cur += 1;
          p[i] = cur + 1;
          cur += 1;
        }
        if (!sorted(p)) {
          if (res.empty() || res > p) res = p;
        }
      }
    }
  }
  return res;
}

vi slow() {
  vi p(n);
  FOR(i, 0, n) p[i] = i + 1;
  do {
    if (!sorted(p)) return p;
  } while (next_permutation(p.begin(), p.end()));
  return vi();
}

void print(vi p) {
  if (p.empty()) {
    cerr << "All ok!";
  } else {
    FOR(i, 0, n) cerr << p[i] << " ";
  }
}

void stress() {
  n = rand() % 10 + 1;
  m = rand() % 10 + 1;
  l = vi(m);
  r = vi(m);
  FOR(i, 0, m) {
    l[i] = rand() % n + 1;
    r[i] = rand() % n + 1;
    if (l[i] > r[i]) swap(l[i], r[i]);
  }
  cerr << n << " " << m << " ";
  vi res = solve();
  vi ans = slow();
  if (res != ans) {
    FOR(i, 0, m) {
      cerr << l[i] << " " << r[i] << endl;
    }
    cerr << "FAIL!" << endl;
    cerr << "res = "; print(res); cerr << endl;
    cerr << "ans = "; print(ans); cerr << endl;
    assert(false);
  } else {
    cerr << "OK!" << endl;
  }
}

int main() {
  #ifdef STRESS
  srand(int(time(0)));
  while (true) stress();
  return 0;
  #endif
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout << fixed << setprecision(10);

  cin >> n >> m;
  l = vi(m);
  r = vi(m);
  FOR(i, 0, m) {
    cin >> l[i] >> r[i];
  }

  vi res = solve();

  if (res.empty()) {
    cout << "All ok!" << eol;
  } else {
    FOR(i, 0, n) cout << res[i] << " \n"[i + 1 == n];
  }
  
  return 0;
}

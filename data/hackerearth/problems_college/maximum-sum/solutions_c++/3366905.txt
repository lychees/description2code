#include <cstdio>
#include <iostream>
#include <algorithm>
#define MAX 1000000
#define ll long long
using namespace std;

int arr[ MAX + 1 ];
int tree[ 4 * MAX + 1 ];

void init( int node, int i, int j ) {
    if ( i == j ) {
        tree[ node ] = arr[ i ];
    }
    else {
        init( node * 2, i, ( i + j ) / 2 );
        init( node * 2 + 1, ( i + j ) / 2 + 1, j );
        int left = tree[ node * 2 ], right = tree[ node * 2 + 1 ];
        tree[ node ] = max( left, right);
    }
}

ll query( int node, int a, int b, int i, int j ) {
    if ( a > b || a > j || b < i ) {
        return ( 0 );
    }
    if ( a >= i && b <= j ) {
        return tree[ node ];
    }
    int left = query( node * 2, a, ( a + b ) / 2, i, j );
    int right = query( node * 2 + 1, ( a + b ) / 2 + 1, b, i, j );
    return  max( left, right );
}

void update( int node, int a, int b, int pos, int val ) {
    if ( a == b && a == pos ) {
        tree[ node ] =val;
        return;
    }
    if ( pos <= ( a + b ) / 2 ) {
        update( node * 2, a, ( a + b ) / 2, pos, val );
    }
    if ( pos > ( a + b ) / 2 ) {
        update( node * 2 + 1, ( a + b ) / 2 + 1, b, pos, val );
    }
    int left = tree[ node * 2 ], right = tree[ node * 2 + 1 ];
    tree[ node ] = max( left, right );
}

int main() {
    int N, Q, l, r, i;
    char c[2];
    scanf( "%d", &N );
    for ( i = 0; i < N; ++i ) {
        scanf( "%d", arr + i );
    }
    init( 1, 0, N - 1 );
    scanf( "%d", &Q );
    for ( i = 0; i < Q; ++i ) {
        scanf( "%s%d%d", c, &l, &r );
        if ( c[0] == 'U' ) {
            update( 1, 0, N - 1, l-1, r );
        }
        else {
            printf( "%lld\n", query( 1, 0, N - 1, l -1, r-1 ) );
        }
    }
    return 0;
}
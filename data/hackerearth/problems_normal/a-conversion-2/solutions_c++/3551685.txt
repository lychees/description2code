#include <iostream>
#include <queue>
#include <vector>
#include <string>
#include <cstdlib>

using namespace std;

class node {
	public:
		int cost;
		int pos;
		string str;
		friend bool operator< (const node &n1, const node &n2);
	    friend bool operator> (const node &n1, const node &n2);
};

bool operator< (const node &n1, const node &n2) {
	if (n1.cost < n2.cost) {
		return true;
	} else {
		return false;
	}
}

bool operator> (const node &n1, const node &n2) {
	if (n1.cost > n2.cost) {
		return true;
	} else {
		return false;
	}
}

class mycomparison
{
	bool reverse;
	public:
		mycomparison(const bool& revparam=false) {
			reverse=revparam;
		}
	  bool operator() (const node& lhs, const node&rhs) const {
	    if (reverse) return (lhs<rhs);
	    else return (lhs>rhs);
	  }
};

int main()
{
	int t;
	cin >> t;
	while (t--) {
		string start, end;
		cin >> start >> end;
		std::priority_queue<node, vector<node>, mycomparison> pq;
		node b;
		b.cost = 0;
		b.pos = 0;
		b.str = start;
		pq.push(b);
		while (!pq.empty()) {
			b = pq.top();
			pq.pop();
			if (b.pos == end.length()) {
				break;
			}
			node t = b;
			t.pos = b.pos + 1;
			t.cost = b.cost + abs(b.str[b.pos] - end[b.pos]);
			t.str = b.str;
			pq.push(t);
			int i = t.pos;
			while (i < end.length()) {
				t.cost = b.cost + 1 + abs(b.str[i] - end[b.pos]);
				t.str = b.str;
				char c = t.str[b.pos];
				t.str[b.pos] = t.str[i];
				t.str[i] = c;
				pq.push(t);
				i++;
			}
		}
		cout << b.cost << endl;
	}
	return 0;
}

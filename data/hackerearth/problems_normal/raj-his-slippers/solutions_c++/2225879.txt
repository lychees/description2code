#include <stdlib.h>
#include <time.h>
#include<stdio.h>
int max(int a,int b)
{
	return (a>b)?a:b;
}
int wakes_after_intime(int a, int b)
{
	if(a>=b)
		return 1;
	return 0;
}
int cant_go_to_store(int a, int b)
{
	if(a>=b)
		return 1;
	return 0;
}
main()
{
	int t;
	scanf("%d",&t);
	int t1=t;
	while(t--)
	{
		printf("Case %d: ",t1-t);
		int n,select_time,walking_time,i,j,wake_mins=0,wake_hours=0;
		scanf("%d",&n);
		char in_time[10], wake_time[10],store_opening_time[10];
		scanf("%s%s%s",in_time,wake_time,store_opening_time);
		scanf("%d%d",&walking_time,&select_time);
		if(n==0)
		{
			printf("-1\n");
			continue;
		}
		//printf("intime = %s\nwake time = %s\nstore opens ate %s\nwalking time= %d\nselect time = %d\n",in_time,wake_time,store_opening_time,walking_time,select_time);
		char friends[1+n][2][10];
		for(i=0;i<n;i++)
		{
			scanf("%s%s",friends[i][0],friends[i][1]);
			//printf("The stats of %dth friend = %s to %s\n ",i,friends[i][0],friends[i][1]);
		}
		int in_time_mins=0,in_time_hours=0;
		if(in_time[1]==':') // hours<10
		{
			in_time_hours=(int)in_time[0]-48;
			for(j=2;in_time[j]!='\0';j++)
			{
				in_time_mins=in_time_mins*10+ (int)in_time[j]-48;
			}
		}
		else
		{
			in_time_hours=((int)in_time[0]-48)*10 + (int)in_time[1]-48;
			for(j=3;in_time[j]!='\0';j++)
			{
				in_time_mins=in_time_mins*10+ (int)in_time[j]-48;
			}
		}
		in_time_mins+= in_time_hours*60;
		//printf("intime = %d\n",in_time_mins);
		if(wake_time[1]==':') // hours<10
		{
			wake_hours=(int)wake_time[0]-48;
			for(j=2;wake_time[j]!='\0';j++)
			{
				wake_mins=wake_mins*10+ (int)wake_time[j]-48;
			}
		}
		else
		{
			wake_hours=((int)wake_time[0]-48)*10 + (int)wake_time[1]-48;
			for(j=3;wake_time[j]!='\0';j++)
			{
				wake_mins=wake_mins*10+ (int)wake_time[j]-48;
			}
		}
		wake_mins+= wake_hours*60;
		int store_opening_hours=0,store_opening_mins=0;
		if(store_opening_time[1]==':') // hours<10
		{
			store_opening_hours=(int)store_opening_time[0]-48;
			for(j=2;store_opening_time[j]!='\0';j++)
			{
				store_opening_mins=store_opening_mins*10+ (int)store_opening_time[j]-48;
			}
		}
		else
		{
			store_opening_hours=((int)store_opening_time[0]-48)*10 + (int)store_opening_time[1]-48;
			for(j=3;store_opening_time[j]!='\0';j++)
			{
				store_opening_mins=store_opening_mins*10+ (int)store_opening_time[j]-48;
			}
		}
		store_opening_mins+= store_opening_hours*60;
		if(wakes_after_intime(wake_mins, in_time_mins))
		{
			//Raj wokes up after intime.... So, he can't go to store today.
			printf("-1\n");
			continue;
		}
		if(cant_go_to_store(store_opening_mins,in_time_mins))
		{
			//cant go to store because, the store opens only after hostel's intime
			printf("-1\n");
			continue;
		}
		int can_borrow[3600]={1},reqd_time= 2*walking_time+select_time,mini=5000,current_best=-1;
		if(reqd_time>in_time_mins)
		{
			printf("-1\n");
			continue;
		}
		int start=max(wake_mins,store_opening_mins-walking_time);
		//printf("See here...intime= %d\nwake_mins= %d\nstoreopen = %d\n",in_time_mins,wake_mins,store_opening_mins);
		//printf("Reqd duration of the borrowed slipper =%d\nMin_Start time of the slipper hunt = %d\n",reqd_time,start);
		if(start+reqd_time >=in_time_mins)
		{
			printf("-1\n");
			continue;
		}
		int yes=0;
		for(i=0;i<n;i++)
		{
			int st_hours=0, st_mins=0,end_hours=0,end_mins=0;
			if(friends[i][0][1]==':') // hours<10
			{
				st_hours=(int)friends[i][0][0]-48;
				for(j=2;friends[i][0][j]!='\0';j++)
				{
					st_mins=st_mins*10+ (int)friends[i][0][j]-48;
				}
			}
			else
			{
				st_hours=((int)friends[i][0][0]-48)*10 + (int)friends[i][0][1]-48;
				for(j=3;friends[i][0][j]!='\0';j++)
				{
					st_mins=st_mins*10+ (int)friends[i][0][j]-48;
				}
			}
			if(friends[i][1][1]==':') // hours<10
			{
				end_hours=(int)friends[i][1][0]-48;
				for(j=2;friends[i][1][j]!='\0';j++)
				{
					end_mins=end_mins*10+ (int)friends[i][1][j]-48;
				}				
			}
			else
			{
				end_hours=((int)friends[i][1][0]-48)*10 + (int)friends[i][1][1]-48;
				for(j=3;friends[i][1][j]!='\0';j++)
				{
					end_mins=end_mins*10+ (int)friends[i][1][j]-48;
				}
			}
			st_mins+=st_hours*60;
			end_mins+=end_hours*60;
			//printf("friend %d : \t%d,%d\n",i+1,st_mins, end_mins);
			if(end_mins<start  || start+reqd_time< st_mins)
			{
				printf("%d\n",i+1);
				yes=1;
				break;
			}
			else
			{
				if(end_mins+1+reqd_time<in_time_mins && end_mins+reqd_time < mini) 	
				{
					mini=end_mins+reqd_time;
					current_best=i;
				//	printf("\nCurrent best has been changed to %d\n",current_best);
				}
			}
				
		}
		if(yes)
		{
			continue;
		}
		if(current_best==-1)
		{
			printf("-1\n");
			continue;
		}
		else
			printf("%d\n",current_best+1);	
	}
	return 0;
}

/*input
*/

#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define PII pair<ll, ll>
#define f first
#define s second
#define F(i,a,b) for(ll i = (ll)(a); i <= (ll)(b); i++)
#define RF(i,a,b) for(ll i = (ll)(a); i >= (ll)(b); i--)
#define inf LLONG_MAX

ll n, m, k, t, num;
PII arr[100005];
ll M[100005];
vector<vector < PII > > graph; 
vector <bool> vis;

ll bfs()
{
    PII cur;
    queue < PII > q;
    q.push({1,0});
    ll ans=-1;
    while(!q.empty())
    {
    	cur=q.front();
   		q.pop();
   		if(cur.f==n)
   		{
   			ans=cur.s;
   			break;
   		}
    	if(vis[cur.f])
    		continue;
    	vis[cur.f]=1;
    	for(vector < PII >::iterator it = graph[cur.f].begin(); it != graph[cur.f].end(); it++)
    	{
        	if (!vis[(*it).f] && (*it).s>cur.s)
                q.push({(*it).f,cur.s+1});
        }
    }
    return ans;
}
int main() 
{
    ios_base::sync_with_stdio(false);cin.tie(0);
	cin>>n>>m>>k;;
	F(i,1,m)
	{
		cin>>arr[i].f>>arr[i].s;
		M[i]=inf;
	}
	F(i,1,k)
	{	
		cin>>t>>num;
		M[num]=t;
	}
    graph = vector<vector < PII > > (n+1);
    vis = vector <bool> (n+1,0);
    F(i,1,m)
    {
    	graph[arr[i].f].push_back({arr[i].s, M[i]});
    	graph[arr[i].s].push_back({arr[i].f, M[i]});
	}
	cout<<bfs()<<endl;
    return 0;
}
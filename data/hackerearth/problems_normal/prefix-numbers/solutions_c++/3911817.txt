#include <bits/stdc++.h>

using namespace std;

#define pb push_back

typedef unsigned int uint;
const int N = 9 * 4 * 7;

struct Matrix {
	uint a[N][N];
	
	Matrix() {
		memset(a, 0, sizeof a);
	}
	
	Matrix operator * (const Matrix &b) const {
		Matrix ans;
		for(int i = 0; i < N; ++i)
			for(int j = 0; j < N; ++j)
				for(int k = 0; k < N; ++k)
					ans.a[i][j] += a[i][k] * b.a[k][j];
		return ans;
	}
	
	Matrix operator ^ (long long k) const {
		Matrix ans;
		for(int i = 0; i < N; ++i) ans.a[i][i] = 1;
		Matrix b = *this;
		for(; k; k >>= 1) {
			if (k & 1) ans = ans * b;
			b = b * b;
		}
		return ans;
	}
} a;

int main() {
	long long n;
	scanf("%lld", &n);
	for(int i = 0; i < N; ++i)
		for(int lst = 1; lst < 10; ++lst)
			if ((i * 10) % lst == 0)
				a.a[i][(i * 10 + lst) % N] = 1;
	a = a ^ n;
	//f[] = [1, 0, ....] * a = sum of first row
	//ans = sum of f;
	uint sum = 0;
	for(int i = 0; i < N; ++i) sum += a.a[0][i];
	printf("%lld\n", 1LL * sum);
	return 0;
}

/*int f[2][N];
vector<int> adj[N];

int main(int argc, char **args) {
	for(int i = 0; i < N; ++i)
		for(int lst = 1; lst < 10; ++lst)
		if ((i * 10) % lst == 0)
			adj[(i * 10 + lst) % N].pb(i);
	int n = atoi(args[1]);
	f[0][0] = 1;
	int o = 0;
	while (n--) {
		o ^= 1;
		memset(f[o], 0, sizeof f[o]);
		for(int i = 0; i < N; ++i)
			for(int x : adj[i]) f[o][i] += f[o^1][x];
	}
	int sum = 0;
	for(int i = 0; i < N; ++i) sum += f[o][i];
	printf("%d\n", sum);
	return 0;
}*/
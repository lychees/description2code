M_SIZE = 1000001


def update(bitree, idx, val):
    while idx < M_SIZE:
        bitree[idx] += val
        idx += (idx & -idx)


def query(bitree, idx):
    res = 0
    while idx > 0:
        res += bitree[idx]
        idx -= (idx & -idx)
    return res


def magic():
    """
    1 <= test_cases <= 30
    1 <= n <= 100000
    0 <= a[i] <= 10^6
    """
    test_cases = int(raw_input())
    for test_case in xrange(test_cases):
        bitree = [0]*M_SIZE
        n = int(raw_input())
        a = []
        for i in xrange(n):
            a.append(int(raw_input()))
        aso = sorted(a)
        res = [0]*n
        i = n-1
        while i >= 0:
            res[i] = query(bitree, a[i])
            update(bitree, a[i], 1)
            i -= 1
        print ' '.join(str(x) for x in res)


magic()

#include <bits/stdc++.h>
using namespace std;
const long long mod=1e9+7;
 
#define llu long long unsigned
#define lld long long
#define ld long
#define sc(a) scanf("%lld",&a)
#define sc2(a,b) scanf("%lld%lld",&a,&b)
#define sc3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define scf(a) scanf("%lf",&a)
#define scf2(a,b) scanf("%lf%lf",&a,&b)
#define scf3(a,b,c) scanf("%lf%lf%lf",&a,&b,&c)
#define prL(a) printf("%lld\n",a)
#define prS(a) printf("%lld ",a)
#define prfL(a) printf("%lf\n",a)
#define prfS(a) printf("%lf ",a) 
#define swap(a,b,t) t=a;a=b;b=t
typedef pair<lld,lld> PA;

#define lim 1000003
#define lim2 1005
lld A[lim],B[lim];

void matMul(lld A[2][2],lld n,lld B[2][2]){
    lld i,j,m;
    if(n==1){
        for(i=0;i<2;i++){
            for(j=0;j<2;j++) B[i][j]=A[i][j];
        }
        return ;
    }
    lld C[2][2],D[2][2],a,b,c,d;
    matMul(A,n/2,C);
    D[0][0]=(C[0][0]*C[0][0]%mod+C[0][1]*C[1][0]%mod)%mod;
    D[0][1]=(C[0][0]*C[0][1]%mod+C[0][1]*C[1][1]%mod)%mod;
    D[1][0]=(C[1][0]*C[0][0]%mod+C[1][1]*C[1][0]%mod)%mod;
    D[1][1]=(C[1][0]*C[0][1]%mod+C[1][1]*C[1][1]%mod)%mod;
    if(n%2==0){
        for(i=0;i<2;i++){
            for(j=0;j<2;j++) B[i][j]=D[i][j];
        }
        return ;
    }
    B[0][0]=(A[0][0]*D[0][0]%mod+A[0][1]*D[1][0]%mod)%mod;
    B[0][1]=(A[0][0]*D[0][1]%mod+A[0][1]*D[1][1]%mod)%mod;
    B[1][0]=(A[1][0]*D[0][0]%mod+A[1][1]*D[1][0]%mod)%mod;
    B[1][1]=(A[1][0]*D[0][1]%mod+A[1][1]*D[1][1]%mod)%mod;
    return ;
}

lld findGcd(lld a,lld b){
    if(a==0) return b;
    else return findGcd(b%a,a);
}


int main(){
    lld i,j,k,s,top,n,a,b,c,x,y,z,m,t,q,T,sum,ans,count,pos,val;
    // sc(T);
    T=1;
    while(T--){
        sc(n);
        lld p;
        sc(p);
        for(i=2;i<=n;i++){
            sc(j);
            p=findGcd(p,j);
        }
        n=p;
        lld A[2][2],B[2][2];
        A[0][0]=1;
        A[0][1]=1;
        A[1][0]=1;
        A[1][1]=0;
        matMul(A,n+1,B);
        lld ans1,ans2;
        a=1;
        b=0;
        ans1=(B[0][0]*a%mod+B[0][1]*b%mod)%mod;
        ans2=(B[1][0]*a%mod+B[1][1]*b%mod)%mod;
        prL((ans1-ans2+mod)%mod);
    }
    return 0;
}


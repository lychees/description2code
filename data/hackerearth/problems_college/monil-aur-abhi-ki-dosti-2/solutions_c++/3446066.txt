/*********************************ENTER THE DRAGON**********************************/

#include <cstdio>
#include <iostream>
#include <cmath>
#include <string>
#include <list>
#include <vector>
#include <algorithm>
#include <functional>
#include <utility>
#include <set>
#include <map>
#include <complex>
#include <queue>
#include <stack>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string.h>
#include <cassert>
#include <climits>
using namespace std;

/************************************************************************************/

int pcnt[26], scnt[100100][26];

int Get(int x, int l, int r) {
	if (l == 0)
	    return scnt[r][x];
	return scnt[r][x] - scnt[l - 1][x];
}

int main()
{
   ios::sync_with_stdio(false);
   int t;
   cin >> t;
   while (t--) {
   	      string p, s;
   	      cin >> p >> s;
   	      int ss = (int)s.length(), pp = (int)p.length();
   	      for (int i = 0; i < 26; i++) {
   	      	   pcnt[i] = 0;
   	      }
   	      for (int i = 0; i < ss; i++) {
   	      	   for (int j = 0; j < 26; j++) {
   	      	   	    scnt[i][j] = 0;
   	      	   }
   	      }
   	      for (int i = 0; i < pp; i++) {
   	      	   pcnt[p[i] - 'a']++;
   	      }
   	      for (int i = 0; i < ss; i++) {
   	      	   scnt[i][s[i] - 'a'] = 1;
   	      }
   	      for (int i = 1; i < ss; i++) {
   	      	   for (int j = 0; j < 26; j++) {
   	      	   	    scnt[i][j] += scnt[i - 1][j];
   	      	   }
   	      }
   	      bool ok = false;
   	      
   	      for (int i = 0; i < ss; i++) {
   	      	   int st = i, e = i + pp - 1;
   	      	   
   	      	   if (e >= ss) break;
   	      	   bool found = true;
   	      	   for (int j = 0; j < 26; j++) {
   	      	   	    
   	      	   	    found &= ( Get(j, st, e) == pcnt[j] );
   	      	   }
   	      	   
   	      	   ok = found;
   	      	   if (ok) break;
   	      }
   	      
   	      if (ok) cout << "YES" << endl;
          else cout << "NO" << endl;
   }
   return 0;
}



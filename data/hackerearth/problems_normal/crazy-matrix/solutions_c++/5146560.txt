/*	I will not win immediately,
 *	but I will win definitely...
 */
#include<bits/stdc++.h>
#define opt		ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
//====================================================================================
#define li		long int
#define lli		long long int
//====================================================================================
#define sd(n)		scanf("%d",&n)
#define sld(n)		scanf("%ld",&n)
#define slld(n)		scanf("%lld",&n)
#define pd(n)		printf("%d\n",n)
#define pld(n)		printf("%ld\n",n)
#define plld(n)		printf("%lld\n",n)
#define pn		printf("\n")
//====================================================================================
#define rep(i,a,b)	for(i=a;i<b;i++)
#define repr(i,a,b)	for(i=a;i>b;i--)
#define repi(i,v)	for(i=v.begin();i!=v.end();i++)
#define elif		else if
#define memst(a,b)	memset(a,b,sizeof(a))
//====================================================================================
#define vi		vector<int>
#define vli		vector<li>
#define vlli		vector<lli>
//====================================================================================
#define pb		push_back
#define pob		pop_back
#define all(v)		v.begin(),v.end()
#define itr		iterator
#define sz		size()
#define lb		lower_bound
#define ub		upper_bound
#define mp		make_pair
#define pii		pair<int,int>
#define pll		pair<li,li>
#define vpi		vector<pii >
#define vpl		vector<pll >
#define F		first
#define S		second
//====================================================================================
#define mod		1000000007
#define MX1		100005
#define MX2		1000005
//====================================================================================
using namespace std;
//====================================================================================
li power(li a, li b){
		li ans=1L;
		while(b){
				if(b&1)
						ans=(ans*a)%mod;
                a=(a*a)%mod;
                b>>=1;
		}
		return ans;
}
//====================================================================================
li mmi(li n){
		return power(n,mod-2);
}
//====================================================================================
li gcd(li a, li b){
        if(a%b==0)
                return b;
        else
                return gcd(b,a%b);
}
//====================================================================================
void fs(int &x){
		bool neg=false;
		register int c;
		x=0;
		c=getchar();
		if(c=='-'){
				neg = true;
				c=getchar();
		}
		for(;(c>47 && c<58);c=getchar())
				x = (x<<1)+(x<<3)+c-48;
		if(neg)
				x *=-1;
}
//====================================================================================
/*-----------------MAIN CODE BEGINS NOW!-----------------*/

int nodes,n;
int visited[105][105];
int adj[105][105];

void init(){
        int i,j;
        rep(i,0,105){
                rep(j,0,105){
                        adj[i][j]=0;
                        visited[i][j]=0;
                }
        }
}

void dfs1(int x, int y){
        visited[x][y]=1;
        int i,j;
        rep(i,-1,2){
                rep(j,-1,2){
                        if(!visited[x+i][y+j] && adj[x+i][y+j]==1)
                                dfs1(x+i,y+j);
                }
        }
        if(x==n)
                nodes=1;
}

void dfs2(int x, int y){
        visited[x][y]=1;
        int i,j;
        rep(i,-1,2){
                rep(j,-1,2){
                        if(!visited[x+i][y+j] && adj[x+i][y+j]==2)
                                dfs2(x+i,y+j);
                }
        }
        if(y==n)
                nodes=1;
}

int main(){
        opt
        init();
        int i,j,ans[3];
        ans[0]=0,ans[1]=0,ans[2]=0;
        cin>>n;
        rep(i,1,n+1)
                rep(j,1,n+1)
                        cin>>adj[i][j];
        nodes=0;
        rep(i,1,n+1){
                if(adj[1][i]==1){
                        nodes=0;
                        dfs1(1,i);
                        if(nodes)
                                break;
                }
        }
        if(nodes==1)
                ans[1]=1;
        else
                ans[0]=1;
        nodes=0;
        rep(i,1,n+1){
                if(adj[i][1]==2){
                        nodes=0;
                        dfs2(i,1);
                        if(nodes)
                                break;
                }
        }
        if(nodes==1)
                ans[2]=1;
        else
                ans[0]=1;
        if(ans[2]==1 && ans[1]==1)
                cout<<"AMBIGUOUS\n";
        elif(ans[2]==1)
                cout<<"2\n";
        elif(ans[1]==1)
                cout<<"1\n";
        else
                cout<<"0\n";
		return 0;
}

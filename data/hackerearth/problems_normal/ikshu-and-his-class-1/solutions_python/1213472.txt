from math import factorial
def fac(n, m):
    ans = 1
    while n >= 1:
        ans = (ans * n) % m
        n -= 1
    return ans

idx=[]
size=[]
def root(x):
    while x!=idx[x]:
        #path compression start
        idx[x]=idx[idx[x]]
        #path compression end
        x=idx[x]
    return x

def connected(p, q):
    return root(p)==root(q)

def union(p, q):
    i=root(p)
    j=root(q)

    if size[i]<size[j]:
        idx[i]=j
        size[j]+=size[i]
    else:
        idx[j]=i
        size[i]+=size[j]

reacts, chems = map(int, raw_input().split(' '))
for t in range(reacts):
    idx.append(t)
    
size=[1]*reacts

for reaction in range(chems):
    sa=raw_input().split(' ')
    union(int(sa[0]), int(sa[1]))
for t in range(len(idx)):
    idx[t]=root(idx[t])

asdf = [0] * (1000000)
dictx = {}
for i in idx:
    if i not in dictx:
        dictx[i] = 1
    else:
        dictx[i] += 1
ans=1
for i in dictx:
    ans *= fac(dictx[i], 10**9+7)
    ans %= (10**9+7)
print(ans % (10**9+7))

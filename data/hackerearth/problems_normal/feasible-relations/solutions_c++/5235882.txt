#include<iostream>
#include<vector>
#include<string>

using namespace std;

#define MAX 1000002

int n,k,parent[MAX];
bool visited[MAX];
vector<int> adj[MAX];


void dfs_equals(int i, int par)
{
    parent[i]=par;

    visited[i]=1;

    //node *p;
    //int v;

    for (int j = 0; j<adj[i].size(); j++)
		if (visited[adj[i][j]]==0)
			dfs_equals(adj[i][j], par);
}

int main()
{
    int t,test_cases,i,u,v;
    string s;
    bool x;

    cin>>test_cases;

    for(t=1;t<=test_cases;t++)
    {
        vector<pair<int,int> > gu;

        x=0;

        cin>>n>>k;
        
        for (int i = 0; i<n; i++)
        	adj[i].clear();

        for(i=1;i<=n;i++)
        {
            //ge[i]=NULL;
            visited[i]=0;
        }

        for(i=1;i<=k;i++)
        {
            cin>>u;
            cin>>s;
            cin>>v;

            if(s.compare("=")==0)
            {
                //Graph_Equals(u,v);
                adj[u].push_back(v);
                adj[v].push_back(u);
            }
            else
            {
                gu.push_back(make_pair(u,v));
            }
        }

        for(i=1;i<=n;i++)
        {
            if(visited[i]==0)
            {
                dfs_equals(i,i);
            }
        }

        for(i=0;i<gu.size();i++)
        {
            u=gu[i].first;
            v=gu[i].second;

            //cout<<u<<" "<<parent[u]<<endl;
            //cout<<v<<" "<<parent[v]<<endl;

            if(parent[u]==parent[v])
            {
                x=1;
                break;
            }
        }

        if(x==1)
            cout<<"NO"<<endl;
        else
            cout<<"YES"<<endl;

    }
    return 0;
}

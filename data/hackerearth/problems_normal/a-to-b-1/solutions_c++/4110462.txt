/* NumeriX
   "Hard Work Beats Talent
   When Talent Doesn't Work Hard"
*/
#include <bits/stdc++.h>
#define ll long long int
#define sii(x) scanf("%d",&x)
#define pii(x) printf("%d\n",x)
#define sll(x) scanf("%lld",&x)
#define pll(x) printf("%lld\n",x)
#define present_set_map(container, element) (container.find(element) != container.end()) 
#define present_vec(container, element) (find(all(container),element) != container.end()) 
#define mp make_pair
#define all(x) x.begin(),x.end()
#define all_rev(x) x.rbegin(),x.rend()
#define pb push_back
#define fr first
#define se second
using namespace std;
ll arr[100005]; 
long int  modPow(long long int a,long long  int b,long long  int MOD)
{
    long long int x=1,y=a; 
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y)%MOD;
            //if(x>MOD) x%=MOD;
        }
        b/=2;
        y = (y*y)%MOD;
        //if(y>MOD) y%=MOD; 
    }
    return x;
}
 
ll modInverse(ll a,ll p)
{
	return modPow(a,p-2,p);
}

int main()
{
    ll n,option,index,val,prod=1,q,i,mod=1e9+7,ans,has_zero=0,ptr=1;
    sll(n);
    for(i=1;i<=n;i++)
    {
        sll(arr[i]);
        if(arr[i]!=0)
            prod=(prod%mod*arr[i]%mod);
        else if(arr[i]==0)
            has_zero++;
    }
    sll(q);
    while(q--)
    {
        sll(option);
        if(option==0)
        {
            scanf("%lld %lld",&index,&val);
            if(val==0 && arr[index]!=0)
                has_zero++;
            //printf("index= %lld  val=%lld\n",index,val);
            if(arr[index]!=0)
                prod=(prod%mod*modInverse(arr[index],mod)%mod)%mod;
            if(arr[index]==0 && val!=0)
                has_zero--;
            //printf("prod  after divison =%lld\n",prod);
            if(val!=0)
                prod=(prod%mod*val%mod)%mod;
            //printf("prod  after mul =%lld\n",prod);
            arr[index]=val;
        }
        else
        {
            //printf("prod=%lld\n",prod);
            scanf("%lld",&index);
            //printf("%lld ",ptr++);
            if(arr[index]!=0 && has_zero==0)
            ans=(prod%mod*modInverse(arr[index],mod)%mod)%mod;
            else if(arr[index]==0 && has_zero==1)
                ans=prod;
            else if(arr[index]!=0 && has_zero>0)
                ans=0;
            else if(arr[index]==0 && has_zero>0)
                ans=0;
            pll(ans);
        }
    }
}
#include <iostream>
#include <algorithm>
#define MOD 1000000007

using namespace std;


int t, n, k;

long long a[100000];

// factorials[n] = n!
long long factorials[100001];
// factorialspow[n] = (n!)^(MOD-2)
long long factorialspow[100001];

// (n^k) % MOD
long long fastpow( long long n, long long k) {
	if( k == 0 )
		return 1;
	if( k == 1 )
		return n;
	
	long long half = fastpow( n, k/2);
	
	// if odd
	// else even
	if( k % 2 )
		return (((half * half)%MOD) * n) % MOD;
	else
		return (half * half) % MOD;
	
}
int main()
{
	factorials[0] = 1;
	factorialspow[0] = 1;
	for( int i = 1; i <= 100000; i++ ) {
		factorials[i] = (i * factorials[i-1]) % MOD;
		factorialspow[i] = fastpow( factorials[i], MOD-2);
	}

    cin >> t;
    
    while( t-- ) {
    	cin >> n >> k;
    	for( int i = 0; i < n; i++ )
    		scanf("%lld",&a[i]);

		sort( a, a+n);
		
		long long ick, i_ck;
		long long sum = 0;
		for( int i = n; i > k; i-- ) {
			ick = (factorials[i] * ((factorialspow[i-k] * factorialspow[k])%MOD)) % MOD;
			i_ck = (factorials[i-1] * ((factorialspow[i-1-k] * factorialspow[k])%MOD)) % MOD;
			
			sum = (sum + (a[n-i]*(ick-i_ck))%MOD)%MOD;
		}
		
		sum = (sum + a[n-k])%MOD;
		
		cout << sum << endl;

    }
    
    return 0;
}

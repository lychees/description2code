//MO's algorithm sqrt decomposition N*SQRT(N)*___

#include <bits/stdc++.h>
using namespace std;

#define gc getchar_unlocked
#define pc putchar_unlocked
#define INF 10001000100
#define mod 1000000007

typedef long long int ll;
typedef unsigned long long llu;
typedef long double ld;

#define F first
#define S second
#define set(xx,value) memset(xx,value,sizeof(xx))
#define pb push_back
#define mk make_pair
#define sq(A) ((A)*(A))
#define len(vale) strlen(vale) 
#define sz(vale) (int)vale.size() 
#define f(i12,fa,fb) for(i12=fa;i12<fb;i12++)
#define fd(i12,fa,fb) for(i12=fa;i12>fb;i12--)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)
#define bits(vale) __builtin_popcount(vale)

#define set1(array,val,sz) for(int i13=0;i13<sz;i13++)array[i13]=val;
#define set2(array,val,sz1,sz2) for(int i13=0;i13<sz1;i13++)for(int i14=0;i14<sz2;i14++)array[i13][i14]=val;

#define all(a) a.begin(),a.end()
#define lb(a,x) (lower_bound(all(a),x)-a.begin())
#define ub(a,x) (upper_bound(all(a),x)-a.begin())


inline void sif(int &x){x=0;register char c=gc();int neg=0;while((c<'0'|| c>'9') && c!='-')c=gc();                  
if(c=='-') {neg=1; c=gc();}for(;c>='0' && c<='9';c=gc()){x=(x<<1)+(x<<3)+c-48;}if(neg==1)x=-x;
}
inline void pif(ll n){register int i=0;char ch[25];if(n<=0)if(n==0) pc('0');else pc('-'),n=n*(-1);while(n>0)
{ch[i]=n%10 +'0';n=n/10;i++;}while(i>0){pc(ch[i-1]);i--;}pc('\n');
}
inline void ssf(char *s){char ch;ch=gc();register int i=0;while((ch>=32)&&(ch<=110)){s[i++]=ch;ch=gc();}s[i]='\0';
}
inline void psf(char *s){int i=0;while(s[i]>=32 && s[i]<=127){pc(s[i]);i++;}pc('\n');
}

#define si(vale) scanf("%d",&vale)
#define pi(vale) printf("%d\n",vale)
#define pis(vale) printf("%d ",vale)
#define sl(vale) scanf("%lld",&vale)
#define pl(vale) printf("%lld\n",vale)
#define pls(vale) printf("%lld ",vale)
#define ss(vale)  scanf("%s",vale);
#define ps(vale) printf("%s\n",vale);
#define sld(vale) scanf("%Lf",&vale)
#define pld(vale) printf("%0.12Lf\n",vale)
#define sc(vale) scanf("%c",&vale)

void io()
{
       cin.sync_with_stdio(false);
}

typedef pair<int,int> pr;
typedef vector<int> vt;
// min_heap                                           
priority_queue<int,vector<int>,std::greater<int> > pn;
// max_heap
priority_queue<int> pm;
//


//#include "debug.h"


#define tcs() int testcase; scanf("%d",&testcase);while(testcase--) 
bool deb=false;
//-------------------------------------------------------

typedef struct query{
     int l,r,i;
}qry;
int pp;

const int N=100011;

int a[N];    
qry p[N];
ll ans[N],as;

bool comp(const qry &aa,const qry &ab)  // Comparater function
{
     if((aa.l)/pp==(ab.l)/pp)
     {    
          //if(aa.r==ab.r)
          //     return aa.l<ab.l;

          return aa.r < ab.r;
     } 
     return (aa.l)/pp < (ab.l)/pp;
}

/*------------------------BIT-------------------------*/

int n,bt[N]={0};
map<int,int> mp;

void update(int i,int val)
{
    while(i<=n)
    {
        bt[i]+=val;
        i=i+(i&(-i));
    }
}

ll bs=0;

ll query(int i)
{
    ll sum=0;
    while(i>0)
    {
        sum+=bt[i];
        i-=i&(-i);
    }
    return sum;
}
/*--------------------------------------------------------*/

inline void add(int l,int dir)  // Add function
{
    //tr(l,dir);
       if(dir==1)                       // 1 for left
              as+=query(l-1);
       else
              as+=bs-query(l);

       //tr(as,query(l));
       update(l,1);  
       bs++;
}

inline void rmv(int l,int dir)   // remove function
{
    //tr(l,dir);
       if(dir==1)
              as-=query(l-1);
       else
              as-=bs-query(l);
       update(l,-1);
       bs--;
}

int b[N];

int main(){
     int q,i,j,l,r,u,v;
     //scanf("%d%d",&n,&q);
     sif(n),sif(q);       
     pp=sqrt(n);

     for(i=0;i<n;i++)
          sif(a[i]),/*scanf("%d",&a[i]),*/b[i]=a[i];

     sort(b,b+n);

     f(i,0,n)                    // compression
            mp[b[i]]=i+1;
     f(i,0,n)
            a[i]=mp[a[i]];
                 
     //  query are on 0 based index..
     for(i=0;i<q;i++)
     {   
          //scanf("%d%d",&u,&v);
          sif(u),sif(v);
          p[i].l=--u;
          p[i].r=--v;
          p[i].i=i;
     }

     sort(p,p+q,comp);

     l=0;r=-1;                       
     for(i=0;i<q;i++)
     { 
          int right=p[i].r;
          int left=p[i].l;
           //tr(left,right,l,r);         
          while(r < right) {
               r++;
               add(a[r],2);
          }
          while(r > right) {
               rmv(a[r],2);
               r--;
          }

          while(l > left) {
               l--;
               add(a[l],1);
          }    
          
          while(l < left) {
               rmv(a[l],1);
               l++;
          }
          ////tr(as);           
          ans[p[i].i]=as;                    // set answer
     }

     for(i=0;i<q;i++)
          pif(ans[i]); //printf("\n");

     return 0;
} 

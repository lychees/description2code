#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
#define vtr vector
#define MOD 1000000007

#define pii pair<int, int >

#define vi vtr<int >
#define vc vtr<char >
#define vll vtr<ll >
#define vd vtr<double >

#define vvi vtr<vtr<int > >
#define vvc vtr<vtr<char > >

#define white 2
#define red 1
#define blue 0
#define gray 5
#define black 4

#define mp make_pair
#define pb push_back

#define F(i, begin, end) for(int i = begin; i < end; ++i)
#define RF(i, begin, end) for(int i = begin; i >= end; --i)
#define traverse(graph, it) for(typeof(graph.begin()) it = graph.begin(); it != graph.end(); it++)

#define sc(n) scanf("%d", &n)
#define scs(n) scanf("%s", n)
#define scll(n) scanf("%lld", &n)
#define scd(n) scanf("%lf", &n)

int f(vvi &a, int N, vvi &dp, int i, int j) {
	if(i == N && j == N)
		return 0;

	if(dp[i][j] != -1)
		return dp[i][j];

	int first = 0, last = 0;
	if(i + 1 <= N)
		first = a[i][j] + f(a, N, dp, i + 1, j);

	if(j + 1 <= N)
		last = a[i][j] + f(a, N, dp, i, j + 1);

	return dp[i][j] = max(first, last);
}

int main() {
	int t;
	sc(t);

	while(t--) {
	int n, c;
	sc(n); sc(c);

	vvi a(n + 1), dp(n + 1);
	F(i, 0, n + 1) { a[i].resize(n + 1, 0); dp[i].resize(n + 1, -1); }

	F(i, 1, n + 1) F(j, 1, n + 1) sc(a[i][j]);

	int coin = f(a, n, dp, 1, 1);
	int diff = (coin - c);
	if(diff < 0)
		cout << "-1" << endl;
	else
		cout << diff << endl;
	}
	return 0;
}


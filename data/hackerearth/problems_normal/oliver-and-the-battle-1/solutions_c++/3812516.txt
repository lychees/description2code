#include <bits/stdc++.h>
#define pld(x) printf("%lld", x)
#define pldn(x) printf("%lld\n", x)
#define pd(x) printf("%d", x)
#define pdn(x) printf("%d\n", x)
#define ps(x) printf("%s", x)
#define psn(x) printf("%s\n", x)
#define sd(x) scanf("%d", &x)
#define sld(x) scanf("%lld", &x)
#define ss(x) scanf("%s", &x)
#define mp make_pair
#define pb(x) push_back(x)
#define ll long long
#define kk 100000
typedef long long int int64;
using namespace std;

int a[1005][1005];
int ans[1005][1005];

int n,m;

int bfs(int x, int y) {

    queue<pair<int,int> >q;

    q.push(make_pair(x,y));
    ans[x][y] = 1;
    int c = 0;
    c++;

    while(!q.empty()) {
        x = q.front().first;
        y = q.front().second;
        q.pop();

        for(int i = -1 ; i<=1; i++ )
            for(int j = -1; j<=1; j++)
                if(ans[x+i][y+j] == 0 && a[x+i][y+j] == 1)
                {
                    c++;
                    q.push(make_pair(x+i,y+j));
                    ans[x+i][y+j] = 1;
                }
    }

    return c;
}

int main()
{
	int k,i,j,t,x,y;

    //sd(t);
    cin>>t;

    while(t--) {
        cin>>n>>m;
        memset(ans, 0,sizeof ans);
        memset(a, 0 , sizeof a);
        for(i=0;i < n;i++) {
            for(j=0;j < m;j++) {
                sd(a[i][j]);
            }
        }
        int mix = 0;
        int count=0;

        for(i=0;i < n;i++) {
            for(j=0; j < m; j++) {
                if(ans[i][j] == 0 && a[i][j] == 1) {
                    //cout<<"entered"<<endl;
                    count++;
                    int xx = bfs(i,j);
                    if(mix < xx) {
                        mix = xx;
                    }
                }
            }
        }

        cout<<count<< " " <<mix<<endl;
    }

    return 0;
}
/*

        if(isvalid(i,j+1) == true && ans[i][j+1] == 0) {
            q.push(make_pair(i,j+1));
            ans[i][j+1] = 1;
            c++;
        }

        if(isvalid(i+1,j) == true && ans[i+1][j] == 0) {
            q.push(make_pair(i+1,j));
            ans[i+1][j] = 1;
            c++;
        }

        if(isvalid(i+1,j-1) == true && ans[i+1][j-1] == 0) {
            q.push(make_pair(i+1,j-1));
            ans[i+1][j-1] = 1;
            c++;
        }

        if(isvalid(i,j-1) == true  && ans[i][j-1] == 0) {
            q.push(make_pair(i,j-1));
            ans[i][j-1] = 1;
            c++;
        }
        if(isvalid(i-1,j-1) == true && ans[i-1][j-1] == 0) {
            q.push(make_pair(i-1,j-1));
            ans[i-1][j-1] = 1;
            c++;
        }

        if(isvalid(i-1,j) == true && ans[i-1][j] == 0) {
            q.push(make_pair(i-1,j));
            ans[i-1][j] = 1;
            c++;
        }

        if(isvalid(i+1,j+1) == true && ans[i+1][j+1] == 0) {
            q.push(make_pair(i+1,j+1));
            ans[i+1][j+1] = 1;
            c++;
        }
        */

/*

2
4 6
0 0 0 1 1 0
1 1 0 0 0 0
0 1 1 1 1 1
0 0 1 1 1 1
6 4
1 1 1 1
0 0 0 0
0 1 0 0
1 0 1 0
1 0 0 0
1 0 0 0

*/

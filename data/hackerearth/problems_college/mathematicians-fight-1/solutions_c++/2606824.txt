#include<bits/stdc++.h>
#define ll long long int
#define test_case ll t; cin >> t; for(;t>0;t--)
#define gcd __gcd
#define check(x) cout<<"Value of "<<#x<<" is------- "<<x<<endl

using namespace std;

void fastio()
{
   ios_base::sync_with_stdio(0);
   cin.tie(NULL);
   cout.tie(NULL);
}

long long pow(int a, int b, int MOD)
{
   long long x=1,y=a;
   while(b > 0)
  {
      if(b%2 == 1)
      {
         x=(x*y);
         if(x>MOD) x%=MOD;
      }
 
      y = (y*y);
      if(y>MOD) y%=MOD;
      b /= 2;
  }
 
return x;
}
 
long long InverseEuler(int n, int MOD)
{
   return pow(n,MOD-2,MOD);
}
 
long long C(int n, int r, int MOD)
{
    vector<long long> f(n + 1,1);
    for (int i=2; i<=n;i++)
    f[i]= (f[i-1]*i) % MOD;
 
return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
} 
/*------------------------------------------------------------------------------------------------------------------------*/

ll ispower ( ll x)
{
  return ((x != 0) && !(x & (x - 1)));
}

ll nextpower(ll n)
{
  ll count = 0;
 
  /* First n in the below condition is for the case where n is 0*/
  if (n && !(n&(n-1)))
    return n;
 
  while( n != 0)
  {
    n  >>= 1;
    count += 1;
  }
 
  return 1<<count;
}

int main(void)
{
	fastio();  
	ll t;   
	cin >> t; 
	for(;t>0;t--)
    {
    	ll n,i=1,count=0,count1=0,j,temp1,temp;
    	cin >> n;
    
        if(ispower(n)==1)
        cout<< 1 << endl;
        
        else
        {
		
        temp=nextpower(n);
        
        temp=temp/2;
        

	    temp1=n-temp;
	    ll ans=1;
	    ll k=1;
		
		while(k<=temp1)
		{
			ans=ans+2;
			k++;
		}  
		
		cout<< ans << endl;
	}
	}
return 0;
}
  
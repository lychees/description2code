#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const ll LIM = (ll) 1e12;
const int N = 21;
string s;
ll dp[N][15], res[N][5];

void init() {
	int n = s.size();
	repu(i, 0, n) {
		dp[i][1] = s[i] - '0';
		repu(k, 2, tmin(14, n + 1 - i)) {
			dp[i][k] = 10 * dp[i][k - 1] + (s[i + k - 1] - '0');
		}
	}
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest;
    cin >> ntest;
    while (ntest--) {
    	cin >> s;
    	init();
    	int n = s.size();
    	if (n < 4) {
    		printf("unlucky\n"); continue;
    	}
    	ll maxi = -1;
    	mem(res, -1);
    	if (s[0] == '0') {
    		res[0][1] = 0;
    	}
    	else {
    		res[0][1] = s[0] - '0';
    		repu(i, 1, tmin(13, n)) {
    			res[i][1] = 10 * res[i - 1][1] + (s[i] - '0');
    			if (res[i][1] > LIM) {
    				res[i][1] = -1;
    				break;
    			}
    		}
    	}
    	repu(k, 2, 5) {
    		repu(i, k - 1, n) {
    			repu(j, tmax(i - 13, 0), i) {
    				if (res[j][k - 1] >= 0) {
    					if (i - j == 1) amax(res[i][k], res[j][k - 1] + dp[j + 1][1]);
    					else if (s[j + 1] != '0' && dp[j + 1][i - j] <= LIM) {
    						amax(res[i][k], res[j][k - 1] + dp[j + 1][i - j]);
    					}
    				}
    			}
    			if (i == n - 1 && k == 4) amax(maxi, res[n - 1][4]);
    		}
    	}
    	if (maxi < 0) printf("unlucky\n");
    	else printf("%lld\n", maxi);
    }
    return 0;
}

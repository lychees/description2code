#include <iostream>

#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

typedef long long llong;

#define MAXN 2504
int N;
llong S, M, P;
int H[MAXN];

const llong INF = 1000000000000000002LL;

llong solve() {
   if (N == 1) return 0;

   vector<int> sorted_h(H, H+N);
   sort(sorted_h.begin(), sorted_h.end());
   sorted_h.erase( unique(sorted_h.begin(), sorted_h.end()), sorted_h.end() );
   const int K = sorted_h.size();
   if (K == 1)
      return S * (N-1);

   vector<llong> DP( K, -INF );
   for (int j = 0; j < K; ++j) {
      llong cost = (H[0] >= sorted_h[j]) ?
                    M * (H[0] - sorted_h[j]) :
                    P * (sorted_h[j] - H[0]);
      DP[j] = -cost;
   }

   //for (int x : DP) cerr << x << ' '; cerr << endl;

   for (int n = 1; n < N; ++n) {
      llong max1 = -INF, max2 = -INF;
      for (int j = 0; j < K; ++j) {
         if (DP[j] > max1)
            max2 = max1, max1 = DP[j];
         else if (DP[j] > max2)
            max2 = DP[j];
      }

      vector<llong> newDP( K, -INF );
      for (int j = 0; j < K; ++j) {
         // match nth building to height sorted_h[j]
         llong cost = (H[n] >= sorted_h[j]) ?
                      M * (H[n] - sorted_h[j]) :
                      P * (sorted_h[j] - H[n]);

         // match
         newDP[j] = max(newDP[j], DP[j] - cost + S);

         // do not match
         if (DP[j] != max1)
            newDP[j] = max(newDP[j], max1 - cost);
         else
            newDP[j] = max(newDP[j], max2 - cost);
      }
      DP = newDP;
   // for (int x : DP) cerr << x << ' '; cerr << endl;
   }

   llong res = max(*max_element(DP.begin(), DP.end()), 0LL);
   return res;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   cin >> N >> S >> M >> P;
   for (int i = 0; i < N; ++i)
      cin >> H[i];

   llong res = solve();
   cout << res << endl;

   return 0;
}

#include <iostream>
#include <string>
#include <sstream>
#include <vector>
using namespace std;

int main()
{
	string line;
	getline(cin, line);
	stringstream stream(line);
	int numSlots, numColors;
	stream >> numSlots >> numColors;
	
	vector<int> baseVals, colorIds;
	cerr << "Hello." << endl;
	
	getline(cin, line);
	cerr << "Line1: " << line << endl;
	stringstream baseStream(line);
	for (int i = 0; i < numColors; ++i)
	{
		int baseVal;
		baseStream >> baseVal;
		baseVals.push_back(baseVal);
	}
	
	getline(cin, line);
	cerr << "Line2: " << line << endl;
	stringstream colorStream(line);
	for (int j = 0; j < numSlots; ++j)
	{
		int colorId;
		colorStream >> colorId;
		
		// Start indices at 0
		int adjustedId = colorId - 1;
		colorIds.push_back(adjustedId);
	}
	
	int prevVal = 0; // Used to ensure numbers increase
	for (int slotId = 0; slotId < numSlots; ++slotId)
	{
		int colorId = colorIds[slotId];
		int baseVal = baseVals[colorId];
		
		cerr << "ColorId: " << colorId << " BaseVal: " << baseVal << endl;
		
		for (int tryVal = (1 + prevVal / baseVal) * baseVal; ; tryVal += baseVal)
		{
			cerr << "TRYING:" << tryVal << endl;
			bool isPrime = true;
			for (int oBaseId = colorId + 1; oBaseId < numColors; ++oBaseId)
			{
				int oBase = baseVals[oBaseId];
				
				if (tryVal >= oBase && tryVal % oBase == 0)
				{
					isPrime = false;
					break;
				}
			}
			
			if (isPrime)
			{
				cerr << "PRIME." << tryVal << endl;
				prevVal = tryVal;
				break;
			}
		}
	}
	
	cout << prevVal << endl;
	
    return 0;
}

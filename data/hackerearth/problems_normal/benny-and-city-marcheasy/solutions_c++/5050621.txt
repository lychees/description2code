// hackerearth file
#include<bits/stdc++.h>
#include<math.h>
#include<cmath>
#include<string>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(_vvv) (int)(_vvv.size())
#define all(_v) (_v).begin(),(_v).end()
#define gi(x) scanf("%d",&x)
#define gl(x) scanf("%ld",&x)
#define gll(x) scanf("%64d",&x)
#define pii pair<int,int>
typedef long long ll;
const ll MOD = 1e9+7;
//const int INF = 0x7f7f7f7f;
const int INF = 111111;
const double eps = 1e-6;
//const long long INF = 1e18;

const int MAXN = 111111;
int arr[22][22];
int row_sum[22],col_sum[22];

int main() {
	ios_base::sync_with_stdio(false);

    int n,m,c; cin >> n >> m >> c;

	int tot_sum = 0;
	for (int i = 0; i < n; i ++) {
		for (int j = 0; j < m; j ++) {
			int x; cin >> x;
			arr[i][j] = x;
			row_sum[i] += x;
			tot_sum += x;
		}
	}

	int ans = -INF;
	for (int i = 0; i < (1 << n); i ++) {
		int temp_sum = tot_sum;
		for (int j = 0; j < n; j ++) {
			if(i & (1 << j)) {
				temp_sum -= row_sum[j];
			}
		}

		int cnt = __builtin_popcount(i);
		
		memset(col_sum,0,sizeof col_sum);
		for (int j = 0; j < m; j ++) {
			for (int ii = 0; ii < n; ii ++) {
				if(!(i & (1 << ii))) {
					col_sum[j] += arr[ii][j];
				}
			}
		}

		sort(col_sum,col_sum + m);

		ans = max(ans,temp_sum - cnt * c);
		for (int j = 0; j < m; j ++) {
			ans = max(ans,temp_sum - col_sum[j] - (j + cnt + 1) * c);
			temp_sum -= col_sum[j];
		}
	}

	cout << ans << '\n';
	
	return 0;
}

#include <iostream>
#include <cmath>
#include <bits/stdc++.h>
using namespace std;

int gcd(int a, int b)
{
    if (a == 0)
        return b;
    return gcd(b%a, a);
}

void SieveOfEratosthenes(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    bool prime[n+1];
    memset(prime, true, sizeof(prime));
    long int g,c=0;
    for (int p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (int i=p*2; i<=n; i += p)
                prime[i] = false;
        }
        
    }
 
    // Print all prime numbers
    /*for (int p=2; p<=n; p++)
       if (prime[p])
          cout << p << " ";*/
          for(int i=1;i<n;i++)
          {
          	g=gcd(n,i);
          	if(g==1)
          	c++;
          	
          }
         // cout<<"valur of relative prime="<<c<<endl;
        /* if(n==1)
        {
        	cout<<"Correct"<<endl;
        	return ;
        	
        }*/
        
          if(prime[c]==1 && n!=2&&n!=1)
        cout<<"Correct"<<endl;
        else
        cout<<"Incorrect"<<endl;
}
int main()
{
	long int t,n;
	cin>>t;
	while(t--)
	{
		cin>>n;
		SieveOfEratosthenes(n);
		//cout<<"first ittration"<<endl;
		
		
	}
	
	
	return 0;
}
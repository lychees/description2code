#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <vector> 
#include <list>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <fstream>
#include <ctime>
#include <cassert>
#include <stack>
#include <bitset>
#include <unordered_map>
using namespace std;

typedef long long int ll;
typedef pair<int, int > pii;

#define MOD 1000000007
#define pb push_back
#define MAX 1000005
#define INF 99999999
#define gc getchar_unlocked

int input()
{
	int t=0; char c;
	c=gc();
	while(c<'0' || c>'9')
	c=gc();
	while(c>='0' && c<='9')
	{ t=(t<<3)+(t<<1)+c-'0'; c=gc();}
	return t;
}

vector<int> p(MAX, 1);
vector<int> primes;

map<int, vector<int> > mp;

void sieve() {
	p[0] = 0, p[1] = 0;
	for(int i=2;i<MAX;i++) {
		if(p[i]) {
			for(int j=2*i;j<MAX;j+=i)
				p[j] = 0;
			primes.push_back(i);
		}
	}
}

void pre(int nn) {
	for(int i=2;i<=nn;i++) {
		bool inserted = false;
		int cnt = 0;
		int num = i;
		int sq = sqrt(num);
		if(p[i] == 1) {
			mp[1].push_back(i);
			continue;
		}
		for(int j=0;primes[j] <= sq;j++) {
			if(num%primes[j] == 0) {
				cnt++;
				while(num%primes[j] == 0)
					num /= primes[j];
				if(p[num] == 1) {
					mp[cnt+1].push_back(i);
					inserted = true;
					break;
				}
			}
		}
		if(!inserted) {
			if(num != 1)
				cnt++;
			mp[cnt].push_back(i);
		}
	}
}

void solve()
{
	int n, q, k;
//	n = input();
//	q = input();
	cin>>n>>q;
	pre(n);
	while(q--) {
//		k = input();
		cin>>k;
		if(mp.find(k) == mp.end())
			cout<<"0\n";
		else {
			vector<int> r = mp[k];
			int c = upper_bound(r.begin(), r.end(), n) - r.begin();
			cout<<c<<"\n";
		}		
	}
}

int main()
{
	std::ios::sync_with_stdio(false);
	// freopen ("C:\\Users\\Ritesh\\Desktop\\Coding\\Codeforces\\input.txt","r",stdin);
	int t;
	//cin>>t;
	sieve();
	t = 1;
	while(t--)
	{
		solve();
	}
	return 0;
}
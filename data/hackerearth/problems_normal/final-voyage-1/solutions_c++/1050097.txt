#include <iostream>
#include <algorithm>
using namespace std;


int knapSack(int W, int wt[], int val[], int n)
{
   int i, w;
   int K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
 
   return K[n][W];
}

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    	int n,w;
    	cin>>n>>w;
    	int * wt = new int[n];
    	int * val = new int[n];
    
    	for(int i=0;i<n;i++)
    		cin>>wt[i];
    	for(int i=0;i<n;i++)
    		cin>>val[i];
    	
    	int d = knapSack(w,wt,val,n);
    	cout<<d<<endl;
    	delete [] wt;
    	delete [] val;
    }
    return 0;
}

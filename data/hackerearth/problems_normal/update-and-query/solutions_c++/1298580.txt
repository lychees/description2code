#include<bits/stdc++.h>
using namespace std;

const int N=200010;
typedef long long ll;
const int inf=1e9+9;

int a[N];
int tree[2][4*N];
int m,n;
int minV,maxV;

using namespace std;

void init(int node,int l,int r) {
    if(l==r) {
        tree[0][node]=tree[1][node]=a[l];
        return;
    }
    init(node*2,l,(l+r)/2);
    init(node*2+1,1+(l+r)/2,r);
    tree[0][node]=min(tree[0][node*2],tree[0][node*2+1]);
    tree[1][node]=max(tree[1][node*2],tree[1][node*2+1]);
    return;
}
void update(int node,int l,int r,int x,int y) {
    if(l>r||l>y||r<x) {
        return;
    }
    if(l==r) {
        tree[0][node]=tree[1][node]=a[l];
        return;
    }
    update(node*2,l,(l+r)/2,x,y);
    update(node*2+1,1+(l+r)/2,r,x,y);
    tree[0][node]=min(tree[0][node*2],tree[0][node*2+1]);
    tree[1][node]=max(tree[1][node*2],tree[1][node*2+1]);
    return;
}
void queryU(int x,int v) {
    a[x]=v;
    update(1,1,n,x,x);
}
void get(int node,int l,int r,int x,int y) {
    if(y<l||r<x) {
        return;
    }
    if(x<=l&&y>=r) {
            minV=min(minV,tree[0][node]);
            maxV=max(maxV,tree[1][node]);
            return;
    }
    get(node*2,l,(l+r)/2,x,y);
    get(node*2+1,1+(l+r)/2,r,x,y);
    return;
}
void queryQ(int x,int c) {
    if(c<0) {
        puts("-1 -1");
        return;
    }
    int Vmin=a[x]-c,Vmax=a[x]+c;
    int l=x+1,r=n,mid,res=x;
    while(l<=r) {
        int mid=(l+r)/2;
        minV=inf,maxV=-inf;
        get(1,1,n,x,mid);
        if(Vmin<=minV&&maxV<=Vmax) {
            res=mid;
            l=mid+1;
        } else {
            r=mid-1;
        }
    }
    minV=inf,maxV=-inf;
    get(1,1,n,x,res);
    int res2=max(maxV-a[x],a[x]-minV);
    printf("%d %d\012",res-x+1,res2);
    return;
}
int main() {
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++) {
        scanf("%d",a+i);
    }
    init(1,1,n);
    char s[2];
    int x,y;
    for(int i=0;i<m;i++) {
        scanf("%s%d%d",s,&x,&y);
        if(s[0]=='U') {
            queryU(x,y);
        } else {
            queryQ(x,y);
        }
    }
    return 0;
}

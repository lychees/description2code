#include<bits/stdc++.h>
using namespace std;
//code taken from here http://www.codechef.com/DSEC2013/problems/PREE01/ 
typedef double coord_t;         // coordinate type
typedef long double coord2_t;  // must be big enough to hold 2*max(|coordinate|)^2
 
struct Point {
        coord_t x, y;
 
        bool operator <(const Point &p) const {
                return x < p.x || (x == p.x && y < p.y);
        }
};
 
// 2D cross product of OA and OB vectors, i.e. z-component of their 3D cross product.
// Returns a positive value, if OAB makes a counter-clockwise turn,
// negative for clockwise turn, and zero if the points are collinear.
coord2_t cross(const Point &O, const Point &A, const Point &B)
{
        return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}
 
// Returns a list of points on the convex hull in counter-clockwise order.
// Note: the last point in the returned list is the same as the first one.
void convex_hull(vector<Point> P)
{
        int n = P.size(), k = 0;
        vector<Point> H(2*n);
 
        // Sort points lexicographically
        sort(P.begin(), P.end());
 
        // Build lower hull
        for (int i = 0; i < n; i++) {
                while (k >= 2 && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
                H[k++] = P[i];
        }
 
        // Build upper hull
        for (int i = n-2, t = k+1; i >= 0; i--) {
                while (k >= t && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
                H[k++] = P[i];
        }
 
        H.resize(k);
        double ans=0.00,kk=0.0;
        for(int i=1;i<k;i++)
        {
			ans+=sqrt((double)((H[i].y-H[i-1].y)*(H[i].y-H[i-1].y)+(H[i].x-H[i-1].x)*(H[i].x-H[i-1].x)));
			kk=max(kk,sqrt((double)((H[i].y-H[i-1].y)*(H[i].y-H[i-1].y)+(H[i].x-H[i-1].x)*(H[i].x-H[i-1].x))));
		}
		printf("%0.2lf\n",ans-kk);
}
int main()
{
	int t,n,i;
	vector<Point> num;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&n);
		num.resize(n);
		for(i=0;i<n;i++)
		{
			scanf("%lf%lf",&num[i].x,&num[i].y);
		}
		convex_hull(num);	
	}
	return 0;
}
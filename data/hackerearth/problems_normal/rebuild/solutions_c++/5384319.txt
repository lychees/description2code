#include <bits/stdc++.h>
using namespace std;
#include <bits/stdc++.h>

using namespace std;
#define bit(x,i) (x&(1<<i))  //select the bit of position i of x
#define lowbit(x) ((x)&((x)^((x)-1))) //get the lowest bit of x
#define hBit(msb,n) asm("bsrl %1,%0" : "=r"(msb) : "r"(n)) //get the highest bit of x, maybe the fastest
#define max(a,b) (a<b?b:a)
#define abs(x) (x<0?(-x):x) // big bug here if "-x" is not surrounded by "()"
#define IN(i,l,r) (l<i&&i<r) //the next for are for checking bound
#define LINR(i,l,r) (l<=i&&i<=r)
#define LIN(i,l,r) (l<=i&&i<r)
#define INR(i,l,r) (l<i&&i<=r)
#define F(i,L,R) for (int i = L; i < R; i++) //next four are for "for loops"
#define FE(i,L,R) for (int i = L; i <= R; i++)
#define FF(i,L,R) for (int i = L; i > R; i--)
#define FFE(i,L,R) for (int i = L; i >= R; i--)
#define getI(a) scanf("%d", &a) //next three are handy ways to get ints, it's also force you to use '&' sign
#define getII(a,b) scanf("%d%d", &a, &b)
#define getIII(a,b,c) scanf("%d%d%d", &a, &b, &c)
#define wez(n) int (n); scanf("%d",&(n)) //handy if the input is right after the definition of a variable
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m))
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k))
#define TESTS wez(testow)while(testow--) //for multilple cases problems
#define whileZ int T; getI(T); while(T--) // the same as above
#define getS(x) scanf("%s", x) //get a char* string
#define clr(a,x) memset(a,x,sizeof(a)) //set elements of array to some value
#define char2Int(c) (c-'0')
#define lastEle(vec) vec[vec.size()-1] 
#define SZ(x) ((int)((x).size()))
#define REMAX(a,b) (a)=max((a),(b)) // set a to the maximum of a and b
#define REMIN(a,b) (a)=min((a),(b));
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++) // traverse an STL data structure
#define ALL(c) (c).begin(),(c).end() //handy for function like "sort()"
#define PRESENT(c,x) ((c).find(x) != (c).end()) 
#define CPRESENT(c,x) (find(ALL(c),x) != (c).end()) 
#define ll long long //data types used often, but you don't want to type them time by time
#define ull unsigned long long
#define ui unsigned int
#define us unsigned short
#define IOS ios_base::sync_with_stdio(0); //to synchronize the input of cin and scanf
#define INF 1001001001
#define PI 3.1415926535897932384626
//for map, pair
#define mp make_pair
#define fi first
#define se second
// for debug
inline void pisz(int n) { printf("%d\n",n); }
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define printA(a,L,R) FE(i,L,R) cout << a[i] << (i==R?'\n':' ')
#define printV(a) printA(a,0,a.size()-1)
#define MAXN 10000
//for vectors
#define pb push_back
typedef int elem_t;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii; 
// directions
const int fx[4][2] = {{0,1}, {0,-1}, {1,0}, {-1,0}};
const int fxx[8][2] = {{0,1}, {0,-1}, {1,0}, {-1,0}, {1,1}, {1,-1}, {-1,1}, {-1,-1}};
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){F(i,0,SZ(t))s<<t[i]<<" ";return s; }
/*******************************************************************************************/
const int MAX = 50005;
int id[MAX];
void initialize() {
	F(i,0,MAX){
		id[i] = i;
	}
}
struct Edge {
	int u,v;
	long long c;
	Edge() {}
	Edge(int u, int v, long long c):u(u),v(v),c(c) {}
	inline bool operator < (const Edge & rhs)const {return c<rhs.c;}
};
vector<vector<int>> V;
int root(int x) {
	while(id[x] != x){
		id[x] = id[id[x]];
		x = id[x];
	}
	return x;
}
map<int,int> Map;
long long kruskal(int M) {
	long long cost=0;
	Map.clear();
	for(auto E: V) {
		// int a = root(-E[i].u);
		// int b = root(-V[i].v);
		// if(a!=b){
		// 	id[a] = b;
		// 	Map[-V[i].u]++;
		// 	Map[-V[i].v]++;
		// 	cost+=V[i].c;
		// }
		int a = root(-E[1]);
		int b = root(-E[2]);
		if(a!=b){
			id[a] = b;
			Map[-E[1]]++;
			Map[-E[2]]++;
			cost+=E[0];
		}
	}
	return cost;
}
// bool comp( const Edge& e1, const Edge& e2) {
// 	//return e1.u+e1.v>e2.u+e2.v;
// 	//////////////////////////////////////////////////////
// 	// if(e1.u>e2.u && e1.u>e2.v)
// 	// 	return true;
// 	// if(e1.v>=e2.u && e1.v>=e2.v)
// 	// 	return true;
// 	// if(e2.u>=e1.u && e2.u>=e1.v)
// 	// 	return false;
// 	// if(e2.v>=e1.u && e2.v>=e1.v)
// 	// 	return false;
// 	////////////////////////////////////////////////////
// 	// int count1=0, count2=0;
// 	// if(e1.u>e1.v){
// 	// if(e1.u>e2.u)
// 	// 	count1++;
// 	// if(e1.u>e2.v)
// 	// 	count1++;
// 	// }else{
// 	// if(e1.v>e2.u)
// 	// 	count1++;
// 	// if(e1.v>e2.v)
// 	// 	count1++;
// 	// }
// 	// if(e2.u>e2.v){	
// 	// if(e2.u>e1.u)
// 	// 	count2++;
// 	// if(e2.u>e1.v)
// 	// 	count2++;
// 	// }else{
// 	// if(e2.v>e1.u)
// 	// 	count2++;
// 	// if(e2.v>e1.v)
// 	// 	count2++;
// 	// }
// 	// if(count1 == count2){
// 	// 	int small1=0, small2=0;
// 	// 	if(e1.u>e1.v)
// 	// 		small1 = e1.v;
// 	// 	else
// 	// 		small1 = e1.u;
// 	// 	if(e2.u>e2.v)
// 	// 		small2 = e2.v;
// 	// 	else
// 	// 		small2 = e2.u;
// 	// 	if(small1>small2)
// 	// 		count1++;
// 	// 	else
// 	// 		count2++;
// 	// }
// 	// return count1>count2;	
// 	/////////////////////////////////////////////////////////
// 	//return e1.u*e1.u+e1.v*e1.v>e2.u*e2.u+e2.v*e2.v;
// 	/////////////////////////////////////////////////
// 	// if(e1.u>e2.u)
// 	// 	return true;
// 	// if(e2.u>e1.u)
// 	// 	return false;
		
// 	// if(e1.u == e2.u){
// 	// 	return e1.v>e2.v;
// 	// }
// 	///////////////////////////////////////////////////////
// 	if (e1.c != e2.c) {if(e1.c - e2.c)return true;else return false;}
//     if (e1.u != e2.u) {if(e2.u - e1.u)return true;else return false;}
//     if(e2.v - e1.v)
//     	return true;
//     else
//     	return false;
//   	  //if (c != other.c) return c - other.c;
//       //if (a != other.a) return other.a - a;
//       //return other.b - b;
// }
// void process(int M) {
// 	for(int i=0;i<M;) {
// 		long long curCost = V[i].c;
// 		int k=i;
// 		for(;k<M;k++){
// 			if(curCost!=V[k].c)
// 				break;
// 		}
// 		sort(V.begin()+i,V.begin()+k,comp);
// 		i=k;
// 	}
// }
int main()
{
    whileZ{
    	wez2(N, M);
    	initialize();
    	int minusCount=0;

    	F(i,0,M) {
    		wez2(u,v);
    		long long c;
    		scanf("%lld",&c);
    		if(u==v)
    		continue;
    		if(u>v)
    		swap(u,v);
    		//V.emplace_back(Edge(u,v,c));
    		V.push_back(vector<int>{c,-u,-v});
    	}
    	//sort(ALL(V));
    	sort(ALL(V));
    	// cout << "NEW START" << endl;
    	// for(auto e:w){
    	// 	cout << "c:" << e[0] << "u:" <<e[1] << "v:" <<e[2] << endl;
    	// }
    	// cout << "NEW END" << endl;
    	// cout << "correction start" << endl;
    	// for(auto i: V) {
    	// 	cout << i.u <<","<< i.v << "=" << i.c << endl;
    	// }
    	// cout << "correction end" << endl;
    	printf("%lld\n",kruskal(V.size()));
    	for(auto e: Map){
    		printf("%d ",e.second);
    	}
    	printf("\n");
    	V.clear();
    }
    return 0;
}

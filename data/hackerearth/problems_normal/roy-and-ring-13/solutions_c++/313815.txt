#include<bits/stdc++.h>
#define MOD 1000000007
using namespace	std;
typedef long long int i64;
void multiply(i64 F[2][2], i64 M[2][2]);

void power(i64 F[2][2], i64 n);

/* function that returns nth Fibonacci number */
int fib(int n)
{
  i64 F[2][2] = {{1,1},{1,0}};
  if(n == 0)
    return 0;
  power(F, n-1);
  return F[0][0]%MOD;
}

/* Optimized version of power() */
void power(i64 F[2][2], i64 n)
{
  if( n == 0 || n == 1)
      return;
  i64 M[2][2] = {{1,1},{1,0}};

  power(F, n/2);
  multiply(F, F);

  if(n&1)
     multiply(F, M);
}

void multiply(i64 F[2][2], i64 M[2][2])
{
  i64 x =  F[0][0]*M[0][0] + F[0][1]*M[1][0];
  i64 y =  F[0][0]*M[0][1] + F[0][1]*M[1][1];
  i64 z =  F[1][0]*M[0][0] + F[1][1]*M[1][0];
  i64 w =  F[1][0]*M[0][1] + F[1][1]*M[1][1];

  F[0][0] = x%MOD;
  F[0][1] = y%MOD;
  F[1][0] = z%MOD;
  F[1][1] = w%MOD;
}
void calc()
{
    i64 sum = 0;
    for(int i=0;i<10;i++)
    {
        sum += fib(4*i + 1);
        cout<<abs(sum)<<",";
        sum -= fib(4*i + 3);
        cout<<abs(sum)<<",";
    }
}
int main()
{
    //calc();
    //cout<<fib(1)<<" "<<fib(2)<<endl;
    int t;
    scanf("%d",&t);
    while(t--)
    {
        i64 n;
        scanf("%lld",&n);
        n = (n+1)>>1;
        i64 ff = fib(n);
        ff = (ff*ff)%MOD;
        printf("%lld\n",ff);
    }
    return 0;
}

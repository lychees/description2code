
using namespace std;
#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<limits>
#include<cmath>
#include<map>
#define LLU long long unsigned int
#define LLD long long double
#define FOR(i,N) for(int i=0;i<(N);i++)
int r,i,j,dp[100][100][10]={0},k,l;
int main(){
int test;
scanf("%d",&test);
while(test--){
int a=0,v;

scanf("%d",&v);
r=v/2;
k=50;
dp[k-1][k][1]=1;
dp[k+1][k][1]=1;
dp[k-1][k+1][1]=1;
dp[k+1][k-1][1]=1;
dp[k][k-1][1]=1;
dp[k][k+1][1]=1;
dp[k][k][1]=0;
dp[k][k][0]=1;
for(i=2;i<=r;i++){
    for(j=-1*i;j<=i;j++){
        for(l=-1*i;l<=i;l++){

            dp[k+j][k+l][i]=dp[k+j-1][k+l][i-1]
                            +dp[k+j][k+l-1][i-1]
                            +dp[k+j+1][k+l][i-1]
                            +dp[k+j][k+l+1][i-1]
                            +dp[k+j+1][k+l-1][i-1]
                            +dp[k+j-1][k+l+1][i-1];


        }
    }
}

if(v%2==0){
//printf("0-%d\n",dp[k][k][r]);

a=a+dp[k][k][r]*dp[k][k][r];

//printf("+%d\n",a);

for(i=1;i<=r;i++){

//printf("%dd-%d\n",i,dp[k-i][k][r]);
//printf("%d-%d\n",i,dp[k-i+1][k-1][r]);

a=a+6*dp[k-i][k][r]*dp[k-i][k][r];

for(j=1;j<i;j++){
a+=6*dp[k-i+j][k-j][r]*dp[k-i+j][k-j][r];

}

}

}

else{
a+=dp[k][k][r]*(dp[k-1][k][r]
                            +dp[k][k-1][r]
                            +dp[k+1][k][r]
                            +dp[k][k+1][r]
                            +dp[k+1][k-1][r]
                            +dp[k-1][k+1][r]);

//printf("%d\n",a);
for(i=1;i<=r;i++){
    for(j=0;j<i;j++){
a+=6*dp[k-i+j][k-j][r]*( dp[k-i+j-1][k-j][r]
                        +dp[k-i+j+1][k-j][r]
                        +dp[k-i+j][k-j-1][r]
                        +dp[k-i+j][k-j+1][r]
                        +dp[k-i+j-1][k-j+1][r]
                        +dp[k-i+j+1][k-j-1][r]);
   //  printf("j--%d\n",j);
    }
}




}



           //           printf("%d\n",dp[k-2][k][3]);
           //           printf("%d\n",dp[k-1][k-1][3]);
           //          printf("%d\n",dp[k][k-1][3]);
          //             printf("%d\n",dp[k][k][3]);
        //              printf("%d\n",dp[k-1][k+1][3]);
         //             printf("%d\n",dp[k-2][k+1][3]);


            printf("%d\n",a);
}

        return 0;
}





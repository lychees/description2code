//joyneel
#include<bits/stdc++.h>

using namespace std;

typedef pair<int,int>   II;
typedef vector< II >      VII;
typedef vector<int>     VI;
typedef vector< VI > 	VVI;
typedef long long int 	LL;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);

string a[1000006];
VI g[3000006];
int vs[3000006];
queue<int> q;

int bfs(int u){
  int cnt = 0;
  vs[u] = 1;
  q.push(u);
  while(!q.empty()){
    int v = q.front();
    cnt++;
    q.pop();
    for(int i=0;i<SZ(g[v]);i++){
      int w = g[v][i];
      if(!vs[w]){
        q.push(w);
        vs[w] = 1;
      }
    }
  }
  return cnt;
}

int main(){
  int t;
  si(t);
  while(t--){
    SET(vs,0);
    int n,m;
    si(n);si(m);
    for(int i=0;i<n;i++) cin>>a[i];
    for(int i=0;i<=(n+1)*(m+1);i++){ g[i].clear(); }
    for(int i=0;i<n;i++){
      if(i==0){
        for(int j=0;j<m;j++){
          g[j].PB(j+1);
          //trace(j,j+1);
          g[j+1].PB(j);
          g[(m+1)*n+j].PB((m+1)*n+j+1);
          g[(m+1)*n+j+1].PB((m+1)*n+j);
          //trace((m+1)*n+j+1,(m+1)*n+j);
        }
      }
      for(int j=0;j<m-1;j++){
        if(a[i][j]!=a[i][j+1]){
          g[(m+1)*i+j+1].PB((m+1)*(i+1)+j+1);
          g[(m+1)*(i+1)+j+1].PB((m+1)*i+j+1);
          //trace((m+1)*i+j+1,(m+1)*(i+1)+j+1);
        }
      }
    }
    for(int i=0;i<n;i++)
      for(int j=0;j<m;j++){
        if(j==0){
          g[(m+1)*i].PB((m+1)*(i+1));
          g[(m+1)*(i+1)].PB((m+1)*i);
          //trace((m+1)*(i+1),(m+1)*i);
          g[(m+1)*i+m].PB((m+1)*(i+1)+m);
          g[(m+1)*(i+1)+m].PB((m+1)*i+m);
          //trace((m+1)*(i+1)+m,(m+1)*i+m);
        }
        if(a[i][j]!=a[i+1][j] and i<n-1){
          g[(m+1)*(i+1)+j].PB((m+1)*(i+1)+j+1);
          g[(m+1)*(i+1)+j+1].PB((m+1)*(i+1)+j);
          //trace((m+1)*(i+1)+j,(m+1)*(i+1)+j+1);
        }
      }
    int cno = 0;
    for(int i=0;i<(n+1)*(m+1);i++){
      if(!vs[i]){
        if(bfs(i)>1) cno++;
      }
    }
    if(cno<=1){
      cout<<"YES"<<endl;
    }
    else{
      cout<<"NO"<<endl;
    }
  }
  return 0;
}

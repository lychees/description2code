#include <bits/stdc++.h>
using namespace std;
const long long MOD =1000000007;
long long int a[1000004];
long long int maxis;
 
long long powmod(long long int a,long long int b, long long int MOD)
{
  long long int x=1,y=a;
  while(b > 0)
    {
      if(b%2 == 1)
	{
	  x=(x*y);
	  x%=MOD;
	}
      y = (y*y);
      y%=MOD;
      b /= 2;
    }
  return x;
}
 
long long InverseEuler(int n, int MOD)
{
  return powmod(n,MOD-2,MOD);
}
 
long long smallC(int n, int r, int MOD)
{
  long long int i;
	
  return (a[n]*((InverseEuler(a[r], MOD) * InverseEuler(a[n-r], MOD)) % MOD)) % MOD;
}
 
long long Lucas(long long int n, long long int m,long long int p)
{
  if (n==0 && m==0) return 1;
  long long int ni = n % p;
  long long int mi = m % p;
  if (mi>ni) 
    return 0;
  return (Lucas(n/p, m/p, p) * smallC(ni, mi, p))%MOD;
}
 
int main(){
  int T, N, M;
  scanf("%d",&T);
  a[0] = 1;
  a[1] = 1;
  a[2] = 2;
  for (int i=1; i<=1000004; i++)
    a[i]= (a[i-1]*i) % MOD;
  while(T--){
    scanf("%d %d", &N, &M);
    int f=N*6, r=N*18;
    long long count = 0;
    if(M%2 == 1 || M>f*4*N)
      printf("0\n");
    else{
      for(int c = 0, a = M/2; c <=M/2; a--, c++){
	long long p = (Lucas(f,a,MOD)*Lucas(r,a,MOD))%MOD;
	long long q = (Lucas(f,c,MOD)*Lucas(r,c,MOD))%MOD;
	count+=(p*q)%MOD;
        if(count>MOD) count%=MOD; 
      }
      printf("%lld\n", count);
    }
  }
  return 0;
}

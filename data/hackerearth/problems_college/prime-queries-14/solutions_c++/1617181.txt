#include<iostream>
#include<algorithm>
using namespace std;
#include<string.h>
#include<math.h>
#define inf 0x7fffffff
#define ll long long int
long long int arr[100005];
long long int tree[10000005];
long long int ab[1000005];

int solve()
{
    long long int i,j;
    ab[0]=ab[1]=1;
    for(i=2;i<1000001;i++)
    {
        if(ab[i]==0)
        {
            for(j=2;j<=1000001/i;j++)
            {
                ab[i*j]=1;
            }
        }
    }
    return 0;
}


void build_tree(int node, int a, int b) {
    if(a > b) return; // Out of range

  	if(a == b) { // Leaf node
    		if(ab[arr[a]]==0){tree[node]=arr[a];} // Init value
    		else tree[node]=-1;
		return;
	}

	build_tree(node*2, a, (a+b)/2); // Init left child
	build_tree(node*2+1, 1+(a+b)/2, b); // Init right child

	tree[node] = max(tree[node*2], tree[node*2+1]); // Init root value
}

/**
 * Increment elements within range [i, j] with value value
 */
void update_tree(int node, int a, int b, int i, int j, int value) {

	if(a > b || a > j || b < i) // Current segment is not within range [i, j]
		return;

  	if(a == b) { // Leaf node
    		if(ab[value]==0){tree[node]=value;} // Init value
    		else tree[node]=-1;
    		return;
	}

	update_tree(node*2, a, (a+b)/2, i, j, value); // Updating left child
	update_tree(1+node*2, 1+(a+b)/2, b, i, j, value); // Updating right child

	tree[node] = max(tree[node*2], tree[node*2+1]); // Updating root with max value
}

/**
 * Query tree to get max element value within range [i, j]
 */
int query_tree(int node, int a, int b, int i, int j) {

	if(a > b || a > j || b < i) return -inf; // Out of range

	if(a >= i && b <= j) // Current segment is totally within range [i, j]
		return tree[node];

	int q1 = query_tree(node*2, a, (a+b)/2, i, j); // Query left child
	int q2 = query_tree(1+node*2, 1+(a+b)/2, b, i, j); // Query right child

	int res = max(q1, q2); // Return final result

	return res;
}

int main() {
    int q,N,a,l,r;
    cin>>N>>q;
        solve();
	for(int i = 0; i < N; i++) cin>>arr[i];

	build_tree(1, 0, N-1);
	while(q--)
    {
        cin>>a>>l>>r;
        if(a==1)
            cout<<query_tree(1, 0, N-1, l-1,r-1 )<<endl;
        else
            update_tree(1, 0, N-1, l-1,l-1, r);
    }
	return 0;
}






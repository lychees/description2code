// ADITYA VARSHNEY

#include <iostream>
#include <bitset>
#include <cmath>
#include <queue>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <map>
#include <climits>

#define pb push_back
#define mp make_pair
#define mod 1000000007

typedef long long int ll;

using namespace std;

#define getcx getchar//_unlocked
#define mod2 4294967296


long long int powr (long long int a, long long int b)
{
if (b == 0)
return 1;
long long int x = powr(a, b/2);
if (b % 2 == 0)
return (x*x)%mod;
else
return (((x*x)%mod)*a)%mod;
}


long long int scanll()
{
    long long int n=0;
    char ch = getcx();
    int sign=1;
    while( ch < '0' || ch > '9' ) {
        if(ch=='-')
            sign = -1;
        ch=getcx();
    }
    while( ch >= '0' && ch <= '9' )
        n = (n<<3)+(n<<1) + ch-'0',
    ch=getcx();
    return(n * sign);
}

int scani()
{
    int n=0;
    char ch = getcx();
    int sign=1;
    while( ch < '0' || ch > '9' ) {
        if(ch=='-')
            sign = -1;
        ch=getcx();
    }
    while( ch >= '0' && ch <= '9' )
        n = (n<<3)+(n<<1) + ch-'0',
    ch=getcx();
    return(n * sign);
}

ll sqsum[1000010],numsum[1000010],num[1000010];

int main()
{
    int t;
    ll n,i,m,q,x,y,k;
    n = scanll();
    k = scanll();
    vector <ll> v;
    sqsum[0] = 0;
    numsum[0] = 0;
    num[0] = 0;
    for(i = 1; i <= n ; i++) {
        x = scanll();
        v.pb(x);
        numsum[i] = (numsum[i-1] + ((i-1)*2+1)*x)%mod;
        num[i] = (num[i-1] + x)%mod;
        sqsum[i] = (sqsum[i-1] + (((i*i)%mod)*x)%mod)%mod;
    }
    ll totsub = numsum[k+1],ans = sqsum[k],inc;
    for(i = 1; i <= n-k+1 ; i++) {
        printf("%lld ",ans);
        ans = (sqsum[i+k]-totsub+mod)%mod;
        inc = ((((i+k+1)*(i+k+1))%mod)-((k*k)%mod)+mod)%mod;
        totsub += (inc*v[i+k])%mod;
        totsub%=mod;
        totsub += (((numsum[i+k]-numsum[i]+mod)%mod)-((2*i*((num[i+k]-num[i]+mod)%mod))%mod)+mod)%mod;
        totsub%=mod;
    }
    printf("\n");
    return 0;
}

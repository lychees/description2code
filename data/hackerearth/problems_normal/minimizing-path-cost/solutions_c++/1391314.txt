#include <iostream>
#include<map>
#define INF 1E09;
using namespace std;
int dp[100][100];
int dist[100][100];
void floyd(int graph[][100],int n)
{
	int i,j,k;
	int dis;
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			dist[i][j]=dp[i][j];
		}
	}
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(dist[i][j]==0)
				dist[i][j]=INF;
		}
	}
	for(int k=0;k<n;k++)
	{
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
				if(dist[i][k]+dist[k][j] < dist[i][j])
					dist[i][j]= dist[i][k]+dist[k][j];
		}
	}
}
int main() {
	// your code goes here
	string s,s1,s2;
	map<string,int> list;
	int n,m,temp;
	cin>>n>>m;
	for(int i=0;i<n;i++)
		{
			cin>>s;
			
			list.insert(pair<string,int>(s,i));
		}
		
	for(int i=0;i<m;i++)
	{
		cin>>s1>>s2>>temp;
		dp[list[s1]][list[s2]]=temp;	// table constructed	
		dp[list[s2]][list[s1]]=temp;
	}
	/*for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
			cout<<dp[i][j]<<" ";
		cout<<endl;
	}*/
	floyd(dp,n);
	/*for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
			cout<<dist[i][j]<<" ";
		cout<<endl;
	}*/
	int q;
	cin>>q;
	for(int i=0;i<q;i++)
	{
		cin>>s1>>s2;
		cout<<dist[list[s1]][list[s2]]<<endl;
	}
	
	return 0;
}
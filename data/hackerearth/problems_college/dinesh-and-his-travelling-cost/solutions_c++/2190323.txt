#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int vertices=510;
int adj[1000][1000];
int wt[1000][1000];
long long int dist[10000];
long long int path[1000];
map<long long int,long long int>pq;
map<int,long long int> m;
int vet;
void dij(int v){
    pq[v]=0;
    dist[v]=0;
 //   cout<<" "<<v<<" 0 path"<<path[v]<<" "<<endl;
    while(!pq.empty()){
        int p=pq.begin()->first;
        int l=pq.begin()->second;
        pq.erase(pq.begin());
      //  cout<<" "<<p<<" dist "<<l<<"path"<<path[p]<<" "<<endl;
        m[p]=l;
        for(int i=0;i<=vertices;i++)
        {
         if(adj[p][i]==1)
        {int d=wt[p][i]+dist[p];
        if(dist[i]==-1)
        {
            dist[i]=d;
            pq[i]=d;
            path[i]=p;

        }
        if(d<dist[i])
        {
            dist[i]=d;
            pq[i]=d;
            path[i]=p;

        }

        }
        }
    }



}
int main()
{
    int edges;
    cin>>edges;
    while(edges--){
     int n,m,w;
     cin>>n>>m>>w;
     adj[n][m]=1;
     wt[n][m]=w;
 adj[m][n]=1;
     wt[m][n]=w;

    }
   memset(dist,-1,sizeof dist);
   m.clear();
   cin>>vet;
   int q;
   cin>>q;
   	dij(vet);
   while(q--)
    {int d;
    cin>>d;
   long long int u=0;
  if(m.find(d)!=m.end())
  
   u=m.find(d)->second;
   if(d==vet)
   {cout<<"0"<<endl;
   continue;}
    if(u==0)
    cout<<"NO PATH"<<endl;
    else
    cout<<u<<endl;
    }
    return 0;
}

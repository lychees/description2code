/**
 *    author:  [itmo] enot.1.10
 *    created: 26.03.2016 11:46:33       
**/
#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define mp make_pair
#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)
#define eprintf(...) fprintf(stderr, __VA_ARGS__),fflush(stderr)
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(),a.end()
#define pw(x) (1LL<<(x))

using namespace std;

typedef long long ll;
typedef double dbl;
typedef vector<int> vi;
typedef pair<int, int> pi;

const int inf = 1.01e9;
const dbl eps = 1e-9;

/* --- main part --- */

#define next fucknext

const int N = 610;
const int M = N * N;

int head[N], next[M], to[M], ec = 1, flow[M];

inline void add(int x, int y, int f)
{
    ++ec;
    to[ec] = y;
    next[ec] = head[x];
    head[x] = ec;
    flow[ec] = f;
}

inline void add2(int x, int y)
{
    add(x, y, 1);
    add(y, x, 0);
}

void clear()
{
    forn(i, N) head[i] = 0;
    ec = 1;
}

int n, m;
int a[N];
int f[N];
int ST, EN;

int mark[N];
int mc = 0;

bool dfs(int x)
{                         
    if (x == EN) return true;
    mark[x] = mc;
    for (int e = head[x]; e; e = next[e])
    {
        int y = to[e];
        if (mark[y] < mc && flow[e] && dfs(y))
        {
            flow[e]--;
            flow[e ^ 1]++;
            return true;
        }
    } 
    return false;
}


bool can(int T)
{
    clear();
    ST = 2 * n, EN = 2 * n + 1;
    forn(i, n) forn(j, n) if (f[a[i] + j] <= T) add2(i, j + n);
    forn(i, n) add2(ST, i);
    forn(i, n) add2(i + n, EN);

    forn(i, n)
    {
        ++mc;
        if (!dfs(ST)) return false;
    }
    return true;
}

int main()
{
    #ifdef home
        assert(freopen("1.in", "r", stdin));
        assert(freopen("1.out", "w", stdout));
    #endif
    scanf("%d%d", &n, &m);    
    forn(i, n) scanf("%d", &a[i]);
    forn(i, n + m - 1) scanf("%d", &f[i]);
    vi ff;
    forn(i, n + m - 1) ff.pb(f[i]);
    sort(all(ff));
    int l = 0, r = sz(ff) - 1;
    while (l < r)
    {
        int mid = (l + r) >> 1;
        if (can(ff[mid])) r = mid;
        else l = mid + 1;
    }
    printf("%d\n", ff[l]);
    #ifdef home                     
        eprintf("time = %d ms\n", (int)(clock() * 1000. / CLOCKS_PER_SEC));
    #endif
    return 0;
}

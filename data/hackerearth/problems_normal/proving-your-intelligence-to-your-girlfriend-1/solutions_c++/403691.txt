#include <vector>
#include <iostream>
#include<cstdio>
#include<utility>
#include<algorithm>
#define pii pair<int,int>
using namespace std;
vector <pair<long long int,pair<int,int> > > g;
int parent[1000002];
int N,e;
int mod=1000000007;
int find(int x) {
	if (x!=parent[x]) {
		parent[x]=find(parent[x]);
	}
	return parent[x];
}

long long kruskals() {
	int i,j;
	sort(g.begin(),g.end());
	long long ans=0;
	for (i=1;i<=N;i++) parent[i]=i;
	//printf("Okay\n");
	e=g.size();
	for (i=0;i<e;i++) {
		pii p=g[i].second;
	//	printf("%d\n",p.first);
		int p1=find(g[i].second.first);
		int p2=find(g[i].second.second);
	//	printf("%d %d\n",p1,p2);
		if (p1!=p2) {
			ans=(ans+g[i].first);
			parent[p2]=p1;
	//		printf("%d %d\n",p1,p2);

		}
	}
	//printf("Done1\n");
	return ans;
}

typedef vector<long long> vi;
typedef vector<vi> vvi;

//const long long mod = 1000000007;

vvi matrixUnit(int n) {
    vvi res(n, vi(n));
    for (int i = 0; i < n; i++)
        res[i][i] = 1;
    return res;
}

vvi matrixAdd(const vvi &a, const vvi &b) {
    int n = a.size();
    int m = a[0].size();
    vvi res(n, vi(m));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            res[i][j] = (a[i][j] + b[i][j]) % mod;
    return res;
}

vvi matrixMul(const vvi &a, const vvi &b) {
    int n = a.size();
    int m = a[0].size();
    int k = b[0].size();
    vvi res(n, vi(k));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < k; j++)
            for (int p = 0; p < m; p++)
                res[i][j] = (res[i][j] + (long long) a[i][p] * b[p][j]) % mod;
    return res;
}

vvi matrixPow(const vvi &a, long long p) {
    if (p == 0)
        return matrixUnit(a.size());
    if (p & 1)
        return matrixMul(a, matrixPow(a, p - 1));
    return matrixPow(matrixMul(a, a), p / 2);
}

vvi matrixPowSum(const vvi &a, int p) {
    int n = a.size();
    if (p == 0)
        return vvi(n, vi(n));
    if (p % 2 == 0)
        return matrixMul(matrixPowSum(a, p / 2), matrixAdd(matrixUnit(n), matrixPow(a, p / 2)));
    return matrixAdd(a, matrixMul(matrixPowSum(a, p - 1), a));
}

long long fib(long long n) {
	if (n==0) return 0;
	vvi a(2,vi(2));
	a[0][0]=1;
	a[0][1]=1;
	a[1][0]=1;
	a[1][1]=0;
	vvi b(2,vi(2));
	b=matrixPow(a,n);
	return b[1][0]%mod;
}

int main() {
	int t,i,j,u,v,n,cnt=0;
	long long k1,k2,k3,k4;
	long long c,k;
	scanf("%d %lld %lld %lld %lld",&n,&k1,&k2,&k3,&k4);
	N=n*n;
	long long f1,f2,f3,f4,c1,c2,cst,f11,f22,f33,f44;
	//printf("%lld %lld %lld %lld\n",f1,f2,f3,f4);
	e=0;
	cnt=0;
	g.clear();
	f1=fib(k1);
	f11=fib(k1-1);
	f2=fib(k2);
	f22=fib(k2-1);
	f3=fib(k3);
	f33=fib(k3-1);
	f4=fib(k4);
	f44=fib(k4-1);
	for (i=0;i<n;i++) {
		for (j=1;j<=n-1;j++) {
			cst=(f1+f2)%mod;
			c1=f11;
			f11=f1;
			f1=(f1+c1)%mod;
			c1=f22;
			f22=f2;
			f2=(f2+c1)%mod;
			//printf("%lld\n",cst);
			u=i*n+j; v=u+1;
			g.push_back(make_pair(cst,make_pair(u,v)));
	//		printf("%lld\n",g[e].second.first);
			e+=1;
			cnt++;
		}
	}
	//printf("Done\n");
	cnt=0;
	for (j=1;j<=n;j++) {
		for (i=0;i<n-1;i++) {
			cst=(f3+f4)%mod;
			c1=f33;
			f33=f3;
			f3=(f3+c1)%mod;
			c1=f44;
			f44=f4;
			f4=(f4+c1)%mod;
			u=i*n+j; v=u+n;
			g.push_back(make_pair(cst,make_pair(u,v)));
			e+=1;
			cnt++;
		}
	}
	//printf("Done\n");
	printf("%lld\n",kruskals());
	return 0;

}


#include <stdio.h>
#include<iostream>
#include<vector>
#include<map>
#include<iterator>
using namespace std;
bool isSubsetSum(int set[], int n, int sum)
{
    bool subset[sum+1][n+1];
    for (int i = 0; i <= n; i++)
      subset[0][i] = true;
    for (int i = 1; i <= sum; i++)
      subset[i][0] = false;
 
     for (int i = 1; i <= sum; i++)
     {
       for (int j = 1; j <= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= set[j-1])
           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
       }
     }
     return subset[sum][n];
}
int work()
{
  int set[10000];
  int N,M,x;
  map<int,int> m;
  cin>>M>>N;
  for(int i=0;i<N;++i)cin>>set[i];
  
  for(int i=0;i<M;++i)
  {	cin>>x;m[x]++; }
  
  vector<int> sums;
  map<int,int>::iterator itr;
  
  for(itr=m.begin();itr!=m.end();++itr)
  sums.push_back(itr->second);
  
  int count=0;
  for(int i=0;i<sums.size();++i)
  {
     if (isSubsetSum(set, N, sums[i]))
     	++count;
  }
 cout<<count<<endl;
 return 0;
}

int main()
{
	int t;
	cin>>t;
	while(t--)
	work();
}

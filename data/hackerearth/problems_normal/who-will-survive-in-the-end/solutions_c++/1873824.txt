#include <iostream>
#include <cmath>
using namespace std;

void last_survivor(long nNumberOfThieves);

int main()
{
    int nNumOfTestCases;
    cin>>nNumOfTestCases;
    
    int nCounter = 0;
    
    while (nCounter < nNumOfTestCases)
    {    	
    	nCounter++;
    	long nNumberOfThieves;
    	cin>>nNumberOfThieves;
    	last_survivor(nNumberOfThieves);
    }
    return 0;
}

void last_survivor(long nNumberOfThieves)
{

	long nLastSurvivor = 0;


	if (nNumberOfThieves == 1)
	{
		cout<< nLastSurvivor <<endl;
		return;
	}

	if (nNumberOfThieves == 2)
	{
		nLastSurvivor = 1;
		cout<< nLastSurvivor <<endl;
		return;
	}

	long nFirstTheif = 1;
	long nSecondThief = 3;
	long nRoundNumber = 1;
	long nNumberOfThievesAlive = nNumberOfThieves;

	int startingID;

	if (nNumberOfThievesAlive % 2)
		startingID = 1;
	else
		startingID = 2;

	nNumberOfThievesAlive = nNumberOfThievesAlive / 2 + nNumberOfThievesAlive % 2;

	while (nNumberOfThievesAlive != 1)
	{
		nRoundNumber++;

		if (startingID == 1)
		{

			nFirstTheif		= nSecondThief;				
			nSecondThief	= nFirstTheif + pow(2, nRoundNumber);

			if (nSecondThief > nNumberOfThieves)
			{
				cout << nFirstTheif << endl;
				return;
			}

			if (nNumberOfThievesAlive % 2)
				startingID = 2;
			else
				startingID = 1;

			nNumberOfThievesAlive = nNumberOfThievesAlive - (nNumberOfThievesAlive / 2 + nNumberOfThievesAlive % 2);
		}
		else
		{			
			nSecondThief = nFirstTheif + pow(2, nRoundNumber);

			if (nSecondThief > nNumberOfThieves)
			{
				cout << nFirstTheif << endl;
				return;
			}

			if (nNumberOfThievesAlive % 2)
				startingID = 1;
			else
				startingID = 2;

			nNumberOfThievesAlive = (nNumberOfThievesAlive - ((nNumberOfThievesAlive - 1) / 2 + (nNumberOfThievesAlive - 1) % 2));			
		}
	}

	cout << nLastSurvivor << endl;
	return;
}

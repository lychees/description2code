#include <iostream>
#include <vector>
#include <stdio.h>
#include <string.h>
#include <math.h>
//#define MAX 1000001
#include <vector>
#define REP(i,n) for(int i=1; i<=n;i++)
using namespace std;

//long long int DP[MAX];
long long int n, f0,f1,a,b,c;
//long long int MOD = ((int)pow((float)10,9)+7);
typedef long long ll;
typedef vector<vector<ll>> matrix;
const ll MOD = 1000000007;
const int K = 3;

matrix mul(matrix A, matrix B)
{
	matrix C(K+1, vector<ll>(K+1));
	REP(i,K) REP(j,K) REP(k,K)
	C[i][j] = (C[i][j] + A[i][k] *B[k][j]) % MOD;
	return C;
}

matrix pow(matrix A, int p)
{
    if(p == 1)
    return A;
    if(p%2)
     return mul(A, pow(A, p-1));
     matrix X = pow(A, p/2);
     return mul(X,X);
}
/*
long long int fibb(long long int N)
{
		vector<ll> F1(K+1);
		F1[1] = f0;
		F1[2] = f1;
		F1[3] = c;
		matrix T(K+1, vector<ll>(K+1));
		T[1][1] = 0; T[1][2] =1; T[1][3] = 0;
		T[2][1] = b; T[2][2] = a; T[2][3] = 1;
		T[3][1] = 0; T[3][2] = 0; T[3][3] = 1;
		
		if(N==1) return f0;
		T = pow(T, N-1);
		ll res = 0;
		REP(i,K)
		 res = (res + T[1][i] * F1[i]) % MOD;
		 return res;
	
}*/
long long fibo_fast(long long n)
{

	long long C[K+1][K+1] = {0},T[K+1][K+1] = {0}, result[K+1][K+1] = {0};
	vector<ll> F1(K+1);
	
	F1[1] = f0;
	F1[2] = f1;
	F1[3] = c;
	T[1][1] = 0; T[1][2] =1; T[1][3] = 0;
	T[2][1] = b; T[2][2] = a; T[2][3] = 1;
	T[3][1] = 0; T[3][2] = 0; T[3][3] = 1;
	REP(i,K) REP(j,K)
		result[i][j] = T[i][j];
	while(n)
	{
		if(n%2)
		{
			memset(C,0,sizeof(C));
			REP(i,K) REP(j,K) REP(k,K)
				C[i][j] = (C[i][j] + T[i][k]*result[k][j])%MOD;
			REP(i,K) REP(j,K)
				result[i][j] = C[i][j];
		}	
		memset(C,0,sizeof(C));
		REP(i,K) REP(j,K) REP(k,K)
				C[i][j] = (C[i][j] + T[i][k]*T[k][j])%MOD;
		REP(i,K) REP(j,K)
				T[i][j] = C[i][j];
		n/=2;
	}
	long long res = 0;
	REP(i,K) 
	res  = (res + result[1][i] * F1[i])%MOD;
	return res;
		
}

int main()
{
	int tcs,index=0;
	vector<long long int> out;
	
    cin >> tcs;
    while(index !=  tcs)
    {
    
    	cin >> n >> f0 >> f1 >> a >> b >> c;
      	if((n-1) < 0)
    	{
    		out.push_back(0);
    	}
    	else if((n-1) == 0)
    	{
    		out.push_back(f0);
    		
    	}
    	else if((n-1) == 1)
    	{
    		out.push_back(f1);
    		
    	}
    	else
    	{
    		out.push_back(fibo_fast(n-2));
    	}
    	index++;
    }
    for(vector<long long int>::iterator it=out.begin();it!=out.end();it++)
    {
    	cout << *it << "\n";
    	
    }
    out.erase(out.begin(), out.end());
    return 0;
}
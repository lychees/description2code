#include<bits/stdc++.h>
using namespace std;

typedef long long int64;
typedef vector<int64> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector<int64> > vvi;
typedef pair<int64,int64> ii;
typedef vector<string> vs;
typedef vi::iterator iter;

#define mp make_pair

#define	Sf scanf
#define	Pf printf
#define S second
#define F first
#define pb push_back
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define iterV(c, it) for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define iterM(c, it) for (map <int, int>::iterator it = (c).begin(); it != (c).end(); it++)
#define	present(x, c) ((c).find(x) != (c).end()) //map & set//
#define	cpresent(x, c) (find( (c).begin(), (c).end(), x) != (c).end()) //vector & list//

#define pran(i, n) for(long long int i = 0; i<n; i++)
#define pranab(i, a, b) for(long long int i = a; i<=b; i++)
#define pran_rev(i, n) for(long long int i = n-1; i>=0; i--)
#define pranab_rev(i, a, b) for(long long int i = b; i>=a; i--)


vvi ans;
#define gc getchar_unlocked

#define mem(A,val) memset(A,val,sizeof(A))
#define all(c) (c).begin(),(c).end()

// to sort in decending order .....
//sort(all(v),greater<int64>());


// for transversing backward in vector use rbegin() and rend(); IMP...


int main() {
ios_base::sync_with_stdio(0);


	int64 t;
	cin>>t;
	
	while(t--)
	{
		int64 n;
		cin>>n;
		
		char A[n][n];
		
		pran(i,n)
		{
			pran(j,n)
			{
				cin>>A[i][j];
			}
		}
		
		int64 flag1=0,flag2=0;
		
	pran(i,n/2)
		{
			pran(j,n)
			{
				
				if(A[i][j]!=A[n-1-i][j])
				{
					flag1=1;
					break;
				}
			}
			
		}
		
		pran(j,n/2)
		{
			pran(i,n)
			{
				
				if(A[i][j]!=A[i][n-1-j])
				{
					flag2=1;
					break;
				}
			}
			
		}
		
		if(flag1!=1 && flag2!=1)
		{
			cout<<"BOTH\n";
		}
		else if(flag1==1 && flag2==1)
		{
			cout<<"NO\n";
		}
		else if(flag1==1)
		{
				cout<<"VERTICAL\n";
			
		}
		else if(flag2==1)
		{
		cout<<"HORIZONTAL\n";
		}
		
		
	}


	return 0;
}
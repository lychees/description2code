#include <iostream>
//#include <fstream>
#include <stdio.h>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstdlib>
#include <vector>
#include <deque>
#include <list>
#include <set>
#include <map>
#include <ctime>
 
#define MAXN 200000
#define INF 1000000000
#define pi 3.1415926535
#define LL long long
#define U unsigned
#define mp make_pair
#define pb push_back
#define eps 0.000000001
#define pii pair <int,int>
#define X first
#define Y second
#define MOD 1000000007
#define MOD2 1000000009
 
using namespace std;

//ifstream cin("input.txt");
//ofstream cout("output.txt");

int d[2100000];
int findsum(int l, int r, int v, int lv, int rv)
{
	if (lv>r || rv<l) return 0;
	if (lv>=l && rv<=r) return d[v];
	return findsum(l,r,v*2,lv,rv-(rv-lv+1)/2)+findsum(l,r,v*2+1,lv+(rv-lv+1)/2,rv);
}
void update(int v)
{
	if (v<1) return;
	d[v]=d[v*2]+d[v*2+1];
	update(v/2);
}
int main()
{
	int i,n,e;
	LL ans=0;
	cin >> n;
	int a[MAXN],b[MAXN];
	for (i=0; i<n; i++)
		cin >> a[i];
	for (i=0; i<n; i++)
		cin >> b[i];
	e=1048576;
	d[b[n-1]+e-1]++;
	update((b[n-1]+e-1)/2);
	for (i=n-2; i>=0; i--)
	{
		ans+=(findsum(1,a[i]-1,1,1,e));
		//cout << ans;
		d[b[i+1]+e-1]++;
		update((b[i+1]+e-1)/2);
	}
	//cout << ans;
	i=2;
	while (i*i<=ans)
	{
		if (ans%i==0)
		{
			cout << "SIMPLE INVERSION\n";
			return 0;
		}
		i++;
	}
	cout << "MAGIC INVERSION\n";
	return 0;
}
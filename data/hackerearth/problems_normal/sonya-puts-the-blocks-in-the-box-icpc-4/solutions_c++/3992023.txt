//tagda hai bhai
//inspiration knapsack
#include<bits/stdc++.h>
#include<algorithm>
using namespace std;
#define fr(i,a,b) for(int i=a;i<b;i++)
#define frn(i,a,b) for(int i=a;i>b;i--)
#define si(x) scanf("%d",&x)
#define sll(x)  scanf("%lld",&x)
#define pln printf("\n")
#define pi(x) printf("%d",x)
#define pll(x) printf("%lld",x)
#define mp make_pair
#define pb push_back
#define x first
#define y second
typedef long long ll;
ll MOD=1000000007;
ll pw(ll a,ll b){
  ll r=1;
  while(b>0){
     if(b&1){
       r=(r*a)%MOD;
        }
     b=b>>1;
     a=(a*a)%MOD;
  }
return r;
}
ll dp[110][2010]={{}};
//ll blocks[102][100002];
  //  ll cummu[102][100002]={{}};
 //   ll best[100002];
        ll blocks[1048576];
        ll cummu[1048576];
        ll best[1048576];

       
int main(){
    int n,m;
    int len[110];
    si(n);
    si(m);
    fr(i,1,n+1){
       si(len[i]);
       cummu[0]=0;
       fr(j,1,len[i]+1){
         sll(blocks[j]);
         cummu[j]=(cummu[j-1]+blocks[j]);
       }
        best[0]=0;
          fr(j,1,m+1){
            best[j]=-1e15;//-INF
          }
       fr(j,1,len[i]+1){
            for(int k=1;k<=m&&k+j-1<=len[i];k++){//imp conditions
               best[k]=max( best[k] , cummu[j+k-1]-cummu[j-1] );
            }
         }
     fr(col,0,m+1){
            fr(subysize,0,m+1){
              dp[i][col+subysize]=max(dp[i][col+subysize],dp[i-1][col]+best[subysize]);

            }
         }
   }
   pll(dp[n][m]);pln;

  /*cout<<"cummu--------------\n";
     fr(i,1,n+1){
      fr(j,0,m+1){
      	cout<<cummu[i][j]<<" ";
      }
      pln;
     }
   cout<<"--------------\n";


    fr(i,1,n+1){//find max subarrays |||from each block |||with all lengths
          best[0]=0;
          fr(j,1,m+1){
            best[j]=-1e15;//-INF
          }


         fr(j,1,len[i]+1){
            for(int k=1;k<=m&&k+j-1<=len[i];k++){//imp conditions
               best[k]=max( best[k] , cummu[i][j+k-1]-cummu[i][j-1] );
            }
         }

     cout<<"--------------\n";
      fr(j,0,m+1){
      	cout<<best[j]<<" ";
      }pln;
     cout<<"--------------\n";

         fr(col,0,m+1){
            fr(subysize,0,m+1){
              dp[i][col+subysize]=max(dp[i][col+subysize],dp[i-1][col]+best[subysize]);

            }
         }
     }

    pll(dp[n][m]);pln;

   fr(i,0,n+1){
   	  fr(j,0,m+1){
   	  	cout<<dp[i][j]<<" ";
   	  }
   pln;
   }
*/

return 0;
}

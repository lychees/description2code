#include <bits/stdc++.h>
#define sz(x) ((int)x.size())
using namespace std;
const int N = (1<<14) + 7, M = 1000;
inline int in() { int x; scanf("%d", &x); return x;}

int dp[N][M], d, mod, pre[20];
string s;
inline int calc(int bit, int x) {
    if (dp[bit][x] != -1)
        return dp[bit][x];
    int b[10] = {};
    for (int i = 0; i < sz(s); i++) if(bit & (1<<i))
        b[s[i] - '0'] = i+1;
    int bt = __builtin_popcount(bit)-1;
    for (int i = 0; i < 10; i++)
        if (b[i])
            dp[bit][x] += calc(bit ^ (1<<(b[i]-1)), (x - (pre[bt] * i) + (i * mod)) % mod);
    //cerr << bt << ' ' << pre[bt] << ' ' << bit << ' ' << x << ' ' << dp[bit][x]+1 << endl;
    return ++dp[bit][x];
}

int32_t main() {
    memset(dp, -1, sizeof dp);
    dp[0][0] = 1;
    cin >> s;
    cin >> mod >> d;
    pre[0] = 1;
    for (int i = 1; i < 20; i++)
        pre[i] = (pre[i-1] * 10) % mod;
    cout << calc((1<<sz(s))-1 ,d);
}
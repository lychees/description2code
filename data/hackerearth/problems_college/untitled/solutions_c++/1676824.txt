

    #include<iostream>
    #include<vector>
    #include<string.h>
    #include<stdio.h>
    #include<climits>
    #include<map>
    #include<math.h>
    #include<set>
    #include<algorithm>
    #define LL unsigned long long int
    #define P(N) printf("%d\n",N);
    #define S(N) scanf("%d",&N);
    #define SL(N) scanf("%lld",&N);
    #define pb push_back
    #define mp make_pair
    #define pnl printf("\n");
    #define FOR(i,a,b) for (i=a;i<=b;i++)
    #define mem(a,val) memset(a,val,sizeof(a))
    using namespace std;
    int gcd(int a, int b){ int temp; while(b>0)	{ temp= b; b=a%b; a=temp;}	return a;}
    bool prime[1000110];
    vector<int>primes;
    int mod=1000000007;
    LL sum[1000002];
    int pf[1000003];
    map<int,int>ma[1000010];
    LL fpow(int a1, int b)
    {
        LL prod=1,a=a1;
        while(b)
        {
            if(b&1) prod= (prod*a)%mod;
            b/=2;
            a=(a*a)%mod;
        }
        return prod;
    }
    LL inv(int x)
    {
        return fpow(x,mod-2);
    }
    void sieve()
    {
        int lim=1000000;
        memset(prime,true,sizeof(prime));
        for(int i=2;i*i<=lim+50;i++)
        {
            if(prime[i])
            {
                for(int j=i*i;j<=lim;j+=i)
                {
                    prime[j]=false;
                }
            }
        }
        for(int i=2;i<=lim;i++)if(prime[i])primes.pb(i);
        for(int i=2;i<=lim;i++)
        {
            pf[i]= pf[i-1];
            sum[i]=sum[i-1];
            if(prime[i])
            {
                pf[i]++;
                sum[i]+=i;
            }
        }
        return;
    }
    int main()
    {
           #ifndef ONLINE_JUDGE
           //     freopen("C:\\Users\\hp pc\\Desktop\\input.txt", "r", stdin);
          #endif
          int N,i,j,t;
          sieve();
          S(t)
          while(t--)
          {
                S(N)
                map<int,int>divisors;
                printf("%d %lld ",pf[N],sum[N]%mod);
                LL div=1;
                LL s,x;
                for(int i=0;primes[i]<=N;i++)
                {
                    x= primes[i];
                    s=0;
                    while(x<=N)// number of primes[i] from 1*2*3*..N
                    {
                        s=s+(N/x);
                        x*=primes[i];
                    }
                    div = (div*(1+s)); if(div>=mod)div%=mod;
                }
                cout<<div<<endl;
          }
    return 0;
    }
     
     



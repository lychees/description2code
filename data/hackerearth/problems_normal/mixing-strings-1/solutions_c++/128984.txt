#include <iostream>
using namespace std;

int _strLen(char *str1)
{
	int cnt = 0;
	while(*str1++ != '\0')
		cnt++;

	return cnt;
}
int findOverlappingFromstring1Trailing(char *str1, char *str2)
{
	int cnt = 0;
	int str1Len = _strLen(str1);
	int str2Len = _strLen(str2);
	char *copyofstr2 = str2;
	if(str1Len < str2Len)
	{
		while(*str1++ == *copyofstr2++){
			cnt++;		
			if(cnt == str1Len)
				break;
		}

		if(cnt != str1Len)
			return findOverlappingFromstring1Trailing(str1,str2);
	}
	else
	{
		int nstart = str1Len-str2Len;
		str1 += nstart;
		while(*str1++ == *copyofstr2++){
			cnt++;		
			if(cnt == str2Len)
				break;
		}

		if(cnt != str2Len )
			return findOverlappingFromstring1Trailing(str1,str2);

	}

	
	return cnt;
}


void swap (char *x, char *y)
{
	//hardcoded len
	for(int i =0 ; i < 16; i++)
	{
		char temp;
		temp = *x;
		*x++ = *y;
		*y++ = temp;
	}
}
  
/* Function to print permutations of string
   This function takes three parameters:
   1. String
   2. Starting index of the string
   3. Ending index of the string. */
int permute(char a[][16], int i, int n) 
{
	int nMixedStrLen = 0;
	int j; 
	if (i == n)
	{

		nMixedStrLen = _strLen(a[0]);
		for(int index= 0; index <= n -1 ; index++)
		{
			int nOverlap =  findOverlappingFromstring1Trailing(a[index], a[index+1]);
			nMixedStrLen +=  (_strLen(a[index+1]) -  nOverlap);
		}
			}
	else
	{
		for (j = i; j <= n; j++)
		{
			swap( a[i], a[j]);
			int nLen = permute(a, i+1, n);
			swap( a[i], a[j]); //backtrack
			if(nMixedStrLen == 0)
				nMixedStrLen = nLen;
			else if(nLen < nMixedStrLen)
				nMixedStrLen = nLen;
			
		}
	}

	return nMixedStrLen;
} 

int main()
{
  	int N = 0;
	std::cin >> N;
	char strs[9][16];

	for(int i = 0;i < N; i++)
	{
		std::cin >> strs[i];
	}


	std::cout << permute(strs, 0, N-1);
	
	return 0;
}

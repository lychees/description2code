#include <iostream>
#include <vector>
using namespace std;

int main()
{
    char line1[]="_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#";
    char line2[]="#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_";
    /*char line11[]={"_#","#_","_#","#_","_#","#_","_#","#_","_#","#_","_#","#_","_#","#_","_#","#_"};
    char line22[]={"#_","_#","#_","_#","#_","_#","#_","_#","#_","_#","#_","_#","#_","_#","#_","_#"};*/

    //vector<vector<char> >table(32,vector<char>(32));
    int m,n;
    cin>>m>>n;
    vector<string>table(m);
    for(int i=0;i<m;i++)
    {
        string t;
        cin>>t;
        table[i]=t;
    }

    int result=0;
    bool flag=true;
    if(m<32||n<32)
    {cout<<0<<endl;return 0;}
    vector<vector<bool> >dp(m-31,vector<bool>(n-31,0));


    for(int index=0;index<32;index+=2)
    {
        if(table[index].substr(0,32)!=line1)
        {flag=false;break;}
        if(table[index+1].substr(0,32)!=line2)
        {flag=false;break;}
    }
    if(flag)
    {
        dp[0][0]=1;
        result++;
    }


    for(int i=1;i<=m-32;i++)
    {
        flag=true;
        for(int index=0;index<32;index+=2)
        {
            if(table[i+index].substr(0,32)!=line1)
            {flag=false;break;}
            if(table[i+index+1].substr(0,32)!=line2)
            {flag=false;break;}
        }
        if(flag)
        {
            dp[i][0]=1;//dp[i-1][0]+
            result++;
        }
        else
        dp[i][0]=0;//dp[i-1][0]
    }

    for(int j=1;j<=n-32;j++)
    {
        flag=true;
        for(int index=0;index<32;index+=2)
        {
            if(table[index].substr(j,32)!=line1)
            {flag=false;break;}
            if(table[index+1].substr(j,32)!=line2)
            {flag=false;break;}
        }
        if(flag)
        {
            dp[0][j]=1;//dp[0][j-1]+1;
            result++;
        }
        else
        dp[0][j]=0;//dp[0][j-1]
    }

    //int result=0;
    for(int i=1;i<m-31;i++)
    {
        for(int j=1;j<n-31;j++)
        {
            if(table[i+31][j+31]=='_'&&table[i+31-1][j+31-1]=='_'&&
               table[i+31-1][j+31]=='#'&&table[i+31][j+31-1]=='#')
            {
                if(i>=2&&j>=2&&dp[i-2][j]&&dp[i][j-2])//dp[i-1][j-1]&&
                {
                    dp[i][j]=1;//dp[i-1][j]+dp[i][j-1]+1-dp[i-1][j-1]
                    result++;//=max(result,dp[i][j]);
                    continue;
                }
            }
            else
            continue;
            {
                flag=true;
                int index;
                for(index=0;index<32;index+=2)
                {
                    if(table[i+index].substr(j,32)!=line1)
                    {flag=false;break;}
                    if(table[i+index+1].substr(j,32)!=line2)
                    {flag=false;break;}
                }
                if(flag)
                {
                    result++;
                    dp[i][j]=1;
                }
                else
                {
                    dp[i][j]=0;
                    //i+=index;
                }
            }
        }
    }
    cout<<result<<endl;
    return 0;
}

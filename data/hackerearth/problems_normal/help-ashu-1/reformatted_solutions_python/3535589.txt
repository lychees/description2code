def build(node, start, end):
    global tree
    global ar
    if start == end:
        # print start,end,node
        tree[node] = (ar[start] & 1)
        return
    mid = (start+end)/2
    build(node*2+1, start, mid)
    build(node*2+2, mid+1, end)
    tree[node] = (tree[2*node+1]+tree[2*node+2])
    return


def count(node, start, end, l, r):
    global tree
    global ar
    if l <= start and r >= end:
        return tree[node]
    if r < start or l > end:
        return 0
    mid = (start+end)/2
    return count(2*node+1, start, mid, l, r)+count(2*node+2, mid+1, end, l, r)


def update(node, start, end, val, index):
    global tree
    global ar
    # print "tree in update =",tree
    if (start == end):
        # print start,end,node
        ar[index] = val
        tree[node] = (val & 1)
        return
    mid = (start+end)/2
    if start <= index and index <= mid:
        update(2*node+1, start, mid, val, index)
    else:
        update(2*node+2, mid+1, end, val, index)
    tree[node] = tree[2*node+1]+tree[2*node+2]
    return


n = input()
ar = [int(i) for i in raw_input().split()]
tree = [0]*(10*n)
build(0, 0, n-1)
q = input()
for i in range(0, q):
    # print tree
    m, a, b = (int(i) for i in raw_input().split())
    if m == 0:
        update(0, 0, n-1, b, a-1)
    elif m == 1:
        print(b-a+1-count(0, 0, n-1, a-1, b-1))
    else:
        print count(0, 0, n-1, a-1, b-1)

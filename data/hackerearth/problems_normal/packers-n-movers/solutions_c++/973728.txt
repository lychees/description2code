#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int getMostWork(vector <int> folders, int workers) 
{	
	int size=folders.size(),i;
	
	int lo,hi,req_sum,count=0;
	
	lo=*max_element(folders.begin(),folders.end());
	hi=accumulate(folders.begin(),folders.end(),0);
	
	while(lo < hi)
	{
	
		int mid=lo + (hi-lo)/2;
		req_sum=0;count=1;
		
		// Given the value that we currently have, we need to find the minimum number of workers needed.
		for(i=0;i<size;i++)
		{
			
			if(req_sum + folders[i] <= mid)
			req_sum+=folders[i];
			
			else
			{
				count++;
				req_sum=folders[i];
			}			
		}
	
		if(count > workers)
			lo=mid+1;
		else
			hi=mid;
	}
	
	return lo;
}

int main()
{
	int M,P;
	
	scanf("%d%d",&M,&P);
	
	vector<int> weights(P);
	
	for(int i=0;i<P;i++)
	scanf("%d",&weights[i]);
	
	printf("%d\n",getMostWork(weights,M));
	
	return 0;
}
from collections import defaultdict
class UnionFind:

    def __init__(self):
        self.parents = defaultdict(int)
        self.size    = defaultdict(int)
        
      

    def make_set(self,node_list):
        for node in node_list:
            self.parents[node] = node
            self.size[node]    = 1

            
    def Union(self,node1,node2):
        node1_root = self.Find(node1)
        node2_root = self.Find(node2)

        if node1_root == node2_root:
             return
            
        self.parents[node1_root] = node2_root
        self.size[node2_root]    += self.size[node1_root]
        
    
            
            
    def Find(self,node):
        if self.parents[node] != node:
            self.parents[node] = self.Find(self.parents[node])    
        return self.parents[node]

    def make_leader(self,node):
        root = self.Find(node)
        self.parents[root] = node
        self.parents[node] = node

    
        
            
if __name__ == "__main__":
    N ,Q = [int(x) for x in raw_input().split()]
    L=list(range(1,N+1))
    uf=UnionFind()
    uf.make_set(L)
    for i in range(Q):
        Q = [int(x) for x in raw_input().split()]
        if Q[0]   == 1:
            uf.Union(Q[1],Q[2])

        elif Q[0] == 2:
            uf.make_leader(Q[1])     

        elif Q[0] == 3:
            print uf.Find(Q[1])
        
    
    
    #print X.size
        

    


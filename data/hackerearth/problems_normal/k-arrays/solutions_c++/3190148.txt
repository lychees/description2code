#include <bits/stdc++.h>
#define M 1000000007
#define ll long long int
using namespace std;

//                  Computing (b^e)%M By Exponentiation Squaring
ll powr(ll b,ll e)
{
    ll p=1,q=b;
    while(e>0)
    {
        if(e%2==1)
        {
            p*=q;
            if(p>M)
                p%=M;
        }
        q=(q*q);
        if(q>M)
            q%=M;
        e/=2;
    }
    return p;
}

//                                   Computing (a/b)%M By Calculating Inverse Modulo
ll divmod(ll a,ll b)
{
    ll inv=powr(b,M-2);
    ll p=((a%M)*(inv%M))%M;
    return p;
}

int main()
{
    ll i,j,t,n,k,sub[20],sub_size,mul,val,cnt,q,p,maxp,minp,maxlen,minlen;
    cin>>t;
    while(t--)
    {
        cin>>n>>k;
        memset(sub,0,sizeof(sub));
        for(i=0;i<k;++i)
        {
            for(j=0;j<n;++j)
            {
                cin>>val;
                sub[j]=sub[j]+val;
            }
        }
        sub_size=pow(2,n);
        maxp=maxlen=INT_MIN;
        minp=minlen=INT_MAX;
        for(i=1;i<sub_size;++i)
        {
            mul=1;
            cnt=0;
            for(j=0;j<n;++j)
            {
                if(i&(1<<j))
                {
                    mul=((mul%M)*(sub[j]%M))%M;
                    ++cnt;
                }
            }
            p=divmod(mul,cnt);
            if(p>maxp)
            {
                maxlen=cnt;
                maxp=p;
            }
            else if(maxp==p && maxlen>cnt)
            {
                maxlen=cnt;
            }
            if(p<=minp)
            {
                minlen=cnt;
                minp=p;
            }
            else if(minp==p && minlen<cnt)
            {
                minlen=cnt;
            }
        }
        cout<<(maxp^minp)<<" "<<(maxlen^minlen)<<"\n";
    }
    return 0;
}

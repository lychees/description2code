#include <bits/stdc++.h>
using namespace std;

typedef pair<int,int> pi;

int prim(int node, vector<bool> marked, vector<vector<pi>> graph)
{
	priority_queue<pi> pq;
	pi temp;
	pq.push(make_pair(0,node));
	int mincost = 0;
	
	while(!pq.empty())
	{
		temp = pq.top();
		pq.pop();
		node = temp.second;
		
		if(marked[node]==true)
		continue;
		
		mincost+= temp.first;
		marked[node]=true;
		
		for(int i=0;i<(int)graph[node].size();i++)
		{
			if(marked[graph[node][i].second]==false)
			pq.push(graph[node][i]);
		}
	}
	
	return mincost;
	
}

int main()
{
	
	int t;
	cin >> t;
	
	while(t--)
	{
		int n,m;
    
	    cin >> n >> m;
	    
	    vector<bool> marked(n+1,false);
	    vector<vector<pi>> graph(n+1);
	    
	    int node1,node2,weight;
	    
	    while(m--)
	    {
	    	cin >> node1 >> node2 >> weight;
	    	graph[node1].push_back(make_pair(weight,node2));
	    	graph[node2].push_back(make_pair(weight,node1));
	    }
	    
	    cout << prim(1,marked,graph) << endl;
	}
    
    return 0;
}

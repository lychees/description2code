#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define vi vector<int>
#define vii vector< vector<int> >
#define ii pair<int,int>
#define pb push_back
#define FOR(i,j,k) for(int i = (j) ; i <= (k) ; i++ )
#define FORN(i,j,k) for(int i = (j) ; i >= (k) ;i--)
#define FORI(xx,x,it) for(xx::iterator it = x.begin() ; it != x.end() ; it++)
#define FORNI(xx,x,it) for(xx::reverse_iterator it = x.rbegin() ; it != x.rend() ; it++)
#define si size()
#define MAX 1000

long long ans = 0;

struct node{
	int words;
	int prefix;
	struct node *son[26];
};

void initialize(struct node &temp) {
	temp.words = 0;
	temp.prefix = 0;
	ans++;

	FOR(i,0,25)
		temp.son[i] = 0;

	return;
}

void add_word(struct node &temp, string &str, string::iterator it) {
	if(it == str.end()) {
		temp.words++;
		temp.prefix++;
	}
	else {
		int c = *it - 'a';
		temp.prefix++;

		if(!temp.son[c]) {
			temp.son[c] = new node;
			initialize(*temp.son[c]);
		}
		
		add_word(*temp.son[c], str, ++it);
	}
	return;
}

int main() {
	#ifndef ONLINE_JUDGE
		freopen("in.txt","r",stdin);
	#endif

	struct node root;
	string str;
				//choice, a for add word, p for counting words with same prefix, w for for counting words exactly equal to word
				//d for one letter deleted possible
	int n;
	initialize(root);
	cin >> n;

	while(n--) {
		cin >> str;
		add_word(root,str,str.begin());
	}

	cout << ans << endl;

	return 0;
}

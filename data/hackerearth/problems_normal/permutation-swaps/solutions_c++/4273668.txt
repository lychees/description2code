#include <bits/stdc++.h>

using namespace std;
int par[100001];
int rnk[100001];

int find(int x) {
	int id = x;
	
	while (id != par[id]) {
		id = par[id];
	}
	par[x] = id;
	return id;
}

void Union(int x,int y) {
	int xroot = find(x);
	int yroot = find(y);

	if (rnk[xroot] > rnk[yroot]) {
		par[yroot] = xroot;
		rnk[xroot] += 1;
	} else {
		par[xroot] = yroot;
		rnk[yroot] += 1;
	}
}

int main()
{
	int t,n,mm;
	cin >> t;

	while (t--) {
		cin >> n >> mm;
		for (int i = 0; i <= n; i++) {
			par[i] = i;
			rnk[i] = 0;
		}
		int a[n+1],q[n+1];
		map<int,int> m;
		vector<pair<int,int> > v;
		for (int i = 1; i <= n;i++) {
			cin >> a[i];
			m[a[i]] = i;
		}
		for (int i = 1; i <= n; i++) {
			cin >> q[i];
			if (q[i] != a[i]) {
				v.push_back(make_pair(m[q[i]],m[a[i]]));
			}
		}

		while (mm--) {
			int x,y;
			cin >> x >> y;
			int xroot = find(x);
			int yroot = find(y);
			Union(xroot,yroot);
		}
		bool ok = true;
		for (int i = 0; i < v.size(); i++) {
			int p1 = find(v[i].first);
			int p2 = find(v[i].second);

			if (p1 != p2) {
				ok = false;
				break;
			}
		}

		if (ok) {
			cout << "YES" << endl;
		} else {
			cout << "NO" << endl;
		}
	}

	return 0;
}


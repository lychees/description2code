#include <iostream>

using namespace std;

void printLeft(int *tree,bool *isVisited,bool *isLevel,long long int i,long long int n,long long int level)
{
   
    if(i>=n)return;
    
    if(tree[i]!=0)
    {
        if(isVisited[i]==false)
        {
            if(isLevel[level]==false)
            {
            cout<<tree[i]<<endl;
                isLevel[level]=true;
                isVisited[i]=true;
            }
            
        }
        
          printLeft(tree, isVisited,isLevel, 2*i+2,n,level+1);
          printLeft(tree, isVisited,isLevel, 2*i+1,n,level+1);
        
    }
}


void printRight(int *tree,bool *isVisited,bool *isLevel,long long int i,long long int n,long long int level)
{
    if(i>=n)return;
    
    if(tree[i]!=0)
    {
        if(isVisited[i]==false)
        {
            if(isLevel[level]==false)
            {
                cout<<tree[i]<<endl;
                isLevel[level]=true;
                isVisited[i]=true;
            }
            
        }
        
         printRight(tree, isVisited,isLevel, 2*i+1,n,level+1);
         printRight(tree, isVisited,isLevel, 2*i+2,n,level+1);
        
    }
}

int main()
{
    
    int t=0,*tree=NULL;
    bool *isLevel=NULL,*isLevel2=NULL,*isVisited=NULL;
    cin>>t;
    long long int n=0,n1=0;
    while(t--)
    {
        cin>>n;
        tree=(int*)calloc(n, sizeof(int));
        isLevel=(bool*)calloc(n, sizeof(bool));
        isLevel2=(bool*)calloc(n, sizeof(bool));
        isVisited=(bool*)calloc(n, sizeof(bool));
        
        
        for(n1=0;n1<n;n1++)
            cin>>tree[n1];
        
        printLeft(tree, isVisited,isLevel, 0,n,0);
        printRight(tree,isVisited,isLevel2, 0,n,0);
		
		cout<<endl;
        
        
    }
      return 0;
}
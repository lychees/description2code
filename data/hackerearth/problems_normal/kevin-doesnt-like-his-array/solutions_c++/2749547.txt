#include <bits/stdc++.h>
using namespace std;
#define vi vector<int>
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define inf 1000000007
#define mod 1000000007
#define x first
#define y second
#define pi acos(-1.0)
#define DBG(x) cerr<<(#x)<<"="<<x<<"\n";
#define FOREACH(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)
#define ull unsigned long long
#define ll long long
#define N 100005

template <class T> inline void Min(T &a,T b){if(a>b)a=b;}
template <class T> inline void Max(T &a,T b){if(a<b)a=b;}

int a[N],b[N],s[N];
pii c[N];
int main(){
    int T,i,j,k,n,m,K;
    scanf("%d",&n);
    for(i=0;i<n;i++)scanf("%d",&a[i]),b[a[i]]++;
    int mx=0,ans=0,sz=0;
    for(i=1;i<N;i++)Max(mx,b[i]);
    if(mx>n-mx+1){puts("-1");return 0;}
    priority_queue<pii>q;
    for(i=0,m=0;i<n;i++){
        j=i;
        while(j<n&&a[j]==a[i])j++;
        if(j-i>2)q.push(mp(j-i-1,a[i]));
        else if(j-i==2)s[m++]=a[i];
        i=j-1;
    }
    //DBG(q.size())
    vector<pii>qq;
    while(q.size()>1){
        //DBG("??")
        int x=q.top().x,y=q.top().y;q.pop();
        bool found=0;
        while(!q.empty()){
            int x1=q.top().x,y1=q.top().y;q.pop();
            if(y1!=y){
                ans+=x1;
                x-=x1;
                if(x>1)q.push(mp(x,y));
                else if(x==1)s[m++]=y;
                found=1;
                break;
            }
            else qq.pb(mp(x1,y1));
        }
        if(!found){
            qq.pb(mp(x,y));break;
        }
        else{
            for(i=0;i<qq.size();i++)q.push(qq[i]);
            qq.clear();
        }
    }
    if(!q.empty()){
        int x=q.top().x,y=q.top().y;q.pop();
        qq.pb(mp(x,y));
    }
    {
        sort(s,s+m);
        for(i=0;i<m;i++){
            j=i;
            while(j<m&&s[j]==s[i])j++;
            c[sz++]=mp(j-i,s[i]);
            i=j-1;
        }
        sort(c,c+sz);
    }
    //DBG(sz)
    if(!qq.empty()){
        int u=qq[0].y,num=0;
        for(i=0;i<qq.size();i++)num+=qq[i].x;
        //DBG(num)
        for(i=sz-1;i>=0&&num;i--){
            if(c[i].y!=u){
                int r=min(c[i].x,num);
                num-=r;c[i].x-=r;ans+=r;
            }
        }
        if(num>0)ans+=num;
    }
        priority_queue<int>Q;
        for(i=0;i<sz;i++)if(c[i].x)Q.push(c[i].x);
        while(Q.size()>1){
            int x=Q.top();Q.pop();
            int y=Q.top();Q.pop();
            ans+=y;
            x-=y;
            if(x>0)Q.push(x);
        }
        if(!Q.empty()){
            int x=Q.top();Q.pop();
            ans+=x;
        }
    printf("%d\n",ans);
    return 0;
}
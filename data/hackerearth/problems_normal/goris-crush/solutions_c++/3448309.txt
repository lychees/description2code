/*
ID: ashish1610
PROG:
LANG: C++
*/
#include<bits/stdc++.h>
using namespace std;
#define ll				long long int
#define MOD				1000000007
#define si(a)			scanf("%d", &a)
#define sl(a)			scanf("%lld", &a)
#define pi(a)			printf("%d", a)
#define pl(a)			printf("%lld", a)
#define pn 				printf("\n")
ll pow_mod(ll a, ll b) {
	ll res = 1;
	while(b) {
		if(b & 1)
			res = (res * a) % MOD;
		a = (a * a) % MOD;
		b >>= 1;
	}
	return res;
}
struct query {
	int type;
	int x, y, a, b, c, d;
};
int ar[100005];
map<int, int> mp;
int bit_tree[600005];
void update_bit(int idx, int maxx, int val) {
	while(idx <= maxx) {
		bit_tree[idx] += val;
		idx += (idx & (-idx));
	}
}
int query_bit(int idx) {
	int res = 0;
	while(idx) {
		res += bit_tree[idx];
		idx -= (idx & (-idx));
	}
	return res;
}
int main() {
	int n, q, k;
	si(n); si(q); si(k);
	vector<int> v;
	for(int i = 0; i < n; ++i) {
		si(ar[i]);
		v.push_back(ar[i]);
	}
	vector<query> vq;
	query q1;
	int type;
	while(q--) {
		si(type);
		q1.type = type;
		if(type == 0) {
			si(q1.x); si(q1.y);
			vq.push_back(q1);
			v.push_back(q1.y);
		} else {
			si(q1.a); si(q1.b); si(q1.c); si(q1.d);
			v.push_back(q1.a);
			v.push_back(q1.b);
			v.push_back(q1.c);
			v.push_back(q1.d);
			vq.push_back(q1);
		}
	}
	sort(v.begin(), v.end());
	mp[v[0]] = 1;
	int cnt = 2;
	for(int i = 1; i < (int)(v.size()); ++i) {
		if(v[i] != v[i - 1]) {
			mp[v[i]] = cnt;
			cnt++;
		}
	}
	for(int i = 0; i < n; ++i) {
		update_bit(mp[ar[i]], cnt, 1);
	}
	for(int i = 0; i < (int)(vq.size()); ++i) {
		if(vq[i].type == 0) {
			update_bit(mp[ar[vq[i].x - 1]], cnt, -1);
			update_bit(mp[vq[i].y], cnt, 1);
			ar[vq[i].x - 1] = vq[i].y;
		} else {
			int x, y, res;
			if(vq[i].c > vq[i].b) {
				x = INT_MAX;
				y = INT_MIN;
			} else if(vq[i].a > vq[i].d) {
				x = INT_MAX;
				y = INT_MIN;
			} else {
				x = max(vq[i].a, vq[i].c);
				y = min(vq[i].b, vq[i].d);
			}
			if(y < x) {
				res = 0;
			} else {
				res = query_bit(mp[y]) - query_bit(mp[x] - 1);
			}
			if(res >= k) {
				printf("Propose\n");
			} else {
				printf("Do not propose\n");
			}
		}
	}
	return 0;
}
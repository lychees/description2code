def bins(arr, t):
    low = 0
    high = len(arr)-1
    mid = (low+high)/2
    while low <= high:
        if t == arr[mid]:
            return True
        elif t < arr[mid]:
            high = mid-1
        else:
            low = mid+1
        mid = (low+high)/2
    return False


n, d = map(int, raw_input().split())
arr = []
dep = []
ind = []
hashmap = [None]*1001
cycle = []
for i in range(d):
    a, b = map(int, raw_input().split())
    dep.append(a)
    ind.append(b)
    hashmap[a] = b

while i < len(hashmap):
    mem = []
    x = hashmap[i]
    while True:

        if x not in mem and x is not None:
            mem.append(x)
        else:
            break

        y = hashmap[x]
        if y not in mem and y is not None:
            mem.append(y)
        else:
            break
        x = hashmap[y]
    cycle.append(len(mem))
    i += 1
i = 0
# print cycle
dep = list(set(dep))
ind = sorted(list(set(ind)))
while i < len(ind):
    if bins(dep, ind[i]):
        ind[i] = None
    i += 1

ind = filter(None, ind)
cycle = filter(lambda x: x > 0, cycle)
# print cycle
# print dep
# print ind

if len(ind) > 0:
    print 1
else:
    if cycle != []:
        print min(cycle)
    else:
        print 2
# Solved this question without graph function/techniques

#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz size
#define set0(a) memset(a, 0, sizeof(a))
#define setdp(a) memset(a, -1, sizeof(a))
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion
#define MOD 1000000007

struct sort_pred {
	bool operator()(const std::pair<int,int> &left, const std::pair<int,int> &right) {
    	return left.first < right.first;
	}
};
/*ll power(ll a, ll b) {
ll x = 1, y = a;
    while(b > 0) {
        if(b%2 == 1) {
            x=(x*y);
            if(x>mod) x%=mod;
        }
        y = (y*y);
        if(y>mod) y%=mod;
        b /= 2;
    }
    return x;
}*/
bool prime[1005];
void SieveOfEratosthenes(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    
    memset(prime, true, sizeof(prime));
 
    for (int p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true)
        {
            // Update all multiples of p
            for (int i=p*2; i<=n; i += p)
                prime[i] = false;
        }
    }
 	/*for (int p=2; p<=n; p++)
       if (prime[p])
          cout << p << " ";
    // Print all prime numbers
    */
}

int main(){
	int t;
	cin >> t;
	int ca= 0;
	while(t--){
		ca++;
		int n,n1;
		cin >> n;
		n1 = n;
		double tx=0,ty=0,tz=0,tvx=0,tvy=0,tvz=0;
		while(n--){
			int x,y,z,vx,vy,vz;
			cin >> x >> y >> z >> vx >> vy >> vz;
			tx += x;
			ty += y;
			tz += z;
			tvx += vx;
			tvy += vy;
			tvz += vz;
			//tx += x;
		}
		tx = tx/n1;
		ty = ty/n1;
		tz = tz/n1;
		tvx = tvx/n1;
		tvy = tvy/n1;
		tvz = tvz/n1;
		//cout << tx << endl;
		double d  = tx*tvx + ty*tvy +tz*tvz;
		 d = -1*(double)d/(double)(tvx*tvx + tvy*tvy +tvz*tvz);
		 
		 //d = (double)tx/(double)tvx;
		 //d = abs(d);
		 //double z = 0.536;
		 //double f = -1 * (double)(z);
		 //cout << f << endl;
		 cout << "Case #" << ca << ":" << " ";
		 if(d  > 0)
		 printf("%.8lf",sqrt((tx+d*tvx)*(tx+d*tvx) + (ty+d*tvy)*(ty+d*tvy) + (tz+d*tvz)*(tz+d*tvz)));
		 else
		 printf("%.8lf",sqrt((tx*tx)+(ty*ty)+(tz*tz)));
		 cout << " ";
		 if(d > 0)
		 printf("%.8lf\n",d);
		 else
		 printf("0.00000000\n");
	}
	return 0;
}


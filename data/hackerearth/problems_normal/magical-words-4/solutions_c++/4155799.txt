/*
Queen of westeros is known for her dragons and magic.
To control her dragons she speaks random but powerful words.
The strength of her words can be predicted by a strange rule. 
Rule : Strength of a word is sum of square of size of palindromic substrings in the word. 
To recall the definition of palindrome, palindrome is a word which reads same when read forward and backward. 
For example, word "abaa" has 6 palindromic substrings. "aba","aa","a","b","a","a" with sizes 3,2,1,1,1,1 respectively.
Their squares are 9,4,1,1,1,1. Hence total strength is 17. Given a queens word ind its strength.
*/

#include <iostream>
#include <vector>
#include <string>
#include <cmath>
#include <climits>
#include <algorithm>

using namespace std;

int main()
{
	int t;
	cin >> t;
	while (t--)
	{
		string str;
		cin >> str;
		int len = str.length();
		vector<vector<int>> a(len, vector<int>(len, 0));
		// first base case
		unsigned long long int count = 0;
		for (int i = 0; i < len; i++)
		{
			a.at(i).at(i) = 1;
			count += pow(1, 2);
		}
		for (int l = 1; l < len; l++)
		{
			for (int i = 0; i < len - l; i++)
			{
				int j = i + l;
				if (l == 1)
				{
					if (str.at(i) == str.at(i + 1))
					{
						a.at(i).at(j) = 1;
						count += pow(j - i + 1, 2);
					}
				}
				else
				{
					if (a.at(i + 1).at(j - 1) == 1 && str.at(i) == str.at(j))
					{
						a.at(i).at(j) = 1;
						count += pow(j - i + 1, 2);
					}
				}
			}
		}
		cout << count << endl;
	}
	return 0;
}
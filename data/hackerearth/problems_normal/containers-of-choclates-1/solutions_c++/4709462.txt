#include<bits/stdc++.h>
using namespace std;
#define unvisited 0
#define process 1
#define visited 2
#define mx 100005
int main(){
	int test,k=0;
	cin >> test;
	while(test--){
		int state[mx]={0};
		int n,a,b;
		cin >> n;
		vector<list<int> >graph(mx);
		while(n--){
			cin >> a >> b;
			graph[a].push_back(b);
			graph[b].push_back(a);
		}
		int res=0;
		for(int i=1;i<mx;i++){
			if(state[i]==unvisited&&graph[i].size()){
				int val1=0,val2=0;
				queue<pair<int,int> >q;
				q.push(make_pair(i,1));
				state[i]=process;
				while(!q.empty()){
					int val=q.front().first;
					int cnt=q.front().second;
					if(cnt%2)++val1;
					else ++val2;
					q.pop();
					list<int>::iterator it=graph[val].begin();
					for(;it!=graph[val].end();++it){
						if(state[*it]==unvisited){
							state[*it]=process;
							q.push(make_pair(*it,cnt+1));
						}
					}
					state[val]=visited;
				}
				res+=max(val1,val2);
			}
		}
		cout << "Case " << ++k << ": " << res << endl;
	}
	return 0;
}
#include <bits/stdc++.h>
using namespace std;
vector<int> v[100005];
#define ll long long int
long long int n, k, ans = 0;
#define MAXN 100005
void update(int idx, int val, int tree[])
{
	while ( idx <= MAXN ) {
		tree[idx] += val;
		idx += (idx & (-idx));
	}
	return;
}
int query(int idx, int tree[])
{
	int res = 0;
	while ( idx > 0 ) {
		res += tree[idx];
		idx -= (idx & (-idx));
	}
	return res;
}
void dfs(int node, int tree[]) {
	for(int i = 0; i < v[node].size(); i++) {
		ll temp = k / (v[node][i] + 1);
		if(temp > MAXN) temp = MAXN - 1;
		ans += query(temp, tree);
		update(v[node][i] + 1, 1, tree);
		dfs(v[node][i], tree);
		update(v[node][i] + 1, -1, tree);
	}
	
}
int main()
{
    for(int i = 0; i < 100005; i++)v[i].clear();
    cin >> n >> k;
    int in[100001];
    int out[100001];
    memset(in, 0, sizeof(in));
    memset(out, 0, sizeof(out));
    for(int i = 0; i < n - 1; i++) {
    	int a, b;
    	cin >> a >> b;
    	in[b - 1]++;
    	out[a - 1]++;
    	v[a - 1].push_back(b - 1);
    }
    int tree[MAXN];
    int temp = -1;
    for(int i = 0; i <= 100000; i++) if(in[i] == 0 && out[i] != 0) temp = i;
    memset(tree, 0, sizeof(tree));
    
	update(temp + 1, 1, tree);
    dfs(temp, tree);
    cout << ans;
    return 0;
}

/*
4 10000000000
10000 100000
10000 99999
10000 99998
*/

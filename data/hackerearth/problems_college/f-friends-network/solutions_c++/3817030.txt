#include<bits/stdc++.h>
using namespace std;
int n,t;
vector< vector<int > >v(505,vector<int>(505,false));
bool isCyclicUtil(int r, vector<bool>&visited , vector<bool>&recStack)
{
    if(visited[r] == false)
    {
        // Mark the current node as visited and part of recursion stack
        visited[r] = true;
        recStack[r] = true;

        // Recur for all the vertices adjacent to this vertex

        for(int i=0;i<n;i++)
        {
              if(v[r][i])
              {


            if ( !visited[i] && isCyclicUtil(i, visited, recStack) )
                return true;
            else if (recStack[i])
                return true;
              }
        }

    }
    recStack[r] = false;  // remove the vertex from recursion stack
    return false;
}

// Returns true if the graph contains a cycle, else false.
// This function is a variation of DFS() in http://www.geeksforgeeks.org/archives/18212
string isCyclic()
{
    // Mark all the vertices as not visited and not part of recursion
    // stack
   vector<bool>visited(n,false);
   vector<bool>recStack(n,false);

    // Call the recursive helper function to detect cycle in different
    // DFS trees
    for(int i = 0; i < n; i++)
        if (isCyclicUtil(i, visited, recStack))
            return "Aye";

    return "Nae";
}
int main()
{
    ios::sync_with_stdio(false);
      cin>>t;
      while(t--)
      {
          cin>>n;
          for(int i=0;i<n;i++)
          {
            for(int j=0;j<n;j++)
                cin>>v[i][j];
          }
          cout<<isCyclic()<<"\n";

      }




}

CONST = 1000000007


def mul(A, B, n, c):
    C = []
    for i in range(n):
        C.append([0] * n)
    for i in range(n):
        for j in range(n):
            for k in range(n):
                C[i][j] = (C[i][j] + ((A[i][k] % c) * (B[k][j] % c)) % c) % c
    return C


f = dict()


def modExp(A, b, n, c):
    if b in f:
        return f[b]
    if b % 2 == 1:
        f[b] = mul(A, modExp(A, b-1, n, c), n, c)
        return f[b]
    C = modExp(A, b/2, n, c)
    f[b] = mul(C, C, n, c)
    return f[b]


N = int(raw_input())
m = []
for i in range(N):
    m.append([0] * N)
R = int(raw_input())
for i in range(R):
    s, t = [int(_) for _ in raw_input().split()]
    m[s-1][t-1] += 1
f[1] = m
Q = int(raw_input())
for i in range(Q):
    s, t, P = [int(_) for _ in raw_input().split()]
    print modExp(m, P, N, CONST)[s-1][t-1]

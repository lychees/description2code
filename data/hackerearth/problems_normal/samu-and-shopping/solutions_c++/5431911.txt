#include <iostream>
#include <string.h>
#include <vector>
using namespace std;


 int dpSolution(vector<vector<int>>& userPrice,vector<vector<int>>&dpMin,int fromShop, int item,int n){
	//if buying from last shop, return total price
	if(fromShop == n-1){
		return userPrice[fromShop][item];
	}
	else if(dpMin[fromShop][item] != -1){
		return dpMin[fromShop][item];
	}
	else{
		switch(item){
			case(0): dpMin[fromShop+1][1] = dpSolution(userPrice,dpMin,fromShop+1,1,n);
			         dpMin[fromShop+1][2] = dpSolution(userPrice,dpMin,fromShop+1,2,n);
			  return dpMin[fromShop][item] = userPrice[fromShop][item] + min(dpMin[fromShop+1][1],dpMin[fromShop+1][2]);
			  break;
				   
			case(1): dpMin[fromShop+1][0] = dpSolution(userPrice,dpMin,fromShop+1,0,n);
			         dpMin[fromShop+1][2] = dpSolution(userPrice,dpMin,fromShop+1,2,n);
			  return dpMin[fromShop][item] = userPrice[fromShop][item] + min(dpMin[fromShop+1][0],dpMin[fromShop+1][2]);
			  break;
				   
			case(2): dpMin[fromShop+1][0] = dpSolution(userPrice,dpMin,fromShop+1,0,n);
			         dpMin[fromShop+1][1] = dpSolution(userPrice,dpMin,fromShop+1,1,n);
			  return dpMin[fromShop][item] = userPrice[fromShop][item] + min(dpMin[fromShop+1][0],dpMin[fromShop+1][1]);
			  break;
		}
	}
}

int main()
{
   int testCount;//number of test cases
   cin>>testCount;
   int n;
	for(int i=0;i<testCount;i++)
	{
    	
   		vector<vector<int>> listPrice(100000, vector<int>(3,0));
   		vector<vector<int>> dpResult(100000, vector<int>(3,-1));
    	//for each test case read number of shops
    	n=0;
    	cin>>n;
    	//read prices for each shop
    	for(int j=0;j<n;j++){
    		for(int k=0;k<3;k++){
    			cin>>listPrice[j][k];
    		}
    	}
    	int minMoney = 0;
    	 minMoney = min(dpSolution(listPrice,dpResult,0,0,n),min(dpSolution(listPrice,dpResult,0,1,n),dpSolution(listPrice,dpResult,0,2,n)));
    	cout<<minMoney<<endl;
    }
    return 0;
}

#include <bits/stdc++.h>

using namespace std;

const int MAXN = 2e5 + 9;

int n;
int arr[MAXN];

const int LOG_MAX = 19;

int sparse_table[MAXN][LOG_MAX], log_2[MAXN];

inline int log2(int x){	
	return (log10(x)/log10(2));
}

void preprocess(){
	for(int i=0; i<n; i++){
		sparse_table[i][0] = arr[i];
	}
	for(int j=1; j<LOG_MAX; j++){
		for(int i=0; i + (1 << j) - 1 < n; i++){
			sparse_table[i][j] = max(sparse_table[i][j-1], sparse_table[i + (1 << (j-1) )][j-1]);
		}
	}
}

int query(int l, int r){
	int length = r - l + 1, log_val = log_2[length];
	return max(sparse_table[l][log_val], sparse_table[r - (1 << log_val) + 1][log_val]);
}

int main(int argc, char const *argv[]){
	
	int cases;
	scanf("%d", &cases);

	for(int i=1; i<MAXN; i++) {
		log_2[i] = log2(i);
	}

	while(cases--) {
		int k;
		scanf("%d%d", &n, &k);

		for(int i=0; i<n; i++) {
			scanf("%d", &arr[i]);
		}
		preprocess();

		long long ans = 0;

		for(int i=0; i<n; i++) {
			int lo = i, mid, hi = n-1;
			while(lo < hi) {
				mid = lo + (hi - lo) / 2;
				if(query(i, mid) > k) {
					hi = mid;
				}
				else {
					lo = mid + 1;
				}
			}
			if(query(i, lo) <= k) {
				continue;
			}
			ans += (n-lo);			
		}

		printf("%lld\n", ans);
	}
	return 0;
}
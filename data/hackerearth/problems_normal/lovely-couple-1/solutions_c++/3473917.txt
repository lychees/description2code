#include <iostream>
using namespace std;
#include<bits/stdc++.h>


/*int primeFactors(int n)
{
    // Print the number of 2s that divide n
    int j=0;
    while (n%2 == 0)
    {
        a[j]=2;
        printf("2");
        j++;
        n = n/2;
    }
 
    // n must be odd at this point.  So we can skip one element (Note i = i +2)
    for (int i = 3; i <= sqrt(n); i = i+2)
    {
        // While i divides n, print i and divide n
        while (n%i == 0)
        {
            a[j]=i;
            printf("%d",i);
            j++;
            n = n/i;
        }
    }
 
    // This condition is to handle the case whien n is a prime number
    // greater than 2
    if (n > 2)
    {
        a[j]=n;
        printf("%d",n);
        j++;
    }
    return j;
    
}
*/
int prime(int n)
{
	int i;
	std::set<int> first;   
	for(i=2;i<=n;i++) 
	{ 
		if(n%i==0) 
		{ 
		//	printf("%d,",i); 
			first.insert(i);
		//	j++;
			n=n/i; 
			i--; 
			if(n==1) 
				break; 
		} 
	} 
	
	return first.size();
}
int gcd(int a, int b)
{
    // base case
    if (a == b)
        return a;
 
    // a is greater
    if (a > b)
        return gcd(a-b, b);
    return gcd(a, b-a);
}
 
// Function to return LCM of two numbers
int lcm(int a, int b)
{
    return (a*b)/gcd(a, b);
}
int main()
{
    int t,a,b,ii;
    scanf("%d",&t);
    while(t--)
    {
    	
    	scanf("%d %d",&a,&b);
    	/*max=(a>b) ? a : b; 
  		while(1)                       
  		{
    		if(max%a==0 && max%b==0)
      		{
        		 
        		 break;          
      		}
    		 ++max;
		}*/
		int max=lcm(a,b);
		int count = prime(max);
		//printf("%d\n",count);
		int flag=0;
		for(int i=2;i<=count/2;++i)
  		{
      		if(count%i==0)
      		{
          		flag=1;
          		break;
      		}
  		}	
		if(flag==0 && count!=1)
			printf("Yes\n");
		else
			printf("No\n");
		
    }
    return 0;
}


#include <bits/stdc++.h>
 
using namespace std;
 
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
    int n;
    cin >> n;
    long long int avail[n];
    for(int i=0;i<n;i++)
    {
        cin >> avail[i];            //List of available resources
    }
    int m;
    cin >> m;
    int alloc[m][n];
    for(int i=0;i<m;i++)
        for(int j=0;j<n;j++)
            cin >> alloc[i][j];         //resources allocated to the processes
 
    int max_claim[m][n];
    for(int i=0;i<m;i++)
        for(int j=0;j<n;j++)
            cin >> max_claim[i][j];     //resources required by the processes
 
    bool running[n];
    for(int i=0;i<n;i++)
        running[i] = 1;             //running status of processes
 
    int count=m;
    bool flag;
    int need[m][n];
    for(int i=0;i<m;i++)
        for(int j=0;j<n;j++)
            need[i][j] = max_claim[i][j] - alloc[i][j];     //resources needed by each process
 
    while(count--)
    { 
        flag = false;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(avail[j] < need[i][j])           //check if the process can be satisfied using available resources
                {
                    flag=true;
                    break;
                }
            }
 
            if(!flag)
            {
                for(int j=0;j<n;j++)
                {
                    avail[j] = avail[j] + alloc[i][j];      //if a process can be satisfied, terminate it and deallocate the resources allocated to it.
                    running[i] = false;
                }
 
            }
        }
    }
 
    flag = false;
    for(int i=0;i<m;i++)
    {
        if(running[i] == true)                  //if all processes have terminated, then print YES else NO
            flag= true;
    }
 
    if(!flag)
        cout << "YES" << endl;
    else
        cout << "NO" << endl;
    }
 
    return 0;
}




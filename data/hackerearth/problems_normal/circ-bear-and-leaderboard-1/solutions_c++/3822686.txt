#include<cstdio>
#include<vector>
#include<map>
#include<algorithm>
using namespace std;
#define mid 710
vector<long long> v;
map<long long,int> mp;
long long ans[mid+2],sum[mid+2];
long long ar[500802];
int inc[mid+2];
int qer[500802][2];
int rnk[500802];
int cont[500802];
map<long long,int> mpp;
int main()
{
  int N,Q; scanf("%d %d",&N,&Q); int a,b; v.push_back(0);
  rnk[0] = 1; cont[0] = N;
  for(int i=1;i<=Q+mid;i++) rnk[i] = 1;
  for(int i=0;i<Q;i++)
  {
    scanf("%d %d",&a,&b);
	ar[a] += b;
if(mpp[ar[a]]==0)	
{
mpp[ar[a]]=1;
v.push_back(ar[a]);

}
	qer[i][0] = a; qer[i][1] = b;
  }
  
  sort(v.begin(),v.end());   while(v.size() % mid != 0 ) v.push_back(100000000000000LL);
  int sz = v.size();


  for(int i=0;i<v.size();i++)
   mp[v[i]] = i ;
   
   for(int i=0;i<=N;i++) ar[i] = 0;
   
   for(int i=0;i<Q;i++)
   {
     a = qer[i][0]; b = qer[i][1];
	 long long tmp_ans = 0;
	 a--;
	 
	 long long x = ar[a];
	 ar[a] = x+b;
	 long long to = x + b;
	 int idx = mp[x] ;
	 int idx_to = mp[x+b];
	 int itv1 = idx / mid;
	 int itv2 = idx_to / mid;
	 if(itv1 == itv2)
	 {

	   int st = itv1 * mid; int en = st + mid;
	   
	     for(int j=st;j<en ; j++) rnk[j] += inc[itv1];
		 inc[itv1] = 0;
		 
		 cont[idx]--; cont[idx_to]++;
		 
	
		 
		 
		 for(int j=idx;j<idx_to;j++) rnk[j]++;
		 
	  if(rnk[idx_to]==0) rnk[idx_to] = 1;
	   
		 
		 
		 long long tmp_sum = 0;
		 
		 
		 for(int j=st;j<en;j++)
		 tmp_sum += cont[j] * v[j];
		 sum[itv1] = tmp_sum;
		 
		 long long tmp_ans  = 0;
		 for(int j=st;j<en;j++)
		 tmp_ans += cont[j] * v[j]*rnk[j];
		 
		 ans[itv1] = tmp_ans;
		 
	 
	 }
	 
	 else
	 {
	    int st = itv1 * mid; int en = st + mid;
		for(int j=st;j<en ; j++) rnk[j] += inc[itv1];
		
		inc[itv1] = 0;
		cont[idx]--;
		
		 for(int j=idx;j<en;j++) rnk[j]++;
		 
		 long long tmp_sum = 0;
		 
		 for(int j=st;j<en;j++)
		 tmp_sum += cont[j] * v[j];
		 sum[itv1] = tmp_sum;
		 
		 long long tmp_ans  = 0;
		 for(int j=st;j<en;j++)
		 tmp_ans += cont[j] * v[j]*rnk[j];
		 
		 ans[itv1] = tmp_ans;
		 
		 
		 st = itv2 * mid;  en = st + mid;
		 for(int j=st;j<en ; j++) rnk[j] += inc[itv2];
		 inc[itv2] = 0;
		cont[idx_to]++;
		
		 
		  for(int j=st;j<idx_to;j++) rnk[j]++;
		  
		  if(rnk[idx_to]==0) rnk[idx_to] = 1;
		 
		  tmp_sum = 0;
		 
		 for(int j=st;j<en;j++)
		 tmp_sum += cont[j] * v[j];
		 sum[itv2] = tmp_sum;
		 
		  tmp_ans  = 0;
		 for(int j=st;j<en;j++)
		 tmp_ans += cont[j] * v[j]*rnk[j];
		 
		 ans[itv2] = tmp_ans;
		 
		 
		 for(int j=itv1 + 1;j<itv2 ;j++)
		 {
		  inc[j]++;
		 }
	 
	 }
	
	long long ans_p = 0;
	
	for(int j=0;j<=v.size()/mid;j++)
	ans_p += ans[j] + inc[j] * sum[j];
	
	printf("%lld\n",ans_p);
	 
	 
	 
	 
   }
   
   
  
}

#include <bits/stdc++.h>
using namespace std;
int maxlvl=0;
struct Node{
	int key;
	bool isVisited;
	struct Node *left,*right;
};
struct Node *instance(int value)
{
	struct Node *tempNode=(struct Node*)malloc(sizeof(struct Node));
	tempNode->key=value;
	tempNode->left=NULL;
	tempNode->right=NULL;
	tempNode->isVisited=false;
	
	return tempNode;
}
void printRightMirrorView(struct Node *node, int lvl)
{
	if(node==NULL)
		return;
	if(maxlvl < lvl)
	{
		printf("%d\n",node->key);
		node->isVisited=true;
		maxlvl=lvl;
	}
	printRightMirrorView(node->right, lvl + 1);
	printRightMirrorView(node->left, lvl + 1);
}
void printLeftMirrorView(struct Node *node, int lvl)
{
	if(node==NULL)
		return;
	if(maxlvl < lvl)
    {
		if(node->isVisited==false)
			printf("%d\n",node->key);
		maxlvl = lvl;
		node->isVisited=true;
	}
	printLeftMirrorView(node->left, lvl + 1);
	printLeftMirrorView(node->right, lvl + 1);
}
int main()
{
	int t,n;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&n);
		int a[n+1];
		for(int i=1;i<=n;i++)
			scanf("%d",&a[i]);
			
		struct Node *root=instance(a[1]);
		vector <struct Node* > tree(100000);
        tree[1]=(root);
        for(int i=1;i<=n;i++)
        {
        	if(a[i])
        	{
        		struct Node *parent=tree[i];

        		if(2*i<=n && a[2*i]){
        			parent->left=instance(a[2*i]);
                    tree[2*i]=parent->left;
                }

        		if((2*i+1)<=n && a[2*i+1]){
        			parent->right=instance(a[2*i+1]);
                    tree[2*i+1]=parent->right;
                }
            }
        }
		maxlvl=0;
		printRightMirrorView(root,1);
		
		maxlvl=0;
        printLeftMirrorView(root,1);

        printf("\n");
    }
	
	return 0;
}
#include <iostream>
#include <vector>
#include "stdio.h"
using namespace std;

int main()
{
    int T;
    cin >> T;
    int* A = new int[T];
    int* D = new int[T];
    int* M = new int[T];
    for(int j = 0; j < T; ++j)
    {
    	int N;
    	scanf("%d", &A[j]);
    }
    
    for(int j = 0; j < T; ++j)
    {
    	vector<int> v;
    	int tmp = A[j];
    	while(tmp > 0)
    	{
    		v.push_back(tmp%10);
    		tmp /= 10;
    	}
 
		int vsize = v.size();   	
    	vector<int> vg;
    	vg.push_back(0);
    	bool ifcut = false;
 		for(int i = vsize - 1; i >= 0; --i)
 		{
 			if (!ifcut)
 			{
 				if (v[i]%2 == 0)
 				{
 					vg.push_back(v[i]);
 				}else
 				{
 					if (v[i] < 9)
 					{
 						vg.push_back(v[i]+1);
 						ifcut = true;
 					}else
 					{
 						int index = vg.size()-1;
 						vg[index] += 2;
 						while(index >= 0 && vg[index] == 10)
 						{
 							vg[index] = 0;
 							--index;
 							vg[index] += 2;
 						}
 						vg.push_back(0);
 						ifcut = true;
 					}
 				}
 			}else
 			{
 				vg.push_back(0);
 			}
 		}
 		
 		ifcut = false;
 		vector<int> vs;
 		for(int i = vsize - 1; i >= 0; --i)
 		{
 			if (!ifcut)
 			{
 				if (v[i]%2 == 0)
 				{
 					vs.push_back(v[i]);
 				}else
 				{
 					vs.push_back(v[i]-1);
 					ifcut = true;
 				}
 			}else
 			{
 				vs.push_back(8);
 			}
 		}
 		
 		int G = 0;
 		for(int i = 0; i < vg.size(); ++i)
 		{
 			G  = 10*G + vg[i];
 		}
 		
 		int S = 0;
 		for(int i = 0; i < vs.size(); ++i)
 		{
 			S  = 10*S + vs[i];
 		}
    	
    	if (ifcut == false)
    	{
    		D[j] = 0;
    	}else
    	{
    		D[j] = A[j]-S;
    		M[j] = G-A[j];
    		int maxA = std::max(D[j],M[j]);
    		int minA = std::min(D[j],M[j]);
    		while(maxA%minA)
    		{
    			int tmp = maxA%minA;
    			maxA = minA;
    			minA = tmp;
    		}
    		D[j] /= minA;
    		M[j] /= minA;
    	}
    }
    for(int j = 0; j < T; ++j)
    {
    	if (D[j] == 0)
    	{
    		printf("%s\n","Unlimited Power");
    	}else
    	{
    		printf("%d/%d\n",M[j],D[j]);
    	}
    }
    return 0;
}

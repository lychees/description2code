#include "bits/stdc++.h"
using namespace std;
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
static const int INF = 0x3f3f3f3f; static const long long INFL = 0x3f3f3f3f3f3f3f3fLL;
typedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;
template<typename T, typename U> static void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> static void amax(T &x, U y) { if(x < y) x = y; }


template<int MOD>
struct ModInt {
	static const int Mod = MOD;
	unsigned x;
	ModInt() : x(0) {}
	ModInt(signed sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	ModInt(signed long long sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	int get() const { return (int)x; }

	ModInt &operator+=(ModInt that) { if((x += that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator-=(ModInt that) { if((x += MOD - that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator*=(ModInt that) { x = (unsigned long long)x * that.x % MOD; return *this; }
	ModInt &operator/=(ModInt that) { return *this *= that.inverse(); }

	ModInt operator+(ModInt that) const { return ModInt(*this) += that; }
	ModInt operator-(ModInt that) const { return ModInt(*this) -= that; }
	ModInt operator*(ModInt that) const { return ModInt(*this) *= that; }
	ModInt operator/(ModInt that) const { return ModInt(*this) /= that; }

	ModInt inverse() const {
		signed a = x, b = MOD, u = 1, v = 0;
		while(b) {
			signed t = a / b;
			a -= t * b; std::swap(a, b);
			u -= t * v; std::swap(u, v);
		}
		if(u < 0) u += Mod;
		ModInt res; res.x = (unsigned)u;
		return res;
	}
};

typedef ModInt<1000000007> mint;

vector<mint> fact, factinv;
void nCr_computeFactinv(int N) {
	N = min(N, mint::Mod - 1);
	fact.resize(N + 1); factinv.resize(N + 1);
	fact[0] = 1;
	rer(i, 1, N) fact[i] = fact[i - 1] * i;
	factinv[N] = fact[N].inverse();
	for(int i = N; i >= 1; i --) factinv[i - 1] = factinv[i] * i;
}
mint nCr(int n, int r) {
	if(n >= mint::Mod)
		return nCr(n % mint::Mod, r % mint::Mod) * nCr(n / mint::Mod, r / mint::Mod);
	return r > n ? 0 : fact[n] * factinv[n - r] * factinv[r];
}

mint nHr(int n, int r) {
	return r == 0 ? 1 : nCr(n + r - 1, r);
}

namespace mynamespace {
int n, P;
vector<vector<int>> digits;
vector<vector<mint>> memo;
vector<int> popcnt;
vector<vector<int>> sums;

mint rec(int i, int lt) {
	mint &r = memo[i + 1][lt];
	if(r.x != -1) return r;
	if(i == -1)
		return r = 1;
	r = mint();
	int rem = (1 << n) - 1 - lt;
	for(int nlt = rem; ; (-- nlt) &= rem) {
		mint ways;
		for(int s = nlt; ; (-- s) &= nlt) {
			int frees = lt | nlt;
			int base = sums[i][s | ((1 << n) - 1 - frees)];
			if(base < P) {
				mint cnt = nHr(P - base, popcnt[frees]);
				if(popcnt[s] % 2 == 0)
					ways += cnt;
				else
					ways -= cnt;
			}
			if(s == 0) break;
		}

		r += ways * rec(i - 1, lt | nlt);
		if(nlt == 0) break;
	}
	return r;
}

}

int main() {
	using namespace mynamespace;
	while(~scanf("%d%d", &n, &P)) {
		nCr_computeFactinv(P + n);
		vector<int> xs(n);
		for(int i = 0; i < n; ++ i)
			scanf("%d", &xs[i]);
		int X = *max_element(xs.begin(), xs.end());
		int L = 1;
		for(int p = 1; p <= X / P; p *= P)
			++ L;
		digits.assign(L, vector<int>(n));
		rep(j, n) {
			int x = xs[j];
			rep(i, L) {
				digits[i][j] = x % P;
				x /= P;
			}
		}
		popcnt.assign(1 << n, 0);
		rep(i, 1 << n) rep(j, n)
			popcnt[i] += i >> j & 1;
		sums.assign(L, vector<int>(1 << n, 0));
		rep(i, L) {
			rep(k, n) rep(j, 1 << k)
				sums[i][j | 1 << k] = sums[i][j] + digits[i][k];
		}
		mint undef; undef.x = -1;
		memo.assign(L + 1, vector<mint>(1 << n, undef));
		mint nonzero = rec(L - 1, 0);
		mint total = 1;
		rep(i, n)
			total *= xs[i] + 1;
		mint ans = total - nonzero;
		printf("%d\n", ans.get());
	}
	return 0;
}

#include <iostream>
#include <map>
#include <queue>
#include <vector>
using namespace std;

int main() {
        int size;
        cin >> size;
        int matrix[size][size];
        for(int i = 0; i < size; ++i)
                for(int j = 0; j < size; ++j)
                        cin >> matrix[i][j];
        //Form Graph
        map<int, vector<int> > Graph;
        map<int, vector<int> >::iterator it;
        for(int i = 0; i < size; ++i)
                for(int j = 0; j < size; ++j) {
                        int node = (i * size) + j;
                        if (matrix[i][j] == 1 ) {
                                if((i + 1) < size)
                                        if(matrix[i+1][j] == 1)
                                                Graph[node].push_back((i+1)*size + j);
                                if((i - 1) >= 0)
                                        if(matrix[i-1][j] == 1)
                                                Graph[node].push_back((i-1)*size + j);
                                if((j - 1) >= 0)
                                        if(matrix[i][j-1] == 1)
                                                Graph[node].push_back(i*size + j-1);
                                if((j + 1) < size)
                                        if(matrix[i][j+1] == 1)
                                                Graph[node].push_back((i)*size + j+1);
                        }
                }

        bool visited[size*size];
        for(int i = 0; i < size*size;++i)
                visited[i] = false;
        int maxConnect = 0;
        for(it = Graph.begin(); it != Graph.end(); ++it) {
                queue<int> q;
                if (visited[it->first] == false) {
                        q.push(it->first);
                        visited[it->first] = true;
                        int connect = 1;
                        while(!q.empty()) {
                                int node = q.front();
                                q.pop();
                                vector<int> edges = Graph[node];
                                for(int i = 0; i < edges.size(); ++i) {
                                        if(!visited[edges[i]]){
												q.push(edges[i]);
                                                visited[edges[i]] = true;
                                                ++connect;
                                        }
                                }
                        }
                        if (maxConnect < connect)
                                maxConnect = connect;
                }
        }
        cout<<maxConnect<<endl;
}

#include<sys/resource.h>
#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion
#define EPS 1e-9
#define MOD 1000000007

vector < vi > vis , a ;
int nr[]={ 1 , -1 , 1 ,-1 , 1 , -1 , 0 , 0  } , n , m ;
int nc[]={ 1 , -1 ,-1 , 1 , 0 , 0  , 1 , -1 };
char str[1000009];

void dfs( int x , int y )
{
    vis[x][y] = 1;
    REP( i , 0 , 7 )
    {
        int ux = x + nr[i] , uy = y + nc[i];
        if( ux >= 0 && ux < n && uy >= 0 && uy < m && vis[ux][uy] == 0 )
            dfs( ux , uy );
    }
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    //freopen("input.in","r",stdin);
    //freopen("output.out","w",stdout);
    struct rlimit lim;
    lim.rlim_cur = lim.rlim_max = 200 << 20; // 200MB
    setrlimit(RLIMIT_STACK, &lim);
    int t ;
    s(t) ;
    while( t-- )
    {
        s(n) ; s(m) ;
        a.clear();
        vis.clear();
        a.resize( n );
        vis.resize( n );
        REP( i , 0 , n - 1 )
        {
            a[i].resize( m ) ;
            vis[i].resize( m ) ;
            scanf("%s",str);
            REP( j , 0 , m - 1 )
                a[i][j] = int( str[j] - 'a' ) ;
        }
        bool ch = true;
        REP( k , 0 , 25 )
        {
            REP( i , 0 , n - 1 )
            {
                REP( j , 0 , m - 1 )
                {
                    if( a[i][j] == k )
                        vis[i][j] = 1 ;
                    else
                        vis[i][j] = 0 ;
                }
            }
            REP( i , 0 , m - 1 )
            {
                if( vis[0][i] == 0 )
                    dfs( 0 , i );
                if( vis[n - 1][i] == 0 )
                    dfs( n - 1 , i );
            }
            REP( i , 0 , n - 1 )
            {
                if( vis[i][0] == 0 )
                    dfs( i , 0 );
                if( vis[i][m - 1] == 0 )
                    dfs( i , m - 1 );
            }
            REP( i , 0 , n - 1 )
                REP( j , 0 , m -1 )
                    if( vis[i][j] == 0 )
                        ch = false;
            if( !ch )
                break;
        }
        if( ch )
            printf("YES\n");
        else
            printf("NO\n");
    }
    return 0;
}

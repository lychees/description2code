#include<stdio.h>
#include<iostream>
#include<vector>
#include<cmath>
#include<algorithm>
#include<memory.h>
#include<map>
#include<set>
#include<queue>
#include<deque>
#include<list>
#include<sstream>
#include<cstring>
#include<unordered_map>

#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())
#define eps 1e-9
#define sqr(x) ((x)*(x))
#define SET(a,b) memset((a),(b),sizeof((a)))
#define pw(x) (1ll<<(x))
#define buli(x) __builtin_popcountll(x)
#define endl "\n"

const int MOD = 1e9+7;
const int N = 1e5+3;

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef map<int,int> mii;
typedef map<string,int> msi;
typedef pair<int,int> pii;
typedef vector<pii> vpii;

inline bool EQ(double a,double b) { return fabs(a - b) < 1e-9; }
inline void set_bit(int & n, int b) { n |= pw(b); }
inline void unset_bit(int & n, int b) { n &= ~pw(b); }

const int MAXN = 60;
char ch[MAXN];
int ar[MAXN];
ll dp[2][MAXN];
int main() {
	// freopen("TASK.in","r",stdin);	
	// freopen("TASK.out","w",stdout);
	int t;
	cin>>t;
	while(t--) {
		int n;
		scanf("%d",&n);
		for(int i=1;i<=n;i++) {
			scanf(" %c",&ch[i]);
			if(ch[i]=='N')
				ar[i]=-1;
			else
				scanf("%d",&ar[i]);
		}
		dp[0][0]=1;
		dp[1][0]=1;
		for(int i=1;i<=n;i++) {
			dp[0][i]=dp[0][i-1];
			dp[1][i]=dp[1][i-1];
			if(ar[i]==-1) {
				dp[0][i]=min(dp[0][i-1]*(-1),dp[1][i-1]*(-1));
				dp[1][i]=max(dp[0][i-1]*(-1),dp[1][i-1]*(-1));
			}
			else {
				if(ch[i]=='+') {
					dp[0][i]=min(dp[0][i-1]+(ar[i]),dp[1][i-1]+(ar[i]));
					dp[1][i]=max(dp[0][i-1]+(ar[i]),dp[1][i-1]+(ar[i]));
				}
				if(ch[i]=='-') {
					dp[0][i]=min(dp[0][i-1]-(ar[i]),dp[1][i-1]-(ar[i]));
					dp[1][i]=max(dp[0][i-1]-(ar[i]),dp[1][i-1]-(ar[i]));
				}
				if(ch[i]=='*') {
					dp[0][i]=min(dp[0][i-1]*(ar[i]),dp[1][i-1]*(ar[i]));
					dp[1][i]=max(dp[0][i-1]*(ar[i]),dp[1][i-1]*(ar[i]));
				}
				if(ch[i]=='/') {
					dp[0][i]=min(dp[0][i-1]/(ar[i]),dp[1][i-1]/(ar[i]));
					dp[1][i]=max(dp[0][i-1]/(ar[i]),dp[1][i-1]/(ar[i]));
				}
			}
			dp[0][i]=min(dp[0][i-1],dp[0][i]);
			dp[0][i]=min(dp[1][i-1],dp[0][i]);
			dp[1][i]=max(dp[0][i-1],dp[1][i]);
			dp[1][i]=max(dp[1][i-1],dp[1][i]);
		}
		cout<<max(dp[0][n],dp[1][n])<<endl;
	}
	return 0;
}
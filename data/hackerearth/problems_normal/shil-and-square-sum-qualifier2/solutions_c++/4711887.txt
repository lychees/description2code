/*   ARSHEYA RAJ   */

#include <iostream>
#include <bits/c++io.h>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <deque>
#include <string.h>
#include <algorithm>
#include <iomanip>
#include <exception>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <iterator>
#include <climits>
 
#define ll long long int
#define MAX(a,b) (a>b)?a:b
#define MIN(a,b) (a>b)?b:a
#define FOR(i,n) for(int i=1;i<=n;i++)
#define FOR_X(i,x,n) for(i=x;i<n;i++)
#define BACK(i,n) for(i=n;i>0;i--)
#define BACK_X(i,n,x) for(i=n;i>=x;i--)
#define fill(a,v) memset(a,v,sizeof(a))
#define pb push_back
#define pp pair<int,int>
#define bs 1000000007
#define MAX_N 1000011

template< class T > T sq(T &x) { return x * x; }
template< class T > T abs(T &n) { return (n < 0 ? -n : n); }
template< class T > T gcd(T a, T b) { return (b != 0 ? gcd<T>(b, a%b) : a); }
template< class T > T lcm(T a, T b) { return (a / gcd<T>(a, b) * b); }
template< class T > bool inside(T &a, T &b, T &c) { return a<=b && b<=c; }
template< class T > void setmax(T &a, T b) { if(a < b) a = b; }
template< class T > void setmin(T &a, T b) { if(b < a) a = b; }

const double EPS = 1e-9;
const int INF = 0x3f3f3f3f;
const int N = 1200050;

using namespace std;

int n, k;
long long ar[N];
long long pref[N];
long long s;
long long deriv;
int main(){
    //cin.tie(0);
    cin >> n >> k;
    for (int i = 1; i <= n; i++)
    {
        cin >> ar[i];
    }
    for (int i = 1; i <= n; i++)
    {
        pref[i] = pref[i - 1] + ar[i];
        pref[i] %= bs;
    }
    for (int i = 1; i <= k; i++)
    {
        s += 1ll * i*i%bs*ar[i] % bs;
    }
    s %= bs;
    cout << s;
    for (int i = 2; i <= k; i++)
    {
        deriv += (2 * i - 1)*ar[i] % bs;
    }
    for (int i = 2; i <= n - k + 1; i++)
    {
        s = s - ar[i - 1] + bs;
        s %= bs;
        s -= deriv;
        while (s < 0)
            s += bs;
        
        deriv = deriv - 3 * ar[i] + bs;
        deriv %= bs;
        deriv -= 2 * (pref[i + k - 1] - pref[i]) % bs;
        while (deriv < 0)
            deriv += bs;
        s += ar[i + k - 1] * k%bs*k%bs;
        s %= bs;
        deriv += (2 * k + 1) * 1ll * ar[i + k - 1] % bs;
        deriv %= bs;
        cout << " " << s;
    }
    cout << endl;
    return 0;
}
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cassert>
#include <limits>
#include <stack>
#include <unordered_map>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define gcd __gcd
#define inrep int t;cin>>t; while(t--)

#define SIO  ios_base::sync_with_stdio ( false )
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
ll MOD=1000000007;
ll modPow ( ll n,ll e ) {
    ll b=e;
    n%=MOD;
    ll res=1;
    while ( b ) {
        if(b%2)
        res=res*n%MOD;
        b/=2;
        n=n*n%MOD;
    }
    return res;
}

vll getDivisors ( ll n ) {
    int b=sqrt ( n ) +1;
    assert((ll)b*b>=n);
    vll res;
    res.push_back ( n );
    reu ( i,2,b ) {
        if ( n%i==0 ) {
            res.push_back ( i );
            if ( n/i!=i ) res.push_back ( n/i );
        }


    }
//     cout<<res;
    return res;
}

map<ll,ll> dp;

int findPoss ( ll n ) {
    assert(n>0);
    if ( n<=2 ) return 1;
     n-=1;
    if ( dp.count ( n ) ) return dp[n];
   
    vll divs=getDivisors ( n );
    ll sum=0;
    for ( ll j: divs ) {
        int p1=findPoss(n/j);
        sum=(sum+modPow ( p1,j )) %MOD;
    }
    sum%=MOD;
    dp[n]=sum;
    return sum;
    
}
int main() {
    SIO;
   ll  n;
   cin>>n;
   ll res=findPoss(n);
    cout<<res<<endl;

}

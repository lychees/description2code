#include<iostream>
#include<cstdio>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<cassert>
#define PB push_back
#define MP make_pair
#define sz(v) (in((v).size()))
#define forn(i,n) for(in i=0;i<(n);++i)
#define forv(i,v) forn(i,sz(v))
#define fors(i,s) for(auto i=(s).begin();i!=(s).end();++i)
#define all(v) (v).begin(),(v).end()
using namespace std;
typedef long long in;
typedef vector<in> VI;
typedef vector<VI> VVI;
const in mx=in(1e5)+9;
const in mdl=1000000007LL;
struct nd{
  in mxel,ct;
  nd(in a=0){
    mxel=a;
    ct=1;
  }
  nd operator+(const nd& cp)const{
    nd r;
    r.mxel=max(mxel,cp.mxel);
    r.ct=ct+cp.ct;
    if(mxel<cp.mxel)
      r.ct-=ct;
    if(mxel>cp.mxel)
      r.ct-=cp.ct;
    if(r.ct<0)
      r.ct+=mdl;
    if(r.ct>=mdl)
      r.ct-=mdl;
    return r;
  }
};
struct fenw{
  vector<nd> fw;
  in n;
  void ini(in pn){
    n=pn;
    fw.clear();
    fw.resize(n,-1);
    ad(0,0);
  }
  void ad(in l, nd x){
    while(l<n){
      fw[l]=fw[l]+x;
      l|=(l+1);
    }
  }
  nd sm(in l){
    nd r=-1;
    while(l>=0){
      r=r+fw[l];
      l&=(l+1);
      --l;
    }
    return r;
  }
};
fenw ttr[2];
void prc(in id, in tp){
  nd tt=ttr[!id].sm(tp-1);
  ++tt.mxel;
  ttr[id].ad(tp,tt);
}
int main(){
  ios::sync_with_stdio(0);
  cin.tie(0);
  in n;
  cin>>n;
  forn(z,2)
    ttr[z].ini(mx);
  in tp;
  forn(z,n){
    cin>>tp;
    if(tp<0)
      prc(0,-tp);
    else
      prc(1,tp);
  }
  nd rr(-1);
  forn(z,2)
    rr=rr+ttr[z].sm(mx-1);
  cout<<rr.mxel<<" "<<rr.ct<<endl;
  return 0;
}

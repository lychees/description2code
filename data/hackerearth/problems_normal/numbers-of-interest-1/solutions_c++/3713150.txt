#include <iostream>
#include <cmath>
using namespace std;

namespace domain{
	
	bool T_range(int T){
		if(T>=1 && T<=pow(10,6))
			return true;
	}
	
	bool X_range(int X){
		if(X>0 && X<50)
			return true;
	}
	
	bool Y_range(int Y){
		if(Y>=0 && Y<3)
			return true;
	}
	
	bool N_range(int N){
		if(N>0 && N<=50)
			return true;
	}
}

unsigned long int findNthNumber(int x, int y, int n){
	
	unsigned long int *Elements = new unsigned long int[n];//Make an array of size n
	
	if(n <= x)
		return y;
		
	int slide_index=0;//Start index
	
	for(int i=0; i<x; i++)//Insert first n elements at starting x indicies
		Elements[i] = y;

	
	int index = x;
	unsigned long int last_x_sum = x*y;
	
		Elements[index++] = last_x_sum;
	
	while(index <= n-1 ){
		
		last_x_sum += (last_x_sum - Elements[slide_index]);
	
		//cout<<"sum["<<index+1<<"]"<<last_x_sum<<endl;
		Elements[index] = last_x_sum;
		
		slide_index++;
		index++;
	}
	
	return Elements[n-1];
}

int main()
{
    int t;
    cin>>t;
    
    if(domain::T_range(t)== false){
    	cout<<"T is not in range"<<endl;
    	exit(1);
    }
    
    while(t){
    
    	int x;
    	cin>>x;
    
    	if(domain::X_range(x)== false){
    		cout<<"X is not in range"<<endl;
    		exit(1);
    	}
    
    	int y;
    	cin>>y;
    
    	if(domain::Y_range(y)== false){
    		cout<<"Y is not in range"<<endl;
    		exit(1);
    	}
    
    	int n;
    	cin>>n;
    
    	if(domain::N_range(n)== false){
    		cout<<"N is not in range"<<endl;
    		exit(1);
    	}
    	
    	cout<<findNthNumber(x,y,n)<<endl;
    	
    	t--;
    }   
    return 0;
}

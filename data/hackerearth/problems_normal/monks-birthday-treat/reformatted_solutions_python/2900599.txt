import operator

S = raw_input()
N = int(S.split()[0])
D = int(S.split()[1])
R = []
for i in range(N):
    # Lt = list();
    Lt = []
    R.append(Lt)

visited = [False]*(N+1)
invite = 1

for k in range(D):
    S1 = raw_input()
    I1 = int(S1.split()[0])
    J1 = int(S1.split()[1])
    R[I1 - 1].append(J1)


def dfs(fr):
    visited[fr] = True
    tempLt = R[fr-1]
    invite = 1
    for k in range(len(tempLt)):
        if operator.eq(visited[tempLt[k]], False):
            invite = dfs(tempLt[k]) + 1

    return invite


def dfsMin(fr):
    visited[fr] = True
    tempLt = R[fr-1]
    tempI2 = D
    for k in range(len(tempLt)):
        invite1 = 0
        if operator.eq(visited[Lt.index(k)], False):
            invite1 = dfsMin(Lt.index(k)) + 1

        for i in range(1, N+1):
            visited[i] = False

        tempI2 = min(invite1, tempI2)

    return tempI2


result = N

for i in range(1, N+1):
    invite = dfs(i)
    # if operator.gt(invite, 0):
    #    result = min(result, invite);
    result = min(result, invite)
    for i in range(1, N+1):
        visited[i] = False

    # if operator.eq(visited[i], False):
    # result = dfsMin(i);
        # if operator.lt(result, invite):
        # result = invite;

print result

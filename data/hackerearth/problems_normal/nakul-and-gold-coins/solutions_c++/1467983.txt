#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

typedef long long llint;

const int N = 1000005;

int erat[ N ];
vector< int > prime;
int l, r;

void tosten( ) {
	for( int i = 2; i * i < N; i++ ) {
		if( !erat[ i ] ) {
			for( int j = i*i; j < N; j += i ) erat[ j ] = true;
		}
	}
	for( int i = 2; i <= N - 5; i++ ) if( !erat[ i ] ) prime.push_back( i );
}

void load( ) {
	scanf( "%d%d", &l, &r );
	int sol = 0;
	for( int i = 0; i < prime.size( ); i++ ) {
		int x = prime[ i ];
		//printf( "x == %d\n", x );
		int low = i + 1, high = ( int ) prime.size( ) - 1, middle;
		while( low <= high ) {
			middle = ( low + high ) / 2;
			if( ( llint )x * prime[ middle ] >= l ) high = middle - 1;
			else low = middle + 1;
		}
		int ans1 = low;
		low = 0, high = prime.size( ) - 1;
		while( low <= high ) {
			middle = ( low + high ) / 2;
			if( ( llint ) x * prime[ middle ] > r ) high = middle - 1;
			else low = middle + 1;
		}
		int ans2 = low;
		if( prime[ low ] * ( llint ) x > r ) ans2--;
		//printf( "ans1 == %d, ans2 == %d\n", ans1, ans2 );
		if( ans1 <= ans2 ) {
			sol += ans2 - ans1 + 1;
		}
	}
	printf( "%d\n", sol );
}

			

int main( void ) {
	tosten( );
//	printf( "prime.size( ) == %d\n", prime.size( ) );
	vector< int > V;
	for( int i = 0; i < prime.size( ); i++ ) {
		for( int j = i + 1; j < prime.size( ); j++ ) {
			if( ( llint ) prime[ i ] * prime[ j ] > 100000000 ) break;
			V.push_back( prime[ i ] * prime[ j ] );
		}
	}
//	printf( "V.size( ) == %d\n", V.size( ) );
	sort( V.begin( ), V.end( ) );
	int t;
	scanf( "%d", &t );
	while( t-- ) {
		int a, b;
		scanf( "%d%d", &a, &b );
		printf( "%d\n", upper_bound( V.begin( ), V.end( ), b ) - lower_bound( V.begin( ), V.end( ), a ) );
	}
	return 0;
}
	



	


	
		
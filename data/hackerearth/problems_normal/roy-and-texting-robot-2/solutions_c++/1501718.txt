/*
***************************************************************************************************************

							Author : Yash Sadhwani

**************************************************************************************************************
*/
#include<stdio.h>
#include<iostream>
#include<vector>
#include<string.h>
#include<algorithm>
#include<deque>
#include<map>
#include<set>
#include<stdlib.h>
#include<math.h>
#include<queue>
#include<stack>
#include<functional>
using namespace std;
#define ll long long
#define si(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define sd(x) scanf("%lf",&x)
#define sc(x) scanf("%c",&x)
#define ss(x) scanf("%s",x)
#define vl vector<ll>
#define vi vector<int>
#define vvl vector< vl >
#define vvi vector< vi >
#define pb push_back
#define mod 1000000007
#define mem(x,y) memset(x,y,sizeof(x))
#define f(i,a,b) for(int i=(a);i<(b);i++)
#define max_int_value 2147483647
#define max_long_value 9223372036854775807


//qsort(ww,cc,sizeof(tp),compare);
/*int compare(const void *a,const void *b){
	ll y=((((tp*)a)->w)-(((tp*)b)->w));
	if(y>0)return 1;
	else if(y==0)return 0;
	else return -1;
}
bool way(ii x,ii y){
	return x.first<y.first or x.first==y.first and x.second<y.second;
}
*/


#define MAXN 1010
#define ls (node<<1)
#define rs ((node<<1)+1)
#define ii pair<int,int>

map<char,int> sameteam[1000];
map<char,int> timers; 

char str[MAXN];
int len;

inline void ReadInput(void){
	ss(str);
}

inline void solve(void){
	len=strlen(str);
	char currteam='1';
	ll ans=0;
	for(int i=0;i<len;i++){
		if(sameteam[currteam].find(str[i])!=sameteam[currteam].end()){
			ans+=timers[str[i]];
		}else{
			ans++;
			ans+=timers[str[i]];
			currteam=str[i];
		}
	}
	printf("%lld\n",ans );
}

inline void Refresh(void){
	
}

int main()
{
    timers['a']=1;
    timers['b']=2;
    timers['c']=3;
    timers['2']=4;

    sameteam['a']['a']=1;
    sameteam['a']['b']=1;
    sameteam['a']['c']=1;
    sameteam['a']['2']=1;

    sameteam['b']['a']=1;
    sameteam['b']['b']=1;
    sameteam['b']['c']=1;
    sameteam['b']['2']=1;

    sameteam['c']['a']=1;
    sameteam['c']['b']=1;
    sameteam['c']['c']=1;
    sameteam['c']['2']=1;

    sameteam['2']['a']=1;
    sameteam['2']['b']=1;
    sameteam['2']['c']=1;
    sameteam['2']['2']=1;

    timers['d']=1;
    timers['e']=2;
    timers['f']=3;
    timers['3']=4;

    sameteam['d']['d']=1;
    sameteam['d']['e']=1;
    sameteam['d']['f']=1;
    sameteam['d']['3']=1;

	sameteam['e']['d']=1;
    sameteam['e']['e']=1;
    sameteam['e']['f']=1;
    sameteam['e']['3']=1;

	sameteam['f']['d']=1;
    sameteam['f']['e']=1;
    sameteam['f']['f']=1;
    sameteam['f']['3']=1;

    sameteam['3']['d']=1;
    sameteam['3']['e']=1;
    sameteam['3']['f']=1;
    sameteam['3']['3']=1;


    timers['g']=1;
    timers['h']=2;
    timers['i']=3;
    timers['4']=4;

    sameteam['g']['g']=1;
    sameteam['g']['h']=1;
    sameteam['g']['i']=1;
    sameteam['g']['4']=1;

    sameteam['h']['g']=1;
    sameteam['h']['h']=1;
    sameteam['h']['i']=1;
    sameteam['h']['4']=1;

    sameteam['i']['g']=1;
    sameteam['i']['h']=1;
    sameteam['i']['i']=1;
    sameteam['i']['4']=1;

    sameteam['4']['g']=1;
    sameteam['4']['h']=1;
    sameteam['4']['i']=1;
    sameteam['4']['4']=1;

    
    timers['j']=1;
    timers['k']=2;
    timers['l']=3;
    timers['5']=4;

    sameteam['j']['j']=1;
    sameteam['j']['k']=1;
    sameteam['j']['l']=1;
    sameteam['j']['5']=1;

    sameteam['k']['j']=1;
    sameteam['k']['k']=1;
    sameteam['k']['l']=1;
    sameteam['k']['5']=1;

    sameteam['l']['j']=1;
    sameteam['l']['k']=1;
    sameteam['l']['l']=1;
    sameteam['l']['5']=1;

    sameteam['5']['j']=1;
    sameteam['5']['k']=1;
    sameteam['5']['l']=1;
    sameteam['5']['5']=1;


    
    timers['m']=1;
    timers['n']=2;
    timers['o']=3;
    timers['6']=4;

    sameteam['m']['m']=1;
    sameteam['m']['n']=1;
    sameteam['m']['o']=1;
    sameteam['m']['6']=1;

    sameteam['n']['m']=1;
    sameteam['n']['n']=1;
    sameteam['n']['o']=1;
    sameteam['n']['6']=1;

    sameteam['o']['m']=1;
    sameteam['o']['n']=1;
    sameteam['o']['o']=1;
    sameteam['o']['6']=1;

    sameteam['6']['m']=1;
    sameteam['6']['n']=1;
    sameteam['6']['o']=1;
    sameteam['6']['6']=1;

    
    timers['p']=1;
    timers['q']=2;
    timers['r']=3;
    timers['s']=4;
    timers['7']=5;

    sameteam['p']['p']=1;
    sameteam['p']['q']=1;
    sameteam['p']['r']=1;
    sameteam['p']['s']=1;
    sameteam['p']['7']=1;

    sameteam['q']['p']=1;
    sameteam['q']['q']=1;
    sameteam['q']['r']=1;
    sameteam['q']['s']=1;
    sameteam['q']['7']=1;

    sameteam['r']['p']=1;
    sameteam['r']['q']=1;
    sameteam['r']['r']=1;
    sameteam['r']['s']=1;
    sameteam['r']['7']=1;

    sameteam['s']['p']=1;
    sameteam['s']['q']=1;
    sameteam['s']['r']=1;
    sameteam['s']['s']=1;
    sameteam['s']['7']=1;

    sameteam['7']['p']=1;
    sameteam['7']['q']=1;
    sameteam['7']['r']=1;
    sameteam['7']['s']=1;
    sameteam['7']['7']=1;


    timers['t']=1;
    timers['u']=2;
    timers['v']=3;
    timers['8']=4;

    sameteam['t']['t']=1;
    sameteam['t']['u']=1;
    sameteam['t']['v']=1;
    sameteam['t']['8']=1;

    sameteam['u']['t']=1;
    sameteam['u']['u']=1;
    sameteam['u']['v']=1;
    sameteam['u']['8']=1;

    sameteam['v']['t']=1;
    sameteam['v']['u']=1;
    sameteam['v']['v']=1;
    sameteam['v']['8']=1;

    sameteam['8']['t']=1;
    sameteam['8']['u']=1;
    sameteam['8']['v']=1;
    sameteam['8']['8']=1;

    
    timers['w']=1;
    timers['x']=2;
    timers['y']=3;
    timers['z']=4;
    timers['9']=5;

    sameteam['w']['w']=1;
    sameteam['w']['x']=1;
    sameteam['w']['y']=1;
    sameteam['w']['z']=1;
    sameteam['w']['9']=1;

    sameteam['x']['w']=1;
    sameteam['x']['x']=1;
    sameteam['x']['y']=1;
    sameteam['x']['z']=1;
    sameteam['x']['9']=1;
    
    sameteam['y']['w']=1;
    sameteam['y']['x']=1;
    sameteam['y']['y']=1;
    sameteam['y']['z']=1;
    sameteam['y']['9']=1;
    
    sameteam['z']['w']=1;
    sameteam['z']['x']=1;
    sameteam['z']['y']=1;
    sameteam['z']['z']=1;
    sameteam['z']['9']=1;
    
    sameteam['9']['w']=1;
    sameteam['9']['x']=1;
    sameteam['9']['y']=1;
    sameteam['9']['z']=1;
    sameteam['9']['9']=1;
    

    
    timers['.']=1;
    timers[',']=2;
    timers['?']=3;
    timers['!']=4;
    timers['1']=5;

    sameteam['.']['.']=1;
    sameteam['.'][',']=1;
    sameteam['.']['?']=1;
    sameteam['.']['!']=1;
    sameteam['.']['1']=1;

	sameteam[',']['.']=1;
    sameteam[','][',']=1;
    sameteam[',']['?']=1;
    sameteam[',']['!']=1;
    sameteam[',']['1']=1;
    
    sameteam['?']['.']=1;
    sameteam['?'][',']=1;
    sameteam['?']['?']=1;
    sameteam['?']['!']=1;
    sameteam['?']['1']=1;
    
    sameteam['!']['.']=1;
    sameteam['!'][',']=1;
    sameteam['!']['?']=1;
    sameteam['!']['!']=1;
    sameteam['!']['1']=1;
    
    sameteam['1']['.']=1;
    sameteam['1'][',']=1;
    sameteam['1']['?']=1;
    sameteam['1']['!']=1;
    sameteam['1']['1']=1;
    
    timers['_']=1;
    timers['0']=2;

    sameteam['_']['_']=1;
    sameteam['_']['0']=1;


    sameteam['0']['_']=1;
    sameteam['0']['0']=1;

    int t; si(t);
    while(t--){
    	ReadInput();
    	solve();
    }

    return 0;
}
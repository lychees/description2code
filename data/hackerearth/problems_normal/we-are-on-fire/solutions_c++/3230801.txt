#include <bits/stdc++.h>
#define initial 0
#define visited 2

using namespace std;

int arr[1005][1005];
int po[1005][1005];
int state[1005][1005];
int pox[] = {1, -1, 0, 0}; /// D, U, R, L
int poy[] = {0, 0, 1, -1};
int n, m, ans;

void dfs(int x, int y)
{
    int i, px, py;

    state[x][y] = visited;
    //cout << x << " " << y << " EEE " << endl;
    if (arr[x][y] == 1) {
        arr[x][y] = 0;
        ans++;
        //cout << ans << " P " << endl;
        //arr[x][y] = 0;
    }
    /*if (arr[x][y] == 0) {
        return;
    }*/

    for (i = 0; i < 4; i++) {
        px = x + pox[i];
        py = y + poy[i];

        if (px >= 1 && px <= n && py >= 1 && py <= m && arr[px][py] == 1 && state[px][py] == initial) {
            //cout << x << " " << y << " EEE " << endl;
            dfs(px, py);
        }
    }
}

int main()
{
    int q, i, j, x, y, cnt;

    scanf("%d", &n);
    scanf("%d", &m);
    scanf("%d", &q);

    cnt = 0;
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= m; j++) {
            cin >> arr[i][j];
            if (arr[i][j] == 1)
                cnt++;
        }
    }

    //cout << cnt << " PP " << endl;

   while (q--) {
    scanf("%d", &x);
    scanf("%d", &y);

    if (arr[x][y] == 0) {
        printf("%d\n", cnt);
    }
    else {
        ans = 0;
        dfs(x,y);

        cnt = cnt - ans;

        printf("%d\n", cnt);
    }
   }

   return 0;
}

#include <iostream>
#include<cstdio>
#include <cmath>

#define MID 10000
#define SIZE 20000

typedef int in;



using namespace std;

bool check_if_prime(in n)
{
	//in n,flag=0;
	for(in i =  3; i<= sqrt(n); i+=2)
	{
		if(n % i ==0)
			return false;
		
	}
	return true;
}

void generate_spiral_matrix(in arr_re[SIZE], in arr_irr[SIZE] , in n)
{
	in i, j, counter=0;
	arr_re[MID] = arr_irr[MID] = 1;
	for(i =2, j= 1 ; i*i <= n*n; i+=2, j++)
	{
		arr_re[MID + j] = (i+1) * (i+1);
		arr_re[MID - j] = i * i + 1;
		
		
		arr_irr[MID - j] = arr_re[MID - j] - (2*j);
		
	
		arr_irr[MID + j] = arr_re[MID + j] - (2*j);
	
	}

}

void calculate_result(in arr_re[SIZE], in arr_irr[SIZE] , double result[SIZE*2])
{
	in i, j, counter=0;
	arr_re[MID] = arr_irr[MID] = 1;
	
	in primes_till_now =0;
	in n =3;
	for(i =2, j= 1 ; i*i <= SIZE*SIZE; i+=2, j++, n+=2)
	{
		
		counter=0;
		if(check_if_prime(arr_re[MID - j]))
			counter++;
		
		
		if(check_if_prime(arr_irr[MID - j]))
			counter++;
	
		if(check_if_prime(arr_irr[MID + j]))
			counter++;
		
		primes_till_now += counter;
		
		result[n] = (double) primes_till_now;
		result[n] /= (double) (2*n -1);
		result[n] *= 100.0;
	}
	//return counter;
}


int main()
{
			//    cout << "Hello World!" << endl;
    //cout<<check_if_prime(900);
    in reg_diagonal[SIZE], irr_diagonal[SIZE],  t, n=7;
    double answer[SIZE*2], total, prime_numbers;
    
    generate_spiral_matrix(reg_diagonal, irr_diagonal,  SIZE);
    calculate_result(reg_diagonal, irr_diagonal, answer);
    
    cin>> t;
    while(t--)
	{
		scanf("%d", &n);
 		
 		printf("%f\n", answer[n]);
	}
    /*
    while(t--)
	{
		scanf("%d", &n);
 		prime_numbers = (double) calculate_primes(reg_diagonal, irr_diagonal,  n) ;
 		total = 2*n - 1;
 		answer = prime_numbers / total ;
 		printf("%f\n", answer*100);
	}
	
	
 	for(int i= - n/2; i<= n/2 ; i++)
 	{
 		printf("%d\t%d\n", reg_diagonal[MID + i], irr_diagonal[MID + i]);
 		//cout<<reg_diagonal[i]<<'\t'<<irr_diagonal[i]<<endl;
 	}
    
    */
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define MOD 1000000007
int tree[4 * 200005][26];
bool ar[200005];
string str;
void build_tree(int node, int lft, int rgt)
{
if(lft == rgt)
{
for(int i=0; i<26; ++i)
tree[node][i] = 0;
tree[node][str[lft] - 'a'] = 1;
return;
}
int mid = (lft + rgt) >> 1;
build_tree(2 * node, lft, mid);
build_tree(2 * node + 1, mid + 1, rgt);
for(int i=0; i<26; ++i)
tree[node][i] = tree[2 * node][i] + tree[2 * node + 1][i];
}
void update_tree(int node, int lft, int rgt, int k, int ind)
{
if(lft == rgt)
{
ar[lft] = false;
tree[node][ind] = 0;
return;
}
int mid = (lft + rgt) >> 1;
if(k <= tree[2 * node][ind])
update_tree(2 * node, lft, mid, k, ind);
else
update_tree(2 * node + 1, mid + 1, rgt, k - tree[2 * node][ind], ind);
for(int i=0; i<26; ++i)
tree[node][i] = tree[2 * node][i] + tree[2 * node + 1][i];
}
int main()
{
ios_base::sync_with_stdio(false);
cin>>str;
int len = str.length();
memset(ar, true, sizeof(ar));
build_tree(1, 0, len - 1);
int q;
cin>>q;
while(q--)
{
int k;
char ch;
cin>>k>>ch;
update_tree(1, 0, len - 1, k, ch - 'a');
}
for(int i=0; i<len; ++i)
{
if(ar[i])
cout<<str[i];
}
cout<<endl;
return 0;
}
'''
Created by anirudhmenon on 13/03/16
https://www.hackerearth.com/problem/algorithm/four-square-2/

Uses jacobis method
Wikipedia link: https://en.wikipedia.org/wiki/Jacobi%27s_four-square_theorem
'''

import math


def evenJacobi(number):
    # 24 times sum of odd divisors
    divisor = getAllDivisors(number)
    answer = sum(divisor)

    print answer*24


def oddJacobi(number):
    # 8 times sum of odd divisors
    divisor = getAllDivisors(number)
    answer = sum(divisor)

    print 8*answer


def getAllDivisors(number):
    sqRoot = long(math.sqrt(number))
    divisors = []

    # Iterate through all the divisors and append odd number to the list
    for i in range(1, sqRoot + 1):
        if n % i == 0:
            if (i % 2 != 0):
                divisors.append(i)
            newDivisor = n/i
            if i != newDivisor and newDivisor % 2 != 0:
                divisors.append(n/i)

    return divisors


def jacobiTheorem(number):
    if number % 2 == 0:
        evenJacobi(number)
    else:
        oddJacobi(number)


# Enter number of test cases
t = int(raw_input())

while t > 0:
    # Enter number
    n = int(input())
    jacobiTheorem(n)
    t = t - 1

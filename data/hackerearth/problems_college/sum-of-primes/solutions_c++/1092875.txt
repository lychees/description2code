#include <iostream>
using namespace std;

const int LIM = 2 * 1e6 + 1230;
const int LIM2 = LIM / 10;

bool pr[LIM];
bool partial[LIM];
long long sm[LIM];
int prev_cnt[5];

void init()
{
	for(int i = 2; i < LIM; i++)
		pr[i] = true;
		
    for(int i = 2; i < LIM; i++) {
        if(pr[i]) {
			if(static_cast<long long>(i) * i < LIM)
            	for(int j = i * i; j < LIM; j += i)
                	pr[j] = false;
        }
    }
}

inline bool is_prime(const long long &n)
{
    if(n == 2)
        return true;
    if(n % 2 == 0)
        return false;
    if(n == 0)
        return false;
    for(int i = 3; i * i <= n; i += 2) {
        if(n % i == 0)
            return false;
        if(i > 500)
            return true;
    }
    return true;
}

int main()
{
    int t;
    init();
    sm[2] = 2;
    partial[2] = true;
    for(int i = 3; i < LIM; i++) {
        sm[i] = sm[i - 1] + (pr[i]? i : 0);
    }

    cin.sync_with_stdio(false);
    cin >> t;
    for(int i = 0; i < t; i++) {
        int low, high;
        cin >> low >> high;
        long long num = sm[high] - sm[low - 1];
        bool is_p = false;
        
        if(num < LIM)
        	is_p = pr[num];
        else
        	is_p = is_prime(num);
        cout << (is_p ? "YES" : "NO") << "\n";
    }
    return 0;
}

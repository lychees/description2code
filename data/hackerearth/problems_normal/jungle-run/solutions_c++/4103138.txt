#include <algorithm>
#include <cstdio>
#include <queue>
#include <set>
#include <stack>
#include <vector>


typedef long long ll;

using namespace std;

struct state {
	int x;
	int y;
	int d;
	
	state(int _x, int _y, int _d) {
		x = _x;
		y = _y;
		d = _d;
	}
	state() {}
};

char grid[35][35];
bool visited[35][35];
int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};
int N;

int bfs(state u) {
	queue<state> Q;
	Q.push(u);
	visited[u.x][u.y] = true;
	
	state current;
	int nx, ny;
	while(!Q.empty()) {
		current = Q.front();
		Q.pop();
		
		if(grid[current.x][current.y] == 'E')
			return current.d;
		
		for(int i = 0; i < 4; ++i) {
			nx = current.x + dx[i];
			ny = current.y + dy[i];
			
			if(nx >= 0 && nx < N && ny >= 0 && ny < N && grid[nx][ny] != 'T' && !visited[nx][ny]) {
				Q.push(state(nx, ny, current.d + 1));
				visited[nx][ny] = true;
			}
		}
	}
	return 0;
}

int main() {
	scanf("%d\n", &N);
	
	state ini;
	for(int i = 0; i < N; ++i) {
		for(int j = 0; j < N; ++j) {
			scanf("%c ", &grid[i][j]);
			if(grid[i][j] == 'S') {
				ini.x = i;
				ini.y = j;
				ini.d = 0;
			}
		}
	}
	
	printf("%d\n", bfs(ini));
	
    return 0;
}

#include <iostream>
#include <algorithm>

#define MAX (1+(1<<6)) 
#define inf 0x7fffffff

using namespace std;

int arr[100005];
int tree[4*100005];

void build_tree(int node, int a, int b) {
    if(a > b) return; // Out of range
  	
  	if(a == b) { // Leaf node
    		tree[node] = arr[a]; // Init value
		return;
	}
	
	build_tree(node*2, a, (a+b)/2); // Init left child
	build_tree(node*2+1, 1+(a+b)/2, b); // Init right child
	
	tree[node] = min(tree[node*2], tree[node*2+1]); // Init root value
}

int query_tree(int node, int a, int b, int i, int j) {
	
	if(a > b || a > j || b < i) return 5; // Out of range
 
	if(a >= i && b <= j) // Current segment is totally within range [i, j]
		return tree[node];
 
	int q1 = query_tree(node*2, a, (a+b)/2, i, j); // Query left child
	int q2 = query_tree(1+node*2, 1+(a+b)/2, b, i, j); // Query right child
 
	int res = min(q1, q2); // Return final result
	
	return res;
}

int main() {
	
	int T, N;
	
	scanf("%d",&N);
	scanf("%d",&T);

	
	
	for(int i = 0; i<N; i++){
		scanf("%d",&arr[i]);
	}
	
	build_tree(1, 0, N-1);
	
	while(T--){
		int l, r;
		scanf("%d%d",&l,&r);
		
		cout << query_tree(1, 0,N-1, l,r) << endl; 
		
	}
	
		
	return 0;
}
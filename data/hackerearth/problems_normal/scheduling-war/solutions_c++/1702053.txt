#include<iostream>
#include<string>
#include<cstring>
#include<cmath>

using namespace std;

struct CBatch
{
	int noOfReqSys;
	int *reqSys;
	int noOfProcesses;
}; 

int main()
{
	int totSystems, noOfcBatches;
	int pCount = 0, cCount = 0, ans = 0;

	cin>>totSystems;
	int *pSysStatus = new int[totSystems];

	bool *pSysCounted = new bool[totSystems];

	for(int i = 0; i  < totSystems; ++i)
		cin>>pSysStatus[i];

	cin>>noOfcBatches;
	CBatch *cBatches = new CBatch[noOfcBatches];

	for(int i = 0; i  < noOfcBatches; ++i)
	{
		cin>>cBatches[i].noOfReqSys;
		cBatches[i].reqSys = new int[cBatches[i].noOfReqSys];

		for(int j = 0; j  < cBatches[i].noOfReqSys; ++j)
			cin>>cBatches[i].reqSys[j];

		cin>>cBatches[i].noOfProcesses;
	}

	for(int k = 0; k  < noOfcBatches; ++k)
	{
		cCount = pCount = 0;
		memset(pSysCounted, 0, totSystems);

		for(int i = k; i  < noOfcBatches; ++i)
		{
			for(int j = 0; j  < cBatches[i].noOfReqSys; ++j)
			{
				if(!pSysCounted[cBatches[i].reqSys[j] - 1])
				{
					pSysCounted[cBatches[i].reqSys[j] - 1] = true;
					pCount += pSysStatus[cBatches[i].reqSys[j] - 1];
				}
			}
			cCount += cBatches[i].noOfProcesses;
			if(pCount < cCount)
			{
				if(ans < cCount - pCount)
					ans = cCount - pCount;
			}
		}
	}
	cout<<ans<<endl;
	return 0;
}
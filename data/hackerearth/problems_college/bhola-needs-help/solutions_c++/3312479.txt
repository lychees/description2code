// LUCIFER <3 SLS <3

#include <bits/stdc++.h>

using namespace std;

long long int isP[100005];
vector <long long int> p;

void sieve()
{
    long long int i, j;
    for (i = 2; i <= 100000; i++) {
        if (!isP[i]) {
            p.push_back(i);
            for (j = 2; i*j <= 100000; j++)
                isP[i*j] = 1;
        }
    }
}

void calculate(vector <long long int> &tmp, map <long long int, long long int> &m, long long int ans, long long int i, vector <long long int> &v)
{
    if (i == v.size()) {
        map <long long int, long long int> :: iterator it;
        it = m.find(ans);
        if (it == m.end()) {
            m[ans] = 1;
            tmp.push_back(ans);
        }
        return;
    }
    calculate(tmp, m, ans, i+1, v);
    calculate(tmp, m, ans*v[i], i+1, v);
}

int main()
{
    //freopen("in5.txt", "r", stdin);
    //freopen("out5.txt", "w", stdout);
    //sieve();
    long long int x, y, z, i, n;
    scanf("%lld%lld", &x, &y);
    z = __gcd(x,y);
    n = sqrt(z);
    vector <long long int> tmp;
    for (i = 1; i <= n; ++i) {
        if (z % i == 0) {
            tmp.push_back(i);
            if (i*i != z)
                tmp.push_back(z/i);
        }
    }
    sort(tmp.begin(), tmp.end());
    scanf("%lld", &n);
    while (n--) {
        scanf("%lld%lld", &x, &y);
        z = upper_bound(tmp.begin(), tmp.end(), y) - tmp.begin() - 1;
        if (0 <= z && z < tmp.size() && tmp[z] >= x)
            printf("%lld\n", tmp[z]);
        else
            printf("-1\n");
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

vector < pair <int , int > > v[1001000];

int path[100100];
void bfs(int z, int dist[], int col[], int n)
{
    priority_queue < pair<int,int >,vector<pair<int,int> >,greater <pair<int,int> > >q;
fill(dist, dist+n+2, 1e9);
fill(col, col+n+2, 0);
dist[z]=0;
 //   q.push(z);
//    int u=q.front();
	//col[z]=1;
    //cout<<u;
    q.push({dist[z] , z});                         // insert the source node with distance = 0
    int u;
    //ss.push(z);
    pair < int , int > p;
    while(!q.empty()){
    	p = q.top();
		q.pop();
		u = p.second;
		if(col[u] == 1)
			continue;
		col[u] = 1;
        for(int i = 0; i < v[u].size(); i++){
            int e = v[u][i].second; 
            int w = v[u][i].first;
            if(dist[u] + w < dist[e]){            // check if the next vertex distance could be minimized
                dist[e] = dist[u] + w;
                q.push({dist[e],  e});           // insert the next vertex with the updated distance
                path[e]=u;
            }
        }
    }

}


int main()
{
	int t;
	cin>>t;
	for(int z=0;z<t;z++)
{
stack <int> ss;
    int m,n;
    cin>>n>>m;
    int col[n+2],dist[n+2];
	for(int i=0;i<=n;i++)
	{
		v[i].clear();
		col[i]=0;
		dist[i]=1e9;
		//a[i]=0;
	}

	long long ans=0;
    for(int i=0;i<m;i++)
    {
    	int x,y,z;
    	cin>>x>>y>>z;
    	v[x].push_back(make_pair(z, y));
    	v[y].push_back(make_pair(z, x));

    }
    int a,b,c,p=0;
    cin>>a>>b>>c;
    bfs(b,dist,col,n);
    if(dist[c]==1e9)
    {
    	p=1;
    	//break;
    }
    else
    {
    	ans=dist[c];
    	            int j = path[c] ;
            ss.push( c ) ;
            while( 1 ) {
                ss.push( j ) ;
                if( j == b ) break ;
                j = path[j] ;
            }
            //cout<<ans;
            ss.pop();
    }
    
    bfs(a,dist,col,n);
    //cout<<dist[b-1]<<endl;
	if(dist[b]==1e9||p==1)
    {
    	cout<<"No Train Found."<<endl;
    	//break;
    }
    else
    {
    	int sa;
    	ans+=dist[b];
    	cout<<ans<<endl;
   int j = path[b] ;
            ss.push( b ) ;
            while( 1 ) {
                ss.push( j ) ;
                if( j == a ) break ;
                j = path[j] ;
            }
            while( !ss.empty() ) {
            cout << ss.top() << ' ' ;
            ss.pop() ;
            }
            cout << endl ;
    }


}
    return 0;
}


 #include <bits/stdc++.h>
 #include <fstream>
using namespace std;
 /*
  Mistakes -
   0) Dont rush to conclusion on seeing a question , keep yourself relaxed and go easy on ques .
   1) To see at each step if integer is not causing an error , best way is to use long long always.
   2) To see if my solution can be verified , if yes then do that .
   3) To see if my code can be simplified , if yes make it simple.
   4) If my code is wrong , dont be in a hurry to change to the code, first think for 2 min if any modification can be done to make it
      right.
   5) always typecast (int) arr.size() because   size_t does not support subtraction.
   6) Never use such expression   Int ct = max( ct ,left) ; (declartion should be done before assignment , absurd behaviour)
   7) Using long long for everything may cause Time Limit Exceeded some times , so better be sure
   8) appending at the end of the string takes too much time 339 Div2 - B
   9) n*n*log(n) doesnt wrk for n >1000 on codeforces
   10) read the question carefully and before submitting soln read ques , it will hardly take 1min and save u  time cost of 15-30 min
   11) Keep calm and Code.

 */
#define REP(i, a, b) for (int i = a; i <= b; i++)
#define FOR(i, n) for (int i = 0; i < n; i++)
#define foreach(it, ar) for ( typeof(ar.begin()) it = ar.begin(); it != ar.end(); it++ )
#define fill(ar, val) memset(ar, val, sizeof(ar))
#define PI 3.1415926535897932385
#define uint64 unsigned long long
#define Int long long
#define int64 long long
#define all(ar) ar.begin(), ar.end()
#define pb push_back
#define ff first
#define ss second
#define bit(n) (1<<(n))
#define Last(i) ( (i) & (-i) )
#define sq(x) ((x) * (x))
#define INF INT_MAX
#define mp make_pair
#define MAXN  5000

struct Point { long double x , y , f ; }  ;
int N ;
long double dp[MAXN] ;
bool visit[MAXN] ;
long double dist( int i , int j, vector<Point>&a )
{
   long double tp =  (a[i].x  - a[j].x )*(a[i].x  - a[j].x ) + ( a[i].y - a[j].y)*(a[i].y - a[j].y);
   return sqrt(tp) ;

}
long double rec(   int i , vector<Point>&a )
 {
    if( i >=  N )
      return INT_MIN ;

    if( i == N - 1)
        return a[i].f ;

    if( visit[i] ) return dp[i] ;

    long double sum =  INT_MIN ;
    for( int j = i + 1 ; j  < N ; j  ++  )
      {
         sum =  max(  sum , rec( j , a ) - dist(i,j,a) ) ;

      }

     sum =  sum +  a[i].f ;
     dp[i] = sum ;
     visit[i] =  true;
     return sum ;

 }

int main( )
{


   cin >> N;
   vector<Point>a(N) ;
   FOR(i,N)cin >> a[i].x >> a[i].y >> a[i].f ;
   memset(visit,false,sizeof(visit)) ;
   cout.precision(6);
   cout<<fixed << rec( 0,a )<<endl ;

}

#include <bits/stdc++.h>
using namespace std;

typedef long long LL;



#define rep(i,a) for(int i=0; i<(a); ++i)


#define gi(x) scanf("%d",&x)
#define gl(x) scanf("%I64d",&x)
#define gd(x) scanf("%lf",&x)
#define gs(x) cin >> x
#define pi(x) printf("%d",x)
#define pin(x) printf("%d\n",x)
#define pl(x) printf("%I6d",x)
#define pln(x) printf("%I64d\n",x)
#define ps(s) cout << s;
#define psn(s) cout << s << "\n"
#define pn printf("\n")





struct trie {
trie *a[26];
int weight;
trie() {
rep(i, 26) a[i] = NULL;
weight = 0;
}
};


trie* insert(const string &s, int wt, int idx, trie *root) {
int cur = s[idx] - 'a';
if (!root->a[cur]) root->a[cur] = new trie();
root->a[cur]->weight = max(root->a[cur]->weight, wt);
if (idx + 1 != s.size()) {
root->a[cur] = insert(s, wt, idx + 1, root->a[cur]);
}
return root;
}



int searchBest(const string &s, trie *root) {
int idx = 0, n = s.size(), cur, bestWt = -1;
while (idx < n) {
cur = s[idx] - 'a';
if (!root->a[cur]) return -1;
bestWt = root->a[cur]->weight;
root = root->a[cur];
++idx;
}
return bestWt;
}


int main() {
int n, w, q;
string s, t;
gi(n); gi(q);

trie *root = new trie();
while (n--) {
gs(s); 
gi(w);
root = insert(s, w, 0, root);
}


while (gs(s)) {
pin(searchBest(s, root));
}

return 0;
}

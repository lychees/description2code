#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
using namespace std;
//https://www.hackerearth.com/practice/data-structures/advanced-data-structures/trie-keyword-tree/practice-problems/algorithm/cost-of-data-11/
class TrieNode{
public:
	int words;//current Node belongs to how many words?
	int val;//tells us the whether the current node is an end of some word or not
	TrieNode* children[26];//26 lowercase letters
	TrieNode(){
		val = 0;
		for(int i = 0; i < 26; i++){
			words = 0;
			children[i] = NULL;
		}
	}
};
class Trie{
private:
	TrieNode* root;
	int numberOfNodes;
	int count;//to keep a track of how many words have been inserted into the Trie so far
public:
	Trie(){
		root = new TrieNode();
		count = 0;
		numberOfNodes = 1;//initially, it includes only root
	}
	void Insert(string word){
		TrieNode* current = root;
		for(int i = 0; i < word.size(); i++){
			char c = word[i];
			int index = c - 'a';
			if(current->children[index] == NULL){
				current->children[index] = new TrieNode();
				numberOfNodes++;
				current->words++;
				current = current->children[index];
			}
			else{
				current->words++;
				current = current->children[index];
			}
		}
		count++;
		current->words++;
		current->val = count;
	}
	int getNumberOfNodes(){
		return numberOfNodes;
	}
};
int main(){
	Trie T;
	int n;
	cin>>n;
	string input;
	while(n--){
		cin>>input;
		T.Insert(input);
	}
	cout<<T.getNumberOfNodes()<<endl;
	return 0;
}

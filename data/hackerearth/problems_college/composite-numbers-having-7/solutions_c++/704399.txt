#include <iostream>
#include <cmath>
#include <vector>
#define ll long long 
 
using namespace std;
 
/* 
 * Sieve of Atkins
 */
void sieve_atkins(ll int n,bool is_prime[])
{
    
    is_prime[2] = true;
    is_prime[3] = true;
    for (ll int i = 5; i <= n; i++)
    {
        is_prime[i] = false;
    }
    ll int lim = ceil(sqrt(n));
    for (ll int x = 1; x <= lim; x++)
    {
        for (ll int y = 1; y <= lim; y++)
        {
            ll int num = (4 * x * x + y * y);
            if (num <= n && (num % 12 == 1 || num % 12 == 5))
            {
                is_prime[num] = true;
            }
            num = (3 * x * x + y * y);
            if (num <= n && (num % 12 == 7))
            {
                is_prime[num] = true;
            }
 
            if (x > y)
            {
                num = (3 * x * x - y * y);
                if (num <= n && (num % 12 == 11))
                {
                    is_prime[num] = true;
                }
            }
        }
    }
    for (ll int i = 5; i <= lim; i++)
    {
        if (is_prime[i])
        {
            for (ll int j = i * i; j <= n; j += i)
            {
                is_prime[j] = false;
            }
        }
    }
    int counter=0;
/*
    for (ll int i = 2; i <= n; i++)
    {
         if (is_prime[i])
         {
             cout<<i<<"\n";
             counter+=1;
             if(counter==n1)
              break;
           
         }
    }*/
}
 
/* 
 * Main
 */
int main()
{
    ll int T, n,m=1000000;
    bool is_prime[1000001];
    
    cin>>T;
    sieve_atkins(m,is_prime);
     int a,b;  
     for(int i=0;i<T;i++)
     {
       cin>>a>>b;
       int sum=0,found=0;
       for(int j=a;j<=b;j++)
        {
            if(is_prime[j]==false)
             {
               int k=j;
                while(k!=0)
                 {
                   int r=k%10;
                   if(r==7)
                     {
                     sum+=1;
                     found=1;
                     break;
                      }
                    k=k/10;
                 }
             
           }
             
         }
        if(found)
       cout<<sum<<"\n"; 
         else
          cout<<"-1\n";
    }   
    
    return 0;
}
#include<iostream>
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
using namespace std;
typedef struct trie_node trie_node_t;
typedef struct trie trie_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
    int m;
};
struct trie
{
    int count;
    trie_node_t *root;
};
trie_node_t *getNode(void){
    trie_node_t *pNode=NULL;
    pNode=(trie_node_t*)malloc(sizeof(trie_node_t));
    if(pNode){
        pNode->value=0;
        pNode->m=0;
        for(int i=0;i<ALPHABET_SIZE;i++){
            pNode->children[i]=NULL;
        }
    }
    return pNode;
}
void initialize(trie_t *pTrie){
    pTrie->root=getNode();
    pTrie->count = 0;
}
void insert(trie_t *pTrie, char key[],int w)
{
    int level,index,length=strlen(key);
    trie_node_t *temp;
    pTrie->count++;
    temp=pTrie->root;
    for(level=0;level<length;level++){
     index = CHAR_TO_INDEX(key[level]);
     if(!temp->children[index]){
         temp->children[index]=getNode();
     }
     temp=temp->children[index];
     temp->m=max(w,temp->m);
    }
    temp->value=pTrie->count;
}
int search(trie_t *pTrie,char key[])
{ 
   int level,index,length=strlen(key);
    trie_node_t *temp;
    temp=pTrie->root;
    for(level=0;level<length;level++){
        index = CHAR_TO_INDEX(key[level]);
        if(!temp->children[index])
        {
            return -1;
        }
        temp=temp->children[index];
       // cout<<temp->m<<endl;
    }
    return temp->m;
}
int main()
{
    trie_t trie;
    initialize(&trie);
     int n,q,w;char s[1000004];
     cin>>n>>q;
     while(n--){
         cin>>s>>w;
        insert(&trie,s,w);
     }
     while(q--){
         cin>>s;
         cout<<search(&trie,s)<<endl;
     }
    return 0;
}

#include <bits/stdc++.h>
// iostream is too mainstream
#include <cstdio>
// bitch please
#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <iomanip>
#include <time.h>
#define dibs reserve
#define OVER9000 1234567890
#define ALL_THE(CAKE,LIE) for(auto LIE =CAKE.begin(); LIE != CAKE.end(); LIE++)
#define tisic 47
#define soclose 1e-8
#define chocolate win
// so much chocolate
#define patkan 9
#define ff first
#define ss second
#define abs(x) ((x < 0)?-(x):x)
#define uint unsigned int
#define dbl long double
#define pi 3.14159265358979323846
using namespace std;
// mylittledoge

#ifdef DONLINE_JUDGE
	// palindromic tree is better than splay tree!
	#define lld I64d
#endif

vector< pair< pair<int,int>,int> > B;

int solve(int z, int k, vector<bool> &cov) {
	// [2z+1..2k]
	if(z == k) return 0;
	if(z == k-1) {
		if(!cov[2*z+1] || !cov[2*z+2]) {
			cov[2*z+1] =true;
			cov[2*z+2] =true;
			return 1;}
		return 0;}
	int mh =-1, mp =z+1;
	for(int i =z+1; i < k; i++) if(B[i].ss > mh) {
		mh =B[i].ss;
		mp =i;}
	int ret =0;
	if(!cov[2*z+2]) {
		ret++;
		cov[2*z+1] =cov[2*z+2] =true;
		double sl =1e6;
		for(int i =z+1; i < k; i++) {
			sl =min(sl,1.0*(B[z].ss-B[i].ss)/(B[i].ff.ss-B[z].ff.ss));
			if(B[z].ss-sl*(B[i+1].ff.ff-B[z].ff.ss) < soclose) cov[2*i+2] =true;
			}
		}
	if(!cov[2*k-1]) {
		ret++;
		cov[2*k] =cov[2*k-1] =true;
		double sl =1e6;
		for(int i =k-1; i > z; i--) {
			sl =min(sl,1.0*(B[k].ss-B[i].ss)/(B[k].ff.ff-B[i].ff.ff));
			if(B[k].ss-sl*(B[k].ff.ff-B[i-1].ff.ss) < soclose) cov[2*i-1] =true;
			}
		}
	ret +=solve(z,mp,cov);
	ret +=solve(mp,k,cov);
	return ret;}

int main() {
	cin.sync_with_stdio(0);
	cin.tie(0);
	cout << fixed << setprecision(10);
	int T;
	cin >> T;
	for(int t =0; t < T; t++) {
		int N;
		cin >> N;
		B.resize(N);
		for(int i =0; i < N; i++) cin >> B[i].ff.ff >> B[i].ff.ss >> B[i].ss;
		sort(begin(B),end(B));
		vector<bool> cov(2*N,false);
		cout << solve(0,N-1,cov)+2 << "\n";}
	return 0;}

// look at my code
// my code is amazing

#include <bits/stdc++.h>
using namespace std;
int n,m,q,a,b;
vector<int> gr[100009];
set<pair<int,int> > st;

void dfs(int disc[],int low[],int visited[],int parent[],int AP[],int v,int n,int tme,int child)
{
    int i;
	visited[v] = 1;
	disc[v] = low[v] = tme+1;
	child = 0;
	for(int j=0;j<gr[v].size();j++)
	{
	    i = gr[v][j];
		if(visited[i]==0)
		{
			child+=1;
			parent[i] = v;
			dfs(disc,low,visited,parent,AP,i,n,tme+1,child);
			low[v] = min(low[v],low[i]);
			if(low[i]>disc[v])
				st.insert(make_pair(v,i));
		}
		else if(parent[v]!=i)
			low[v] = min(low[v],disc[i]);
	}
}

int main()
{
    //freopen("file1.txt","r",stdin);
    
    cin>>n>>m;
    pair<int,int> arr[n+9];
    int disc[n+9],parent[n+9],low[n+9],visited[n+9],AP[n+9],child;
    for(int i=1;i<=n;i++)
    {
    	visited[i] = 0;
    	parent[i] = -1;
    	AP[i] = 0;
    }
    for(int i=1;i<=m;i++)
    {
    	cin>>a>>b;
    	arr[i] = make_pair(a,b);
    	gr[a].push_back(b);
    	gr[b].push_back(a);
    }
    for(int i=1;i<=n;i++)
    {
        if(!visited[i])
        dfs(disc,low,visited,parent,AP,i,n,0,child);
    }

    cin>>q;
    for(int i=1;i<=q;i++)
    {
    	cin>>a;
    	b = arr[a].second;
    	a = arr[a].first;
		if(st.find(make_pair(a,b))!=st.end() || st.find(make_pair(b,a))!=st.end())
		{
			cout<<"Unhappy";
		}
		else cout<<"Happy";
		cout<<endl;
    }
    
}

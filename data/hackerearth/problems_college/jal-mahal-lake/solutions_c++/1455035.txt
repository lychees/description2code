#include <iostream>
using namespace std;

long long *planks;
long long *length;

long long energy;
long long diff;
int T;
int N;
int main()
{
	cin>>T;
	while(T--){
		energy=0;
		cin>>N;
		planks = new long long[N];
		length = new long long[N];
		
		for(int i=0;i<N;i++){
			cin>>planks[i];
		}
		for(int i=0;i<N;i++){
			cin>>length[i];
			length[i] = length[i] + planks[i]; // storing plank position plus length
		}
		
		// Sort the planks according to its position
		
		for(int i=0;i<N;i++){
			for(int j=0;j<N-1;j++){
				if(planks[j]>planks[j+1]){
					long long tempP,tempL;
					tempP = planks[j];
					planks[j] = planks[j+1];
					planks[j+1] = tempP;
					
					tempL = length[j];
					length[j] = length[j+1];
					length[j+1] = tempL;
				}
			}
		}
		
		// making first halve of plank adjacent to each other
		
		int i;
		for(i=0;i<N/2;i++){
			diff = planks[i+1] - length[i]; // will return 0 if they are adjacent else we need 
											// to consume energy and move plank to right
											
			if(diff>0){
				
				for(int j=0;j<=i;j++){
					planks[j] = planks[j] + diff;
					length[j] = length[j] + diff;
					energy = energy + diff;		
					
				}
			}
		}
		
		for(i;i<N-1;i++){
			diff = planks[i+1] - length[i]; // will return 0 if they are adjacent else we need 
											// to consume energy and move plank to left
											
			if(diff>0){
					planks[i+1] = planks[i+1] - diff;
					length[i+1] = length[i+1] - diff;
					energy = energy + diff;		
					
				}
			}
			
			cout<<energy<<endl;
		}
		
		
    
    return 0;
}

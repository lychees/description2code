#include <bits/stdc++.h>
using namespace std;

#define DEBUG(x)    cerr << #x << " = " << x << endl
#define INPUT       freopen("Data.inp", "r", stdin)
#define OUTPUT      freopen("Data.out", "w", stdout)

typedef long long LL;
typedef pair<int, int> II;
typedef vector<int> VI;

string Next() {
    string S; cin >> S;
    return S;
}
int NextInt() {
    int n; scanf("%d", &n);
    return n;
}
LL NextLong() {
    LL n;
    #ifdef _WIN32
        scanf("%I64d", &n);
    #else
        scanf("%lld", &n);
    #endif
    return n;
}

const int N = (int) 1e7;
bool fre[N];

int Spell1(int A, int n, int h) {
    int a[10];
    for (int i = n; i >= 1; --i) {
        a[i] = A % 10;
        A /= 10;
    }
    int B = 0;
    for (int i = n - h + 1; i <= n; ++i) B = B * 10 + a[i];
    for (int i = 1; i <= n - h; ++i) B = B * 10 + a[i];
    return B;
}

int Spell2(int A, int n, int h) {
    int a[10];
    for (int i = n; i >= 1; --i) {
        a[i] = (A % 10 + (i % 2 == 0 ? h : 0)) % 10;
        A /= 10;
    }
    int B = 0;
    for (int i = 1; i <= n; ++i) B = B * 10 + a[i];
    return B;
}

int StrToInt(string S) {
    stringstream is; is << S;
    int n; is >> n;
    return n;
}

int main() {
    #ifdef LOCAL
        INPUT;
        OUTPUT;
    #endif

    int TC = NextInt();
    while (TC--) {
        string S = Next();
        int a = NextInt(), h = NextInt();
        int n = (int) S.size();

        queue<int> Q; Q.push(StrToInt(S));
        memset(fre, true, sizeof fre); fre[StrToInt(S)] = false;
        while (Q.size()) {
            int u = Q.front(); Q.pop();
            int x = Spell1(u, n, h % n);
            if (fre[x]) {
                fre[x] = false;
                Q.push(x);
            }
            int y = Spell2(u, n, a);
            if (fre[y]) {
                fre[y] = false;
                Q.push(y);
            }
        }

        for (int x = 0; x < N; ++x) if (fre[x] == false) {
            cout << setw(n) << setfill('0') << x << endl;
            break;
        }
    }
    return 0;
}

#include <iostream>
#include <string>
#include <set>
using namespace std;

set<string> strPieces;
set<string>::iterator it;

bool breakStr(string str, int startIndex, int piecesLeft) {
	int strLength = str.length();
	int j;
	
	//cout << "startIndex: " << startIndex << ", left: " << piecesLeft << endl; 
	if (piecesLeft == 1) {
		string substring = str.substr(startIndex, strLength-startIndex);
		if (strPieces.find(substring) != strPieces.end()) {
			//cout << substring << " already exists" << endl;
			return false;
		}
		//cout << "new string : " << substring;
		strPieces.insert(substring);
		return true;
	}
	
	for (j=1; j<=strLength-startIndex-(piecesLeft-1); j++) {
		string substring = str.substr(startIndex, j);
		if (strPieces.find(substring) != strPieces.end()) {
			//cout << substring << " already exists" << endl;
			continue;
		}
		strPieces.insert(substring);
		//cout << "new string : " << substring << endl;
		if (breakStr(str, startIndex+j, piecesLeft-1)) {
			return true;
		}
		//cout << "erasing : " << substring << endl;
		strPieces.erase(substring);
	}
	return false;
}

int main() {
	int i, cases;
	string str; 
	cin >> cases;
	int numPieces = 4;
	
	for (i=0; i<cases; i++) {
		cin >> str;
		//cout << str << ":" << endl;
		if (breakStr(str, 0, numPieces)) {
			cout << "YES" << endl;
			/*cout << "Pieces are:" << endl;
			for (it=strPieces.begin(); it!=strPieces.end(); it++) {
				cout << *it << endl;
			}*/
		}
		else {
			cout << "NO" << endl;
			//cout << "Cannot make " << numPieces << " pieces" << endl;
		}
		for (it=strPieces.begin(); it!=strPieces.end(); it++) {
			strPieces.erase(*it);
		}
	}
	return 0;
}
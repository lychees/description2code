#include<cstdio>
#include<iostream>
#include<queue>
#define INF 100000000
using namespace std;
long long int am[510][510];
bool visited[510];
long long int key[510];
int n;
void dijkstra(int source)
{
	priority_queue < pair<long long int,int>, vector<pair<long long int,int> >, greater <pair<long long int,int> >  > Q;
	//print_key();
	for(int i=0;i<=500;i++)
	Q.push(make_pair(key[i],i));
	while(!Q.empty())
	{
		pair<long long int,int> top = Q.top();
		//cout<<" "<<top.second;
		//print_key();
		Q.pop();
		if(!visited[top.second])
		{
			visited[top.second] = 1;
			for(int i=0;i<=500;i++)
			{
				if(!visited[i])
				{
					if(am[top.second][i] != 0 && key[i] > top.first + am[top.second][i])
					{
						key[i] = top.first + am[top.second][i];
						Q.push(make_pair(key[i],i));
					}
				}
			}
		}
	}
}
int main()
{
	//freopen("abc.txt","r",stdin);
	scanf("%d",&n);
	for(int i=0;i<=500;i++)
	key[i] = INF;
	for(int i=1;i<=n;i++)
	{
		int a,b,w;
		scanf("%d%d%lld",&a,&b,&w);
		am[a][b] = w;
		am[b][a] = w;	
	}
	/*
	for(int i=0;i<=n;i++)
	{
		for(int j=0;j<=n;j++)
		cout<<am[i][j]<<"\t";
		cout<<"\n";
	}
	*/
	int source;
	scanf("%d",&source);
	key[source] = 0;
	dijkstra(source);
	int Q;
	scanf("%d",&Q);
	while(Q--)
	{
		int dest;
		scanf("%d",&dest);
		if(key[dest] == INF)
		printf("NO PATH\n");
		else
		printf("%lld\n",key[dest]);
	}
}
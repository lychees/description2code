#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define ll long long

const int mod=1000000007;
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
bool* isPrime;
vector<int> primes;
void generatePrimeSieve(const int lim)
{
  isPrime=(bool *)malloc(lim+1);
  memset(isPrime,true,lim+1);
  isPrime[0]=false;
  isPrime[1]=false;
  for(int i=2;i<=lim;++i)
    if(isPrime[i])
      {
        primes.push_back(i);
        for(int j=i+i;j<=lim;j+=i)
        isPrime[j]=false;
      }
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}
int getDiv(int x)
{

  int mask=0;
  for(int i=0;i<primes.size();++i)
  {
    int p=primes[i];
    if(x%p==0)
      mask|=(1<<i);
  }
  return mask;
}

int ISGOOD[24][60][60];

int GOODAHEAD[24][60][60];
int BADAHEAD[24][60][60];

int goodCount=0;
int badCount=0;

int main()
{
  // std::ios::sync_with_stdio(false);
  generatePrimeSieve(60);  
  
  for(int h=23;h>=0;--h)
  {
    for (int m = 59; m>=0; --m)
    {
      for (int s = 59; s >=0; --s)
      {
        
        int o1=getDiv(h);
        int o2=getDiv(m);
        int o3=getDiv(s);


        // int mask= o1 & o2 & o3;

        if(o1 & o2 & o3)
        {
          ++badCount;
          // cout<<h<<" "<<m<<" "<<s<<endl;
        }
        else
          {
            ++goodCount;
          }
        GOODAHEAD[h][m][s]=goodCount;
        BADAHEAD[h][m][s]=badCount;

        // if(h==23 && m==46 && s==23)
          // cout<<BADAHEAD[23][46][23]<<endl;
      }
    }
  }


  // cout<<BADAHEAD[23][46][23]<<endl;
  int t;
  scanf("%d",&t);
  while(t--)
  {
    int h,m,s;
    scanf("%d%d%d",&h,&m,&s);

    int bad=BADAHEAD[h][m][s];
    int good=GOODAHEAD[h][m][s];

    // cout<<bad<<" "<<good<<endl;
    // cout<<GOODAHEAD[h][m][s];
    int x=gcd(bad,good);
    if(bad==0 || good==0)
      x=1;
    bad/=x;
    good/=x;
    printf("%d:%d\n",bad,good);

  }



  
}
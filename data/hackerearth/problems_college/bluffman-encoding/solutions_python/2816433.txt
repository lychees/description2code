from operator import itemgetter
import copy
class Node():                                   
    def __init__(self):
        self.key = 0
        self.left = None
        self.right = None

def decrypt(dk,strng):
	i = 0
	temp = ""
	strcpy = ""
	for ch in strng:
		temp += ch
		for k in dk.keys():
			if temp == dk[k]:
				strcpy += k
				temp = ""
	print strcpy
				
	
			

def bluffman(xxx):
	global encr
	n = len(xxx)
	i = 1
	while(len(xxx)>1):
		xx = sorted(xxx, key = itemgetter(1))
		z = Node()
		
		z.left = xx.pop(len(xx)-1)
		
		
		z.right = xx.pop(len(xx)-1)
		
		z.key = z.left[1]+z.right[1]
		xx.append([z.left[0]+z.right[0],z.key])
		encr.append(z.left[0])
		encr.append(1)
		encr.append(z.right[0])
		encr.append(0)
		xxx = copy.copy(xx)
		
	#print xxx
	#print encr
	return encr
		
	

for t in xrange(input()):
	n = input()
	inp = []
	encr = []
	data = []
	i = 1
	while(i <= n):
		x = raw_input().split()
		inp.append([x[0],int(x[1])])
		i += 1
	encrypt = raw_input()
	sorted_inp = sorted(inp, key = itemgetter(1))
	#print sorted_inp
	data = bluffman(sorted_inp)
	#print data 
	i = 0
	dk = {}
	while(i<len(data)):
		j = i+2
		temp = str(data[i+1])
		while(j<len(data)):
			if data[i] in data[j]:
				data[j].replace(data[i],'')
				temp += str(data[j+1])
			j += 2
		if len(data[i]) == 1:
			dk[data[i]] = temp[::-1]
		i += 2
	#print dk
	
	decrypt(dk,encrypt)
				
	
				
	
		
#include<bits/stdc++.h>
#include<algorithm>
#include<vector>
#include<queue>
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={0,1,0,-1};int dy[]={1,0,-1,0}; //4 direction
#define REP(i,n) for(int i=0;i<n;i++)
#define REPU(i,a,b) for(int i=a;i<b;i++)
#define sll(n) scanf("%lld",&n)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d",n)
#define sl(n) scanf("%ld",&n)
#define pin(n) printf("%d\n",n)
#define MP make_pair
#define PB push_back
#define all(a) a.begin(),a.end()
#define F first
#define S second
#define SET(a,b) memset(a,b,sizeof (a))
typedef long long LL;
#define PII pair<int,int>
using namespace std;
int limit=20;
struct trie
{
    struct trie * child[2];
    vector<int> ind;
    trie()
    {
        child[0]=child[1]=NULL;
    }
};
string get(LL x)
{
    string s="";
    while(x)
    {
        s+=(char)((x%2)+48);
        x>>=1;
    }
    while(s.size()<=limit)
    {
        s+='0';
    }
    reverse(all(s));
    return s;
}
void ins(struct trie * root,string s,int pos)
{
    struct trie * temp =root;
    for(int i=0;i<s.size();i++)
    {
        int x=s[i]-48;
        if(!temp->child[x])
        {
            temp->child[x]=new trie();
        }
        temp->child[x]->ind.PB(pos);
        temp=temp->child[x];
    }
}
LL query(struct trie* root,string s,int l,int r)
{
    LL ans=0;
    struct trie * temp = root;
    for(int i=0;i<s.size();i++)
    {
        int x=s[i]-48;
        x=!x;
        if(temp->child[x])
        {
            int pos=lower_bound(all(temp->child[x]->ind),l)-(temp->child[x]->ind.begin());
            if(pos==temp->child[x]->ind.size() || temp->child[x]->ind[pos]>r)
            {
                x=!x;
            }
            else
            {
                int l=s.size()-i-1;
                ans+=(1<<l);
            }
            temp=temp->child[x];
        }
        else
        {
            x=!x;
            temp=temp->child[x];
        }
    }
    return ans;
}
int main()
{
/*#ifndef ONLINDE_JUDGE
    freopen("in.txt","r",stdin);
#endif // ONLINDE_JUDGE*/

    int n; si(n);
    int q; si(q);
    struct trie * root= new trie();
    REP(i,n)
    {
        LL x; sll(x);
        string s=get(x);
        ins(root,s,i+1);
    }
    while(q--)
    {
        int l,r;
        si(l);
        si(r);
        LL x; sll(x);
        string s=get(x);
        LL ans=query(root,s,l,r);
        cout<< ans <<endl;
    }
	return 0;
}

#include <bits/stdc++.h>
using namespace std;
vector < pair< int, int > > adj[10004];
void dijkstra(int n,int distance[]){
	priority_queue< pair<int, int>, vector < pair<int, int> > , greater< pair<int, int> > > pq;
    pq.push(make_pair(0,1));
    distance[1] = 0;
    while (!pq.empty()){
        int u = pq.top().second;
        pq.pop();
        vector< pair<int, int> >::iterator i;
        for (i = adj[u].begin(); i != adj[u].end(); ++i){
            int v = (*i).first;
            int weight = (*i).second;
            if (distance[v] > distance[u] + weight){
                distance[v] = distance[u] + weight;
                pq.push(make_pair(distance[v], v));
            }
        }
    }
}
int main(){
    int t,n,m,i,j,c,q,a,k;
    scanf("%d",&t);
    while(t--){
    	scanf("%d %d",&n,&m);
    	int distance[10004];
		for(i=0;i<10004;i++){
			adj[i].clear();
			distance[i]=INT_MAX;
		}
    	while(m--){
    		scanf("%d %d %d",&i,&j,&c);
    		adj[i].push_back(make_pair(j,c));
    		adj[j].push_back(make_pair(i,c));
    	}
    	dijkstra(n,distance);
    	scanf("%d",&q);
    	while(q--){
    		scanf("%d %d",&a,&k);
    		if((2*distance[a])<k){
    			printf("%d\n",(k-(2*distance[a])));
    		}
    		else{
    			printf("0\n");
    		}
    	}
    }
    return 0;
}

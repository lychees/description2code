from collections import defaultdict
def Adj(n):
    adj_list = defaultdict(list)
    for i in xrange(len(n)):
        for j in xrange(len(n)):
            #print i,j
            for k in [[i+1,j],[i-1,j],[i,j+1],[i,j-1]]:
                if N > k[0] >= 0 and N > k[1] >= 0:
                    if  n[k[0]][k[1]] != 'T':
                        adj_list[i,j].append(k)
    return adj_list
N = int(raw_input())
def find_shortest_path(n,graph, start, end, path=[]):
        path = path + [start]
        if n[start[0]][start[1]] == end:
            return path
        if start in graph.keys():
            return None
        shortest = None
        for node in graph[start[0],start[1]]:
            if node not in path:
                newpath = find_shortest_path(n,graph, node, end, path)
                if newpath:
                    if not shortest or len(newpath) < len(shortest):
                        shortest = newpath
        return shortest







n = [[i for i in raw_input().strip().split()] for j  in xrange(N)]

s =[0,0]
adj = Adj(n)

x = find_shortest_path(n,adj,s,'E')
print len(x)-1

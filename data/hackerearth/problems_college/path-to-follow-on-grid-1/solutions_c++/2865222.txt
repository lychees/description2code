#include<bits/stdc++.h>

#define ll long long
#define mp make_pair
#define pi pair<int,int>
#define pli pair<ll,ll>
#define pb push_back

const double EPS = 1e-24;
const ll MOD = 1000000007ll;
const double PI = 3.14159265359;
int INF = 2147483645;

template <class T>T Max2(T a,T b){return a<b?b:a;}
template <class T>T Min2(T a,T b){return a<b?a:b;}
template <class T>T Max3(T a,T b,T c){return Max2(Max2(a,b),c);}
template <class T>T Min3(T a,T b,T c){return Min2(Min2(a,b),c);}
template <class T>T Max4(T a,T b,T c,T d){return Max2(Max2(a,b),Max2(c,d));}
template <class T>T Min4(T a,T b,T c,T d){return Min2(Min2(a,b),Max2(c,d));}

using namespace std;

long long ncr[305][305];
long long numbitstring[305][105][105];
long long numways[105][305];

int main() {
    int i, j, k, t, n, m, x[105], d[105];    
  
    for (i = 0; i <= 302; i++) {
        for (j = 0; j <= i; j++) {
            if (!j) ncr[i][j] = 1;
            else ncr[i][j] = (ncr[i-1][j] + ncr[i-1][j-1]) % MOD;
        }
    }

    for (i = 0; i <= 300; i++) 
    {
        for (j = 1; j <= 100; j++) 
        {
            for (k = 1; k <= j; k++) 
            {
                if (!i) numbitstring[i][j][k] = 1;
                else 
                numbitstring[i][j][k] = (numbitstring[i-1][j][k-1] + numbitstring[i-1][j][k+1]) % MOD;
            }
        }
    }

    scanf("%d", &t);
    while(t--) 
    {
        scanf("%d %d", &n, &m);
        for (i = 1; i <= n; i++) 
        {
            scanf("%d", &x[i]);
        }
        for (i = 1; i <= n; i++)
        {
            scanf("%d", &d[i]);
        }
        
        memset(numways, 0, sizeof(numways));
        
        numways[0][0] = 1;
        for (i = 1; i <= n; i++)
        {
            for (j = 0; j <= m; j++)
            {
                for (k = 0; k <= j; k++) 
                {
                    numways[i][j] = (numways[i][j] + (( ( numways[i-1][j-k] * numbitstring[k][d[i]][x[i]] ) % MOD) * ncr[j][k])) % MOD;
                }
            }
        }
        printf("%lld\n", numways[n][m]);
    }
    return 0;
}

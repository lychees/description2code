#include <iostream>
using namespace std;
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <cmath>
#include <set>
#include <ctime>
#include <stack>
#include <list>
#include <cassert>
#include <iomanip>
#include <deque>
#include <sstream>
#include <fstream>
typedef pair<int,int> pii;
#define rep(i,j,n) for(i=j;i<n;i++)
#define pb push_back
#define ff first
#define ss second 
#define lli long long int
#define get getchar

inline int scan() {
    int n=0,s=1;
    char p=get();
    if(p=='-')  s=-1;
    while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=get();
    if(p=='-') s=-1,p=get();
    while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=get(); }
    return n*s;
}
struct edge {
	int x,y;
	lli c;	
};
bool cmp(edge a, edge b) {
	if (a.c != b.c)
		return a.c < b.c;
	if (a.x != b.x)
		return a.x > b.x;
	return (a.y > b.y);
}
vector <edge> gg;
vector <int> par;

int findparent(int a) {
	if (a == par[a])
		return a;
	return par[a] = findparent(par[a]);
}

int main() {
        
    ios::sync_with_stdio(false);
    
    //clock_t start = std::clock();
    //freopen ("inp.txt","r",stdin);
    //freopen ("out.txt","w",stdout);
    //cout << "Time: " << (std::clock() - start) / (double)(CLOCKS_PER_SEC / 1000) << " ms" << std::endl;

    
    int t;
    cin >> t;
    
    while(t--) {
    	int n,m; 
    	cin >> n >> m; 
    	par.clear();
    	par.resize(n+1);
    	gg.resize(m);
    	vector <int> ans(n+1,0);
    	lli val = 0;
    	for (int i = 0; i <= n; i++) par[i] = i;
    	for (int i = 0; i < m; i++) {
    		cin >> gg[i].x >> gg[i].y >> gg[i].c;
    		if (gg[i].x > gg[i].y)
    			swap(gg[i].x,gg[i].y);
    	}
    	
    	sort(gg.begin(),gg.end(),cmp);
    	for (int i = 0; i < m; i++) {
    		edge tt = gg[i];
    		int a = findparent(tt.x);
    		int b = findparent(tt.y);
    		if (a == b) continue;
    		par[b] = a;
    		ans[tt.x]++;
    		ans[tt.y]++;
			val += tt.c;
    	}
    	cout << val << '\n';
    	for (int i = 1; i <= n; i++)
    		cout << ans[i] << " \n"[i == n];
    }
    
    return 0;
        
}
#include <iostream>
#include<vector>
#include<iterator>
#include<queue>
#include<algorithm>
#define mod 1000000007
using namespace std;
vector<int> q;
vector<int> vp[1001];
bool visited[1001];
int risk[1001];
void dfs(int s)
{
	visited[s]=true;
	q.push_back(risk[s]);
	for(int i=0;i<vp[s].size();i++)
	{
		if(visited[vp[s][i]]==false)
		dfs(vp[s][i]);
	}
	
}
inline void initialize(int n)
{
	for(int i=1;i<=n;i++)
	visited[i]=false;
}
int main()
{
    std::ios_base::sync_with_stdio(false);
    int n,k,x,y,count=0,max=1;
    cin>>n;
    for(int i=1;i<=n;i++)
    cin>>risk[i];
    cin>>k;
    for(int i=0;i<k;i++)
    {
    	cin>>x>>y;
    	vp[x].push_back(y);
    	vp[y].push_back(x);
    }
     initialize(n);
    
     for(int i=1;i<=n;i++)
     {
     	if(visited[i]==false)
     	{
     		dfs(i);
     		sort(q.begin(),q.end());
     		for(int i=0;i<q.size();i++)
     		{
     			if(q[0]==q[i])
     			count++;
     			else
     			break;
     		}
     		q.clear();
     	//	if(count<max)
     	//	max=count;
  			max=max*count;
  			max=max%mod;
     	}
     	count=0;
     }
     cout<<max<<endl;
}

//Pranet Verma
#include <bits/stdc++.h>
using namespace std;
const int N=2000;
int ds1[N],ds2[N],dt1[N],dt2[N];
int g1[N][N],g2[N][N];
int q[N],inQ[N];
void djik(int s,int g[N][N],int dist[],int n)
{
    for(int i=1;i<=n;++i)
        dist[i]=1e9,
        inQ[i]=0;
    dist[s]=0;
    int st=0,en=0;
    q[en++]=s;
    inQ[s]=1;
    while(st<en)
    {
        int u=q[st++];
        for(int v=1;v<=n;++v)
        {
            if(dist[v]>dist[u]+g[u][v])
            {
                dist[v]=dist[u]+g[u][v];
                if(!inQ[v])
                    inQ[v]=1,
                    q[en++]=v;
            }    
        }
        inQ[u]=false;
    }
    for(int i=1;i<=n;++i)
        assert(dist[i]!=1e9);
}
int main()
{
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;++i)
        for(int j=1;j<=n;++j)
            scanf("%d",&g1[i][j]);
    for(int i=1;i<=n;++i)
        for(int j=1;j<=n;++j)
            scanf("%d",&g2[i][j]);
    int s,t;
    scanf("%d%d",&s,&t);
    djik(s,g1,ds1,n);
    djik(s,g2,ds2,n);
    for(int i=1;i<=n;++i)
        for(int j=i+1;j<=n;++j)
            swap(g1[i][j],g1[j][i]),
            swap(g2[i][j],g2[j][i]);
    djik(t,g1,dt1,n);
    djik(t,g2,dt2,n);
    int ret=1e9;
    for(int i=1;i<=n;++i)
        {
            if(i==s || i==t)
                continue;
            ret=min(ret,ds1[i]+dt2[i]);
            ret=min(ret,ds2[i]+dt1[i]);
        }
    assert(ret!=1e9);
    printf("%d\n",ret);
}
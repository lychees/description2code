#include <bits/stdc++.h>
#define ll long long int
#define mp make_pair
#define pb push_back
#define X first
#define Y second

using namespace std;

int main()
{
	ll test,n;
	cin >> test;

	while (test--) {
		cin >> n;
		vector<pair<ll,ll> > g[n+1];
		
		for (int i = 0; i < n-1; i++) {
			ll x,y,w;
			cin >> x >> y >> w;
			g[x].pb(mp(y,w));
			g[y].pb(mp(x,w));
		}
		bool vis[100000+1] = {false};
		ll dist[100000+1] = {0};

		queue<ll> q;

		q.push(1);
		dist[1] = 0;
		ll mx = 0;
		ll src;
		while (!q.empty()) {
			ll tmp = q.front();
			q.pop();
			vis[tmp] = true;

			for (int i = 0; i < (int)g[tmp].size(); i++) {
				pair<ll,ll> t = g[tmp][i];
				if (!vis[t.X]) {
					dist[t.X] = dist[tmp] + t.Y;
					if (dist[t.X] > mx) {
						mx = dist[t.X];
						src = t.X;
					}
					q.push(t.X);
				}
			}
		}
		memset(dist,0,sizeof(dist));
		memset(vis,false,sizeof(vis));
		dist[src] = 0;	
		q.push(src);
		while (!q.empty()) {
			ll tmp = q.front();
			q.pop();
			vis[tmp] = true;

			for (int i = 0; i < (int)g[tmp].size(); i++) {
				pair<ll,ll> t = g[tmp][i];
				if (!vis[t.X]) {
					dist[t.X] = dist[tmp] + t.Y;
					if (dist[t.X] > mx) {
						mx = dist[t.X];
						src = t.X;
					}
					q.push(t.X);
				}
			}
		}
		int cost;
		if (mx <= 100) {
			cost = 0;
		} else if (mx > 100 && mx <= 1000) {
			cost = 100;
		} else if (mx > 1000 && mx < 10000) {
			cost = 1000;
		} else {
			cost = 10000;
		}
		cout << cost << " " << mx << endl;

	}

	return 0;
}


#include <iostream>
#include <vector>
#include <stack>
using namespace std;
 
long long maxProfit(vector<int> &input) {
    if (input.size() < 1) return -1;
    stack<int> chk;
    int curr = input.back();
    chk.push(input.size() - 1);
    for (int i = input.size() - 2; i >= 0;) {
        while (i >= 0 && input[i] < curr) --i;
        if (i >= 0) {
            chk.push(i);
            curr = input[i];
            --i;
        }
    }
    long long tmp = 0, ret = 0, ctr = 0;
    for (int i = 0; i < input.size(); ++i) {
        if (i < chk.top()) {
            tmp += input[i];
            ++ctr;
        } else {
            ret += input[i] * ctr - tmp;
            tmp = 0;
            ctr = 0;
            chk.pop();
        }
    }
    return ret;
}
int main() {
    int T;
    cin >> T;
    for (int i = 0; i < T; ++i) {
        int N;
        cin >> N;
        vector<int> input(N, 0);
        for (int j = 0; j < N; ++j)
            cin >> input[j];
        cout << maxProfit(input) << endl;
    }
}
    #include "bits/stdc++.h"
     
    using namespace std;
     
    #define TEST(T) int T; sci(T); while(T--)
    #define ll long long
    #define F first
    #define S second
    #define mp make_pair
    #define pb push_back
    #define ins insert
    #define pii pair<int,int>
    #define all(V) V.begin(),V.end()
    #define clr(V,val) memset(V,val,sizeof(V))
    #define rep(X,A,N,C) for(X=A;X<=N;X+=C)
    #define rept(X,A,N,C) for(X=A;X>=N;X-=C)
    #define sci(X) scanf("%d",&X)
    #define scl(X) scanf("%lld",&X)
    #define scs(X) scanf("%s",&X)
    #define pfi(X) printf("%d",X)
    #define pfl(X) printf("%lld",X)
    #define pfs(X) printf("%s",X)
    #define sp printf(" ")
    #define nxt printf("\n")
     
    const int MX=1e6 + 5;
     
    const int INF=1e9;
     
    const int M=1000000007;
     
     
                /*************************/
    /********** I GOTTA DO WHAT I GOTTA DO ********/
               /*************************/
     
     
    int l[MX],d[MX],vi[MX],p[MX],t=0;
     
    vector<int> v[MX];
     
    vector<int> br;
     
    set<pii> s;
     
    int arr[MX],brr[MX];
     
    void bridge(int x)
    {
    	vi[x] = 1;
     
    	t++;
     
    	l[x] = d[x] = t;
     
    	int y,t;
     
    	for(y=0;y<v[x].size();y++)
    	{
    		t=v[x][y];
     
    		if(!vi[t])
    		{
     
    			p[t] = x;
     
    			bridge(t);
     
    			l[x] = min(l[x],l[t]);
     
    			if(l[t] > d[x]){
     
    				s.ins(mp(t,x));
     
    				s.ins(mp(x,t));
     
    			}
    		}
     
    		else if(t != p[x]) l[x] = min(l[x],d[t]);
    	}
     
    }
     
     
    int main()
    {
     
    	clr(l,0);
     
    	clr(d,0);
     
    	clr(vi,0);
     
    	clr(p,-1);
     
    	br.clear();
     
    	int n,m,k=0;
     
    	sci(n);
     
    	sci(m);
     
    	while(m--)
    	{
    		int a,b;
     
    		sci(a);
     
    		sci(b);
     
    		v[a].pb(b);
     
    		v[b].pb(a);
     
    		arr[k] = a;
     
    		brr[k] = b;
     
    		k++;
     
    	}
     
    	int x;
     
    	for(x=1;x<=n;x++) if(!vi[x]) bridge(x);
     
    	int q;
     
    	sci(q);
     
    	while(q--)
    	{
    		int query;
     
    		sci(query);
     
    		query--;
     
    		if(s.find(mp(arr[query],brr[query]) ) != s.end()) printf("Unhappy");
     
    		else printf("Happy");
     
    		nxt;
     
    	}
     
     
    }

def minCostRec(i, j):
    # Here i is the current row, j is the lastColumn selected
    if i == N:
        return 0
    if dp[i][j] != -1:
        return dp[i][j]
    minAns = 10**9
    for col in xrange(3):
        if j != col:
            minAns = min(minAns, minCostRec(i + 1, col) + L[i][j])

    dp[i][j] = minAns
    return dp[i][j]


def minCostIter():
    dp = [[0] * (3) for i in xrange(N)]
    for i in xrange(3):
        dp[N - 1][i] = L[N - 1][i]

    for row in xrange(N - 2, -1, -1):
        for col in xrange(3):
            minVal = 10**9
            for othercol in xrange(3):
                if othercol != col:
                    minVal = min(minVal, dp[row + 1][othercol])
            dp[row][col] = L[row][col] + minVal
    return min(dp[0])

if __name__ == '__main__':
    for _ in xrange(input()):
        N = input()
        dp = [[-1] * (4) for i in xrange(N + 1)]
        L = []
        for m in xrange(N):
            L.append(map(int, raw_input().split()))

        # ans = min(minCostRec(0, 0), minCostRec(0, 1), minCostRec(0, 2))
        print minCostIter()

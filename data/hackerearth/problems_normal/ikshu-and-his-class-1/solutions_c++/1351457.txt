#include <iostream>
#include <vector>
#include <string>
using namespace std;

class graph
{
	vector <int> *adj;
	int v;
    int *visited;

	public :
	graph(long long int v)
	{
		adj = new vector<int>[v];
		visited=new int[v];
        for(long long int i=0;i<v;i++)
        	visited[i] = 0;
	}

	void add(int a,int b)
	{
		adj[a].push_back(b);
		adj[b].push_back(a);
	}

	int DFS(int a)
	{
		visited[a] = 1;
		int ans = 1;
		for(int i=0;i!=adj[a].size();i++)
        {
        	if(!visited[adj[a][i]])
            {
            	ans += DFS(adj[a][i]);
            }
        }
        return ans;
	}

	long long int fact(long long int a)
	{
		long long int ans=1;
		while(a)
		{
            ans = (ans*a)%1000000007;
            a--;
		}
		return ans;
	}
};
int main()
{
	long long int res,n,k,ans=1;
	cin >> n >> k;
	graph G(n);
	for(int i=0;i<k;i++)
	{
		int a,b;
		cin >> a >> b;
		G.add(a,b);
	}

	for(int i=0;i<n;i++)
	{
		res = G.DFS(i);
		ans=(ans*G.fact(res))%1000000007;
	}

	cout << ans << endl;
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

bool visited[31][31];
char jungle[31][31];

void nMovesUtil(pair<int,int> start, pair<int,int> end, int& path_index, int& minMoves){
	visited[start.first][start.second]=true;
	path_index++;
	
	if(start.first==end.first && start.second==end.second){
        if(minMoves>path_index) minMoves=path_index-1;
	}
	else{
		int dir_x[4]={1,-1,0,0}, dir_y[4]={0,0,-1,1};
		for(int i=0; i<4; i++){
			int next_x = start.first+dir_x[i], next_y = start.second+dir_y[i];
			if(visited[next_x][next_y]==false && (jungle[next_x][next_y]=='P'|| jungle[next_x][next_y]=='E')) 
				nMovesUtil(make_pair(next_x,next_y), end, path_index, minMoves);
		}
	}
	path_index--;
	visited[start.first][start.second]=false;
}

void nMoves(pair<int,int> start, pair<int,int> end, int& minMoves){
	memset(visited, false, sizeof(visited));
	int path_index=0;
	nMovesUtil(start, end, path_index, minMoves);
}

int main(){
    int n, minMoves=INT_MAX;
    cin>>n;
    memset(jungle,'T', sizeof(jungle));
    pair<int,int>* coord;
    coord = new pair<int,int>[2];
    for(int i=0; i<n; i++){
    	for(int j=0; j<n; j++){
    		cin>>jungle[i][j];
    		if(jungle[i][j]=='S') coord[0] = make_pair(i,j);
    		if(jungle[i][j]=='E') coord[1] = make_pair(i,j);
    	}
    }
    nMoves(coord[0], coord[1], minMoves);
    cout<<minMoves<<endl;
    return 0;
}

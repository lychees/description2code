#include<bits/stdc++.h>
#define LL long long int
using namespace std;
int getMid(int s, int e) {  return s + (e -s)/2;  }
int st[2197152];
int getSumUtil(int *st, int ss, int se, int qs, int qe, int index)
{
    if (qs <= ss && qe >= se)
        return st[index];
    if (se < qs || ss > qe)
        return 0;
    int mid = getMid(ss, se);
    return getSumUtil(st, ss, mid, qs, qe, 2*index+1) +
           getSumUtil(st, mid+1, se, qs, qe, 2*index+2);
}

void updateValueUtil(int *st, int ss, int se, int i, int diff, int index)
{
    if (i < ss || i > se)
        return;
    st[index] = st[index] + diff;
    if (se != ss)
    {
        int mid = getMid(ss, se);
        updateValueUtil(st, ss, mid, i, diff, 2*index + 1);
        updateValueUtil(st, mid+1, se, i, diff, 2*index + 2);
    }
}
void updateValue(int *st, int n, int i, int diff)
{
    if (i < 0 || i > n-1)return;
    updateValueUtil(st, 0, n-1, i, diff, 0);
}
int getSum(int *st, int n, int qs, int qe)
{
    if (qs < 0 || qe > n-1 || qs > qe)return 0;
    return getSumUtil(st, 0, n-1, qs, qe, 0);
}
int main()
{
     int i,j,N,x;
     scanf("%d",&N);
     int A[N+10],B[N+10];
     for(int i=1;i<=N;i++)
        scanf("%d",&A[i]);
     for(int i=1;i<=N;i++)
        scanf("%d",&B[i]);
     LL ans=0;
     for(int i=N;i>=1;i--)
     {
            x= getSum(st, 100000, 1, A[i]-1);ans+=x;
            updateValue(st,100000,B[i],1);
     }
     x= sqrt(ans);
     bool flag=false;
     for(i=2;i<=x;i++)
     {
         if(ans%i==0)
         {
             flag=true;break;
         }
     }
     if(flag)
        cout<<"SIMPLE INVERSION\n";
     else cout<<"MAGIC INVERSION\n";
    return 0;
}

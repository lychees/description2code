#include<cstdio>
#include<algorithm>
#include<vector>
#include<iostream>
#include<map>
#include<string.h>
#define N 1000
using namespace std;

int tc,valid[1002],n,vnos,sum,p,p1,p2,mvalue;
bool dp[2][N*N+2];
void isSubsetSum(int sum)
{
	for(int i=0;i<=sum;i++) dp[0][i]=false;
	dp[0][0]=true;
	for (int j = 1; j <= vnos; j++)
	{
		p1=j%2;p2=(j-1)%2;
		for( int i=0;i<=sum;i++)
		{
			dp[p1][i] = dp[p2][i];
			if(i-valid[j-1]>=0) dp[p1][i] = dp[p1][i] || dp[p2][i-valid[j-1]];
		}
		for(int i=0;i<=sum;i++) dp[p2][i] = dp[p1][i];
	}
}
int main()
{
	scanf("%d",&tc);
	while(tc--)
	{
		sum=0;
		map<int,int> M;
		mvalue=0;
		scanf("%d%d",&n,&vnos);
		for(int i=0;i<vnos;i++)
		{
			scanf("%d",&valid[i]);
			sum=sum+valid[i];
		}
		for(int i=0;i<n;i++)
		{
			scanf("%d",&p);
			M[p]=M[p]+1;
			if(M[p]>mvalue) mvalue=M[p];
		}
		isSubsetSum(mvalue);
		int ret=0;
		for(map<int,int>::iterator it = M.begin();it!=M.end();it++)
		{
			if(dp[0][it->second]==true) ret++;
		}
		printf("%d\n",ret);
	}
	return 0;
}

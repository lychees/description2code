#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <vector> 
#include <list>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <fstream>
#include <ctime>
#include <cassert>
#include <stack>
#include <bitset>
using namespace std;

typedef long long int ll;
typedef pair<int, int > pii;

#define MOD 1000000007
#define pb push_back
#define MAX 10005
#define INF 99999999

vector<ll> d(MAX);
vector<ll> f(MAX);


void pre() {
	d[0] = 1;
	d[1] = 0;
	d[2] = 1;
	f[0] = 1;
	f[1] = 1;
	f[2] = 2;
	for(int i=3;i<=100;i++) {
		d[i] = ((i-1) * ((d[i-1] + d[i-2]) % MOD)) % MOD;
		f[i] = (i*f[i-1]) % MOD;
//		cout<<d[i]<<" "<<f[i]<<"\n";
	}
}

ll power(ll a, ll b) {
	ll res = 1;
	while(b) {
		if(b & 1)  {
			res = (res * a) % MOD;
		}
		a = (a*a) % MOD;
		b >>= 1;
	}
	return res%MOD;
	
}

ll gcd(ll a, ll b) {
	if(b == 0)
		return a;
	return gcd(b, a%b);
}

void solve()
{
	int n, l, r;
	cin>>n>>l>>r;
	ll total = 0;
	for(int i=l;i<=r;i++) {
		ll val = d[i];
//		cout<<"d[i]: "<<d[i]<<"\n";
		ll invr = power(f[i], MOD-2);
		ll invnr = power(f[n-i], MOD-2);
		ll f1 = (f[n] * ((invr * invnr) % MOD)) % MOD;
		val = (val * f1) % MOD;
		total = (total + val) % MOD;
//		cout<<"tot:"<<total<<" invr: "<<invr<<" invnr: "<<invnr<<" f1 "<<f1<<"\n";
	}
	ll space = f[n];
	ll g = gcd(total, space);
//	cout<<space<<" "<<total<<"\n";
	total /= g;
	space /= g;
	
	ll res = (total * power(space, MOD-2)) % MOD;
	cout<<res<<"\n";
}

int main()
{
	std::ios::sync_with_stdio(false);
	// freopen ("C:\\Users\\Ritesh\\Desktop\\Coding\\Codeforces\\input.txt","r",stdin);
	int t;
//	cin>>t;
	t = 1;
	pre();
	while(t--)
	{
		solve();
	}
	return 0;
}
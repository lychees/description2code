#define _USE_MATH_DEFINES
#include <algorithm>
#include <cstdio>
#include <functional>
#include <iostream>
#include <cfloat>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <time.h>
#include <vector>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> i_i;
typedef pair<ll, int> ll_i;
typedef pair<double, int> d_i;
typedef pair<ll, ll> ll_ll;
typedef pair<double, double> d_d;
struct edge { int u, v; ll w; };

ll MOD = 1000000007;
ll _MOD = 1000000009;
double EPS = 1e-10;

int main() {
	vector<bool> p(1100000, true);
	p[0] = p[1] = false;
	for (int i = 2; i < 1100000; i++)
		if (p[i])
			for (int j = i * 2; j < 1100000; j += i)
				p[j] = false;
	vector<int> ps;
	for (int i = 0; i < 1100000; i++)
		if (p[i])
			ps.push_back(i);
	int N; cin >> N;
	vector<int> A(N);
	for (int i = 0; i < N; i++)
		cin >> A[i];
	vector<vector<int> > cost(N, vector<int>(N));
	for (int i = 0; i < N; i++)
		for (int j = i + 1; j < N; j++) {
			int x = lower_bound(ps.begin(), ps.end(), A[i]) - ps.begin();
			int y = lower_bound(ps.begin(), ps.end(), A[j]) - ps.begin();
			int z = max(x, y - 1);
			x = z; y = z + 1;
			cost[i][j] = ps[x] - A[i] + ps[y] - A[j];
			// cout << i << ' ' << j << ' ' << cost[i][j] << endl;
		}
	vector<vector<ll> > dp(N + 1, vector<ll>(N + 1, LLONG_MAX / 2));
	for (int i = 0; i <= N; i++)
		dp[i][i] = 0;
	for (int len = 2; len <= N; len += 2)
		for (int i = 0; i + len <= N; i++) {
			int j = i + len;
			dp[i][j] = dp[i + 1][j - 1] + cost[i][j - 1];
			for (int k = i + 2; k <= j - 2; k++)
				dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]);
		}
	cout << dp[0][N] + N / 2 << endl;
}

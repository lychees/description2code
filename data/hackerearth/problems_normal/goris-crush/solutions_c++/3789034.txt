#include <iostream>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

int q[1000007][5];
int arr[1000007];

int BIT[5000050];

void update(int idx, int val, int len) {
        for(; idx<=len ; idx+=(idx&-idx)) {
                //cout << "lost forever idx = " << idx << endl;
                BIT[idx] += val;
        }
}

int query(int idx) {
        int sum = 0;
        for(; idx>=1; idx-=(idx&-idx)) {
                sum += BIT[idx];
        }
        return sum;
}

int max(int a, int b) {
        return a>b?a:b;
}
int min(int a, int b) {
        return a<b?a:b;
}

int main() {
        int N, Q, K;
        cin >> N >> Q >> K;
        vector<int> vec;
        map<int, int> m;
        for(int i=0;i<N;i++) {
                cin >> arr[i];
                vec.push_back(arr[i]);
        }
        for(int i=0;i<Q;i++) {
                cin >> q[i][0];
                if(q[i][0]) {
                        /* update case */
                        for(int j=1;j<=4;j++) {
                                cin >> q[i][j];
                                vec.push_back(q[i][j]);
                        }
                } else {
                        /* query case */
                        cin >> q[i][1] >> q[i][2];
                        vec.push_back(q[i][2]);
                }
		}
        sort(vec.begin(), vec.end());
        m[vec[0]] = 1;
        int pos = 1;
        for(int i=1; i< vec.size(); i++) {
                if(vec[i]!=vec[i-1])
                        pos++;
                m[vec[i]] = pos;
        }
        for(int i=0;i<N;i++) {
                update(m[arr[i]], 1, vec.size());
        }
        for(int i=0;i<Q;i++) {
                //cout << "is it here size = " << vec.size()<< endl;
                if(!q[i][0]) {
                //      cout << "lets check = " << arr[q[i][1]-1] << endl;
                		
                        update(m[arr[q[i][1]-1]], -1, vec.size());
                        arr[q[i][1]-1] = q[i][2]; 
                        update(m[q[i][2]], 1, vec.size());
                } else {
                        int a, b, c, d;
                        int kval = 0;
                        a = m[q[i][1]]; b=m[q[i][2]]; c=m[q[i][3]]; d=m[q[i][4]];
                        if(b < c || d < a) {
                                kval = 0;
                        }
                        else {
                                int q1 = max(a, c);
                                int q2 = min(b, d);
                                int qq1 = query(q1-1);
                                int qq2 = query(q2);
                                kval = qq2-qq1;
                        }

                        //cout << "ctor = " << kval << endl;
                        if(kval < K) {
                                cout << "Do not propose" << endl;
                        } else {
                                cout << "Propose" << endl;
                        }
                }
        }
}

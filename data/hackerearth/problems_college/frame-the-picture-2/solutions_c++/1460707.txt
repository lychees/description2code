#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
int t;
long long int a;
long long int b;
#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
int prime[] = { 2, 3, 5, 7, 11, 13, 17, 19 };
set<int> s;
map<long long ,int> dp;
long long int de(vector<vector<int> >&vv){
	long long int ans=0;
	for(int i=0;i<vv.size();i++){
		for(int j=0;j<vv.size();j++){
			ans*=10LL;
			ans+=vv[i][j];
		}
	}
	return ans;
}
int main(){
	for (int i = 0; i < 8; i++){
		s.insert(prime[i]);
	}
	vector<vector<int> > v;
	v.assign(3, vector<int>(3, 0));
	int countt = 1;
	for (int i = 0; i < v.size(); i++){
		for (int j = 0; j < v.size(); j++){
			v[i][j] = countt;
			countt++;
		}
	}
	queue<vector<vector<int> > > q;
	q.push(v);
	long long int nex;
	while (!q.empty()){
		v = q.front();
		q.pop();
		int cost = dp[de(v)];
		for (int i = 0; i < 3; i++){
			for (int j = 0; j < 3; j++){
				if (i + 1 < 3){
					if (s.count(v[i][j] + v[i + 1][j])){
						swap(v[i][j], v[i + 1][j]);
						nex=de(v);
						if (dp.count(nex)){
						}
						else{
							dp[nex] = cost + 1;
							q.push(v);
						}
						swap(v[i][j], v[i + 1][j]);
					}
				}
				if (j + 1 < 3){
					if (s.count(v[i][j] + v[i][j + 1])){
						swap(v[i][j], v[i][j + 1]);
						nex=de(v);
						if (dp.count(nex)){
						}
						else{
							dp[nex] = cost + 1;
							q.push(v);
						}
						swap(v[i][j], v[i][j + 1]);
					}
				}
			}
		}
	}
	int t;
	scanf("%d", &t);
	while (t--){
		for (int i = 0; i < 3; i++){
			for (int j = 0; j < 3; j++){
				scanf("%d", &v[i][j]);
			}
		}
		nex=de(v);
		if (dp.count(nex)){
			printf("%d\n",dp[nex]);
		}
		else{
			puts("-1");
		}
	}
	return 0;
}
//Megta and Tricky Triplets
#include<bits/stdc++.h>
#define MAX 100005
#define gc getchar_unlocked

using namespace std;

typedef long long int lli;
//2 3 5 7

lli Array[MAX];
int totalElements; 
lli dp[MAX][1<<4][4];

void fast_read(lli *number){
	
    register char currentChar=gc();
	*number=0;
	
	while(currentChar<'0'||currentChar>'9')
	  currentChar=gc();
	  
	  
	while(currentChar>='0'&&currentChar<='9'){
		
		*number=(*number)*10+currentChar-'0';
		currentChar=gc();
		
	} 
	
}

int fine(lli num){
	
	switch(num){
		
		case 2:
		  return 0;
		  
		case 3:  	
		  return 1;
		  
		case 5:
		  return 2;
		  
		case 7:
		  return 3;
		  
		default:
		  return -1;	
		
	}
	
}

lli solve(int idx,int mask,int taken){
	
	if(idx==totalElements||taken>=3){
				
		if(mask&&taken==3)
		  return 1;
	   
		else return 0;		
		
	}
    
	if(dp[idx][mask][taken]!=-1)
	  return dp[idx][mask][taken];
	
	lli count=0,copy=Array[idx],ok=0;
	int config=0;
	count+=solve(idx+1,mask,taken);
	
	if(taken==0)	
		ok=1;
		
	while(copy){
	
	  int i=fine((copy%10));	  
	  if(i!=-1)	
		config|=1<<i;  
		      
	  copy/=10;
	
    }

	if(taken<3){
	
	  if(!taken)	  
	  count+=solve(idx+1,config,taken+1);
      
      else count+=solve(idx+1,mask&config,taken+1);
	
	}
	
	return dp[idx][mask][taken]=count;
	
}

int main(void){
	
	int i,j,k;
	
	scanf("%d",&totalElements);
	
	for(i=0;i<totalElements;i++)
      scanf("%lld",&Array[i]);
	
	//    fast_read(&Array[i]);
			
	memset(dp,-1,sizeof dp);
	lli ans=solve(0,0,0);
	printf("%lld\n",ans);
		
	return 0;
	
}
#include <iostream>
#include <cstdio>
#include <cmath>
#include <map>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <deque>
#include <string>
#include <set>
#include <limits.h>
#include <stdlib.h>
#include <string.h>
 
#define inp(x) scanf("%d",&x)
#define inp_l(x) scanf("%lld",&x)
#define inp_d(x) scanf("%lf",&x)
#define MOD 1000000007
#define pb push_back
#define mp make_pair
 
using namespace std;
 
typedef long long int ll;
typedef vector <int> VI;
typedef vector <long long int> VLL;
typedef pair<int,int> PI;
typedef pair<ll,ll> PLL;

int cnt[100001][26];
 
void update(int L, char x, int cnt[][26], int n, int val) {
	for( ;L <= n; L += L & (-L)) {
		cnt[L][x - 'a'] += val;
	}
}
 
void findCount(int *lrCount, int pos, int cnt[][26]) {
	int i;
	for(i = 0; i < 26; i++) {
		lrCount[i] = 0;
	}
	//memset(lrCount, 0, 26);
 
	for( ; pos > 0; pos -= pos & (-pos)) {
		for(i = 0; i < 26; i++) {
			lrCount[i] += cnt[pos][i];
		}
	}
}
 
void disp(int cnt[][26], int n) {
	int i, j;
	for(i = 0; i <= n; i++) {
		for(j = 0; j < 26; j++) {
			cout << cnt[i][j] << " ";
		}
		cout << endl;
	}
}
 
int main()
{
	//ios_base::sync_with_stdio(false); cin.tie(0);
	int n, q, i, j;
	scanf("%d%d", &n, &q);
	char str[100001];
 
	scanf("%s",str);
 
	for(i = 0; i <= n; i++) {
		for(j = 0; j < 26; j++) {
			cnt[i][j] = 0;
		}
	}
 
	for(i = 1; i <= n; i++) {
		update(i, str[i - 1], cnt, n, +1);
	}
 
	//disp(cnt, n);

	int query;
	int c = 0;

	while(q--) {
		int L, R;
		int lCount[26], rCount[26], numOfOdds;
		char x;
		
		//printf("%d ", query);
		scanf("%d",&query);
		switch(query) {
			case 1:
				scanf("%d %c",&L, &x);
				//getchar();
				//printf("%d %c\n", L, x);
				update(L, str[L - 1], cnt, n, -1);
				update(L, x, cnt, n, +1);
				str[L - 1] = x;
				//disp(cnt, n);
				break;
			case 2:
				//cin >> L >> R;
				scanf("%d %d",&L, &R);
				//printf("%d %d\n", L, R);
				findCount(lCount, L - 1, cnt);
				findCount(rCount, R, cnt);
 
				numOfOdds = 0;
				for(i = 0; i < 26; i++) {
					//cout << rCount[i] << " " << lCount[i] << endl;
					if ((rCount[i] - lCount[i]) % 2 != 0) {
						numOfOdds++;
					}
				}
 
				if(numOfOdds <= 1) {
					printf("yes\n");
				} else {
					printf("no\n");
				}
				c++;
		}
	}
	//cout << c << endl;
	return 0;
}

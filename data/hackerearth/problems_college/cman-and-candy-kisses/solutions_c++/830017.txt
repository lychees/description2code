#include<bits/stdc++.h>
#define MOD	1000000007
long long int arr[100001];
using namespace std;
bool prime[1000005];
long long int primecount=0;
vector<long long int> primes;
void sieve(long long int n)
{
	memset(prime,true,sizeof(prime));
	prime[0]=false;
	prime[1]=false;
	long long int i;
	for(i=2;i<=n;++i)
	{
		if(prime[i])
		{
			primes.push_back(i);
			//printf("%lld ",i);
			primecount++;
		}
		for(int j=2*i;j<=1000000;j+=i)
			prime[j]=false;
	}
}

long long int pow_mod(long long int a, long long int b)
{
	long long int res=1;
	while(b)
	{
		if(b&1)
			res=(res*a)%MOD;
		a=(a*a)%MOD;
		b>>=1;
	}
	return res;
}

pair<long long int, pair<long long int, long long int> > extendedEuclid(long long int a, long long int b) {
    if(a == 0) return make_pair(b, make_pair(0, 1));
    pair<long long int, pair<long long int,long long  int> > p;
    p = extendedEuclid(b % a, a);
    return make_pair(p.first, make_pair(p.second.second - p.second.first*(b/a), p.second.first));
}
 
long long int modInverse(long long int a, long long int m) {
    return (extendedEuclid(a,m).second.first + m) % m;
}


long long int factorial(long long int n)
{
	long long int prod=1;
	long long int i;
	for(i=1;i<=n;i++)
	{
		prod = ((prod%MOD) * (i%MOD))%MOD;
	}
	return prod;
}
int main()
{
	ios_base::sync_with_stdio(false);
	long long int t,i,j,k,l,n,r;
	scanf("%lld",&t);
	sieve(10);
	long long int sum=0;
	//printf("\n\n");
	//for(i=0;i<primecount;i++)	
	//	printf("%lld ",primes[i]);
	while(t--)
	{
		scanf("%lld %lld",&n,&r);
		sum=0;
		for(i=0;i<n;i++)
		{
			scanf("%lld",&arr[i]);
			sum+=arr[i];
		}
		//printf("n=%lld r=%lld\n",n,r);
		if(r<sum)
		{
			printf("0\n");
		}
		else if(r==sum)
		{
			printf("1\n");
		}
		else
		{
			r=r-sum;
			long long int prod=1;
			long long int ans=1;
			ans=factorial(n+r-1);
			//printf("n+r=%lld+%lld=%lld and fact=%lld",n,r,n+r,factorial(n+r));
			//printf("FACtorial of 5=%lld\n",factorial(5));
			//printf("ans should be 4! and is %lld",ans);
			long long int temp=r;
			
			
			while(temp>=1)
			{
				prod= ((prod%MOD) * (temp%MOD))%MOD;
				temp--;
			}
			temp=n-1;
			while(temp>=1)
			{
				prod=((prod%MOD) * (temp%MOD))%MOD;
				temp--;
			}
			prod=pow_mod(prod,MOD-2)%MOD;
			ans=((ans%MOD) * (prod%MOD))%MOD;

			printf("%lld\n",ans);
		}
	}
}
#include <bits/stdc++.h>

#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)
#define EACH(it,a) for(__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)

#define DEBUG(x) { cout << #x << " = "; cout << (x) << endl; }
#define PR(a,n) { cout << #a << " = "; FOR(_,1,n) cout << a[_] << ' '; cout << endl; }
#define PR0(a,n) { cout << #a << " = "; REP(_,n) cout << a[_] << ' '; cout << endl; }

#define sqr(x) ((x) * (x))
using namespace std;

const long long MOD = 1e9 + 7;
const int MN = 100111;
long long fact[MN], inv_fact[MN];

long long power(long long x, long long k) {
    if (k == 0) return 1;
    long long mid = power(x*x%MOD, k >> 1);
    if (k & 1) return mid*x % MOD;
    else return mid;
}

inline long long C(int n, int k) {
    if (n < 0 || k < 0 || k > n) return 0;
    return fact[n] * inv_fact[k] % MOD * inv_fact[n-k] % MOD;
}

int main() {
    fact[0] = 1;
    FOR(i,1,MN-1) fact[i] = fact[i-1] * i % MOD;
    FOR(i,0,MN-1) inv_fact[i] = power(fact[i], MOD - 2);
    int ntest; scanf("%d", &ntest);
    while (ntest--) {
        int n, m, k; scanf("%d%d%d", &n, &m, &k);
        long long res = C(n-m-1, k-1) * C(m+1, k) % MOD;
        if (k == 0) {
            if (n == m) res = 1;
            else res = 0;
        }
        printf("%d\n", (int) res);
    }
    return 0;
}


#include<iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define all(v) v.begin(),v.end()
#define MAX 100001
#define MOD 1000000007
int bit[11][MAX];
vector<ll> arr;
vector<int> C;
int n;
inline void update(int idx,int val,int count){
 while(idx<=n){
  bit[count][idx]+=val;
  idx+=(idx&(-idx));
 }
}
inline int sum(int idx,int count){
 int summ=0;
 while(idx>0){
  summ+=bit[count][idx];
 idx-=(idx&(-idx));
 }
 return summ;
}
inline int query(int l,int r,int count){
 return sum(r,count)-sum(l-1,count);
}
inline int distinct_digits(ll temp){
  bool bit[10];
  int count=0;
  memset(bit,0,sizeof(bit));
  while(temp){
    bit[temp%10]=true;
    temp/=10;
  }
for(int j=0;j<10;j++)
   if(bit[j])
    count++;
  return count;
}
int main(){
 cin>>n;
 int count;
 arr.resize(n+1);
 C.resize(n+1);
 for(int i=1;i<=n;i++){
  cin>>arr[i];
  C[i]=distinct_digits(arr[i]);
  update(i,1,C[i]);
 }
int q;
 cin>>q;
 string choice;
 int l,r;
 ll val;
while(q--){
  cin>>choice;
  if(!choice.compare("ADD")){  // add
    cin>>l>>val;
    arr[l]=(val+arr[l])%MOD;
    update(l,-1,C[l]);
    C[l]=distinct_digits(arr[l]);
    update(l,1,C[l]);
  }else if(!choice.compare("REP")){ // replace
    cin>>l>>val;
    arr[l]=(val)%MOD;
    update(l,-1,C[l]);
    C[l]=distinct_digits(arr[l]);
    update(l,1,C[l]);
  }else if(!choice.compare("MUL")){ // count
    cin>>l>>val;
    arr[l]=(val*arr[l])%MOD;
    update(l,-1,C[l]);
    C[l]=distinct_digits(arr[l]);
    update(l,1,C[l]);
  }else if(!choice.compare("MAX")){
    cin>>l>>r;
    int i,T;
    for(i=10;i>=1;i--){
      T=query(l,r,i);
      if(T){
       break;
      }
    }
    cout<<i<<" "<<T<<endl;
  }else{

    cin>>l>>r;
    int i,T;
    for(i=1;i<=10;i++){
      T=query(l,r,i);
      if(T){
       break;
      }
    }
    cout<<i<<" "<<T<<endl;
  }
 }
return 0;
}

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define MAX 200000
 
vector<pair<int,pair<int,int> > >edges;
int parent[MAX];
bool comp(const pair<int,pair<int,int> > &t1,const pair<int,pair<int,int> > &t2)
{
  if (t1.ff==t2.ff)
  {
    if(t1.ss.ff==t2.ss.ff)
    {
    return t1.ss.ss>t2.ss.ss;
    }
    return t1.ss.ff>t2.ss.ff;
  }
  else
  return t1.ff<t2.ff;
}
 
int find_parent(int x)
{
  if (parent[x]==x)
  return x;
  else
  {
    parent[x]=find_parent(parent[x]);
    return parent[x];
  }
}
int main()
{
  int test;cin>>test;int t;
  int n,m;int a,b,c;int i;
  for(t=0;t<test;t++)
  {
    cin>>n>>m;
    edges.clear();
    for(i=0;i<m;i++)
    {
      cin>>a>>b>>c;
      edges.pb(mp(c,mp(min(a,b),max(a,b))));
    }
    sort(edges.begin(),edges.end(),comp);
    int arr[n+1];
    for(i=1;i<=n;i++)
    {
      parent[i]=i;
      arr[i]=0;
    }
    ll cost=0;
    for(i=0;i<m;i++)
    {
      int s=edges[i].ss.ff;int d=edges[i].ss.ss;
    //  cout<<edges[i].ff<<" "<<s<<" "<<d<<"\n";
      if (find_parent(s)!=find_parent(d))
      {cost+=edges[i].ff;
        int p=find_parent(s);
        parent[p]=find_parent(d);
        arr[s]++;
        arr[d]++;
      }
    }
    cout<<cost<<"\n";
    for(i=1;i<=n;i++)
    cout<<arr[i]<<" ";
    cout<<"\n";
 
  }
 
 
 
 
return 0;
}

#include<iostream>
#include<vector>
#include<string.h>
#include<stdio.h>
#include<climits>
#include<map>
#include<math.h>
#include<queue>
#include<algorithm>
#define LL long long int
#define P(N) printf("%d\n",N);
#define S(N) scanf("%d",&N);
#define SL(N) scanf("%lld",&N);
#define pb push_back
#define mp make_pair
#define pnl printf("\n");
#define FOR(i,a,b) for (i=a;i<=b;i++)
#define mem(a,val) memset(a,val,sizeof(a))
using namespace std;
vector<int>adj[100005];
int gcd(int a, int b){ int temp; while(b>0)	{ temp= b; b=a%b; a=temp;}	return a;}
int V,E;
int color[100010];
bool bfs(int node)
{
    color[node]=1;
    queue<int>que;
    que.push(node);
    while(!que.empty())
    {
        int u = que.front();
        que.pop();
        int len= adj[u].size();
        for(int i=0;i<len;i++)
        {
            node= adj[u][i];
            if(color[node]==-1)
            {
                color[node]=1-color[u]; que.push(node);
            }
            else if(color[node]==color[u])
                return false;
        }
    }
    return true;
}
int main()
{
       #ifndef ONLINE_JUDGE
       //     freopen("C:\\Users\\hp pc\\Desktop\\input.txt", "r", stdin);
      #endif
      int u,v,i,j,t;
      S(t);
      while(t--)
      {
            S(V) S(E)
            memset(color,-1,sizeof(color));
            for(int i=0;i<=V;i++)adj[i].clear();
            while(E--)
            {
                scanf("%d %d",&u,&v);
                adj[u].pb(v);
                adj[v].pb(u);
            }
            bool flag=false;
            for(int i=1;i<=V;i++)
            {
                if(color[i]==-1)
                {
                     bool x=bfs(i);
                     if(x==false)
                     {
                         flag=true;
                         break;
                     }
                }
            }
            if(flag==false)
                cout<<"YES\n";
            else cout<<"NO\n";
      }
return 0;
}


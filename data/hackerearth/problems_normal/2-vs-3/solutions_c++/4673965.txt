#include <bits/stdc++.h>
using namespace std;
#define MAXN 100005
#define c 3
int tree[4*MAXN];
int power[MAXN];
string str;
 
void build(int v,int tl,int tr){
	if(tl==tr){
		tree[v] = str[tl]-'0';
		return;
	}
	else{
		int tm = (tl+tr)>>1;
		build(2*v,tl,tm);
		build(2*v+1,tm+1,tr);
		tree[v] = ((tree[2*v]*power[tr-tm]) + tree[2*v+1])%c;
		//cout << "value for pow to " << tr-tm << " is " << power[tr-tm] << endl;
		//cout << "value stored for (" << tl << "," << tr << ") is " << tree[v] << endl; 
	}
	return;
}
 
int treequery(int v,int tl,int tr,int l,int r){
	int lans,rans,tm = (tl+tr)>>1;
	if(tl==l && tr==r){
		//cout << "ans for (" <<tl << "," << tr  << ") is " << tree[v] << endl;
		return tree[v];
	}
	if(l>tm)
		return treequery(2*v+1,tm+1,tr,l,r);
	else if(r<=tm)
		return treequery(2*v,tl,tm,l,r);
	else{
		lans = treequery(2*v,tl,tm,l,tm);
		rans = treequery(2*v+1,tm+1,tr,tm+1,r);
	//	cout << "lans is " << lans << " for (" << l << "," << tm << endl;		
	//	cout << "rans is " << rans << " for (" << tm+1 << "," << r << endl;
		return ((lans*power[r-tm])%c+rans)%c;
	}
	
}
 
void update(int v,int tl,int tr,int idx){
//		cout << "currently in range (" << tl << "," << tr << ") " << endl;
		if(idx<tl || idx > tr)
			return;
		if(tl==tr && tl==idx){
			tree[v] = 1;
			return;
		}
		int tm = (tl+tr)>>1;
		update(2*v+1,tm+1,tr,idx);
		update(2*v,tl,tm,idx);
		tree[v] = ((tree[2*v]*power[tr-tm])%c + tree[2*v+1])%c;
		return;
}
int main(){
	
	int n,q,type,l,r,idx,ans;
	cin >> n;
	cin >> str;
	cin >> q;
	power[0]=1;
	for(int i=1;i<=100000;i++){
		power[i] = power[i-1]*2;
		power[i] %= c;
	}
	//for(int i=0;i<100;i++)
	//	cout << power[i] << " ";
	//cout << endl;
	build(1,0,n-1);
	while(q--){
		cin >> type;
//		cout << "type of query is " << type << endl;
		if(type==0){
			cin >> l >> r;
			ans = treequery(1,0,n-1,l,r);
			cout << ans << endl;
		}
		else{
			cin >> idx;
			if(str[idx]=='0'){
//				cout << "value is " << idx << endl;
				update(1,0,n-1,idx);
				str[idx]=1;
			}
		}
	}
	return 0;
}


#include <bits/stdc++.h>

using namespace std;
vector<list<int> > adj;
int n;


int main()
{
    int t,a,b,f=0;

    cin>>t;
    for(int i=1;i<=t;i++)
    {
        vector<int>color(20000,0);
        int partitions[20000]={0};
         set<int>st;
          int count1=0,count2=0;
           int final_1=0;
    for(int j=0;j<20000;j++)
    {
        list<int>l;
        adj.push_back(l);
    }
        cin>>n;
        for(int j=0;j<n;j++)
        {
            cin>>a>>b;
            adj[a-1].push_back(b-1);
            adj[b-1].push_back(a-1);
            st.insert(a-1);
            st.insert(b-1);
        }

        set<int>::iterator se;
        for(se=st.begin();se!=st.end();se++)
        {
            if(color[*se]!=1)
            {
                 final_1=final_1+max(count1,count2);
               queue<int>q;
               color[*se]=-1;//-1 for Gray 0 for white and 1 for black
               partitions[*se]=1;
               count1=count2=0;
               count1++;

             /*  if(count1>=count2){
                    count1++;
               partitions[*se]=1;
               }
               else{
                    count2++;
                partitions[*se]=2;
               }*/
               q.push(*se);
                while(!q.empty())
                {
                    int s=q.front();
                    q.pop();
                    list<int>::iterator it;
                    for(it=adj[s].begin();it!=adj[s].end();it++)
                    {
                        if(partitions[s]==partitions[*it])
                        {
                            f=1;
                            break;
                        }
                        else
                        {
                            if(color[*it]==0)
                            {
                                color[*it]=-1;
                                partitions[*it]=3-partitions[s];
                                if(partitions[*it]==1)
                                {
                                    count1++;
                                }
                                else
                                    count2++;
                                q.push(*it);
                            }
                        }
                    }
                    color[s]=1;
                 }
              }

        }
        final_1=final_1+max(count1,count2);
        cout<<"Case "<<i<<": "<<final_1<<endl;

        /*if(count1>count2)
            cout<<"Case "<<i<<": "<<count1<<endl;
        else
            cout<<"Case "<<i<<": "<<count2<<endl;*/
            adj.clear();
    }
}








#include <bits/stdc++.h>

using namespace std;

int arr[5001],size[5001];

void initialize(int n){
	for(int i = 1;i <= n; i++){
		arr[i] = i;
		size[i] = 1;
	}
}
int root(int a){
	while(arr[a] != a){
		arr[a] = arr[arr[a]];
		a = arr[a];
	}
	return a;
}
void Union(int a, int b){
	int ra = root(a);
	int rb = root(b);

	if(size[ra] >= size[rb]){
		arr[rb] = ra;
		size[ra] += size[rb];
	}
	else{
		arr[ra] = rb;
		size[rb] += size[ra];
	}
}
bool find(int a, int b){
	return (root(a) == root(b));
}

int main(){
	int t;
	cin >> t;
	while(t--){
		int n,m;
		cin >> n >> m;
		initialize(n);
		vector<pair<int, int> > v;
		v.push_back(make_pair(0,0));
		for(int i = 1; i <= m; i++){
			int a,b;
			pair<int, int> p;
			cin >> a >> b;
			p.first = a;
			p.second = b;
			v.push_back(p);
		}
		bool cyclic = false;
		set<int> s;
		for(int i = 1; i <= n-1; i++){
			int x;
			cin >> x;
			s.insert(v[x].first);
			s.insert(v[x].second);
			
			if(!find(v[x].first, v[x].second)){
				Union(v[x].first, v[x].second);
			}
			else{
				cyclic = true;
			}
		}
		if(cyclic){
			cout << "NO" << endl;
		}
		else{
			bool l = true;
			for(int i = 1; i <= n; i++){
				if(!find(1, i)){
					l = false;
				}
			}
			if(l){
				cout << "YES" << endl;
			}
			else{
				cout << "NO" << endl;
			}
		}
	}
	return 0;
}
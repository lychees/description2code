#include <iostream>
#include <string>
#include <vector>
using namespace std;

// global var Date
vector <int> giDateWeightage(30, 0);

void BreakupApp(string _sMessage)
{
	int iWeight = 0;
	
	// G or M
	switch (_sMessage[0])
	{
		case 'G':
			iWeight = 2;
			break;
		case 'M':
			iWeight = 1;
			break;
	};
	
	// Date
	for (int i = 1;i < _sMessage.size(); i++)
	{
		if (_sMessage[i] >= '1' && _sMessage[i] <= '9' && _sMessage[i-1] == ' ')
		{
			int iNum = stoi (_sMessage.substr (i));
			if (iNum >= 1 && iNum <= 30)
				giDateWeightage[iNum - 1] += iWeight;
		}
	}
}

int FindMaxDate(vector <int> _vArr)
{
	int iMaxDateNumber = 0, iDate = 0, iArraySize = _vArr.size();
	bool iCheckDuplicate = false;
	for (int i = 0;i < iArraySize; i++)
	{
		if (_vArr[i] == iMaxDateNumber)
			iCheckDuplicate = true;
		else if (_vArr[i] > iMaxDateNumber)
		{
			iMaxDateNumber = _vArr[i];
			iDate = i + 1;
			iCheckDuplicate = false;
		}
	}
	
	return (!iCheckDuplicate && iDate) ? iDate : -1;
}

int main()
{
	int iN, iDate;
	string sMessagePerLine;
	
	getline (cin, sMessagePerLine);
	iN = stoi (sMessagePerLine);
	
	for (int i = 0;i < iN; i++)
	{
		getline (cin, sMessagePerLine);
		BreakupApp (sMessagePerLine);
	}
    iDate = FindMaxDate (giDateWeightage);
    
    // output
    cout << ((iDate > 0 && (iDate == 19 || iDate == 20)) ? "Date" : "No Date") << endl;
    
    return 0;
}

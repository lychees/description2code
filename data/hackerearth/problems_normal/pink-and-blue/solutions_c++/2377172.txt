#include<bits/stdc++.h>
#include <iostream>
using namespace std;


bool bfs(vector< vector<int> > g, bool a[], int *count, int n, int c){
	
	
	bool visited[n+1];
	queue<int> q;
	bool color[n+1];
	for(int i = 1; i <= n; i++){
		visited[i] = false; 
	}
	vector<int>::iterator it;
	int s = 1;
	
	
	if(c == 1){
		color[s] = 1;
	}
	else{
		color[s] = 0;
	}

	q.push(s);
	visited[s] = true;
	while(!q.empty()){
		s = q.front();
		q.pop();

		for(it = g[s].begin(); it != g[s].end(); ++it){
			
			if(visited[*it] == false){
				if(color[s] == 0){
					color[*it] = 1;
					visited[*it] = true;
				}
				else if(color[s] = 1){
					color[*it] = 0;
					visited[*it] = true;
				}
				q.push(*it);
			}
			else if(color[s] == color[*it]){
				return false;
			}
		}
	}
	int tmp1 = 0;
	for(int i = 1; i <= n; i++){
		if(a[i] != color[i]){
			tmp1++;
		}
	}
	*count = min(tmp1, *count);
	return true;
}

int main()
{
	int n,m,count = INT_MAX;
	cin>>n>>m;
	vector< vector <int> > g(2*m);
	bool a[n+1];
	bool flg;
	for(int i = 1; i <= n; i++){
		char ch;
		cin>>ch;
		if(ch == 'B')
			a[i] = 1;
		else
			a[i] = 0;
	}


	for(int i = 0; i < m; i++){
		int x,y;
		cin>>x>>y;
		g[x].push_back(y);
		g[y].push_back(x);
	}
	

	flg = bfs(g,a,&count,n,1);
	if(flg == 0){
		cout<<"Not possible\n";
		return 0;
	}
	flg = bfs(g,a,&count,n,0);
	cout<<count<<endl;
    return 0;
}

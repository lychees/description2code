#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>
#include <queue>
#include <tuple>


using namespace std;


int main()
{
    typedef long long ll;
    typedef tuple<ll, int> tpl;
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int c, p, n;
    cin >> c >> p >> n;
    vector<ll> iqs[2] = {vector<ll>(c), vector<ll>(c)};
    vector<ll> cnt(c);

    copy_n(istream_iterator<ll>(cin), n, iqs[0].begin());
    fill_n(cnt.begin(), n, 1);

    priority_queue<tpl, vector<tpl>, greater<tpl>> pq;

    for (int i = 0; i < c; ++i) {
        pq.push(make_tuple(iqs[0][i], i));
    }

    for (int i = 0; i < p; ++i) {
        int iq = 0;
        cin >> iq;
        int ind = get<1>(pq.top());
        pq.pop();
        cout << ind + 1 << ' ';
        iqs[cnt[ind]++&1][ind] = iq;
        pq.push(make_tuple((iqs[0][ind]+iqs[1][ind])*cnt[ind], ind));
    }
    cout << endl;
    return 0;
}


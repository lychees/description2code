#include <vector>
#include <list>
#include <map>
#include <set>
#include "queue"
#include <deque>
#include <stack>
#include <numeric>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cassert>
#include <iostream>
#define MOD1 1000000007

inline void inp( long long int  &n ){n=0;int ch=getchar();int sign=1;while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getchar();}while( ch >= '0' && ch <= '9' )n = (n<<3)+(n<<1) + ch-'0', ch=getchar();n=n*sign;}
#define pi acos(-1)
#define pii pair<int,int>
#define vii vector<pii>
#define ll  long long int
#define loop(i,n) for(ll i=0;i<n;i++)
#define ll  long long int
#define LL long long int
#define loop2(i,n) for(ll i=1;i<=n;i++)
#define MIN(a,b) (a) < (b) ? (a) : (b)
#define MAX(a,b) (a) > (b) ? (a) : (b)
#define ABS(a) (a) > 0 ? (a) : -(a)
#define rep1(i,a,n) for(i=a;i<(n);i++)
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define OUT_RT cerr << (float(clock()) / CLOCKS_PER_SEC) << endl
#define EPS 1e-9
#define ld long double
using namespace std;
//JAI SHREE KRISHNA
// Find the holy grail in an  adventure frought with danger
// The bigger the occasion, the better the response.
// Never giving in, fighting to the end
// Look at  the limits
// Check if it is binary search
// Code till the end of contest


int main(){
 ios::sync_with_stdio(false);
 cin.tie(0);
    
    ll t;
    cin>>t;
    while (t--) {
        
        ll ans  = 0 ;
    ll n;
    ll k;
        cin>>n>>k;
        ll array[n];
        loop(i, n)
        {
            cin>>array[i];
        }
        ll curr = 0LL;
        ll left = 0 ;
        map<ll,ll>m1;
          loop(i, n)
        {
            curr+=array[i];
            
            if(curr<=k)
            {
                m1[i-left+1]+=1;
            }

            while (curr>k) {
                curr-=array[left];
                left++;
                if(curr<=k){
                    m1[i-left+1]+=1;
            }
                
            }
            
        }
    
        for(ll j= n;j>=1;j--){
            m1[j]+=m1[j+1];
        }
        loop2(i, n)
        {
            cout<<m1[i]<<" ";
        }
        cout<<endl;
    }
    return 0;
}

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <list>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
using namespace std;
 
#define trace(x) cerr << #x << "=" << x <<endl;
#define trace2(x, y) cerr << #x << "=" << x << " " << #y << "=" << y <<endl;
#define track(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) {cerr << x[i] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int i = 0; i < n; i++) {cerr << x[i] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
 
#define MAX 1500
#define INF 1e18
#define MOD 1000000007
 
vector<bool> isprime;
vector<int> primes;
void sieve(int n)
{
	isprime.resize(n + 1);
	for (int i = 0; i <= n; i++)
		isprime[i] = 1;
	isprime[1] = 0;
	isprime[2] = 1;
	for (int i = 2; i * i <= n; i++)
		if (isprime[i])
			for (int j = 2; i * j < n; j++)
					isprime[i * j] = 0;
	for (int i = 2; i < n; i++)
		if (isprime[i])
			primes.push_back(i);
	return;
}
 
long long getCost(int u, int v){
    int idx1 = lower_bound(primes.begin(), primes.end(), u) - primes.begin();
    int idx2 = lower_bound(primes.begin(), primes.end(), v) - primes.begin();
    if (idx2 <= idx1) {
        idx2 = idx1 + 1;
    } else if (idx2 > idx1+1) {
        idx1 = idx2-1;
    }
    long long answer = ((primes[idx1] - u) + (primes[idx2] - v));
    return answer;
}
 
int a[550];
long long dp[550][550];
bool exist[550][550];
 
long long solve(int i, int j) {
    if (i > j) {
        return 0;
    }
    if (i+1 == j) {
        return getCost(a[i], a[j]);
    }
    if (!exist[i][j]) {
        long long minAnswer = INF;
 
        for (int k = j-1; k >= i; k -= 2) {
            long long answer = 0;
            long long cost1 = solve(i, k-1);
            long long cost2 = solve(k+1, j-1);
            answer = cost1 +  cost2 + getCost(a[k], a[j]);
            minAnswer = min(answer, minAnswer);
        }
 
        dp[i][j] = minAnswer;
        exist[i][j] = true;
    }
    return dp[i][j];
}
 
int main() {
    ios::sync_with_stdio(false);
    sieve(2000005);
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    long long answer = solve(0, n-1);
    cout << answer + n/2<< endl;
}
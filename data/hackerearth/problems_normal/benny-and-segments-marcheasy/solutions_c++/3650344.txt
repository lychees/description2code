#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;
inline int seg_length(pair<int,int> a){
	return a.second - a.first;
}
pair<int,int> seg_union(pair<int,int> a,pair<int,int> b){
	return make_pair(min(a.first,b.first),max(a.second,b.second));
}
int main(){
	int t;
	cin>>t;
	while(t--){
		int n;
		cin>>n;
		int l;
		cin>>l;
		vector<pair<int,int>> a(n);
		for(int i=0;i<n;i++){
			int s,e;
			cin>>s>>e;
			a[i] = make_pair(s,e);
		}
		sort(a.begin(),a.end(),[](pair<int,int> b,pair<int,int> c){if(b.second == c.second)
			{
				return b.first<c.first;
			}
			return b.second<c.second;
		});
		bool possible = false;
		for(int i=0;i<n;i++){
			pair<int,int> seg = a[i];
			for(int j=i;j>=0;j--){
				pair<int,int> temp = seg_union(a[j],seg);
				if(seg_length(temp) == l){
					possible = true;
					break;
				}
				else if(seg_length(temp) < l){
					seg = temp;
				}
			}
		}
		cout<<(possible?"Yes":"No")<<endl;
	}
	return 0;
}
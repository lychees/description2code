#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define pb push_back
#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
#define sz(x) (int((x).size()))
#define bit(x) (1 << (x))

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

template<class T>
inline void chkmax(T& x, T y) {
	if (x < y) x = y;
}

template<class T>
inline void chkmin(T& x, T y) {
	if (y < x) x = y;
}

typedef long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;
const int MX = 1000005;
int n;
int a[MX], b[MX];
int v[MX];
LL rlt;

void add(int k) {
	for (; k < MX; k += k & -k) v[k]++;
}

int sum(int k) {
	int s = 0;
	for (; k > 0; k -= k & -k) s += v[k];
	return s;
}

bool test() {
	if (rlt < 2) return 0;
	for (LL p = 2; p * p <= rlt; p++) {
		if (rlt % p == 0) return 0;
	}
	return 1;
}

int main() {
	int i;
	
	scanf("%d", &n);
	for (i = 0; i < n; i++) scanf("%d", &a[i]);
	for (i = 0; i < n; i++) scanf("%d", &b[i]);
	for (i = n - 1; i >= 0; i--) {
		rlt += sum(a[i] - 1);
		add(b[i]);
	}
	printf("%s INVERSION\n", test() ? "MAGIC" : "SIMPLE");
	return 0;
}

#include<bits/stdc++.h>
using namespace std;
# define INF 0x3f3f3f3f
#define ll long long 
// iPair ==>  lleger Pair
typedef pair<ll, ll> iPair;

// This class represents a directed graph using
// adjacency list representation
ll weight[100001];
class Graph
{
    ll V;    // No. of vertices
    
    // In a weighted graph, we need to store vertex
    // and weight pair for every edge
    list< pair<ll, ll> > adj[100001];

public:
    Graph(ll V);  // Constructor

    // function to add an edge to graph
    void addEdge(ll u, ll v, ll w);

    // Prll MST using Prim's algorithm
    ll primMST();
};

// Allocates memory for adjacency list
Graph::Graph(ll V)
{
    this->V = V;
    //adj = new list<iPair> [V];
}

void Graph::addEdge(ll u, ll v, ll w)
{
    adj[u].push_back(make_pair(v, w));
    adj[v].push_back(make_pair(u, w));
}

// Prlls shortest paths from src to all other vertices
ll Graph::primMST()
{
    // Create a priority queue to store vertices that
    // are being preinMST. This is weird syntax in C++.
    // Refer below link for details of this syntax
    // http://geeksquiz.com/implement-min-heap-using-stl/
    priority_queue< iPair, vector <iPair> , greater<iPair> > pq;

    ll src = 0; // Taking vertex 0 as source

    // Create a vector for keys and initialize all
    // keys as infinite (INF)
    vector<ll> key(V, INF);

    // To store parent array which in turn store MST
    vector<ll> parent(V, -1);

    // To keep track of vertices included in MST
    vector<bool> inMST(V, false);

    // Insert source itself in priority queue and initialize
    // its key as 0.
    pq.push(make_pair(0, src));
    key[src] = 0;
    
    /* Looping till priority queue becomes empty */
    while (!pq.empty())
    {
        // The first vertex in pair is the minimum key
        // vertex, extract it from priority queue.
        // vertex label is stored in second of pair (it
        // has to be done this way to keep the vertices
        // sorted key (key must be first item
        // in pair)
        ll u = pq.top().second;
        pq.pop();

        inMST[u] = true;  // Include vertex in MST

        // 'i' is used to get all adjacent vertices of a vertex
        list< pair<ll, ll> >::iterator i;
        for (i = adj[u].begin(); i != adj[u].end(); ++i)
        {
            // Get vertex label and weight of current adjacent
            // of u.
            ll v = (*i).first;
            ll weight = (*i).second;

            //  If v is not in MST and weight of (u,v) is smaller
            // than current key of v
            if (inMST[v] == false && key[v] > weight)
            {
                // Updating key of v
                key[v] = weight;
                pq.push(make_pair(key[v], v));
                parent[v] = u;
            }
        }
    }
    ll ans=0;
    // Prll edges of MST using parent array
    for (ll j = 0; j < V; ++j)
    {
    	list< pair<ll, ll> >::iterator i;
    	for (i = adj[j].begin(); i != adj[j].end(); ++i)
        {
            // Get vertex label and weight of current adjacent
            // of u.
            ll v = (*i).first;
            if(v==parent[j])
            {
            	ans+= (*i).second;
            	//cout<<" j "<<j<<" "<<(*i).second<<" "<<endl;
			}
    
        }
	}
	return ans ;
        //prllf("%d - %d\n", parent[i], i);
}

// Driver program to test methods of graph class
int main()
{
    // create the graph given in above fugure
    ll V ,m,x,y,w;
    scanf("%lld %lld",&V,&m);
    
    Graph g(V);
    for(ll i=0;i<m;i++)
    {
    	scanf("%lld %lld %lld",&x,&y,&w);
    	x--;y--;
    	g.addEdge(x,y,w);
	}
    //  making above shown graph

    cout<<g.primMST()<<endl;

    return 0;
}
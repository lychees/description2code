#include <bits/stdc++.h>

using namespace std;

int idarr[1000001];

vector<int> adj[1000001];

bool visited[1000001];

vector< pair < int,int > > extra;

void dfs(int source,int id)
{
    visited[source]=true;
    idarr[source]=id;

    for(int i=0;i<adj[source].size();i++)
    {
        if(visited[adj[source][i]] == false)
        {
            dfs(adj[source][i],id);
        }
    }
}

void addEdge(int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n,m;
        char space,ch1,ch2;
        scanf("%d %d",&n,&m);

        // Ressetting:

            for(int i=0;i<=n;i++)
                adj[i].clear();
            for(int i=0;i<=n;i++)
                visited[i]=false;

           extra.clear();

           for(int i=0;i<m;i++)
           {

               int x,y;
                scanf("%d",&x);

                scanf("%c",&space);
                scanf("%c",&ch1);

                if(ch1=='!')
                    scanf("%c",&ch2);
                scanf("%c",&space);
                scanf("%d",&y);

                if(ch1 == '=')
                {
                    addEdge(x,y);

                }
                else
                {

                    extra.push_back(make_pair(x,y));
                }

           }

           // assign ids:

           for(int i=1;i<=n;i++)
            {

                if(visited[i] == false)
                {
                    dfs(i,i);
                }
            }

            int flg=0;

            for(int i=0;i<extra.size();i++)
            {
                int u = extra[i].first;
                int v = extra[i].second;

                if(idarr[u] == idarr[v])
                {
                    flg=1;
                    break;
                }
            }

            if(flg)printf("NO\n");
            else printf("YES\n");
    }
    return 0;
}

#include <iostream>
#include <algorithm>
#include <complex>
#include <vector>

using namespace std;

typedef complex<int> pnt;

static int cross(const pnt &a, const pnt &b) 
{ 
       return imag(conj(a) * b); 
}

static int cross(const pnt &a, const pnt &b, const pnt &c)
{
    return cross(b - a, c - a);
}

int main()
{
    int n,m,bx,by,ans,i,j,px;
    cin >> n >> m >> bx >> by;
    pnt B(bx, by);
    vector <pnt> points(n);
    for (i = 0; i < n; i++)
    {
        int x, y;
        cin >> x >> y;
        points[i] = pnt(x, y);
    }

    vector<pnt> rope(m + 1);
    for (i = 0; i <= m; i++)
    {
        int x, y;
        cin >> x >> y;
        rope[i] = pnt(x, y);
    }

    px = points[0].real();
    vector<int> cuts;
    for (i = 0; i < m; i++)
    {
        if ((rope[i].real()>px)^(rope[i + 1].real()>px))
        {
            int c = 0;
            for (int j = 0; j < n; j++)
                if (cross(rope[i],rope[i + 1],points[j]) > 0)
                    c++;
            if (rope[i + 1].real() > px)
                c = n - c;
            cuts.push_back(c);
        }
    }

    vector <int> s;
    s.reserve(cuts.size() + 1);
    
    ans = n;
    for (int b = 1; b < (1 << n); b++)
    {
        int G = 0;
        vector<int> grp(n + 1);
        grp[0] = 0;
        for (i = 0; i < n; i++)
        {
            if (b & (1 << i))
                G++;
            grp[i + 1] = G;
        }

        s.clear();
        for (i = 0; i < (int) cuts.size(); i++)
        {
            int g = grp[cuts[i]];
            if (!s.empty() && g == s.back())
                s.pop_back();
            else
                s.push_back(g);
        }
        if (s.empty())
            ans = min(ans,n - __builtin_popcount(b));
    }
    cout << ans << endl;
}

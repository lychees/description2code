//In the name of God
#include <bits/stdc++.h>
using namespace std;
#define int long long
typedef long long ll;
const int Maxn = 1e5 + 9,lg = 17;
int par[Maxn][lg],sub[Maxn],h[Maxn],dep[Maxn];
int add[Maxn];
vector<int> al[Maxn];
int go_up(int v,int k){
	for(int i = 0; i < lg;i++)
		if((1 << i) & k)
			v = par[v][i];
	return v;
}
int dfs1(int v,int d = 0,int p = -1){
	sub[v] = 1;
	par[v][0] = p;
	for(int i = 1; i < lg;i++)
		if(par[v][i-1] + 1)
			par[v][i] = par[par[v][i-1]][i-1];
	h[v] = (p+1?h[p]+1:0);
	for(int i = 0; i < al[v].size();i++){
		int u = al[v][i];
		if(u == p) continue;
		sub[v] += dfs1(u,d,v);
	}
	return sub[v];
}
void dfs2(int v,int p = -1,int d = 0){
	if(p + 1) add[v] = add[p] + (sub[p] - sub[v]) * (sub[p] - sub[v]);
	dep[v] = d;
	for(int i = 0; i < al[v].size();i++){
		int u = al[v][i];
		if(u == p) continue;
		dfs2(u,v,d + sub[v] - sub[u]);
	}
	return;
}
int lca(int u,int v){
	if(h[u] < h[v]) swap(u,v);
	u = go_up(u,h[u] - h[v]);
	if(u == v) return v;
	for(int i = lg - 1;i + 1;--i)
		if(par[v][i] != par[u][i])
			v = par[v][i],u = par[u][i];
	return par[v][0];
}
main(){
	ios_base::sync_with_stdio(0);
	memset(par,-1,sizeof par);
	int n;
	cin >> n;
	for(int i = 0; i < n-1;i++){
		int u,v;
		cin >> u >> v;
		al[--u].push_back(--v);
		al[v].push_back(u);
	}
	dfs1(0);
	dfs2(0);
//	for(int i = 0; i < n;i++){
//		cout << add[i] << ' ' << i << endl;
//	}
	int q;
	cin >> q;
	for(int i = 0; i < q;i++){
		int u,v;
		cin >> u >> v;
		--u,--v;
		if(u == v){
			cout << 0 << endl;
			continue;
		}
		int p = lca(u,v);
		if(h[u] > h[v]) swap(u,v);
		if(u == p){
			int s = go_up(v,h[v] - h[u] - 1);
			int ex = add[v] - add[u];
			ex += sub[v] * sub[v] - (sub[p] - sub[s]) * (sub[p] - sub[s]);
			int m = n - sub[s];
			ex += m * m;
		//	cerr << u << ' ' << v << ' ' << ex << ' ' << m << ' ' << add[u] << ' ' << add[v] << " HI" << endl;
			cout << (n * n - ex) / 2 << endl;
		}else{
			int s1 = go_up(v,h[v] - h[p] - 1);
			int s2 = go_up(u,h[u] - h[p] - 1);
			int ex = add[v] - add[p] + add[u] - add[p];
			ex += sub[u] * sub[u] + sub[v] * sub[v] - (sub[p] - sub[s1]) * (sub[p] - sub[s1]) - (sub[p] - sub[s2]) * (sub[p] - sub[s2]);
			int m = n - sub[s1] - sub[s2];
			ex += m * m;
		//	cerr << ex << ' ' << m << ' ' << u << ' ' << v << ' ' << p << ' ' << add[u] + sub[u] * sub[u] - (sub[p] - sub[s2]) * (sub[p] - sub[s2]) << ' ' << add[v] + sub[v] * sub[v] - (sub[p] - sub[s1]) * (sub[p] - sub[s1])<< endl;
			cout << (n * n - ex) / 2 << endl;
		}
	}
	return 0;
}
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <utility>
#include <sstream>
#include <map>
#include <set>
#include <cassert>
using namespace std;
typedef long long LL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PI;
const int inf=2000000000;
const LL INF=LL(inf)*inf;
const LL mod=1000000007LL;
double eps=1e-8;
#define pb push_back
#define sc(x) scanf("%d",&(x))
#define scl(x) scanf("%lld",&(x))
const int N=100002;
int main()
{
	int t,n,m,i,j,k,x,y;
	n=40000;
	int p[40000]={0};
	int root=200;
	for(i=2;i<=root;i++)
	{
		if(!p[i])
		{
			for(j=i+i;j<n;j+=i)
				p[j]=1;
		}
	}
	int pidx=0;
	int primes[10000];
	for(i=2;i<n;i++)
	{
		if(!p[i])
			primes[pidx++]=i;
	}
	sc(t);
	while(t--)
	{
		sc(n);sc(k);
		assert(n<=1000);
		assert(k<=1000000000);
		vector<int> factors;
		for(i=0;i<pidx && primes[i]*primes[i]<=k;i++)
		{
			y=primes[i];
			while(k%y==0)
			{
				factors.pb(y);
				k/=y;
			}
		}
		if(k>1)
			factors.pb(k);
		multiset<int> s;
		for(i=0;i<n;i++)
			s.insert(1);
		for(i=factors.size()-1;i>=0;i--)
		{
			x=*(s.begin());
			s.erase(s.begin());
			x*=factors[i];
			s.insert(x);
		}
		int sum=0;
		multiset<int>::iterator it;
		it=s.begin();
		while(it!=s.end())
		{
			sum+=*it;
			it++;
		}
		printf("%d\n", sum);
	}
}
#include <bits/stdc++.h>
using namespace std;

vector < pair<int,int> > v;
char alpha[100];
char s[2000];

struct node {
    bool e;
    char c;
    node *left,*right;

};

stack < node* > stak;

node* init(char c) {
    node* p = (node *)malloc(sizeof(node));
    p->e = true;
    p->c =c;
    p->left = p->right = NULL;
    return p;
}

node* create(node *a, node *b) {
    node* p = (node *)malloc(sizeof(node));
    p->e = false;
    p->c ='0';
    p->left = a;
    p->right = b;
    return p;
}

node* fun() {
    for(int i=v.size()-1;i>=0;i--)
        stak.push(init(alpha[v[i].second]));

    while(stak.size()>1) {
        node* x = stak.top();
        stak.pop();
        node* y  = stak.top();
        stak.pop();
        stak.push(create(x,y));
    }
    node* root = stak.top();
    stak.pop();
    return root;
}

void traverse(char *a, node* root) {

    int l=strlen(a);
    for(int i=0;i<l;) {
        node* p = root;
        while(!p->e) {
            if(a[i]=='0')
                p=p->right;
            else
                p=p->left;
            i++;
        }
        printf("%c",p->c);
    }
    printf("\n");
}

int main()
{
    int t,n,c;
    cin >> t;
    while(t--) {
    	v.clear();
    	cin >> n;
    	for(int i=0;i<n;i++) {
    		do {
    			alpha[i] = getchar();
    		}while(alpha[i]<'a'||alpha[i]>'z');
    		scanf("%d",&c);
    		//printf("%d %c\n",i,alpha[i]);
    		v.push_back(make_pair(c,i));
    	}
    	sort(v.begin(),v.end(),std::greater< pair<int,int> >());


	    node* root = fun();
	    //while(1)
	    {
            scanf("%s",s);
            //puts(s);
            traverse(s,root);
	    }

    }

    return 0;
}

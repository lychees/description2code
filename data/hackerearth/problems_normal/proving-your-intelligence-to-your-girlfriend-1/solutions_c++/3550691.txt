#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e6+5;
const int MOD = 1e9+7;
vector<int> adj[MAXN];
int dsu[MAXN];
long long fibK1[MAXN],fibK2[MAXN],fibK3[MAXN],fibK4[MAXN];
long long compute(long long x) {
	if(x<=2) return 1;
	long long ul=1,ur=1,dl=1,dr=1;
	long long ful=1,fur=1,fdl=1,fdr=0;
	x-=2;
	while(x!=0) {
		if(x&1) {
			long long tul=ul,tur=ur,tdl=dl,tdr=dr;
			ul=tul*ful%MOD + tur*fdl%MOD;
			ul%=MOD;
			ur=tul*fur%MOD + tur*fdr%MOD;
			ur%=MOD;
			dl=tdl*ful%MOD + tdr*fdl%MOD;
			dl%=MOD;
			dr=tdl*fur%MOD + tdr*fdr%MOD;
			dr%=MOD;
		}
		x>>=1;
		long long tul=ful,tur=fur,tdl=fdl,tdr=fdr;
		ful=tul*tul%MOD + tur*tdl%MOD;
		ful%=MOD;
		fur=tul*tur%MOD + tur*tdr%MOD;
		fur%=MOD;
		fdl=tdl*tul%MOD + tdr*tdl%MOD;
		fdl%=MOD;
		fdr=tdl*tur%MOD + tdr*tdr%MOD;
		fdr%=MOD;		
	}
	return ul;
}
int findRoot(int x) {
	if(x==dsu[x]) return x;
	return dsu[x]=findRoot(dsu[x]);
}
int main() {
	long long n,k1,k2,k3,k4;
	cin>>n>>k1>>k2>>k3>>k4;
	long long fib11=compute(k1);
	long long fib12=compute(k1+1);
	long long fib21=compute(k2);
	long long fib22=compute(k2+1);
	long long fib31=compute(k3);
	long long fib32=compute(k3+1);
	long long fib41=compute(k4);
	long long fib42=compute(k4+1);
	fibK1[0]=fib11;
	fibK1[1]=fib12;
	for(int i=2;i<=n*n;i++) {
		fibK1[i]=fibK1[i-1]+fibK1[i-2];
		if(fibK1[i]>=MOD)
			fibK1[i]-=MOD;
	}
	fibK2[0]=fib21;
	fibK2[1]=fib22;
	for(int i=2;i<=n*n;i++) {
		fibK2[i]=fibK2[i-1]+fibK2[i-2];
		if(fibK2[i]>=MOD)
			fibK2[i]-=MOD;
	}
	fibK3[0]=fib31;
	fibK3[1]=fib32;
	for(int i=2;i<=n*n;i++) {
		fibK3[i]=fibK3[i-1]+fibK3[i-2];
		if(fibK3[i]>=MOD)
			fibK3[i]-=MOD;
	}
	fibK4[0]=fib41;
	fibK4[1]=fib42;
	for(int i=2;i<=n*n;i++) {
		fibK4[i]=fibK4[i-1]+fibK4[i-2];
		if(fibK4[i]>=MOD)
			fibK4[i]-=MOD;
	}
	int c1=0;
	vector< pair<long long, pair<int,int> > > v;
	for(int i=0;i<n;i++) {
		for(int j=1;j<=n-1;j++) {
			long long temp=fibK1[c1]+fibK2[c1++];
			if(temp>=MOD) temp-=MOD;
			v.push_back(make_pair(temp,make_pair(i*n+j,i*n+j+1)));
//			cout<<i*n+j<<" "<<i*n+j+1<<endl;
		}
	}
	int c2=0;
	for(int j=1;j<=n;j++) {
		for(int i=0;i<n-1;i++) {
			long long temp=fibK3[c2]+fibK4[c2++];
			if(temp>=MOD) temp-=MOD;
			v.push_back(make_pair(temp,make_pair(i*n+j,n*(i+1)+j)));
//			cout<<i*n+j<<" "<<n*(i+1)+j<<endl;
		}
	}

	sort(v.begin(),v.end());
	for(int i=1;i<=n*n;i++) dsu[i]=i;
	int counter=0;
	long long ans=0;
	for(int i=0;i<(int)v.size();i++) {
		int v1=v[i].second.first;
		int v2=v[i].second.second;
		v1=findRoot(v1);
		v2=findRoot(v2);
		if(v1==v2) continue;
		counter++;
		ans+=1LL*v[i].first;
		if(counter==(n*n-1)) break;
		dsu[v1]=v2;

	}
	printf("%lld\n",ans);
	return 0;
}
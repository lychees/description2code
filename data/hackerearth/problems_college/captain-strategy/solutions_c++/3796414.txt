#include<stdio.h>
#include<bits/stdc++.h>
#include<iostream>
#include<vector>
#include<string.h>
#include<algorithm>
#include<deque>
#include<map>
#include<set>
#include<stdlib.h>
#include<math.h>
#include<queue>
#include<stack>
#include<functional>
using namespace std;
#define ll long long
#define si(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define sd(x) scanf("%lf",&x)
#define sc(x) scanf("%c",&x)
#define ss(x) scanf("%s",x)
#define vl vector<ll>
#define vi vector<int>
#define vvl vector< vl >
#define vvi vector< vi >
#define pb push_back
#define mod 1000000007
#define mem(x,y) memset(x,y,sizeof(x))
#define f(i,a,b) for(int i=(a);i<(b);i++)
#define max_int_value 2147483647
#define max_long_value 9223372036854775807


//qsort(ww,cc,sizeof(tp),compare);
/*int compare(const void *a,const void *b){
	ll y=((((tp*)a)->w)-(((tp*)b)->w));
	if(y>0)return 1;
	else if(y==0)return 0;
	else return -1;
}
bool way(ii x,ii y){
	return x.first<y.first or x.first==y.first and x.second<y.second;
}
*/


#define MAXN 100010
#define ls (node<<1)
#define rs ((node<<1)+1)
#define ii pair<int,int>

int N;

int L[MAXN],R[MAXN];

int BIT[MAXN];

void update(int idx,int val){
	while(idx<MAXN){
		BIT[idx]+=val;
		idx+=(idx&(-idx));
	}
}

int querymid(int idx){
	int ret=0;
	while(idx>0){
		ret+=BIT[idx];
		idx-=(idx&(-idx));
	}
	return ret;
}

int query(int x,int y){
	int ret=querymid(y)-querymid(x-1);
	return ret;
}

int skill[MAXN];

int timer=1;

vi AdjList[MAXN];

bool visited[MAXN];

void dfs(int node){
	visited[node]=true;
	L[node]=timer++;
	for(int i=0;i<AdjList[node].size();i++){
		if(!visited[AdjList[node][i]]){
			dfs(AdjList[node][i]);
		}
	}
	R[node]=timer-1;
}

int Q;

inline void ReadInput(void){
	si(N); si(Q);
	for(int i=1;i<=N;i++){
		si(skill[i]);
	}
	for(int i=1;i<N;i++){
		int a,b;
		si(a); si(b);
		AdjList[a].pb(b);
		AdjList[b].pb(a);
	}
}

inline void solve(void){
	dfs(1);
	for(int i=1;i<=N;i++){
		update(L[i],skill[i]);
	}
	while(Q--){
		char str[3];
		ss(str);
		if(str[0]=='Q'){
			int x; si(x);
			int ans=query(L[x],R[x]);
			printf("%d\n",ans );
		}else{
			int x,y;
			si(x); si(y);
			update(L[x],y-skill[x]);
			skill[x]=y;
		}
	}
}

inline void Refresh(void){

}

int main()
{
	ios_base::sync_with_stdio(false);
	ReadInput();
	solve();
    return 0;
}

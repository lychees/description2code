// geeksforgeeks
#include <stdio.h>
#include <stdlib.h>
#include <bits/stdc++.h>
using namespace std;
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

// Alphabet size (# of symbols)
#define ALPHABET_SIZE (12)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'0')

// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
bool insert(trie_t *pTrie, string key)
{
    int level;
    int length = key.size();
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;
    bool flag= false;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )//add node
        {
            pCrawl->children[index] = getNode();
            flag=true;
        }
        pCrawl = pCrawl->children[index];
    }
    if(flag==false)return true;
    else return false;
    // mark last node as leaf
    pCrawl->value = pTrie->count;
}

int main()
{


    int t,N;
    cin>>t;
    while(t--)
    {
        trie_t trie;
        initialize(&trie);
        scanf("%d",&N);
        pair< int , string> pa[N+10];
        for(int i=0;i<N;i++)
        {
            cin>>pa[i].second;
            pa[i].first= pa[i].second.size();
        }
        sort(pa,pa+N);
        bool flag=false;
        for(int i=N-1;i>=0;i--)
        {
             if(insert(&trie, pa[i].second)==true)
             {
                 flag=true; break;
             }
        }
        if(flag)
            printf("NO\n");
        else printf("YES\n");
    }
    return 0;
}

#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstdlib>
#include<queue>
#include<map>
#include<set>
#include<string>
#include<vector>
#include<cstring>
#include<stack>
#include<locale>
#include<climits>

# define PI 3.141592653589793238462643383279502884

using namespace std;

long long int A[1000001];
long long int B[1000001];
long long int C[1000001];
int main(){
	long long int T,i,j,ans,sz,x,y,a,b,start,end,sz1,sz2,in1,in2,in3,val1,val2;
	char s[1000001],c;
	scanf("%lld",&T);;
	while(T--){
		in1 = in2 = in3 = 0;
		scanf(" %[^\n]",s);
		sz = strlen(s);
		ans = 0;
		for(i=0;i<sz;i++){
			if(s[i] == 'a')
				A[in1++] = i;
			else if(s[i] == 'b')
				B[in2++] = i;
			else
				C[in3++] = i;
		}
		for(i=0;i<sz;i++){
			if(s[i] == 'a'){
				x = 1;y = 2;
			}
			else if(s[i] == 'b'){
				x = 0;y = 2;
			}
			else{
				x = 0;y = 1;
			}
			if(x == 0)
				sz1 = in1;
			else if(x == 1)
				sz1 = in2;
			else
				sz1 = in3;
			if(y == 0)
				sz2 = in1;
			else if(y == 1)
				sz2 = in2;
			else
				sz2 = in3;
			if(x == 0){
				a = lower_bound(A,A+in1,i) - A;
				val1 = A[a];
			}
			else if(x == 1){
				a = lower_bound(B,B+in2,i) - B;
				val1 = B[a];
			}
			else{
				a = lower_bound(C,C+in3,i) - C;
				val1 = C[a];
			}
			if(a == sz1){
				ans += sz-1-i+1;
				continue;
			}
			if(y == 0){
				b = lower_bound(A,A+in1,i) - A;
				val2 = A[b];
			}
			else if(y == 1){
				b = lower_bound(B,B+in2,i) - B;
				val2 = B[b];
			}
			else{
				b = lower_bound(C,C+in3,i) - C;
				val2 = C[b];
			}
			if(b == sz2){
				ans += sz-1-i+1;
				continue;
			}
			start = i;
			end = max(val1,val2)-1;
			ans += end-start+1;
		}
		printf("%lld\n",ans);
	}
	return 0;
}

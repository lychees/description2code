#include<bits/stdc++.h>
using namespace std;

#define ll long long int
#define ull unsigned long long int
#define INF INT_MAX
#define n 200000
#define MAX 600000

int N;
int arr[n];
int tree[MAX];
int lazy[MAX];

 int min1(int a,int b)
 {
     return a<b?a:b ;
 }
void build_tree(int node, int a, int b) {
  	if(a > b) return; // Out of range

  	if(a == b) { // Leaf node
    		tree[node] = arr[a]; // Init value
		return;
	}
	int mid=a+((b-a)/2);
	build_tree(node*2, a, mid); // Init left child
	build_tree(node*2+1, mid+1, b); // Init right child

	tree[node] = tree[node*2]+tree[node*2+1]; // Init root value
}

void update_tree(int node, int a, int b, int i, int j) {

  	if(lazy[node] != 0) { // This node needs to be updated
   		tree[node] = (b-a+1)- tree[node];

		if(a != b) {
			lazy[node*2] ^= 1;
			lazy[node*2+1] ^=1;
		}

   		lazy[node] ^= 1; // Reset it
  	}

	if(a > b || a > j || b < i) // Current segment is not within range [i, j]
		return;

  	if(a >= i && b <= j) { // Segment is fully within range
    		tree[node] =(b-a+1)- tree[node];

		if(a != b) { // Not leaf node
			lazy[node*2] ^= 1;
			lazy[node*2+1] ^=1;
		}
   		return;
	}
 	update_tree(node*2, a, (a+b)/2, i, j); // Updating left child
	update_tree(1+node*2, 1+(a+b)/2, b, i, j); // Updating right child

	tree[node] = tree[node*2]+tree[node*2+1]; // Updating root with max value
}


int query_tree(int node, int a, int b, int i, int j) {

	if(a > b || a > j || b < i) return 0; // Out of range

	if(lazy[node] != 0) { // This node needs to be updated
   		tree[node] = (b-a+1)-tree[node];

		if(a != b) {
			lazy[node*2] ^= 1;
			lazy[node*2+1] ^=1;
		}

   		lazy[node] ^= 1; // Reset it
  	}

	if(a >= i && b <= j) // Current segment is totally within range [i, j]
		return tree[node];

	int q1 = query_tree(node*2, a, (a+b)/2, i, j); // Query left child
	int q2 = query_tree(node*2+1, 1+(a+b)/2, b, i, j); // Query right child

	int res = q1+ q2; // Return final result
	//if(rev)
	//res = (b-a+1)-res;
	return res;
}

int main()
{
	int q;
	cin >> N >> q;
	string s;
	cin >> s;
	for(int i=0; i<N-1;i++)
	{
		if(s[i]=='>')
		  arr[i+1]=1;
        if(s[i]=='<')
          arr[i+1]=0;
	}
    build_tree(1, 1, N-1);
    int x = (int)(ceil(log2(N))); //Height of segment tree
    int max_size = 2*(int)pow(2, x) - 1;
    bool rev=true;
    for(int i=1;i<=q;i++)
    {
   	   int a,b,c;
       scanf("%d%d%d",&a,&b,&c);
	   if(a==1)
       {
           update_tree(1,1,N-1,b,c-1);
       }
       else
       {
       	   if(b > c)
       	   {
       	   	  swap(b,c);
       	   	  rev=false;
       	   }
           x=query_tree(1,1,N-1,b,c-1);
           if(rev)
               x=(c-b)-x;
		   rev=true;
           printf("%d\n",x);
       }
    }
    return 0;
}

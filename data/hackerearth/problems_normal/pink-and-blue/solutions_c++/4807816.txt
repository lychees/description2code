#include<bits/stdc++.h>
#include <iostream>
using namespace std;

#define lol int
#define max 100000

class Graph{
	lol V;
	list<lol> *adj;
	bool *visited;
	bool *gender;
	void DFSUtil(lol s,bool color,lol &count);
	public:
	   Graph(lol V);
	   void addEdge(lol s,lol tar);
       lol DFS(lol s);
};

Graph::Graph(lol V)
{
	this->V=V;
	adj=new list<lol>[V];
	visited=new bool[V];
	gender=new bool[V];
	for(lol i=0;i<V;i++)visited[i]=false;
	for(lol i=1;i<V;i++){
		char elem[2];
		cin>>elem;
		if(elem[0]=='B')gender[i]=true;    //Male
		else gender[i]=false;            //female
	}
}
void Graph::addEdge(lol s,lol tar)
{
	adj[s].push_back(tar);
	adj[tar].push_back(s);
}
void Graph::DFSUtil(lol s,bool color,lol &count)
{
	if(color==gender[s])count++; //Inversion
	visited[s]=true;
	list<lol>::iterator i;
	
	for(i=adj[s].begin();i!=adj[s].end();i++)
	{
		if(!visited[*i])DFSUtil(*i,!color,count);
	}
}
lol Graph::DFS(lol s)
{
	lol count=0;
	if(!visited[s]){
		DFSUtil(s,true,count);
	    count=(V-1-count)<count?(V-1-count):count;
	}
	return count;
	
}
int main()
{
    lol n,m,i;
    cin>>n>>m;
    Graph g(n+1);
    lol elem1,elem2;
    for(i=0;i<m;i++)
    {
    	cin>>elem1>>elem2;
    	g.addEdge(elem1,elem2);
    }
    lol ans=0;
    for(i=1;i<=n;i++)
    {
    	ans+=(g.DFS(i));
    }
    cout<<ans<<'\n';
    return 0;
}

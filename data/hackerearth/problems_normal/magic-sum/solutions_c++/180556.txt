#include <iostream>
#include <limits>
using namespace std;

/*
template<typename T>
inline T max(T a, T b)
{
    if(a > b)   return a;
    return b;
}
*/

long long int maxpath(int tree[], int start, int s)
{
	if ((start*2 + 1) >= s)
		return tree[start];

	long long int pathleft = tree[start] + maxpath(tree, 2*start + 1, s);
	long long int pathrite = tree[start] + maxpath(tree, 2*start + 2, s);
	return max(pathleft, pathrite);
}

long long int maxlen(int tree[], int start, int s)
{
	if ((start*2 + 1) >= s)
		return tree[start];

	long long int maxleft = maxlen(tree, 2*start + 1, s);
	long long int maxrite = maxlen(tree, 2*start + 2, s);
	long long int maxroot = tree[start] + maxpath(tree, 2*start + 1, s) + maxpath(tree, 2*start + 2, s);
	//cout << tree[start] << ": " << maxleft << ", " << maxrite << ", " <<maxroot << "\n";
	return max(maxleft, max(maxrite, maxroot));
}

long long int maxlength(int tree[], int n)
{
	return maxlen(tree, 0, n);
}

int main()
{
    int t;
    cin >> t;
    while(t--)
    {
    	int n;
    	cin >> n;
    	int *tree = new int [n];
    	for(int i=0; i<n; i++)	cin >> tree[i];
    	cout << maxlength(tree, n) << "\n";
    }
    return 0;
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <queue>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <fstream>
#include <stdio.h>
#include <complex>

using namespace std;

//conversion
//------------------------------------------
inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}
template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}

//typedef
//------------------------------------------
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;
typedef pair<int, PII> TIII;
typedef long long LL;
typedef vector<LL> VLL;

//container util

//------------------------------------------
#define ALL(a)  (a).begin(),(a).end()
#define RALL(a) (a).rbegin(), (a).rend()
#define PB push_back
#define MP make_pair
#define SZ(a) int((a).size())
#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)
#define EXIST(s,e) ((s).find(e)!=(s).end())
#define SORT(c) sort((c).begin(),(c).end())
#define MT(a,b,c) MP(a, MP(b, c))

//repetition
//------------------------------------------
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define REP(i,n)  FOR(i,0,n)
#define MOD 1000000007

LL fact[2000002];

LL mod_inverse(LL a){
	int p=MOD-2;
	LL tmp = a;
	LL ans = 1;
	while(p){
		if(p%2){
			ans*=tmp;
			ans%=MOD;
		}
		p>>=1;
		tmp*=tmp;
		tmp%=MOD;
	}
	return ans;
}


int main(){
	fact[0]=1;
	FOR(i,1,2000001)fact[i]=(fact[i-1]*i)%MOD;
	int T;
	cin>>T;
	REP(t,T){
		int m,n;
		scanf("%d%d", &m, &n);
		LL ans=fact[m+n-2];
		ans*=mod_inverse(fact[m-1]);
		ans%=MOD;
		ans*=mod_inverse(fact[n-1]);
		ans%=MOD;
		printf("%lld\n", ans);
	}
	return 0;
}
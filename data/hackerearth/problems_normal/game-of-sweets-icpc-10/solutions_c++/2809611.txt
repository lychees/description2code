#include<iostream>
#include<algorithm>
#include<complex>
#include<vector>
#define MAXN 100005
using namespace std;
typedef complex<double> base;
const double PI = acos(-1.0);
 
int rev[MAXN];
typedef complex<double> base;
 
void fft (vector<base> & a, bool invert) {
	int n = (int) a.size();
 
	for (int i=1, j=0; i<n; ++i) {
		int bit = n >> 1;
		for (; j>=bit; bit>>=1)
			j -= bit;
		j += bit;
		if (i < j)
			swap (a[i], a[j]);
	}
 
	for (int len=2; len<=n; len<<=1) {
		double ang = 2*PI/len * (invert ? -1 : 1);
		base wlen (cos(ang), sin(ang));
		for (int i=0; i<n; i+=len) {
			base w (1);
			for (int j=0; j<len/2; ++j) {
				base u = a[i+j],  v = a[i+j+len/2] * w;
				a[i+j] = u + v;
				a[i+j+len/2] = u - v;
				w *= wlen;
			}
		}
	}
	if (invert)
		for (int i=0; i<n; ++i)
			a[i] /= n;
}
 
void multiply (const vector<int> & a, const vector<int> & b, vector<int> & res) {
	vector<base> fa (a.begin(), a.end()),  fb (b.begin(), b.end());
	size_t n = 1;
	while (n < max (a.size(), b.size()))  n <<= 1;
	n <<= 1;
	fa.resize (n),  fb.resize (n);
 
	fft (fa, false),  fft (fb, false);
	for (size_t i=0; i<n; ++i)
		fa[i] *= fb[i];
	fft (fa, true);
 
	res.resize (n);
	for (size_t i=0; i<n; ++i)
		res[i] = int (fa[i].real() + 0.5);
}
 
int main()
{
     int n;
     cin>>n;
     
     vector<int> a,b,c,res;
     a.resize(MAXN);
     b.resize(MAXN);
     c.resize(n);
     
     for(int i=0;i<=n;i++){
     cin>>c[i];
     }
     
     sort(c.rbegin(),c.rend());
     int ans=0;
     for(int i=0;i<n;i++)
     {
     	if(a[c[i]])
     	ans=1;
     	
        a[c[i]]=1;
        b[c[0]-c[i]]=1;
     }
 
     multiply(a,b,res);
     
     for(int i=c[0]+1;i<res.size();i++)
     { 
      if(res[i])
      ans++;
     }
     cout<<ans<<endl;

     return 0;
}
#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> ii;

const int LIM = 2e5 + 2;

vector<int> cur, A;
int MAP[LIM], hh[LIM];

void push(int val){
    while(cur.size() and cur.back() > val) cur.pop_back();
    cur.push_back(val);
}

void print(){
    
    for(int i = 0; i < cur.size(); i++) cout << cur[i] << " ";
    cout << endl;
}

int main(){

    int test;
    scanf("%d", &test);

    while(test--){

    	cur.clear(), A.clear();
        int N, K;
        scanf("%d %d", &N, &K);

        int a;

        for(int i = 1; i<= N; i++) hh[i] = 1e9;

        for(int i = 0; i < N; i++){
            scanf("%d", &a);
        	A.push_back(a);
            MAP[A[i]] = i;
        } 

        cur.clear();
        
        for(int idx = K; idx < N; idx++){

            push(A[idx - K]);

            vector<int> :: iterator it = lower_bound(cur.begin(), cur.end(), A[idx]);

            if(it != cur.begin()){
                it--;
                hh[A[idx]] = idx - MAP[*it];
            }

        }


        reverse(A.begin(), A.end());
        for(int i = 0; i < N; i++) MAP[A[i]] = i;

        cur.clear();
        
        for(int idx = K; idx < N; idx++){

            push(A[idx - K]);

            vector<int> :: iterator it = lower_bound(cur.begin(), cur.end(), A[idx]);
            if(it != cur.begin()){
                it--;
                hh[A[idx]] = min(hh[A[idx]], idx - MAP[*it]);
            }

        }


        long long ans = 0;
        for(int idx = 1; idx <= N; idx++) if(hh[idx] != 1e9) ans += hh[idx];


        printf("%lld\n", ans);

    }

    return 0;
}

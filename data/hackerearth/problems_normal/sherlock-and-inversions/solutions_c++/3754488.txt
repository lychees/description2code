#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define pp pair<ll,pair<ll,ll> >
ll arr[10000000],M,bit[1000000],n,bit2[1000000];
     pair<ll,pair<ll,ll> > qrr[1000000];
     bool comp(pp p1,pp p2)
     {
          if(p1.first/M<p2.first/M)
          return 1;
          if(p1.first/M==p2.first/M&&p1.second.first<p2.second.first)
          return 1;
          return 0;
     }
void update(ll i,ll diff)
{
     i++;
     while(i<=n+1)
     {
          bit[i]+=diff;
          i+=(i&(-i));
     }
}
ll query(ll i)
{
     i++;
     ll count=0;
     while(i>0)
     {
          count+=bit[i];
          i-=i&(-i);
     }return count;
}
void update2(ll i,ll diff)
{
     i++;
     while(i<=n+1)
     {
          bit2[i]+=diff;
          i+=(i&(-i));
     }
}
ll query2(ll i)
{
     i++;
     ll count=0;
     while(i>0)
     {
          count+=bit2[i];
          i-=i&(-i);
     }return count;
}
 ll q;
     set<ll> myset;
     set<ll>::iterator itr;
     map<ll,ll> mp,ansmap;
int main()
{
   
     scanf("%lld%lld",&n,&q);
     M=sqrt(n);
     for(ll i=0;i<n;i++)
     {   
          scanf("%lld",&arr[i]);
     myset.insert(arr[i]);
     }
     ll i=1;
     for(itr=myset.begin();itr!=myset.end();itr++)
     {
          mp[*itr]=i++;
     }
     for(ll i=0;i<n;i++)
     arr[i]=mp[arr[i]];
     ll l=0,r=-1;
     for(ll i=0;i<q;i++)
     {scanf("%lld%lld",&qrr[i].first,&qrr[i].second.first);qrr[i].second.second=i;}
    sort(qrr,qrr+q,comp);
   ll ans=0;
     for(ll i=0;i<q;i++)
     {
          pp p=qrr[i];
          p.first--;p.second.first--;
          while(r<p.second.first)
          {
               r++;
               update(arr[r],1);
               ans+=r-l+1-query(arr[r]);
          }
          while(r>p.second.first)
          {
               ans-=r-l+1-query(arr[r]);
               update(arr[r],-1);
               r--;
          }ll l2=l;
          while(l<p.first)
          {
               update2(arr[l],1);
               ans-=query(arr[l]-1);
               update(arr[l],-1);
               l++;
          }
          ll l3=l;
          while(l3>l2)
          {
               l3--;
               update2(arr[l3],-1);
          }
          while(l>p.first)
          {
               
               l--;
               // update2(arr[l],1);
               ans+=query(arr[l]-1);
              // cout<<query(arr[l])<<"\n";
               update(arr[l],1);
          }
         ansmap[p.second.second]=ans;
     }
     for(ll i=0;i<q;i++)
     {
          printf("%lld\n",ansmap[i]);
     }
}
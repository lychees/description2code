
#include <bits/stdc++.h>

#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)
#define EACH(it,a) for(__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)

#define DEBUG(x) { cout << #x << " = "; cout << (x) << endl; }
#define PR(a,n) { cout << #a << " = "; FOR(_,1,n) cout << a[_] << ' '; cout << endl; }
#define PR0(a,n) { cout << #a << " = "; REP(_,n) cout << a[_] << ' '; cout << endl; }

#define sqr(x) ((x) * (x))
#define ll long long
using namespace std;

const int MN = 200111;
const ll MOD = 1e9 + 7;

int n;

struct Node {
    ll sum2, sum, add;
} it[MN * 8];

void apply(int i, int l, int r, ll times) {
    ll k = r - l + 1;

    it[i].sum2 = (it[i].sum2
            + it[i].sum * times * 2
            + times * (times-1) * k
            + k * times) % MOD;
    it[i].sum = (it[i].sum + k * times) % MOD;
    it[i].add = (it[i].add + times) % MOD;
}

void down(int i, int l, int r, int mid) {
    if (it[i].add) {
        apply(i<<1, l, mid, it[i].add);
        apply(i<<1|1, mid+1, r, it[i].add);
        it[i].add = 0;
    }
}

void refine(int i) {
    it[i].sum = (it[i<<1].sum + it[i<<1|1].sum) % MOD;
    it[i].sum2 = (it[i<<1].sum2 + it[i<<1|1].sum2) % MOD;
}

void update(int i, int l, int r, int u, int v) {
    if (v < l || r < u) return ;
    if (u <= l && r <= v) {
        apply(i, l, r, 1);
        return ;
    }
    int mid = (l + r) >> 1;
    down(i, l, r, mid);
    update(i<<1, l, mid, u, v);
    update(i<<1|1, mid+1, r, u, v);
    refine(i);
}

int main() {
    ios :: sync_with_stdio(false);
    while (cin >> n) {
        memset(it, 0, sizeof it);

        map<int,int> last;
        long long res = 0;
        FOR(i,1,n) {
            int a; cin >> a;
            int u = (last.count(a)) ? last[a] : 0;
            last[a] = i;

            update(1, 1, n, u+1, i);
            res = (res + it[1].sum2) % MOD;
        }
        cout << res << endl;
    }
}


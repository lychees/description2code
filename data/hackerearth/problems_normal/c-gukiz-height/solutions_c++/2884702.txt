#include <bits/stdc++.h>

using namespace std;
#define MP make_pair
#define PB push_back
#define LL long long
#define int LL
#define st first
#define nd second
#define FI st
#define SE nd
#define FOR(i,a,b) for(int i = (a); i <= (b); i++)
#define RE(i,n) FOR(i,1,n)
#define R(i,n) FOR(i,0,(int)(n)-1)
#define REP(i,n) R(i,n)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PII pair<int,int>
#define VI vector<int>
template<class C> void mini(C&a4, C b4){a4=min(a4,b4);}
template<class C> void maxi(C&a4, C b4){a4=max(a4,b4);}

template<class TH> void _dbg(const char *sdbg, TH h){cerr<<sdbg<<"="<<h<<"\n";}
template<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a){
  while(*sdbg!=',')cerr<<*sdbg++;cerr<<"="<<h;_dbg(sdbg+1,a...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(C) {for(auto&c:C)cerr<<c<<",";cerr<<endl;}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(C) {}
#define cerr if(0)cout
#endif

const int MaxN = 100005;
int N, H;
int tab[MaxN];
LL sum = 0;
LL maxPref = 0;
LL maxPos = 0;

void process(int L, int R){
  LL curHeight = sum * (L / N);
  for(int i = 0; i < L%N; i++) curHeight += tab[i];
  int pos = L;
  while(pos <= R){
    LL paraHeight = (LL)H - (LL)pos*(pos+1)/2;
    //debug(curHeight, paraHeight);
    if(paraHeight <= curHeight){
      cout << pos << endl;
      exit(0);
    }    
    curHeight += tab[pos % N];
    pos++;
  }
}

#undef int
int main(){
#define int LL
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout<<fixed<<setprecision(10);
  
  cin >> N >> H;
 
  for(int i = 0; i < N; i++){
    cin >> tab[i];
    sum += tab[i];
    if(maxPref > sum){ maxPref = sum; maxPos = i; }
  }
  
  process(0, 4*N + 3*(LL)round(sqrt(H)));
  
  LL startPos = 0;
  if(sum < 0){
    LL left = 0, right = 3e9;
    while(left < right){
      LL mid = (left+right)/2;
      
      LL numParts = (mid+N-1)/N;
      LL lineY = maxPref + (LL)sum*numParts;
      LL parabolaY = H - mid*(mid+1)/2;
      debug(mid, lineY, parabolaY);
      
      if(lineY < parabolaY){
        left = mid+1;
      } else {
        right = mid;
      }
      
    }
    startPos = max(0LL, left-3*N-(LL)round(sqrt(H)));
  }
  
  LL endPos = startPos + 6*N + 3*(LL)round(sqrt(H));
  debug(startPos, endPos);
  
  process(startPos, endPos);
  assert(false);
  
  return 0; 
}
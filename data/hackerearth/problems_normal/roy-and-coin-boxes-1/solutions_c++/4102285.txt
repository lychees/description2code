#include<bits/stdc++.h>
using namespace std;
#define fr1(i,n) for(int i=1;i<=n;i++)
#define ll long long
#define pii pair<int,int>
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define MOD 1000000007
#define MAX 10000002
#define INF 1000005
int arr[INF];
int tree[4*INF];
int lazy[4*INF];

void updtrng(int i,int st,int en,int l,int r,int val){
	if(lazy[i]){
		tree[i]+=(en-st+1)*lazy[i];
		if(st!=en){
			lazy[2*i]+=lazy[i];
			lazy[2*i+1]+=lazy[i];
		}
		lazy[i]=0;
	}
	if(st>r||en<l){
		return;
	}
	if(st>=l&&en<=r){
		tree[i]+=(en-st+1)*val;
		if(st!=en){
			lazy[2*i]+=val;
			lazy[2*i+1]+=val;
		}
		return;
	}
	int mid=(st+en)/2;
	updtrng(2*i,st,mid,l,r,val);
	updtrng(2*i+1,mid+1,en,l,r,val);
	tree[i]=tree[2*i]+tree[2*i+1];
}
int query(int i,int st,int en,int l,int r){

	if(r<st||l>en){
		return 0;
	}
	if(l<=st&&en<=r){
		return tree[i];
	}
	int mid=(st+en)/2;
	int l1=query(2*i,st,mid,l,r);
	int r1=query(2*i+1,mid+1,en,l,r);
	return l1+r1;
}

int main(){
	int n,m;
	cin>>n>>m;
	int l,r;
	while(m--){
		cin>>l>>r;
		arr[l]++;
		arr[r+1]--;
	}
	int  sum=0;
	fr1(i,n){
		sum+=arr[i];
		updtrng(1,1,n,sum,sum,1);
	}	
	int q;
	cin>>q;
	int x;
	while(q--){
		cin>>x;
		cout<<query(1,1,n,x,n)<<endl;
	}

}	
#include <iostream>
#include <cstdio>
#include <string>
#include <sstream> 
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <ctime>
#include <cassert>
using namespace std;
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define vi vector<int>
#define vpii vector<pii>
#define SZ(x) ((int)(x.size()))
#define fi first
#define se second
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define IN(x,y) ((y).find((x))!=(y).end())
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define DBG cerr << "debug here" << endl;
#define DBGV(vari) cerr << #vari<< " = "<< (vari) <<endl;
typedef long long ll;
const int INF = 1e9;
const int T = 10;
const ll M = 1e18;
const int N1 = 60;
const int N2 = 15;
const ll MAXC = 1e17;
ll a[N1], b[N1];
int main()
{
    ios_base::sync_with_stdio(0);
    int t;
    cin >> t;
    assert(t >= 1 && t <= T);
    while(t--)
    {
        ll m;
        int n1, n2;
        cin >> m >> n1 >> n2;
        assert(m >= 1 && m <= M);
        assert(n1 >= 1 && n1 <= N1);
        assert(n2 >= 1 && n2 <= N2);
        //reading amulus bottles
        FOR(i, n1)
        {
            cin >> a[i];
            assert(a[i] >= 1 && a[i] <= MAXC);
        }
        sort(a, a + n1);
        REP(i, 1, n1 - 1)
        {
            assert(2 * a[i - 1] <= a[i]);
        }
        //reading other bottles
        FOR(i, n2)
        {
            cin >> b[i];
            assert(b[i] >= 1 && b[i] <= MAXC);
        }
        //iterating over subsets of other bottles
        bool solved = 0;
        vector<ll> best_res;
        ll best_sum = -1;
        for(int bitmask = 0; bitmask < (1 << n2); ++bitmask)
        {
            ll s = 0;
            FOR(i, n2)
            {
                if(bitmask & (1 << i)) s += b[i];
            }
            //checking if amulus water bottles has knapsack of m - s
            ll total = m - s;
            vector<ll> res;
            REPD(i, n1 - 1, 0)
            {
                if(a[i] <= total)
                {
                    //a[i] has to be in the result
                    res.pb(a[i]);
                    total -= a[i];
                    if(total == 0) break;
                }
                else
                {
                    //do nothing
                }
            }
            if(total == 0)
            {
                ll cur_sum = m - s;
                if(cur_sum > best_sum)
                {
                    best_sum = cur_sum;
                    best_res = res;
                    solved = 1;
                }
            }
        }
        if(!solved) cout << "NO" << endl;
        else 
        {
            cout << "YES" << endl;
            sort(ALL(best_res));
            FOR(i, best_res.size()) cout << best_res[i] << " ";
            cout << endl;
        }
    }
    return 0;
}
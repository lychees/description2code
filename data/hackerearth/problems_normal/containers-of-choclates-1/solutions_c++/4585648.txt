#include <algorithm>
#include <cstdio>
#include <iostream>
#include <vector>
#include <map>
#include <cstring>
#include <string>
#include <set>
#include <cmath>
#include <memory>
#include <functional>
#include <numeric>
#include <queue>
#include <sstream>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const ull MOD = 1000000007;

#define READINT(X) int X; cin >> X;
#define FSREADINT(X) int X; fs(X);

void fs(int &x)
{
	bool neg = false;
	register int c;
	x = 0;
	c = getchar();
	if (c == '-')
	{
		neg = true;
		c = getchar();
	}
	for (;(c>47 && c<58);c = getchar())
		x = (x << 1) + (x << 3) + c - 48;
	if (neg)
		x *= -1;
}

int main()
{
	FSREADINT(t);
	for (int c = 1; c <= t; ++c) {
		set<int> nodes[20007];
		bool visited[20007] = {true};
		bool available[20007] = {false};

		FSREADINT(n);
		while (n--) {
			FSREADINT(a);
			FSREADINT(b);
			nodes[a].insert(b);
			nodes[b].insert(a);
			available[a] = true;
			available[b] = true;
			visited[a] = false;
			visited[b] = false;
		}

		int lvl[2] = { 0 };
		int sum = 0;
		for (int i = 1; i < 20005; ++i) {
			if (available[i] && !visited[i]) {
				queue<pair<int, int>> q;
				q.push(make_pair(i, 0));
				visited[i] = true;
				++lvl[0];

				while (!q.empty()) {
					int x = q.front().first;
					int ch = q.front().second;
					q.pop();

					for (int node : nodes[x]) {
						if (!visited[node]) {
							q.push(make_pair(node, (ch + 1) % 2));
							visited[node] = true;
							++lvl[(ch + 1) % 2];
						}
					}
				}
				sum += max(lvl[0], lvl[1]);
				lvl[0] = 0;
				lvl[1] = 0;
			}
		}
		cout << "Case " << c << ": " << sum << endl;
		for (int i = 0; i < 20005; ++i) nodes[i].clear();
	}
	return 0;
}

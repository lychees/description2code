#include "bits/stdc++.h"
using namespace std;
const int mod = 1e9 + 7;
const long long N = 1e18;
int q;
long long lastans = 0;
int type;
int t2;
long long x , y , l , r;
long long result;
struct node{
	long long val;
	bool lazy;
	node* left;
	node* right;
	node(){
		val = 0LL;
		lazy = 0LL;
		left = NULL;
		right = NULL;
	}
	void push(long long l , long long r){
		if(lazy){
			val = r - l + 1 - val;
			if(l != r){
				if(!left){
					left = new node();
				}
				left -> lazy ^= 1;
				if(!right){
					right = new node();
				}
				right -> lazy ^= 1;
			}
			lazy = 0;
		}
	}
	node* update(long long l , long long r , long long ql , long long qr){
		push(l , r);
		if(l > qr || r < ql){
			return this;
		}
		if(l >= ql && r <= qr){
			lazy = 1;
			push(l , r);
			return this;
		}
		long long mid = l + r >> 1;
		if(!left){
			left = new node();
		}
		if(!right){
			right = new node();
		}
		left = left -> update(l , mid , ql , qr);
		right = right -> update(mid + 1 , r , ql , qr);
		val = left -> val + right -> val;
		return this;
	}
	node* query(long long l , long long r , long long ql , long long qr){
		push(l , r);
		if(l > qr || r < ql || ((val == 0LL) && (!lazy))){
			return this;
		}
		if(l >= ql && r <= qr){
			result += val;
			return this;
		}
		long long mid = l + r >> 1;
		if(left){
			left = left -> query(l , mid , ql , qr);
		}
		if(right){
			right = right -> query(mid + 1 , r , ql , qr);
		}
		val = (left ? left -> val : 0) + (right ? right -> val : 0);
		return this;
	}
};
node* root1 = new node();
node* root2 = new node();
long long solve(long long l , long long r , long long x , long long y){
	result = 0;
	root1 = root1 -> query(1 , N , l , r);
	long long roddcnt = result;
	long long revencnt = r - l + 1 - roddcnt;
	result = 0;
	root2 = root2 -> query(1 , N , x , y);
	long long coddcnt = result;
	long long cevencnt = y - x + 1 - coddcnt;
	roddcnt %= mod;
	revencnt %= mod;
	coddcnt %= mod;
	cevencnt %= mod;
	return (roddcnt * cevencnt + revencnt * coddcnt) % mod;
}
int main(){
	scanf("%d" , &q);
	while(q--){
		scanf("%d" , &type);
		if(type & 1){
			scanf("%d %lld %lld" , &t2 , &l , &r);
			l ^= lastans;
			r ^= lastans;
			assert(l <= r);
			if(t2){
				root2 = root2 -> update(1 , N , l , r);
			}
			else{
				root1 = root1 -> update(1 , N , l , r);
			}
		}
		else{
			scanf("%lld %lld %lld %lld" , &l , &r , &x , &y);
			x ^= lastans;
			y ^= lastans;
			l ^= lastans;
			r ^= lastans;
			assert(l <= r);
			assert(x <= y);
			lastans = solve(l , r , x , y);
			printf("%lld\n" , lastans);
		}
	}
}
#include <iostream>
#include <list>
#include <algorithm>
#include <cstring>
#define endl '\n'
using namespace std;

class graph
{
    int v;
    list<int> *adj;
    public:
    char *gender;
    bool* visited;
    graph(int);
    void addedge(int,int);
    int bip(bool*,int);
};
int flag=1;
graph::graph(int v)
{
    this->v=v;
    adj=new list<int>[v];
    gender=new char[v];
    visited=new bool[v];
}
void graph::addedge(int a,int b)
{
    adj[a].push_back(b);
    adj[b].push_back(a);
}
int graph::bip(bool* color,int i)      //only the explore function since its connected
{
    int rev=0;
    visited[i]=true;
    if((gender[i]=='B' && color[i]==false) || (gender[i]=='G' && color[i]==true))
        rev=1;
    list<int>::iterator it;
    for(it=adj[i].begin();it!=adj[i].end();it++)
    {
        if(!visited[*it])
        {
            color[*it] = !color[i];
            rev=rev+bip(color,*it);
        }
    }
    return rev;
    
}
int main() 
{
    ios_base::sync_with_stdio(false);
    int i,v,e,m,n,inv;
    cin>>v>>e;
    graph g(v);
    bool color[v];
    color[0]=true;
    for(i=0;i<v;i++)
    {
        cin>>g.gender[i];
        g.visited[i]=false;
    }    
        
    for(i=0;i<e;i++)
    {
        cin>>m>>n;
        g.addedge(m-1,n-1);
    }
    inv=g.bip(color,0);
    cout<<min(inv,v-inv)<<endl;
	return 0;
}

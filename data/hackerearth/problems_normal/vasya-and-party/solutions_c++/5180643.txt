#include<bits/stdc++.h>
using namespace std;
const int N = 1000005;
int arr[N];
const int mod = 1000000007;
struct node
{
	int r,p,k,cnt;
}tree[N];
void init(int n)
{
	for(int i=1;i<=n;i++)
	{
		tree[i].r = 0;
		tree[i].p = i;
		tree[i].k = arr[i];
		tree[i].cnt = 1;
	}
}
int findi(int x)
{
	if(x!=tree[x].p)
	{
		return tree[x].p = findi(tree[x].p);
	}
	return x;
}
void merge_set(int x,int y)
{
	if(findi(x)!=findi(y))
	{
		int u = findi(x);
		int v = findi(y);
		if(tree[u].r>tree[v].r)
		{
			tree[v].p = u;
			if(tree[u].k==tree[v].k){
				tree[u].cnt+=tree[v].cnt;
				tree[v].cnt = 1;
			}
			else if(tree[u].k<tree[v].k)
			{
				tree[u].k = tree[v].k;
				tree[u].cnt = tree[v].cnt;
				tree[v].cnt = 1;
			}
			else if(tree[u].k>tree[v].k)
			{
				tree[v].cnt = 1;
			}
		}
		else{
			tree[u].p = v;
			if(tree[u].k==tree[v].k){
				tree[v].cnt+=tree[u].cnt;
				tree[u].cnt = 1;
			}
			else if(tree[v].k<tree[u].k)
				{
					tree[v].k = tree[u].k;
					tree[v].cnt = tree[u].cnt;
					tree[u].cnt = 1;
				}
			else if(tree[v].k>tree[u].k)
			{
				tree[u].cnt = 1;
			}
				if(tree[u].r==tree[v].r)
					tree[v].r++;
		}
	}
}
int main()
{
	int n,m,x,y;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
		scanf("%d",&arr[i]);
	init(n);
	for(int i=0;i<m;i++)
	{
		scanf("%d%d",&x,&y);
		merge_set(x,y);
	}
	long long ans =1;
	for(int i=1;i<=n;i++)
	{
		ans *= (tree[i].cnt)%mod;
		ans %= mod;
	}
	printf("%lld\n",ans);
	return 0;
}

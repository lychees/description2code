//! Bismillahi-Rahamanirahim.
/** ========================================**
 ** @Author: A Asif Khan Chowdhury
/** ========================================**/


/**................ Headers ................**/
#include <bits/stdc++.h>

using namespace std;

/**................ Macros ................**/
#define Set(N, j) (N|(1<<j))
#define reset(N, j) (N&~(1<<j))
#define Check(N, j) (bool)(N&(1<<j))
#define toggle(N, j) (N^(1<<j))
#define turnOff(N, j) (N & ~(1<<j))
#define CLEAR(A, x) ( memset(A,x,sizeof(A)) )
#define pii pair <int, int>
#define piii pair<int,pii>
#define pb push_back
#define open freopen("D:/a.txt", "r", stdin);
#define write freopen("D:/b.txt","w", stdout);
#define inf (1<<28)
#define ll long long
#define mod 1000000007
#define gc getchar
#define debug_array(a,n) for(int i=0;i<n;i++) cout<<a[i].in<<" "; cout<<endl;
#define ls(n) (n<<1)
#define rs(n) ls(n)|1
#define MID(a,b) ((a+b)>>1)
#define mx 100010

//Fast Reader
template<class T>inline bool read(T &x) {
    int c=getchar();
    int sgn=1;
    while(~c&&c<'0'||c>'9') {
        if(c=='-')sgn=-1;
        c=getchar();
    }
    for(x=0; ~c&&'0'<=c&&c<='9'; c=getchar())x=x*10+c-'0';
    x*=sgn;
    return ~c;
}
int X[]= {-1, -1, -1, 0, 1, 1, 1, 0};   //x 8 direction
int Y[]= {-1, 0, +1, 1, 1, 0, -1, -1};  //y 8 direction
// int X[]= {-1, 0, 1, 0};   //x 4 direction
// int Y[]= { 0, 1, 0, -1};  //y 4 direction

int parent[mx], Rank[mx], node, edge;
ll total;
vector< piii > graph;

bool compareMin(pair< int, pii > a, pair< int, pii > b) {
    return a.first < b.first;
}
int findset(int x) {
    return (parent[x]==x)? x : (parent[x]= findset(parent[x]));

}

void link (int x, int y) {
    if (Rank[x] > Rank[y])
        parent[y] = x;
    else
        parent[x] = y;
    if (Rank[x] == Rank[y])
        Rank[y] = Rank[y] + 1;
}

void unionSet(int i, int j) {
    parent[findset(i)] = findset(j);
}

bool isSameSet (int i, int j) {
    return findset(i) == findset(j);
}

void kruskal() {
    total=0;
    stable_sort (graph.begin(), graph.end(), compareMin);
    for (int i=0; i<graph.size(); i++) {
        if (!isSameSet(graph[i].second.first, graph[i].second.second)) {
            total += graph[i].first;
            unionSet(graph[i].second.first, graph[i].second.second);
        }
    }
}

int main() {
#ifdef LOCAL
    open
    double st=clock(),en;
#endif // LOCAL
    // Can you solve it by brute force?
    // LDC
    // Are you sure you want to code so soon?? -_-
    // Simplify your code a little more. :)

    read(node);read(edge);
    for(int i=0;i<=node;i++)parent[i]=i;

    while(edge--){
        int u,v,w;
        read(u);read(v);read(w);
        graph.pb(piii(w,pii(u,v)));
        graph.pb(piii(w,pii(v,u)));
    }
    kruskal();
    printf("%lld\n",total);

#ifdef LOCAL
    en=clock();
    cout<<"Time: ";
    cerr<<(double)(en-st)/CLOCKS_PER_SEC<<endl;
#endif // LOCAL
    return 0;
}





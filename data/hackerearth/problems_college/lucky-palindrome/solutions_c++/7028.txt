#include<iostream>
#include<stdio.h>
#include<string.h>
using namespace std;
string preProcess(string s) {
  int n = s.length();
  if (n == 0) return "^$";
  string ret = "^";
  for (int i = 0; i < n; i++)
    ret += "#" + s.substr(i, 1);
 
  ret += "#$";
  return ret;
}
 
int longestPalindrome(string s) {
  string T = preProcess(s);
  int n = T.length();
  int *P = new int[n];
  int C = 0, R = 0;
  for (int i = 1; i < n-1; i++) {
    int i_mirror = 2*C-i; // equals to i' = C - (i-C)
     
    P[i] = (R > i) ? min(R-i, P[i_mirror]) : 0;
     
    // Attempt to expand palindrome centered at i
    while (T[i + 1 + P[i]] == T[i - 1 - P[i]])
      P[i]++;
 
    // If palindrome centered at i expand past R,
    // adjust center based on expanded palindrome.
    if (i + P[i] > R) {
      C = i;
      R = i + P[i];
    }
  }
 
  // Find the maximum element in P.
  int maxLen = 0;
  int centerIndex = 0;
  for (int i = 1; i < n-1; i++) {
    if (P[i] > maxLen) {
      maxLen = P[i];
      centerIndex = i;
    }
  }
  delete[] P;
   return maxLen;
//  return s.substr((centerIndex - 1 - maxLen)/2, maxLen);
}
int main()
{
        int pr[1100]={0},i,j;
    pr[0]=pr[1]=1;
    for(i=2;i*i<=1000;i++)
    if(!pr[i])
    for(j=i+i;j<=1000;j+=i)
    pr[j]=1;
    int t;
    scanf("%d",&t);
    while(t--)
    {
    string a;
    cin>>a;
    int ans=longestPalindrome(a);
//    printf("%d",ans);
    if(pr[ans]==0)
    printf("YES\n");
    else
    printf("NO\n");
}
    return 0;
}

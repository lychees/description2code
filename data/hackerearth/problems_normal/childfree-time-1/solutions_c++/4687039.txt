#include <iostream>
#include <vector>
#include <utility>
#include <cmath>
#include <algorithm>
#define MAX 1000001

using namespace std;

int R;
int P;
bool vis[MAX];
long long ans = 0;

vector < pair<int, int> > adj[MAX];
vector < pair<int, int> > r_adj[MAX];

vector < int > r_topo_ord;
long long dp[MAX];

long long max1(long long a, long long b)
{
    return (a<b)?b:a;
}

void dfs(int s)
{

	vis[s] = true;
	for(int i=0; i< (int)adj[s].size(); i++)
	{
		if(!vis[adj[s][i].first])
		{
			dfs(adj[s][i].first);
		}

	}

	r_topo_ord.push_back(s);

}

int main() {

	int r1, r2, t;
	cin >> R >> P;

	for(int i=1; i<= P; i++)
	{
		cin >> r1 >> r2 >> t;
		adj[r1].push_back(make_pair(r2,t));
		r_adj[r2].push_back(make_pair(r1,t));

	}

	ans = 0;

	for(int i=1; i<=R; i++) if(!vis[i]) dfs(i);

//	cout << " Reversed Topo order" << endl;

	for(int i=0; i<r_topo_ord.size(); i++)
    {
       // cout << r_topo_ord[i] << " ";
    }
  //  cout << endl;
    reverse(r_topo_ord.begin(),r_topo_ord.end());
   // cout << " Resulting Topo order" << endl;
    for(int i=0; i<r_topo_ord.size(); i++)
    {
      //  cout << r_topo_ord[i] << " ";
    }
 //   cout << endl;


    for(int i=0; i<r_topo_ord.size(); i++)
    {
        int r2 = r_topo_ord[i];
        for(int j=0; j < r_adj[r2].size(); j++)
        {
           int r1 = r_adj[r2][j].first;
           int t = r_adj[r2][j].second;
           long long c = dp[r1] + 2 + t;
            if(dp[r2] == -1 || dp[r2] < c)
            {
                dp[r2] = c;
            }
        }
      //  cout << endl;
    }
   /* cout << endl;
    cout << " dp table " << endl;
    for(int i=0; i<r_topo_ord.size(); i++)
        cout << dp[i] << " ";
    cout << endl; */
    ans = *(max_element(dp, dp+r_topo_ord.size()+1));
   // cout << endl;

	cout << ans ;

	return 0;
}

#include<iostream>
#include<set>
#include<map>
#include<vector>
#include<list>
#include<string.h>
#include<cmath>
#include<algorithm>
#include<string>
#include<iomanip>
#include<sstream>
#include<stack>
using namespace std;

typedef unsigned long long int ull;
typedef long long int ll;

#define pb push_back
#define mp make_pair

#define S second
#define F first

#define all(c) (c).begin(), (c).end()

ll gcd(ll a, ll b)
{
   if (b==0) return a;
   return gcd(b,a%b);
}

ll abs1(ll a)
{
	if(a<0)
	return -1*a;
	else return a;
}

ll power(ll base, ll n, ll M)
{
    if(n==0)
    return 1;
    if(n==1)
    return base;
    ll halfn=power(base,n/2,M);
    if(n%2==0)
    return ( halfn * halfn ) % M;
    else
    return ( ( ( halfn * halfn ) % M ) * base ) % M;
}

ll findMMI(ll n,ll M)
{
    return power(n,M-2,M);
}

ll max2(ll a, ll b)
{
	if(a>b)
	return a;
	else return b;
}

ll max3(ll a, ll b, ll c)
{
	return max2(max2(a, b), c);
}

ll min2(ll a, ll b)
{
	if(a<b)
	return a;
	else return b;
}

ll min3(ll a, ll b, ll c)
{
	return min2(min2(a, b), c);
}

vector<int> v, s;
vector<pair<int, pair<int, int> > >go;

void ini(int n)
{
	for(int i=0;i<=n;i++)
	{
		v.pb(i);
		s.pb(1);
	}
}

int root(int a)
{
	while(a!=v[a])
	a=v[a];
	return a;
}

void uni(int a, int b)
{
	int ra=root(a), rb=root(b);
	if(ra!=rb)
	{
		if(s[ra]>s[rb])
		{
			v[rb]=v[ra];
			s[ra]+=s[rb];
		}
		else
		{
			v[ra]=v[rb];
			s[rb]+=s[ra];
		}
	}
}

ll get()
{
	ll cost=1;
	sort(all(go));
	for(vector<pair<int, pair<int, int> > >::iterator it=go.begin();it!=go.end();it++)
	{
		if(root(it->S.F)!=root(it->S.S))
		{
			cost=((cost*it->F)%1000000007);
			uni(it->S.F, it->S.S);
		}
	}
	return (cost%1000000007);
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int t;
	cin>>t;
	while(t--)
	{
		int n, m;
		cin>>n>>m;
		v.clear();
		s.clear();
		go.clear();
		ini(n);
		for(int i=0;i<m;i++)
		{
			int a, b, c;
			cin>>a>>b>>c;
			go.pb(mp(c, mp(a, b)));
		}
		cout<<get()<<endl;
	}
	return 0;
}
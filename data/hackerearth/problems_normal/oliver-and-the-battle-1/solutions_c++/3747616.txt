#include <iostream>
using namespace std;

int N,M;
int arr[1001][1001];
int vis[1001][1001];
int X,Y;
int count=0;

bool isSafe(int i, int j)
{
	if(i>=0 && i<N && j>=0 && j<M && !vis[i][j] && arr[i][j])
		return true;
	return false;
}

void DFS(int i, int j)
{
	
	if(!isSafe(i,j))
		return;
//	cout<<"DFS caled for : "<<i<<" "<<j<<endl;

//	cout<<"count is "<<count<<endl;
	vis[i][j]=1;
	++count;
	
	if(isSafe(i+1,j))
	{
		
		DFS(i+1,j);
	}
	if(isSafe(i+1,j+1))
	{
		
		DFS(i+1,j+1);
	}
	if(isSafe(i+1,j-1))
	{
		
		DFS(i+1,j-1);
	}
	if(isSafe(i,j+1))
	{
		
		DFS(i,j+1);
	}
	if(isSafe(i-1,j+1))
	{
		
		DFS(i-1,j+1);
	}
	if(isSafe(i-1,j))
	{
		
		DFS(i-1,j);
	}
	if(isSafe(i-1,j-1))
	{
		
		DFS(i-1,j-1);
	}
	if(isSafe(i,j-1))
	{
		
		DFS(i,j-1);
	}
		
}

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    	cin>>N>>M;
    	for(int i=0;i<N;i++)
    		for(int j=0;j<M;j++)
    			cin>>arr[i][j];
    	for(int i=0;i<N;i++)
    		for(int j=0;j<M;j++)
    			vis[i][j]=0;
    	X=0;
    	Y=0;
    	count=0;
    	for(int i=0;i<N;i++)
    	{
    		for(int j=0;j<M;j++)
    		{
    			if(!vis[i][j] && arr[i][j])
    			{
    				count=0;
    				DFS(i,j);
    				X++;
    				if(count>Y)
						Y=count;
    			}
    		}
    	}
    	cout<<X<<" "<<Y<<endl;
    }
    return 0;
}

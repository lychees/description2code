#include <iostream>
#include <vector>
#include <cassert>
#include <map>
#include <cmath>
#include <unordered_map>
#include <algorithm>
using namespace std;
typedef long long Long;
#define MAXF 1000000000000000LL

Long get(Long x, vector<Long> &FIBS){
	if(x >= FIBS.size()){
		return MAXF+1;
	}else{
		return FIBS[x];
	}
}
Long findPos(Long x, Long n, vector<Long> &FIBS, Long L){
	if(x < L){
		return n == 0 ? x : -1;
	}
	if(x >= FIBS.size()+L){
		Long d = x - FIBS.size();
		d %= L;
		return findPos(FIBS.size()+d, n, FIBS, L);
	}else{
		for(int i = 0; i < L; ++i){
			Long t = get(x-L+i, FIBS);
			if(t > n){
				return findPos(x-L+i, n, FIBS, L);
			}else{
				n -= t;
			}
		}
		return -1;
	}
	
}
int main() {

	int L,C;
	cin >> L >> C;
	vector<int> V(L,-1);
	vector<Long> FIBS(L,1);
	for(int i = L;  ; ++i){
		Long s = 0;
		for(int j = 0; j < L; ++j){
			s += FIBS[i-1 - j];
		}
		FIBS.push_back(s);
		if(s > MAXF)break;
	}
	for (int i = 0; i < C; ++i) {
		Long n,x;
		char c;
		cin >> n >> x >> c;
		n--;
		x--;
		
		n = findPos(x, n, FIBS,L);
		
		if(n == -1){
			cout << 0 << endl;
			return 0;
		}
		if(V[n] != -1 && V[n] != c){
			cout << 0 << endl;
			return 0;
		}else{
			V[n] = c;
		}
	}
	Long p = 1;
	for(int &l : V){
		if(l == -1){
			p = ((26+26+10)*p) % 1000000007;
		}
	}
	cout << p << endl;
	
}


/*

_ _ A_ ___ __B__


 */

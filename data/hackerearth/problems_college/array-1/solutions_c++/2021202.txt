#include<bits/stdc++.h>
using namespace std;
  int f[30011][211][2][3][3];
  int a[30011];

void func(int &a, int b) {
  if (b > a) a = b;
}

int main() {

  int n, k;
  scanf("%d %d", &n, &k);
  for (int i = 0; i < n; i++) {
    scanf("%d", a + i);
  }
  for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= k; j++) {
      for (int in = 0; in < 2; in++) {
        for (int temp1 = 0; temp1 < 3; temp1++) {
          for (int temp2 = 0; temp2 < 3; temp2++) {
            f[i][j][in][temp1][temp2] = -(int)1e9;
          }
        }
      }
    }
  }
  f[0][0][0][1][1] = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j <= k; j++) {
      for (int in = 1; in >= 0; in--) {
        for (int temp1 = 0; temp1 < 3; temp1++) {
          for (int temp2 = 0; temp2 < 3; temp2++) {
            int variable = f[i][j][in][temp1][temp2];
            if (variable == -(int)1e9) {
              continue;
            }
            if (!in) {
              func(f[i + 1][j][0][temp1][temp2], variable);
              if (j < k) {
                for (int ntemp2 = 0; ntemp2 < 3; ntemp2++) {
                  if ((ntemp2 == 1) != (j + 1 == k)) {
                    continue;
                  }
                  func(f[i + 1][j + 1][1][temp1][ntemp2], variable + a[i] * ((temp1 - 1) + (ntemp2 - 1)));
                }
              }
            } else {
              func(f[i + 1][j][1][temp1][temp2], variable + a[i] * ((temp1 - 1) + (temp2 - 1)));
              func(f[i][j][0][2 - temp2][1], variable);
            }
          }
        }
      }
    }
  }
  printf("%d", max(f[n][k][0][1][1], max(f[n][k][1][2][1], f[n][k][1][0][1])));
  return 0;
}
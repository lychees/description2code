#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <complex>
#include <ctime>

using namespace std;

#define all(a) (a).begin(), (a).end()
#define sz(a) (int)(a).size()

typedef unsigned int uint;

struct Matrix {
public:
    Matrix(int k) {
        n = k;
        a.resize(n);
        for (int i = 0; i < n; ++i)
            a[i].resize(n);
    }
    
    Matrix(int k, vector< vector<uint> > b) {
        n = k;
        a.resize(n);
        for (int i = 0; i < n; ++i) {
            a[i].resize(n);
            for (int j = 0; j < n; j++)
                a[i][j] = b[i][j];
        }
    }

    vector<uint> &operator [] (int k) {
        return a[k];
    }

    int size() {
        return n;
    }

private:
    int n;
    vector<vector<uint>> a;
};

Matrix operator * (Matrix a, Matrix b) {
    int n = sz(a);
    Matrix c(n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            for (int k = 0; k < n; k++) 
                c[i][j] += a[i][k] * b[k][j];
    return c;
}

Matrix binPow(Matrix A, long long n) {
    if (n == 0) {
        Matrix B(sz(A));
        for (int i = 0; i < sz(A); i++)
            B[i][i] = 1;
        return B;
    }
    Matrix B = binPow(A, n / 2);
    B = B * B;
    if ((n & 1))
        B = B * A;
    return B;
}

int main() {
    long long n;
    cin >> n;
    Matrix A(252);
    for (int i = 0; i < 252; ++i) {
        for (int j = 1; j < 10; ++j)
            if ((10 * i + j) % j == 0)
                ++A[(10 * i + j) % 252][i];
    }
    Matrix ANS = binPow(A, n);
    uint ans = 0;
    for (int i = 0; i < 252; ++i)
        ans += ANS[i][0];
    cout << ans << endl;
    return 0;

    return 0;
}
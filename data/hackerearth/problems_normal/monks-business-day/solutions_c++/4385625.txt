#include<bits/stdc++.h>
using namespace std;
struct Edge{
    int u,v,cost;
    Edge(){v=u=cost=0;}
    Edge(int u,int v,int cost){
        this->u=u;
        this->v=v;
        this->cost=cost;
    }
};
vector<Edge>edge;
const int inf=1<<30;
int dist[105];
int main(){
    int tc;scanf("%d",&tc);
    while(tc--){
        edge.clear();
        int n,m;scanf("%d %d",&n,&m);
        for(int i=0;i<m;++i){
            int u,v,cost;
            scanf("%d %d %d",&u,&v,&cost);
            --u,--v;
            cost=-1*cost;
            edge.push_back(Edge(u,v,cost));
        }
        //bellman ford
        for(int i=0;i<n;++i)
            dist[i]=(i==0?0:inf);
        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j){
                if(dist[edge[j].v]>dist[edge[j].u]+edge[j].cost)
                    dist[edge[j].v]=dist[edge[j].u]+edge[j].cost;
            }
        //vector<int>cycles;
        bool cycle_exits=false;
        for(int i=0;i<m;++i){
            if(dist[edge[i].v]<inf/2 &&
                    dist[edge[i].v]>dist[edge[i].u]+edge[i].cost){
                cycle_exits=true;
                break;
            }
        }
        (cycle_exits==true)?puts("Yes"):puts("No");
    }
    return 0;
}

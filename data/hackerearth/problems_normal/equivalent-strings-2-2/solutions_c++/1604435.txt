#pragma comment(linker, "/STACK:100000000")
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <cstdlib>
#include <complex>
#include <sstream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <string>
#include <bitset>
#include <queue>
#include <stack>
#include <ctime>
#include <cmath>
#include <map>
#include <set>

using namespace std;

typedef unsigned long long ull;
typedef complex < double > cd;
typedef long double ld;
typedef long long ll;

#define ppb pop_back
#define pb push_back
#define mp make_pair
#define fs first
#define sd second

#define inf 1000000007
#define nmax 200010
#define mmax 200010
#define eps 1e-9

const int mul = 239017, mod = inf;

int tests, q, l, r, k;
char s[nmax], t[nmax];
int hs[nmax][26], ht[nmax][26];
int hp[nmax];

int main() {
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("distance.in", "r", stdin); freopen("distance.out", "w", stdout);
	//ios :: sync_with_stdio(false);
	scanf("%d", &tests);
	hp[0] = 1;
	for(int i = 1; i < nmax; ++i) {
		hp[i] = 1LL * mul * hp[i - 1] % mod;
	}
	while(tests --> 0) {
		scanf("\n");
		gets(s + 1); gets(t + 1);
		int len = strlen(s + 1);
		for(int i = 1; i <= len; ++i) {
			for(int j = 0; j < 26; ++j) {
				hs[i][j] = hs[i - 1][j];
				ht[i][j] = ht[i - 1][j];
			}
			hs[i][s[i] - 'a'] = (hs[i][s[i] - 'a'] + hp[i]) % mod;
			ht[i][t[i] - 'a'] = (ht[i][t[i] - 'a'] + hp[i]) % mod;
		}
		scanf("%d", &q);
		while(q --> 0) {
			scanf("%d%d%d", &l, &r, &k);
			bool ok = true;
			vector < int > lf, rg;
			for(int i = 0; i < 26; ++i) {
				int lh = (hs[l + k - 1][i] + mod - hs[l - 1][i]) % mod, 
					rh = (ht[r + k - 1][i] + mod - ht[r - 1][i]) % mod;
				if(l < r) lh = 1LL * lh * hp[r - l] % mod;
				if(l > r) rh = 1LL * rh * hp[l - r] % mod;
				lf.pb(lh); rg.pb(rh);
			}
			sort(lf.begin(), lf.end());
			sort(rg.begin(), rg.end());
			puts(lf == rg ? "yes" : "no");
		}
	}
	getchar(); getchar();
	return 0;
}
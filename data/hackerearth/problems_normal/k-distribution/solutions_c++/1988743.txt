#include<bits/stdc++.h>
using namespace std;
 
typedef long long int LL;
 
#define inp_s     ios_base::sync_with_stdio(false);cin.tie(0)
#define DRT()     int test_case;cin>>test_case;while(test_case--)
 
#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<int,int>
 
#define all(c)    c.begin(),c.end()
#define sz(c)     c.size()
#define clr(c)    c.clear()
#define pb        push_back
#define mp        make_pair
 
#define GI(x)     scanf("%d",&x)
#define endn	"\n"
 
#define FOR(i,a,b)      for(int i=a;i<b;i++)
#define RFOR(i,a,b)     for(int i=b-1;i>=a;i--)
 
#define gcd(a,b)  __gcd(a,b)
#define MOD       1000000007
#define EPS       1E-10
#define PI  	acos(-1)
 
#define CASE(x)   cout << "Case #" << x << ": ";
 
vector<int> arr;
LL dp[101][100001];
 
LL solve(int idx , int left)
{
	if(left < 0) return 0;
	else if(idx < 0) return (left >= 0);
	else if(dp[idx][left] != -1) return dp[idx][left];
	LL ret = (solve(idx - 1, left) + solve(idx - 1, left - arr[idx])) % MOD;
	return (dp[idx][left] = ret);
}
 
LL BigMod(LL a, LL b)
{
	if(!b) return 1;
	LL x = BigMod(a,b/2);
	x = (x*x) % MOD;
	if(b&1) x = (x*a) % MOD;
	return x;
}
 
int main()
{
	inp_s;
	int n,k;
	cin >> n >> k;
	FOR(i,0,n+1) FOR(j,0,k+1) dp[i][j] = -1;
	arr.resize(n);
	LL sum = 0;
	FOR(i,0,n)
	{
		cin >> arr[i];
		sum += arr[i];
	}
	if(sum < 2*k)
	{
		cout << 0 << endl;
		return 0;
	}
	LL ways = solve(n - 1,k-1);
	LL ans = BigMod(2,n) - 2*ways;
	ans = (ans%MOD) + MOD;
	ans %= MOD;
	cout << ans << endl;
	return 0;
}
#include<iostream>
#include<vector>
using namespace std;
struct dsu
{
	vector<int>w, p;
	void init(int n)
	{
		w.resize(n + 3, 1);
		p.resize(n + 3, -1);
	}
	int getp(int x)
	{
		if (p[x] == -1) return x;
		p[x] = getp(p[x]);
		return p[x];
	}
	void join(int a, int b)
	{
		a = getp(a);
		b = getp(b);
		if (a == b) return;
		if (w[a] >= w[b])
		{
			p[b] = a;
			w[a] += w[b];
		}
		else
		{
			p[a] = b;
			w[b] += w[a];
		}
	}
};
int main()
{
	int n, m;
	cin >> n >> m;
	vector<pair<int, int> >edges;
	for (int i = 1; i <= m; i++)
	{
		int u, v;
		cin >> u >> v;
		edges.push_back(make_pair(u, v));
	}
	dsu d;
	d.init(n);
	vector<int>ans;
	int need = n - 1;
	for (int i = edges.size() - 1; i >= 0; i--)
	{
		int u = edges[i].first, v = edges[i].second;
		if (d.getp(u) != d.getp(v) && need > 0)
		{
			d.join(u, v);
			need--;
		}
		else
		{
			ans.push_back(i + 1);
		}
	}
	cout << ans.size() << endl;
	for (int i = ans.size() - 1;i>=0; i--)
	{
		cout << ans[i] << endl;
	}
	cout << endl;
}
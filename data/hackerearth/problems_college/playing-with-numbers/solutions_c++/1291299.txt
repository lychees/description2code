#include <iostream>
#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <climits>
#include <vector>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <algorithm>
#include <limits>
#include <bitset>
using namespace std;

//Shorthands
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<vi> vvi;
typedef vector<ii> vii;
typedef long long ll;
typedef vector<ll> vll;
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()

//Debug
#define trace(x) cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define track(a) cerr << #a << ": "; for (auto tmp: a) cerr << tmp << " "; cerr << endl;
#define trackp(a) cerr << #a << ": "; for (auto tmp: a) cerr << "(" << tmp.first << ", " << tmp.second << "), "; cerr << endl;

//Constants
#define MOD 1000000007
#define INF 1e15
#define MAX 100005

//General Purpose Routines;
vector<bool> isprime;
vector<int> primes;
void sieve(int n)
{
    isprime.resize(n + 1);
    for (int i = 1; i < n; i++)
        isprime[i] = 1;
    isprime[1] = 0, isprime[2] = 1;
    for (int i = 2; i * i <= n; i++)
        if (isprime[i])
            for (int j = 2; i * j < n; j++)
                isprime[i * j] = 0;
    for (int i = 2; i < n; i++)
        if (isprime[i]) primes.push_back(i);
    return;
}

long long pow(long long n, long long m)
{
    if(m==0) return 1;
    long long x=pow(n,m/2);
    if(m%2==0) return (x*x)%MOD;
    else return (((x*x)%MOD)*n)%MOD;
}

typedef vector<vector<int> > graph;
graph G;

bool isvisited[MAX];
int colored[MAX];

bool is = 1;

void dfs(int u, int color)
{
    isvisited[u] = 1;
    for (int i = 0; i < G[u].size(); i++) {
        int v = G[u][i];
        if (!isvisited[v]) {
            colored[v] = !color;
            dfs(v, !color);
        } else {
            if (colored[v] == colored[u]) {
                is = 0;
            }
        }
    }
}

int main()
{
    int t;
    scanf("%d", &t);
    bool flag = 0;
    while (t--) {
    	long long n;
        scanf("%lld", &n);
        int count = 0;
        while (n) {
            n -= n & -n;
            count++;
        }
        if (count & 1) {
            if (!flag) {
            	printf( "Sherlock\n" );
            	flag = 0;
            } else {
            	printf( "Watson\n" );
            	flag = 1;
            }
           
        } else {
            if (flag) {
            	printf( "Sherlock\n" );
            	flag = 0;
            } else {
            	printf( "Watson\n" );
            	flag = 1;
            }
            
            
        }
    }
}

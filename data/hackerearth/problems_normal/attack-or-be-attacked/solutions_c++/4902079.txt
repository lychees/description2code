#define _CRT_SECURE_NO_WARNINGS
//#define  NDEBUG

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <chrono>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <functional>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define all(v)                  v.begin(), v.end()
#define db(x)                   cout << #x << " = " << (x) << "\n"
#define fend(x)                 ((x) & ((x)+1)) - 1
#define fenu(x)                 (x) | ((x)+1)
#define forn(i, n)              for (int i = 0; i < (int)n; ++i)
#define for1n(i, b, e)	  	  for (int i = b; i < (int)e; ++i) 		                                         
#define ft                      first
#define len(s)                  s.length()
#define mp                      std::make_pair
#define pob                     pop_back
#define pof                     pop_front           
#define pub                     push_back
#define puf                     push_front
#define sc                      second

typedef double                  dbl;
typedef long double             ldbl;
typedef unsigned int		  uint;
typedef long long               ll;
typedef unsigned long long      ull;

const long long MILLER_RABIN = 3215031751;
const long double PI = 3.14159265358979323846;

//struct config_io { config_io() { cin.tie(nullptr); ios_base::sync_with_stdio(false); } } cnf_io;
//struct config_rand { config_rand() { srand(chrono::duration_cast<chrono::nanoseconds>(chrono::high_resolution_clock::now().time_since_epoch()).count()); } } cnf_rand;

//namespace std
//{
//	template<>
//	struct hash < pair<int, int> > {
//		size_t operator()(const pair<int, int> &x) const {
//			return (x.first * 31 + x.second) % ((int)1e9 + 7);
//		}
//	};
//}

// __builtin_popcount(x) - Returns the number of 1-bits in x.
// __builtin_parity(x) - Returns the parity of x, i.e. the number of 1-bits in x modulo 2.
// __builtin_ffs(x) - Returns one plus the index of the least significant 1-bit of x, or if x is zero, returns zero.
// __builtin_clz(x) - Returns the number of leading 0-bits in x, starting at the most significant bit position. If x is 0, the result is undefined.
// __builtin_ctz(x) - Returns the number of trailing 0-bits in x, starting at the least significant bit position. If x is 0, the result is undefined.

inline void scan(int &x) { scanf("%d", &x); }
inline void scan(long long &x) { scanf("%lld", &x); }
inline void scan(double &x) { scanf("%lf", &x); }
inline void scan(long double &x) { scanf("%Lf", &x); }
inline void scan(int &x, int &y) { scanf("%d%d", &x, &y); }
inline void scan(int &x, int &y, int &z) { scanf("%d%d%d", &x, &y, &z); }
inline void scan(int &w, int &x, int &y, int &z) { scanf("%d%d%d%d", &w, &x, &y, &z); }
inline void print(const int x) { printf("%d\n", x); }
inline void print(const long long x) { printf("%lld\n", x); }
inline void print(const double x) { printf("%lf\n", x); }
inline void print(const long double x) { printf("%Lf\n", x); }
inline void print(const int x, const int y) { printf("%d %d\n", x, y); }
inline void print(const int x, const int y, const int z) { printf("%d %d %d\n", x, y, z); }

inline void tobin(long long x) { cout << bitset<64>(x) << endl; }
template<class T> inline void trace(T collection) { for (auto elem : collection) { cout << elem << endl; } }

const int MOD = 1e9 + 7;

void check(int x) {
	assert(x >= 0 && x < MOD);
}

int mult(int a, int b) {
	int res = (a * 1ll * b) % MOD;
	check(res);
	return res;
}

int sum(int a, int b) {
	int res = (a + b) % MOD;
	check(res);
	return res;
}

int diff(int a, int b) {
	int res = (a - b + MOD) % MOD;
	check(res);
	return res;
}

int bin_pow(int a, int p) {
	int res = 1;
	while (p) {
		if (p & 1) {
			res = mult(res, a);
		}
		a = mult(a, a);
		p >>= 1;
	}
	check(res);
	return res;
}

void solve() {
	int n, m, p, q;
	scan(n, m, p, q);
	if (n < m) swap(n, m);
	const int INV3 = bin_pow(3, 1e9 + 5);
	int total = mult(mult(n, m), mult(n, m) - 1);
	check(total);
	int first_part = mult(2, mult(n - m + 1, mult(m, m - 1)) + mult(mult(2, mult(m - 2, mult(m - 1, m))), INV3));
	check(first_part);
	int nP = max(n - p, 0), nQ = max(n - q, 0);
	int mP = max(m - p, 0), mQ = max(m - q, 0);
	int second_part = mult(4, sum(mult(nP, mQ), mult(nQ, mP)));
	check(second_part);
	int result = diff(total, sum(first_part, second_part));
	check(result);
	print(result);
}

int main() {
#ifdef DEBUG
#define DEBUG	
	freopen("home.in", "r", stdin);
	freopen("home.out", "w", stdout);
#endif             

	/*bitset<32> bs;
	bs.set(11, 1);
	bs.set(9, 1);
	bs.set(0, 1);
	bs.set(2, 1);
	bs.set(3, 1);
	upd1(bs.to_ulong(), 1);*/

	int tests = 1;
	//scan(tests);
	forn(i, tests) {
		solve();
	}

#ifdef DEBUG
	cout << "\n\nTime: " << clock() / (double)CLOCKS_PER_SEC << endl;
#endif
	return 0;
}
#include <bits/stdc++.h>
using namespace std;

#define display(arr,s,e) for(unsigned long long i=s; i<=e; i++) cout<<arr[i]<<" ";
#define rep(i,s,e) for (i=s; i<=e; i++)
#define ull unsigned long long
#define ll long long
#define pb push_back
#define ri(x) scanf("%d",&x)
#define ri2(x,y) scanf("%d%d",&x,&y)
#define rll(x) scanf("%lld",&x)
#define rll2(x,y) scanf("%lld%lld",&x,&y)
#define pi(x) printf("%d\n",x)
#define pll(x) printf("%lld\n",x)
#define mset(arr,x) memset(arr,x,sizeof(arr))
#define md 1000000007

// Implementation of Andrew's monotone chain 2D convex hull algorithm.
// Asymptotic complexity: O(n log n).
// Practical performance: 0.5-1.0 seconds for n=1000000 on a 1GHz machine.

typedef double coord_t;         // coordinate type
typedef double coord2_t;  // must be big enough to hold 2*max(|coordinate|)^2

struct Point {
	coord_t x, y;

	bool operator <(const Point &p) const {
		return x < p.x || (x == p.x && y < p.y);
	}
};

// 2D cross product of OA and OB vectors, i.e. z-component of their 3D cross product.
// Returns a positive value, if OAB makes a counter-clockwise turn,
// negative for clockwise turn, and zero if the points are collinear.
coord2_t cross(const Point &O, const Point &A, const Point &B)
{
	return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}

// Returns a list of points on the convex hull in counter-clockwise order.
// Note: the last point in the returned list is the same as the first one.
vector<Point> convex_hull(vector<Point> P)
{
	int n = P.size(), k = 0;
	vector<Point> H(2*n);

	// Sort points lexicographically
	sort(P.begin(), P.end());

	// Build lower hull
	for (int i = 0; i < n; ++i) {
		while (k >= 2 && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
		H[k++] = P[i];
	}

	// Build upper hull
	for (int i = n-2, t = k+1; i >= 0; i--) {
		while (k >= t && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
		H[k++] = P[i];
	}

	H.resize(k);
	//ll i;
	//rep (i,0,H.size()-1) printf("%.2f %.2f\n",H[i].x,H[i].y);
	return H;
}
double compute(vector<Point> P)
{
	double res=0;
	ll i;
	double mx=0.0;
	rep(i,1,P.size()-1)
	{
		double a = sqrt( (P[i-1].x-P[i].x)*(P[i-1].x-P[i].x) + (P[i-1].y-P[i].y)*(P[i-1].y-P[i].y) );
		res += a;
		mx = max(a,mx);
	}
	return res-mx;
}
int main()
{
	ll t,test; rll(t);
	rep (test,0,t-1){
		int i,j,k;
		ll n; rll(n);
		vector<Point> points(n);
		rep(j,0,n-1) scanf("%lf%lf",&points[j].x,&points[j].y);
		double res = compute(convex_hull(points));
		printf("%.2f\n",res);
	}
    return 0;
}

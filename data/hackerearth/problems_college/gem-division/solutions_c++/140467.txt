#include <iostream>
#include <algorithm>
#include<cstring>
#include <vector>
using namespace std;
#define iterator IT
#define ll long long
#define MAXN 100000
#define MP(X,Y) make_pair(X,Y)
#define pb(X) push_back(X)
ll max(ll a, ll b) { return (a > b)? a : b; }
ll absa(ll a){return a<0?-a:a;}
ll knapSack(ll W, ll wt[], ll val[], ll n)
{
   ll i, w;
	ll weight[n+1][W+1];
	memset(weight,0,sizeof(weight));
   for (i = 0; i <= n; i++){
       for (w = 0; w <= W; w++){
           if (i==0 || w==0)
               weight[i][w]=0;
           else if (wt[i-1] <= w){
                 weight[i][w] = max(wt[i-1] + weight[i-1][w-wt[i-1]],  weight[i-1][w]);
                 }
           else
                 weight[i][w]=weight[i-1][w];
       }
   }
 return weight[n][W];
  }
int main(){
	ll t,i;
	cin>>t;
	ll arr[1000],a[1000],cap[1000];
	while(t--){
		vector<pair<ll,ll> > vec;
		ll n,k,sum=0;
		cin>>n;
		for(i=0;i<n;i++)
			cin>>arr[i];
		for(int j=0;j<n;j++)
			cap[j]=1;
		for(i=0;i<n;i++){
			int k=0;sum=0;
			for(int j=0;j<n;j++)
				if(j!=i)
				a[k++]=arr[j],sum+=arr[j];
			for(int j=0;j<n-1;j++)
			cap[j]=1;
		vec.pb(MP(absa(sum-2*knapSack(sum/2,a,cap,n-1)),arr[i]));
		}
		sort(vec.begin(),vec.end());
		cout<<vec[0].first<<" "<<vec[0].second<<endl;
		}
	return 0;
	}

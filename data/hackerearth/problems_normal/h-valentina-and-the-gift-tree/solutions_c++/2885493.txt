#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define REP(i,a) for(int i=0;i<a;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back

inline int max(int a,int b){return a<b?b:a;}
inline int min(int a,int b){return a>b?b:a;}
inline ll max(ll a,ll b){return a<b?b:a;}
inline ll min(ll a,ll b){return a>b?b:a;}
const int mod = 1e9+7;
const int N = 1e5+10;
const ll INF = 1e18;

//#define DEBUG

#ifdef DEBUG
#define dprintf(fmt,...) fprintf(stderr,fmt,__VA_ARGS__)
#else
#define dprintf(fmt,...)
#endif

vector<int> G[N];
int fat[N][20];ll sum[N][20],best[N][20],dep[N];
pll adj[N][20];
int arr[N];
void dfs(int v,int p,int k){
  fat[v][0]=p;
  dep[v]=k;
//  printf("%d %d\n",v,k);
  adj[v][0].X=adj[v][0].Y=sum[v][0]=best[v][0]=arr[v];
  REP(i,G[v].size()){
    int to=G[v][i];
    if(to!=p) dfs(to,v,k+1);
  }
}
ll solve(int u,int v){
  ll bst=-INF,blu=-INF,blv=-INF;
  if(dep[u]>dep[v]) swap(u,v);
  //printf("%lld %lld %d %d %lld %lld\n",blv,blu,v,u,dep[v],dep[u]);
  if(dep[u]!=dep[v]){
    int dif=dep[v]-dep[u];
    for(int i=19-1;i>=0;--i) if((dif>>i)&1) {
      bst=max(bst,max(best[v][i],blv+adj[v][i].X));
      blv=max(blv+sum[v][i],adj[v][i].Y);
      v=fat[v][i];
    }
  }
//  printf("%lld %lld %d %d\n",blv,blu,v,u);
  if(u==v) return max(bst,max(best[u][0],blv+adj[u][0].X));
  for(int i=19-1;i>=0;i--) if(fat[u][i]!=fat[v][i]){
    bst=max(bst,max(best[v][i],blv+adj[v][i].X));
    blv=max(blv+sum[v][i],adj[v][i].Y);
    bst=max(bst,max(best[u][i],blu+adj[u][i].X));
    blu=max(blu+sum[u][i],adj[u][i].Y);
    u=fat[u][i];v=fat[v][i];
  }
//  printf("%lld %lld %d %d\n",blv,blu,v,u);
  {
    bst=max(bst,max(best[v][0],blv+adj[v][0].X));
    blv=max(blv+sum[v][0],adj[v][0].Y);
    bst=max(bst,max(best[u][0],blu+adj[u][0].X));
    blu=max(blu+sum[u][0],adj[u][0].Y);
    u=fat[u][0];v=fat[v][0];
  }
  //printf("%lld %lld %d %d\n",blu,blv,u,arr[u]);
  bst=max(bst,max(max(blv+arr[u],blu+arr[u]),blu+blv+arr[u]));
  bst=max(bst,(ll)arr[u]);
  return bst;
}
int main(){
  int n; scanf("%d",&n);
  REP(i,n-1){
    int x,y; scanf("%d%d",&x,&y);x--;y--;
    G[x].pb(y); G[y].pb(x);
  }
  REP(i,n) scanf("%d",&arr[i]);
  dfs(0,0,0);
  REPP(j,1,19)  REP(i,n){
    fat[i][j]=fat[fat[i][j-1]][j-1];
    sum[i][j]=sum[i][j-1]+sum[fat[i][j-1]][j-1];
    adj[i][j]=mp(max(adj[i][j-1].X,sum[i][j-1]+adj[fat[i][j-1]][j-1].X),max(adj[fat[i][j-1]][j-1].Y,sum[fat[i][j-1]][j-1]+adj[i][j-1].Y));
    best[i][j]=max(best[i][j-1],max(best[fat[i][j-1]][j-1],adj[i][j-1].Y+adj[fat[i][j-1]][j-1].X));
  }
  int q; scanf("%d",&q);
  while(q--){
    int x,y; scanf("%d%d",&x,&y);
    x--;y--;
    printf("%lld\n",solve(x,y));
  }
  return 0;
}

#include<bits/stdc++.h>
#define ll long long
#define plll pair<ll,pair<ll,ll> >
#define typ first
#define f second.first
#define s second.second
using namespace std;
long long arr[100005];
long long ftree[500005];
#define nax 500005
vector<long long> v;
vector<plll> vx;
map<ll,ll> mp;

void update(ll idx,ll value )
{

    while(idx<nax)
    {
        ftree[idx]+=value;
        idx+=(idx&(-idx));
    }
}
ll query(ll idx)
{
    ll sum=0;
    while(idx>0)
    {
        sum+=ftree[idx];
        idx-=(idx&(-idx));
    }
    return sum;
}
int main()
{
    for(int i=0;i<nax;i++)
        ftree[i]=0;

    int n,k,q,a,b,c,d,type;
    cin>>n>>q>>k;
    for(int i=0;i<n;i++)
    {

        cin>>arr[i];
        v.push_back(arr[i]);
    }
    for(int i=0;i<q;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>a>>b>>c>>d;


            if(b<c || d<a)
            {

                vx.push_back(make_pair(type,make_pair(-1,-1)));
            }
            else if(c<=a && d>=b)
            {


                vx.push_back(make_pair(type,make_pair(a,b)));
                v.push_back(a);
                v.push_back(b);
            }
            else if(a<=c && b>=d)
            {


               vx.push_back(make_pair(type,make_pair(c,d)));
               v.push_back(c);
               v.push_back(d);
            }
            else if(a<c)
            {


               vx.push_back(make_pair(type,make_pair(c,b)));
               v.push_back(c);
               v.push_back(b);
            }
            else
            {


              vx.push_back(make_pair(type,make_pair(a,d)));
              v.push_back(a);
              v.push_back(d);
            }



        }
        else
        {
            cin>>a>>b;
            vx.push_back(make_pair(type,make_pair(a,b)));
            v.push_back(b);

        }
    }
    sort(v.begin(),v.end());
    long cnt=1;
    mp[v[0]]=cnt;
    ++cnt;
    for(int i=1;i<v.size();i++)
    {
        if(v[i]!=v[i-1])
        {
            mp[v[i]]=cnt;
            ++cnt;
        }
    }
    for(int i=0;i<n;i++)
    {
        update(mp[arr[i]],1);
    }
    for(int i=0;i<q;i++)
    {
        if(vx[i].typ==1)
        {
            a=vx[i].f;
            b=vx[i].s;
            //cout<<"Ori "<<a<<" "<<b<<"\n";
        ll quan;
            if(a==-1)
                quan=0;
            else
            quan=query(mp[b])-query(mp[a]-1);
            if(quan>=k)
                cout<<"Propose\n";
            else
                cout<<"Do not propose\n";
        }
        else
        {
           a=vx[i].f;
           b=vx[i].s;
            update(mp[arr[a-1]],-1);
            arr[a-1]=b;
            update(mp[arr[a-1]],1);

        }
    }

}

#include <iostream>
#include <utility>
#include <algorithm>
#include<string.h>

using namespace std;
pair<int,int> dp[60][60][60];

int gcd(int m,int n){
	return n==0?m:gcd(n,m%n);
}

int gcdtriplet(int m,int n,int o){
	if(dp[m][n][o].second!=-1) return dp[m][n][o].first;
	return gcd(m,gcd(n,o));
}

void build_dp(){
	int i,j,k,p,q,r;
	for(i=23;i>=0;i--){
		for(j=59;j>=0;j--){
			for(k=59;k>=0;k--){
				dp[i][j][k].first=dp[i][k][j].first=dp[j][i][k].first=dp[j][k][i].first=dp[k][i][j].first=dp[k][j][i].first=gcdtriplet(i,j,k);
				if(i==23 && j==59 && k==59) dp[i][j][k].second=1;
				else{
					p=i;q=j;r=k;
					if(r==59){
						r=0;
						if(q==59){
							q=0;
							p++;
						}
						else q++;
					}
					else r++;
		
				if(dp[i][j][k].first==1) dp[i][j][k].second=dp[p][q][r].second+1;
				else dp[i][j][k].second=dp[p][q][r].second;
			}
		}
	}
	}
	return;
}

int main()
{
	int m,n,o;
	int diff=0,good=0,bad=0,hcf=0;
    int t;
    memset(dp,-1,sizeof dp);	
    build_dp();
    cin>>t;
    while(t--){
    	
    	cin>>m>>n>>o;
    	diff=(23-m)*3600+(59-n)*60+(59-o)+1;
    	good=dp[m][n][o].second;
    	bad=diff-good;
    	hcf=gcd(good,bad);
    	if(hcf==good && hcf==bad) cout<<"1:1";
    	else if(!good || !bad) cout<<bad<<":"<<good<<endl;
    	else cout<<bad/hcf<<":"<<good/hcf<<endl;
    		
    }
    return 0;
}

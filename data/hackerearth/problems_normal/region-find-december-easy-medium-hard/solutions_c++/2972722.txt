#include <iostream>
#include <vector>

using namespace std;

int n;
int w[1510];
vector<int> tree[1510];
long long int a[1510], b[1510];

long long int mod = 1e9+7;

void dfs(int v, int p, int minw) {

	long long int sum = 0, prod = 1;
	for(int i = 0; i < tree[v].size(); ++i) {
		if(p == tree[v][i])	continue;
		dfs(tree[v][i], v, minw);
		prod = (prod * (a[tree[v][i]] + 1ll))%mod;
		sum = (sum + a[tree[v][i]] + b[tree[v][i]])%mod;
	}
	if(w[v] < minw)	a[v] = 0;
	else			a[v] = prod;
	b[v] = sum;
}

int main(void) {
	ios_base::sync_with_stdio(false);
	cin>>n;
	for(int i = 0; i < n; ++i)
		cin>>w[i];

	for(int i = 0; i < n-1; ++i) {
		int a, b;
		cin>>a>>b;
		--a, --b;
		tree[a].push_back(b);
		tree[b].push_back(a);
	}

	int q;
	cin>>q;

	while(q--) {
		int minw;
		cin>>minw;

		dfs(0, -1, minw);
		long long int ans = (a[0] + b[0])%mod;
		//cout<<ans<<endl;
		dfs(0, -1, minw + 1);
		ans = ans - (a[0] + b[0])%mod;
		if(ans < 0)	ans += mod;
		cout<<ans<<endl;

	}

	return 0;
}
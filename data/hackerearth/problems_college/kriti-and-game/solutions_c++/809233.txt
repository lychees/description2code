#include<iostream>
#include<cstring>
using namespace std;
int k, s, mink, mins, knos[100], snos[100], kres, sres, queries;
int dp[100000][2];
int findWinner(int size, char p) {
	//cout<<"\ninside findwinner("<<size<<","<<p<<")"<<endl;
	int pl = (p == 'S') ? 0 : 1, victory = -1, i;
	
	if(size >= 0 && ((pl == 0 && size >= mins) ||(pl == 1 && size >= mink))) {
		if(dp[size][pl]	!= -1)	//check memo
			return dp[size][pl];
		else {
			if(pl == 0) {
				for(i=0; i<s; i++) {
					if(size-snos[i] >= 0)
						sres = findWinner(size-snos[i], 'K');
					if(sres == 0)
						victory = 1;
				}
				if(victory == 1)
					dp[size][pl] = 1;
				else
					dp[size][pl] = 0;
			}
			else {
				for(i=0; i<k; i++) {
					if(size-knos[i] >= 0)
						kres = findWinner(size-knos[i], 'S');
					if(kres == 0)
						victory = 1;
				}
				if(victory == 1)
					dp[size][pl] = 1;
				else
					dp[size][pl] = 0;
			}
			return dp[size][pl];
		}
	} 
	else {
		dp[size][pl] = 0;
		return dp[size][pl]; //defeat imminent
	}
}

int main() {
	int i, n, result;
	char p;
	cin>>k>>s;
	
	for(i=0; i<k; i++)
		cin>>knos[i];
	for(i=0; i<s; i++)
		cin>>snos[i];
		
	mink = knos[0];
	if(k > 1)
		for(i=1; i<k; i++)
			if(knos[i] < mink)
				mink = knos[i];

	mins = snos[0];
	if(s > 1)
		for(i=1; i<s; i++)
			if(snos[i] < mins)
				mins = snos[i];
	
	cin>>queries;
	
	memset(dp, -1, sizeof(dp));
	
	for(i=0; i<queries; i++) {
		cin>>n>>p;
		result = findWinner(n, p);
		if((p == 'S' && result == 1) || (p == 'K' && result == 0))
			cout<<"YES"<<endl;
		else
			cout<<"NO"<<endl;
	}
	return 0;
}

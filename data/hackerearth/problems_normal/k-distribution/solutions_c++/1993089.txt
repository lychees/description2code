// Author: thecodekaiser
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
#define MXN 105
#define MXK 100010
#define MOD 1000000007

ll dp[MXN][MXK];
ll arr[MXN];

ll modPOW(ll a, ll b, ll c)
{
	ll res = 1, y = a;
	while(b)
	{
		if(b&1)
			res = (res * y) % c;
		y = (y * y) % c;
		b >>= 1;
	}
	return res;
}

void solve()
{
	int N, K;
	cin >> N >> K;	
	
	ll sum = 0;
	
	for(int i = 0; i < N; i++)
	{
		cin >> arr[i];
		sum += arr[i];
	}
	
	if(sum < 2*K)
		printf("0\n");
	else
	{
		memset(dp, 0, sizeof(dp));	
		dp[0][0] = 1;
		ll ways = 0;
		
		for(int i = 1; i <= N; i++)	
		{
			for(int j = 0; j <= K-1; j++)
			{
				dp[i][j] = dp[i-1][j];
				
				if(arr[i-1] <= j)
					dp[i][j] = (dp[i][j] + dp[i-1][j-arr[i-1]]);
					
				if(dp[i][j] >= MOD) while(dp[i][j] >= MOD) dp[i][j] -= MOD;
				
				if(i == N)
				{	ways += dp[i][j]; if(ways >= MOD) while(ways >= MOD) ways -= MOD; }
			}
		}
		
		ll ans = modPOW(2, N, MOD) - ((2 * ways) % MOD);
		ans = (ans + MOD) % MOD;
		
		cout << ans << endl;
	}	
		
	
	return;
}

int main()
{
	solve();
	
	return 0;
}
#include <iostream>
#include <cmath>
#include <cstring>
#include <vector>
#include <string>
#include <algorithm>
#include <map>

using namespace std;

vector<int> Prime;
bool isPrime[100];
typedef pair<int, int> PII;
typedef pair<int ,PII> PIII;
vector<PIII> all;
map <PIII, int> posi;
vector<PII> cntTot;
void calcPrime() {
     memset(isPrime, true, sizeof(isPrime));
     Prime.push_back(2);
     for (int i = 4; i < 60; i+=2) isPrime[i] = false;
     for (int i = 3; i < 60; i+=2) if (isPrime[i]){
         for (int j = i*i; j < 60; j+= i) isPrime[j] = false;
         Prime.push_back(i);
     }
     
}
bool checkGood(int H, int M, int S) {
     for (int i = 0; i < Prime.size(); i++) {
         int p = Prime[i];
         if (H%p == 0 && M%p == 0 && S%p == 0) return false;
     }
     return true;
}
void genAllSeq() {
     int seq = 0, G = 0, B = 0;
     
     for (int i = 0; i < 24; i++) for (int j = 0; j <60; j++) for (int k = 0; k < 60; k++) {
         PII a = make_pair(j, k);
         PIII b = make_pair(i, a);
         if (checkGood(i, j, k)) G++;
         else B++;
         //if (i == 23 && j >= 59 && k >= 58) cout << i << " " << j << " " << k << " "<< isGood[b]<<"\n";
         all.push_back(b);
         posi[b] = seq++;
         cntTot.push_back(make_pair(G,B));
     } 
}
int main() {
    calcPrime();
    genAllSeq();
    int tot = all.size()-1;
    int T, G = cntTot[tot].first, B = cntTot[tot].second;
    for (cin >> T; T; T--) {
        int H, M, S; cin >> H >> M >> S;
        PIII a = make_pair(H, make_pair(M,S));
        int idx = posi[a];
        //iint G = getGoodCount(a), B = getBadCount(a);
        int g = G - cntTot[idx].first, b = B - cntTot[idx].second;
        if (checkGood(H, M,S))g++;
        else b++;
        //cout << g << " " << b <<"\n";
        int d = __gcd(g,b);
        if (g > 0 && b > 0) {g /= d; b /= d;}
        cout << b <<":"<<g<<"\n";
    }
    return 0;
}

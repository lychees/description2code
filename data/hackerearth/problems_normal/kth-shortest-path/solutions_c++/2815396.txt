#include <bits/stdc++.h>
#define PB push_back 
#define INF 1919
using namespace std;
long long int mat[200][200],n,m;
int main()
{
	int t;
	cin>>t;
	while(t--){
		cin>>n>>m;
		vector< long long int > save[200][200];
		for(int i=0;i<n;i++)
		for(int j=0;j<m;j++){
			char s[10];
			cin>>s;
			if(s[0]=='#')
			mat[i][j]=INF;
			else
			mat[i][j]=atoi(s);
		}
		if(mat[0][0]!=INF)save[0][0].PB(mat[0][0]);
		
		for(int i=1;i<n;i++)
		if(mat[i][0]!=INF  && save[i-1][0].size()>0)
		save[i][0].PB(save[i-1][0][0]+mat[i][0]);
		
		for(int i=1;i<m;i++)
		if(mat[0][i]!=INF && save[0][i-1].size()>0)
		save[0][i].PB(save[0][i-1][0]+mat[0][i]);

		for(int i=1;i<n;i++){
			for(int j=1;j<m;j++)
				if(mat[i][j]!=INF){
					int sz1 = (int)save[i-1][j].size();
        			int sz2 = (int)save[i][j-1].size();
        			int idx1 = 0, idx2 = 0, cnt = 0;
        			while ( (idx1 < sz1 || idx2 < sz2) && cnt != 101 ) {
        				if ( idx2 == sz2 ) {
        					save[i][j].push_back(mat[i][j]+save[i-1][j][idx1]);
        					idx1++;
        				}
        				else if ( idx1 == sz1 ) {
        					save[i][j].push_back(mat[i][j]+save[i][j-1][idx2]);
        					idx2++;
        				}
        				else {
        					if ( save[i-1][j][idx1] > save[i][j-1][idx2] ) {
        						save[i][j].push_back(mat[i][j] + save[i][j-1][idx2]);
        						idx2++;
        					}
        					else {
        						save[i][j].push_back(mat[i][j]+save[i-1][j][idx1]);
        						idx1++;
        					}
        				}
        				cnt++;
				//	int sx=save[i-1][j].size(),sy=save[i][j-1].size();
				
//					for(int a=0;a<sx;a++)
//					save[i][j].PB(save[i-1][j][a]+mat[i][j]);
//					for(int a=0;a<sy;a++)
//					save[i][j].PB(save[i][j-1][a]+mat[i][j]);
//					sort(save[i][j].begin(),save[i][j].end());
				}
			}
		}
		int q;
		cin>>q;
		while(q--){
			int x,y,k;
			cin>>x>>y>>k;
			if(mat[x][y]==INF)
			cout<<"Obstacle\n";
			else if(k>save[x][y].size() || k>101)
			cout<<"Not so many paths\n";
			else
			cout<<save[x][y][k-1]<<endl;
		}
		
	}
	
    return 0;
}

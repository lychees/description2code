test_cases = int(raw_input())
for i in range(test_cases):
    no_of_persons, no_of_transactions = [
        int(x) for x in raw_input().split(' ')]
    persons = []
    transactions = []
    for j in range(no_of_persons):
        persons.append(raw_input())
    for j in range(no_of_transactions):
        transaction = {}
        transaction['id'] = j
        transaction['paid_by'] = raw_input()
        transaction['amount'] = int(raw_input())
        transaction['person_involved'] = []
        no_of_persons_involved = int(raw_input())
        for k in range(no_of_persons_involved):
            transaction['person_involved'].append(raw_input())
        transactions.append(transaction)
    final_amount = [0]*len(persons)
    paid = [0]*len(persons)
    expenses = [0]*len(persons)
    for transaction in transactions:
        amount = transaction['amount']
        persons_involved = len(transaction['person_involved'])+1
        amount_for_person_who_paid = amount - \
            (amount/persons_involved)*persons_involved+(amount/persons_involved)
        paid[persons.index(transaction['paid_by'])] += amount
        expenses[persons.index(transaction['paid_by'])
                 ] += amount_for_person_who_paid
        for i in range(persons_involved-1):
            expenses[persons.index(
                transaction['person_involved'][i])] += amount/(persons_involved)
    for i in range(len(persons)):
        final_amount[i] = paid[i]-expenses[i]
        if final_amount[i] < 0:
            print "%s owes %d" % (persons[i], abs(final_amount[i]))
        elif final_amount[i] > 0:
            print "%s is owed %d" % (persons[i], final_amount[i])
        else:
            print "%s neither owes nor is owed" % persons[i]

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<ll,ll> ii;
typedef vector<ll> vi;
typedef vector< ii > vii;

#define INF 0x3F3F3F3F
#define LINF 0x3F3F3F3F3F3F3F3FLL
#define pb push_back
#define mp make_pair
#define pq priority_queue
#define LSONE(s) ((s)&(-s)) //LASTBIT
#define DEG_to_RAD(X)   (X * PI / 180)
#define F first
#define S second
#define PI 2*acos(0)

#ifdef ONLINE_JUDGE
#define debug(args...)
#else
#define debug(args...) fprintf(stderr,args)
#endif

//////////////////////
int dx[] = {1,-1,0,0};
int dy[] = {0,0,-1,1};
//////////////////////

const int N = 50001;
const int K = 101;
const ll mod = 1e9+7;

ll addMod( ll a, ll b )
{
	a+=b;
	if( a >= mod ) a-=mod;
	return a;
}

ll mulMod( ll a, ll b )
{
	a *= b;
	a %= mod;
	return a;
}

ll pd[N][K];
int a[N];
vi g[N];
int nxt[N], down[N], sub[N];

void dfs( int x, int ult )
{
	int fst = -1;
	sub[x] = a[x];
	for(int i=0;i<g[x].size();++i)
	{
		int y = g[x][i];
		if( y == ult ) continue;
		if( fst == -1 )	down[x] = y;
		if( fst != -1 ) nxt[fst] = y;
		dfs(y,x);
		fst = y;
		sub[x]+=sub[y];
	}
}

int solve( int x, int qtd )
{
	if( x == -1 ) return (qtd == 0);
	if( pd[x][qtd] != -1 ) return pd[x][qtd];
	ll ret = solve(nxt[x],qtd);
	int aux = qtd-a[x];
	for(int i=0;i<=min(aux,sub[x]);++i)
	{
		ll foo = mulMod( solve(down[x],i) , solve(nxt[x],aux-i) );
		ret = addMod( ret, foo );
	}
	return pd[x][qtd] = ret;
}

int main()
{
	//ios::sync_with_stdio(0);
	int t,n,k; scanf("%d",&t);
	while(t--)
	{
		scanf("%d %d",&n,&k);
		for(int i=0;i<n;++i)
		{
			g[i].clear();
			nxt[i] = down[i] = -1;
			scanf("%d",a+i);
		}
		for(int i=0;i+1<n;++i)
		{
			int x,y; scanf("%d %d",&x,&y); x--;y--;
			g[x].pb(y); g[y].pb(x);
		}
		memset(pd,-1,sizeof pd);
		dfs(0,0);
		ll ans = 0;
		for(int x=0;x<n;++x)
		{
			int lol = k-a[x];
			ll aux = solve(down[x], lol);
			ans = addMod( ans, aux );
		}
		printf("%lld\n",ans);
	}

	return 0;
}
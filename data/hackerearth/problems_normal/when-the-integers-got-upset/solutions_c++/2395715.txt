#include<bits/stdc++.h>
using namespace std;
 
int n;
int A[25],P[25];
int mem[13][4100][13][13];
#define m1 1000000000
int sol(int idx,int mask,int last,int lasttolast)
{
    if(idx==n)
    {
        int t;
        t=__builtin_popcount(mask);
        if(t==n)
            return 0;
 
        return m1;
    }
    if(mem[idx][mask][last][lasttolast]!=-1)
        return mem[idx][mask][last][lasttolast];
    int a=m1;
    for(int i=0;i<n;i++)
    {
        if(mask&(1<<i))
            continue;
        if(idx<2)
            a=min(a,sol(idx+1,mask|(1<<i),i,last));
        else
            a=min(a,((A[i]^A[last]^A[lasttolast])*P[idx])+sol(idx+1,mask|(1<<i),i,last));
    }
   mem[idx][mask][last][lasttolast]=a;
    return a;
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&n);
        for(int i=0;i<n;i++)
             scanf("%d",&A[i]);
 
        for(int i=0;i<n;i++)
             scanf("%d",&P[i]);
        memset(mem,-1,sizeof(mem));
        int mask=0;
        int z=1000000000;
        for(int i=0;i<n;i++)
            z=min(z,sol(1,mask|(1<<i),i,n));
        printf("%d\n",z);
    }
    
}

#include <cstdio>
#include <string.h>

using namespace std;

static long long MOD = 1000000007;

template <typename T, int N>
struct Matrix{
    T matrix[N][N];
    Matrix (){ memset(matrix, 0, sizeof matrix); }
    T* operator [] (int i) { return matrix[i]; }
    Matrix operator * (Matrix other){
        Matrix m;
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                for (int k = 0; k < N; k++)
                    m[i][j] = (m[i][j] + matrix[i][k] * other[k][j]) % MOD;
        return m;
    }
    Matrix operator ^ (T p){
        return power (*this, p);
    }
    Matrix power (Matrix m, T p){

        if (p == 1) return m;
        if (p%2) return m * power (m, p - 1);
        Matrix aux = power (m, p/2);
        return aux * aux;
    }
};


int main(){

    int t;

    scanf ("%d", &t);

    while (t--){
        long long n, k, u, v;
        scanf ("%lld %lld %lld %lld", &n, &k, &u, &v);

        Matrix<long long, 50> matrix;
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++){
                int b;
                scanf ("%d", &b);
                matrix[i][j] = b;
            }
            if (k == 0){
                printf ("%d\n", 0);
                continue;
            }

            matrix = matrix ^ (k);
            printf ("%lld\n", matrix[u][v]);
    }


    return 0;
}

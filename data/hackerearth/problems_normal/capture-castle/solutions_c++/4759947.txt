#include <bits/stdc++.h>
using namespace std;
const int size = 1000 + 7;
int N , M ;
int graph[size][size];
int dist[size][size];
int xdir [] = { 1 , 0 , -1  , 0 };
int ydir [] = { 0 , 1 , 0 , -1};
int main()
{
   int x , y, t,T;
   cin >> T;
   while (T--){
   cin >> M >> N;
   //memset(graph , 0 , sizeof(int));
   for(int i = 0; i < M ; i++)
   {
   	 for(int j = 0; j < N ; j++)
   	 {
   	 	 cin >> graph[i][j];
   	 	 dist[i][j] = 1e9;
   	 }
   }
   
   cin >> x >> y >> t;
   x--;
   y--;
   
    queue < pair < int ,int > >q;
    q.push(make_pair(0 , 0));
    dist[0][0]  = graph[0][0];
      bool found = 0;
     while ( !q.empty() )
     {
     	
     pair < int , int > pii = q.front();
     q.pop();
     
     for(int i = 0; i < 4; i++)
     {
     	int newx = pii.first + xdir[i];
     	int newy = pii.second + ydir[i];
     	
     	if(newx < 0 || newx >= M || newy < 0 || newy >=N) continue;
     	 
     	 
     	 
     	if(dist[newx][newy]  > graph[newx][newy] + dist[pii.first][pii.second])
     	{
     	   dist[newx][newy] = graph[newx][newy] + dist[pii.first][pii.second];
     		
     		q.push(make_pair(newx , newy));
     		
     	}
     	
     	
     
     }
     
     }
   if( t - dist[x][y] >=0 )
   {
   	cout <<"YES"<<endl;
   	cout <<  t - dist[x][y] <<endl;
   }
   else
   {
   	cout <<"NO"<<endl;
   }
 
   
   
   
   
   
   }
    return 0;
}

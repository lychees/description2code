#include<iostream>
#include<cstring>

using namespace std;


string preProcess(string s) {
  int n = s.length();
  if (n == 0) return "^$";
  string ret = "^";
  for (int i = 0; i < n; i++)
    ret += "#" + s.substr(i, 1);
 
  ret += "#$";
  return ret;
}
 
string longestPalindrome(string s) {
  string T = preProcess(s);
  int n = T.length();
  int *P = new int[n];
  int C = 0, R = 0;
  for (int i = 1; i < n-1; i++) {
    int i_mirror = 2*C-i; // equals to i' = C - (i-C)
     
    P[i] = (R > i) ? min(R-i, P[i_mirror]) : 0;
     
    // Attempt to expand palindrome centered at i
    while (T[i + 1 + P[i]] == T[i - 1 - P[i]])
      P[i]++;
 
    // If palindrome centered at i expand past R,
    // adjust center based on expanded palindrome.
    if (i + P[i] > R) {
      C = i;
      R = i + P[i];
    }
  }
 
  // Find the maximum element in P.
  int maxLen = 0;
  int centerIndex = 0;
  for (int i = 1; i < n-1; i++) {
    if (P[i] > maxLen) {
      maxLen = P[i];
      centerIndex = i;
    }
  }
  delete[] P;
   
  return s.substr((centerIndex - 1 - maxLen)/2, maxLen);
}

bool isprime(int num){
  int a[168] = {    2  ,    3  ,    5    ,  7   ,  11  ,   13   ,  17 ,    19   ,  23   ,  29 ,
     31   ,  37  ,   41   ,  43 ,    47,     53 ,    59    , 61   ,  67  ,   71 ,
     73,     79,     83,     89,     97   , 101,    103,    107,    109,    113 ,
    127 ,   131 ,   137 ,   139 ,   149    ,151 ,   157 ,   163 ,   167 ,   173 ,
    179  ,  181  ,  191  ,  193  ,  197 ,   199  ,  211  ,  223  ,  227  ,  229 ,
    233   , 239   , 241   , 251   , 257  ,  263   , 269   , 271   , 277   , 281 ,
    283    ,293    ,307    ,311,    313   , 317    ,331,    337 ,   347 ,   349 ,
    353 ,   359 ,   367 ,   373 ,   379    ,383,    389 ,   397  ,  401  ,  409 ,
    419  ,  421  ,  431  ,  433  ,  439 ,   443 ,   449  ,  457   , 461   , 463 ,
    467   , 479   , 487   , 491   , 499  ,  503  ,  509,    521,    523 ,   541 ,
    547    ,557    ,563    ,569 ,   571   , 577   , 587 ,   593 ,   599  ,  601 ,
    607 ,   613,    617 ,   619  ,  631    ,641 ,   643  ,  647  ,  653   , 659 ,
    661  ,  673 ,   677  ,  683   , 691 ,   701  ,  709,    719,    727 ,   733 ,
    739   , 743  ,  751   , 757,    761  ,  769   , 773 ,   787 ,   797  ,  809 ,
    811    ,821   , 823,    827 ,   829   , 839,    853  ,  857  ,  859   , 863 ,
    877 ,   881    ,883 ,   887  ,  907    ,911 ,   919 ,   929 ,   937    ,941 ,
    947  ,  953 ,   967  ,  971   , 977  ,  983  ,  991  ,  997 };
    
    for(int i=0;i<168;i++)
    if(a[i]==num) return true;
    
    return false;
}



int main()
{
  int T;
  cin>>T;
  for(int t=0;t<T;t++){
          string s;
          int max = 0;
          while(cin>>s){
          
          string p = longestPalindrome(s);
          if(p.size()>max) max = p.size();
          if(cin.peek()=='\n') break;
          }
          if(isprime(max)) cout<<"YES"<<endl;
          else cout<<"NO"<<endl;
          
   }
  
 // system("pause");
  return 0;
}
           


#include <iostream>
#include <vector>
using namespace std;
const int inf = 1 << 30;

// Return shortest path from A to B given adjacency matrix adj 
int dijk(int A, int B, vector< vector<int> > &adj) {
  int n = adj.size();
  vector<int> distance(n,inf);
  distance[A] = 0; //distance of source from itself is 0
  
  vector<bool> vis(n);
  for(int i = 0; i < n; ++i) {
    int cur = -1;
    for(int j = 0; j < n; ++j) {
      if (vis[j]) continue;
      if (cur == -1 || distance[j] < distance[cur]) { //gives it index of the node that is at least distance from root
        cur = j;
      }
    }

    vis[cur] = true;
    for(int j = 0; j < n; ++j) {
      int path = distance[cur] + adj[cur][j];
      if (path < distance[j]) {
        distance[j] = path;
      }
    }
  }

  return distance[B];
}


int main()
{

    int nv;
    cin>>nv;
    vector<vector<int>> v(nv, vector<int>(nv,inf));
    
    for(int count=0; count <nv; count++)
    {
        v[count][count]=0;
    }
    int temp;
    for(int count=0; count <nv; count++)
    {
    	for(int count1=0; count1 <nv; count1++)
    	{
    		cin >> temp;
    		v[count][count1]=temp;
    	}
    }
    int m;
    cin >> m;
    
    while(m--){
    	//cout <<"check" << " " << m<<endl;
	    int s,g,d;
	    cin>>s>>g>>d;
	    int a=dijk(s,g,v);
	    int b=dijk(g,d,v);
	    int c=dijk(s,d,v);
	    cout << a+b<<" " << a+b-c<<endl;
    }
    return 0;
    
}

#include <bits/stdc++.h>

using namespace std;

long long dp[1000001];
vector<int> adj[1000001];
vector<pair<int, int>> adjList[1000001];
vector<int> topOrder;
bool visited[1000001];

void dfsTop(int v) {
    visited[v] = true;
    for (int u: adj[v]) {
        if (visited[u]) 
        	continue;
        dfsTop(u);
    }
    topOrder.push_back(v);
}

int main() {
    int N, M;
    cin >> N >> M;
    for (int i = 0; i < M; i++) {
        int r1, r2, t;
        cin >> r1 >> r2 >> t;
        r1--; r2--;
        adj[r1].push_back(r2);
        adjList[r2].push_back({r1, t});
    }
    for (int i = 0; i < N; i++) {
        if (!visited[i]) 
        	dfsTop(i);
    } 
    reverse(topOrder.begin(), topOrder.end());
    long long ans = 0;
    for (int i = 0; i < N; i++) {
        int v = topOrder[i];
        for (pair<int, int> p: adjList[v]) {
            int u = p.first;
            int t = p.second;
            long long c = dp[u] + 2 + t;
            if (dp[v] == -1 || dp[v] < c)
                dp[v] = c;
        }
        ans = max(ans, dp[v]);
    }
    cout << ans << endl;
    return 0;
}
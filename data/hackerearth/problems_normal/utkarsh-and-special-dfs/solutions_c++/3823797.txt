#pragma comment(linker, "/STACK:102400000,102400000")
#include <iostream>
#include <stdio.h>
#include <queue>
#include <algorithm>
#include <map>
#include <string.h>
#include <assert.h>
#include <set>
#include <cmath>
using namespace std;
#define vi vector<int>
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define SZ(x) (int)(x.size())
#define rep(i,a,b) for(int i=a;i<b;i++)
#define per(i,a,b) for(int i=b-1;i>=a;i--)
#define inf 1000000007
#define mod 1000000007
#define x first
#define y second
#define pi acos(-1.0)
#define DBG(x) cerr<<(#x)<<"="<<x<<"\n";
//#define dprintf(...) 
#define hash _hash
//#define dprintf(...) fprintf(outFile,__VA_ARGS__)
 
#define FOREACH(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)
#define ull unsigned long long
#define ll long long
#define N 100010
 
template <class T,class U>inline void Max(T &a,U b){if(a<b)a=b;}
template <class T,class U>inline void Min(T &a,U b){if(a>b)a=b;}
 
//FILE* outFile;
 
inline void add(int &a,int b){a+=b;while(a>=mod)a-=mod;}
 
int pow(int a,int b){
    int ans=1;
    while(b){
        if(b&1)ans=ans*(ll)a%mod;
        a=(ll)a*a%mod;b>>=1;
    }
    return ans;
}

int cnt=0,st[N],ed[N],a[N],w[N],leaf[N],b[N];
vi g[N];
void dfs(int u,int fa,int h=1){
	st[u]=++cnt;w[cnt]=u;
	if(SZ(g[u])==1&&fa!=-1)a[u]=1,leaf[u]=1;
	b[u]=h;
	h=1LL*h*a[u]%mod;
	FOREACH(it,g[u]){
		int j=*it;
		if(j==fa)continue;
		dfs(j,u,h);
	}
	ed[u]=cnt;
}
int t[N<<2],c[N<<2];
void build(int p,int l,int r){
	c[p]=1;
	if(l==r){
		t[p]=b[w[l]];return;
	}
	int m=(l+r)>>1;
	build(p<<1,l,m);
	build(p<<1|1,m+1,r);
	t[p]=(t[p<<1]+t[p<<1|1])%mod;
}
void cal(int p,int v){
	c[p]=1LL*c[p]*v%mod;
	t[p]=1LL*t[p]*v%mod;
}
void down(int p){
	if(c[p]!=1){
		cal(p<<1,c[p]);
		cal(p<<1|1,c[p]);
		c[p]=1;
	}
}
void upd(int p,int l,int r,int x,int y,int v){
	if(l>=x&&r<=y){
		cal(p,v);
		return;
	}
	int m=(l+r)>>1;
	down(p);
	if(x<=m)upd(p<<1,l,m,x,y,v);
	if(y>m)upd(p<<1|1,m+1,r,x,y,v);
	t[p]=(t[p<<1]+t[p<<1|1])%mod;
}
int query(int p,int l,int r,int x,int y){
	if(l>=x&&r<=y)return t[p];
	int m=(l+r)>>1;
	down(p);
	int ans=0;
	if(x<=m)ans=query(p<<1,l,m,x,y);
	if(y>m)add(ans,query(p<<1|1,m+1,r,x,y));
	t[p]=(t[p<<1]+t[p<<1|1])%mod;
	return ans;
}
int main(){
    int T,k,i,j,n,m;
    scanf("%d%d",&n,&m);
    rep(i,1,n){
    	scanf("%d%d",&j,&k);j--,k--;
    	g[j].pb(k);
    	g[k].pb(j);
    }
    rep(i,0,n)scanf("%d",&a[i]);
    dfs(0,-1);
    build(1,1,n);
    while(m--){
    	scanf("%d%d",&k,&i);i--;
    	if(k==1){
    		scanf("%d",&j);
    		if(leaf[i])continue;
    		int v=1LL*j*pow(a[i],mod-2)%mod;
    		a[i]=j;
    		upd(1,1,n,st[i]+1,ed[i],v);
    	}
    	else{
    		printf("%d\n",query(1,1,n,st[i],ed[i]));
    	}
    }
    return 0;
}
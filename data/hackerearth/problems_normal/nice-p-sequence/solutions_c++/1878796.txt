#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
//#define _LOCAL_
#ifdef _LOCAL_
#include "testlib.h"
/* rnd */
#endif

using namespace std;

#define dbg(x) cout << #x << " = " << (x) << endl
#define dbg2(x,y) cout << #x << " = " << (x) << ", " << #y << " = " << (y) << endl
#define dbg3(x,y,z) cout << #x << " = " << (x) << ", " << #y << " = " << (y) << ", " << #z << " = " << (z) << endl

template<class T> inline T cabs(T x) { return x > 0 ? x : (-x); }
template<class T> inline T gcd(T x, T y) { return (y == 0) ? x : gcd(y, x % y); }

#define out(x) cout << (x) << endl
#define out2(x,y) cout << (x) << " " << (y) << endl
#define out3(x,y,z) cout << (x) << " " << (y) << " " << (z) << endl

#define ll long long

ll ext_gcd (ll a,ll b,ll &x,ll &y){
	ll t,ret;
	if (!b){
		x = 1,y = 0;
		return a;
	}
	ret = ext_gcd (b,a % b,x,y);
	t = x,x = y,y = t-a/b *y;
	return ret;
}

int main()
{
    int nt;
    scanf("%d", &nt);
    ll a, n, p, x, y, d, res;
    for(; nt > 0; nt --) {
        scanf("%lld %lld %lld", &a, &p, &n);
        d = ext_gcd(a, p, x, y);
        if( d != 1 )
            printf("-1\n");
        else {
            while( x < 0 )
                x += p;
            while( x >= p )
                x -= p;
            res = a * ((n + 1) / 2) + x * (n - (n + 1) / 2);
            printf("%lld\n", res);
        }
    }
    return 0;
}

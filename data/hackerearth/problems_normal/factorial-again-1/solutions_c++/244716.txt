#include <cstdio>
#include <cstdlib>

int extendegGcdInverse(int a, int m);
int getFactorialResult(int n, int p);
int getPower(int n, int pow, int modulus_num);


int main(int argc, char* argv[]){
	
	int cases;
	scanf("%d", &cases);

	for( int i=0; i<cases; i++) {
		int n, p;
		scanf("%d %d ", &n, &p);
		int result;
		if(3*n>=p) 
			result=0;
		else 
			result=getFactorialResult(n,p);
		printf("%d\n",result);
	}

	return 0;
}

int getFactorialResult(int n, int p){
	long long powerTerm=getPower(6,n, p);
	long long denomPart2=1;
	for(int i=3*n+1; i<=p-1; i++)
		denomPart2=(denomPart2*i)%p;

	long long denom= (powerTerm*denomPart2)%p;
	long long denomInverse=extendegGcdInverse(denom,p);
	return ((long long)(p-1)*denomInverse)%p;
}

int getPower(int n, int pow, int modulus_num){
	if(pow==0)
		return 1;
	if(pow%2==0){
		long long halfPow=getPower(n,pow/2,modulus_num);
		return ( halfPow*halfPow )%modulus_num;
	} else 
		return ( (long long)n*getPower(n,pow-1,modulus_num) )%modulus_num;
}

int extendegGcdInverse(int a, int m){
	int t=0, new_t=1;
	int r=m, new_r=a;
	while(new_r!=0){
		int quotient= r/new_r;
		int rtemp=new_r;	
		new_r=r-quotient*new_r;
		r=rtemp;

		int ttemp=new_t;
		new_t=t-quotient*new_t;
		t=ttemp;
	}

	if(r>1) 
		return -1;
	if(t<0)
		t+=m;
	
	return t;
}

#include <bits/stdc++.h>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<math.h>
#include<stack>
#include<stdio.h>
#include<stdlib.h>
#include<queue>
#include <cstdio>
#include <sstream> 
#include <tuple>
#include <set>
 
 
 
using namespace std;
 
typedef long long ll;
 typedef pair<int, int> pairs;
#define F first
#define S second
#define rep(i,n) for(i=0;i<n;i++)
#define srt(i) sort(i.begin(),i.end())
#define vct(i,n) vector<ll> i[n]
#define vctp(i,n) vector < pair<ll,ll> > i[n];
#define arrp(i,n) pair<ll,ll> i[n];
#define modu(i) ((i<0)?(-1*i):(i)) //or use abs
#define endl '\n'
#define pi 3.14
 
bool hae=1;
    
ll MOD=1e9+7;
ll p=1e9+7;
ll length;
ll kk=0;
ll kkk=0;
ll res[10001]={0};
ll i,tt;
 
template<typename P> struct Cmp
{
    bool operator()(const P &p1, const P &p2)
    {
        if(p1.first > p2.first) return true;
        if(p1.first == p2.first) return p1.second < p2.second;
        return false;
    }
};

struct cmp
{
  bool operator() (const pair<int, int>& a, const pair<int, int>& b)
  {
    return a.second < b.second;
  }
};
ll Arr[1000001];


 struct cmpStruct {
  bool operator() (int const & lhs, int const & rhs) const
  {
    return lhs > rhs;
  }
};


 struct cmpStructt {
  bool operator() (int const & lhs, int const & rhs) const
  {
    return lhs < rhs;
  }
};


 
 
 
int main() 
{
 
 multiset<ll,cmpStruct> maxx;
 std::set<ll>::iterator it;
  
  std::ios_base::sync_with_stdio(false);cin.tie(NULL);
  ll q,a,in;
  cin>>q;
  while(q--)
  {
    cin>>a;
         if(a==1)
          {
            cin>>in;
           
            maxx.insert(in);

          }
          if(a==2)
          {
            cin>>in;
        
             it=maxx.find(in);
             if(it==maxx.end() )
             {
              cout<<"-1\n";
             }
             else
             {
              
               maxx.erase(it);
             }

          }
          if(a==3)
          {
           
            if(maxx.empty())
              cout<<"-1\n";
            else
            {
               it=maxx.begin();
            cout<<*it<<endl;
          }

          }
          if(a==4)
          {
            if(maxx.empty())
              cout<<"-1\n";
            else
            {
              it=maxx.end();
            it--;
            cout<<*it<<endl;
             }

          }

  }
 
  return 0;
}

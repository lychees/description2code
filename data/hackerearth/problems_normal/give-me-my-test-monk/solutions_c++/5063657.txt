/*input
3 1 3
*/

#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007
#define M 107
typedef long long ll;

ll nCr[M][M];
ll D[M], F[M];
 
ll gcdExtended(ll a, ll b, ll *x, ll *y)
{
    if (a == 0)
    {
        *x = 0, *y = 1;
        return b;
    }
    ll x1, y1;
    ll gcd = gcdExtended(b%a, a, &x1, &y1);
 
    *x = y1 - (b/a) * x1;
    *y = x1;
    return gcd;
}

ll modInverse(ll a, int m)
{
    ll x, y;
    ll g = gcdExtended(a, m, &x, &y);
    ll res = (x%m + m) % m;
    return res;
}

int main() {
    int N, L, R;
    cin >> N >> L >> R;

    ll sum = 0LL;

    D[0] = 1;      D[1] = 0;
    for (int i = 2; i <= 100; i++)
        D[i] = ((i - 1) * (D[i - 1] + D[i - 2])) % MOD;

    F[0] = F[1] = 1;
    for (int i = 2; i <= 100; i++)
        F[i] = (F[i - 1] * i) % MOD;

    for (int i = 1; i <= 100; i++) 
        for (int j = 0; j <= i; j++)
            if (j == 0 || j == i)
                nCr[i][j] = 1;
            else
                nCr[i][j] = (nCr[i - 1][j - 1] + nCr[i - 1][j]) % MOD;


    for (int i = L; i <= R; i++) {
        sum = (sum + nCr[N][i] * D[i]) % MOD;
    }

    ll total = modInverse(F[N], MOD);
    cout << (sum * total) % MOD << endl;
}
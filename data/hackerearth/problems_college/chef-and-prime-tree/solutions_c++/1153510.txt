#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;
int arr[5000005];

int scanint()
{
    register int c = getchar();
    int x = 0;
    for(;(c<48 || c>57);
    c = getchar());
    for(;c>47 && c<58;c = getchar())
        x = (x<<1) + (x<<3) + c - 48;

    return x;
}


void sieve(int max)
{
    int i;
    arr[0] = 1;
    arr[1] = 1;
    for (i = 2; i <= max; i++) {
        int j = 2, num;
        while ((num = i*j) <= max) {
            arr[num] = 1;
            j++;
        }
    }
}

int main()
{
    int q, i;
    memset(arr, 0, sizeof(arr));
    q = scanint();
    sieve(5000002);

    while (q--) {

            int x, y;

            x=scanint();
            y=scanint();

            vector <int> a;
            vector <int> b;
            vector <int> a1;
            vector <int> b1;
            vector <int> v(10000);
            vector<int>::iterator it;
            int x1 = x, y1 = y;
            while (x1 >= 1) {
                a.push_back(x1);
                if (x1 % 2 == 0)
                    x1 = x1 / 2;
                else
                    x1 = (x1 - 1) / 2;
            }

            while (y1 >= 1) {
                b.push_back(y1);
                if (y1 % 2 == 0)
                    y1 = y1 / 2;
                else
                    y1 = (y1 - 1) / 2;
            }

            a1 = a;
            b1 = b;
            sort(a1.begin(), a1.end());
            sort(b1.begin(), b1.end());

            vector <int>::iterator first1 = a1.begin(), last1 = a1.end(), first2 = b1.begin(), last2 = b1.end();

            it=std::set_intersection (first1, last1, first2, last2, v.begin());
            v.resize(it-v.begin());

            int common = *(v.end() - 1);
            //cout << common;

            long long int sum = 0;
            for (it = a.begin(); it != a.end(); it++) {
                if (*it == common)
                    break;
                if (arr[(*it)] == 1)
                    sum += (*it);
                else
                    sum -= (*it);
            }

            for (it = b.begin(); it != b.end(); it++) {
                if (*it == common)
                    break;
                if (arr[(*it)] == 1)
                    sum += (*it);
                else
                    sum -= (*it);
            }
            if (arr[common] == 1)
                sum += common;
            else
                sum -= common;

            printf("%lld\n", sum);
        }

        return 0;
}

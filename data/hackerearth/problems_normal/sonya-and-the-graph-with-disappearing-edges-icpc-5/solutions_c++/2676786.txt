#include<bits/stdc++.h>
using namespace std;

int main()
{
	int edges[100000][2];
	int n, m, k, t, x;
	int visited[100001] = {0};
	queue<int> q;
	map<int, set <int> > mymap;
	set<int>::iterator sit;
	map<int, set<int> >::iterator mit;

	std::map<int, set<int> > dis;


	scanf("%d%d%d", &n, &m, &k);

	for(int i = 1; i <= m; i++)
	{
		scanf("%d%d", &edges[i][0], &edges[i][1]);
		mymap[edges[i][0]].insert(edges[i][1]);
		mymap[edges[i][1]].insert(edges[i][0]);
	}


	/*for(mit = mymap.begin(); mit != mymap.end(); mit++)
	{
		for(sit = (mit->second).begin(); sit != (mit->second).end(); sit++)
		{
			cout << mit->first << ' ' << *sit << endl;
		}
	}*/

	//visited[1] = 1;

	for(int i = 0; i < k; i++)
	{
		scanf("%d%d", &t, &x);
		dis[t].insert(x);
	}

	/*for(mit = dis.begin(); mit != dis.end(); mit++)
	{
		for(sit = (mit->second).begin(); sit != (mit->second).end(); sit++)
		{
			cout << mit->first << ' ' << *sit << endl;
		}
	}*/

	q.push(1);
	//cout << "vivek" << q.empty() << endl;

	for(int i = 1; !q.empty(); i++)
	{
		if(dis.find(i) != dis.end())
		{
			for(sit = dis[i].begin(); sit != dis[i].end(); sit++)
			{
				mymap[edges[*sit][0]].erase(edges[*sit][1]);
				mymap[edges[*sit][1]].erase(edges[*sit][0]);
			}
		}

		int qs = q.size();

		for(int j = 0; j < qs; j++)
		{
			int vertex = q.front();
			q.pop();
			//cout << i << ' ' << vertex << endl;
			if(visited[vertex] == 1)
				continue;
			if(vertex == n)
			{
				printf("%d\n", i - 1);
				return 0;
			}

			for(sit = mymap[vertex].begin(); sit != mymap[vertex].end(); sit++)
			{
				q.push(*sit);
			}

			visited[vertex] = 1;

		}

	}

	printf("-1\n");
	return 0;

}
#include <bits/stdc++.h>
using namespace std;

int conv(char c)
{
	if (c >= 'A' && c <= 'Z')
		return c - 'A' + 10;
	return c - '0';
}

int main()
{
    int tt;
    for (cin >> tt; tt > 0; tt--)
    {
    	int n;
    	cin >> n;
    	char f[n][n + 1];
    	for (int i = 0; i < n; i++)
    		scanf("%s", f[i]);
		char status[n + 1];
		scanf("%s", status);
		int k;
		cin >> k;
		
		int awake = 0;
		for (int i = 0; i < n; i++)
			if (status[i] == 'Y')
				awake++;
		if (awake == 0 || k > n)
		{
			puts("Poor Navkrish.");
			continue;
		}
		if (awake >= k)
		{
			puts("0");
			continue;
		}
		
		int start = 0;
		for (int i = 0; i < n; i++)
			if (status[i] == 'Y')
				start |= 1 << i;
		queue<int> q;
		q.push(start);
		bool vis[1 << n];
		int d[1 << n];
		for (int i = 0; i < 1 << n; i++)
			d[i] = 1000000000;
		d[start] = 0;
		memset(vis, 0, sizeof vis);
		int ans = 1000000000;
		for (int iter = 0; iter < k - awake; iter++)
		{
			queue<int> nq;
			while (q.size() > 0)
			{
				int x = q.front();
				q.pop();
				vector<int> v;
				for (int i = 0; i < n; i++)
					if ((x >> i & 1) == 0)
						v.push_back(i);
				for (int i = 0; i < n; i++)
					if (x >> i & 1)
						for (int j = 0; j < v.size(); j++)
							if ((x >> v[j] & 1) == 0)
							{
								int y = x | 1 << v[j];
								if (!vis[y])
								{
									nq.push(y);
									vis[y] = true;
								}
								int nc = d[x] + conv(f[i][v[j]]);
								d[y] = min(d[y], nc);
								if (iter == k - awake - 1)
									ans = min(ans, nc);
							}
			}
			q = nq;
		}
		cout << ans << endl;
    }
    
    return 0;
}

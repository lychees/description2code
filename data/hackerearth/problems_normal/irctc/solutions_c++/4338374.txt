#include<bits/stdc++.h>
using namespace std;
#define ull long long int
#define INF 10000000000013
vector<vector<pair<int,int> > >graph;
priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >pq;
ull n,m;
bool finalize[100005];
ull parent[100005];
ull dist[100005];
vector<ull>path;
void railways(int x)
{
    int p,vertex,weight;
    pq.push(make_pair(dist[x],x));
    while(!pq.empty())
    {
        p=pq.top().second;
        pq.pop();
        if(finalize[p])
            continue;
        for(int i=0;i<graph[p].size();i++)
        {
            vertex=graph[p][i].first;
            weight=graph[p][i].second;
            if(!finalize[p] && dist[vertex]>dist[p]+weight)
            {
                dist[vertex]=dist[p]+weight;
                pq.push(make_pair(dist[vertex],vertex));
                parent[vertex]=p;
            }
        }
        finalize[p]=true;
    }
    return;
}
void printpath(ull x,vector<ull> & myvec)
{
    if(x==0)
        return;
    printpath(parent[x],myvec);
    path.push_back(x);
    return;
}
int main()
{
    ios::sync_with_stdio(false);
    ull t,i,x,y,w,a,b,c;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;
        path.clear();
        graph.clear();
        graph.resize(n+3);
        for(i=0;i<m;i++)
        {
            cin>>x>>y>>w;
            graph[x].push_back(make_pair(y,w));
            graph[y].push_back(make_pair(x,w));
        }
        cin>>a>>b>>c;
        x=0;
        for(i=1;i<=n;i++)
            dist[i]=INF;
        dist[a]=0;
        memset(finalize,false,sizeof(finalize));
        parent[a]=0;
        railways(a);
        if(dist[b]!=INF){
            x+=dist[b];
        }
        else{
            cout<<"No Train Found.\n";
            continue;
        }
        printpath(b,path);
        path.pop_back();
        for(i=1;i<=n;i++)
            dist[i]=INF;
        dist[b]=0;
        memset(finalize,false,sizeof(finalize));
        parent[b]=0;
        railways(b);
        if(dist[c]!=INF){
            x+=dist[c];
        }
        else{
            cout<<"No Train Found.\n";
            continue;
        }
        printpath(c,path);
        cout<<x<<"\n";
        for(i=0;i<path.size();i++)
            cout<<path[i]<<" ";
        cout<<"\n";
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

int n, m;

int level[35][27];
int input[35][27];
int goal[27];

bool possible;

void getAnswer(int index)
{
    int i, j;

    bool isthis = true;
    for (i = 0; i < 26; i++)
    {
        if (level[index][i] != goal[i])
        {
            isthis = false;
            break;
        }
    }
    if (isthis)
    {
        possible = true;
        return;
    }

    if (index > n)
    {
        return;
    }

    //don't take current string
    for (i = 0; i < 26; i++)
    {
        level[index+1][i] = level[index][i];
    }

    //cout << "without " << index << "\n";

    getAnswer(index+1);

    if (possible)
    {
        return;
    }

    int test;
    bool canTake = true;
    //take current string

    //cout << "taking " << index << "\n";

    for (i = 0; i < 26; i++)
    {
        level[index+1][i] += input[index][i];
        if (level[index+1][i] > goal[i])
        {
            canTake = false;
            break;
        }
    }

    if (canTake)
    {
        getAnswer(index+1);

        if (possible)
        {
            return;
        }
    }
}

int main()
{
    #ifdef VSP4
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // VSP4

    int t, i, j, k, ans;
    string str;

    cin >> t;

    while (t--)
    {
    	cin >> n;

    	for (i = 1; i <= n; i++)
    	{
            cin >> str;

            for (j = 0; j < 26; j++)
            {
                input[i][j] = 0;
                level[i][j] = 0;
            }

            for (auto s: str)
            {
                input[i][s - 'a']++;
            }
    	}

    	memset(goal, 0, sizeof(goal));

    	cin >> str;

        for (auto s: str)
        {
            goal[s - 'a']++;
        }

        possible = false;

        getAnswer(1);

        if (possible)
        {
            cout << "YES\n";
        }
        else
        {
            cout << "NO\n";
        }

    }
    return 0;
}

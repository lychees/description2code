#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <cmath>

#define pb push_back
#define mp make_pair
#define sqr(x) ((x)*(x))
#define forn(i,n) for(int i  = 0;i<(int)n;i++)
#define dforn(i,n) for(int i = n-1;i>=0;i--)

using namespace std;

inline void readInt(int &num){
    num = 0;
    int c = getchar();
    int s = 1;
    if(c == '-'){
        s = -1;
        c = getchar();
    }
    while(c>='0'&&c<='9'){
        num = num*10+(c-'0');
        c = getchar();
    }
    num*=s;
}

inline void printInt(int num){
    string s="";
    if(num<0){
        putchar('-');
        num = -num;
    }
    if(num==0)
    	putchar('0');
    while(num){
        s+='0'+ num%10;
        num/=10;
    }
    dforn(i,s.size()){
        putchar(s[i]);
    }
}

inline void readLL(long long &num){
    num = 0;
    int c = getchar();
    int s = 1;
    if(c == '-'){
        s = -1;
        c = getchar();
    }
    while(c>='0'&&c<='9'){
        num = num*10+(c-'0');
        c = getchar();
    }
    num*=s;
}

inline void printLL(long long num){
    string s="";
    if(num<0){
        putchar('-');
        num = -num;
    }
    if(num==0)
    	putchar('0');
    while(num){
        s+='0'+ num%10;
        num/=10;
    }
    dforn(i,s.size()){
        putchar(s[i]);
    }
}

inline void readString(string &s){
    s = "";
    char c = getchar();
    while(c!=' '&&c!='\n'&&c!=EOF){
        s+=c;
        c = getchar();
    }
}

inline void readLine(string & s){
    s = "";
    char c = getchar();
    while(c!='\n'&&c!=EOF){
        s+=c;
        c = getchar();
    }
}

inline void printString(const string &s){
    forn(i,s.size())
        putchar(s[i]);
}                                               

int froot(vector<int> &root,int a){
	while(root[a]!=a){
		root[a] = root[root[a]];
		a = root[a];
	}
	return a;
}

void my_union(int a,int b,vector<int> &root,vector<int> &size){
	int rootA = froot(root, a);
	int rootB = froot(root, b);
	if(rootA!=rootB){
		if(size[rootA]>=size[rootB]){
			root[rootB] = root[rootA];
			size[rootA]+=size[rootB];
		}else{ 
	    	root[rootA] = root[rootB];
	    	size[rootB]+= size[rootA];
		}
	}
}

int maxSpan(const vector<pair<int,pair<int,int>>> &v,vector<int> &r,vector<int> &s){
	int cost,maxCost;
	maxCost = 0;
	dforn(i,v.size()){              
		int x = v[i].second.first;
		int y = v[i].second.second;
		cost = v[i].first;
		if(froot(r,x)!=froot(r,y)){
			maxCost+=cost;
			my_union(x,y,r,s);
		}
	}
	return maxCost;
}

int main()
{
    #ifdef Home
    	freopen("in.txt","r",stdin);
    	freopen("out.txt","w",stdout);
    #endif
    int test;
    readInt(test);
    forn(t,test){
    	int n,m;
    	readInt(n);readInt(m);
    	vector<pair<int,pair<int,int>>>g;
    	vector<int>r(n+1);
    	forn(i,n+1){
    		r[i] = i;	
    	}
    	vector<int>s(n+1,1);
    	forn(i,m){
    		int a,b,c;
    		readInt(a);readInt(b);readInt(c);
    		g.pb(mp(c,mp(a,b)));
    	}
    	sort(g.begin(),g.end());
    	int ans = maxSpan(g,r,s);
    	cout<<ans<<endl;
    }
    
    return 0;
}

#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>

using namespace std;

const int N = 100010;
const int MOD = 1e9 + 7;

int f[N], prefix[N], suffix[N];

int pow_mod(int a, int b) {
    int r = 1;
    while (b) {
        if (b & 1) r = (long long)r * a % MOD;
        a = (long long)a * a % MOD;
        b >>= 1;
    }
    return r;
}

int nCk(int n, int k) {
    if (n < k) return 0;
    return (long long)f[n] * pow_mod((long long)f[k] * f[n - k] % MOD, MOD - 2) % MOD;
}

int main() {
//    freopen("in", "r", stdin);
//    ios::sync_with_stdio(false);
//    cin.tie(nullptr);
    f[0] = 1;
    for (int i = 1; i < N; ++i) {
        f[i] = (long long)f[i - 1] * i % MOD;
    }
    int tt;
    cin >> tt;
    while (tt--) {
        string s;
        int k;
        cin >> s >> k;
        int n = s.size();
        for (int i = 1; i <= n; ++i) {
            prefix[i] = prefix[i - 1] + (s[i - 1] == 'l');
        }
        suffix[n + 1] = 0;
        for (int i = n; i >= 1; --i) {
            suffix[i] = suffix[i + 1] + (s[i - 1] == 'l');
        }
        int answer = 0;
        k /= 2;
        for (int i = 1; i <= n; ++i) {
            if (s[i - 1] == 'u') {
                int x = nCk(prefix[i - 1], k);
                int y = nCk(suffix[i + 1], k);
                answer = (answer + (long long)x * y) % MOD;
            }
        }
        cout << answer << '\n';
    }
}
#include<bits/stdc++.h>
using namespace std;

class dsu
{
public:
    vector<int> parent;
    dsu(int n) {parent.assign(n+1,0);for(int i=1;i<=n;i++)parent[i]=i;}
    int find(int a) {return a==parent[a]?a:parent[a]=find(parent[a]);}
    void join(int i,int j) {parent[find(j)]=find(i);}
    bool check(int i,int j) {return find(i)==find(j);}
    int size() {return parent.size();}
};

void solve()
{
    int n,m;
    cin>>n>>m;
    int a[n+1],b[n+1],position[100001];
    memset(position,-1,sizeof(position));
    for(int i=1;i<=n;i++) {cin>>a[i];position[a[i]]=i;}
    for(int i=1;i<=n;i++) {cin>>b[i];}
    dsu d(n);
    for(int i=0;i<m;i++)
    {
        int x,y;
        cin>>x>>y;
        d.join(x,y);
    }
    bool possible=true;
    for(int i=1;i<=n;i++)
    {
        int j=position[b[i]];
        if(!d.check(i,j))
        {
            possible=false;
            break;
        }
    }
    if(possible) cout<<"YES"<<endl;
    else cout<<"NO"<<endl;
}

int main()
{
    int t;
    cin>>t;
    while(t--) solve();
    return 0;
}

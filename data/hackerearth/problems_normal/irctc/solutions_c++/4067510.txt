#define MAX_SIZE 1000000000

#include<iostream>
#include<vector>
#include<utility>
#include<queue>
using namespace std;

int main()
{
	int t;
	long k,n,a,b,c,d;
	
	long vis[100004],dst[100004],par[100003],sum,arr[100004];
	
	cin>>t;
	
	
	while(t--)
	{
		sum=0;
		cin>>n>>k;vector<pair<long ,long> > graph[100004]; 
		for(int i=0;i<=n;i++)
		{
			vis[i]=-1;
			dst[i]=MAX_SIZE;
			par[i]=-1;
		}
		while(k--)
		{
			cin>>a>>b>>c;
			graph[a].push_back(make_pair(c,b));
			graph[b].push_back(make_pair(c,a));
		}
		cin>>a>>b>>c;
		dst[a]=0;
		priority_queue<pair<long,long > > queue;
		queue.push(make_pair(0,a));
		while(!queue.empty())
		{
			pair<long, long > p=queue.top();
			queue.pop();
			long src=p.second,wgh=-(p.first);
			if(vis[src]==1)
				continue;
			vis[src]=1;
			for(long i=0;i<graph[src].size();i++)
			{
				long e=graph[src][i].second,q=graph[src][i].first;
				if(dst[e]>dst[src]+q)
				{
					dst[e]=dst[src]+q;
					par[e]=src;
					queue.push(make_pair(-dst[e],e));
				}
			}
		}
		long w=b,e=0;arr[0]=w;
		
		while(par[w]!=-1)
		{
			e++;
			w=par[w];arr[e]=w;
		}
		if(w!=a)
		{
			cout<<"No Train Found.\n";
			continue;
		}
			
		sum=dst[b];
		for(int i=0;i<=n;i++)
		{
			vis[i]=-1;
			dst[i]=MAX_SIZE;
			par[i]=-1;
		}
		dst[b]=0;
		queue.push(make_pair(0,b));
		while(!queue.empty())
		{
			pair<long, long > p=queue.top();
			queue.pop();
			long src=p.second,wgh=-(p.first);
			if(vis[src]==1)
				continue;
			vis[src]=1;
			for(long i=0;i<graph[src].size();i++)
			{
				long e=graph[src][i].second,q=graph[src][i].first;
				if(dst[e]>dst[src]+q)
				{
					dst[e]=dst[src]+q;
					par[e]=src;
					queue.push(make_pair(-dst[e],e));
				}
			}
		}
		w=c;
		long r=e;
		arr[++e]=c;
		while(par[w]!=-1)
		{
			e++;
			w=par[w];arr[e]=w;
		}
		if(w!=b)
		{
			cout<<"No Train Found.\n";
			continue;
		}
		sum+=dst[c];
		cout<<sum<<endl;
		
		for(long i=r;i>0;i--)
			cout<<arr[i]<<" ";
		for(long i=e;i>r;i--)
			cout<<arr[i]<<" ";
		cout<<endl;	
	}
	
	return 0;
}
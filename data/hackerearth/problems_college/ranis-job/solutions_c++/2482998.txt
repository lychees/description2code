
#include <bits/stdc++.h>
using namespace std;
#define  _CRT_SECURE_NO_DEPRECATE	//suppress some compilation warning messages

// Shortcuts for "common" data types in contests
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;

// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)

#define INF 2000000000 // 2 billion
// If you need to recall how to use memset:
#define MEMSET_INF 127 // about 2B
#define MEMSET_HALF_INF 63 // about 1B
//memset(dist, MEMSET_INF, sizeof dist); // useful to initialize shortest path distances
//memset(dp_memo, -1, sizeof dp_memo); // useful to initialize DP memoization table
//memset(arr, 0, sizeof arr); // useful to clear array of integers
/*
void print(int X)
{
  if(X<0) { putchar_unlocked('-');  X=-X;  }
  int Len=0,Data[10];
  while(X) { Data[Len++]=X%10; X/=10; }
  if(!Len) Data[Len++]=0;
  while(Len--) putchar_unlocked(Data[Len]+48);
}*/

vector<int>remain;
vector<int>capacity;
vector<int>cum;
int n;
int sum;
bool check(int num)
{
	int tot = cum[num - 1];
		
	if(tot <= sum) {
		return true;
	}		
	else {
		return false;
	}
}

void solve()
{
	sum = 0;
	scanf("%d", &n);
	remain.resize(n);
	capacity.resize(n);
	cum.resize(n);
	for(int i = 0; i < n; i++) {
		scanf("%d", &remain[i]);
		sum += remain[i];
	}
	for(int i = 0; i < n; i++) {
		scanf("%d", &capacity[i]);
	}
	sort(capacity.begin(), capacity.end());
	reverse(capacity.begin(), capacity.end());
	cum[0] = capacity[0];
	for(int i = 1; i < n; i++) {
		cum[i] = cum[i - 1] + capacity[i];
	}
	for(int i = 0; i < n; i++) {
		if(cum[i] >= sum) {
			printf("%d\n", i + 1);
			return;
		}
	}
	//printf("%d\n", ans);
}

int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define ll long long

const int mod=1000000007;
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
bool* isPrime;
void generatePrimeSieve(const int lim)
{
  isPrime=(bool *)malloc(lim+1);
  memset(isPrime,true,lim+1);
  isPrime[0]=false;
  isPrime[1]=false;
  for(int i=2;i<=lim;++i)
    if(isPrime[i])
      for(int j=i+i;j<=lim;j+=i)
        isPrime[j]=false;
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}
int R[30000],L[30000];
// vector<pii> intervals;
set<int> times;
int main()
{
  // std::ios::sync_with_stdio(false);
  
  

  int t;
  scanf("%d",&t);
  while(t--)
  {
    int n;
    ll a,b,c;
    scanf("%d%lld%lld%lld",&n,&a,&b,&c);
    times.clear();
    for(int i=0;i<n;++i)
    {
      int u,v;
      cin>>u>>v;
      L[i]=u;
      R[i]=v;
      times.insert(u);
      times.insert(v);
    }
    sort(L,L+n);
    sort(R,R+n);
    times.insert(-1);
    times.insert(infinity);


  vector<int> T(times.begin(),times.end());

  ll best=-1;
  for(int i=0;i<T.size();++i)
  {
    int typeA= L+n-upper_bound(L,L+n,T[i]);

    int typeC= lower_bound(R,R+n,T[i])-R;

    int typeB=n-typeA-typeC;

    ll cost= typeA*a + typeB*b + typeC*c;
    best=max(best,cost);
  } 

  printf("%lld\n",best);
  // cout<<best<<"\n";

  } 






  
}
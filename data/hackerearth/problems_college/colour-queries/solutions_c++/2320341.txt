#include<iostream>
#include<math.h>
#include<string.h>
using namespace std;

int matrix[100][100];
bool color[100][100] = { false, };
int m, n;

void allColorCount(int x, int y, int d) {

	if (color[x][y] == true) {
		if (x + 1 < m && abs(matrix[x + 1][y] - matrix[x][y]) <= d) {
			if (color[x + 1][y] == false) {
				color[x + 1][y] = true;
				allColorCount(x + 1, y, d);
			}
		}
		if (x - 1 >= 0 && abs(matrix[x - 1][y] - matrix[x][y]) <= d) {
			if (color[x - 1][y] == false) {
				color[x - 1][y] = true;
				allColorCount(x - 1, y, d);
			}
		}
		if (y + 1 < n && abs(matrix[x][y + 1] - matrix[x][y]) <= d) {
			if (color[x][y + 1] == false) {
				color[x][y + 1] = true;
				allColorCount(x, y + 1, d);
			}
		}
		if (y - 1 >= 0 && abs(matrix[x][y - 1] - matrix[x][y]) <= d) {
			if (color[x][y - 1] == false) {
				color[x][y - 1] = true;
				allColorCount(x, y - 1, d);
			}
		}
	}
}

int main() {
	int q;
	cin >> m >> n >> q;
	
	//*matrix = new int[m];
	//*color = new bool[m];

	for (int i = 0; i < m; i++) {
		//matrix[i] = new int[n];
		//color[i] = new bool[n];

		for (int j = 0; j < n; j++) {
			cin >> matrix[i][j];
		}
	}
	int count = 0;
	for (int l = 0; l < q; l++) {
		memset(color, false, sizeof(color));

		int x, y, d;
		cin >> x >> y >> d;
		color[x-1][y-1] = true;

		allColorCount(x-1, y-1, d);

		for (int row = 0; row < m; row++) {
			for (int col = 0; col < n; col++) {
				if (color[row][col]) count++;
			}
		}
		cout<<count<<endl;
		count = 0;
	}
	
	return 0;
}

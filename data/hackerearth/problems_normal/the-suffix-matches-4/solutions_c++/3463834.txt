#include<bits/stdc++.h>
using namespace std;
struct Suffixarray{
string str;
int l;
vector<pair<pair<int,int>,int> > m;
vector<vector<int> > p;
Suffixarray(string s):l(s.length()),str(s),p(1,vector<int>(l,0)),m(l){
  for(int i=0;i<l;i++)p[0][i]=int(s[i]);

  for(int level=1,skip=1;skip<l;level++,skip*=2){
    p.push_back(vector<int>(l,0));
    for(int i=0;i<l;i++){
       m[i]=make_pair(make_pair(p[level-1][i],i+skip<l?p[level-1][i+skip]:-10000),i);
     }
     sort(m.begin(),m.end());
     for(int i=0;i<l;i++){
        p[level][m[i].second]=i>0&&m[i].first==m[i-1].first?p[level][m[i-1].second]:i;
     }




  }


}
vector<int> GetsuffixArray(){return p.back();}
int lcp(int i,int j){
   int len=0;
  if(i==j)
    return l-i;
  for(int k=p.size()-1;k>=0&&i<l&&j<l;k--){
    if(p[k][i]==p[k][j]){
        i+=1<<k;
        j+=1<<k;
        len+=1<<k;
    }
  }

return len;


}
};
int main(){
string str;
cin>>str;
reverse(str.begin(),str.end());
Suffixarray sa(str);
vector<int> v=sa.GetsuffixArray();
int T;
cin>>T;
while(T--){
    int index;
    cin>>index;
    int ans=sa.lcp(0,sa.l-index);
    cout<<ans<<endl;
}
}

#include <iostream>
#include <algorithm>
using namespace std;

int n,m;
int root(int parent[],int x)
{
	while(parent[x]!=x){
		parent[x]=parent[parent[x]];
		x=parent[x];
	}
	return x;
}
void setUnion(int parent[],int x, int y)
{
	int rootx=root(parent,x);
	int rooty=root(parent,y);
	parent[rootx]=rooty;

}
int kruskal(pair<int,pair<int,int>> edges[])
{
	int type,x,y,res=0,parent1[1001],parent2[1001],i,count1=0,count2=0;
	for(int i=1;i<=n;i++){
		parent1[i]=i;
		parent2[i]=i;
	}
	
	for(int i=0;i<m;i++){
		x=edges[i].second.first;
		y=edges[i].second.second;
		type=edges[i].first;
		if(type==3){
			if(root(parent1,x)!=root(parent1,y)){
				setUnion(parent1,x,y);
				setUnion(parent2,x,y);
				res+=1;
			}
		}
		else if(type==2){
			if(root(parent2,x)!=root(parent2,y)){
				setUnion(parent2,x,y);
				res+=1;
			}
		}
		else if(type==1){
			if(root(parent1,x)!=root(parent1,y)){
				setUnion(parent1,x,y);
				res+=1;
			}
		}
	}
	for(i=1;i<=n;i++){
		if(parent1[i]==i)
			count1++;
		if(parent2[i]==i)
			count2++;
	}
	if(count1>1||count2>1)
		res=-1;
	else
		res=m-res;
	return res;
}
int main()
{
	int a,b,c,i,ans;
	pair<int,pair<int,int>> edges[10000];
	cin>>n>>m;
	for(i=0;i<m;i++){
		cin>>a>>b>>c;
		edges[i]=make_pair(c, make_pair(a, b));
	}
	sort(edges,edges+m,greater<pair<int,pair<int,int>>>());
	ans=kruskal(edges);
	cout<<ans<<'\n';
    return 0;
}

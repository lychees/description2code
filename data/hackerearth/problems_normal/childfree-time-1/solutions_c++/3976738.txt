#include <iostream>
#include <cstdio>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <ctime>
#include <cassert>
using namespace std;
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define vi vector<int>
#define SZ(x) ((int)(x.size()))
#define fi first
#define se second
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define IN(x,y) ((y).find((x))!=(y).end())
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define DBG cerr << "debug here" << endl;
#define DBGV(vari) cerr << #vari<< " = "<< (vari) <<endl;
typedef long long ll;
const int MAXN = 1e6;
const int MAXM = 1e6;
const int MAXC = 1e9;
const int MAXT = 2;
ll dp[MAXN];
vi g[MAXN];
vector<pii> pred[MAXN];
vi top_order;
bool visited[MAXN];
void dfs_top(int v)
{
    visited[v] = 1;
    FOR(i, g[v].size())
    {
        int u = g[v][i];
        if(visited[u]) continue;
        dfs_top(u);
    }
    top_order.pb(v);
}
int main()
{
    int n, m;
    scanf("%d %d", &n, &m);
    assert(n <= MAXN);
    assert(m <= MAXM);
    FOR(i, m)
    {
        int v, u, t;
        scanf("%d %d %d", &v, &u, &t);
        assert(1 <= v && v <= n);
        assert(1 <= u && u <= n);
        assert(1 <= t && t <= MAXC);
        --v; --u;
        g[v].pb(u);
        pred[u].pb(mp(v, t));
    }
    FOR(i, n)
    {
        if(!visited[i]) dfs_top(i);
    }
    reverse(ALL(top_order));
    ll res = 0;
    FOR(i, n)
    {
        int v = top_order[i];
        FOR(j, pred[v].size())
        {
            int u = pred[v][j].fi;
            int t = pred[v][j].se;
            ll c = dp[u] + MAXT + t;
            if(dp[v] == -1 || dp[v] < c)
            {
                dp[v] = c;
            }
        }
        REMAX(res, dp[v]);
    }
    printf("%lld\n", res);
    return 0;
}

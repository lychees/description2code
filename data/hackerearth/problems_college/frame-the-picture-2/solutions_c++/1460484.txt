/*
 *
 * File: stuff.cpp
 * Author: Andy Y.F. Huang (azneye)
 * Created on Aug 23, 2014, 11:50:25 PM
 */

#include <bits/stdc++.h>

using namespace std;

namespace stuff {
typedef long long ll;
int g[3][3];

bool is_prime(int x) {
  return (x == 2 || x == 3 || x == 5 || x == 7 || x == 11 || x == 13 || x == 17);
}

int encode() {
  ll res = 0;
  for (int i = 0; i < 3; i++)
    for (int j = 0; j < 3; j++)
      res = 10 * res + g[i][j];
  return res;
}

void decode(int x) {
  for (int i = 2; i >= 0; i--) {
    for (int j = 2; j >= 0; j--) {
      g[i][j] = x % 10;
      x /= 10;
    }
  }
}

void solve(int test_num) {
  for (int r = 0; r < 3; r++)
    for (int c = 0; c < 3; c++)
      g[r][c] = 3 * r + c + 1;
  map<int, int> dist;
  queue<int> q;
  q.push(encode());
  dist[q.back()] = 0;
  while (!q.empty()) {
    const int at = q.front();
    const int cdist = dist[at];
    q.pop();
    decode(at);
    for (int dr = -1; dr <= 1; dr++) {
      for (int dc = -1; dc <= 1; dc++) {
        if (abs(dr) + abs(dc) != 1)
          continue;
        for (int r = 0; r < 3; r++) {
          for (int c = 0; c < 3; c++) {
            const int nr = r + dr, nc = c + dc;
            if (min(nr, nc) < 0 || max(nr, nc) > 2 || !is_prime(g[r][c] + g[nr][nc]))
              continue;
            swap(g[r][c], g[nr][nc]);
            const int to = encode();
            if (!dist.count(to)) {
              dist[to] = cdist + 1;
              q.push(to);
            }
            swap(g[r][c], g[nr][nc]);
          }
        }
      }
    }
  }
  int Q;
  cin >> Q;
  while (Q-- > 0) {
    for (int r = 0; r < 3; r++)
      for (int c = 0; c < 3; c++)
        cin >> g[r][c];
    const int at = encode();
    if (dist.count(at))
      cout << dist[at] << endl;
    else
      cout << "-1\n";
  }
}

void solve() {
#ifdef AZN
  double start_t = clock();
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
//freopen("azn.txt", "w", stderr);
#endif
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int T = 1;
  //cin >> T;
  for (int t = 1; t <= T; t++)
    solve(t);
#ifdef AZN
  cerr << "Took: " << ((clock() - start_t) / CLOCKS_PER_SEC);
#endif
}
}

int main() {
  stuff::solve();
  return 0;
}

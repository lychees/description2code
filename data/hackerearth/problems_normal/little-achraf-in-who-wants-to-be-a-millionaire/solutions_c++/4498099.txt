//#define MYDEBUG
#define _CRT_SECURE_NO_WARNINGS
#define TASK "c1"
#pragma comment(linker, "/STACK:67108864")
#include <cstdio>
#include <iostream>
#include <iomanip> 
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <functional>
#include <cassert>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>

const int MOD = 1000000007;
const int INF = 1000000001;
const int MAXN = 400;
const long double EPS = 1e-9;
const int HASH_POW = 29;
const long double PI = acos(-1.0);

using namespace std;

double workTime()
{
	return double(clock()) / CLOCKS_PER_SEC;
}

void my_return(int code)
{
#ifdef MYDEBUG
	cout << "\nTime = " << fixed << setprecision(3) << workTime() << endl;
#endif
	exit(code);
}

int main()
{
	cin.sync_with_stdio(0);
	cin.tie(0);
	mt19937 mt_rand(time(0));
#ifdef MYDEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	/*freopen(TASK".in", "rt", stdin);
	freopen(TASK".out", "wt", stdout);*/
	/*freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);*/
#endif

	int l, c;
	scanf("%d %d\n", &l, &c);

	long long len[300];
	for (int i = 1; i <= l; ++i)
		len[i] = 1;
	int bord = 1;
	for (int j = l + 1; j <= l + 200; ++j)
	{
		len[j] = 0;
		for (int x = 1; x <= l; ++x)
			len[j] += len[j - x];
		if (len[j] > 1000000000000000ll)
		{
			len[j] = 1000000000000000ll;
			bord = j;
			break;
		}
	}

	char ans[110];
	memset(ans, 0, sizeof ans);
	for (int iter = 0; iter < c; ++iter)
	{
		long long n, x;
		char val;
		scanf("%lld %lld %c\n", &n, &x, &val);
		int foo = bord;
		while (x % l != foo % l)
			++foo;
		x = min(x, (long long)foo);
		--n;
		while (x > l)
		{
			for (int id = x - l; id < x; ++id)
			{
				if (len[id] <= n)
					n -= len[id];
				else
				{
					x = id;
					break;
				}
			}
		}

		if (!ans[x])
			ans[x] = val;
		else if (ans[x] != val)
			ans[x] = '-';
	}

	int res = 1;
	for (int i = 1; i <= l; ++i)
	{
		if (ans[i] == '-')
			res = 0;
		else if (!ans[i])
			res = 62ll * res % MOD;
	}
	printf("%d\n", res);

	my_return(0);
}
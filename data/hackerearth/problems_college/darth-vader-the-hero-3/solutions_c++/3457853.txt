#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t,n,m,x,y;
	cin >> t;
	vector<int> temp,tmp;
	vector<vector<int> > vec,vis;
	while(t--)
	{
		cin >> n >> m;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				cin >> x;
				temp.push_back(x);
				tmp.push_back(0);
			}
			vec.push_back(temp);
			vis.push_back(tmp);
			temp.clear();
			tmp.clear();
		}
		

		pair<int,int> mp;
		queue<pair<int,int> > q;
		int counter=0,Counter=0,maxCount=0;

		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				if(!vis[i][j] && vec[i][j])
				{
					++Counter;
					q.push(make_pair(i,j));
					vis[i][j]=1;
					counter=0;

					while(!q.empty())
					{
						mp = q.front();
						q.pop();
						++counter;
					 	x = mp.first;
						y = mp.second;
						if(x+1 < n )
						{
							if(!vis[x+1][y] && vec[x+1][y])
							{
								q.push(make_pair(x+1,y));
								vis[x+1][y]=1;
							}
						}
						if(x-1 >=0 && vec[x-1][y] )
						{
							if(!vis[x-1][y])
							{
								q.push(make_pair(x-1,y));
								vis[x-1][y]=1;
							}
						}
						if(y+1 < m &&  vec[x][y+1])
						{
							if(!vis[x][y+1])
							{
								q.push(make_pair(x,y+1));
								vis[x][y+1]=1;
							}

						}
						if(y-1 >= 0 && vec[x][y-1])
						{
							if(!vis[x][y-1])
							{
								q.push(make_pair(x,y-1));
								vis[x][y-1]=1;
							}

						}
						if(x-1 >=0 && y-1 >=0 && vec[x-1][y-1])
						{
							if(!vis[x-1][y-1])
							{
								q.push(make_pair(x-1,y-1));
								vis[x-1][y-1]=1;
							}

						}
						if(x-1 >=0 && y+1 <m && vec[x-1][y+1])
						{
							if(!vis[x-1][y+1])
							{
								q.push(make_pair(x-1,y+1));
								vis[x-1][y+1]=1;
							}
							
						}
						if(x+1 < n && y-1 >=0 && vec[x+1][y-1])
						{
							if(!vis[x+1][y-1])
							{
								q.push(make_pair(x+1,y-1));
								vis[x+1][y-1]=1;
							}
							
						}
						if(x+1 < n && y+1 < m && vec[x+1][y+1])
						{
							if(!vis[x+1][y+1])
							{
								q.push(make_pair(x+1,y+1));
								vis[x+1][y+1]=1;
							}
							
						}
					}
					maxCount = max(maxCount,counter);
					counter = 0;	
				}

			}
		}
		vec.clear();
		vis.clear();
		cout << Counter <<" "<< maxCount <<endl; 




	}

	return 0;

}

using namespace std;
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#define ll long long
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
#define input freopen("input.in","r",stdin);
#define output freopen("output.out","w",stdout);
#define e printf("\n");
#define all(it,v) for(it=(v).begin();it!=(v).end();it++)
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
typedef vector<vector<ll> > mat;
const ll mx=100001;
const ll mod=1000000007;
const ll inf=0x3f3f3f3f;
void solve();
int main()
{
  int t=1;
  cin>>t;
  while(t--)
  solve();
  return 0;
}
vector < pair < int , pii > > adj[501];
int dp[501][1001];
bool vis[501][1001];
void solve()
{
  int INF=1e9;
  int i,j,n,m,b,q,B;
        scanf("%d%d%d",&n,&m,&B);
        for(i=1;i<=n;i++)
        {
            adj[i].clear();
        }
        while(m--)
        {
            int u,v,c,l;
            scanf("%d%d%d%d",&u,&v,&c,&l);
            adj[u].pb(mp(v,mp(c,l)));
        }
        for(i=1;i<=n;i++)
        {
            for(j=0;j<=B;j++)
            {
                dp[i][j] = INF;
                vis[i][j] = 0;
            }
        }
        dp[1][0] = 0;
        priority_queue < pair < int , pii > > pq;
        pq.push(mp(-dp[1][0],mp(1,0)));
        while(!pq.empty())
        {
            pair < int , pii > cur = pq.top();
            pq.pop();
            int dist = -cur.ff;
            int node = cur.ss.ff;
            int budget = cur.ss.ss;
            if(vis[node][budget])
                continue;
            vis[node][budget] = 1;
            for(i=0;i<adj[node].size();i++)
            {
                int nxt = adj[node][i].ff;
                int len = adj[node][i].ss.ss;
                int cst = adj[node][i].ss.ff;
                if(budget + cst <= B && dp[node][budget] + len < dp[nxt][budget + cst])
                {
                        dp[nxt][budget + cst] = dp[node][budget] + len;
                        pq.push(mp(-dp[nxt][budget + cst],mp(nxt,budget + cst)));
                }
            }
        }
        scanf("%d",&q);
        for(i=1;i<=n;i++)
        {
            int mn = INF;
            for(j=0;j<=B;j++)
            {
                dp[i][j] = min(dp[i][j],mn);
                mn = min(mn,dp[i][j]);
            }
        }
        while(q--)
        {
            int x,y;
            scanf("%d%d",&x,&y);
            if(dp[x][y] == INF)
                dp[x][y] = -1;
            printf("%d\n",dp[x][y]);
        }    
        
}




























#include <bits/stdc++.h>
#include <limits.h>
#include <stdio.h>
using namespace std;
int graph[27][27];
int V = 27;
int dist[27];
//	char old[1000005],news[1000005];
int minDistance(int dist[], bool sptSet[]) {
  int min = INT_MAX, min_index;

  for (int v = 0; v < V; v++)
    if (sptSet[v] == false && dist[v] <= min)
      min = dist[v], min_index = v;

  return min_index;
}

void dijkstra(int src) {
  // cout<<"src:"<<src<<endl;
  bool sptSet[V];

  for (int i = 0; i < V; i++)
    dist[i] = INT_MAX, sptSet[i] = false;

  dist[src] = 0;

  for (int count = 0; count < V - 1; count++) {

    int u = minDistance(dist, sptSet);
    sptSet[u] = true;

    for (int v = 0; v < V; v++)
      if (!sptSet[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v])
        dist[v] = dist[u] + graph[u][v];
  }
}

int main() {
  int n;
  long long int sum = 0;
  scanf("%d", &n);
  for (int i = 0; i < 26; i++)
    for (int j = 0; j < 26; j++)
      scanf("%d", &graph[i][j]);
  int dis[27][27];
  for (int i = 0; i < 26; i++) {

    dijkstra(i);
    for (int j = 0; j < 26; j++) {
      dis[i][j] = dist[j];
    }
  }

  for (int j = 0; j < n; j++) {

    sum = 0;
    string old, news;
    cin >> old >> news;

    //	assert(old.size() <= 100000);

    for (int i = 0; i < old.size(); i++) {
      if (old[i] != news[i]) {
        sum += dis[(int)(old[i] - 'a')][(int)(news[i] - 'a')];
      }
    }
    printf("%lld\n", sum);
  }
  return 0;
}
// Anve$hi $hukla
// Until the lion learns how to write, every story will glorify the hunter.

#include <bits/stdc++.h>
using namespace std;

#define TRACE
#ifdef TRACE
#define trace1(x)       cerr<< #x <<": "<<x<<endl;
#define trace2(x, y)    cerr<< #x <<": "<<x<<" | "<< #y <<": "<<y<< endl;
#define trace3(x, y, z) cerr<< #x <<": "<<x<<" | "<< #y <<": "<<y<<" | "<< #z <<": "<<z<< endl;
#else
#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#endif

typedef long long LL;

inline void fastIO(){
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
}

class union_find{
  vector <int> par;
  public:
  union_find(int n){
    par = vector <int>(n+1);
    for(int i=0;i<=n;i++){
      par[i] = -1;
    }
  }
  int root(int v){
    return par[v]<0?v:(par[v]=root(par[v]));
  }
  
  void merge(int x,int y){
    if((x=root(x)) == (y=root(y)))
      return;
    par[y] += par[x];
    par[x] = y;
  }
  void makeLeader(int x){
    int L = root(x);
    if(L==x)
      return;
    assert(par[L]<0);
    int Z1 = par[L];
    par[x] = Z1;
    par[L] = x;
    return; 
  }
  int size(int N){
    int Ret =0;
    for(int i=1;i<=N;i++){
      Ret += (par[i]<-1);
    }
    return Ret;   
  }
  int get_parent(int v){
    return par[v];
  }
};


int main(){
  fastIO();
  int N,Q,type,a,b;
  cin >> N >> Q;
  union_find U(N);
  while(Q--){
    cin >> type;
    if(type==1){
      cin >> a >> b;
      U.merge(a,b);
    }
    else if(type==2){
      cin >> a;
      U.makeLeader(a);
    }
    else if(type==3){
      cin >> a;
      cout << U.root(a) << endl;
    }
  }
  return 0;
}
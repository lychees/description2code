#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <bitset>
using namespace std;

#define ll long long
#define MAX 1000010

int f[MAX];
bitset <MAX> isPrime;

void update(int k, int l, int r, int id, int val){
	if (l == r){
		f[k] = val;
		return;
	}
	int m = (l + r) / 2;
	if (id > m)
		update(2 * k + 1, m + 1, r, id, val);
	else
		update(2 * k, l, m, id, val);
	f[k] = max(f[2*k], f[2*k+1]);
}

int query(int k, int l, int r, int lo, int hi){
	if (r < lo || l > hi)
		return -1;
	if (lo <= l && r <= hi)
		return f[k];
	int m = (l + r) / 2;
	return max(query(2*k, l, m, lo, hi), query(2*k+1, m + 1, r, lo, hi));
}

void Sieve(){
	isPrime.set();
	isPrime[0] = isPrime[1] = 0;
	for (ll i = 2; i*i < MAX; i++)
		if (isPrime[i])
			for (ll j = i*i; j < MAX; j += i)
				isPrime[j] = 0;
}

int main(){
	Sieve();
	memset(f, -1, sizeof(f));
	
	int n, m, t, a, b;
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++){
		scanf("%d", &a);
		update(1, 1, n, i, isPrime[a] ? a : -1);
	}
	while (m--){
		scanf("%d%d%d", &t, &a, &b);
		if (t)
			printf("%d\n", query(1, 1, n, a, b));
		else
			update(1, 1, n, a, isPrime[b] ? b : -1);
	}
	return 0;
}
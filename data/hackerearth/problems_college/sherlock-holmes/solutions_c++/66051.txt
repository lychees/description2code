#include <iostream>
#include <cstdio>
#include <cmath>
using namespace std;

#define get getchar
int next_int;
char in_char;
inline int GetNextInt(){
    in_char = ' ';
    while((in_char < '0') || (in_char > '9')){
        in_char = get();
    }
    next_int = 0;
    while((in_char >= '0') && (in_char <= '9')){
        next_int *= 10;
        next_int += in_char - 48;
        in_char = get();
    }
    return next_int;
}

#define INF 1000000000
#define MAXN 1000
#define MAXM 1000
#define sd(x) x = GetNextInt()

double dp[MAXN][MAXM], sum[MAXN][MAXN], error[MAXN][MAXN];
double arr[MAXN], d, nk;
int i, n, m, j, k;

inline void solve(){
    sd(n); sd(m);
    for(i = 1;i <= n;i++){
        sd(arr[i]);
    }
    for(i = 1;i <= n;i++){
        error[i][i + 1] = 0;
        for(j = i + 2;j <= n;j++){
            d = arr[j] - arr[i];
            d /= (j - i);
            nk = arr[i] + d;
            error[i][j] = 0;
            for(k = i + 1;k < j;k++){
                error[i][j] += fabs(arr[k] - nk);
                nk += d;
            }
        }
    }
    for(j = 2;j <= n;j++){
        dp[j][2] = error[1][j];
        for(k = 3;k <= m && k <= j;k++){
            dp[j][k] = INF;
            for(i = 2;i < j;i++){
                if(dp[i][k - 1] + error[i][j] < dp[j][k]){
                    dp[j][k] = dp[i][k - 1] + error[i][j];
                }
            }
        }
    }
    dp[n][m] /= n;
    printf("%0.4f\n",dp[n][m]);
}

int main()
{
	int t;
	sd(t);
	while(t--){
        solve();
	}
    return 0;
}

/*
100
5 3
2 7 13 19 27
*/

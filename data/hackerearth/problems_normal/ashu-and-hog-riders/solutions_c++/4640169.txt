#include<bits/stdc++.h>
using namespace std;
int arr[2000][2000],visited[2000][2000];
struct place
{
	int x;
	int y;
};
bool issafe(int i,int j,int n)
{
	return (i>=0 && j>=0 && i<n && j<n && arr[i][j]==1 && !visited[i][j]);
}
int bfs(int i,int j,int n)
{
	place arr[n*n];
	int start=0,stop=0;
	arr[stop].x=i;
	arr[stop++].y=j;
	visited[i][j]=1;
	int ans=0;
	while(start!=stop)
	{
		int i=arr[start].x;
		int j=arr[start++].y;
		ans++;
		if(issafe(i+1,j,n))
		{
			arr[stop].x=i+1;
			arr[stop++].y=j;
			visited[i+1][j]=1;
		}
		if(issafe(i-1,j,n))
		{
			arr[stop].x=i-1;
			arr[stop++].y=j;
			visited[i-1][j]=1;
		}
		if(issafe(i,j+1,n))
		{
			arr[stop].x=i;
			arr[stop++].y=j+1;
			visited[i][j+1]=1;
		}
		if(issafe(i,j-1,n))
		{
			arr[stop].x=i;
			arr[stop++].y=j-1;
			visited[i][j-1]=1;
		}
	}
	return ans;
}
int main()
{
	int a,b,c,d,e,f,g,h,i,j,k,l;
	cin>>a;
	memset(visited,0,sizeof(visited));
	for(i=0;i<a;i++)
	{
		for(j=0;j<a;j++)
		{
			cin>>arr[i][j];
		}
	}
	int max=0;
	for(i=0;i<a;i++)
	{
		for(j=0;j<a;j++)
		{
			if(!visited[i][j] && arr[i][j]==1)
			{
				
				c=bfs(i,j,a);
				//cout<<i<<" "<<j<<" "<<c<<"\n";
				if(c>max)
					max=c;
			}
		}
	}
	cout<<max<<"\n";
	return 0;
}
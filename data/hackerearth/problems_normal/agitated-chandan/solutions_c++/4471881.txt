#include<bits/stdc++.h>
using namespace std;


int main()
{
    int t,n,e,x,y,z,i,w;
    cin>>t;
    while(t--)
    {
        cin>>n;
        vector< pair <int,int> > graph[n+1];
bool vis[n+1];
int dis[n+1];
       e=n-1;
       for(int i=0;i<e;i++)
       {cin>>x>>y>>z;
           graph[x].push_back(make_pair(y,z));
                      graph[y].push_back(make_pair(x,z));

       }
       memset(dis,0,sizeof(dis));
    memset(vis,false,sizeof(vis));
queue <int> bfsq;
vis[1]=true;dis[1]=0;
bfsq.push(1);
while(!bfsq.empty())
{
    w=bfsq.front();
    bfsq.pop();
    for(i=0;i<graph[w].size();i++)
    {if(vis[graph[w][i].first]==false){
        vis[graph[w][i].first]=true;
        dis[graph[w][i].first]=dis[w]+graph[w][i].second;
        bfsq.push(graph[w][i].first);
    }}
}
int r=max_element(dis+1,dis+n+1)-dis;
 memset(dis,0,sizeof(dis));
    memset(vis,false,sizeof(vis));
    vis[r]=true;
    dis[r]=0;
    bfsq.push(r);
    while(!bfsq.empty())
{
    w=bfsq.front();
    bfsq.pop();
    for(i=0;i<graph[w].size();i++)
    {if(vis[graph[w][i].first]==false){
        vis[graph[w][i].first]=true;
        dis[graph[w][i].first]=dis[w]+graph[w][i].second;
        bfsq.push(graph[w][i].first);
    }}
}
int l=*max_element(dis+1,dis+n+1);
int cost;
if(l<100)
    cost=0;
else if(l>100&&l<=1000)
    cost=100;
else if(l>1000&&l<=10000)
    cost=1000;
else
    cost=10000;


cout<<cost<<" "<<l<<"\n";
    }
}

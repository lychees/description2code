#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

struct suffix{

	int index;
	int rank[2];

};
int cmp(struct suffix a, struct suffix b);
int* findArray(char str[], int n);
int findPrefix(char str[],int val[], int n);

int cmp(struct suffix a, struct suffix b){
	return ((a.rank[0]==b.rank[0])?((a.rank[1]<b.rank[1])?(1):(0)):((a.rank[0]<b.rank[0])?(1):(0)));
}


int* findArray(char str[], int n){

	struct suffix suffixes[n];
	int *suffixArr = new int[n];
	int i,k;
	int next;
	
	for(i=0; i<n; i++){
	
		suffixes[i].index=i;
		suffixes[i].rank[0]=str[i]-'a';
		suffixes[i].rank[1]=((i+1)<n)? (str[i+1]-'a'):(-1);		
	}
	
	sort(suffixes,suffixes+n,cmp);
	int ind[n];
	int rank=0,prevrank;
	k=4;
	for(k=4; k<2*n; k=k*2){
		
		rank=0;	
		prevrank = suffixes[0].rank[0];
		suffixes[0].rank[0]=0;
		ind[suffixes[0].index]=0;
		
		
		
		for(i=1; i<n; i++){
		
			if(suffixes[i].rank[0]==prevrank && suffixes[i].rank[1]==suffixes[i-1].rank[1]){
				prevrank=suffixes[i].rank[0];
				suffixes[i].rank[0]=rank;
				
			}
			else{
				prevrank=suffixes[i].rank[0];
				suffixes[i].rank[0]=++rank;
			}
			ind[suffixes[i].index]=i;
		
		}
		
		for(i=0; i<n; i++){
		
			next=suffixes[i].index+k/2;
			suffixes[i].rank[1]=(next<n)? (suffixes[ind[next]].rank[0]):(-1);
			
		}
		sort(suffixes,suffixes+n,cmp);
		
	}
	
	for (int i = 0; i < n; i++)
        		suffixArr[i] = suffixes[i].index;
		
	
	
	
	
	return  suffixArr;

}


int findPrefix(char str[],int val[], int n){

	int i=0,k=0,j=0,x=0,ans=0,length=0;
	ans=n-val[0];
	for(x=1; x<n; x++){
		
		i=val[x-1];
		j=val[x];
		length=n-j;
		k=0;
		
		while(i+k<n && j+k<n && str[i+k]==str[j+k])
			k++;
		ans+=length-k;	
	
	}
	return ans;


}


int main(){
	
	char str[1200];
	int *val,ans;
	int i;
 	cin>>str;
 	
 	val=findArray(str,strlen(str));
 	
 	ans=findPrefix(str,val,strlen(str));
 	
 	cout<<ans<<endl;
 	return 0;
	
}
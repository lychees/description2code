#include <iostream>
#include <map>
using namespace std;

map<int,int> m;
map<int,int> :: iterator it,it1;

int find(int x, int p[]){
	if(x != p[x]){
		p[x] = find(p[x],p);
	}
}

void Union(int x, int y, int p[], int count[], int rank[]) {
	
	m[count[x]]--;
	m[count[y]]--;
	
	if(m[count[x]] <= 0) {
		m.erase(count[x]);
	}
	if(m[count[y]] <= 0) {
		m.erase(count[y]);
	}
	if(rank[x] == rank[y]) {
		p[x] = y;
		rank[y] = rank[y] + 1;
		count[y] = count[x] + count[y];
		count[x] = -1;
		if(m.count(count[y]))
			m[count[y]]++;
		else
			m[count[y]] = 1;
	} else if ( rank[x] < rank[y]) {
		p[x] = y;
		count[y] += count[x];
		count[x] = -1;
		if(m.count(count[y]))
			m[count[y]]++;
		else
			m[count[y]] = 1;
	} else {
		p[y] = x;
		count[x] += count[y];
		count[y] = -1;
		if(m.count(count[x]))
			m[count[x]]++;
		else
			m[count[x]] = 1;
	}
	
}
int main()
{
    int n;
    cin >> n;
    int q;
    cin >> q;
    
    int p[n+1];
    int rank[n+1];
    int count[n+1];
    
    for(int i = 1; i <= n; i++){
    	p[i] = i;
    	rank[i] = 1;
    	count[i] = 1;
    }
    m[1] = n;
    for(int i = 0; i < q; i++){
    	int x,y;
    	cin >> x >> y;
    	
    	if(find(x,p) != find(y,p)) {
    		Union(find(x,p),find(y,p),p,count,rank);
    	}
    	
    
    	int mindiff = 1e9;
    	for(it = m.begin(); ; it++){
    		
    		it1 = it;
    		it1++;
    		if(it1 == m.end()) break;
    	//	cout << "HEY " << it -> first <<" " << it1 -> first << endl;
     		if(it1 -> second > 1 || it -> second > 1){ mindiff = 0; break;}
    		else if( mindiff > ((it1->first) - (it->first))){
    		
    			mindiff = ((it1->first)-(it->first));
    		}
    		
    		
    	}
    	if(mindiff == 1e9) mindiff = 0;
    	cout << mindiff << endl;
    }
    return 0;
}

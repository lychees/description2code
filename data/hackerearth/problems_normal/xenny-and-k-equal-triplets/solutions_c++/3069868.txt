#include <iostream>
#define ll long long
using namespace std;

static struct IO {
	char tmp[1 << 10];

	// fast input routines
	char cur;

//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }

	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }

	inline IO& operator >> (char & c) { c = nextChar(); return *this; }

	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }

	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }

	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}

#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}

defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)

	// fast output routines

//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }

	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }

	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }


#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }

defineOutFor(int)
defineOutFor(long long)

#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;



ll gcd(ll a, ll b) {
    return b == 0 ? a : gcd(b, a % b);
}
int t1[3],t2[3];

int main()
{
   ll t,n,k,num,cnt,t3;
   cin>>t;

   while(t--)
   {
   	cnt=0;
   	cin>>n>>k;
   	for(ll i=0;i<n;i++)
   	{
   		cin>>num;
   		if(num==k)
   		cnt++;
   	}
   	if(cnt<3)
   	{
   		ll temp=((n)*(n-1)*(n-2))/6;


   	cout<<"0/1"<<"\n";
   	}
   	else
   	{

   		t1[0]=cnt;
   		t1[1]=cnt-1;
   		t1[2]=cnt-2;
   		t2[0]=n;
   		t2[1]=n-1;
   		t2[2]=n-2;
   		for(int l=0;l<3;l++)
   		{
   			for(int m=0;m<3;m++)
   			{
   				t3=gcd(t1[l],t2[m]);
   				t1[l]=t1[l]/t3;
   				t2[m]=t2[m]/t3;

   			}
   		}
   		ll x=1,y=1;
   		for(int l=0;l<3;l++)
   		{
   			x*=t1[l];
   			y*=t2[l];
   		}
   		t3=gcd(x,y);
   		
   		


   	cout<<x/t3<<"/"<<y/t3<<"\n";

   	}


   }
}

#include <iostream>
using namespace std;
#include <vector>
#include <algorithm>

bool paircomp(const pair<long int,long int> &a,  const pair<long int,long int> &b){
  return a.first > b.first;
}

long int max(long int a, long int b){
  return (a > b)?a:b;
}

int main(){

  long int t;
  cin >> t;
  while(t--){
    long int n;
    cin >> n;
    vector<pair<long int,long int> > vec;     // 1st will contain radius second will contain height

    for(long int i = 0; i < n; i++){
      long int r,h;
      cin >> r >> h;
      vec.push_back(make_pair(r,h));


    }
    sort(vec.begin() , vec.end(), paircomp);
    //sort(vec.begin(), vec.end(), sort_pair_first<long int, long int>());
    //sort(vec.begin() , vec.end(),greater<long int> >() );
    vector<pair<long int,long int> >::iterator it;
    it = vec.begin();
    vector<pair<long int,long int> >::iterator it1;
    vector<pair<long int,long int> >::iterator it2;

    long int DP[n];
    it = vec.begin();
    for(long int  i =0 ; i< n; i++){
      DP[i] = (*it).second;
      it++;
    }
    it1 = vec.begin();
    for(long int i = 0; i < n; i++){
      it2 = vec.begin();
      for(long int j = 0; j < i; j++){
        if((*it1).first < (*it2).first  &&  (*it1).second < (*it2).second){
          DP[i] = max(DP[i], DP[j] + (*it1).second);
        }
        it2++;
      }
      it1++;
    }
    long int val = -99999;
    for(long int i = 0; i < n; i++){
      if(val < DP[i]) val = DP[i];
    }

    cout << val << endl;



  }
return 0;
}
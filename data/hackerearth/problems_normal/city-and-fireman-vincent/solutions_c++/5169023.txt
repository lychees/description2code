#include <bits/stdc++.h>
using namespace std;

int ar[1001];
int size[1001];

void print(int ar[], int n)
{
	for(int i = 0; i < n; i++)
	{
		cout<<ar[i]<<" ";
	}
	cout<<endl;
}

void initialize(int n) 
{
	for(int i = 0; i < n; i++)
	{
		ar[i] = i;
		size[i] = 1;
	}
}

int root(int x)
{
	while(ar[x] != x)
	{
		ar[x] = ar[ar[x]];
		x = ar[x];
	}
	return x;
}

void weightedunion(int Arr[ ],int size[ ],int A,int B)
{
    int root_A = root(A);
    int root_B = root(B);
    if(size[root_A] < size[root_B])
    {
		Arr[root_A] = Arr[root_B];
		size[root_B] += size[root_A];
	}
	else
	{
		Arr[root_B] = Arr[root_A];
		size[root_A] += size[root_B];
	}

}

int main()
{
	int n;
	cin>>n;
	
	initialize(n + 1);
	
	int e[n + 1];
	e[0] = 0;
	for(int i = 1; i <= n; i++)
		cin>>e[i];
	
	int k;
	cin>>k;
	
	int x, y;

	while(k--)
	{
		cin>>x>>y;
		weightedunion(ar, size, x, y);
	}

	multiset<int> ms[n + 1];
	for(int i = 1; i < n + 1; i++)
		ms[root(i)].insert(e[i]);

	long long mul = 1;

	//print(ar, n + 1);
	
	for(int i = 1; i < n + 1; i++)
	{
		if (ms[i].size() != 0)
		{
			long long a = ms[i].count(*(ms[i].begin()));
			mul = (mul * a)% 1000000007;
		}
	}

	cout<<mul;

	return 0;
}

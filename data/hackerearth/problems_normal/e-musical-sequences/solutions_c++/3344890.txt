#include <iostream>
#include <cstdio>
#include <algorithm>
#include <map>
#include <cmath>
#define ll long long int
using namespace std;
ll readInt()
{ ll i=1;
  ll cc = getchar_unlocked( );
  for (;(cc < '0' || cc > '9')&&cc!='-';){
		cc = getchar_unlocked( );
	} //ignores char stream other than 0-9.
  ll ret = 0;
  if(cc=='-'){
    i=-1;
    cc=getchar_unlocked();
  }
  for (;cc >= '0' && cc <= '9';) // if stream of numbers comes, start taking input
  {
    ret = ret * 10 + cc - '0'; // convert each char to integral digit and extend the final number
    cc = getchar_unlocked( );          // input continues
  }
  return (i*ret);                   // return final extended number.
}
int main(){
  int T = readInt();
  for(int t = 0; t < T; t++){
	ll N = readInt();
	ll M = readInt();
	ll z = readInt();
	ll a[2*(N+1)]; 
	ll sumN = 0;
	ll sign = (N%2 == 1)?1:-1;
	for(ll i = 0; i < N; i++){
		a[i] = readInt();
	}
	a[N] = 0;
	for(int i = 1; i <= N; i++){
		a[N] = (a[N] + (((i%2)?1:-1)*a[N-i]) +  M)%M;
	}
	if(N%2==0)
	for(int k = N + 1; k <= z && k < 2*(N+1); k++){
		a[k] = (-a[k-N-1]+M)%M;
		//cout << a[k] << endl;
	}
	else
	for(int k = N + 1; k <= z && k < 2*(N+1); k++){
		a[k] = (a[k-N-1]+M)%M;
		//cout << a[k] << endl;
	}
    printf("%ld\n", (a[z%(2*(N+1))] + M)%M);
  }
}
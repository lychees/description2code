#include <bits/stdc++.h>
using namespace std;
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define ALL(c) (c).begin(), (c).end()
#define valid(y,x,h,w) (0<=y&&y<h&&0<=x&&x<w)
#define tpl(...) make_tuple(__VA_ARGS__)
const int INF = 0x3f3f3f3f;
const double EPS = 1e-8;
const double PI = acos(-1);
typedef long long ll;
typedef pair<int,int> pii;
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }
template<class T>ostream&operator<<(ostream &o,const vector<T>&t){o<<'[';FOR(i,t){if(i!=t.begin())o<<',';o<<*i;}return o<<']';}
template<class S,class T>ostream&operator<<(ostream &o,const pair<S,T>&t){return o<<'('<<t.first<<','<<t.second<<')';}
template<int N,class Tp>void output(ostream&,const Tp&){}
template<int N,class Tp,class,class ...Ts>void output(ostream &o,const Tp&t){if(N)o<<',';o<<get<N>(t);output<N+1,Tp,Ts...>(o,t);}
template<class ...Ts>ostream&operator<<(ostream&o,const tuple<Ts...>&t){o<<'(';output<0,tuple<Ts...>,Ts...>(o,t);return o<<')';}
template<class T>void output(T t,char z=10){if(t<0)t=-t,putchar(45);int c[20];
int k=0;while(t)c[k++]=t%10,t/=10;for(k||(c[k++]=0);k;)putchar(c[--k]^48);putchar(z);}
template<class T>void outputs(T t){output(t);}
template<class S,class ...T>void outputs(S a,T...t){output(a,32);outputs(t...);}
template<class T>void output(T *a,int n){REP(i,n)output(a[i],i!=n-1?',':10);}
template<class T>void output(T *a,int n,int m){REP(i,n)output(a[i],m);}
template<class T>bool input(T &t){int n=1,c;for(t=0;!isdigit(c=getchar())&&~c&&c-45;);
if(!~c)return 0;for(c-45&&(n=0,t=c^48);isdigit(c=getchar());)t=10*t+c-48;t=n?-t:t;return 1;}
template<class S,class ...T>bool input(S&a,T&...t){input(a);return input(t...);}

const int MAX_N = 1000010;

struct SegSum {
  int bit[MAX_N+1];               // n???+1??
  int n;
  int K;
  void init(int _n) {
    n = _n;
    memset(bit, 0, sizeof(bit));
    for (K=1;(K<<1)<=n;K<<=1);
  }
  int sum(int i) {              // [1,i]??
    int s = 0;
    while(i) {
      s += bit[i];
      i -= i & -i;
    }
    return s;
  }
  int sum(int a, int b) {      // [a,b]??
    return sum(b)-sum(a-1);
  }
  void add(int i, int x) {      // i(>=1)?x??
    while(i <= n) {
      bit[i] += x;
      i += i & -i;
    }
  }
  void add(int a, int b, int x) {
    // [a,b]?x????
    // sum(int i)?i???????
    add(a, x);
    add(b+1, -x);
  }
  int lowerBound(int w) {
    // min x s.t. sum(x)>=w
    if (w<=0) return 0;
    int x = 0;
    for (int k=K; k; k>>=1) {
      if (x+k<=n && bit[x+k]<w) {
        w -= bit[x+k];
        x += k;
      }
    }
    return x+1;
  }
} bit;

char s[500000][11];
int tim[500000];

int main() {
  int T;
  cin >> T;
  while(T--) {
    int n;
    cin >> n;
    REP(i,n) {
      scanf("%s", s[i]);
    }
    REP(i,n) input(tim[i]);
    bit.init(n);
    REP(i,n) bit.add(i+1,1);
    int ans = 0;
    REP(i,n-1) {
      int q;
      input(q);
      int idx = bit.lowerBound(q) - 1;
      bit.add(idx+1, -1);
      chmax(ans, tim[idx]);
      printf("%s %d\n", s[idx], ans);
    }
    int idx = bit.lowerBound(1) - 1;
    chmax(ans, tim[idx]);
    printf("%s %d\n", s[idx], ans);
  }
}

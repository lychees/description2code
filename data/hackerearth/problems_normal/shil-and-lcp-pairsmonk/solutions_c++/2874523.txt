#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cassert>
#include <cstring>
#include <algorithm>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <fstream>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <unordered_map>
#include <unordered_set>
#include <memory.h>
using namespace std;

const int MAXN = 1000006;

struct node {
  int go[26];
  int c, d;
};

char s[MAXN];
node trie[MAXN];
int node_num;

long long ans[MAXN];

void count(const int v, const int l) {
  ans[l] += 1ll * trie[v].d * (trie[v].d - 1) / 2;

  for (int i = 0; i < 26; i++) {
    const int x = trie[v].go[i];
    if (x) {
      ans[l] += 1ll * trie[v].d * trie[x].c;

      for (int j = i + 1; j < 26; j++) {
        const int y = trie[v].go[j];
        if (y) {
          ans[l] += 1ll * trie[x].c * trie[y].c;
        }
      }

      count(x, l + 1);
    }
  }
}

int main() {
  int n;
  scanf("%d", &n);
  int mxl = 0;
  while (n--) {
    scanf("%s", s);
    int l = 0, cur = 0;
    for (int i = 0; s[i] != '\0'; i++) {
      const int ch = s[i] - 'a';
      if (!trie[cur].go[ch]) {
        trie[cur].go[ch] = ++node_num;
      }
      cur = trie[cur].go[ch];
      trie[cur].c++;
      if (s[i + 1] == '\0') {
        trie[cur].d++;
      }
      l++;
    }
    mxl = max(mxl, l);
  }

  count(0, 0);
  for (int i = 0; i <= mxl; i++) {
    printf("%lld ", ans[i]);
  }

  return 0;
}
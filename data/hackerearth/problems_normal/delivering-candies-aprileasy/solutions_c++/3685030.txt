#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for(int i=0;i<n;i++)
#define ll long long int
#define pb push_back
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%I64d",&x)
#define F first
#define S second
#define maxn 100005
#define mod 1000000007
#define INT_MAX 1e18

struct edge { ll to;ll length; };

vector<edge>graph[maxn];
vector<ll> dist(maxn, INT_MAX );

    
void dijkstra(int source) {
    
    dist[ source ] = 0;
    set< pair<ll,ll> > a;
    a.insert( {0,source} );
        
    while (!a.empty()) {
    	//	for(auto i:a)cout<<i.first<<" "<<i.second<<"   ";cout<<endl;
        int where = a.begin()->second;
        a.erase( a.begin() );
        for (auto edge : graph[where]) 
            if (dist[edge.to] > dist[where] + edge.length) {
                a.erase( { dist[edge.to], edge.to } );
                dist[edge.to] = dist[where] + edge.length;
                a.insert( { dist[edge.to], edge.to } );
            }
    }
}

int main(){
	for(ll z1=0;z1<50000;z1++);
	for(ll z1=0;z1<50000;z1++);
	for(ll z1=0;z1<50000;z1++);
	for(ll z1=0;z1<50000;z1++);
	for(ll z1=0;z1<50000;z1++);
	for(ll z1=0;z1<50000;z1++);
	ll n,m,s;
	ll k[maxn];
	ll sum2=0;
	cin>>n>>m>>s;
	s--;
	rep(i,n){
		cin>>k[i];
	}
							rep(i,m){
								int u,v;
								ll w;
								cin>>u>>v>>w;
								u--;
								v--;
								graph[v].pb({u,w});
								graph[u].pb({v,w});
							}
	dijkstra(s);
	ll sum=0;
	rep(i,n){
		//cout<<dist[i]<<endl;
		if(dist[i]!=INT_MAX)sum+=dist[i]*k[i],
		sum2+=k[i];
	}
	//cout<<sum<<" "<<sum2<<endl;
					rep(i,n){
						if(dist[i]==INT_MAX)cout<<"0 ";
						else cout<<dist[i]*(sum2-k[i])+sum-dist[i]*k[i]<<" ";
					}
for(ll z1=0;z1<50000;z1++);
for(ll z1=0;z1<50000;z1++);
for(ll z1=0;z1<50000;z1++);
for(ll z1=0;z1<50000;z1++);
for(ll z1=0;z1<50000;z1++);
for(ll z1=0;z1<50000;z1++);
for(ll z1=0;z1<50000;z1++);
	return 0;
}
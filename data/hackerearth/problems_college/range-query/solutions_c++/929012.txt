#include <bits/stdc++.h>
using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef long long int64;
typedef unsigned long long uint64;

#define rep(i, n) for(int i=0; i<(n); i++)
#define all(X) (X).begin(), (X).end()
#define MAX 40000

struct node {
	int arr[101];
};
node tree[MAX];
vi v;
void construct(int ind, int a, int b) {
	int l = ind << 1; int r = l+1; int mid = (a+b)/2;
	if(a == b) {
		tree[ind].arr[v[a]] = 1;
	} else {
		construct(l, a, mid); construct(r, mid+1, b);
		for(int i=0; i<101; i++) tree[ind].arr[i] = tree[l].arr[i]+tree[r].arr[i];
	}
}

int query(int ind, int a, int b, int i, int j, int val) {
	int l = ind << 1; int r = l+1; int mid = (a+b)/2;
	if(i <= a && j>=b) return tree[ind].arr[val];
	else if(j < a || b < i) return 0;
	else return query(l, a, mid, i, j, val) + query(r, mid+1, b, i, j, val);
}

int main() {
#ifdef HOME
	freopen("in", "r", stdin);
#endif
	cin.sync_with_stdio(false);
	int N;  cin >> N;
	int a;
	rep(i, N) cin >> a, v.push_back(a);
	rep(i, MAX) fill(tree[i].arr, tree[i].arr+101, 0);
	construct(1, 0, N-1);
	int q; cin >> q; int x, y, val;
	while(q--) {
		cin >> x >> y >> val;
		cout << query(1, 0, N-1, x, y, val) << "\n";
	}
	return 0;
}

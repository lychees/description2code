#include <stdio.h>
#include <vector>
#include <algorithm>
#include <climits>
#include <iostream>

using namespace std;

struct node
{
	long long int val;
	int visited;
	vector<struct node*> edges;
	vector<long long int> edgew;
};

vector<struct node*> graph;
long long int ans=INT_MIN;

void init(long long int n)
{
	for(long long int i=0;i < n;i++)
	{
		graph[i] = new node();
		graph[i]->val=-1;
		graph[i]->visited=0;
	}
	
}

void dfs(struct node *n)
{
	if(n->edges.size() == 0)
		n->val=0;
	
	n->visited=1;
		
	for(int i=0;i < n->edges.size();i++)
	{
		if(!(n->edges[i]->visited))
		{
			dfs(n->edges[i]);
		}
		
		n->val=max(n->val,n->edgew[i]+2+n->edges[i]->val);
	}
	ans=max(ans,n->val);
}

int main()
{
    long long int n,e;
    cin >> n >> e;
    graph.resize(n);
    init(n);
    for(int i=0; i < e;i++)
    {
    	int a,b,w;
    	scanf("%d%d%d",&a,&b,&w);
    	graph[a-1]->edges.push_back(graph[b-1]);
    	graph[a-1]->edgew.push_back(w);
   }
   for(int i=0;i < n;i++)
   {
   	 if(!graph[i]->visited)
   	 {
   	 	if(graph[i]->edges.size() > 0)
   	 		dfs(graph[i]);
   	 }
   }
   cout << ans << "\n";
    return 0;
}

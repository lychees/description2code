#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;

#define MAX 100002
int n;
int m;

long long int k[MAX];

int s;

vector<pair<int, long long int> > v[MAX];

long long int dist[MAX];

queue<int> q;

int main(){
	cin >> n >> m >> s;
	for (int i = 0; i < n; i++){
		scanf("%lld", &k[i]);
	}
	for (int i = 0; i < m; i++){
		int a, b;
		scanf("%d%d", &a, &b);
		a--;
		b--;
		int c;
		scanf("%d", &c);
		v[a].push_back(make_pair(b, c));
		v[b].push_back(make_pair(a, c));
	}
	s--;
	for (int i = 0; i < n; i++){
		dist[i] = LLONG_MAX;
	}
	dist[s] = 0;
	q.push(s);
	while (!q.empty()){
		int b = q.front();
		q.pop();
		for (int i = 0; i < v[b].size(); i++){
			int go = v[b][i].first;
			if (dist[go]>dist[b] + v[b][i].second){
				dist[go] = dist[b] + v[b][i].second;
				q.push(go);
			}
		}
	}
	long long int sum=0;
	for(int j=0;j<n;j++){
		if(dist[j]==LLONG_MAX){
			continue;
		}
		sum+=dist[j]*k[j];
	}
	long long int f=0;
	for(int j=0;j<n;j++){
		if(dist[j]==LLONG_MAX){
			continue;
		}
		f+=k[j];
	}
	for (int i = 0; i < n; i++){
		if(i){
			printf(" ");
		}
		if (dist[i] == LLONG_MAX){
			printf("0");
			continue;
		}
		long long int ans = 0;
		ans+=sum-dist[i]*k[i];
		ans+=(f-k[i])*dist[i];
	/*	for (int j = 0; j < n; j++){
			if (dist[j] == LLONG_MAX){
				continue;
			}
			if (j == i){
				continue;
			}
			ans += (dist[i] + dist[j])*(long long int)(k[j]);
		}*/
		printf("%lld", ans);
	}
	return 0;
}
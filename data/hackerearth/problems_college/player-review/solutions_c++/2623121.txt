#include<bits/stdc++.h>

//konoha's yellow flash

using namespace std;
// A utility funtion to find maxiimum of two integers
int maxi(int a, int b) { return (a > b)? a : b; }

// A utility funtion to find maxiimum of three integers
int maxi(int a, int b, int c) { return maxi(maxi(a, b), c); }
long long int maxicross(long long int arr[], long long int l, long long int m, long long int h,int mo)
{
    // Include elements on left of mid.
    long long int sum = 0;
    long long int left_sum = INT_MIN;
    for (long long int i = m; i >= l; i--)
    {
        sum = sum + arr[i];
        if (sum > left_sum)
          left_sum = sum;
    }

    // Include elements on right of mid
    sum = 0;
    long long int right_sum = INT_MIN;
    for (long long int i = m+1; i <= h; i++)
    {
        sum = sum + arr[i];
        if (sum > right_sum)
          right_sum = sum;
    }

    // Return sum of elements on left and right of mid
    return (left_sum + right_sum) ;
}
long long int maxiimize(long long int arr[], long long int l , long long int h, int mo)
{

    //base case if one element
    if(l == h)
    {
        return arr[l];
    }

    //middle polong long int
    long long int m;
    m = (l + h)/2 ;
     /* Return maxiimum of following three possible cases
      a) maxiimum subarray sum in left half
      b) maxiimum subarray sum in right half
      c) maxiimum subarray sum such that the subarray crosses the midpolong long int */
      return maxi((maxiimize(arr,l,m,mo)),(maxiimize(arr,m + 1, h,mo)),(maxicross(arr,l,m,h,mo)) );
}

 int main()
{

    long long int arr[100002];

    long long int n;
    long long int mo;
    cin >> n;
    long long int i;
    for(i = 0 ; i < n ; i++)
    {
        cin >> arr[i];
    }
    long long int maxi_sum = maxiimize(arr,0,n-1,mo);
    cout << maxi_sum <<endl;

return 0;
}

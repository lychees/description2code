/*
Template belongs to : Himanshu Jaju [himanshujaju]
*/

#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)

#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     c.size()
#define clr(c)    c.clear()
#define msi       map<string,int>
#define msit      map<string,int>::iterator
#define pb        push_back
#define mp        make_pair

#define GI(x)     scanf("%d",&x)
#define PI(x)     printf("%d",x)

#define FOR(i,a,b)      for(int i=a;i<b;i++)
#define RFOR(i,a,b)     for(int i=b-1;i>=a;i--)

#define gcd(a,b)  __gcd(a,b)
#define MOD       1000000007

#define PI  acos(-1)

#define CASE(x)   cout<<"Case "<<x<<": ";

LL dp[10000][3] = {0};
int visited[10000][3] = {0};

vector<vector<PII> > edges(10000);
int n;

LL solve(int v,int clr)
{
      if(v == n) return 0;
      else if(visited[v][clr]) return dp[v][clr];
      visited[v][clr] = 1;
      LL ans = 1000000;
      FOR(i,0,sz(edges[v]))
      {
            int node = edges[v][i].first;
            int color = edges[v][i].second;
            if(color == clr) continue;
            ans = min(ans,1 + solve(node,color));
      }
      dp[v][clr] = ans;
      return ans;
}

int main()
{
      inp_s;
      int m;
      cin >> n >> m;
      while(m--)
      {
            int a,b,c;
            cin >> a >> b >> c;
            edges[a].pb(mp(b,c));
      }
      LL x = solve(1,0);
      if(x >= 1000000) x = -1;
      cout << x << endl;
      return 0;
}

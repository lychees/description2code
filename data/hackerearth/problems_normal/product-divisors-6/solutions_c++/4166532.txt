#include <bits/stdc++.h>
#define lli long long int
#define M 1000000007

using namespace std;

void swap(int *a, int *b) {
    int t = *a;
    *a = *b;
    *b = t;
}

long long unsigned int mod_e(long long unsigned int base, long long unsigned int exp) {
    long long int r = 1;
    base %= M;
    while (exp > 0) {
        if (exp % 2 == 1) {
            r = ((r % M ) * (base % M)) % M;
        }
        exp = exp >> 1;
        base = ((base % M) * (base % M)) % M;
    }
    return r % M;
}

void subset(int A[], int n) {
    priority_queue<int, vector<int>, greater<int> > pq;
    for (int i = 0; i < n; i++) {
        pq.push(A[i]);
    }

    int max_c = 0;
    for (int i = 0; i < n; i++) {
        int tmp = pq.top();
        pq.pop();
        int cnt = 0;
        for (int j = i; j < n; j++) {
            if (A[j] % tmp == 0) {
                cnt++;
            }
        }
        if (cnt > max_c) {
            max_c = cnt;
        }
    }
    if (max_c == 1) {
        cout << "-1\n";
        return;
    }
    cout << max_c << endl;
}

set<int> v;
map<int, int> mp;

void parse(int n) {
    for (int i = 2; i * i <= n; i++) {
        while (n % i == 0) {
            v.insert(i);
            n /= i;
            mp[i]++;
        }
    }

    if (n > 1) {
        v.insert(n);
        mp[n]++;
    }
    //cout << v.size() << endl;
}

void count_div(int A[], int n) {

    for (int i = 0; i < n; i++) {
        parse(A[i]);
    }
    set<int>::iterator it;
    long long int r = 1;
    for (it = v.begin(); it != v.end(); it++) {
        //cout << *it << " ";
        r = r * (mp[*it] + 1) % M;
    }
    cout << r % M << endl;

}

int main()
{
    long long int a, b, t, n, x, m, k;
    int A[100001], A1[100001], C[4][4];

    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> A[i];
    }
    count_div(A, n);

    return 0;
}

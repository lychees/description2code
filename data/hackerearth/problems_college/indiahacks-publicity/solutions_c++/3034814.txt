#include <bits/stdc++.h>
using namespace std;

bool visited[100005];

class graph
{
	public: vector<int> link;
};

graph grp[100005];

void dfs(long int i,long int n)
{
     visited[i]=1;
     
     int m=grp[i].link.size(),j;
     
     for(j=0;j<m;j++)
     {
     	if(visited[grp[i].link[j]]==0 ) dfs(grp[i].link[j],n);
     }


}

int main()
{
    long int  t,n,e,a,b,i,count;
    scanf("%d",&t);
    while(t--)
    {
    	count=0;
    	scanf("%ld %ld",&n,&e);
        for(i=0;i<n;i++) visited[i]=0;
    	for(i=0;i<e;i++)
    	{
    		scanf("%ld %ld",&a,&b);
    		grp[a].link.push_back(b);
    		grp[b].link.push_back(a);
    	}
        	
        for(i=0;i<n;i++)
        {
        	if(visited[i]==0) { dfs(i,n); count++; } 
        }
        printf("%ld\n",count);
        
    	for(i=0;i<n;i++)
    	{
    		vector<int>().swap(grp[i].link);
    		// to swap or to free memory . This is similar 
    		// to making list header point to NULL .
    		// but not freeding every node's memory
    	}
    
    }
    
    
}

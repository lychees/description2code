#include <iostream>
#include <vector>
#include<string>
#define INF 100000000
using namespace std;

int find(vector<string>&v, string&s){
	for(int i=0; i<v.size(); i++)
		if(v[i]==s)
			return i;
}

void init_graph(vector<vector<int>>&a, vector<vector<int>>&b, int N){
	vector<int> c;
	for(int i=0; i<N; i++)
		c.push_back(INF);
	for(int i=0; i<N; i++){
		a.push_back(c);
		b.push_back(c);
		a[i][i]=0;
		b[i][i]=0;
	}
	
}

int min(int a, int b){
	return a>b?b:a;
}

void show(vector<vector<int>>&a, int nd, int n){
	/*cout<<"\nGraph"<<nd<<endl;
	for(int i=0; i<n; i++)
	{
		for(int j=0; j<n; j++)
			cout<<a[i][j]<<" ";
		cout<<endl;
	}
	cout<<endl;*/
}

vector<vector<int>>& all_pair(vector<vector<int>>&a, vector<vector<int>>&b, int N, int doing){
	if(doing==N+1)
		return a;
	else{
		int k=doing-1;
		for(int i=0; i<N; i++){
			for(int j=0; j<N; j++){
				b[i][j]=min(a[i][j], a[i][k]+a[k][j]);
			}
		}
		show(b, doing, N);
		return all_pair(b, a, N, doing+1);
	}
}

int main()
{
	int N, M, d;
	cin>>N>>M;
	string s, t;
	vector<string> stations;
	for(int i=0; i<N; i++){
		cin>>s;
		stations.push_back(s);
	}
	vector<vector<int>> a, b, c;
	init_graph(a, b, N);
	for(int i=0; i<M; i++){
		cin>>s>>t>>d;
		int i1=find(stations, s), i2=find(stations,t);
		a[i1][i2]=d;
		a[i2][i1]=d;
	}
	show(a, 0, N);
	c=all_pair(a, b, N, 1);
	
	int Q;
	cin>>Q;
	for(int i=0; i<Q; i++){
		cin>>s>>t;
		int i1=find(stations, s), i2=find(stations, t);
		cout<<c[i1][i2]<<endl;
	}
    return 0;
}

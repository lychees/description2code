

def is_alphabet(char):
    return char.isalpha()


def is_digit(char):
    return char.isdigit()


def get_number(num_str):
    return int(num_str)


def generate_cumulative(alphacount):
    sum = 0
    for i in range(26):
        alphacount[i] = sum+alphacount[i]
        sum = alphacount[i]
        i += 1
    return alphacount


def get_num_in_str(place, alphacount):
    for i in range(26):
        if alphacount[i] >= place:
            return chr(i+ord('a'))
    return -1


compressed_string = raw_input()


def process_input(compressed_string):
    i = 0
    compressed_string_length = len(compressed_string)
    alphacount = [0]*26
    while i < compressed_string_length:

        if is_alphabet(compressed_string[i]):
            alphabet = compressed_string[i].lower()
            i += 1
            current_alpha_count = 0
            while i < compressed_string_length and is_digit(
                    compressed_string[i]):
                current_alpha_count = current_alpha_count * \
                    10+int(compressed_string[i])
                i += 1
            alphacount[ord(alphabet)-ord('a')] += current_alpha_count
    return alphacount


alphacount = process_input(compressed_string)
alphacount = generate_cumulative(alphacount)
no_of_inputs = raw_input()
for i in range(int(no_of_inputs)):
    position = raw_input()
    print get_num_in_str(int(position), alphacount)

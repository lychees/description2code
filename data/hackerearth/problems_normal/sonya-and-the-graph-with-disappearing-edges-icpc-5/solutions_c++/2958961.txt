#include<bits/stdc++.h>
#define rep(i,n) for(int i = 0; i < n ; ++i)
#define pb push_back
using namespace std;
typedef pair<int,int> par;
typedef vector<vector<par> > graph;
 
//vector<int> dist(n,1e9);
void bfs(graph& g, int start, vector<int>& dist,vector<int>& K) {
    int inf = 1e9;
    queue<int> q;
    q.push(start);
    dist[start] = 0;
    while (not q.empty()) {
        int u = q.front();
        q.pop();
        rep(i,(int)g[u].size()){
            par x = g[u][i];
            int v = x.first; int ke = x.second;
                if (dist[v] == inf and K[ke] > dist[u]) {
                    dist[v] = dist[u] + 1;
                    q.push(v);
            }
        }
    }
}
 
 
int main(){
    int N,M,K; cin >> N >> M >>K ;
    graph g(N);
    rep(i,M){int u,v; cin >> u >> v; --u;--v; g[u].pb(make_pair(v,i)); g[v].pb(make_pair(u,i));}
    vector<int> KE(M,1e9);
    rep(i,K){int k,t; cin >> t >> k;  KE[--k] = t;}
    vector<int> dist(N,1e9);
    bfs(g,0,dist,KE);
    cout << ( dist[N-1] < 10000000 ? dist[N-1] : -1) << endl;
 
return 0;}
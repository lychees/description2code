#pragma comment (linker, "/STACK:128000000")
#define _CRT_SECURE_NO_WARNINGS
//#include "testlib.h"
#include <cstdio>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <bitset>
#include <deque>
#include <unordered_map>
#include <unordered_set>
#include <ctime>
#include <stack>
#include <queue>
#include <fstream>
#include <sstream>
#include <complex>
using namespace std;
//#define FILENAME ""
#define mp make_pair
#define all(a) a.begin(), a.end()
typedef long long li;
typedef long double ld;
void solve();
void precalc();
clock_t start;
//int timer = 1;

int testNumber = 1;

bool todo = true;

int main() {
#ifdef room111
	freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	//freopen(FILENAME".in", "r", stdin);
	//freopen(FILENAME ".out", "w", stdout);
#endif
	start = clock();
	int t = 1;
	cout.sync_with_stdio(0);
	cin.tie(0);
	precalc();
	cout.precision(10);
	cout << fixed;
	cin >> t;
	int testNum = 1;
	while (t--) {
		//cerr << testNum << endl;
		//cout << "Case #" << testNum++ << ": ";
		solve();
		++testNumber;
		//++timer;
	}

#ifdef room111
	cerr << "\n\n" << (clock() - start) / 1.0 / CLOCKS_PER_SEC << "\n\n";
#endif

	return 0;
}

//BE CAREFUL: IS INT REALLY INT?

//#define int li

/*int pr[] = { 97, 2011 };
int mods[] = { 1000000007, 1000000009 };

const int C = 300500;
int powers[2][C];*/

//int MOD = 1000000007;

//int c[5010][5010];

//int catalan[200500];

//ld doubleC[100][100];

template<typename T>
T binpow(T q, T w, T mod) {
	if (!w)
		return 1 % mod;
	if (w & 1)
		return q * 1LL * binpow(q, w - 1, mod) % mod;
	return binpow(q * 1LL * q % mod, w / 2, mod);
}

/*int curMod = 1000000009;

int fact[100500], revfact[100500];

int getC(int n, int k) {
int res = fact[n] * revfact[n - k] % curMod * revfact[k] % curMod;
return res;
}*/

/*const int C = 7000500;

int least_prime[C];*/


void precalc() {

	/*for (int i = 2; i < C; ++i) {
	if (!least_prime[i]) {
	least_prime[i] = i;
	for (li j = i * 1LL * i; j < C; j += i) {
	least_prime[j] = i;
	}
	}
	}*/

	/*fact[0] = revfact[0] = 1;
	for (int i = 1; i < 100500; ++i) {
	fact[i] = fact[i - 1] * i % curMod;
	revfact[i] = binpow(fact[i], curMod - 2, curMod);
	}*/

	/*for (int w = 0; w < 2; ++w) {
	powers[w][0] = 1;
	for (int j = 1; j < C; ++j) {
	powers[w][j] = (powers[w][j - 1] * 1LL * pr[w]) % mods[w];
	}
	}*/

	/*catalan[0] = 1;
	for (int n = 0; n < 200500 - 1; ++n) {
	catalan[n + 1] = catalan[n] * 2 * (2 * n + 1) % MOD * binpow(n + 2, MOD - 2, MOD) % MOD;
	}*/

	/*for (int i = 0; i < 5010; ++i) {
	c[i][i] = c[i][0] = 1;
	for (int j = 1; j < i; ++j) {
	c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % MOD;
	}
	}*/

	/*for (int i = 0; i < 100; ++i) {
	doubleC[i][i] = doubleC[i][0] = 1.0;
	for (int j = 1; j < i; ++j) {
	doubleC[i][j] = doubleC[i - 1][j - 1] + doubleC[i - 1][j];
	}
	}*/

}

template<typename T>
T gcd(T q, T w) {
	while (w) {
		q %= w;
		swap(q, w);
	}
	return q;
}
template<typename T>
T lcm(T q, T w) {
	return q / gcd(q, w) * w;
}

#define int li

//const int mod = 1000000007;

const int INF = 2000000000; // greater than max capacity
const int maxn = 100000;

struct edge {
	int from, to, cap, flow;
};

vector<edge> edges;
vector<int> g[maxn];

int q[maxn];
int d[maxn];

bool bfs(int s, int t) {
	memset(d, -1, sizeof d);
	int qh = 0, qt = 0;
	q[qt++] = s;
	d[s] = 0;
	while (qh != qt) {
		int cur = q[qh++];
		for (int i = 0; i < (int)g[cur].size(); ++i) {
			edge& e = edges[g[cur][i]];
			if (e.flow != e.cap && d[e.to] == -1) {
				q[qt++] = e.to;
				d[e.to] = d[cur] + 1;
			}
		}
	}
	return d[t] != -1;
}

int ptr[maxn];

int dfs(int v, int t, int mx) {
	if (!mx)
		return mx;

	if (v == t)
		return mx;

	for (int& i = ptr[v]; i < (int)g[v].size(); ++i) {
		int id = g[v][i];
		edge& e = edges[id];
		if (d[e.to] == d[v] + 1) {
			if (int pushed = dfs(e.to, t, min(mx, int(e.cap - e.flow)))) {
				e.flow += pushed;
				edges[id ^ 1].flow -= pushed;
				return pushed;
			}
		}
	}
	return 0;
}

li dinic(int s, int t) {
	li res = 0;
	while (bfs(s, t)) {
		memset(ptr, 0, sizeof ptr);

		while (int pushed = dfs(s, t, INF)) {
			res += pushed;
		}
	}
	return res;
}

void add_edge(int from, int to, int cap) {
	//cout << from << ' ' << to << ' ' << cap << "\n";
	edge e1 = { from, to, cap, 0 };
	edge e2 = { to, from, 0, 0 };
	g[from].push_back(edges.size());
	edges.push_back(e1);
	g[to].push_back(edges.size());
	edges.push_back(e2);
}

string s;
map<li, int> num;
vector<vector<int>> down_edges;

vector<vector<li>> hashes;

int pr[] = { 31, 2013 };
int mods[] = { 1000000007, 1000000009 };
vector<vector<li>> powers;

map<int, int> into;

vector<li> int_hashes;

li get_hash(int l, int r) {
	int hash[2];
	for (int w = 0; w < 2; ++w) {
		hash[w] = (hashes[w][r] - hashes[w][l] * powers[w][r - l]) % mods[w];
		if (hash[w] < 0) {
			hash[w] += mods[w];
		}
	}
	return (hash[0] << 31) | hash[1];
}

void add_to_num(li cur_hash, bool first_level) {
	if (first_level) {
		++into[cur_hash];
	}
	if (!num.count(cur_hash)) {
		int_hashes.push_back(cur_hash);
		int new_id = num.size();
		num[cur_hash] = new_id;
		down_edges.push_back(vector<int>());
	}
}

void add_string_edge(li start_hash, li to_hash) {
	down_edges[num[start_hash]].push_back(num[to_hash]);
}

pair<int, li> parse(int pos, int depth = 0) {
	assert(s[pos] == '{');
	int start_pos = pos;
	vector<pair<li, int>> nex_hashes;
	while (s[pos + 1] != '}') {
		auto cur_item = parse(pos + 1, depth + 1);
		int new_pos = cur_item.first;
		li cur_hash = cur_item.second;
		nex_hashes.push_back(mp(cur_hash, new_pos - pos));
		pos = new_pos;
	}
	sort(all(nex_hashes));
	int hash[2] = { '{', '{' };
	for (auto item : nex_hashes) {
		for (int w = 0; w < 2; ++w) {
			hash[w] = (hash[w] * powers[w][item.second] + item.first) % mods[w];
		}
	}
	for (int w = 0; w < 2; ++w) {
		hash[w] = (hash[w] * powers[w][1] + '}') % mods[w];
	}
	li res_hash = (hash[0] << 31) | hash[1];

	add_to_num(res_hash, depth == 1);
	for (auto item : nex_hashes) {
		add_string_edge(res_hash, item.first);
	}
	return mp(pos + 1, res_hash);
}

void solve() {
	cin >> s;
	powers.assign(2, vector<li>(s.length() + 5, 1));
	for (int w = 0; w < 2; ++w) {
		for (int i = 1; i < powers[w].size(); ++i) {
			powers[w][i] = (powers[w][i - 1] * pr[w]) % mods[w];
		}
	}
	hashes.assign(2, vector<li>(s.length() + 1, 0));
	for (int w = 0; w < 2; ++w) {
		for (int i = 0; i < s.length(); ++i) {
			hashes[w][i + 1] = (hashes[w][i] * pr[w] + s[i]) % mods[w];
		}
	}
	into.clear();
	int_hashes.clear();
	num.clear();
	down_edges.clear();
	
	parse(0);

	int s = down_edges.size() - 1, t = down_edges.size();
	for (int i = 0; i <= t; ++i) {
		g[i].clear();
	}
	edges.clear();

	vector<char> have_first(t, false);
	for (int cur_set : down_edges[s]) {
		add_edge(s, cur_set, 1);
		have_first[cur_set] = true;
	}

	for (int i = 0; i < s; ++i) {
		if (!have_first[i]) {
			add_edge(i, t, 1);
		}
	}

	for (int i = 0; i < s; ++i) {
		for (int to : down_edges[i]) {
			add_edge(i, to, 1e9);
		}
	}

	int flow = dinic(s, t);

	cout << flow << "\n";
}
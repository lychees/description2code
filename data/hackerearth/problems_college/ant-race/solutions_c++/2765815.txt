#include<bits/stdc++.h>
using namespace std;
int construct_tree(int preorder[],int start,int end,vector<int>v[])
{
    if(start==end)
    {
        return preorder[start];
    }
    int mid=(start+end+1)/2;
    int t1=construct_tree(preorder,start+1,mid,v);
    if(t1!=0)
    {
        v[t1].push_back(preorder[start]);
        v[preorder[start]].push_back(t1);
    }
    int t2=construct_tree(preorder,mid+1,end,v);
    if(t2!=0)
    {
        v[t2].push_back(preorder[start]);
        v[preorder[start]].push_back(t2);
    }
    return preorder[start];

}
void bfs(int mango,vector<int>v[],int dist[],bool visited[])
{
    queue<int>q;
    q.push(mango);
    dist[mango]=0;
    visited[mango]=true;
    while(!q.empty())
    {
        int k=q.front();
        q.pop();
        for(int i=0;i<v[k].size();i++)
        {
            if(visited[v[k][i]]==false)
            {
                visited[v[k][i]]=true;
                q.push(v[k][i]);
                dist[v[k][i]]=dist[k]+1;

            }

        }
    }
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        int inorder[n+1];
        int preorder[n+1];
        vector<int>v[n+1];
        for(int i=1;i<=n;i++)
        {
            cin>>inorder[i];
        }
        for(int i=1;i<=n;i++)
        {
            cin>>preorder[i];
        }
        int first,mango,second;
        cin>>first>>mango>>second;
        construct_tree(preorder,1,n,v);
        bool visited[n+1];
        int dist[n+1];
        fill(visited,visited+n+1,false);
        fill(dist,dist+n+1,0);
        bfs(mango,v,dist,visited);
        if(dist[first]<dist[second])
            cout<<"FIRST"<<endl;
        else
            cout<<"SECOND"<<endl;
    }
}

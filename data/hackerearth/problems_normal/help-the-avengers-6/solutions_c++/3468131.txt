#include <bits/stdc++.h>
#define pii pair<int,int>
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define f first
#define s second
#define ll long long
#define mod 1000000007
using namespace std;

int read()
{
	int x;
	scanf("%d",&x);
	return x;
}
int fen[1000000]={0};

void update(int i,int val,int n)
{
    while(i<=n)
    {
        fen[i] += val;
        i += i &(-i);
    }
}

int sum(int i)
{
    int sum =0;
    while(i>0)
    {
        sum+=fen[i];
        i -= i & (-i);
    }
    return sum;
}
int main()
{
    int t = read();
    map<int,bool> p;
    vector<int> primes;
    primes.pb(2);
    p[2]=1;
    for(int i=3;i<=1000000;i+=2)
    {
        bool flag =true;
        for(int j=0;primes[j]<=sqrt(i);j++)
        {
            if(i%primes[j]==0)
            {
                flag =false;
                break;
            }
        }
        if(flag)
        {
            primes.pb(i);
            p[i]=1;
        }
    }
    while(t--)
    {
    	
        int n = read();
        for(int i=0;i<=n;i++) fen[i]=0;
        for(int i=1;i<=n;i++)
        {
            int a = read();
            if(p[a]) 
            {
            	update(i,1,n);
            	
            }
        }
       
        
        int q = read();
        while(q--)
        {
            char c;
            cin >> c;
            if(c=='C')
            {
                int x = read();
                int y = read();
                int b = sum(x)-sum(x-1);
                if(b && !p[y]) 
                {
                	update(x,-1,n);
                	
                }
                else if(!b && p[y]) 
                {
                	update(x,1,n);
                
                }
            }
            else
            {
                int l = read(),r=read();
                cout << sum(r) - sum(l-1) << endl;
            }
        }
        
       // for(int i=1;i<=n;i++) cout << sum(i) << ' ';
    }
    return 0;
}

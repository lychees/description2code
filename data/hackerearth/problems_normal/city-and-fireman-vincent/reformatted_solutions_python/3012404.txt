from collections import defaultdict


class Graph():

    def __init__(self, connections=[], directed=False):
        self.status_dict = defaultdict(lambda: 1)
        self.graph_dict = defaultdict(list)
        self.is_directed = directed

    def add_edge(self, node1, node2):

        self.graph_dict[node1].append(node2)

        if not self.is_directed:
            self.graph_dict[node2].append(node1)

    def add_vertex(self, node):
        self.graph_dict[node]
        self.status_dict[node]


def dfs(g, src_node):
    global E
    risk_dict = defaultdict(list)
    stack = []
    stack.append(src_node)
    g.status_dict[src_node] = 2

    while len(stack) != 0:
        node = stack.pop()
        risk = E[node-1]
        risk_dict[risk].append(node)
        g.status_dict[node] = 3
        # print node,

        for nbs in g.graph_dict[node]:
            if g.status_dict[nbs] == 1:
                stack.append(nbs)
                g.status_dict[nbs] = 2

    return len(risk_dict.values()[0])


def connected_components(g):
    connected_components = 0
    ans = 1
    for node in g.graph_dict.keys():
        if g.status_dict[node] == 1:
            ans *= dfs(g, node)
            connected_components += 1
    return ans


N = int(raw_input())
g = Graph()

for i in range(N):
    g.add_vertex(i)

E = [int(x) for x in raw_input().split()]

K = int(raw_input())

for i in range(K):
    node1, node2 = [int(x) for x in raw_input().split()]
    g.add_edge(node1, node2)

print int(connected_components(g) % (1000000007))

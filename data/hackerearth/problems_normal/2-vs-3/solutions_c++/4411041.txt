// Anuraag Singh IIITDM-J
#include<iostream>
#include<math.h>
#include<string.h>
using namespace std;
typedef long long ll; 
ll arr[10000001];
ll tree[10000001];
ll powe[10000001];
void ex()
{
	ll z=1;
	for(int i=0;i<1000001;i++)
	{
		powe[i]=z%3;
		z=(z*2)%3;		
	}
}
void update(ll node, ll start,ll end, ll idx)
{
    if(start == end)
        tree[node] = arr[idx];
    else
    {
        ll mid = (start + end) / 2;
        if(start <= idx&&idx <= mid)
            update(2*node, start, mid, idx);
        else
            update(2*node+1, mid+1, end, idx);
        tree[node] = ((tree[2*node]*(ll)powe[end-mid])%3+ tree[2*node+1])%3;
    }
}
void build(ll node, ll start,ll end)
{
    if(start==end)
        tree[node]=arr[start];
    else
    {
        ll mid=(start+end)/2;
        build(2*node,start,mid);
        build(2*node+1,mid+1,end);
        tree[node]=((tree[2*node]*(ll)powe[end-mid])%3+tree[2*node+1])%3;
    }
}
int query(ll node, ll start, ll end, ll l, ll r)
{
    if(r < start or end < l)
		     return 0;
    if(l <= start && end <= r)
		     return (tree[node]*powe[r-end])%3; 
    ll mid = (start + end) / 2;
    ll p1 = query(2*node, start, mid, l, r);
    ll p2 = query(2*node+1, mid+1, end, l, r);
    return (p1+p2)%3;
}
int main()
{
	ex();
	ll anse;
	ll t;
	ll no;
	char ch[100001];
	cin>>no;
	cin>>(ch);
	for(ll i=1; i<=no ;i++)
			arr[i]=((int)ch[i-1]-48);

	build(1,1,no);

	cin>>t;
	ll ind;
	while(t--)
	{
		ll q;
		cin>>q;
			if(q==0)
					{ll start,end;
					cin>>start>>end;
					anse=query(1,1,no,start+1,end+1);
					cout<<anse<<endl;
					}
			else
				{
					cin>>ind;
					if(arr[ind+1]==0)
					{
							arr[ind+1]=1;
							update(1,1,no,ind+1);
					}
				}
		
	
	}
	return 0;
}
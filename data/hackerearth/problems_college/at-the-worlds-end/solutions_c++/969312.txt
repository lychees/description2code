//Author : Piyush Agarwal
#include<bits/stdc++.h>
using namespace std;
#define ll int
#define mod 1000000007
#define inp1(a) scanf("%lld",&a);
#define outl(a) printf("%lld\n",a);
#define out(a) printf("%lld ",a);
#define line printf("\n");
#define FOR(i,b,e) for(i=b;i<=e;i++)
#define mp make_pair
#define pb push_back
#define inp2(a,b) scanf("%lld %lld",&a,&b)
#define getcx getchar_unlocked
#define chkbit(s,b) (s & (1<<b))
#define setbit(s,b) (s | (1<<b))
#define clrbit(s,b) (s &= ~(1<<b))

inline void finp(ll *a )
{
	ll n=0; int ch = getcx(); int sign = 1;
	while(ch < '0' || ch > '9')
	{
	if(ch == '-') sign=-1; ch = getcx();
	}
	while(ch >= '0' && ch <= '9')
	{
	n = (n << 3) + (n << 1) + ch - '0', ch = getcx();
	}
	*a = n * sign;
}
ll power(ll b,ll e)
{
	ll x=1;
	while(e>0)
	{
		if(e&1)
			x=x*b;
		b=b*b;
		e=e/2;
	}
	return x;
}
ll gcd(ll a,ll b)
{
    if(b==0)
          return a;
    return gcd(b,a%b);
}

ll i,j,k,l,m,n,t,a[505][505],b[505][505],mark[505][505];
int possible(ll val)
{
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++) 
		{
		mark[i][j]=0;b[i][j]=-1000*505*505;	
		}
	}
	b[0][0]=val;
	for(i=1;i<m;i++)
	{
		if(a[0][i]+b[0][i-1]>0)
		{
			b[0][i]=a[0][i]+b[0][i-1];mark[0][i]=1;
		}
	}
	for(i=1;i<n;i++)
	{
		if(a[i][0]+b[i-1][0]>0)
		{
			b[i][0]=a[i][0]+b[i-1][0];mark[i][0]=1;
		}
	}
	for(i=1;i<n;i++)
	{
		for(j=1;j<m;j++)
		{
			ll k=max(b[i-1][j],b[i][j-1]);
			if(k+a[i][j]>0)
			{
				b[i][j]=k+a[i][j];mark[i][j]=1;
			}
		}
	}
	//if(t==0)
//	printf("for val %lld return %lld\n",val,mark[n-1][m-1]);
	if(mark[n-1][m-1]) return 1;
	return 0;
}
int main()
{
	//finp(&t);
	scanf("%d",&t);
	while(t--)
	{
		ll ans=1;
	scanf("%d",&n);
	scanf("%d",&m);
		for(i=0;i<n;i++)
			for(j=0;j<m;j++)
			scanf("%d",&a[i][j]);
		
		ll u=1000*501*501;
		ll l=1,mid;
		while(l<=u)
		{
		
			 mid=l+(u-l)/2;
			if(possible(mid))
			{
				u=mid-1;ans=mid;
			}
			else
				l=mid+1;
			
		}
		printf("%d\n",ans);
	}			
	return 0;
}




#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <stack>
#include <queue>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <utility>
#include <fstream>

using namespace std;

#define PB push_back
#define MP make_pair
#define S second
#define F first
#define MOD 1000000007
#define INF 1000000007
#define MAXN 1000000
#define LL long long
#define sd(x) scanf("%d", &x)
#define sld(x) scanf("%lld", &x)

LL pills[102];
vector<LL> v[102], vb[102];
bool vis[102];
stack<LL> s;
vector<LL> adj;

LL ans = 0;

inline void DFS(LL x, LL b){
    vis[x] = true;
    LL i;
    if(b == 0)
        for(i = 0; i < v[x].size(); i++){
            if(!vis[v[x][i]]){
                DFS(v[x][i], b);
            }
        }
    else{
        for(i = 0; i < vb[x].size(); i++){
            if(!vis[vb[x][i]]){
                DFS(vb[x][i], b);
            }
        }
    }
    if(b == 0)
        s.push(x);
    else
        adj.PB(x);

    return;
}

inline void Solve(){
    ans = 0;
    while(!s.empty()) s.pop();
    LL n, m, x, i, y;
    cin>>n>>m;
    for(i = 0; i <= n; i++){
        v[i].clear();
        vb[i].clear();
        vis[i] = false;
    }

    for(i = 1; i <= n; i++){
        cin>>pills[i];
    }
    for(i = 1; i <= m; i++){
        cin>>x>>y;
        x++; y++;
        v[x].PB(y);
        vb[y].PB(x);
    }
    for(i = 1; i <= n; i++){
        if(vis[i]){
            continue;
        }
        DFS(i, 0);
    }

    for(i = 0; i <= n; i++){
        vis[i] = false;
    }

    while(!s.empty()){
        x = s.top();
        s.pop();
        if(vis[x]) continue;
        //cout<<x<<endl;
        adj.clear();
        DFS(x, 1);
        LL temp_ans = 0;
        for(i = 0; i < adj.size(); i++){
            temp_ans += pills[adj[i]];
        }
        ans = max(ans, temp_ans);
    }
    cout<<ans<<endl;
    return;
}

int main(){
    //freopen("input.txt", "r", stdin);
    LL t = 1;
    cin>>t;
    while(t--){
        Solve();
    }
    return 0;
}



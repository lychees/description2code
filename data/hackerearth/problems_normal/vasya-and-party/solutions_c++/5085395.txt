#include<bits/stdc++.h>
using namespace std;
vector<long long int> g[100005];
vector<long long int> visited;
vector<long long int> knowledge;
vector<long long int> nol;
vector< pair<long long int, long long int> > maxmimum;
long long int maxileader = INT_MIN;
long long int maxknowledge = INT_MIN;
long long int c = 0;
void dfs(long long int n)
{
    visited[n] = 1;
    if(knowledge[n]>maxknowledge)
    {
        maxileader = n;
        maxknowledge = knowledge[n];
    }

    int i;
    for(i=0;i<g[n].size();i++)
    {
        if(!visited[g[n][i]])
            dfs(g[n][i]);
    }

}
void dfs2(long long int n, long long int k)
{
    visited[n] = 1;
    if(knowledge[n] == k)
        c++;
    int i;
    for(i=0;i<g[n].size();i++)
    {
        if(!visited[g[n][i]])
            dfs2(g[n][i],k);
    }

}
int main()
{
    long long int n,m,i,u,v;
    cin>>n>>m;
    visited.resize(n+1);
    knowledge.resize(n+1);
    for(i=0;i<=n;i++)
    {
        visited[i] = 0;
    }
    for(i=1;i<=n;i++)
    {
        cin>>knowledge[i];
    }
    for(i=1;i<=m;i++)
    {
        cin>>u>>v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    for(i=1;i<=n;i++)
    {
        if(!visited[i])
        {
            dfs(i);
            pair<long long int, long long int> p;
            p.first = maxileader;
            p.second = maxknowledge;
            maxmimum.push_back(p);
            maxknowledge = INT_MIN;
        }
    }

    for(i=0;i<=n;i++)
    {
        visited[i] = 0;
    }
   // cout<<"Maximum size : "<<maxmimum.size()<<endl;
    for(i=0;i<maxmimum.size();i++)
    {
        pair<long long int, long long int> p;
        p = maxmimum[i];
    //    if(!visited[i])
            dfs2(p.first, p.second);
        nol.push_back(c);
        c = 0;
    }
    long long int ans = 1;
    //cout<<"Size "<<nol.size();
    for(i=0;i<nol.size();i++)
    {
     //   cout<<nol[i]<<endl;
       ans = (ans*nol[i])%1000000007;

    }
    cout<<ans<<endl;


}

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define sd(x) scanf("%d",&x)
#define sfd(x) scanf("%d",&x)
#define pf printf

#define LL long long
#define ll long long
#define LD long double
#define ld long double
#define PB push_back
#define pb push_back
#define MP make_pair
#define mp make_pair
#define F first
#define S second

typedef pair<int,int> PII;
typedef vector<int> VI;

#define pii pair<int,int>
#define vi vector<int>
#define fr(i,n) for( int i=0; i<=n; i++)
#define frm(i,m,n) for(int i=m; i<=n; i++)

#define mod 1000000007
LL getpow(LL a,LL b){
    LL ret=1LL;
    LL inter=a;
    while(b){
        if(b&1){
            ret *= inter;
            ret %= mod;
        }
        inter *= inter;
        inter %= mod;
        b = b>>1;
    }
    return ret;
}
LL fact[1000002];
void pre()
{
    fact[0] = 1;
    for(int i=1;i<=1000001;i++)
    {
        fact[i] = (fact[i-1]*i)%mod;
    }

}
LL ncr(int n,int r)
{
    if(n<r||n<0||r<0) return 0;
    LL a = fact[n];
    LL b = getpow(fact[r],mod-2);
    LL c = getpow(fact[n-r],mod-2);

    a = (a*b)%mod;
    a = (a*c)%mod;
    return a;
}
string s;
void solve()
{
  cin>>s;
  int arr[26]={0};
  int a = 0,b = 0;
  for(int i = 0;i<s.length();i++)
  {
      if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')
      	a++;
      else
        b++;
    arr[s[i]-'a']++;

  }
  int p = b-(a-1);
  int q = a+1;
  LL ans = ncr(p+q-1,q-1);
  //cout<<ans<<endl;
  if(p<0)
  {
      cout<<-1<<endl;
      return;
  }
  ans = (ans*fact[a])%mod;
  ans = (ans*fact[b])%mod;
  for(int i=0;i<26;i++)
  {
      ans *= getpow(fact[arr[i]],mod-2);
      ans %= mod;
  }
  cout<<ans<<endl;

}


int main()
{
    pre();
    int t = 1;
    cin>>t;
    while(t--){
        //in();
        solve();
    }
}

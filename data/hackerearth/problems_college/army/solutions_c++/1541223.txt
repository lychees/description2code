#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <set>
#include <map>
#include <queue> 
#include <climits>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define pb push_back
#define mp make_pair
#define sz size()
#define ln length()
#define forr(i,a,b)                 for(int i=a;i<b;i++)
#define rep(i,n)                    forr(i,0,n) 
#define all(v)                      v.begin(),v.end()	
#define uniq(v)                     sort(all(v));v.erase(unique(all(v)),v.end())
#define clr(a)                      memset(a,0,sizeof a)
	
#define debug                       if(1)
#define debugoff                    if(0)	

#define print(x)                 cerr << x << " ";    
#define pn()				     cerr << endl;
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;

#define MAX 100010
#define MOD 1000000007
#define endl '\n'
int arr[20];
int l,q,m;
string n;
int mem[10][(1<<11)][2][2];
int gm=0;
int solve(int idx,int mask,int f,int end){

	if(idx == l)
	 	return (mask & gm)?1:0;
	
	int& res = mem[idx][mask][f][end];
	if(res != -1)	return res;

	int range = (end)?(n[idx]-'0'):9;
	res = 0;
	for(int i=0;i<=range;i++)
		res += solve(idx+1,(i != 0 || f)?(mask | (1<<i)):mask,(i != 0 || f),end && (i == range));
	
	return res;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin>>n;
	l = n.length();
	cin>>q;
	while(q--){

		cin>>m;
		gm = 0;
		for(int i=0;i<m;i++){
			cin>>arr[i];
			gm |= (1<<arr[i]);
		}
		/*
		int mm,rem;
		int cnt = 0;
		for(int i=1;i<=20;i++){
			int num = i;
			mm = 0;
			while(num){
				rem = num%10;
				mm |= (1<<rem);
				num/=10;
			}

			if(mm & gm)	cnt++;
		}
		cout<<cnt<<endl;
		*/
		memset(mem,-1,sizeof mem);
		cout<<solve(0,0,0,1)<<endl;
	}
	return 0; 
}
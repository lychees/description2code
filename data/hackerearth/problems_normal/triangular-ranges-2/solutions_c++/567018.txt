#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <cstring>
#include <string>
#include <algorithm>
#include <cassert>
#include <set>
#include <vector>
#define mx 1000000000000
using namespace std;

typedef long long ll;
typedef double ld;

vector<ll> tno;
vector<ll>::iterator it1,it2,it;
inline ll Scan_f()
{
    ll noRead=0;
    //register char p=getchar_unlocked();
    register char p=getc(stdin);
    //for(;p<48 || p>57;p=getchar_unlocked());
    for(;p<48 || p>57;p=getc(stdin));
    //while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getchar_unlocked();}
    while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getc(stdin);}
    return noRead;
};


int main()
{
    ll i,T,n,n1,l,r,k,sol;
    for(i=1;((i+1)*i)<= 2*mx;i++)
    {
     n = (i*(i+1))/2;
     tno.push_back(n);
    }
    T = Scan_f();
    while(T > 0)
    {
     l = Scan_f();
     r = Scan_f();
     sol = 0;
     it = tno.begin();
     while(it != tno.end())
     {
      k = *it;
      n = l - k;
      n1 = r - k;
     // if(2*k >= l && 2*k <= r)
     //   sol++;
      if(k <= l)
      {
        it1 = lower_bound(tno.begin(),tno.end(),n);
        it2 = lower_bound(tno.begin(),tno.end(),n1);
        if(*it > *it1)
            it1 = it;
        if(*it > *it2)
            it2 = it;
        sol += (it2 - it1);
//        if(k == l && ((*it2)+k < r))
//            sol++;
        if(it2 != tno.end() && binary_search(tno.begin(),tno.end(),n1) && (n1 >= k))
            sol++;
      }
      else
      {
       n = r - k;
       it1 = lower_bound(tno.begin(),tno.end(),n);
       if(*it1 > *it)
        sol += it1 - it;
      }
      it++;
      if(k > r)
        break;
     }
     printf("%lld\n",sol);
     T--;
    }
    return 0;
}

#include<iostream>

using namespace std;
long long merge(long long a[],long long low,long long mid,long long high,long long size)
{
	//cout<<"\n Inside Merge"<<endl;
	long long temp[size];
	long long l,j,m;
	l=low;
	j=low;
	m=mid+1;
	while((l<mid+1)&&(m<high+1))
	{
		if(a[l]<a[m])
		{
			temp[j]=a[l];
			l++;
		}
		else
		{
			temp[j]=a[m];
			m++;
		}
		j++;
	}
	
	if(l>mid)
	{
         for(long long k=m;k<=high;k++)
		 {
             temp[j]=a[k];
             j++;
         }
    }
    else
	{
         for(long long k=l;k<=mid;k++)
		 {
             temp[j]=a[k];
             j++;
         }
    }
   
    for(long long k=low;k<=high;k++)
	{
         a[k]=temp[k];
    }

}


long long part(long long a[],long long low,long long high)
{
	//cout<<"\n Inside Part"<<endl;
	long long size=high+1;
	if(low<high)
	{
		long long mid;
		mid=(low+high)/2;
		part(a,low,mid);
		part(a,mid+1,high);
		merge(a,low,mid,high,size);
	}
}


int main()
{
	long long t;
	cin>>t;
	while(t--)
	{
		long long n;
		cin>>n;
		long long a[n];
		for(long long i=0;i<n;i++)
		cin>>a[i];
		//for(long long i=0;i<n;i++)
		//cout<<a[i];
		//cout<<endl;
		part(a,0,(n-1));
		long long count=0;
		long long ncount=0;
		for(long long i=0;i<n;i++)
		{
			for(long long j=i+1;j<n;j++)
			{
				if(a[j]==a[i])
				{
				count++;
				ncount++;
				}
				else
				break;
			}
			if(ncount>0)
			{
				i=i+(ncount -1);
				ncount=0;
			}
		}
		cout<<count<<endl;
	}
}
#include <vector>
#include <string>
#include<fstream>
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<algorithm>

using namespace std;

long long find_max_exponent(long long n)
{
    long long factor = 0;
    long long exponent = 0;
    for(int i=2;i<=sqrt(n);i++)
    {
        long long exp = 0;
        while((n%i)==0)
        {
            //factor = i;
            n/=i;
            exp++;
        }
        if(exp>exponent)
        {
            factor = i;
            exponent = exp;
        }
    }
    if(factor == 0)
        return n;
    return factor;
}

int main()
{
    //freopen("practice.in","r",stdin);
	//freopen("C-small-attempt0.in","r",stdin);
	//freopen("C-large-attempt0.in","r",stdin);
	//freopen("output.out","w",stdout);
	long long test;
	test = 1;
    //scanf("%lld",&test);
    while(test--)
    {
        long long n,l;
        long long *arr = new long long[500002];
        scanf("%lld %lld",&n,&l);
        for(long long i=0;i<n;i++)
        {
            scanf("%lld",&arr[i]);
        }
        sort(arr,arr+n);
        arr[n-1]= (arr[n-1]*2)%1000000007;
        long long k =0;
        long long *factor = new long long[l];
        for(int i=2;i<=l;i++)
        {
            factor[i] = find_max_exponent(i);
        }
        for(long long i=2;i<=l;i++)
        {
            if((factor[i]%i)%2)
            {
                arr[n-1]= (arr[n-1]*2)%1000000007;
            }
            else
            {
                arr[k] = arr[k]/2;
                if(arr[k]==0)
                {
                    k++;
                }
            }
        }
        if(n-k>=0)
         printf("%lld\n",n-k);
        else
        	printf("0\n");
        for(long long i=k;i<n;i++)
        {
            printf("%lld ",arr[i]);
        }
        if(n-k!=0)
            printf("\n");
        //else
        //	printf("0\n");
    }
	return 0;
}

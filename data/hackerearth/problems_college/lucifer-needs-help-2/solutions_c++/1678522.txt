#include <bits/stdc++.h>
#define ll long long
#define gc getchar
#define pc putchar

inline void scanint(int &x)
{
    register int c = 0;
    x = 0;
    int flag = 0;
    for (; ((c != 45) && (c < 48 || c > 57)); c = gc());
    for (; ((c == 45) || (c > 47 && c < 58)); c = gc()) {
        if (c == 45)
            flag = 1;

        else
            x = (x<<1) + (x<<3) + c - 48;
    }

    if (flag)
        x = -x;
}

inline void writeint (int n)
{
    int N = n, rev, count = 0;
    rev = N;
    if (N == 0) { pc('0'); pc('\n'); return ;}
    while ((rev % 10) == 0) { count++; rev /= 10;} //obtain the count of the number of 0s
    rev = 0;
    while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}  //store reverse of N in rev
    while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
    while (count--) pc('0');
}

using namespace std;

ll bit[5000005], len;

void update(int idx, int val)
{
    while (idx <= len) {
        bit[idx] += val;
        idx += (idx & -idx);
    }
}

ll read(int idx)
{
    ll retval = 0;
    while (idx > 0) {
        retval += bit[idx];
        idx -= (idx & -idx);
    }

    return retval;
}

int main()
{
    int n, i, qu, x, y, z;

    scanint(n);

    len = (int)(1<<((int)(log2(n) + 1)));

    for (i = 1; i <= n; i++) {
        scanint(x);

        update(i, x);
        update(i+1, -x);
    }

    scanint(qu);

    while (qu--) {
        scanint(x);
        scanint(y);
        scanint(z);

        update(x, z);
        update(y+1, -z);
    }

    for (i = 1; i <= n; i++)
        printf("%lld\n", (ll)read(i));

    return 0;
}

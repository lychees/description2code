/* A Naive recursive implementation of 0-1 Knapsack problem */
#include<stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <map>
#include <unordered_map>
#include <stack>
using namespace std;

int search(vector <int> &A,int k)
{
    int low = 0;
    int high = A.size()-1;
    int mid;    
    for(;low<=high;)
    {
        mid = (high+low)/2;
        if(A[mid]==k) return 1;
        else if(k<A[mid]) high = mid-1;
        else low = mid+1;
    }
    return -1;
}
int get_first_index(vector <int> &A,int low,int high,int k)
{
    int mid;
    int first_i = -1;
    for(;low<=high;)
    {
        mid = (low + high)/2;
        if(A[mid] == k && A[low] == k)
            return low;
        if(A[mid]==k)
        {
            first_i = mid;
            high = mid-1;
        }
        else if(A[mid] > k)
            high = mid - 1;
        else if(A[mid] < k)
            low = mid + 1;
    }
    return first_i;
}
int get_last_index(vector <int> &A,int low,int high,int k)
{
    int mid,last_i = -1;
    for(;low<=high;)
    {
        mid = (low + high)/2;
        if(A[mid] == k && A[high] == k)
            return high;
        if(A[mid]==k)
        {
            last_i = mid;
            low = mid+1;
        }
        else if(A[mid] > k)
            high = mid - 1;
        else if(A[mid] < k)
            low = mid + 1;
    }
    return last_i;
}


int main()
{
    int n,k,i,max = 0,j,first,last,L,R,q;
    // cout << "Enter the no of elements : ";
    cin >> n;
    vector <int> A(n);
    // cout << "Enter the elements: ";
    for(i=0;i<n;i++)
        cin >> A[i];
    sort(A.begin(),A.end());
    // for(i=0;i<n;i++)
    //     cout << A[i] << " ";
    // cout << endl;
    cin >> q;
    for(i=0;i<q;i++)
    {
        cin >> L >> R;
        if(R>A[n-1] && L>A[n-1])
        {
            cout << 0 << endl;
            continue;
        }
        if(R<A[0] && L<A[0])
        {
            cout << 0 << endl;
            continue;
        }
        if(R > A[n-1])
            R = A[n-1];
        if(L < A[0])
            L = A[0];
        if(search(A,L) == -1)
        {
            for(j = L ;j<= R;j++)
            {
                if(search(A,j) == 1)
                {
                    L = j;
                    break;
                }
            }
        }
        if(search(A,R) == -1)
        {
            for(j = R ;j >= L;j--)
            {
                if(search(A,j) == 1)
                {
                    R = j;
                    break;
                }
            }   
        }
        first = get_first_index(A,0,n-1,L);
        last = get_last_index(A,0,n-1,R);
        // if(first == -1 && last == -1)
        //     cout << 0 << endl;
        // else 
        cout  << last - first + 1 << endl;
    }
    return 0;
}


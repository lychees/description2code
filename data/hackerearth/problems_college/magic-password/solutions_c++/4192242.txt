#include <bits/stdc++.h>

using namespace std;

vector< long > C;

 //   FILE *in = freopen("SampleInput.txt", "r", stdin);
   // FILE *out = freopen("SampleOutput.txt", "w", stdout);

int maxMatch(string S, string R){

    int count  = 0;
    for(long int i=0; i<S.length(); i++)
        if(S[i] == R[i])
            count += 1;

    return count;
}

string rotation(string S, char R){

    string X = S;

    if(R == 'R'){
        char temp = X[X.length() - 1];
        for(long int i=1; S[i] != '\0'; i++)
            X[i] = S[i-1];
        X[0] = temp;
    }
    else if(R == 'L'){
        char temp = X[0];
        for(long int i=S.length() - 2; i>=0; i--)
            X[i] = S[i+1];
        X[S.length() - 1] = temp;
    }

    return X;
}


int getMinSwap(string S, string R, int count, int maxum){

    if(R == S){
        C.push_back(count);
        return count;
    }

    vector< string > collection;
    for(long int i=0; i<R.length(); i++){
        for(long int j=0; j<R.length(); j++){

            string Y = R;
            if((i!=j)){
                char temp = Y[i];
                Y[i] = Y[j];
                Y[j] = temp;

                collection.push_back(Y);
            }
        }
    }

    for(long int i=0; i<collection.size(); i++){

        int h = maxMatch(S, collection[i]);
        if(h > maxum)
            getMinSwap(S, collection[i], (count + 1), h);
    }

}

int main(){

  //  assert(in != NULL);

    long T;
    cin>>T;
    assert(T>=1 && T<=25);

    while(T--){

        C.clear();
        string S;
        cin>>S;
        assert(S.length()>=1 && S.length()<=10);

        long N;
        cin>>N;
        assert(N>=1 && N<=10);

        string R = S;

        for(long int i=0; i<N; i++){
            char z;
            cin>>z;
            R = rotation(R, z);
        }

        int count = getMinSwap(S, R, 0, maxMatch(S, R));
        sort(C.begin(), C.end());
        cout<<C[0]<<endl;

    }

    return 0;
}

#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cassert>
#include <cstring>
#include <algorithm>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <unordered_map>
#include <unordered_set>
#include <memory.h>
using namespace std;
typedef long long ll;

int y[1003];
int c[1003];

int ly[1003][1003], ry[1003][1003];

int l[1003], r[1003];

int main() {
  int n;
  scanf("%d", &n);

  for (int i = 0; i <= 1000; i++) {
    l[i] = n - 1;
    r[i] = 0;
  }

  for (int i = 0; i < n; i++) {
    scanf("%d", y + i);
    c[y[i]]++;

    l[y[i]] = min(l[y[i]], i);
    r[y[i]] = max(r[y[i]], i);
  }

  for (int i = 0; i < n; i++) {
    for (int j = 0; j <= i; j++) {
      ly[i][j] = y[j];
      ry[i][j] = y[n - 1 - j];
    }
    sort(ly[i], ly[i] + i + 1);
    sort(ry[i], ry[i] + i + 1);
  }

  int ans = 0;
  for (int i = 0; i <= 1000; i++) {
    if (c[i]) {
      ans = max(ans, c[i]);
      for (int j = i + 1; j <= 1000; j++) {
        if (c[j]) {
          int cur = c[i] + c[j];

          const int ll = min(l[i], l[j]);
          const int rr = n - 1 - max(r[i], r[j]);

          if (ll) {
            const int k =
                upper_bound(ly[ll - 1], ly[ll - 1] + ll, i) - ly[ll - 1];
            if (k < ll && ly[ll - 1][k] < j) {
              cur++;
            }
          }

          if (rr) {
            const int k =
                upper_bound(ry[rr - 1], ry[rr - 1] + rr, i) - ry[rr - 1];
            if (k < rr && ry[rr - 1][k] < j) {
              cur++;
            }
          }

          ans = max(ans, cur);
        }
      }
    }
  }

  printf("%d", ans);

  return 0;
}

def isSumInSubset(inputSet, n, m):
    T = []
    for i in xrange(0, n+1):
        col = []
        for j in xrange(0, m+1):
            col.append(False)
        T.append(col)
    for i in xrange(0, n+1):
        T[i][0] = True
    for i in xrange(1, m+1):
        T[0][i] = False

    for i in xrange(1, n+1):
        for j in xrange(1, m+1):
            if j < inputSet[i-1]:
                T[i][j] = T[i-1][j]
            else:
                T[i][j] = T[i-1][j] or T[i-1][j - inputSet[i-1]]

    return T[n]


K = int(raw_input())
while K:
    p, m = map(int, raw_input().split())
    valid_nums = map(int, raw_input().split())
    family_ids = map(int, raw_input().split())

    family_ids_count = {}
    max_count_from_single_family = 0
    for fid in family_ids:
        if fid in family_ids_count.keys():
            family_ids_count[fid] += 1
        else:
            family_ids_count[fid] = 1
        if max_count_from_single_family < family_ids_count[fid]:
            max_count_from_single_family = family_ids_count[fid]

    count = 0
    T = isSumInSubset(valid_nums, m, max_count_from_single_family)
    for _id in family_ids_count.keys():
        if T[family_ids_count[_id]]:
            count += 1
    print count
    K -= 1

#include<bits/stdc++.h>
#define gc getchar
#define pc putchar
#define maxm 1005
#define si(n) scanf("%d",&n)
#define sc(c) scanf("%c",&c)
#define sll(n) scanf("%lld",&n)
#define print(n) printf("%d",n)
#define printll(n) printf("%lld",n)
#define loop(i,j,n) for(int(i)=(j);(i)<(n);++(i))
#define rep(i,n) for(int(i)=0;(i)<(n);++(i))
#define ll long long
#define vi vector<int>
#define vii vector< pair<int,int> >
#define pii pair<int,int>
#define sz(x) (int)x.size()
#define pn pc('\n')
#define mp make_pair
#define fi first
#define se second
#define pb push_back
#define all(x) x.begin(),x.end()
#define INF 987654321

using namespace std;

int n,m;
int D[maxm];
vector< vector< pair<int,int> > > G(maxm);
void read()
{
    cin >> n >> m;
    while(m--)
    {
        int x,y,c;
        cin >> x >> y >> c;
        x--;
        y--;
        G[x].pb(mp(y,c));
    }
}

void dijkstra()
{
    priority_queue< pii,vii,greater<pii> > q;
    D[0] = 0;
    q.push(mp(0,0));
    int color = 0,prev_color = 0;
    while(!q.empty())
    {
        pii p = q.top();
        q.pop();
        int node = p.fi;
        prev_color = color;

        for(vii::iterator it = G[node].begin();it!=G[node].end();++it)
        {
            int nd = it->fi;
            int cost = 1;
            color = it->se;
            if((D[nd] > D[node] + cost) && color != prev_color)
            {
                D[nd] = D[node] + cost;
                q.push(mp(nd,D[nd]));
            }
        }
    }
}

void solve()
{
    dijkstra();
}

int main()
{
    ios_base::sync_with_stdio(false);
    for(int i = 0;i<maxm;++i)
        D[i] = INF;
    read();
    solve();
    if(D[n-1] == INF)
        cout << "-1" << endl;
    else
        cout << D[n-1] << endl;

    return 0;
}


#include<bits/stdc++.h>
#define len 1005
#define For(i,a,b) for(int i=a;i<b;i++)
int arr[len];
typedef long long ll;
using namespace std;
int main(){
	bool isSubsetSum(int[], int, int,int);
	
	int t;
	cin>>t;
	while(t--){
	int n,k;
	cin>>n;	
	cin>>k;
	int total=0;
	For(i,0,n){cin>>arr[i]; total+=arr[i];}
	isSubsetSum(arr,n,total,k);
	}
}

bool isSubsetSum(int set[], int n, int sum,int total)
{
    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    //  with sum equal to i
    bool subset[sum+1][n+1];
 
    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
      subset[0][i] = true;
 
    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum; i++)
      subset[i][0] = false;
 
     // Fill the subset table in botton up manner
     for (int i = 1; i <= sum; i++)
     {
       for (int j = 1; j <= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= set[j-1])
           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
       }
     }
 
    /* // uncomment this code to print table
     for (int i = 0; i <= sum; i++)
     {
       for (int j = 0; j <= n; j++)
          printf ("%4d", subset[i][j]);
       printf("\n");
     } */
 
     if(subset[total][n]) cout<<"Yes \n";
     else{
     	cout<<"No \n";
     	int mxl,mxh;
		int i=total;
     	
		while(i<=sum){
			if(subset[i][n]==1){
			mxh=i;break;	
			}
			i++;
		}
		 i=total;
     	
		while(i>=0){
			if(subset[i][n]==1){
			mxl=i;break;	
			}
			i--;
		}
		if(total-mxl<mxh-total) cout<<mxl<<"\n";
		else if(total-mxl>=mxh-total) cout<<mxh<<"\n";
//		if(i==-1) cout<<"0 \n"; 
     }
}
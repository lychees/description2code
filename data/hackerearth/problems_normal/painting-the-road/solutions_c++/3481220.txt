//problem name painting the road
//type - 3D DP, knapsack type

#include<bits/stdc++.h>
#define MAXIDX 520
#define MAXS 260
#define MAXE 260
using namespace std;

class state {
    public:
    int x,y,w;

    state(int x,int y,int w) {
        this->x = x;
        this->y = y;
        this->w = w;
    }

    bool operator < (const state& s)const{
        return ((x < s.x) || (x == s.x && y < s.y ) || (x == s.x && y == s.y && w < s.w)) ;
    }
};

vector<state> d;
#define INF 0x3f3f3f3f
int mem[MAXIDX][MAXS][MAXE];
int K,L;

void init(){
    for(int i = 0 ; i < MAXIDX; i++)
        for(int j = 0 ; j < MAXS; j++)
            for(int k = 0; k < MAXE ; k++)
                mem[i][k][j] = -1;
}

int solve(int idx,int s,int e){
    if(idx == K){
        if(s == 0 && e == L) return 0;
        else return INF;
    }

    if(mem[idx][s][e] != -1) return mem[idx][s][e];
    int ret = INF;
    ret = min(ret,solve(idx+1,s,e));
    if((s == 257 && e ==0) || ( d[idx].x <= e))
    //if(( d[idx].x <= s && d[idx].y >= s) || (d[idx].x <= e && d[idx].y >= e) || (s == 257 && e ==0))
        ret = min(ret,d[idx].w+solve(idx+1,min(s,d[idx].x),max(e,d[idx].y)));
    return (mem[idx][s][e] = ret);
}

int main(){
    int T,a,b,c;
    cin>>T;

    while(T--){
        d.clear();
        init();
        cin>>L>>K;
        for(int i =0 ; i< K; i++){
            cin>>a>>b>>c;
            d.push_back(state(a,b,c));

        }

        sort(d.begin(),d.end());
        int r = solve(0,257,0);
        if(r >= INF) r = -1;

        cout<<r<<endl;

    }

    return 0;
}

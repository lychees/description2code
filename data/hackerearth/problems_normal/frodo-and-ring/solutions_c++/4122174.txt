#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long in ;
in maxenergy(in **c,in m,in n)
{
	in var;bool flag=true;
	//vector <in> v;
	in **cost=new in*[m+1];
	for(in i=0;i<m+1;i++)
    cost[i]=new in[n+1];
    cost[0][0]=c[0][0];
    for(in i=1;i<=n;i++)
    {
    	if(cost[0][i-1]<0) cost[0][i]=cost[0][i-1];
    	else
    	cost[0][i]=cost[0][i-1]+c[0][i];
    }
     
     for(in i=1;i<=m;i++)
     {
     	if(cost[i-1][0]<0) cost[i][0]=cost[i-1][0];
    	else
     	cost[i][0]=cost[i-1][0]+c[i][0];
     }
     
	for(in i=1;i<=m;i++)
	{
		for(in j=1;j<=n;j++)
		{
			//var=c[i][j]+max(cost[i][j-1],cost[i-1][j]);
			var=max(cost[i][j-1],cost[i-1][j]);
			if(var>=0)
			cost[i][j]=var+c[i][j];
			else
			{
				cost[i][j]=var;
			}
		}
	}
	if(cost[m][n]>=0) 
	return cost[m][n];
	else return -1;
//	v.push_back(cost[m][n]);
	
/*	in r=m,cl=n;
	while(1)  // tracing the path
	{
		if(r==0&&cl==0)
		break;
		else if(r==0&&cl>0)
		  {
		  	v.push_back(cost[0][cl-1]);
		  	cl--;
		  }
		else if(r>0&&cl==0) 
		{
			v.push_back(cost[r-1][0]);
			r--;
		}
		else if((cost[r-1][cl]>cost[r][cl-1]))
		{
			v.push_back(cost[r-1][cl]);
			r--;
		}
		else{
				v.push_back(cost[r][cl-1]);
				cl--;
		} 
	}
	in ret=cost[m][n];
	for( in  i=0;i<v.size();i++)
	{
		if(v[i]<0) 
		{
			ret=-1;
			break;
		}
	}
	for(in i=0;i<m+1;i++)
	 delete [] cost[i];
	 delete [] cost;
	return ret;*/
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    in t;
    cin>>t;
    while(t--)
    {
    	in n,m;
    	char var;
    	cin>>n>>m;
    	in **cost=new in *[n];
    	for(in i=0;i<n;i++)
    	cost[i]=new in[m];
    	for(in i=0;i<n;i++)
    	{
    		for(in j=0;j<m;j++)
    		{
    			cin>>var;
    			if(var=='T') cost[i][j]=150;
    			else if(var=='D') cost[i][j]=-100;
    			else cost[i][j]=0;
    		}
    	}
    	cout<<maxenergy(cost,n-1,m-1)<<endl;
    	for(in i=0;i<n;i++)
	 		delete [] cost[i];
	 		delete [] cost;
    }
    return 0;
}

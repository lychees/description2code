/* in the name of ALLAH, most gracious, most merciful */

//{{{ ************[       Template       ]************
#include <bits/stdtr1c++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>

// using namespace __gnu_pbds;
using namespace std;
//{{{ ************[  Loops               ]************
#define FORAB(i, a, b)  for (__typeof(b) i = (a), i##_b = (b); i <= i##_b; ++i)
#define REP(i, n)       FORAB (i, 0, (n) - 1)
#define FOR(i, n)       FORAB (i, 1, (n) - 1 + 1)
#define ROFBA(i, a, b)  for (__typeof(b) i = (b), i##_a = (a); i >= i##_a; --i)
#define PER(i, n)       ROFBA (i, 0, (n) - 1)
#define ROF(i, n)       ROFBA (i, 1, (n) - 1 + 1)
#define FOREACH(i, s)   for (__typeof((s).end()) i = (s).begin(); i != (s).end(); ++i)
//}}}
//{{{ ************[  Floating points     ]************
#define EPS             DBL_EPSILON
#define ABS(x)          (((x) < 0) ? - (x) : (x))
#define ZERO(x)         (ABS(x) < EPS)
#define EQUAL(x, y)     (ZERO((x) - (y)))
//}}}
//{{{ ************[  Macros              ]************
#define MS(x, y)        memset((x), (y), sizeof((x)))
#define CLR(x)          MS((x), 0)
#define RST(x)          MS((x), -1)
#define ALL(x)          (x).begin(), (x).end()
#define SZ(x)           ((int)(x).size())
#define UNIQUE(x)       (x).resize(unique(ALL(x)) - (x).begin())
#define PB              push_back
#define MP              make_pair
#define F               first
#define S               second
//}}}
//{{{ ************[  Debugger            ]************
template <class A, class B> ostream& operator<<(ostream& o, const pair <A, B> &p) { // for std::pair
    return o << "(" << p.first << ", " << p.second << ")";
}

template <class T> void __print__(string param, T& x) { cout << param << " :: " << x << endl; }
template <class T> void __print__(string param, T x[], int n) {
    cout << string(param, 0, param.find(',')) << " :: ";
    REP (i, n) cout << (i ? ", " : "[") << x[i]; cout << "]\n";
}

template <class T> void __stl_print__(T& x) { // for all STL containers
    cout << "["; FOREACH (i, x) cout << (i != x.begin() ? ", " : "") << *i; cout << "]" << endl;
}

#define NL { cout << endl; }
#define LOG(...) { __print__(#__VA_ARGS__, __VA_ARGS__); }
#define SLOG(x) { cout << #x << " :: "; __stl_print__(x); }
//}}}
//{{{ ************[  Utilities           ]************
template <class A, class B, class C> inline C power(A p, B e, C m) { // (p ^ e) % m
    long long ret = 1;
    for (; e; e >>= B(1)) {
        if (e & B(1)) ret = (ret * p) % m;
        p = (p * p) % m;
    }
    return (C) (ret >= 0 ? ret : (ret + m));
}

template <class T> inline bool read(T& x) {
    int c, sgn = 1;
    for (c = getchar(); ~c && (c < '0' || c > '9'); c = getchar()) if (c == '-') sgn = -1;
    for (x = 0; ~c && ('0' <= c && c <= '9'); c = getchar()) x = x * 10 + c - '0';
    x *= sgn;
    return ~c;
}

vector <string> tokenizer(string s) {
    vector <string> vs; stringstream ss(s);
    for (string token; ss >> token;) vs.PB(token);
    return vs;
}

template <class A, class B> inline A max(A a, B b) { return a > b ? a : b; }
template <class A, class B> inline A min(A a, B b) { return a < b ? a : b; }
template <class A, class B> inline void swap(A &a, B &b) { A temp = a; a = b; b = temp; }
template <class A, class B> inline B mod(A a, B m) { return (a %= m) >= 0 ? a : (a + m); }
template <class T> inline T modInv(long long x, T m) { return x < 2 ? x : mod((1 - 1LL * m * modInv(m % x, x)) / x, m); } // x ^ -1 = y (mod m)
template <class T> inline T gcd(T a, T b) { while (a && b) a > b ? a %= b : b %= a; return a + b; }
template <class T> string toString(T x) { stringstream ss; ss << x; return ss.str(); }
template <class T> void toNumber(string s, T& x) { stringstream ss(s); ss >> x; }

// int dx[] = {0, -1, 0, 1}, dy[] = {-1, 0, 1, 0}; // 4 directions, clockwise
// int dx[] = {0, -1, -1, -1, 0, 1, 1, 1}, dy[] = {-1, -1, 0, 1, 1, 1, 0, -1}; // 8 directions, clockwise
// int dx[] = {-1, -2, -2, -1, 1, 2, 2, 1}, dy[] = {-2, -1, 1, 2, 2, 1, -1, -2}; // knight's move, clockwise

// cin.sync_with_stdio(false); cin.tie(false);
// cout << fixed << setprecision(10) << p << endl;
//}}}
//{{{ ************[  Typedefs && Consts  ]************
typedef long long LL;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
typedef vector <int> VI;
typedef vector <PII> VII;

const int MAX_N   = int(1e5) + 7;
const int LOG_MAX = 22;
const int MAX_E   = int(1e6) + 7;
//const int MOD   = int(1e9) + 7;
const int INF     = (1 << 30) - 1;
const LL  LINF    = 1LL << 62;
const double PI   = 2 * acos(0.0);
//}}}
//}}}

struct Node {
    LL prefix, suffix, tot, sum;

    Node() { prefix = suffix = tot = sum = 0; }
    Node(LL x) {
        prefix = suffix = tot = x;
        sum = max(0, x);
    }

    Node(LL prefix, LL suffix, LL tot, LL sum) :
            prefix(prefix),
            suffix(suffix),
            tot(tot),
            sum(sum)
    {}
};

Node merge(Node bottom, Node top) {
    LL prefix = max(bottom.prefix, bottom.tot + top.prefix);
    LL suffix = max(bottom.suffix + top.tot, top.suffix);
    LL tot    = bottom.tot + top.tot;
    LL sum    = max(
        max(
            max(prefix, suffix),
            max(tot, bottom.suffix + top.prefix)
        ),
        max (bottom.sum, top.sum)
    );

    return Node(prefix, suffix, tot, sum);
}

Node reverse(Node node) {
    return Node(node.suffix, node.prefix, node.tot, node.sum);
}

int N, Q, parent[MAX_N], depth[MAX_N], p_edge[MAX_N];
vector<PII> g[MAX_N];

int F[LOG_MAX][MAX_N];
Node SP[LOG_MAX][MAX_N];

void build_lca() {
    RST(F);

    REP(i, N) {
        F[0][i]  = parent[i];
        SP[0][i] = Node(p_edge[i]);
    }

    FOR(i, LOG_MAX - 1) {
        REP(j, N) {
            if (F[i - 1][j] == -1) continue;

            int intermediate_parent = F[i - 1][j];
            F[i][j]  = F[i - 1][intermediate_parent];
            SP[i][j] = merge(SP[i - 1][j], SP[i - 1][intermediate_parent]);
        }
    }
}

// returns -1 if no lca is found
int get_lca(int u, int v) {
    if (depth[u] < depth[v]) swap(u, v);

    PER(i, LOG_MAX) {
        int pu = F[i][u];
        if (pu == -1 || depth[pu] < depth[v]) continue;
        u = pu;
    }

    if (u == v) return u;

    PER(i, LOG_MAX) {
        if (F[i][u] != F[i][v]) {
            u = F[i][u], v = F[i][v];
        }
    }

    return F[0][u];
}

Node get_max_sum_to_ancestor(int u, int ancestor) {
    Node cur;
    bool flag = true;

    PER(i, LOG_MAX) {
        int pu = F[i][u];
        if (pu == -1 || depth[pu] < depth[ancestor]) continue;

        if (flag) {
            cur = SP[i][u];
            flag = false;
        } else {
            cur = merge(cur,  SP[i][u]);
        }

        u = pu;
    }

    return cur;
}

LL get_max_sum(int u, int v) {
    int lca = get_lca(u, v);

    return merge(
        get_max_sum_to_ancestor(u, lca),
        reverse(get_max_sum_to_ancestor(v, lca))
    ).sum;
}

void dfs(int u, int par, int dep, int w) {
    parent[u] = par;
    depth [u] = dep;
    p_edge[u] = w;

    FOREACH(v, g[u]) {
        if (v->F == par) continue;
        dfs(v->F, u, dep + 1, v->S);
    }
}

int main() {
#ifdef Local
    freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
#endif
    scanf("%d %d", &N, &Q);

    REP(i, N - 1) {
        int u, v, w;

        scanf("%d %d %d", &u, &v, &w);
        --u, --v;

        g[u].PB(MP(v, w));
        g[v].PB(MP(u, w));
    }

    dfs(0, -1, 0, 0);
    build_lca();

    REP(i, Q) {
        int u, v;
        scanf("%d %d", &u, &v);

        --u, --v;
        printf("%lld\n", get_max_sum(u, v));
    }

    return 0;
}

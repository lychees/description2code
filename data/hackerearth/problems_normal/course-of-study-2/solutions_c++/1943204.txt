#include<bits/stdc++.h>
using namespace std;
#define vi vector < int >
#define pii pair < int , int >
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define foreach(it,v) for( __typeof((v).begin())it = (v).begin() ; it != (v).end() ; it++ )
#define ll long long
#define llu unsigned long long
#define MOD 1000000007
#define INF 0x3f3f3f3f
#define dbg(x) { cout<< #x << ": " << (x) << endl; }
#define dbg2(x,y) { cout<< #x << ": " << (x) << " , " << #y << ": " << (y) << endl; }
#define all(x) x.begin(),x.end()
#define mset(x,v) memset(x, v, sizeof(x))
#define sz(x) (int)x.size()
int m[100005];
ll fact[100005];
ll invfact[100005];
ll modpow(ll a,ll b)
{
    ll r = 1;
    while(b)
    {
        if(b&1)
            r = (r*a)%MOD;
        b >>= 1;
        a = (a*a)%MOD;
    }
    return r;
}
ll nCr(int n,int r)
{
    if(n < r || n < 0)
        return 0;
    ll ret = fact[n];
    ret = (ret*invfact[r])%MOD;
    ret = (ret*invfact[n-r])%MOD;
    return ret;
}
int main()
{
    int n,i,j;
    fact[0] = fact[1] = 1;
    for(i=2;i<=100000;i++)
    {
        fact[i] = (i*fact[i-1])%MOD;
    }
    invfact[100000] = modpow(fact[100000],MOD-2);
    for(i=99999;i>=0;i--)
    {
        invfact[i] = ((i+1)*invfact[i+1])%MOD;
    }
    scanf("%d",&n);
    assert(1 <= n && n <= 100000);
    int tot = 0;
    ll ans = 1;
    for(i=0;i<n;i++)
    {
        int x,y;
        scanf("%d",&x);
        m[i] = x;
        tot += m[i];
        assert(1 <= m[i] && m[i] <= 100000);
        vi v(m[i]);
        for(j=0;j<m[i];j++)
        {
            scanf("%d",&v[j]);
        }
        sort(all(v));
        int len = 1 , pre = v[0];
        for(j=1;j<m[i];j++)
        {
            if(pre == v[j])
            {
                len++;
            }
            else
            {
                ans = (ans * fact[len])%MOD;
                len = 1;
            }
            pre = v[j];
        }
        if(len)
        {
            ans = (ans * fact[len])%MOD;
        }
    }
    assert(1 <= tot && tot <= 100000);
    ans = (ans*fact[tot])%MOD;
    for(i=0;i<n;i++)
    {
        ans = (ans * invfact[m[i]])%MOD;
    }
    assert(0 <= ans && ans < MOD);
    printf("%lld\n",ans);
    return 0;
}
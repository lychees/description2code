		using namespace std;
#include <bits/stdc++.h>
#define FOR(i,a,b) for(int i = (a), _b = (b); i<= _b; ++i)
#define FORD(i,a,b) for(int i = (a), _b = (b); i>=_b; --i)

typedef long long LL;
const int base = 1e9 + 7;
struct matrix{
	int m, n;
	LL a[3][3];
	void init(){
		m = 0;
		n = 0;
		FOR(i,0,2) FOR(j,0,2) a[i][j] = 0ll;
	}
};

matrix multimatrix(matrix a,matrix c){
   
   matrix b;
   b.init();
   b.m = a.m;
   b.n = c.n;
   
   FOR(i,0,a.m - 1) FOR(j,0,c.n - 1) FOR(z,0,a.n - 1)
   b.a[i][j]=(b.a[i][j]+LL(a.a[i][z]*c.a[z][j]) % base)%base;
   
   return b;
}

matrix f[100], res;

int ri(){
	int x;
	scanf("%d",&x);
	return x;
}

LL rll(){
	LL x;
	cin >> x;
	return x;
}

int main(){

	//freopen("inp","r",stdin);

	int ntest = ri();
	f[0].init();
	f[0].m = 3;
	f[0].n = 3;
	f[0].a[0][0] = 0;
	f[0].a[0][1] = 4;
	f[0].a[0][2] = 4;
	f[0].a[1][0] = 1;
	f[0].a[1][1] = 2;
	f[0].a[1][2] = 2;
	f[0].a[2][0] = 0;
	f[0].a[2][1] = 0;
	f[0].a[2][2] = 1;
	FOR(i,1,64){
		f[i] = multimatrix(f[i-1],f[i-1]);
	}
	FOR(test,1,ntest){
		LL n = rll();
		if( n == 1) {
			cout << 2 << endl; 
			continue;
		}
		n -= 2;
		res.m = 1;
		res.n = 3;
		res.a[0][0] = 2;
		res.a[0][1] = 12;
		res.a[0][2] = 14;
		int t = 0;
		while( n > 0){
			if( n & 1 == 1) res = multimatrix(res, f[t]);
			n /= 2;
			t++;
		}

		cout << res.a[0][2] << endl;
	}

	return 0;
}


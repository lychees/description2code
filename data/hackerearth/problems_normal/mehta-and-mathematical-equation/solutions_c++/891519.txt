#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <complex>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <sstream>
using namespace std;
#define f(i,n) for(i=0;i<n;i++)
#define f2(i,n) for(i=1;i<=n;i++)
#define ll long long
#define ld long double
#define MOD 1000000007
ll A[64][3];
ll g(ll n){
	if(n<0)
		return 0;
	if(n&1)
		return ((((n+1)/2)%MOD)*((n+2)%MOD))%MOD;
	return ((((n+2)/2)%MOD)*((n+1)%MOD))%MOD;
}
ll func(ll n, int ls, int c){
	ll k=n>>ls;
	if(!A[ls][c]){
		if(k<3)
			A[ls][c] = 0;
		else if(k&1){
			if(!c)
				A[ls][c] = (g(k/2-1)+3*func(n,ls+1,0))%MOD;
			else if(c==1)
				A[ls][c] = (3*func(n,ls+1,1)+func(n,ls+1,0))%MOD;
			else
				A[ls][c] = (g(k/2-2)+3*func(n,ls+1,1))%MOD;
		} else {
			if(!c)
				A[ls][c] = (3*func(n,ls+1,1)+func(n,ls+1,0))%MOD;
			else if(c==1)
				A[ls][c] = (3*func(n,ls+1,1)+g(k/2-2))%MOD;
			else
				A[ls][c] = (3*func(n,ls+1,2)+func(n,ls+1,1))%MOD;
		}
	}
	return A[ls][c];
}
int main(){
	int t,i,j;
	ll n;
	scanf("%d",&t);
	while(t--){
		scanf("%lld",&n);
		f(i,3)
			f(j,64)
				A[j][i]=0;
		printf("%lld\n",func(n,0,0));
	}
	return 0;
}
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
int main() {
    ios_base::sync_with_stdio ( false );
    int n;
    ll d;
    cin>>n>>d;
    map<int,pii> workers;
    rep ( i,n ) {
        int t,x,y;
        cin>>t>>x>>y;
        if ( workers.count ( t ) ) {
            pii w=workers[t];
            if ( w.second>y ) continue;
            if ( w.second==y && w.first<x ) continue;
        }
        workers[t]=mp ( x,y );
    }
    ll best=0;
    ll cost=0;
    int last=0;
    for ( const pair<int,pii> w: workers ) {
        if ( d<=0 ) break;
            int t=w.first;
        d-= ( t-last ) *best;
        last=t;
        if ( d<=0 ) break;
        if ( w.second.second>best ) {
            best=w.second.second;
            cost+=w.second.first;
        }


    }
    cout<<cost<<endl;
}

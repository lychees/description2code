#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
#endif
}

/* Input opener ends */

#define gc getchar
inline void readInt(int &n) {
    n = 0;
    char ch = gc();
    while ( !isdigit(ch) ) ch=gc();
    while ( isdigit(ch) ) {
        n = n*10 + ch-48;
        ch=gc();
    }
}

vector<int> v[1005];
vector<int> whr, ans;
int canPick[1000005];
vector<int> m[1000005];
set<int> available;

int main() {
    input();

    int n; readInt(n);
    F(i,0,n) {
        int k; readInt(k);
        F(j,0,k) {
            int x; readInt(x);
            v[i].pb(x);
            whr.pb(0);
            canPick[x]++;
            m[x].pb(i);
        }
        if ( k != 0 )
            canPick[v[i][0]]--;
    }

    int endCount = 0;
    F(i,0,n) {
        if ( v[i].size() && canPick[v[i][0]] == 0 ) {
            available.insert(v[i][0]);
        }
    }

    while ( !available.empty() ) {

        int mn = *(available.begin());
        available.erase(mn);
        ans.pb(mn);

        F(i,0,m[mn].size()) {
            int arr = m[mn][i];

            whr[arr]++;
            if ( whr[arr] == v[arr].size() ) endCount++;
            else {
                canPick[v[arr][whr[arr]]]--;
                if ( canPick[v[arr][whr[arr]]] == 0 )
                    available.insert(v[arr][whr[arr]]);
            }

            // if ( whr[i] == v[i].size() ) continue;
            // if ( mn == v[i][whr[i]] ) {
            //     whr[i]++;
            //     if ( whr[i] == v[i].size() ) endCount++;
            //     else canPick[v[i][whr[i]]]--;
            // }
        }

    }
    printf("%d", ans[0]);
    F(i,1,ans.size()) printf(" %d", ans[i]);
    printf("\n");

    return 0;
}
#include <iostream>
#include <vector>
#include <cstring>
#include<algorithm>
using namespace std;
void swap(char* a, char* b)
{
    char t = *a;
    *a = *b;
    *b = t;
}
 
/* This function takes last element as pivot, places the pivot element at its
   correct position in sorted array, and places all smaller (smaller than pivot)
   to left of pivot and all greater elements to right of pivot */
int partition (char arr[], int l, int h)
{
    char x = arr[h];    // pivot
    int i = (l - 1);  // Index of smaller element
 
    for (int j = l; j <= h- 1; j++)
    {
        // If current element is smaller than or equal to pivot 
        if (arr[j] <= x)
        {
            i++;    // increment index of smaller element
            swap(&arr[i], &arr[j]);  // Swap current element with index
        }
    }
    swap(&arr[i + 1], &arr[h]);  
    return (i + 1);
}
 
/* arr[] --> Array to be sorted, l  --> Starting index, h  --> Ending index */
void quickSort(char arr[], int l, int h)
{
    if (l < h)
    {
        int p = partition(arr, l, h); /* Partitioning index */
        quickSort(arr, l, p - 1);
        quickSort(arr, p + 1, h);
    }
}
int main()
{
	int kases;
	cin>>kases;
	while(kases--)
	{
		char str[100],index=-1,m;
		cin>>str;
		int l= strlen(str);
		for(int i=0;i<l;i++)
		{
			if(str[i]<str[i+1])
	        index=i;
		}
		if(index==-1)
		{
			printf("no answer\n");
		    continue;
		}
		for(int j=index+1;j<l;j++)
		{
			if(str[index]<str[j])
			m=j;
		}
	    char temp;
	    temp=str[index];
	    str[index]=str[m];
	    str[m]=temp;
		
		quickSort(str, index+1, l-1);
		cout<<str<<endl;
		
		
	}
   // cout << "Hello World!" << endl;
    return 0;
}

        #include<bits/stdc++.h>
        using namespace std;
       // int move[51][51];
        bool visited[51][51];
        queue<int> q[2];
        void BFS(int n, int sx, int sy)
        {
        	visited[sx][sy] = true;
        	if(sx+1 < n)
        	{
        	//	move[sx+1][sy] = min(move[sx][sy]+1,move[sx+1][sy]);
        		q[0].push(sx+1);
        		q[1].push(sy);
        	}
        	if(sy+1 < n)
        	{
        //		move[sx][sy+1] = min(move[sx][sy]+1,move[sx][sy+1]);
        		q[0].push(sx);
        		q[1].push(sy+1);
        	}
        	int ti,tj;
        	while(!q[0].empty())
        	{
        		ti = q[0].front();
        		tj = q[1].front();
        		q[0].pop();
        		q[1].pop();
        		if(!visited[ti][tj])
        			BFS(n, ti, tj);
        	}
        }
        int main()
        {
        	int t, i, j, n;
        	cin>>t;
        	while(t--)
        	{
        		cin>>n;
     
        		int a[n][n];
        		for(int i=0  ;i<n ; ++i)
        		{
        			for(int j=0 ; j<n ;++j)
        				cin>>a[i][j];
    			}
        	//	memset(move, 1000000, sizeof(move[0][0]) * 51 * 51);
        		memset(visited, false, sizeof(visited[0][0]) * 51 * 51);
        	//	move[0][0] = 0;
        		for(int i=0  ;i<n ; ++i)
        		{
        			for(int j=0 ; j<n ;++j)
        			{
        				if(a[i][j]==0)
        				{
        					visited[i][j] = true;
        				//	move[i][j] = -1;
    					}
    				}
    			}	
        		BFS(n, 0, 0);
        		if(visited[n-1][n-1])
        			cout<<"POSSIBLE\n";
        		else
        			cout<<"NOT POSSIBLE\n";
        	}
        	return 0;
        } 
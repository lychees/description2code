/* abhra73 */
#include <bits/stdc++.h>
#define sp(z) 				setprecision(z)
#define sv(z) 				sort(z.begin(),z.end())
#define F 					first
#define S 					second
#define pb 					push_back
#define mp 					make_pair
#define ll 					long long
#define ld 					long double
#define fre(y,q,s) 			for(int y=q;y>=s;y--)
#define fr(y,q,s) 			for(int y=q;y<s;y++)
#define f(y,z) 				for(int y=0;y<z;y++)
#define fe(y,z) 			for(int y=1;y<=z;y++)
#define matrix(arr,n,m)		vector<vector<ll> > arr(n,vector<ll>(m,0))
using namespace std;
ll lmin(ll a,ll b){ return (a<b)?a:b; } ll lmax(ll a,ll b){ return (a>b)?a:b; }
ld dmin(ld a,ld b){ return (a<b)?a:b; } ld dmax(ld a,ld b){ return (a>b)?a:b; }
ll gcd(ll a,ll b){ return (b==0)?a:gcd(b,a%b); } ll lcm(ll a, ll b) { return (a*b)/gcd(a,b); }
ll modpow(ll a, ll n, ll mod){ ll res=1; while(n){ if(n&1)res=(res*a)%mod; a=(a*a)%mod; n>>=1; } return res; }
ll lpow(ll a, ll n){ ll res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }
ld dpow(ld a, ll n){ ld res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }

/* ********************** Main Code starts from here ********************** */

ll dp[2][5000];

int main(){

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	ll n, m, prev, curr, lim, mod, ans, temp;
	cin >> n >> m;
	
	mod = m * 2;
	lim = lpow(2, 12);
	prev = 0;
	curr = 1;
	dp[curr][0] = 1;
	fe(i, n){
		curr = 1 - curr;
		prev = 1 - prev;
		f(j, 5000){
			dp[curr][j] = 0;
		}
		f(msk, lim){
			if(dp[prev][msk] > 0){
				dp[curr][msk] += dp[prev][msk];
				if(dp[curr][msk] >= mod){
					dp[curr][msk] -= mod;
				}
				dp[curr][msk ^ i] += (dp[prev][msk] * 2) % mod;
				if(dp[curr][msk ^ i] >= mod){
					dp[curr][msk ^ i] -= mod;
				}
			}
		}
	}
	
	temp = modpow(3, n, mod);
	ans = temp + dp[curr][0];
	if(ans >= mod){
		ans -= mod;
	}
	ans /= 2;
	cout << ans << endl;
	
	return 0;
}
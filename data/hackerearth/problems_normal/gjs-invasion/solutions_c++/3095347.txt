#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>
#include <fstream>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME "a"

const ld EPS = 1e-9;
const int MAXN = 16;

ll dp[MAXN+2][(1 << MAXN) + 10];
ll cnt[MAXN+2][(1 << MAXN) + 10];
int mem_popcount[1 << MAXN];

int popcount(int mask) {
	if  (mem_popcount[mask] == -1) {
		mem_popcount[mask] = __builtin_popcount(mask);
	}
	return mem_popcount[mask];
}

bool bit(int mask, int i) {
	return mask & (1 << i);
}

ll solve(int n) {
	memset (dp, 0, sizeof dp);
	memset (cnt, 0, sizeof cnt);
	cnt[0][0] = 1;
	for (int len = 1; len <= n; ++len) {
		for (int mask = 0; mask < (1 << n); ++mask) {
			if  (popcount(mask) != len) {
				continue;
			}
			int was_less = 0;
			ford(i, n) {
				if  (bit(mask, i) && i != len - 1) {
					dp[len][mask] += dp[len - 1][mask ^ (1 << i)] + cnt[len - 1][mask ^ (1 << i)] * was_less;
					cnt[len][mask] += cnt[len - 1][mask ^ (1 << i)];
				}
				if  (bit(mask, i)) {
					++was_less;
				}
			}
			// printf("cnt[%d][%d] = %lld\n", len, mask, cnt[len][mask]);
			// printf("dp[%d][%d] = %lld\n", len, mask, dp[len][mask]);
		}
	}
	return dp[n][(1 << n) - 1];
}

int main() {
#ifdef DEBUG
	freopen(FILE_NAME ".in", "r", stdin);
//	freopen(FILE_NAME ".out", "w", stdout);
#endif
	
	memset (mem_popcount, -1, sizeof mem_popcount);

	vll mem(17, 0);
	for (int n = 1; n <= 16; ++n) {
		mem[n] = solve(n);
		// printf("ans[%d] = %lld\n", n, mem[n]);
	}

	int T;
	scanf("%d", &T);
	while (T --> 0) {
		int n;
		scanf("%d", &n);
		cout << mem[n] << '\n';
	}
	return 0;
}
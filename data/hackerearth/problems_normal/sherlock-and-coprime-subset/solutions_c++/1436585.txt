#include <iostream>
#include <cstdio>
#include <climits>
#include <vector>
#include <algorithm>
#include <map>
#include <cstring>
#include <queue>
using namespace std;

int primes[] = {2, 3, 5, 7 ,11 ,13 ,17 ,19 ,23, 29,31 ,37 ,41 ,43 ,47};

int dp[51][1 << 16];
bool exist[51][1 << 16];

int a[51];
int n;

int solve(int i, int mask)
{
    if (i == n){
        return 0;
    }
    if (!exist[i][mask]) {
       int size1 = solve(i+1, mask);
        int size2 = 0;
        bool flag = 1;
        for (int j = 0; j < sizeof(primes)/sizeof(int); j++) {
            if (a[i] % primes[j] == 0) {
                if (mask & (1 << j)) {
                    flag = 0;
                }
            }
        }
        if (flag) {
            int new_mask = mask;
            for (int j = 0; j < sizeof(primes)/sizeof(int); j++) {
                if (a[i] % primes[j] == 0) {
                    new_mask |= (1 << j);
                }
            }
            size2 = 1 + solve(i+1, new_mask);
        }
        dp[i][mask] = max(size1, size2);
        exist[i][mask] = 1;
    }
    return dp[i][mask];
}

int main()
{
    int t;
    scanf("%d", &t);
    while (t--) {
        memset(exist, 0, sizeof(exist));
        memset(dp, 0, sizeof(dp));
        scanf("%d", &n);
        for (int i = 0; i < n; i++) {
            scanf("%d", a+i);
        }
        printf("%d\n", solve(0, 0));
    }
}

#include <bits/stdc++.h>

#define li long long int 
#define Fw(i,a,b) for(int i=(a); i < (b); i++)
#define sz(c) (int)c.size();
#define Max 100005
#define f(idx) (idx&(-idx))
using namespace std;

li arr[Max];
int cnt[Max];
int bit[11][Max];

li read(int idx, int c) {
	li res = 0;
	while(idx > 0) {
		res+=bit[c][idx];
		idx-=f(idx);
	}
	return res;
}
void update(int c,int idx, int val,int size) {
	while(idx <= size) {
		bit[c][idx]+=val;
		idx+=f(idx);
	}
}

li query(int l, int r, int c){
	// cout << read(r,c) << " " << read(l-1,c);
	return read(r,c) - read(l-1,c);
}
int dig(li v) {
	int bith[11] = {0},cnt = 0;
	while(v){
		if(!bith[v%10]){bith[v%10] = 1;cnt++;}
		v/=10;
	}
	return cnt;
}
int main()
{
	int n,q,type;
	cin >> n;
	Fw(i,1,n+1){cin >> arr[i];cnt[i] = dig(arr[i]);update(cnt[i],i,1,n);}
	//Fw(i,0,n)cout << arr[i];
	//Fw(i,0,11)Fw(j,1,n+1)cout << bit[i][j] << (j==n?'\n':' ');
	cin >> q;
	while(q--) {
		cin >> type;
		li val;int l,r,u,c;
		if(type == 0) {
			cin >> u >> val;
			update(cnt[u],u,-1,n);
			arr[u]+=val;
			cnt[u] = dig(arr[u]);
			update(cnt[u],u,1,n);
		} else if (type == 1) {
			cin >> u >> val;
			update(cnt[u],u,-1,n);
			arr[u] = val;
			cnt[u] = dig(arr[u]);
			update(cnt[u],u,1,n);
		} else {
			cin >> l >> r >> c;
			cout << query(l,r,c) << endl;
		}
 	}
    return 0;
}

#include <stdio.h>
#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <stdlib.h>
#include <math.h>
#include <cstring>
#include <algorithm>
#include <map>
#include <set>
using namespace std;
#define ll long long 
#define _ ios::sync_with_stdio(false);
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define fr(i,a,n) for(int i=(a);i<=(n);i++)
#define frd(i,a,n) for(int i=(a);i>=(n);i--)
#define nl printf("\n")
#define pb push_back
#define mp make_pair 
#define F first 
#define S second
#define V vector
ll mod=1e9+7;
V<int> g[100005],t[100005];
int save[100005],c[100005],dep[100005];

int ST[400005][21],H[200005],E[200005],idx=0;
int L[200005],low[200005];
void dfslca(int u, int p,int d){
	E[idx]=u;
	H[u]=idx;
	L[idx++]=d;
	for(int i=0;i<g[u].size();i++)
	{
		int v=g[u][i];
		if(v==p)continue;
		dfslca(v,u,d+1);
		E[idx]=u;
		L[idx++]=d;
	}
}
void preRMQ(int n){
	fr(i,0,2*n)
	  ST[i][0]=i;
	for(int j=1; (1<<j) <= 2*n;j++)
	 for(int i=0; i+(1<<j) <= 2*n ;i++)
	 	ST[i][j]= (L[ST[i][j-1]] < L[ST[i+ (1<<(j-1))][j-1]]) ? ST[i][j-1] : ST[i+ (1<<(j-1))][j-1];
}
int query(int i,int j)
{
	if(i>j)swap(i,j);
	int k = (int)floor(log((double)j-i+1) / log(2.0));
	return (L[ST[i][k]] < L[ST[j-(1<<k)+1][k]])? ST[i][k] : ST[j-(1<<k)+1][k];
}
void dfs(int u,int p,int h)
{
	if(dep[c[u]]<h)dep[c[u]]=h,save[c[u]]=u;
	low[u]=h;
	for(int i=0;i<g[u].size();i++)
	{
		int v=g[u][i];
		if(v==p)continue;
		dfs(v,u,h+1);
	}
}
int ans[200005];
int main(){_
	int n,m,x,y,a,b;
	cin>>n>>m;
	fr(i,0,n-1)cin>>c[i],t[c[i]].pb(i);
	fr(i,1,n-1)
	{
		cin>>x>>y;
		x--;y--;
		g[x].pb(y);
		g[y].pb(x);
	}
	mem(dep,-1);
	mem(H,-1);
	dfs(0,-1,0);
	dfslca(0,-1,0);
	preRMQ(n);
	//for (int i = 0; i < 2*n; i++)for (int j = i; j < 2*n; j++)printf("RMQ(%d, %d) = %d\n", i, j, query(i, j));
	//fr(i,0,2*n)cout<<i<<" ";nl;fr(i,0,2*n)cout<<H[i]<<" ";nl;fr(i,0,2*n)cout<<E[i]<<" ";nl;fr(i,0,2*n)cout<<L[i]<<" ";nl;
	//fr(i,0,n-1)cout<<c[i]<<" ";nl;
	//fr(i,1,m)cout<<save[i]<<" ";nl;
	//fr(i,0,n-1)cout<<low[i]<<" ";
	//fr(i,0,m)cout<<save[i]<<" ";nl;
	fr(i,1,m)
	{
		//cout<<t[i].size()<<endl;
		for(int j=0;j<t[i].size();j++)
		{
			int y=t[i][j];
			int x=save[i];
			int cans= low[x]+low[y]- 2*low[E[query(H[x],H[y])]];
			ans[i]=max(ans[i],cans);
		}
	}
	fr(i,1,m)cout<<ans[i]<<" ";nl;
  return 0;
}

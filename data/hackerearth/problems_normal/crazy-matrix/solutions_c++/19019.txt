#include <cstring>
#include <string>
#include <cstdio>
#include<cmath>
#include <iostream>
using namespace std;
int flag[100][100],flag2[100][100],path1=0,path2=0,a[100][100];
void callpath1(int n,int row,int col)
{
    if(row==n-1) path1=1;
    else if(col==0)
    {
        if(a[row][col+1]==1 && flag[row][col+1]==0 && path1==0)
            {flag[row][col+1]=1;
                callpath1(n,row,col+1);
            }
        if(a[row+1][col+1]==1 && flag[row+1][col+1]==0 && path1==0)
            {flag[row+1][col+1]=1;
                callpath1(n,row+1,col+1);}
        if(a[row+1][col]==1 && flag[row+1][col]==0 && path1==0)
            {flag[row+1][col]=1;
                callpath1(n,row+1,col);}
    }
    else if(col==n-1)
    {
        if(a[row][col-1]==1 && flag[row][col-1]==0 && path1==0)
            {flag[row][col-1]=1;
                callpath1(n,row,col-1);}
        if(a[row+1][col-1]==1 && flag[row+1][col-1]==0 && path1==0)
            {flag[row+1][col-1]=1;
                callpath1(n,row+1,col-1);}
        if(a[row+1][col]==1 && flag[row+1][col]==0 && path1==0)
            {flag[row+1][col]=1;
                callpath1(n,row+1,col);}
    }
    else
    {
        if(a[row][col+1]==1 && flag[row][col+1]==0 && path1==0)
            {flag[row][col+1]=1;
                callpath1(n,row,col+1);
            }
        if(a[row+1][col+1]==1 && flag[row+1][col+1]==0 && path1==0)
            {flag[row+1][col+1]=1;
                callpath1(n,row+1,col+1);}
        if(a[row+1][col]==1 && flag[row+1][col]==0 && path1==0)
            {flag[row+1][col]=1;
                callpath1(n,row+1,col);}
        if(a[row][col-1]==1 && flag[row][col-1]==0 && path1==0)
            {flag[row][col-1]=1;
                callpath1(n,row,col-1);}
        if(a[row+1][col-1]==1 && flag[row+1][col-1]==0 && path1==0)
            {flag[row+1][col-1]=1;
                callpath1(n,row+1,col-1);}
    }
}
void callpath2(int n,int row,int col)
{
    //int path1=*path12;

    if(col==n-1) path2=1;
    else if(row==0)
    {
        if(a[row][col+1]==2 && flag2[row][col+1]==0 && path2==0)
            {flag2[row][col+1]=1;
                callpath2(n,row,col+1);
            }
        if(a[row+1][col+1]==2 && flag2[row+1][col+1]==0 && path2==0)
            {flag2[row+1][col+1]=1;
                callpath2(n,row+1,col+1);}
        if(a[row+1][col]==2 && flag2[row+1][col]==0 && path2==0)
            {flag2[row+1][col]=1;
                callpath2(n,row+1,col);}
    }
    else if(col==n-1)
    {
        if(a[row-1][col]==2 && flag2[row-1][col]==0 && path2==0)
            {flag2[row-1][col]=1;
                callpath2(n,row-1,col);}
        if(a[row-1][col+1]==1 && flag2[row-1][col+1]==0 && path2==0)
            {flag2[row-1][col+1]=1;
                callpath2(n,row-1,col+1);}
        if(a[row][col+1]==1 && flag2[row][col+1]==0 && path2==0)
            {flag2[row][col+1]=1;
                callpath2(n,row,col+1);}
    }
    else
    {
        if(a[row][col+1]==2 && flag2[row][col+1]==0 && path2==0)
            {flag2[row][col+1]=1;
                callpath2(n,row,col+1);
            }
        if(a[row+1][col+1]==2 && flag2[row+1][col+1]==0 && path2==0)
            {flag2[row+1][col+1]=1;
                callpath2(n,row+1,col+1);}
        if(a[row+1][col]==2 && flag2[row+1][col]==0 && path2==0)
            {flag2[row+1][col]=1;
                callpath2(n,row+1,col);}
        if(a[row-1][col]==2 && flag2[row-1][col]==0 && path2==0)
            {flag2[row-1][col]=1;
                callpath2(n,row-1,col);}
        if(a[row-1][col+1]==1 && flag2[row-1][col+1]==0 && path2==0)
            {flag2[row-1][col+1]=1;
                callpath2(n,row-1,col+1);}
    }
}
int main()
{
    int n;
    cin>>n;
    path1=0;
    path2=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>a[i][j];
            flag[i][j]=0;
            flag2[i][j]=0;
        }
    }
   for(int j=0;j<n;j++)
    {
        if(a[0][j]==1 && flag[0][j]==0 && path1==0){
            flag[0][j]=1;
            callpath1(n,0,j);}
    }
   for(int i=0;i<n;i++)
    {
        if(a[i][0]==2 && flag2[i][0]==0 && path2==0){
            flag2[i][0]=1;
            callpath2(n,i,0);}
    }
    if(path1==1 && path2 ==0) cout<<"1"<<endl;
    else if(path1==0 && path2 ==1) cout<<"2"<<endl;
    else if(path1==1 && path2 ==1) cout<<"AMBIGUOUS"<<endl;
    else cout<<"0"<<endl;
}

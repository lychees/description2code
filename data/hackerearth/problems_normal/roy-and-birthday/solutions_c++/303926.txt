#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <climits>
#include <cfloat>
#include <utility>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <iterator>
#include <complex>
#include <queue>
#include <stack>
#include <cctype>
#include <memory>
#include <ctime>
#include <bitset>
#include <deque>
#include <sstream>
#include <string>
#include <list>
#include <numeric>
#include <iomanip>

using namespace std;

typedef long long LL,ll;
typedef unsigned long long ULL,ull;
typedef pair<int,int> pii;
typedef pair<LL,LL> pll;

typedef vector<int> vint;
typedef vector< vector<int> > vvint;
typedef vector<ll> vll,vLL;
typedef vector< vector<ll> > vvll,vvLL;

#define REP(i,n) for(int i=0;i<int(n);i++)
#define REPD(i,n) for(int i=(int)(n-1);i>=0;i--)
#define cases(t) while(t--)

#define mod 1
#define EPS 1e-8

//------------------------------------------------------------------------//



#define m 1000000007
long long a[2000002];
char str[1000002];
int cnt[30];
long long inverse(long long n)
{
    long long v=1,k;
    k=m-2;
	while(k>0)
	{
	  if(k&1)
	    v=(v%m*n%m)%m;
	  n=(n%m*n%m)%m;
	  k/=2;
	}
	return v;
}
int main()
{
    long long ans,v1,v2;
	int i,j,t,n;
	a[0]=1;
	for(i=1;i<2000002;i++)
	a[i]=(i%m*a[i-1]%m)%m;

	scanf("%d",&t);
	while(t--)
	{
	   scanf("%s",str);
	   memset(cnt,0,sizeof(cnt));

	   int sz=strlen(str);
	   int cns=0,vow=0;
	   REP(i,sz){
			cnt[str[i]-'a']++;
			if((str[i]=='a' || str[i]=='e' || str[i]=='i' || str[i]=='o' || str[i]== 'u'))
				vow++;
			else cns++;
		}

	   if(vow>cns+1) { printf("-1\n"); continue;}
	   ll mxans=a[cns];
	   mxans=(mxans*a[vow])%m;
	   //printf("%d %d %lld\n",vow,cns,mxans);

	   REP(i,26){
			if(cnt[i]>1){
				if(cnt[i]%m==1) mxans=(mxans*((cnt[i]+1)%m))%m;
				else mxans=(mxans*(inverse(a[cnt[i]])))%m;
			}
		}
		//printf("%lld\n",mxans);
		ans=1;
		if(cns+1 >vow){


		   j=cns+1;
		   n=vow;
		   int k= j-n;
		   if(a[n]==1)
		   v1=1;
		   else if(a[n]%m==1&&a[n]!=1)
		   v1=(n+1)%m;
		   else v1=inverse(a[n]);

		   if(a[k]==1)
		   v2=1;
		   else if(a[k]%m==1&&a[k]!=1)
		   v2=n%m;
		   else v2=inverse(a[k]);

		   ans=(v1*v2)%m;
		   ans=(a[j]%m*ans)%m;
		}
		//printf("%lld\n",ans);
		mxans=(mxans*ans)%m;

		printf("%lld\n",mxans);
	}
	return 0;
}

def readOutPutCase():
	inputString = raw_input().split()
	countName = int(inputString[0])
	countTrans = int(inputString[1])
	namesList = []
	while(countName > 0):
		countName -= 1
		namesList.append(raw_input())
	transList = []
	while(countTrans > 0):	
		countTrans -= 1
		transList.append(readTransaction())
	processTransList(namesList,transList)

def readTransaction():
	transDict = {}
	paid_by = raw_input()
	amount = int(raw_input())
	memberCount = int(raw_input())
	transNamesList = []
	while (memberCount > 0):
		memberCount -= 1
		transNamesList.append(raw_input())

	transDict.update({"paid_by":paid_by, "amount":amount, "members":transNamesList})
	return transDict

def processTransList(namesList,transList):
	outDict = {}
	for name in namesList:
		outDict.update({name:0})
	for trans in transList:
		members = len(trans["members"]) + 1
		if trans["amount"]%members != 0:
			trans["amount"] -= trans["amount"]%members
		owed = trans["amount"]/members
		outDict[trans["paid_by"]] += (trans["amount"]-owed)
		for member in trans["members"]:
			outDict[member] -= owed
	printOutput(namesList,outDict)

def printOutput(namesList,outDict):
	for name in namesList:
		if int(outDict[name]) < 0:
			print name + " owes " + str(abs(outDict[name]))
		elif int(outDict[name]) == 0:
			print name + " neither owes nor is owed"
		elif int(outDict[name]) > 0:
			print name + " is owed " + str(abs(outDict[name]))

	
tests = int(raw_input())
while(tests > 0):
	tests -= 1
	readOutPutCase()

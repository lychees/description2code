#include <iostream>
using namespace std;

void maketable(int set[],bool subset[][1001], int n, int sum)
{
    for (int i = 0; i <= n; i++)
      subset[0][i] = true;
 
    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum; i++)
      subset[i][0] = false;
 
     // Fill the subset table in botton up manner
     for (int i = 1; i <= sum; i++)
     {
       for (int j = 1; j <= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= set[j-1])
           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
       }
     }
 
}
 
int main()
{
  
  int t=0;
  //cout<<"enter no of test cases \n";
  cin>>t;
  for(int i=0;i<t;i++)
  {
          int p=0,m=0,count=0;
          int set[1001]={0};
          int people[1001]={0};
          
          //cout<<"enter no of people and distinct no \n";
          cin>>p>>m;
          
        //cout<<"enter elements of set \n";
        for(int j=0;j<m;j++)
                cin>>set[j];
                
        //cout<<"enter elements of people array \n";
        for(int a=0;a<p;a++)
                cin>>people[a];
                
              
        bool subset[1001][1001]={0};
  
        maketable(set,subset,m,1001);
  
        int temp[10000]={0};
        for(int a=0;a<p;a++)
        {
                temp[people[a]]++;
        }
       
        for(int a=0;a<=1000;a++)
        {
          
          if (temp[a] && subset[ temp[a] ][m] == true)
            {
                                count++;
            }
        }
        
        cout<<count<<endl;
        //cout<<"count="<<count<<endl;
        
   } 
  //getchar();           
  return 0;
}
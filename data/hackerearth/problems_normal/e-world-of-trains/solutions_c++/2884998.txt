#include <iostream>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cstring>
#include <map>
#include <string>
#include <queue>
#include <set>
#include <stack>
#include <algorithm>
#define rep(i, a, b) for(int i = a; i < b; i++)
#define red(i, a, b) for(int i = a; i > b; i--)
#define RED true
#define BLACK false
#define pb push_back
#define mk make_pair
#define fi first
#define se second
using namespace std;
typedef pair<int, int> ii;
typedef long long ll;
typedef long double ld;
typedef vector<ii> vii;
typedef vector<int> vi;
const int N = 3400 + 7;
const int M = N * 5;
const int inf = 1e9 + 7;
const ll base = 1e18;
const double pi = acos(-1);
const double ep = 1e-18;



int l, n, t;
int dp[N][N];
int L[N][N];
int sum[N][N];
int k;
int C[N][N];

void init(){
    C[0][0] = 1;
    rep(i, 1, N){
        C[i][0] = C[i][i] = 1;
        rep(j, 1, i)
            C[i][j] = (C[i-1][j] + C[i-1][j-1]) % inf;
    }
}

ll lt[8000];

void solve(){
    init();
    cin >> n >> l >> t >> k;
    dp[0][0] = 1; sum[0][0] = 1;
    rep(i, 1, n + 1){
        sum[i][0] = sum[i-1][0];
        for(int j = 1; j <= n; j++){
            dp[i][j] = 0;
            /*for(int t = 1; t < l; t++)
                dp[i][j] += dp[i - t][j-1];*/
            //int lef = max(0, i - l);
            if (i - l < 0) dp[i][j] = sum[i-1][j-1];
            else
            dp[i][j] = ((ll)sum[i-1][j-1] - sum[i - l][j-1] + inf) % inf;
            sum[i][j] = (sum[i-1][j] + dp[i][j]) % inf;
        }
    }



    lt[0] = 1;
    rep(i, 1, 8000) lt[i] = (ll) lt[i-1] * (k - 1) % inf;

    rep(i, 0, N) rep(j, 0, N) sum[i][j] = 0;

    L[0][0] = 1; sum[0][0] = 1;
    rep(i, 1, n + 1){
        sum[i][0] = sum[i-1][0];
        for(int j = 1; j <= n; j++){
            L[i][j] = 0;
            if (i >= l) L[i][j] = sum[i- l][j-1];
            sum[i][j] = (sum[i-1][j] + L[i][j]) % inf;
        }
    }


    ll ans = 0;
    for(int i = 0; i <= n; i++){
        int used = t + l * i - i;
        if (used <= n){
            int r = n - used;
            for(int j = 0; j <= n; j++)
                if (L[used][i] > 0 && dp[r][j] > 0){
                ll tmp = (ll) C[i + j][i] * L[used][i] % inf * dp[r][j] % inf;
                tmp = tmp * k % inf * lt[i + j - 1] % inf;
                ans = (ans + tmp) % inf;

            }
        }
    }

    cout << ans << endl;

}

int main(){
#ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin);
#endif // ONLINE_JUDGE

    solve();

}

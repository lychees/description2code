#include<iostream>
#include<algorithm>

using namespace std;
int n,a,b,c;
long int m;
int M[1001];
pair<int, int> mp[100001];
int W[1001];
pair<int, int> wp[100001];
int C1[1001];
int C2[1001];

void init(){
    for(int i=0;i<=1000;i++)
    {
    	M[i] = i;
    	W[i] = i;
    	C1[i] = i;
    	C2[i] = i;
    }
}

int mroot(int a){
    while(a != M[a])
        a = M[M[a]];
    return a;
}

int croot1(int a){
    while(a != C1[a])
        a = C1[C1[a]];
    return a;
}

int croot2(int a){
    while(a != C2[a])
        a = C2[C2[a]];
    return a;
}

int wroot(int a){
    while(a != W[a])
        a = W[W[a]];
    return a;
}

void cmun1(int a, int b){
    int x = croot1(a);
    int y = croot1(b);
    C1[x] = C1[y];
}

void cmun2(int a, int b){
    int x = croot2(a);
    int y = croot2(b);
    C2[x] = C2[y];
}

void mun(int a, int b){
    int x = mroot(a);
    int y = mroot(b);
    M[x] = M[y];
}

void wun(int a, int b){
    int x = wroot(a);
    int y = wroot(b);
    W[x] = W[y];
}

int checkm()
{
	int a=mroot(1);
	for(int i=1;i<=n;i++)
	{
		if(a!=mroot(i))
			return -1;
	}
	return 1;
}

int checkw()
{
	int a=wroot(1);
	for(int i=1;i<=n;i++)
		if(a!=wroot(i))
			return -1;
	return 1;
}

int main()
{
	cin>>n>>m;
	long int cm=0,wm=0,count=0,r=0;
	long int i;
	init();
	for(i=0;i<m;i++)
    {
    	cin>>a>>b>>c;
    	if(c==1)
    	{
    		mun(a,b);
    		mp[cm].first=a;
    		mp[cm++].second=b;
    	}
    	if(c==2)
    	{
    		wun(a,b);
    		wp[wm].first=a;
    		wp[wm++].second=b;
    	}
    	if(c==3)
    	{
    		mun(a,b);
    		wun(a,b);
    		if(croot1(a)!=croot1(b))
    		{
    			cmun1(a,b);
    			cmun2(a,b);
    		}
    		else
    			r++;
    	}
    }
    if(checkm()==-1 || checkw()==-1)
    	cout<<-1;
    else
    {
    	cout<<endl;
    	for(i=0;i<cm;i++)
    	{
    		a=mp[i].first;
    		b=mp[i].second;
    		if(croot1(a)!=croot1(b))
    			cmun1(a,b);
    		else
    			r++;
    	}
    	for(i=0;i<wm;i++)
    	{
    		a=wp[i].first;
    		b=wp[i].second;
    		if(croot2(a)!=croot2(b))
    			cmun2(a,b);
    		else
    			r++;
    	}
    	cout<<r;
    }
   	
}

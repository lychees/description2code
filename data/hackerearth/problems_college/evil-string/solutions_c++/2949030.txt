#include <bits/stdc++.h>
#define lli long long
#define M 1000000007
using namespace std;
int val[] = {0,0,1,2,0,4,3,8,1,0};
lli A[32][32];
lli B[32][32];
lli res[32][32];
void pre()
{
    int mask2,flag2;
    for ( int mask1 = 0; mask1 < 16; mask1++ ) {
        for ( int dig = 0; dig < 10; dig++ ) {
            for ( int flag1 = 0; flag1 < 2; flag1++ ) {
                if ( flag1 == 1 && mask1 != 0 ) continue;
                else if ( flag1 == 0 ) {
                    if ( dig == 0 ) {
                        mask2 = 0;
                        flag2 = 1;
                    }
                    else {
                        mask2 = mask1^val[dig];
                        flag2 = 0;
                    }
                }
                else {
                    mask2 = 0;
                    flag2 = 1;
                }
                A[mask1*2+flag1][mask2*2+flag2] += 1;
            }
        }
    }
    return;
}
void init()
{
    for ( int i = 0; i < 32; i++ ) {
        for ( int j = 0; j < 32; j++ ) {
            B[i][j] = A[i][j];
            if ( i == j ) res[i][j] = 1;
            else res[i][j] = 0;
        }
    }
    return;
}
void mul(lli A1[][32], lli A2[][32])
{
    lli C[32][32];
    for ( int i = 0; i < 32; i++ ) {
        for ( int j = 0; j < 32; j++ ) {
            C[i][j] = 0;
            for ( int k = 0; k < 32; k++ ) C[i][j] = (C[i][j] + (A1[i][k]*A2[k][j])%M)%M;
        }
    }
    for ( int i = 0; i < 32; i++ ) {
        for ( int j = 0; j < 32; j++ ) A1[i][j] = C[i][j];
    }
    return;
}
void fast_pow(lli n)
{
    while ( n > 0 ) {
        if ( n&1 ) mul(res,B);
        mul(B,B);
        n >>= 1;
    }
    return;
}
int main()
{
    pre();
    int t;
    lli n,ans;
 //   freopen("s_inp.txt", "r", stdin);
 //   freopen("s_out.txt", "w", stdout);
    scanf("%d", &t);
    while ( t-- ) {
        scanf("%lld", &n);
        init();
        fast_pow(n);
        ans = 0;
        for ( int i = 1; i < 16; i++ ) {
            ans = (ans + res[0][i*2])%M;
        }
        printf("%lld\n", ans);
    }
    return 0;
}
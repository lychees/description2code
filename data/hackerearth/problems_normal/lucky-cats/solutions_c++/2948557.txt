#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }


template<int MOD>
struct ModInt {
	static const int Mod = MOD;
	unsigned x;
	ModInt() : x(0) {}
	ModInt(signed sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	ModInt(signed long long sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	int get() const { return (int)x; }

	ModInt &operator+=(ModInt that) { if((x += that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator-=(ModInt that) { if((x += MOD - that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator*=(ModInt that) { x = (unsigned long long)x * that.x % MOD; return *this; }

	ModInt operator+(ModInt that) const { return ModInt(*this) += that; }
	ModInt operator-(ModInt that) const { return ModInt(*this) -= that; }
	ModInt operator*(ModInt that) const { return ModInt(*this) *= that; }
};
typedef ModInt<1000000007> mint;

int K;

struct Sum {
	short perm[11];
	mint cnt[11];
	Sum() {
		rer(i, 0, K)
			perm[i] = i;
		mset(cnt, 0);
	}
	explicit Sum(int k) {
		rer(i, 0, K) {
			if(i + k <= K) {
				perm[i] = i + k;
				cnt[i].x = 0;
			} else {
				perm[i] = 0;
				cnt[i].x = 1;
			}
		}
	}
	Sum &operator*=(const Sum &that) {
		assert(this != &that);
		rer(i, 0, K) {
			int p = perm[i];
			perm[i] = that.perm[p];
			cnt[i] += that.cnt[p];
		}
		return *this;
	}
	bool valid() const { return perm[0] != -1; }
};

int len;
char N[10003];
Sum memo[10003][12][2];

Sum rec(int i, int k, bool lt) {
	Sum &r = memo[i+1][k][lt];
	if(r.valid()) return r;
	if(i == -1)
		return r = Sum(k);
	int e = N[len - 1 - i] - '0';
	r = Sum();
	rep(d, 10) if(lt || d <= e)
		r *= rec(i - 1, min(K + 1, k + (d == 4 || d == 7)), lt || d < e);
	return r;
}

int main() {
	while(~scanf("%d", &K)) {
		scanf("%s", N);
		len = strlen(N);
		mset(memo, -1);
		Sum r = rec(len - 1, 0, false);
		mint ans = r.cnt[0];
		printf("%d\n", ans.get());
	}
	return 0;
}

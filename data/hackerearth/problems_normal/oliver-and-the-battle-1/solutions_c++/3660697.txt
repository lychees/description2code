#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}
class graph
{
	vi *adj;
	public:
		graph(int v)
		{
			adj=new vi[v];
		}
		void add_edge(int u,int v)
		{
			adj[u].pb(v);
			adj[v].pb(u);
		}
		int bfs(int v,vector<bool>& visited)
		{
			visited[v]=true;
			vi::iterator it;
			queue<int> q;
			int ans=1;
			q.push(v);
			while(!q.empty())
			{
				v=q.front();
				q.pop();
				for(it=adj[v].begin();it!=adj[v].end();it++)
				{
					if(!visited[*it])
					{
						ans++;
						visited[*it]=true;
						q.push(*it);
					}
				}
			}
			return ans;
		}
};
int main()
    {
		int i,t,n,m,j,c=1,ans;
		vii v(1000,vi(1000));
		vii val(1000,vi(1000));
		sc("%d",&t);
		while(t--)
		{
			sc("%d%d",&n,&m);
			graph g(1000001);
			vector<bool> isp(1000001);
			int mini=1e7,maxi=-1;
			for(i=0;i<n;i++)
			{
				for(j=0;j<m;j++)
				{
					sc("%d",&(v[i][j]));
				}
			}
			
			c=1;
		for(i=0;i<n;i++)
		{
			for(j=0;j<m;j++)
			{
				val[i][j]=c;
				c++;
			}
		}
			for(i=0;i<n;i++)
			{
				for(j=0;j<m;j++)
				{
					if(v[i][j])
					{
						isp[val[i][j]]=true;
						mini=min(mini,val[i][j]);
						maxi=max(maxi,val[i][j]);
						if((i+1<n))
						{
							if(v[i+1][j])
								g.add_edge(val[i][j],val[i+1][j]);
						}
						if((j+1<m))
						{
							if(v[i][j+1])
							{
								g.add_edge(val[i][j],val[i][j+1]);
							}
						}
						if((i+1<n)&&(j+1<m))
						{
							if(v[i+1][j+1])
							{
								g.add_edge(val[i][j],val[i+1][j+1]);
							}
						}
						if((i-1>=0)&&(j+1<m))
						{
							if(v[i-1][j+1])
							{
								g.add_edge(val[i][j],val[i-1][j+1]);
							}
						}
					}
				}
			}
			vector<bool> visited(1000001);
			int cp=0;
			ans=0;
			//cout<<"mini,maxi,"<<mini<<" "<<maxi<<"\n";
			for(i=mini;i<=maxi;i++)
			{
				if(isp[i])
				{
					if(!visited[i])
					{
						//cout<<"not visited="<<i<<"\n";
						cp++;
						ans=max(ans,g.bfs(i,visited));
					}
				}
			}
			pf("%d %d\n",cp,ans);
		}
    return 0;
}

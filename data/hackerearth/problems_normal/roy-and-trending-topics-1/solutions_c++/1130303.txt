#include <iostream>
#include<algorithm>
#include<vector>
using namespace std;

struct topic
{
	long long ID;
	long long oldz;
	long long newz;
	long long change;
};
bool compare_as_ints (topic i,topic j)
{
  return (i.ID>j.ID);
}
bool compare_as (topic i,topic j)
{
  return (i.change>j.change);
}
int main()
{
    long long number;
    cin>>number;
    topic *t=new topic[number];
    for(long long i=0;i<number;i++)
    {
    	cin>>t[i].ID;
    	cin>>t[i].oldz;
    	long long p,l,c,s;
    	cin>>p>>l>>c>>s;
    	t[i].newz=50*p+l*5+c*10+s*20;
    	t[i].change=t[i].newz-t[i].oldz;
    	
    }
    vector<topic> myvector;
    myvector.assign(t,t+number);
    stable_sort (myvector.begin(), myvector.end(), compare_as_ints);
    
    stable_sort (myvector.begin(), myvector.end(), compare_as);
    for(int i=0;i<5;i++)
    {
    	cout<<myvector[i].ID<<" "<<myvector[i].newz<<endl;
    }
    return 0;
}

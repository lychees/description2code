#include<iostream>
#include<vector>
using namespace std;

void printVector(vector<int> vec1);

class graph{
	int V;
	vector<int> *adj;
	vector<int> visited;
	
	public:
		graph(int _V);
		void addEdgeUndirected(int v, int w);
		void showGraph();
		void sol();
		
		void DFSUtility(int v,int &count);
};

void graph::DFSUtility(int v, int &count){
	visited[v]=1;
	count++;
	
	auto vec1=adj[v];
	for(int i=0;i<vec1.size();i++){
		int w=vec1[i];
		if(visited[w]==0)
			DFSUtility(w,count);
	}
}
void graph::sol(){
	visited=*(new vector<int>(V,0));
	vector<int> vec1;
	
	for(int i=0;i<V;i++){
		int count=0;
		
		if(visited[i]==0){
			DFSUtility(i,count);
		
			if(count !=0 )
				vec1.push_back(count);
		}	
	}
//	cout<<"printing the vec1 which holds the NEleemnet in each connected componenet\n";
//	printVector(vec1);
	
	//Calculating the ans
	long long int ans=1;
	for(int i=0;i<vec1.size();i++){
		int elem1=vec1[i];
		
		int elem2;
		if(elem1==1 || elem1==2) elem2=1;
		else elem2=((elem1-1)*elem1 )/2;
		
		ans=ans*elem2;
		ans=ans % 1000000007 ;	
	}
	
	if(vec1.size()==0) ans=0;
//	cout<<"Your answer is\t"<<ans<<endl;
	cout<<ans<<endl;
}
int main(){
//	FILE *read;
//	read=freopen("input1.txt","r+",stdin);
		int NTest;
		cin>>NTest;
		
		for(int i=0;i<NTest;i++){
			
		int V,NEdge;
		cin>>V>>NEdge;
		graph g(V);
		
		for(int i=0;i<NEdge;i++){
			int v,w;
			cin>>v>>w;
			g.addEdgeUndirected(v-1,w-1);
		}
		
	//	cout<<"The graph just created is\n";
	//	g.showGraph();
		
	//	cout<<"Calling removeEdge()\n";
		g.sol();
	
	}//NTest ends here
	
}

graph::graph(int _V){
	V=_V;
	adj=new vector<int>[V];
}
void graph::addEdgeUndirected(int v, int w){
	adj[v].push_back(w);
	adj[w].push_back(v);
}

void graph::showGraph(){
	for(int v=0;v<V;v++){
		cout<<v<<"\t";
		auto  vec1=adj[v];
		for(int j=0;j<vec1.size();j++){
			int w;
			w=vec1[j];
			cout<<w<<" ";
		}
		cout<<endl;
	}
}

void printVector(vector<int> vec1){
	for(int i=0;i<vec1.size();i++){
		cout<<vec1[i]<<" ";
	}
	cout<<endl;
}
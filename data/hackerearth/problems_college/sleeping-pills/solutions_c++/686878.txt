#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <stack>
#include <queue>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <utility>

using namespace std;

#define PB push_back
#define MP make_pair
#define S second
#define F first
#define MOD 1000000007
#define INF 1000000007
#define MAXN 1000000
#define LL long long
#define sd(x) scanf("%d", &x)
#define sld(x) scanf("%lld", &x)


LL modPow(LL a, LL x, LL p) {
    //calculates a^x mod p in logarithmic time.
    LL res = 1;
    while(x > 0) {
        if( x % 2 != 0) {
            res = (res * a);
            if(res >= p) res %= p;
        }
        a = (a * a);
        if(a >= p) a %= p;
        x /= 2;
    }
    return res;
}

LL modInverse(LL a, LL p) {
    //calculates the modular multiplicative of a mod m.
    //(assuming p is prime).
    return modPow(a, p-2, p);
}
LL modBinomial(LL n, LL k, LL p) {
// calculates C(n,k) mod p (assuming p is prime).

    LL numerator = 1; // n * (n-1) * ... * (n-k+1)
    for (LL i=0; i<k; i++) {
        numerator = (numerator * (n-i) );
        if(numerator >= p) numerator %= p;
    }

    LL denominator = 1; // k!
    for (LL i=1; i<=k; i++) {
        denominator = (denominator * i);
        if(denominator >= p) denominator %= p;
    }

    // numerator / denominator mod p.
    LL ans = ( numerator* modInverse(denominator,p) );
    if(ans >= p) ans %= p;
    return  ans;
}

inline void Solve(){
    LL n, m, x, i;
    sld(n); sld(m);
    for(i = 1; i <= n; i++){
        sld(x);
        m -= x;
    }
    if(m < 0){
        cout<<0<<endl;
        return;
    }
    if(m == 0){
        cout<<1<<endl;
        return;
    }
    LL r = n - 1;
    n = m + n - 1;

    r = min(r, n - r);
    //cout<<modBinomial(n, r, MOD)<<endl;
    printf("%lld\n", modBinomial(n, r, MOD));
    return;
}

int main(){

    LL t = 1;
    cin>>t;
    while(t--){
        Solve();
    }
    return 0;
}


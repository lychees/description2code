#include <bits/stdc++.h>

// Number of vertices in the graph
#define V 550

int dist2[10000];

using namespace std;
// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[])
{
   // Initialize min value
   int mini = INT_MAX, min_index;

   for (int v = 0; v < V; v++)
     if (sptSet[v] == false && dist[v] <= mini)
         mini = dist[v], min_index = v;

   return min_index;
}

// A utility function to print the constructed distance array
/*int printSolution(int dist[], int n)
{
   printf("Vertex   Distance from Source\n");
   for (int i = 0; i < V; i++)
      printf("%d \t\t %d\n", i, dist[i]);
}
*/

// Funtion that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void dijkstra(int graph[V][V], int src)
{
     int dist[V];     // The output array.  dist[i] will hold the shortest
                      // distance from src to i

     bool sptSet[V]; // sptSet[i] will true if vertex i is included in shortest
                     // path tree or shortest distance from src to i is finalized

     // Initialize all distances as INFINITE and stpSet[] as false
     for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;

     // Distance of source vertex from itself is always 0
     dist[src] = 0;

     // Find shortest path for all vertices
     for (int count1 = 0; count1 < V-1; count1++)
     {
       // Pick the minimum distance vertex from the set of vertices not
       // yet processed. u is always equal to src in first iteration.
       int u = minDistance(dist, sptSet);

       // Mark the picked vertex as processed
       sptSet[u] = true;

       // Update dist value of the adjacent vertices of the picked vertex.
       for (int v = 0; v < V; v++)

         // Update dist[v] only if is not in sptSet, there is an edge from
         // u to v, and total weight of path from src to  v through u is
         // smaller than current value of dist[v]
         if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
                                       && dist[u]+graph[u][v] < dist[v])
            dist[v] = dist[u] + graph[u][v];
     }

     for(int i = 0; i < V; i++)
            dist2[i] = dist[i];

     // print the constructed distance array
//     printSolution(dist, V);
}

// driver program to test above function
int main()
{
   //freopen("input1.txt","r",stdin);
    //freopen("output1.txt","w",stdout);
   /* Let us create the example graph discussed above */
    int graph[550][550];

   int n;
   cin>>n;
   for(int i = 1; i <= n; i++)
   {
       int a,b,w;
       cin>>a>>b>>w;
       graph[a][b] = w;
       graph[b][a] = w;
   }
   /*int graph[V][V] = {{0, 4, 0, 0, 0, 0, 0, 8, 0},
                      {4, 0, 8, 0, 0, 0, 0, 11, 0},
                      {0, 8, 0, 7, 0, 4, 0, 0, 2},
                      {0, 0, 7, 0, 9, 14, 0, 0, 0},
                      {0, 0, 0, 9, 0, 10, 0, 0, 0},
                      {0, 0, 4, 0, 10, 0, 2, 0, 0},
                      {0, 0, 0, 14, 0, 2, 0, 1, 6},
                      {8, 11, 0, 0, 0, 0, 1, 0, 7},
                      {0, 0, 2, 0, 0, 0, 6, 7, 0}
                     };
                     */
    int src;
    cin>>src;



    dijkstra(graph, src);

    int q;
    cin>>q;
    for(int i = 0; i < q; i++)
    {
        int temp;
        cin>>temp;
        if(dist2[temp] != INT_MAX)
            cout<<dist2[temp]<<endl;
        else
            cout<<"NO PATH"<<endl;
    }

    return 0;
}

#include "iostream"
#include "cstdio"
#include "algorithm"
using namespace std;

typedef long long int lld;


#define iterate(n) for(i=0;i<n;i++)
#define Diterate(i,s,e) for(lld (i) = s ; (i)<=e ; i++)
#define getw getchar_unlocked
#define get(a) geta(&a)
#define print(a) printf("%lld\n",(lld)(a))
#define db(str,a) cout << str << " = " << a << endl
#define dbs(str,a,n) iterate(n) { cout << str << "[" << i << "] = " << a[i] << endl; }
#define pb push_back
#define forall(V) for_each(V.begin(),V.end(),func); //Define func for this macro


template < typename T >
inline void geta(T *a){
	T n=0,s=1;
	char p=getw();
	if(p=='-') s=-1;
	while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=getw();
	if(p=='-') s=-1,p=getw();
	while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=getw(); }
	*a = n*s;
}

int main(){
	lld i,j,t,n,m;
	lld p,q,k,z,l;
	ios_base::sync_with_stdio(false);

	int dp[1000010] = {0};

	int c = 0;
	for(m=2;m<=1000;m++){	
		for(n=1;n<m;n++){
			if( (__gcd(m,n)==1) && (abs(m-n)&1) ){
				// cout << m << " " << n << endl;
				c = m*m + n*n;
				k = 1;
				while(c*k <= 1000000){
					dp[c*k]++;
					k++;
				}
				
				// cout << "count = " <<++c << endl;
				// cout << m*m + n*n << endl;
				// cout << 2*m*n << endl;
				// cout << m*m - n*n << endl;
			}
		}
	}
		
	for(i=1;i<=1000000;i++) {
		// printf("dp[%d] = %d \n",i,dp[i]);
		dp[i] += dp[i-1];
		// cout << dp[i] << endl;
	}

	get(t);
	while(t--){
		get(k);
		print(dp[k]);
	}

	return 0;
}


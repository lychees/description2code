/*
  problem code: PACKERS N' MOVERS
  problem link: http://www.hackerearth.com/problem/algorithm/packers-n-movers/description/
*/

#include<cstdio>
#include<cstdlib>
#include<cctype>
#include<vector>
#include<string>
#include<stack>
#include<queue>
#include<iterator>
#include<set>
#include<map>
#include<iostream>
#include<sstream>
#include<deque>
#include<cmath>
#include<memory.h>
#include<algorithm>
#include<utility>
#include<climits>
#include<list>
#include<bitset>
#include<fstream>

using namespace std;

#define OfTheKing 0
#define rep(i,n) for(long long i=0; i<n; ++i)
#define gRep(i,p,n) for(long long i=p; i<n; ++i)
#define mp make_pair
#define all(c) c.begin(),c.end()
#define sc(a) scanf("%lld", &a)
#define pf(a) printf("%lld\n",a)
//#define g_u getchar_unlocked() //if windows use getchar()
#define g_u getchar()

typedef pair<long long,long long> pii;
typedef long long ll;
typedef unsigned long long llu;


//fast input function
inline void getInt( int &n )
{
  n=0;
  int ch=g_u;
  int sign=1;
  while( ch < '0' || ch > '9' )
  {
    if(ch=='-')
    {
      sign=-1;
    }
    ch=g_u;
  }
  while( ch >= '0' && ch <= '9' )
  {
    n=(n<<3)+(n<<1)+ ch-'0';
    ch=g_u;
  }
  n*=sign;
}


int max( int a, int b )
{
  return a>b?a:b;
}


int compute(int, int, int);
int a[101];


int main()
{
  int m, p;
  int total = 0;

  getInt(m);
  getInt(p);

  rep(i,p)
  {
    getInt(a[i]);
    total += a[i];
  }

  int lo = 1, hi = total, mid;

  while(lo<=hi)
  {
    mid = (lo+hi)/2;

    //binary search
    if(compute(mid, p, m))
    {
      hi = mid-1;
    }
    else
    {
      lo = mid+1;
    }
  }

  printf("%d\n", lo);

  return OfTheKing;
}

int compute(int wt, int p, int m)
{
  int sum = 0;

  rep(i, p)
  {
    if(a[i]>wt)
    {
      return 0;
    }
    else if(sum+a[i] > wt)
    {
      m--;
      if(m<=0)
      {
        return 0;
      }
      sum = a[i];
    }
    else
    {
      sum += a[i];
    }
  }

  return 1;
}






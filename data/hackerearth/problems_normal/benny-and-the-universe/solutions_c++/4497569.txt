//#define MYDEBUG
#define _CRT_SECURE_NO_WARNINGS
#define TASK "c1"
#pragma comment(linker, "/STACK:67108864")
#include <cstdio>
#include <iostream>
#include <iomanip> 
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <functional>
#include <cassert>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>

const int MOD = 1000000007;
const int INF = 1000000001;
const int MAXN = 400;
const long double EPS = 1e-9;
const int HASH_POW = 29;
const long double PI = acos(-1.0);

using namespace std;

double workTime()
{
	return double(clock()) / CLOCKS_PER_SEC;
}

void my_return(int code)
{
#ifdef MYDEBUG
	cout << "\nTime = " << fixed << setprecision(3) << workTime() << endl;
#endif
	exit(code);
}

int n, q, p[100010];
int dp[2][10010];

int main()
{
	cin.sync_with_stdio(0);
	cin.tie(0);
	mt19937 mt_rand(time(0));
#ifdef MYDEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	/*freopen(TASK".in", "rt", stdin);
	freopen(TASK".out", "wt", stdout);*/
	/*freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);*/
#endif

	scanf("%d %d", &n, &q);
	for (int i = 1; i <= n; ++i)
		scanf("%d", &p[i]);
	sort(p + 1, p + n + 1);
	set <int> used;
	for (int i = 2; i <= n; ++i)
	{
		int s = p[i];
		while (s <= 1000000000)
		{
			used.insert(s);
			s <<= 1;
		}
	}

	n = 1;
	while (!used.empty())
	{
		p[++n] = *used.begin();
		used.erase(used.begin());
	}

	int old = 0, cur = 1;
	dp[cur][0] = 0;
	for (int i = 1; i < p[1]; ++i)
		dp[cur][i] = INF;
	for (int i = 2; i <= n; ++i)
	{
		swap(old, cur);
		int rem = (p[1] - p[i] % p[1]) % p[1];
		for (int j = 0; j < p[1]; ++j)
			dp[cur][j] = min(dp[old][j], dp[old][(j + rem) % p[1]] + p[i]);
	}

	while (q--)
	{
		int x;
		scanf("%d", &x);
		if (dp[cur][x % p[1]] <= x)
			printf("YES\n");
		else
			printf("NO\n");
	}

	my_return(0);
}
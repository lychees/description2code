#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<vector>
#include<bitset>
#include<map>
#include<queue>
#include<stack>
#include<set>
#include<cmath>
#include<algorithm>
#include<utility>
#include<climits>
#include<sstream>

using namespace std;

#define nl printf("\n")
#define space printf(" ")

#define mem(x,val) memset(x,val,sizeof(x))
#define rite(x) freopen(x,"w",stdout)
#define read(x) freopen(x,"r",stdin)

typedef long long ll;
typedef unsigned long long ull;

struct worker {
    int t;
    int x;
    int y;
    };
bool comp(worker lhs, worker rhs) {
    if (lhs.t < rhs.t) return true;
    else if (lhs.t == rhs.t) {
        if (lhs.y > rhs.y) return true;
        else if (lhs.y == rhs.y) {
            return lhs.x < rhs.x;
            }
        else return false;
        }
    else return false;
    }

int main() {
//    read("in.txt");
//rite("out.txt");
    int n;
    ll d;
    cin >> n >> d;
    int i,j,t;
    worker lst[n];
    for(i = 0 ; i < n ; ++i) {
        cin >> lst[i].t >> lst[i].x >> lst[i].y;
        }
//    for(i = 0 ; i < n ; ++i) {
//        cout << lst[i].t << " " << lst[i].x << " " << lst[i].y << endl;
//        }
    sort(lst,lst+n,comp);

    int hiredy,hiredc, index = 0, tempy, tempc;
    ll cost = 0;
    t = lst[0].t;
    while(d > 0) {
//        cout << t << " " << d  << "  ";

        tempy = 0, tempc = 0;

        while(index < n && lst[index].t == t) {
            if (tempy == 0 && tempc == 0) {
                tempy = lst[index].y;
                tempc = lst[index].x;
                }
            else if (tempy == lst[index].y && lst[index].x < tempc) {
                tempy = lst[index].y;
                tempc = lst[index].x;
                }
            index += 1;
            }


        if (t == lst[0].t || tempy > hiredy) {
            hiredy = tempy;
            hiredc = tempc;
            cost += hiredc;
//            cout << hiredy << " " << hiredc << endl;
            }
//        cout << hiredy << " " << hiredc << endl;

        if (index < n) {
            d -= (ll)hiredy*(lst[index].t - t);
            t = lst[index].t;
            }
        else {//no more workers left to hire must utilise fastest existing hire--> no additional costs
            d = 0;
            }
        }
    cout << cost << endl;
    return 0;
    }

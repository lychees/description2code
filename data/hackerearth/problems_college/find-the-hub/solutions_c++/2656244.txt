#include <iostream>
#include <algorithm>
using namespace std;

long long power(int a, int n, int mod)
{
 long long power=a,result=1;

 while(n)
 {
  if(n&1) 
   result=(result*power)%mod;
  power=(power*power)%mod;
  n>>=1;
 }
 return result;
}

bool witness(int a, int n)
{
 int t,u,i;
 long long prev,curr;

 u=n/2;
 t=1;
 while(!(u&1))
 {
  u/=2;
  ++t;
 }

 prev=power(a,u,n);
 for(i=1;i<=t;++i)
 {
  curr=(prev*prev)%n;
  if((curr==1)&&(prev!=1)&&(prev!=n-1)) 
   return true;
  prev=curr;
 }
 if(curr!=1) 
  return true;
 return false;
}

inline bool IsPrime( int number )
{
 if ( ( (!(number & 1)) && number != 2 ) || (number < 2) || (number % 3 == 0 && number != 3) )
  return (false);

 if(number<1373653)
 {
  for( int k = 1; 36*k*k-12*k < number;++k)
  if ( (number % (6*k+1) == 0) || (number % (6*k-1) == 0) )
   return (false);

  return true;
 }

 if(number < 9080191)
 {
  if(witness(31,number)) return false;
  if(witness(73,number)) return false;
  return true;
 }


 if(witness(2,number)) return false;
 if(witness(7,number)) return false;
 if(witness(61,number)) return false;
 return true;
}


int main()
{
    //cout << "Hello World!" << endl;
    int n;
    int x[1000000],flag=0,count=0,prev;
    cin>>n;
    for(int i=0;i<=n;i++)
    cin>>x[i];
    sort(x,x+n);
    for(int i=n-1;i>=0;i--)
    {
    	if(!flag && IsPrime(x[i]))	
    	{
    		flag = 1;
    		prev = x[i];
    		//cout<<"at "<<x[i]<<endl;
    	}
    	if(flag && x[i] == prev)	count++;
    	if(flag && x[i] != prev)	break;
    }
    cout<<prev<<endl;
    cout<<count<<endl;
    return 0;
}

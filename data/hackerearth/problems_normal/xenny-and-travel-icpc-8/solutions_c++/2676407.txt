#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007LL
#define ll long long
#define pb push_back
#define ll long long
#define ii pair<ll,int>
#define mp make_pair
vector< pair<int,ll> >adj[1255],adj1[1255],adj2[1255],adj3[1255];
ll dist[1255],dist1[1255];
void dijkstra (int s)
{
    dist[s] = 0;
    priority_queue < ii, vector<ii>, greater<ii> > pq;
    pq.push(ii(0LL, s));
    while(!pq.empty())
    {
        ii front = pq.top();
        pq.pop();
        ll d = front.first;
        int u = front.second;
        //printf("%lld %d\n",d,u);
        if (dist[u] == d)
        {
            for (int i = 0; i < adj[u].size(); i++)
            {
                ii v = adj[u][i];
                if (dist[u] + v.second < dist[v.first])
                {
                    dist[v.first] = dist[u] + v.second;
                    pq.push(ii(dist[v.first], v.first));
                }

            }
        }
    }
}
void dijkstra1(int s)
{
    dist1[s] = 0;
    priority_queue < ii, vector<ii>, greater<ii> > pq;
    pq.push(ii(0LL, s));
    while(!pq.empty())
    {
        ii front = pq.top();
        pq.pop();
        ll d = front.first;
        int u = front.second;
        if (dist1[u] == d)
        {
            for (int i = 0; i < adj1[u].size(); i++)
            {
                ii v = adj1[u][i];
                if (dist1[u] + v.second < dist1[v.first])
                {
                    dist1[v.first] = dist1[u] + v.second;
                    pq.push(ii(dist1[v.first], v.first));
                }

            }
        }
    }
}
void dijkstra2 (int s)
{
    dist[s] = 0;
    priority_queue < ii, vector<ii>, greater<ii> > pq;
    pq.push(ii(0LL, s));
    while(!pq.empty())
    {
        ii front = pq.top();
        pq.pop();
        ll d = front.first;
        int u = front.second;
        //printf("%lld %d\n",d,u);
        if (dist[u] == d)
        {
            for (int i = 0; i < adj2[u].size(); i++)
            {
                ii v = adj2[u][i];
                if (dist[u] + v.second < dist[v.first])
                {
                    dist[v.first] = dist[u] + v.second;
                    pq.push(ii(dist[v.first], v.first));
                }

            }
        }
    }
}
void dijkstra3 (int s)
{
    dist1[s] = 0;
    priority_queue < ii, vector<ii>, greater<ii> > pq;
    pq.push(ii(0LL, s));
    while(!pq.empty())
    {
        ii front = pq.top();
        pq.pop();
        ll d = front.first;
        int u = front.second;
        //printf("%lld %d\n",d,u);
        if (dist1[u] == d)
        {
            for (int i = 0; i < adj3[u].size(); i++)
            {
                ii v = adj3[u][i];
                if (dist1[u] + v.second < dist1[v.first])
                {
                    dist1[v.first] = dist1[u] + v.second;
                    pq.push(ii(dist1[v.first], v.first));
                }

            }
        }
    }
}
int main()
{
    int i,j,n;
    scanf("%d",&n);
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            ll u;
            scanf("%lld",&u);
            adj[i].pb(mp(j,u));
            adj3[j].pb(mp(i,u));
        }
    }
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            ll u;
            scanf("%lld",&u);
            adj1[j].pb(mp(i,u));
            adj2[i].pb(mp(j,u));
        }
    }
    int u,v;
    scanf("%d %d",&u,&v);
    ll ans=LONG_LONG_MAX;

    for(i=0;i<=n;i++)
        dist[i]=dist1[i]=1000000000000000000LL;
    dijkstra(u);
    dijkstra1(v);

//    for(i=1;i<=n;i++)
//        printf("%lld ",dist[i]);
//    printf("\n");
//    for(i=1;i<=n;i++)
//        printf("%lld ",dist1[i]);
//    printf("\n");

    for(i=1;i<=n;i++)
        if(i!=u&&i!=v)
        ans=min(ans,dist[i]+dist1[i]);

    for(i=0;i<=n;i++)
        dist[i]=dist1[i]=1000000000000000000LL;
    dijkstra2(u);
    dijkstra3(v);

//    for(i=1;i<=n;i++)
//        printf("%lld ",dist[i]);
//    printf("\n");
//    for(i=1;i<=n;i++)
//        printf("%lld ",dist1[i]);
//    printf("\n");

    for(i=1;i<=n;i++)
        if(i!=u&&i!=v)
            ans=min(ans,dist[i]+dist1[i]);


    printf("%lld\n",ans);
    return 0;
}


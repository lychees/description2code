#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define rep(i,a) for(ll i=0;i<a;++i)
#define repp(i,a,b) for(ll i=a;i<b;++i)
#define all(c) (c).begin(), (c).end()
#define FILL(a,x) memset(a,x,sizeof(a))
#define    foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
ll M=1e9+9;


ll mpe(ll base, ll exponent, ll modulus)
{  
    ll result = 1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = result*base%modulus ;
        exponent = exponent >> 1;
        base =  base*base%modulus ;
    }
    return result;
}

ll arr[100005],tree[4*100005]={0};

void build_tree(ll node, ll a, ll b) {
    if(a > b) return;
  	if(a == b) {tree[node] = arr[a]; return;}
	build_tree(node*2, a, (a+b)/2);
	build_tree(node*2+1, 1+(a+b)/2, b);
	tree[node] = (tree[node*2] + tree[node*2+1])%M;
}

void update_tree(ll node, ll a, ll b, ll i, ll j, ll value) {
    if(a > b || a > j || b < i) return;
  	if(a == b) { tree[node] = value;return;}
    update_tree(node*2, a, (a+b)/2, i, j, value);
	update_tree(1+node*2, 1+(a+b)/2, b, i, j, value);
    tree[node] = (tree[node*2]+tree[node*2+1])%M;
}

ll query_tree(ll node, ll a, ll b, ll i, ll j) {
	if(a > b || a > j || b < i) return 0;
    if(a >= i && b <= j) return tree[node];
    ll q1 = query_tree(node*2, a, (a+b)/2, i, j);
	ll q2 = query_tree(1+node*2, 1+(a+b)/2, b, i, j);
    ll res = (q1+q2);
	return res%M;
}


ll arr1[100005],tree1[4*100005]={0};

void build_tree1(ll node, ll a, ll b) {
    if(a > b) return;
  	if(a == b) {tree1[node] = arr1[a]; return;}
	build_tree1(node*2, a, (a+b)/2);
	build_tree1(node*2+1, 1+(a+b)/2, b);
	tree1[node] = (tree1[node*2] + tree1[node*2+1])%M;
}

void update_tree1(ll node, ll a, ll b, ll i, ll j, ll value) {
    if(a > b || a > j || b < i) return;
  	if(a == b) { tree1[node] = value;return;}
    update_tree1(node*2, a, (a+b)/2, i, j, value);
	update_tree1(1+node*2, 1+(a+b)/2, b, i, j, value);
    tree1[node] = (tree1[node*2]+tree1[node*2+1])%M;
}

ll query_tree1(ll node, ll a, ll b, ll i, ll j) {
	if(a > b || a > j || b < i) return 0;
    if(a >= i && b <= j) return tree1[node];
    ll q1 = query_tree1(node*2, a, (a+b)/2, i, j);
	ll q2 = query_tree1(1+node*2, 1+(a+b)/2, b, i, j);
    ll res = (q1+q2);
	return res%M;
}

ll po[100005];

int main()
{
    fastScan;
    po[0]=1;
    repp(i,1,100005){
        po[i]=(po[i-1]*1151)%M;
    }
    ll n,m;
    cin>>n>>m;
    string str;
    cin>>str;
    ll cur=1;
    rep(i,n){
        arr[i]=(cur*(str[i]-'a'))%M;
        cur*=1151;
        cur%=M;
    }
    cur=1;
    for(int i=n-1;i>=0;i--){
        arr1[i]=(cur*(str[i]-'a'))%M;
        cur*=1151;
        cur%=M;
    }
    
    build_tree(1, 0, n-1);
    build_tree1(1, 0, n-1);
    rep(i,m){
        int x;
        cin>>x;
        if(x==1){
            ll l,r;
            cin>>l>>r;
            ll v1,v2,tmp;
            v1=query_tree(1, 0, n-1, l-1, r-1);
            v2=query_tree1(1, 0, n-1, l-1, r-1);
            tmp=mpe(po[l-1],M-2,M);
            v1*=tmp;
            v1%=M;
            tmp=mpe(po[n-r],M-2,M);
            v2*=tmp;
            v2%=M;
            //cout<<query_tree1(1, 0, n-1, l-1, r-1)<<endl;
            if(v1==v2)cout<<"Yes"<<endl;
            else cout<<"No"<<endl;
        }
        else{
            int in;
            char x;
            cin>>in>>x;
            ll val1,val2;
            val1=po[in-1]*(x-'a')%M;
            val2=po[n-in]*(x-'a')%M;
            update_tree(1, 0, n-1, in-1, in-1, val1);
            update_tree1(1, 0, n-1, in-1, in-1, val2);
        }
    }
    
    return 0;
}
/***************************************
		
		ANAY BHANDE
		
****************************************/

#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define ld long double
#define llu unsigned long long int
#define inf INT_MAX
#define linf LLONG_MAX
#define MOD 1000000007
#define EPS 1e-14

#define fl(i,c,n) for(i=c;i<n;i++)
#define f(i,n) for(i=0;i<n;i++)
#define rev(i,n,c) for(i=n;i>c;i--)
#define feach(it, a)  for(typeof((a).begin()) it=(a).begin(); it != (a).end(); ++it)
#define rfeach(it, a) for(typeof((a).rbegin()) it=(a).rbegin(); it != (a).rend(); ++it)
#define fea(it, a)  for(auto it=(a).begin(); it != (a).end(); ++it)
#define rfea(it, a) for(auto it=(a).rbegin(); it != (a).rend(); ++it)

#define mem(a) memset(a,0,sizeof(a))
#define memn(a) memset(a,-1,sizeof(a))

#define ip freopen("in.txt","r",stdin)
#define op freopen("out.txt","w",stdout)

#define mp make_pair
#define pb push_back
#define ft first
#define sd second
#define pp pop_back()

#define aov(a) a.begin(),a.end()
#define PI 2.0*acos(0.0)
//#define PI acos(-1.0)

#define mxv(a) *max_element(aov(a))
#define mnv(a) *min_element(aov(a))
#define LB(a,x) (lower_bound(aov(a),x)-a.begin())
#define UB(a,x) (upper_bound(aov(a),x)-a.begin())

#define pii pair<int,int>
#define pli pair<long long int,long long int>
#define vi vector<int>
#define vl vector<long long int>
#define vp vector<pair<int,int> >
#define vpli vector<pair<long long int,long long int> >

#define ispresent(container, element) (container.find(element) != container.end())
#define vecpresent(container, element) (find(aov(container),element) != container.end()) 

template <class T> inline T bigmod(T p,T e,T M){ll ret = 1;for(; e > 0; e >>= 1){if(e & 1) ret = (ret * p) % M;p = (p * p) % M;}return (T)ret;}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}   // M is prime}
template <class T> inline T bpow(T p,T e){ll ret = 1;for(; e > 0; e >>= 1){if(e & 1) ret = (ret * p);p = (p * p);}return (T)ret;}

int toInt(string s){int sm;stringstream ss(s);ss>>sm;return sm;}
long long int toLlint(string s){long long int sm;stringstream ss(s);ss>>sm;return sm;}

/*****************************************************************/
///////////////////////   CHALO    ///////////////////////////
/*****************************************************************/

    ll freq[1000001],subsets[1000001];
void countSubsets(ll arr[], ll n, ll gcd[], ll m)
{
    // Map to store frequency of array elements
 
    // Initialize maximum element. Assumption: all array
    // elements are positive.
    ll arrMax = 0; 
 
    // Find maximum element in array and fill frequency
    // map.
    for (ll i=0; i<=arrMax; i++)    
 	{
 		freq[i]=subsets[i]=0;
 	}
    for (ll i=0; i<n; i++)
    {
        arrMax = max(arrMax, arr[i]);
        freq[arr[i]]++;
    }
    // Run a loop from max element to 1 to find subsets
    // with all gcds
    for (ll i=arrMax; i>=1; i--)
    {
        ll sub = 0;
        ll add = freq[i];
 
        // Run a loop for all multiples of i
        for (ll j = 2; j*i <= arrMax; j++)
        {
            // Sum the frequencies of every element which
            // is a multiple of i
            add = (add+freq[j*i])%MOD;
 
            // Excluding those subsets which have gcd > i but
            // not i i.e. which have gcd as multiple of i in
            // the subset for ex: {2,3,4} cnsidering i = 2 and
            // subset we need to exclude are those havng gcd as 4
            sub = (subsets[j*i]+sub)%MOD;
        }
         
        // Number of subsets with GCD equal to 'i' is pow(2, add)
        // - 1 - sub    
        subsets[i] = (bigmod((ll)2,add,(ll)MOD) - 1 - sub+MOD)%MOD;
    }
 
    for (ll i=0; i<m; i++)
      cout <<(subsets[gcd[i]]%MOD) << " ";
}

ll a[1000001],b[1000001];


int main()
{
ios_base::sync_with_stdio(false);
cin.tie(0);
cout.tie(0);
ll n,i,x,m,mm;
cin>>n;
m=n;
f(i,n)
cin>>a[i],b[i]=a[i]%MOD;
countSubsets(a,n,b,m);
return 0;
}
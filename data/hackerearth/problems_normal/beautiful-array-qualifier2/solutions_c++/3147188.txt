#include <bits/stdc++.h>
using namespace std;

#define REPU(i, a, b) for (int i = (a); i < (b); ++i)
#define REPD(i, a, b) for (int i = (a); i > (b); --i)
#define MEM(a, x) memset(a, x, sizeof(a))
#define ALL(a) a.begin(), a.end()
#define UNIQUE(a) a.erase(unique(ALL(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) { return (a < b) ? a : b; }
template<class T> inline T tmax(T a, T b) { return (a > b) ? a : b; }
template<class T> inline void amax(T &a, T b) { if (b > a) a = b; }
template<class T> inline void amin(T &a, T b) { if (b < a) a = b; }
template<class T> inline T tabs(T a) { return (a > 0) ? a : -a; }
template<class T> T gcd(T a, T b) { while (b != 0) { T c = a; a = b; b = c % b; } return a; }

typedef pair<int, int> P;
const int N = 20005, MAX = 1000001;
int n, k, m, b[N], ans[N], ord[MAX];
bool used[MAX];

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);

	MEM(used, false);

	REPU(i, 1, MAX) ord[i] = N;

	cin >> n >> k >> m;
	REPU(i, 0, m) {
		cin >> b[i];
		if (b[i] < MAX) used[b[i]] = true;
	}

	if (used[1]) {
		int good = -1;
		REPU(i, 1, MAX) if (!used[i]) {
			good = i; break;
		}
		REPU(i, 0, n) printf("%d%c", good, " \n"[i == n - 1]);
	}
	else {
		ans[0] = 1, ord[1] = 1;
		int pos = 1;
		REPU(i, 2, MAX) if (!used[i] && ord[i] > k) {
			ans[pos++] = i;
			ord[i] = 1;
			if (pos == n) break;
			for (int j = i + i; j < MAX; j += i) {
				amin(ord[j], ord[i] + ord[j / i]);
				if (ord[j] <= k) used[j] = true;
			}
		}
		REPU(i, 0, n) printf("%d%c", ans[i], " \n"[i == n - 1]);
	}
	
	return 0;
}

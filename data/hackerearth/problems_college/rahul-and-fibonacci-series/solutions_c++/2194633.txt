#include <bits/stdc++.h>
#define ll long long
#define mod 1000000007
using namespace std;
ll int mysqr(ll int a)
{
	return (a*a)%mod;
}
ll int mypow(ll int a,ll int n)
{
	if(n==0)
	return 1;
	if(n==1)
	return a;
	if((n%2)==0)
	return mysqr(mypow(a,n/2));
	return (a * mysqr(mypow(a,n/2)))%mod;
}
ll int non_fibo(ll int n)
{
	ll int a=0,b=1,c=1;
	while(n>0)
	{
		a=b;
		b=c;
		c=a+b;
		n-=(c-b-1);
	}
	n+=(c-b-1);
	return b+n;
}
vector<ll int> mat_mul(vector<ll int> v1,vector<ll int> v2)
{
	ll int a1=v1[0],b1=v1[1],c1=v1[2],d1=v1[3];
	ll int a2=v2[0],b2=v2[1],c2=v2[2],d2=v2[3];
	vector<ll int> v(4);
	v[0]=((a1*a2)%mod + (b1*c2)%mod)%mod;
	v[1]=((a1*b2)%mod+(b1*d2)%mod)%mod;
	v[2]=((c1*a2)%mod+(d1*c2)%mod)%mod;
	v[3]=((c1*b2)%mod+(d1*d2)%mod)%mod;
	return v;
}
vector<ll int> mat_sqr(vector<ll int> v)
{
	return mat_mul(v,v);
}
vector<ll int> fibo(ll int n)
{
	vector<ll int> mat(4);
	mat[0]=1;mat[1]=1;mat[2]=1;mat[3]=0;
	if(n==1)
	return mat; //0-based index
	else if((n%2)==0)
	return mat_sqr(fibo(n/2));
	return mat_mul(mat,mat_sqr(fibo(n/2)));
}
int main()
{
	map<ll int,ll int> m;
	ll int test;
	scanf("%lld",&test);
	while(test--)
	{
		ll int n;
		ll int a,ans;
		vector<ll int> b;
		scanf("%lld",&n);
		if(m[n]==0)
		{
			a=non_fibo(n);
			b=fibo(n);
			ans=mypow(a,b[1]);
			m[n]=ans;
		}
		else
		ans=m[n];
		printf("%lld\n",ans);
	}
	return 0;
}

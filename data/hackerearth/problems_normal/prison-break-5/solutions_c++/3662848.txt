#include<iostream>
using namespace std;

int T, N;
int i, j, k, tc;
int A[22][22], B[22][22];
int tmp, Answer;
bool visited[22][22];

void initialize() {
	Answer = 0;
	for (k = 1; k <= N; k++) {
		for (j = 1; j <= N; j++) {
			visited[k][j] = false;
		}
	}
}

void DFS(int x, int y) {
	visited[x][y] = true;

	if (x == N && y == N) {
		Answer++;
	}

	// DFS left
	if (A[x][y - 1] == 0 && visited[x][y - 1] == false) {
		visited[x][y - 1] = true;
		DFS(x, y - 1);
		
		// backtrack
		visited[x][y - 1] = false;
	}

	// DFS right
	if (A[x][y + 1] == 0 && visited[x][y + 1] == false) {
		visited[x][y + 1] = true;
		DFS(x, y + 1);

		// backtrack
		visited[x][y + 1] = false;
	}

	// DFS up
	if (A[x - 1][y] == 0 && visited[x - 1][y] == false) {
		visited[x - 1][y] = true;
		DFS(x - 1, y);

		// backtrack
		visited[x - 1][y] = false;
	}

	// DFS down
	if (A[x + 1][y] == 0 && visited[x + 1][y] == false) {
		visited[x + 1][y] = true;
		DFS(x + 1, y);

		// backtrack
		visited[x + 1][y] = false;
	}
}

int main() {
	// freopen("sample_input.txt", "r", stdin);
	cin >> T;

	for (tc = 1; tc <= T; tc++) {
		cin >> N;
		for (i = 0; i <= N + 1; i++) {
			for (j = 0; j <= N + 1; j++){
				if (!i || !j || i == N + 1 || j == N + 1) {
					A[i][j] = 1;
				}
				else {
					cin >> A[i][j];
				}
			}
		}

		initialize();
		DFS(1, 1);
		cout << Answer << endl;
	}
}

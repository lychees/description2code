#include <iostream>
#include<math.h>
using namespace std;
long long b[811] = { 0 };
long long c[811][11] ;
long long coeff(long long power, long long n)
{
	if (power <0||power>81*n)
		return 0;
	else if (n == 1)
		return b[power];
	else if (c[power][n] != -1)
		return c[power][n];
	else
	{
	c[power][n] = coeff(power, n - 1) + coeff(power - 1, n - 1) + coeff(power - 4, n - 1) + coeff(power - 9, n - 1) + coeff(power - 16, n - 1) + coeff(power - 25, n - 1) + coeff(power - 36, n - 1) + coeff(power - 49, n - 1) + coeff(power - 64, n - 1) + coeff(power - 81, n - 1);
	return c[power][n];
    }
}
int counter(long long  &p)
{


	while (p != 89 && p != 1)
	{
		long long s = 0;
		while (p>0)
		{
			s += (p % 10)*(p % 10);
			p = p / 10;


		}
		p = s;

		if (p != 89 && p != 1)
		{

			counter(p);
		}
	}

	if (p == 1)
	{
		return 1;
	}
	else
	{
		return 0;
	}

}





int main()
{
	int n;
	cin >> n;
	long long k = 1;
	long long  count1 = 0;
	long long p;
	long long a[810];
	long long t = 0;
	for (int i = 0; i < 10; i++)
		b[i*i] = 1;
	for (long long i = 0; i < 811; i++)
	{
		for (long long j = 0; j < 11; j++)
			c[i][j] = -1;
	}
	for (int i = 1; i <= n; i++)
	{

		k *= 10;



	}

	for (long long l = 1; l <= 81 * n; l++)
	{
		p = l;
		if (counter(p)>0)
		{  
			a[t] = l;
			t++;
		}

	}

	for (long long i = 0; i < t; i++)
	{ 
	   count1 += coeff(a[i], n);
	
	}

	cout << (k - count1-1) << " " << count1+1;
	
	return 0;

}

#include <bits/stdc++.h>
#define lli long long int
#define s(x) scanf("%lld", &x)
#define MAXX 100010

using namespace std;

// 1 based indexing

lli bit[2][MAXX],arr[MAXX];
lli n;

lli query(lli *arr, lli a)
{
    if (a > 0)
        return (arr[a] + query(arr, a-(a&(-a))));
    else
        return 0;
}

void update(lli *arr, lli a, lli val)
{
    if (a <= n) {
        arr[a] += val;
        update(arr, a+(a&(-a)), val);
    }
}

void rg_upd(lli a, lli b, lli val)
{
    lli i = val;

    update(bit[0], a, i);
    update(bit[0], b+1, -i);

    update(bit[1], a, i*(a-1));
    update(bit[1], b+1, -i*(b));
}

lli rg_qury(lli a, lli b)
{
    lli p,q,i,j;

    p = query(bit[0], b) * b - query(bit[1], b);
    q = query(bit[0], a-1) * (a-1) - query(bit[1], a-1);

    p = p - q;

  //  cout << p << " " << i << endl;
   return (p);
}

int main()
{
    lli tcase,k,sum,i,j,lt,rt,ans,temp;

    s(tcase);

    while (tcase--) {
        s(n);
        s(k);

        for (i = 1; i <= n; ++i) {
            s(arr[i]);
        }

        for (i = 0; i <= n+1; ++i) {
            bit[0][i] = bit[1][i] = 0;
        }

        for (i = 1; i <= n; ++i) {
            if (arr[i] <= k) {
                break;
            }
        }

        if (i == n+1) {
            for (i = 1; i <= n; ++i)
                cout << 0 << " ";
            cout << endl;
        } else {
            lt = rt = i;
            sum = arr[i];
            ++i;
            for (; i <= n;) {
                if (lt > rt) {
                    while ((i <= n) && (arr[i] > k)) {
                        ++i;
                    }
			//		cout << i << " hd d" << endl;
                    if (i > n)
                        break;

                    lt = rt = i;
                    sum = arr[i];
                    ++i;
                    continue;
                }
                if (sum + arr[i] > k) {
                //	cout << rt-lt+1 << " aa " << endl;
                    rg_upd(1, rt-lt+1, 1);
                    sum -= arr[lt];
                    ++lt;
                } else {
                    sum = sum +arr[i];
                    ++rt;
                    ++i;
                }
            }
            while (lt <= rt) {
				rg_upd(1, rt-lt+1, 1);
				++lt;
            }
            for (i = 1; i <= n; ++i) {
                printf("%lld ", rg_qury(i,i));
            }
            printf("\n");
        }
    }


    return 0;
}

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

vector<int> pos[101];
int arr[100000];
bool visited[100000];
bool done[101];
int main()
{
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;++i)
    {
    	scanf("%d",&arr[i]);
    	pos[arr[i]].push_back(i);
    }
    int qr,s,m,e;
    scanf("%d",&qr);
    while(qr--)
    {
    	scanf("%d %d %d",&s,&m,&e);
    	memset(visited,0,sizeof(visited));
    	memset(done,0,sizeof(done));
    	queue<pair<int,int> > q;
    	q.push(make_pair(s,0));
    	int moves=-1;
    	while(!q.empty())
    	{
    		pair<int,int> p=q.front();
    		q.pop();
    		if(p.first==m)
    		{
    			moves=p.second;
    			break;
    		}
    		if(p.first>0 && !visited[p.first-1])
    		{
    			q.push(make_pair(p.first-1,p.second+1));
    			visited[p.first-1]=1;
    		}
    		if(done[arr[p.first]]==0){
    		for(int i=0;i<pos[arr[p.first]].size();++i)
    		{
    			if(!visited[pos[arr[p.first]][i]])
    			{
    				q.push(make_pair(pos[arr[p.first]][i],p.second+1));
    				visited[pos[arr[p.first]][i]]=1;
    			}
    		}
    		done[arr[p.first]]=1;
    		}
    	}
    	if(moves==-1)
    	{
    		printf("-1\n");
    		continue;
    	}
    	queue<pair<int,int> > q1;
    	memset(visited,0,sizeof(visited));
    	memset(done,0,sizeof(done));
    	q1.push(make_pair(m,0));
    	int moves1=-1;
    	while(!q1.empty())
    	{
    		pair<int,int> p=q1.front();
    		q1.pop();
    		if(p.first==e)
    		{
    			moves1=p.second;
    			break;
    		}
    		if(p.first>0 && !visited[p.first-1])
    		{
    			q1.push(make_pair(p.first-1,p.second+1));
    			visited[p.first-1]=1;
    		}
    		if(done[arr[p.first]]==0){
    		for(int i=0;i<pos[arr[p.first]].size();++i)
    		{
    			if(!visited[pos[arr[p.first]][i]])
    			{
    				q1.push(make_pair(pos[arr[p.first]][i],p.second+1));
    				visited[pos[arr[p.first]][i]]=1;
    			}
    		}
    		done[arr[p.first]]=1;
    		}
    	}
    	if(moves1==-1)
    	{
    		printf("-1\n");
    		continue;
    	}
    	printf("%d\n",moves+moves1);
    }
    return 0;
}

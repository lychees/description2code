#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <map>
#include <cctype>
#include <cmath>
#include <utility>
using namespace std;

typedef pair<int,int> ii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vl;

int minans;

void dfs(int row, int col, int n, vector<vector<char>> &mat, int ans){
	if(mat[row][col] == 'E'){
		minans = min(minans, ans);
		return;
	}
	else{
		int dr[] = {1,-1, 0, 0};
		int dc[] = {0, 0, 1,-1};
		
		for(int i=0; i<4; ++i){
			
			if( (row + dr[i])>=0 && (row + dr[i])<n && \
				(col + dc[i])>=0 && (col + dc[i])<n && \
				mat[row + dr[i]][col + dc[i]] == 'E' ){
					minans = min(minans, ans+1);
					return;
			}
			
			
			else if( (row + dr[i])>=0 && (row + dr[i])<n && \
				(col + dc[i])>=0 && (col + dc[i])<n && \
				mat[row + dr[i]][col + dc[i]] == 'P' ){
				//cout<<row + dr[i]<<":"<<col + dc[i]<<" ";
				mat[row + dr[i]][col + dc[i]] = 'X';
				dfs(row + dr[i], col + dc[i], n, mat, ans+1);
				mat[row + dr[i]][col + dc[i]] = 'P';
			}
		}
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int n;
	cin>>n;
	
	vector<vector<char>> mat(n, vector<char>(n));
	int startr = -1, startc = -1; 
	for(int i=0; i<n; ++i){
		for(int j=0; j<n; ++j){
			cin>>mat[i][j];
			if(mat[i][j] == 'S'){
				startr = i;
				startc = j;
			}
		}
	}
	
	minans = 99999999;
	dfs(startr, startc, n, mat,0);
	cout<<minans;
	
	
	return 0;
}


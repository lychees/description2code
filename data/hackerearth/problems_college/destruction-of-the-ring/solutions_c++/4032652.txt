#include <stdio.h>

#define MAX_N 1000000
#define MOD 1000000007

#define inverseEuler(n) power(n, MOD-2)

long long factorial[2*MAX_N];
int maxSet = 1;

void initializeFact(void) {
	int i;
	factorial[0] = 1;
	for(i = 1; i <= MAX_N; i++) 
		factorial[i] = (i*factorial[i-1])%MOD;
}

long long power(int a, int b) {
	long long x = 1, y = a;
	while(b > 0) {
		if(b%2 == 1) {
			x *= y;
			if(x > MOD) x %= MOD;
		}
		y *= y;
		if(y > MOD) y %= MOD;
		b /= 2;
	}
	return x;
}

long long Comb(int n, int r) {
	if(n > maxSet) {
		int i = maxSet+1;
		maxSet = n;
		for(; i <= maxSet; i++) {
			factorial[i] = (i*factorial[i-1])%MOD;
		}
	}
	
	return (factorial[n]*((inverseEuler(factorial[n-r])*inverseEuler(factorial[r]))%MOD))%MOD;
}

int main(void) {
	int t;
    int n, m;
    factorial[1] = 1;
    factorial[0] = 1;
    scanf("%d", &t);
    while(t--) {
    	scanf("%d%d", &n, &m);
    	printf("%lld\n", Comb(n-1+m-1, m-1));
    }
    return 0;
}

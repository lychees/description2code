#include <iostream>
#include <queue>
#include <vector>
using namespace std;

queue <long long int> bfs;
vector <long long int> rightVec,leftVec;
vector <long long int> :: iterator it;
long long int val = 0;

bool checkAllZeroes()
{
	val = 0;
	long long int count = 0;
	queue <long long int> q;
	while(!bfs.empty())
	{
		if(bfs.front() != 0)
		{
		  val = bfs.front();	 
		  count++;
		}  
		q.push(bfs.front());
		bfs.pop();
	}
	while(!q.empty())
	{
		bfs.push(q.front());
		q.pop();
	}
	if(count == 1)
	return true;
	else if(count > 1)
	return false;
}

long long int extractFront()
{
	long long int first = bfs.front();
	if(first == 0)
	{
		while((bfs.size() > 1) && (bfs.front() == 0))
		bfs.pop();
	}
    first = bfs.front();
    return first;
}


long long int extractLast()
{
	long long int last = bfs.front();
	while(!bfs.empty())
	{
		if(bfs.front() != 0)
		last = bfs.front();
		bfs.pop();
	}
	return last;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    	long long int n, rightVar = 0;
    	long long int x,i;
    	cin>>n;
    	i = 1;
    	while(i <= n)
    	{
    		while(i <= (2*rightVar + 1))
    		{
    			cin>>x;
    			bfs.push(x);
    			i++;
    		}
    		
    		if(bfs.size() == 1)
    		rightVec.push_back(bfs.front());
    		
    		else if (bfs.size() > 1)
    		{
 
    			if(checkAllZeroes() == true)
    			rightVec.push_back(val);
    			else
    			{
    		    leftVec.push_back(extractFront());
    		    rightVec.push_back(extractLast());
    			}
    		}
    		
    		rightVar = 2*(rightVar) + 1;
    		
    		while(!bfs.empty())
    		bfs.pop();
    	}
    	for(it = rightVec.begin(); it != rightVec.end() ; it++)
    	if(*it != 0)
    	cout<<*it<<endl;
    	
    	for(it = leftVec.begin(); it != leftVec.end() ; it++)
    	if(*it != 0)
    	cout<<*it<<endl;
        
        rightVec.clear();
        leftVec.clear();
        while(!bfs.empty())
        bfs.pop();
        
        cout<<endl;
    }
    return 0;
}

#include <iostream>
#include <queue>

using namespace std;
struct vertex
{
	int r,c;
	vertex(int a,int b)
	{
		r=a;
		c=b;
	}
};

int n,m,q,d,x,y,count=0;
int grid[105][105],black[105][105];
int turnr[4]={+0,+1,+0,-1};
int turnc[4]={+1,+0,-1,+0};
queue <vertex> Q;

void calcUsingBfs()
{
	Q.push(vertex(x,y));
	
	while(!Q.empty())
	{
		vertex temp = Q.front(); Q.pop();
		black[temp.r][temp.c] = 1;
		count+=1;
		
		for(int i=0; i<4; i++)
		{
			int nr =temp.r + turnr[i];
			int nc =temp.c + turnc[i];
			
			if(nr<n && nr>=0 && nc<m && nc>=0 && !black[nr][nc] && abs(grid[temp.r][temp.c]-grid[nr][nc])<=d)
			{
				Q.push(vertex(nr,nc));
				black[nr][nc]=1;
			}
			
		}
		
	}
	
	printf("\n%d",count);
	
}
int main()
{

	scanf("%d %d %d",&n,&m,&q);
	for(int i=0; i<n; i++)
	{
		for(int j=0; j<m; j++)
		{
			scanf("%d",&grid[i][j]);
			
		}
	
	}

	for(int i=0; i<q; i++)
	{
		
		scanf("%d %d %d",&x,&y,&d);
		x-=1; y-=1;
		
		calcUsingBfs();
		
		
		for(int r=0; r<n; r++)
		{
		for(int c=0; c<m; c++)
		{
			black[r][c]=0;
		
		}
		}
		while(!Q.empty())
		{
			Q.pop();
		}
		count = 0;
		
		
	}
	
	
}

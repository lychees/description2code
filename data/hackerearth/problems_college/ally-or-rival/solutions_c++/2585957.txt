/*
   Beauty of code is duty of mine !
*/

#include <iostream>
#include <cstdio>
using namespace std;

typedef long long LL;
#define FOR(i,p,n) for(int i=p; i<n; i++)
#define ROF(i,a,b) for(int i=a; i>b; --i)
const int maxn = 1000100;

int scan_d() 
{
    int ip=getchar_unlocked(),ret=0,flag=1;
	for(;ip<'0'||ip>'9';ip=getchar_unlocked())
	   if(ip=='-'){
	      flag=-1;
		  ip=getchar_unlocked();
		  break;
	   }
	for(;ip>='0'&&ip<='9';ip=getchar_unlocked())
	    ret=ret*10+ip-'0';
	return flag*ret;
}

struct Pair {
	   int par, status;
}me[maxn];

Pair Find(int x)
{
	if (me[x].par == x)
	    return me[x];
    Pair temp = Find(me[x].par);
    me[x].par = temp.par;
	me[x].status = (me[x].status + temp.status) % 2;
	return me[x]; 
}

void setStatus(Pair x, Pair y, int type)
{
	 if (type == 0) 
	     me[x.par].status = (x.status + y.status) % 2;
     else 
	     me[x.par].status = 1 - (x.status + y.status) % 2;
	 return;
}

void Union(int x, int y, int type)
{
    Pair xroot = Find(x);
    Pair yroot = Find(y);
 
    me[xroot.par].par = me[yroot.par].par;
    setStatus(xroot, yroot, type);
    return;
}

void checkally(int x, int y)
{
	 Pair xroot = Find(x);
     Pair yroot = Find(y);
     if (xroot.par == yroot.par && (xroot.status + yroot.status) % 2 == 0) puts("YES");
     else puts("NO");
     return;
}

void checkrival(int x, int y)
{
	 Pair xroot = Find(x);
     Pair yroot = Find(y);
     if (xroot.par == yroot.par && (xroot.status + yroot.status) % 2 == 1) puts("YES");
     else puts("NO");
     return;
}

void makeally(int x, int y)
{
	 Pair xroot = Find(x);
     Pair yroot = Find(y);
     if (xroot.par == yroot.par && (xroot.status + yroot.status) % 2 == 1) puts("-1");
	 else 
	 	   Union(x, y, 0);
	 return;
}

void makerival(int x, int y)
{
	 Pair xroot = Find(x);
     Pair yroot = Find(y);
     if (xroot.par == yroot.par && (xroot.status + yroot.status) % 2 == 0) puts("-1");
	 else 
	 	   Union(x, y, 1);
	 return;
}

int main()
{
   ios::sync_with_stdio(false);
   int n, Q;
   n = scan_d();
   Q = scan_d();
   
   for (int v = 0; v <= n; ++v)
   {
        me[v].par = v;
        me[v].status = 0;
   }
   
   while (Q--) {
   	      int type, x, y;
   	      type = scan_d();
   	      x = scan_d();
   	      y = scan_d();
   	      if (type == 1) checkally(x, y); else
   	      if (type == 2) checkrival(x, y); else
   	      if (type == 3) makeally(x, y); else
   	      if (type == 4) makerival(x, y);
   }
   return 0;
}

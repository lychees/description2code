#include<iostream>
#include<vector>
#include<stdio.h>
#include<math.h>
#include<algorithm>
#include<map>
#include<string>
#include <sstream>
#include<queue>
using namespace std;
#define f(i,a,b) for(ll i=a;i<b;i++)
#define ff(i,a,b,c) for(int i=a;i<b;i+=c)
#define w(n) while(n>0)
#define vi vector<int>
#define vll vector<long long int>
typedef long long int ll;
typedef int I;
typedef string S;
ll mod_pow(ll a,ll n,ll b){ll res = 1;while(n){if(n&1) {res = (res*a)%b;}a = (a*a)%b;n >>= 1;}return res%b;}
ll mod_div(ll a,ll b,ll md){ll ans = (a*mod_pow(b,md-2,md))%md; return ans;}
ll mul(ll a,ll b,ll md){ return (ll)(a*b)%md;}
ll gcd(ll n,ll m){if(m<=n && n%m==0)return m;if(n<m)return gcd(m,n);else return gcd(m,n%m);}
ll add(ll a,ll b,ll md){a=((a%md)+(b%md))%md;return a;}
ll sub(ll a,ll b,ll md){return add(a,md-b,md);}
ll digit_sum(ll x){ll sum=0;while(x>0){sum+=x%10;x/=10;}return sum;}
ll mod=1000000000+7;
ll M=1000005;
ll bit[27][1000005];
void init()
{
    f(j,0,27)
    {
    f(i,0,M)bit[j][i]=0;
    }
}
void add(ll i,I val,I c)
{
    while(i<M)
    {
        bit[c][i]+=val;
        i+=(i & -i);
    }
}
ll get(I i,I c)
{
    if(i==0)return 0;
    ll sum=0;
    w(i)
    {
        sum+=bit[c][i];
        i-=(i & -i);
    }
    return sum;
}
I main()
{
    init();
    I n,q;
    cin>>n>>q;
    S s;
    cin>>s;
    f(i,0,n)
        add(i+1,1,s[i]-97);
    w(q)
    {
        q--;
        I in;
        cin>>in;
        if(in==1)
        {
            I l,r,k;
            cin>>l>>r>>k;
            bool check=true;
            f(i,0,27)
            {
                ll sum=get(r,i)-get(l-1,i);
                if((ll)k<=sum){cout<<(char)(i+97)<<endl;check=false;break;}
                else k-=sum;
            }
            if(check)cout<<"Out of range"<<endl;
        }
        else if(in==0)
        {
            I in;char c;
            cin>>in>>c;
            add(in,-1,s[in-1]-97);
            s[in-1]=c;
            add(in,1,s[in-1]-97);
        }
    }
}

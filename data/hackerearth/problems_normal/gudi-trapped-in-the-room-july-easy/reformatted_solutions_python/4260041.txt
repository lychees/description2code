#!/usr/bin/env python
# -*- coding:utf-8 -*-

import sys
import math
import random
import operator
from string import ascii_lowercase
from string import ascii_uppercase
from fractions import Fraction, gcd
from decimal import Decimal, getcontext
from itertools import product, permutations, combinations
from Queue import Queue, PriorityQueue
from collections import deque, defaultdict, Counter
getcontext().prec = 100

MOD = 10**9 + 7
INF = float("+inf")

if sys.subversion[0] != "CPython":  # PyPy?
    def raw_input(): return sys.stdin.readline().rstrip()
pr = lambda *args: sys.stdout.write(" ".join(str(x) for x in args) + "\n")
epr = lambda *args: sys.stderr.write(" ".join(str(x) for x in args) + "\n")
die = lambda *args: pr(*args) ^ exit(0)

read_str = raw_input


def read_strs():
    return raw_input().split()


def read_int():
    return int(raw_input())


def read_ints():
    return map(int, raw_input().split())


def read_float():
    return float(raw_input())


def read_floats():
    return map(float, raw_input().split())


"---------------------------------------------------------------"


def add(s, a):
    return tuple((d + (a * (i % 2))) % 10 for i, d in enumerate(s))


def rot(s, n):
    n %= len(s)
    return s[-n:] + s[:-n]


t = read_int()
for t in xrange(t):
    s = tuple(map(int, read_str()))
    a, h = read_ints()
    pq = PriorityQueue()
    pq.put(s)
    ans = s
    seen = {s}
    while not pq.empty():
        t = pq.get()
        t1 = rot(t, h)
        t2 = add(t, a)
        # print t, "->", t1, t2, "a", a, "h", h
        good = 0
        for t in (t1, t2):
            if t not in seen:
                seen.add(t)
                pq.put(t)
                ans = min(ans, t)
                if ans == (0,) * len(s):
                    good = 1
                    break
        if good:
            break
    print "".join(map(str, ans))

#include <iostream>
using namespace std;
int n,wt[101],val[101],K[101][10001],W;
int r=0;
int e[101];
int max(int a,int b)
{
	int y=a>b?a:b;
	return y;
}
int knapSack(int W, int wt[], int val[], int n)
{
   int i, w;
   
 
   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 {
                 	K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],K[i-1][w]);
                
                 }
           else
                 K[i][w] = K[i-1][w];
       }
   }
 
   return K[n][W];
}


int main()
{
    int t;
    cin>>t;
    for(int g=0;g<t;g++)
    {
    	cin>>n;
    	cin>>W;
    	for(int i=0;i<n;i++)
    	{
    		int x,y;
    		cin>>x>>y;
    		val[i]=x;
    	//	cout<<val[i]<<" ";
    		wt[i]=y;
    	//	cout<<wt[i]<<" ";
    	}
    	//cout<<endl;
    	for(int i=0;i<n;i++)
    	for(int j=0;j<n;j++)
    	K[i][j]=0;
    int u=knapSack(W,wt,val,n);
 int i=n;
 int j=W;
 r=0;
 int wwt=0;
       for(i=0;i<=W;i++)
   		{
   			if(K[n][wwt]-wwt<K[n][i]-i)
   				wwt=i;
   		}
   		cout<<wwt<<" "<<K[n][wwt]-wwt+W<<endl;

 
    }
    return 0;
}

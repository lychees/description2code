
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstdlib>
#include<queue>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<climits>
#include<vector>
#include<cstring>
#include<stack>

using namespace std;

#define REP(i,s,n)  for (int i=(s),_n=(n);i<=_n;i++)
#define FOR(i,s,n)  for (int i=(s),_n=(n);i<_n;i++)
#define REPD(i,e,s)  for (int i=(e),_s=(s);i>=_s;i--)
#define tr(container, it) \
   for (typeof(container.begin()) it=container.begin(); it!=container.end();it++)
#define ALL(x) x.begin(),x.end()
#define debug(args...)	{dbg,args; cerr<<endl;}
#define PB push_back
#define MP make_pair
#define EPS 1e-8
#define INF (int)(1e9)
typedef long long LL;

struct debugger {
   template<typename T> debugger& operator , (const T& v) {	
      cerr<<v<<" ";	
      return *this;	
   }
} dbg;

int vis[1000010];
int nxt[1000010];
int stk[1000010];

int dfs(int cur) {
   if (vis[cur]!=0) return vis[cur];
   if (stk[cur]==1) {
      int len=1;
      int tmp=cur;
      int sv=cur;
      while (nxt[tmp]!=sv) {
	 tmp=nxt[tmp];
	 len++;
      }
      tmp=cur;
      while (nxt[tmp]!=sv) {
	 tmp=nxt[tmp];
	 vis[tmp]=len;
      }
      vis[sv]=len;
  //    cout << "popopo: "<< sv << " " << vis[sv] << endl;
      return vis[sv];
   }
   stk[cur]=1;
   int varr=dfs(nxt[cur])+1;
  // if (cur==3) {
      //	 cout << nxt[cur] << endl;
    //  	 cout << "asd:" << vis[3] << endl;
      //	 cout << "bleh" << vis[cur] << endl;
 //  }
   if (vis[cur]==0) vis[cur]=varr;
   stk[cur]=0;
   return vis[cur];
}

int main() {
   int t;
   scanf("%d",&t);
   while (t--) {
      memset(vis,0,sizeof vis);
      memset(stk,0,sizeof stk);
      int n;
      scanf("%d",&n);
      FOR(i,0,n) scanf("%d",&nxt[i]);
      FOR(i,0,n) {
	 int waste=dfs(i);
      }
      int mx=-1;
      FOR(i,0,n) {
//	 cout << vis[i] << endl;
	 mx=max(mx,vis[i]);
      }
      FOR(i,0,n) if (vis[i]==mx) {
	 cout << i << endl;
	 break;
      }
   }
   return 0;
}
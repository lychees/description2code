#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <unordered_set>
using namespace std;

typedef long long ll;

ll r, p, x, y, t;

class node {
	public:
	ll id;
	ll val = 0;
	bool visited = false;
	vector<ll> adjlist;
	vector<ll> prelist;
	vector<ll> timlist;
};

vector<node> graph;

ll dfs( ll i ) {
	ll c = 0;
	
	if( graph[i].val != 0 )
		return graph[i].val;
	
	for( ll x = 0; x < graph[i].adjlist.size(); x++) {
		ll nid = graph[i].adjlist[x];
		ll nwt = graph[i].timlist[x];
		c = max( c, nwt+dfs(nid));
	}
	
	graph[i].val = c;
	
	return c;
}

int main()
{
    cin >> r >> p;
    
    graph = vector<node>( r, node());
    
    for( int i = 0; i < p; i++ ) {
    	scanf("%lld %lld %lld", &x, &y, &t);
    	x--;
    	y--;
    	t += 2;
    	graph[y].adjlist.push_back( x );
    	graph[x].prelist.push_back( y );
    	graph[y].timlist.push_back( t );
    }
    
    ll maxm = 0;
    
    // if indegree is zero, start dfs and store the values
    for( int i = 0; i < r; i++ ) {
    	if( !graph[i].visited && graph[i].prelist.empty() )
    		maxm = max( maxm, dfs(i));
    }
    
    cout << maxm;
    
    return 0;
}
